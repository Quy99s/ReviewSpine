System.register("chunks:///_virtual/AlignFullScreenButton.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, log, sys, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      log = module.log;
      sys = module.sys;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "4607cFKlhRB97qftGoKlR4P", "AlignFullScreenButton", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var AlignFullScreenButton = exports('AlignFullScreenButton', (_dec = ccclass('AlignFullScreenButton'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(AlignFullScreenButton, _Component);

        function AlignFullScreenButton() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.alignFunc = null;

          _initializerDefineProperty(_this, "position", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = AlignFullScreenButton.prototype;

        _proto.onLoad = function onLoad() {
          this.node.on('UPDATE_POSITION', this.updatePosition.bind(this));
        };

        _proto.start = function start() {
          this.updatePosition();
        };

        _proto.updatePosition = function updatePosition() {
          log('update button position ' + this.position);

          if (sys.isBrowser && sys.isMobile) {
            if (this.position == "TOP_RIGHT") {
              this.alignFunc = this.alignTopRight.bind(this);
            } else if (this.position == "BOT_LEFT") {
              this.alignFunc = this.alignBotLeft.bind(this);
            } else if (this.position == "BOT_LEFT_23") {
              this.alignFunc = this.alignBotLeft23.bind(this);
            } else if (this.position == "CENTER_LEFT") {
              this.alignFunc = this.alignCenterLeft.bind(this);
            } //add your align here


            if (this.alignFunc) {
              this.alignFunc();
              window.addEventListener('resize', this.alignFunc);
            }
          }
        };

        _proto.alignTopRight = function alignTopRight() {
          var enterFullscreen = document.getElementById('enterFullscreen');
          var exitFullscreen = document.getElementById('exitFullscreen');

          if (window.innerWidth > window.innerHeight) {
            if (enterFullscreen && exitFullscreen) {
              this.removeAllClass(enterFullscreen);
              this.removeAllClass(exitFullscreen);
              enterFullscreen.classList.add("alignTopRight");
              exitFullscreen.classList.add("alignTopRight");
            }
          } else {
            if (enterFullscreen && exitFullscreen) {
              this.removeAllClass(enterFullscreen);
              this.removeAllClass(exitFullscreen);
              enterFullscreen.classList.add("alignBotRight");
              exitFullscreen.classList.add("alignBotRight");
            }
          }
        };

        _proto.alignBotLeft = function alignBotLeft() {
          var enterFullscreen = document.getElementById('enterFullscreen');
          var exitFullscreen = document.getElementById('exitFullscreen');

          if (window.innerWidth > window.innerHeight) {
            if (enterFullscreen && exitFullscreen) {
              this.removeAllClass(enterFullscreen);
              this.removeAllClass(exitFullscreen);
              enterFullscreen.classList.add("alignBotLeft");
              exitFullscreen.classList.add("alignBotLeft");
            }
          } else {
            if (enterFullscreen && exitFullscreen) {
              this.removeAllClass(enterFullscreen);
              this.removeAllClass(exitFullscreen);
              enterFullscreen.classList.add("alignTopLeft");
              exitFullscreen.classList.add("alignTopLeft");
            }
          }
        };

        _proto.alignBotLeft23 = function alignBotLeft23() {
          var enterFullscreen = document.getElementById('enterFullscreen');
          var exitFullscreen = document.getElementById('exitFullscreen');

          if (window.innerWidth > window.innerHeight) {
            if (enterFullscreen && exitFullscreen) {
              this.removeAllClass(enterFullscreen);
              this.removeAllClass(exitFullscreen);
              enterFullscreen.classList.add("alignBotLeft23");
              exitFullscreen.classList.add("alignBotLeft23");
            }
          } else {
            if (enterFullscreen && exitFullscreen) {
              this.removeAllClass(enterFullscreen);
              this.removeAllClass(exitFullscreen);
              enterFullscreen.classList.add("alignTopLeft23");
              exitFullscreen.classList.add("alignTopLeft23");
            }
          }
        };

        _proto.alignCenterLeft = function alignCenterLeft() {
          var enterFullscreen = document.getElementById('enterFullscreen');
          var exitFullscreen = document.getElementById('exitFullscreen');

          if (window.innerWidth > window.innerHeight) {
            if (enterFullscreen && exitFullscreen) {
              this.removeAllClass(enterFullscreen);
              this.removeAllClass(exitFullscreen);
              enterFullscreen.classList.add("enterFullScreen_Landscape");
              exitFullscreen.classList.add("exitFullScreen_Landscape");
            }
          } else {
            if (enterFullscreen && exitFullscreen) {
              this.removeAllClass(enterFullscreen);
              this.removeAllClass(exitFullscreen);
              enterFullscreen.classList.add("enterFullScreen_Portrait");
              exitFullscreen.classList.add("exitFullScreen_Portrait");
            }
          }
        };

        _proto.removeAllClass = function removeAllClass(element) {
          element.classList.remove('alignTopRight', 'alignBotRight', 'alignTopLeft', 'alignBotLeft', 'exitFullscreen_Landscape', 'exitFullScreen_Portrait', 'alignBotLeft23', 'alignTopLeft23', 'enterFullScreen_Landscape', 'enterFullScreen_Portrait');
        };

        _proto.onDestroy = function onDestroy() {
          if (sys.isBrowser && sys.isMobile && this.alignFunc) {
            window.removeEventListener('resize', this.alignFunc);
          }
        };

        return AlignFullScreenButton;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "position", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "TOP_RIGHT";
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/animateNumberLabel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Label, Component, formatMoney, formatWalletMoney;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      formatMoney = module.formatMoney;
      formatWalletMoney = module.formatWalletMoney;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "4eb529uDf5AQaMqTM8WSBKT", "animateNumberLabel", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var AnimateNumberLabel = exports('AnimateNumberLabel', (_dec = ccclass('AnimateNumberLabel'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(AnimateNumberLabel, _Component);

        function AnimateNumberLabel() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.currentValue = void 0;
          _this.timer = void 0;
          return _this;
        }

        var _proto = AnimateNumberLabel.prototype;

        _proto.onLoad = function onLoad() {
          this.node.onUpdateValue = this.onUpdateValue.bind(this);
          this.node.onUpdateWallet = this.onUpdateWallet.bind(this);
          this.node.onUpdateWinValue = this.onUpdateWinValue.bind(this);
          this.node.resetValue = this.resetValue.bind(this);
        };

        _proto.resetValue = function resetValue() {
          if (!this.node) return;
          clearInterval(this.timer);
          var label = this.node.getComponent(Label);
          label.string = '';
          this.currentValue = 0;
        };

        _proto.onUpdateValue = function onUpdateValue(end, animationDuration, acceptRunDown, prefix, suffixes) {
          var _this2 = this;

          if (animationDuration === void 0) {
            animationDuration = 3000;
          }

          if (acceptRunDown === void 0) {
            acceptRunDown = true;
          }

          if (prefix === void 0) {
            prefix = "";
          }

          if (suffixes === void 0) {
            suffixes = "";
          }

          clearInterval(this.timer);
          if (!this.node) return;
          var label = this.node.getComponent(Label);
          var start = this.currentValue ? this.currentValue : 0;

          if (!acceptRunDown && end < start) {
            this.currentValue = end;
            label.string = prefix + formatMoney(this.currentValue) + suffixes;
            return;
          } // assumes integer values for start and end


          var range = end - start; // no timer shorter than 50ms (not really visible any way)

          var minTimer = 50; // calc step time to show all interediate values

          var stepTime = Math.abs(Math.floor(animationDuration / range)); // never go below minTimer

          stepTime = Math.max(stepTime, minTimer); // get current time and calculate desired end time

          var startTime = new Date().getTime();
          var endTime = startTime + animationDuration;
          this.timer;

          var run = function run() {
            var now = new Date().getTime();
            var remaining = Math.max((endTime - now) / animationDuration, 0);
            var value = Math.round(end - remaining * range);
            _this2.currentValue = value;
            label.string = prefix + formatMoney(value) + suffixes;

            if (value == end) {
              clearInterval(_this2.timer);
            }
          };

          this.timer = setInterval(run, stepTime);
          run();
        };

        _proto.onUpdateWinValue = function onUpdateWinValue(end, animationDuration, callbackWin, isSkip, millisecond, timeUpdate, superWinRate, megaWinRate) {
          var _this3 = this;

          if (animationDuration === void 0) {
            animationDuration = 3000;
          }

          if (millisecond === void 0) {
            millisecond = 1000;
          }

          if (timeUpdate === void 0) {
            timeUpdate = 50;
          }

          if (superWinRate === void 0) {
            superWinRate = 50;
          }

          if (megaWinRate === void 0) {
            megaWinRate = 30;
          }

          clearInterval(this.timer);
          if (!this.node) return;
          var timeRate = millisecond / timeUpdate;
          this.currentValue = this.currentValue || 0;
          var valuePerTimes = Math.round(end / (animationDuration / millisecond * timeRate)); // a = ((s - v0 * t) * 2) / t^2

          var valueAccelerator = (end - valuePerTimes * timeUpdate) * 2 / Math.pow(timeUpdate, 2);

          var run = function run() {
            var label = _this3.node.getComponent(Label);

            _this3.currentValue = Math.round(_this3.currentValue <= end / 2 ? _this3.currentValue + valuePerTimes + valueAccelerator : _this3.currentValue + valuePerTimes - valueAccelerator);
            var value = _this3.currentValue;
            label.string = '' + formatMoney(value >= end ? end : value);
            var isSuper = end >= callbackWin.currentBetData * superWinRate;
            var isMega = end >= callbackWin.currentBetData * megaWinRate;
            var finalWin = isSuper ? 'super' : isMega ? 'mega' : 'big';
            var per = value / end;
            per = per > 1 ? 1 : per;
            callbackWin.enterFrame(per, finalWin);

            if (value >= callbackWin.currentBetData * superWinRate && !isSkip) {
              callbackWin.runSuperWin();
            } else if (value >= callbackWin.currentBetData * megaWinRate && !isSkip) {
              callbackWin.runMegaWin();
            } else if (value + callbackWin.currentBetData * 2 == end && !isSkip) {
              callbackWin.runFinishBigWin();
            }

            if (value >= end) {
              callbackWin.runFinishWin();
              clearInterval(_this3.timer);
            }
          };

          this.timer = setInterval(run, timeUpdate);
          run();
        };

        _proto.onUpdateWallet = function onUpdateWallet(end, animationDuration) {
          var _this4 = this;

          if (animationDuration === void 0) {
            animationDuration = 3000;
          }

          clearInterval(this.timer);
          if (!this.node) return;
          var label = this.node.getComponent(Label);
          var start = this.currentValue ? this.currentValue : 0; // assumes integer values for start and end

          var range = end - start; // no timer shorter than 50ms (not really visible any way)

          var minTimer = 50; // calc step time to show all interediate values

          var stepTime = Math.abs(Math.floor(animationDuration / range)); // never go below minTimer

          stepTime = Math.max(stepTime, minTimer); // get current time and calculate desired end time

          var startTime = new Date().getTime();
          var endTime = startTime + animationDuration;
          this.timer;

          var run = function run() {
            var now = new Date().getTime();
            var remaining = Math.max((endTime - now) / animationDuration, 0);
            var value = Math.round(end - remaining * range);
            _this4.currentValue = value;
            label.string = '' + formatWalletMoney(value);

            if (value == end) {
              clearInterval(_this4.timer);
            }
          };

          this.timer = setInterval(run, stepTime);
          run();
        };

        _proto.onDestroy = function onDestroy() {
          clearInterval(this.timer);
        };

        return AnimateNumberLabel;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AnimationCacheConfig.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _inheritsLoose, _assertThisInitialized, cclegacy, _decorator, Enum, sp, sys, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Enum = module.Enum;
      sp = module.sp;
      sys = module.sys;
      Component = module.Component;
    }],
    execute: function () {
      exports('PlatformType', void 0);

      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _dec4, _dec5, _dec6, _dec7, _class4, _class5, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "c4f88vC9N1B/o44RqT9YRau", "AnimationCacheConfig", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          requireComponent = _decorator.requireComponent;
      var PlatformType;

      (function (PlatformType) {
        PlatformType[PlatformType["NATIVE_WINDOWS"] = 0] = "NATIVE_WINDOWS";
        PlatformType[PlatformType["NATIVE_LINUS"] = 1] = "NATIVE_LINUS";
        PlatformType[PlatformType["NATIVE_MACOS"] = 2] = "NATIVE_MACOS";
        PlatformType[PlatformType["NATIVE_ANDROID"] = 3] = "NATIVE_ANDROID";
        PlatformType[PlatformType["NATIVE_IPHONE"] = 4] = "NATIVE_IPHONE";
        PlatformType[PlatformType["NATIVE_IPAD"] = 5] = "NATIVE_IPAD";
        PlatformType[PlatformType["NATIVE_UNKNOWN"] = 999] = "NATIVE_UNKNOWN";
        PlatformType[PlatformType["WEB_MOBILE"] = 100] = "WEB_MOBILE";
        PlatformType[PlatformType["WEB_DESKTOP"] = 101] = "WEB_DESKTOP";
        PlatformType[PlatformType["OTHER"] = 9999] = "OTHER";
      })(PlatformType || (PlatformType = exports('PlatformType', {})));

      Enum(PlatformType);
      var CacheConfigData = exports('CacheConfigData', (_dec = ccclass("CacheConfigData"), _dec2 = property({
        type: PlatformType
      }), _dec3 = property({
        type: sp.AnimationCacheMode
      }), _dec(_class = (_class2 = function CacheConfigData() {
        _initializerDefineProperty(this, "platformType", _descriptor, this);

        _initializerDefineProperty(this, "cacheMode", _descriptor2, this);
      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "platformType", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return PlatformType.WEB_MOBILE;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "cacheMode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return sp.AnimationCacheMode.REALTIME;
        }
      })), _class2)) || _class));
      var AnimationCacheConfig = exports('AnimationCacheConfig', (_dec4 = ccclass('AnimationCacheConfig'), _dec5 = requireComponent(sp.Skeleton), _dec6 = property({
        type: CacheConfigData
      }), _dec7 = property({
        type: CacheConfigData
      }), _dec4(_class4 = _dec5(_class4 = (_class5 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(AnimationCacheConfig, _Component);

        function AnimationCacheConfig() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "configs", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "fallBackConfig", _descriptor4, _assertThisInitialized(_this));

          _this.spineSkeleton = null;
          return _this;
        }

        var _proto = AnimationCacheConfig.prototype;

        _proto.onEnable = function onEnable() {
          if (!this.spineSkeleton) this.spineSkeleton = this.getComponent(sp.Skeleton);
          var hasConfig = false;

          for (var i = 0; i < this.configs.length; i++) {
            var config = this.configs[i];

            if (config && Number(config.platformType) === Number(sys.platform)) {
              this.spineSkeleton.setAnimationCacheMode(config.cacheMode);
              hasConfig = true;
              break;
            }
          }

          if (!hasConfig) {
            this.spineSkeleton.setAnimationCacheMode(this.fallBackConfig.cacheMode);
          }
        };

        return AnimationCacheConfig;
      }(Component), (_descriptor3 = _applyDecoratedDescriptor(_class5.prototype, "configs", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class5.prototype, "fallBackConfig", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class5)) || _class4) || _class4));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AnimationControl.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, _createClass, cclegacy, _decorator, Animation, log, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Animation = module.Animation;
      log = module.log;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "6bc244nkFhNOahRO1JvBAYp", "AnimationControl", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var AnimationControl = exports('AnimationControl', (_dec = ccclass('AnimationControl'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(AnimationControl, _Component);

        function AnimationControl() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._animation = null;
          _this._animState = null;
          _this._onAnimationCompleteDelegates = [];
          _this._onAnimationStartedDelegates = [];
          _this._onAnimationChangedDelegates = [];
          return _this;
        }

        var _proto = AnimationControl.prototype;

        _proto.onLoad = function onLoad() {
          this._animation = this.node.getComponent(Animation);
        };

        _proto.start = function start() {
          // Obtain animation state of default animation clip first if any
          if (this._animation != null) {
            var defaultClip = this._animation.defaultClip;
            this._animState = this._animation.getState(defaultClip.name);
          }
        };

        _proto.playAnimation = function playAnimation(clipName, speed, isLoop) {
          if (clipName === void 0) {
            clipName = '';
          }

          if (speed === void 0) {
            speed = 1;
          }

          if (isLoop === void 0) {
            isLoop = false;
          }

          if (this._animation != null) {
            if (clipName != "") {
              this._animation.play(clipName);

              this._animState = this._animation.getState(clipName);
            } else {
              // play default clip
              this._animation.play();

              this._animState = this._animation.getState(this._animation.defaultClip.name);
            }

            if (this._animState != null) {
              this._animState.speed = speed;
              this._animState.wrapMode = isLoop ? 2 : 1;
            }
          }
        };

        _proto.setCurrentSpeed = function setCurrentSpeed(newSpeed) {
          if (this._animState != null) {
            this._animState.speed = newSpeed;
          }
        };

        _proto.stopAnimation = function stopAnimation() {
          this._animation && this._animation.stop();
        };

        _proto.onAnimationEnded = function onAnimationEnded() {
          if (this._animState != null) {
            log("This animation clip name: " + this._animState.name + " is stopped");

            for (var i = 0; i < this._onAnimationCompleteDelegates.length; i++) {
              var delegate = this._onAnimationCompleteDelegates[i];
              delegate && delegate();
            }
          }
        };

        _proto.onAnimationStarted = function onAnimationStarted() {
          if (this._animState != null) {
            log("This animation clip name: " + this._animState.name + " is started");

            for (var i = 0; i < this._onAnimationStartedDelegates.length; i++) {
              var delegate = this._onAnimationStartedDelegates[i];
              delegate && delegate();
            }
          }
        };

        _proto.onAnimationChanged = function onAnimationChanged(param) {
          log('Param: ' + param);

          if (this._animState != null) {
            log("This animation clip name: " + this._animState.name + " is changed param");

            for (var i = 0; i < this._onAnimationChangedDelegates.length; i++) {
              var delegate = this._onAnimationChangedDelegates[i];
              delegate && delegate(param);
            }
          }
        };

        _createClass(AnimationControl, [{
          key: "onAnimationStartedDelegates",
          get: function get() {
            return this._onAnimationStartedDelegates;
          }
        }, {
          key: "onAnimationChangedDelegates",
          get: function get() {
            return this._onAnimationChangedDelegates;
          }
        }, {
          key: "onAnimationCompleteDelegates",
          get: function get() {
            return this._onAnimationCompleteDelegates;
          }
        }]);

        return AnimationControl;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AnimUtils.ts", ['cc', './utils.ts'], function (exports) {
  'use strict';

  var cclegacy, UIOpacity, tween, formatMoney;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      UIOpacity = module.UIOpacity;
      tween = module.tween;
    }, function (module) {
      formatMoney = module.formatMoney;
    }],
    execute: function () {
      exports({
        fadeIn: fadeIn,
        fadeOut: fadeOut,
        fadeTo: fadeTo,
        getOpacity: getOpacity,
        setOpacity: setOpacity,
        tweenMoney: tweenMoney
      });

      cclegacy._RF.push({}, "815ccOKTWNAjKVvmajqY+tC", "AnimUtils", undefined);

      function fadeTo(target, duration, opacity, options) {
        var uiOpacity = target.getComponent(UIOpacity);
        if (uiOpacity === null) uiOpacity = target.addComponent(UIOpacity);
        var tweenFade = tween(uiOpacity);
        tweenFade.to(duration, {
          opacity: opacity
        }, options).start();
        target.tweenFade = tweenFade;
        return tweenFade;
      }

      function fadeIn(target, duration, options) {
        return fadeTo(target, duration, 255, options);
      }

      function fadeOut(target, duration, options) {
        return fadeTo(target, duration, 0, options);
      }

      function getOpacity(node) {
        var uiOpacity = node.getComponent(UIOpacity);
        if (uiOpacity === null) uiOpacity = node.addComponent(UIOpacity);
        return uiOpacity.opacity;
      }

      function setOpacity(node, opacity) {
        var uiOpacity = node.getComponent(UIOpacity);
        if (uiOpacity === null) uiOpacity = node.addComponent(UIOpacity);
        uiOpacity.opacity = opacity;
      }

      function tweenMoney(label, duration, endValue, options) {
        if (label["_tweenMoney"]) label["_tweenMoney"].stop(); // stop if on tween;

        var currentVal = parseInt(label.string.replace(/[,.]/g, "")) || 0;
        var _target = {
          value: currentVal
        };
        options = options || {};

        options.onUpdate = function () {
          label.string = formatMoney(Math.round(_target.value));
        };

        var tweenMoney = tween(_target).to(duration, {
          value: endValue
        }, options).call(function () {
          label["_tweenMoney"] = null;
        }).start();
        label["_tweenMoney"] = tweenMoney;
        return tweenMoney;
      }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AntialiasConfig.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, sys, macro, log, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sys = module.sys;
      macro = module.macro;
      log = module.log;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "91475cv2pxCx7TABC+Sdx/j", "AntialiasConfig", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property; // SET ENABLE_WEBGL_ANTIALIAS HERE

      if (sys.isNative) macro.ENABLE_WEBGL_ANTIALIAS = false;
      log("ENABLE_WEBGL_ANTIALIAS " + macro.ENABLE_WEBGL_ANTIALIAS);
      var AntialiasConfig = exports('AntialiasConfig', (_dec = ccclass('AntialiasConfig'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(AntialiasConfig, _Component);

        function AntialiasConfig() {
          return _Component.apply(this, arguments) || this;
        }

        return AntialiasConfig;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/appConfig-debug.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, log;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      log = module.log;
    }],
    execute: function () {
      cclegacy._RF.push({}, "4e030CMy5lBK5Dcbb4Meioo", "appConfig-debug", undefined);

      log('VERSION GAME', '1.0.0'); ////////////////////////////////////////////////////

      var urlConstant = exports('urlConstant', {});

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/appConfig.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, log;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      log = module.log;
    }],
    execute: function () {
      cclegacy._RF.push({}, "37333FieqpOxp7nSpV3N+9B", "appConfig", undefined);

      log('VERSION GAME', '1.0.0'); // export let urlConstant = {   //dev
      //     API_URL: "https://api.dev.gmstd.dev/",
      //     DEV_ENV: true,
      //     SOCKET_URL: "wss://sock.dev.gmstd.dev",
      //     LOBBY_SCENE_NAME: "lobby-staging-test",
      //     LOGIN_SCENE_NAME: "login",
      // };

      var urlConstant = exports('urlConstant', {
        //staging
        API_URL: "https://api.staging.gmstd.dev/",
        DEV_ENV: true,
        SOCKET_URL: "wss://sock-bin.staging.gmstd.dev",
        LOBBY_SCENE_NAME: "lobby-staging-test",
        LOGIN_SCENE_NAME: "login"
      }); // export let urlConstant = {       //iframe
      //     API_URL: "https://api.staging.gmstd.dev/", 
      //     SOCKET_URL: "wss://sock-bin.staging.gmstd.dev",
      //     LOBBY_SCENE_NAME: "lobby-staging-test",
      //     LOGIN_IFRAME: true,
      //     LOGIN_SCENE_NAME: "login-staging-test",
      //     URL_CODE: "code",
      //     URL_TOKEN: "token",
      //     USER_TOKEN: "user_token",
      // };

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AssetBundle1998.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfAssetBundle.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _assertThisInitialized, cclegacy, gfAssetBundle;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      gfAssetBundle = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "b2253aLvgpD66pnyDm+PK0S", "AssetBundle1998", undefined);

      var AssetBundle1998 = exports('default', /*#__PURE__*/function (_gfAssetBundle) {
        _inheritsLoose(AssetBundle1998, _gfAssetBundle);

        function AssetBundle1998() {
          var _this;

          _this = _gfAssetBundle.call(this) || this;
          AssetBundle1998.instance = _assertThisInitialized(_this);
          return _this;
        }

        var _proto = AssetBundle1998.prototype;

        _proto.destroy = function destroy() {
          _gfAssetBundle.prototype.destroy.call(this);

          AssetBundle1998.instance = null;
        };

        return AssetBundle1998;
      }(gfAssetBundle));
      AssetBundle1998.instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AtlasHolder.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, SpriteAtlas, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SpriteAtlas = module.SpriteAtlas;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "32f9eL0ARRE3LSaoMAHPY5H", "AtlasHolder", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var AtlasHolder = exports('AtlasHolder', (_dec = ccclass('AtlasHolder'), _dec2 = property({
        type: SpriteAtlas
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(AtlasHolder, _Component);

        function AtlasHolder() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "usingAtlas", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        return AtlasHolder;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "usingAtlas", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AudioClipDatabase.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CustomTypeShare.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Component, CustomAudioClip, CustomEvent;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      CustomAudioClip = module.CustomAudioClip;
      CustomEvent = module.CustomEvent;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "407a4S8Y3ZDSKdNroZdcVMR", "AudioClipDatabase", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var AudioClipDatabase = exports('AudioClipDatabase', (_dec = ccclass('AudioClipDatabase'), _dec2 = property(CustomAudioClip), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(AudioClipDatabase, _Component);

        function AudioClipDatabase() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "audioList", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = AudioClipDatabase.prototype;

        _proto.onEnable = function onEnable() {
          this.node.dispatchEvent(new CustomEvent("SET_UP_AUDIO_DATABASE", true, {
            audioList: this.audioList
          }));
        };

        _proto.onDisable = function onDisable() {
          this.node.dispatchEvent(new CustomEvent("SET_UP_AUDIO_DATABASE", true, {
            audioList: null
          }));
        };

        return AudioClipDatabase;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "audioList", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AutoScaleBackground.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, UITransform, sys, view, screen, Vec3, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      UITransform = module.UITransform;
      sys = module.sys;
      view = module.view;
      screen = module.screen;
      Vec3 = module.Vec3;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "a75b58X7fVDkpLGY1Y5aN2f", "AutoScaleBackground", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var AutoScaleBackground = exports('AutoScaleBackground', (_dec = ccclass('AutoScaleBackground'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(AutoScaleBackground, _Component);

        function AutoScaleBackground() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._thisOnResized = null;
          _this._transform = null;
          return _this;
        }

        var _proto = AutoScaleBackground.prototype;

        _proto.onLoad = function onLoad() {
          this._transform = this.node.getComponent(UITransform);
          this._thisOnResized = this.onScreenResized.bind(this);

          if (sys.isBrowser) {
            window.addEventListener('resize', this._thisOnResized);
          } else {
            view.on('canvas-resize', this._thisOnResized);
          }

          this.scaleCanvasByOrientation();
        };

        _proto.scaleCanvasByOrientation = function scaleCanvasByOrientation() {
          var widthBackground = 960;
          var heightBackground = 640;

          if (!this._transform && this.node) {
            this._transform = this.node.getComponent(UITransform);
          }

          var heightDefaultCanvas = view.getDesignResolutionSize().height;

          if (this._transform) {
            widthBackground = this._transform.width;
            heightBackground = this._transform.height;
          } // v3.3.0
          // let widthView = view.getFrameSize().width;
          // let heightView = view.getFrameSize().height;
          // v3.4.1


          var widthView = screen.windowSize.width;
          var heightView = screen.windowSize.height;
          var scaleHeightDevice = heightView / heightDefaultCanvas;
          var scaleWidthDevice = widthView / heightDefaultCanvas;
          var realScaleDevice = scaleHeightDevice > scaleWidthDevice ? scaleWidthDevice : scaleHeightDevice;
          var convertWithBG = widthBackground * realScaleDevice;
          var convertHeightBG = heightBackground * realScaleDevice;
          var ratioW = widthView / convertWithBG;
          var ratioH = heightView / convertHeightBG;
          if (ratioW > ratioH) this.node.scale = new Vec3(ratioW, ratioW, ratioW);else this.node.scale = new Vec3(ratioH, ratioH, ratioH);
        };

        _proto.onDestroy = function onDestroy() {
          if (sys.isBrowser) {
            window.removeEventListener('resize', this._thisOnResized);
          } else {
            view.off('canvas-resize', this._thisOnResized);
          }
        };

        _proto.onScreenResized = function onScreenResized() {
          this.scaleCanvasByOrientation();
        };

        return AutoScaleBackground;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AutoSpinPanelController.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts', './CustomType.ts', './utils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, SpriteFrame, warn, Sprite, Color, Button, GameObject, CustomEvent, setOpacity;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      SpriteFrame = module.SpriteFrame;
      warn = module.warn;
      Sprite = module.Sprite;
      Color = module.Color;
      Button = module.Button;
    }, function (module) {
      GameObject = module.GameObject;
    }, function (module) {
      CustomEvent = module.CustomEvent;
    }, function (module) {
      setOpacity = module.setOpacity;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "7aea21Q745PR6qx558OU0WG", "AutoSpinPanelController", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var AutoSpinPanelController = exports('AutoSpinPanelController', (_dec = ccclass('AutoSpinPanelController'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: SpriteFrame
      }), _dec4 = property({
        type: SpriteFrame
      }), _dec5 = property({
        type: Node
      }), _dec6 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(AutoSpinPanelController, _GameObject);

        function AutoSpinPanelController() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "autoSpinButton", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "normalFrame", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "selectedFrame", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "numberButtons", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "overlay", _descriptor5, _assertThisInitialized(_this));

          _this.spinNumber = void 0;
          _this.setAutoSpinEvent = null;
          return _this;
        }

        var _proto = AutoSpinPanelController.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          this.node.showOverlay = this.showOverlay.bind(this);
        };

        _proto.showOverlay = function showOverlay(isShow) {
          if (isShow === void 0) {
            isShow = false;
          }

          this.overlay.active = isShow;
        };

        _proto.getSpinNumber = function getSpinNumber(evt, number) {
          var _this2 = this;

          if (!evt || !number) {
            warn('Missing event or number of spins');
            return;
          }

          this.soundPlayer && this.soundPlayer.playSFXClick();
          this.spinNumber = number;
          this.numberButtons.forEach(function (it) {
            it.getComponent(Sprite).spriteFrame = _this2.normalFrame;
            it.getChildByName('Label').getComponent(Sprite).color = new Color().fromHEX('#ffffff');
          });
          evt.target.getComponent(Sprite).spriteFrame = this.selectedFrame;
          evt.target.getChildByName('Label').color = new Color().fromHEX('#f3d598');
          this.autoSpinButton.getComponent(Button).interactable = true;
        };

        _proto.startAutoSpinning = function startAutoSpinning() {
          var _this3 = this;

          this.soundPlayer && this.soundPlayer.playSFXClick();
          this.setAutoSpinEvent = new CustomEvent('SET_AUTO_SPIN_EVENT', true, {
            spinNumber: this.spinNumber
          });
          this.node.dispatchEvent(this.setAutoSpinEvent);
          this.node.emit('HIDE', 0, function () {
            setOpacity(_this3.node, 1);
          });
          this.resetButtonStatus();
          this.overlay.active = false;
        };

        _proto.resetButtonStatus = function resetButtonStatus() {
          var _this4 = this;

          this.autoSpinButton.getComponent(Button).interactable = false;
          this.numberButtons.forEach(function (it) {
            it.getComponent(Sprite).spriteFrame = _this4.normalFrame;
            it.getChildByName('Label').getComponent(Sprite).color = new Color().fromHEX('#ffffff');
          });
        };

        _proto.clickBtnClose = function clickBtnClose() {
          var _this5 = this;

          this.soundPlayer && this.soundPlayer.playSFXClick();
          this.resetButtonStatus();
          this.node.emit('HIDE', 0, function () {
            setOpacity(_this5.node, 1);
          });
          this.overlay.active = false;
        };

        return AutoSpinPanelController;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "autoSpinButton", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "normalFrame", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "selectedFrame", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "numberButtons", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "overlay", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BackgroundController1989.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfEventEmitter.ts', './EventsCode1989.ts', './gfUtilities.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, Node, instantiate, Collider2D, UITransform, Component, gfEventEmitter, EventsCode1989, registerEvent, removeEvents;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Node = module.Node;
      instantiate = module.instantiate;
      Collider2D = module.Collider2D;
      UITransform = module.UITransform;
      Component = module.Component;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      EventsCode1989 = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "6838ebK06lCp4U9dgjjujco", "BackgroundController1989", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BackgroundController1989 = exports('BackgroundController1989', (_dec = ccclass('BackgroundController1989'), _dec2 = property(Prefab), _dec3 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(BackgroundController1989, _Component);

        function BackgroundController1989() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "mapPrefabs", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "fishLayer", _descriptor2, _assertThisInitialized(_this));

          _this._curBackgroundID = -1;
          _this.obstacles = [];
          _this.backGround = null;
          return _this;
        }

        var _proto = BackgroundController1989.prototype;

        _proto.onLoad = function onLoad() {
          this.initEvents();
          this.loadMap(1);
        };

        _proto.initEvents = function initEvents() {
          registerEvent(EventsCode1989.GAME_LAYER.UPDATE_ROOM_DATA, this.onInitBackground, this);
          registerEvent(EventsCode1989.GAME_LAYER.GAME_CHANGE_ROUND, this.onChangeRound, this);
        };

        _proto.onInitBackground = function onInitBackground(data) {
          var backgroundID = data.SceneKind;
          if (this._curBackgroundID == backgroundID) return;
          this._curBackgroundID = backgroundID;
          gfEventEmitter.instance.emit(EventsCode1989.GAME_LAYER.INIT_BUBBLE, backgroundID);
        };

        _proto.onChangeRound = function onChangeRound(data) {};

        _proto.onLoadMapClick = function onLoadMapClick(event, value) {
          this.loadMap(value);
          gfEventEmitter.instance.emit(EventsCode1989.GAME_LAYER.CHANGE_BACKGROUND);
        };

        _proto.loadMap = function loadMap(mapIndex) {
          var _this2 = this;

          if (this.backGround || this.obstacles) this.resetMap();
          this.backGround = instantiate(this.mapPrefabs[mapIndex]);
          this.backGround.parent = this.node;
          this.backGround.active = true;
          var colliders = this.backGround.getComponentsInChildren(Collider2D);
          colliders.forEach(function (collider) {
            collider.enabled = true;
            collider.group = 2;
            collider["isWall"] = true;
          });
          this.backGround.getChildByName("Objects").children.forEach(function (obstacle) {
            _this2.obstacles.push(obstacle);
          });
          this.obstacles.forEach(function (obstacle) {
            obstacle.position = _this2.fishLayer.getComponent(UITransform).convertToNodeSpaceAR(obstacle.worldPosition);
            obstacle.parent = _this2.fishLayer;
          });
        };

        _proto.resetMap = function resetMap() {
          this.backGround && this.backGround.destroy();

          while (this.obstacles.length > 0) {
            var obstacle = this.obstacles.pop();
            obstacle.destroy();
          }

          this.obstacles = [];
          this.backGround = null;
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return BackgroundController1989;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "mapPrefabs", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "fishLayer", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BackgroundController1998.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfEventEmitter.ts', './gfBackgroundController.ts', './gfBaseEvents.ts', './gfDataStore.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, tween, Sprite, Color, gfEventEmitter, GfBackgroundController, gfBaseEvents, gfDataStore;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      tween = module.tween;
      Sprite = module.Sprite;
      Color = module.Color;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      GfBackgroundController = module.GfBackgroundController;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "3d1ddtbgBdMdYB/ZLNgdHF3", "BackgroundController1998", undefined);

      var ccclass = _decorator.ccclass;
      var BackgroundController1998 = exports('BackgroundController1998', (_dec = ccclass('BackgroundController1998'), _dec(_class = /*#__PURE__*/function (_GfBackgroundControll) {
        _inheritsLoose(BackgroundController1998, _GfBackgroundControll);

        function BackgroundController1998() {
          return _GfBackgroundControll.apply(this, arguments) || this;
        }

        var _proto = BackgroundController1998.prototype;

        _proto.onChangeRound = function onChangeRound(data) {
          var _this = this;

          var backgroundID = data.SceneKind;
          var isFishGroupToNormal = data.isFishGroupToNormal;
          if (this._curBackgroundID == backgroundID) return;
          this._curBackgroundID = backgroundID;
          tween(this.background1.node).delay(1).to(1.5, null, {
            onUpdate: function onUpdate(target, ratio) {
              _this.background1.node.getComponent(Sprite).color = new Color(255, 255, 255, ratio * -255);
            }
          }).call(function () {
            _this.background1.spriteFrame = _this.arrDataBackground[_this._curBackgroundID];
          }).to(0, null, {
            onUpdate: function onUpdate(target, ratio) {
              _this.background1.node.getComponent(Sprite).color = new Color(255, 255, 255, ratio * 255);
            }
          }).start();
          tween(this.background2.node).to(0, null, {
            onUpdate: function onUpdate(target, ratio) {
              _this.background2.node.getComponent(Sprite).color = new Color(255, 255, 255, ratio * 0);
            }
          }).call(function () {
            _this.background2.spriteFrame = _this.arrDataBackground[_this._curBackgroundID];
          }).delay(1).to(1.5, null, {
            onUpdate: function onUpdate(target, ratio) {
              _this.background2.node.getComponent(Sprite).color = new Color(255, 255, 255, ratio * 255);
            }
          }).start();

          if (!isFishGroupToNormal) {
            if (this._curBackgroundID > 2) {
              gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.PLAY_WAVE_TRANSITION);
            } else {
              gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.PLAY_FISH_GROUP_TRANSITION, !!(gfDataStore.instance.getSelfDeskStation() > 1));
            }

            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.CHANGE_BUBBLE, this._curBackgroundID);
          }
        };

        return BackgroundController1998;
      }(GfBackgroundController)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BackgroundEffectControl.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts', './CustomEnum.ts', './EventNames.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, ParticleSystem2D, ParticleSystem, Animation, Node, GameObject, PerformanceLevel, EventNames;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      ParticleSystem2D = module.ParticleSystem2D;
      ParticleSystem = module.ParticleSystem;
      Animation = module.Animation;
      Node = module.Node;
    }, function (module) {
      GameObject = module.GameObject;
    }, function (module) {
      PerformanceLevel = module.PerformanceLevel;
    }, function (module) {
      EventNames = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "8663fgaQqFE0Lw+XPBhOXlX", "BackgroundEffectControl", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BackgroundEffectControl = exports('BackgroundEffectControl', (_dec = ccclass('BackgroundEffectControl'), _dec2 = property({
        type: ParticleSystem2D
      }), _dec3 = property({
        type: ParticleSystem
      }), _dec4 = property({
        type: Animation
      }), _dec5 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(BackgroundEffectControl, _GameObject);

        function BackgroundEffectControl() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "particleSystem2DList", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "particleSystemList", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "animationList", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "animationByUpdateList", _descriptor4, _assertThisInitialized(_this));

          _this.animationLevel = 2;
          _this.currentLevel = 2;
          return _this;
        }

        var _proto = BackgroundEffectControl.prototype;

        _proto.onEnable = function onEnable() {
          if (this.eventManager) {
            this.eventManager.on(EventNames.ON_CHANGE_PERFORMANCE, this.onChangePerformance, this);
          }
        };

        _proto.onDisable = function onDisable() {
          if (this.eventManager) {
            this.eventManager.off(EventNames.ON_CHANGE_PERFORMANCE, this.onChangePerformance, this);
          }
        };

        _proto.onChangePerformance = function onChangePerformance() {
          var performanceLvl = this.dataStore && this.dataStore.performanceLevel || 'HIGH_PERFORMANCE_LV';
          this.animationLevel = this.config[performanceLvl].PAYLINE_ANIMATION;

          if (this.animationLevel != this.currentLevel) {
            var isPlayEffect = this.animationLevel >= Number(PerformanceLevel.Medium);

            for (var i = 0; i < this.particleSystem2DList.length; i++) {
              var effect = this.particleSystem2DList[i];

              if (effect) {
                if (isPlayEffect) {
                  effect.node.active = true;
                  effect.resetSystem();
                } else {
                  effect.stopSystem();
                  effect.node.active = false;
                }
              }
            }

            for (var _i = 0; _i < this.particleSystemList.length; _i++) {
              var _effect = this.particleSystemList[_i];

              if (_effect) {
                if (isPlayEffect) {
                  _effect.node.active = true;

                  _effect.play();
                } else {
                  _effect.stop();

                  _effect.node.active = false;
                }
              }
            }

            for (var _i2 = 0; _i2 < this.animationList.length; _i2++) {
              var _effect2 = this.animationList[_i2];

              if (_effect2) {
                if (isPlayEffect) {
                  _effect2.play();
                } else {
                  _effect2.stop();
                }
              }
            }

            for (var _i3 = 0; _i3 < this.animationByUpdateList.length; _i3++) {
              var _effect3 = this.animationByUpdateList[_i3];
              if (_effect3) _effect3.active = isPlayEffect;
            }

            this.currentLevel = this.animationLevel;
          }
        };

        return BackgroundEffectControl;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "particleSystem2DList", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "particleSystemList", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "animationList", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "animationByUpdateList", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BackToLobby.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gameCommonUtils.ts', './loadConfigAsync.ts', './GameObject.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, gameCommonUtils, loadConfigAsync, GameObject;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gameCommonUtils = module.default;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      GameObject = module.GameObject;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "c5758tYvK1N2LA4dqPDj83Y", "BackToLobby", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BackToLobby = exports('BackToLobby', (_dec = ccclass('BackToLobby'), _dec(_class = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(BackToLobby, _GameObject);

        function BackToLobby() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;
          _this.isBackToLobby = false;
          return _this;
        }

        var _proto = BackToLobby.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
              LOGIN_IFRAME = _loadConfigAsync$getC.LOGIN_IFRAME;

          if (LOGIN_IFRAME) {
            var isEnableBtn = gameCommonUtils.checkConditionCloseGameIframe();

            if (!isEnableBtn) {
              var button = this.node.getChildByName('Button');

              if (button) {
                button.active = false;
              }

              return;
            }
          }
        };

        _proto.onEnable = function onEnable() {// this.isBackToLobby = false;
        };

        _proto.trigger = function trigger() {
          // if (this.isBackToLobby) return;
          // this.isBackToLobby = true;
          if (this.config.IS_SUPPORT_EVENT && this.mainDirector.totalSlotGame > 1) {
            this.soundPlayer.playSFXClick();
            this.mainDirector.showPopUpCloseGame();
          } else {
            if (this.soundPlayer) {
              this.soundPlayer.playSFXClick();
              this.soundPlayer.stopAllAudio();
            }

            gameCommonUtils.handleCloseGameIframe();
          }
        };

        return BackToLobby;
      }(GameObject)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BarMenu.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './TweenViewComponent.ts', './gameCommonUtils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, warn, Button, TweenViewComponent, gameCommonUtils;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      warn = module.warn;
      Button = module.Button;
    }, function (module) {
      TweenViewComponent = module.TweenViewComponent;
    }, function (module) {
      gameCommonUtils = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;

      cclegacy._RF.push({}, "5cedaBMgmlKvbemcWrf8DAb", "BarMenu", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BarMenu = exports('BarMenu', (_dec = ccclass('BarMenu'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Node), _dec7 = property(Node), _dec8 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_TweenViewComponent) {
        _inheritsLoose(BarMenu, _TweenViewComponent);

        function BarMenu() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _TweenViewComponent.call.apply(_TweenViewComponent, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "exitGameNode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnSoundOn", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnSoundOff", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnMusicOn", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnMusicOff", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "overlay", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "borderOverlayList", _descriptor7, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = BarMenu.prototype;

        _proto.onLoad = function onLoad() {
          _TweenViewComponent.prototype.onLoad.call(this);

          this.node.init = this.init.bind(this);
          this.checkGameInApp();
        };

        _proto.init = function init() {
          if (this.soundPlayer) {
            if (this.btnSoundOn) this.btnSoundOn.active = this.soundPlayer.isEnableSFX;
            if (this.btnSoundOff) this.btnSoundOff.active = !this.soundPlayer.isEnableSFX;
            if (this.btnMusicOn) this.btnMusicOn.active = this.soundPlayer.isEnableBGM;
            if (this.btnMusicOff) this.btnMusicOff.active = !this.soundPlayer.isEnableBGM;
          }
        };

        _proto.show = function show(onStart, onComplete) {
          var _this2 = this;

          if (this.overlay) this.overlay.active = true;

          _TweenViewComponent.prototype.show.call(this, onStart, function () {
            _this2.activeBorderOverlayList(true);

            _this2.scheduleOnce(function () {
              onComplete && onComplete();
            }, 0.5);

            var isAutoSpin = _this2.dataStore.isAutoSpin;
            var isFinished = _this2.dataStore.playSession.isFinished;
            if (_this2.overlay) _this2.overlay.active = isAutoSpin || isFinished === false;
          });
        };

        _proto.hide = function hide(onStart, onComplete) {
          var _this3 = this;

          if (this.overlay) this.overlay.active = false;

          _TweenViewComponent.prototype.hide.call(this, onStart, function () {
            onComplete && onComplete();

            _this3.activeBorderOverlayList(false);
          });
        };

        _proto.clickSoundOn = function clickSoundOn() {
          //turn off sound
          if (this.btnSoundOff) this.btnSoundOff.active = true;
          if (this.btnSoundOn) this.btnSoundOn.active = false;

          if (!this.soundPlayer) {
            warn('[SOUND_EVENT] No sound player found');
            return;
          }

          this.soundPlayer.setEffectEnable(false);
        };

        _proto.clickSoundOff = function clickSoundOff() {
          //turn on sound 
          if (this.btnSoundOff) this.btnSoundOff.active = false;
          if (this.btnSoundOn) this.btnSoundOn.active = true;

          if (!this.soundPlayer) {
            warn('[SOUND_EVENT] No sound player found');
            return;
          }

          this.soundPlayer.setEffectEnable(true);
          this.soundPlayer.playSFXClick();
        };

        _proto.clickMusicOn = function clickMusicOn() {
          //turn music off
          if (this.btnMusicOff) this.btnMusicOff.active = true;
          if (this.btnMusicOn) this.btnMusicOn.active = false;

          if (!this.soundPlayer) {
            warn('[SOUND_EVENT] No sound player found');
            return;
          }

          this.soundPlayer.setBgmEnable(false);
          this.soundPlayer.playSFXClick();
        };

        _proto.clickMusicOff = function clickMusicOff() {
          //turn music on
          if (this.btnMusicOff) this.btnMusicOff.active = false;
          if (this.btnMusicOn) this.btnMusicOn.active = true;

          if (!this.soundPlayer) {
            warn('[SOUND_EVENT] No sound player found');
            return;
          }

          this.soundPlayer.setBgmEnable(true);
          this.soundPlayer.playSFXClick();
        };

        _proto.onExitGame = function onExitGame() {
          this.soundPlayer && this.soundPlayer.playSFXClick(); //todo exit game and back to lobby here
        };

        _proto.checkGameInApp = function checkGameInApp() {
          if (this.exitGameNode) {
            var isEnableBtn = gameCommonUtils.checkConditionCloseGameIframe();
            this.exitGameNode.getComponent(Button).interactable = !!isEnableBtn;
          }
        };

        _proto.activeBorderOverlayList = function activeBorderOverlayList(isActive) {
          for (var i = 0; i < this.borderOverlayList.length; i++) {
            var borderNode = this.borderOverlayList[i];
            if (borderNode) borderNode.active = isActive;
          }
        };

        return BarMenu;
      }(TweenViewComponent), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "exitGameNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btnSoundOn", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "btnSoundOff", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "btnMusicOn", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "btnMusicOff", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "overlay", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "borderOverlayList", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BaseDirector.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts', './CustomEnum.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, log, error, GameObject, SlotGameMode;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      log = module.log;
      error = module.error;
    }, function (module) {
      GameObject = module.GameObject;
    }, function (module) {
      SlotGameMode = module.SlotGameMode;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "a5366gO62dCyLrQrV1yzUSc", "BaseDirector", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BaseDirector = exports('BaseDirector', (_dec = ccclass('BaseDirector'), _dec(_class = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(BaseDirector, _GameObject);

        function BaseDirector() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;
          _this.writer = null;
          _this.exitScript = void 0;
          _this.scripts = void 0;
          _this.listScriptAsync = [];
          _this.forceToExitMode = false;
          _this.storeNextScripts = null;
          _this.callBackWhenHide = null;
          _this.storeCurrentScripts = {
            script: [],
            data: {}
          };
          _this.isResetAsyncScript = false;
          return _this;
        }

        var _proto = BaseDirector.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          this.node["director"] = this;
          this.node.on("RUN_CONTINUE_SCRIPT", this.runContinueScript, this);
          this.node.on("FORCE_TO_EXIT", this.forceToExit, this);
          this.onExtendedLoad();
        };

        _proto.start = function start() {
          this.writer = this.node['writer'];
        };

        _proto.onExtendedLoad = function onExtendedLoad() {// let it empty. just override this func to call custom onLoad 
        };

        _proto.runAction = function runAction(actionName, data) {
          if (!this.writer || typeof this.writer['makeScript' + actionName] !== 'function') return;
          var script = this.writer['makeScript' + actionName](data);
          this.executeNextScript(script);
        };

        _proto.executeNextScript = function executeNextScript(scripts) {
          if (scripts === void 0) {
            scripts = [];
          }

          if (!this.writer || !scripts || scripts.length == 0) return;
          this.scripts = scripts;

          if (this.forceToExitMode && this.exitScript && this.exitScript.length > 0) {
            this.scripts = this.exitScript;
          }

          var nextScript = this.scripts.shift();
          var command = nextScript.command,
              data = nextScript.data;
          var executeFunc = this.getCommandName(command);

          if (typeof this[executeFunc] === 'function') {
            log(this.name + " run command", executeFunc, data);
            this[executeFunc](this.scripts, data);
          } else {
            error("No command " + executeFunc + " in " + this.name);
            this.executeNextScript(this.scripts);
          }
        };

        _proto.getCommandName = function getCommandName(command) {
          var gameSpeed = this.dataStore.gameSpeed || "";
          var commandWithSpeed = command + "_" + gameSpeed;

          if (typeof this[commandWithSpeed] === 'function') {
            return commandWithSpeed;
          } else {
            return command;
          }
        };

        _proto.resetGameSpeed = function resetGameSpeed() {
          log('resetGameSpeed');
          this.dataStore.gameSpeed = 0;
        };

        _proto.setGameSpeed = function setGameSpeed(gameSpeed) {
          log('setGameSpeed ' + gameSpeed);
          this.dataStore.gameSpeed = gameSpeed || this.getDefaultGameSpeed();
        };

        _proto.setGameSpeedMode = function setGameSpeedMode(mode) {
          if (mode === void 0) {
            mode = 'NORMAL';
          }

          log('setGameSpeedMode ' + mode);
          var GAME_SPEED = this.getGameSpeedConfig();
          this.dataStore.gameSpeed = GAME_SPEED[mode] || GAME_SPEED.NORMAL;
        };

        _proto.getGameSpeed = function getGameSpeed() {
          return this.dataStore.gameSpeed || this.getDefaultGameSpeed();
        };

        _proto.getDefaultGameSpeed = function getDefaultGameSpeed() {
          var GAME_SPEED = this.getGameSpeedConfig();
          return this.dataStore.modeTurbo ? GAME_SPEED.TURBO : GAME_SPEED.NORMAL;
        };

        _proto.getGameSpeedConfig = function getGameSpeedConfig() {
          // remove after all games updated
          if (this.config && this.config.GAME_SPEED) {
            return this.config.GAME_SPEED;
          } else {
            return {
              NORMAL: 0,
              TURBO: 1,
              INSTANTLY: 2
            };
          }
        };

        _proto.runContinueScript = function runContinueScript() {
          if (!this.storeNextScripts) return;
          var _this$storeNextScript = this.storeNextScripts,
              data = _this$storeNextScript.data,
              script = _this$storeNextScript.script;
          this[this.storeCurrentScripts] && this[this.storeCurrentScripts](script, data);

          this._resetStoreScript();
        };

        _proto.forceToExit = function forceToExit(scripts) {
          this.forceToExitMode = true;
          this.exitScript = scripts;
        };

        _proto._resetStoreScript = function _resetStoreScript() {
          this.storeCurrentScripts = '';
          this.storeNextScripts = {
            script: [],
            data: {}
          };
        };

        _proto.hide = function hide() {}; //-------------- Async Script ---------------

        /**@AsyncScript */


        _proto.canStoreAsyncScript = function canStoreAsyncScript() {
          var isNormalGame = this.dataStore.currentGameMode === SlotGameMode.NormalGame;
          var isFinished = this.dataStore.playSession.isFinished;
          var isAutoSpin = this.dataStore.isAutoSpin;
          var isValid = isFinished === true && !isAutoSpin && isNormalGame;
          return isValid;
        };

        _proto.storeAsyncScript = function storeAsyncScript(script, data) {
          this.listScriptAsync.push(data);
          this.executeNextScript(script);
        };

        _proto._runAsyncScript = function _runAsyncScript(script) {
          this.executeNextScript(script);
          this.runAsyncScript();
        };

        _proto.runAsyncScript = function runAsyncScript() {
          if (!this.listScriptAsync.length || this.isResetAsyncScript) return;
          var command = this.listScriptAsync.shift();

          if (command) {
            var callback = command.callback,
                name = command.name;
            if (name) log(this.name + ' run AsyncScript: ', name);
            callback && callback();
          }
        };

        _proto.resetAsyncScript = function resetAsyncScript() {
          if (!this.listScriptAsync.length) return;
          this.isResetAsyncScript = true;

          while (this.listScriptAsync.length > 0) {
            var command = this.listScriptAsync.shift();

            if (command) {
              var callback = command.callback,
                  isSkippable = command.isSkippable,
                  name = command.name;

              if (!isSkippable) {
                if (name) log(this.name + ' run resetAsyncScript: ', name);
                callback && callback();
              }
            }
          }

          this.isResetAsyncScript = false;
        };

        _proto.clearAsyncScript = function clearAsyncScript() {
          this.listScriptAsync = [];
        };

        _proto.exit = function exit() {
          if (typeof this.callBackWhenHide == "function") {
            this.callBackWhenHide();
            this.callBackWhenHide = null;
          }

          this.hide();
          this.node.emit('GAME_EXIT');
          this.node.active = false;
        };

        return BaseDirector;
      }(GameObject)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BaseDynamicLoading.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts', './CustomType.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, assetManager, sp, error, log, GameObject, AssetPathConfig;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      assetManager = module.assetManager;
      sp = module.sp;
      error = module.error;
      log = module.log;
    }, function (module) {
      GameObject = module.GameObject;
    }, function (module) {
      AssetPathConfig = module.AssetPathConfig;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "7ddba2ycYdA8ob+oNWT+35o", "BaseDynamicLoading", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var AssetData = exports('AssetData', function AssetData(asset, id, path, parent) {
        this.asset = void 0;
        this.id = void 0;
        this.dynamicPath = void 0;
        this.parentNode = void 0;
        this.asset = asset;
        this.id = id;
        this.dynamicPath = path;
        this.parentNode = parent;
      });
      var BaseDynamicLoading = exports('BaseDynamicLoading', (_dec = ccclass('BaseDynamicLoading'), _dec2 = property({
        visible: function visible() {
          return this.dynamicLoading;
        }
      }), _dec3 = property({
        type: AssetPathConfig,
        visible: function visible() {
          return this.dynamicLoading;
        }
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(BaseDynamicLoading, _GameObject);

        function BaseDynamicLoading() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "dynamicLoading", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "resourceRootPath", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "assetPaths", _descriptor3, _assertThisInitialized(_this));

          _this._loadedAsset = [];
          _this._localBundle = null;
          _this._bundlePrefix = 'bundle';
          _this._bundlePath = "";
          return _this;
        }

        var _proto = BaseDynamicLoading.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          this._loadedAsset = [];
          this.setUpAssetBundle();
        };

        _proto.clearSingleResourceLoaded = function clearSingleResourceLoaded(assetData) {
          if (assetData) {
            var index = this._loadedAsset.indexOf(assetData);

            var assets = [];
            var deps = assetManager.dependUtil.getDepsRecursively(assetData.asset._uuid);

            for (var i = 0; i < deps.length; i++) {
              var _uuid = deps[i];
              var item = assetManager.assets.get(_uuid);

              if (item) {
                item.addRef();
                assets.push(item);
              }
            }

            assets.forEach(function (item) {
              if (item) {
                item.decRef(true);

                if (item instanceof sp.SkeletonData) {
                  item.reset();
                }
              }
            });
            assetData.asset.decRef(true);

            if (index > -1) {
              this._loadedAsset.splice(index, 1);
            }
          }
        };

        _proto.clearResourcesLoaded = function clearResourcesLoaded() {
          var _this2 = this;

          this._loadedAsset.forEach(function (assetData) {
            _this2.clearSingleResourceLoaded(assetData);
          });

          this._loadedAsset = [];
        };

        _proto._dynamicLoadByPath = function _dynamicLoadByPath(assetPath, assetId, parent, completeCB) {
          if (completeCB === void 0) {
            completeCB = null;
          }

          if (!this._localBundle) this._localBundle = assetManager.getBundle(this._bundlePath);

          if (this._localBundle) {
            var _asset = this._localBundle.get(this.resourceRootPath + assetPath);

            if (_asset) {
              // this.onLoadAssetCompletely(_asset, assetPath, assetId, parent, completeCB);
              completeCB && completeCB(_asset);
            } else {
              this._localBundle.load(this.resourceRootPath + assetPath, function (err, asset) {
                if (err) {
                  error("Error while loading asset path: " + assetPath);
                } else {
                  // this.onLoadAssetCompletely(asset, assetPath, assetId, parent, completeCB);
                  completeCB && completeCB(asset);
                }
              });
            }
          } else {
            log('>>>>> Asset Bundle is not ready');
          }
        };

        _proto.onLoadAssetCompletely = function onLoadAssetCompletely(asset, assetPath, assetId, parent, completeCB) {
          if (completeCB === void 0) {
            completeCB = null;
          }

          if (this.node) {
            var assetData = new AssetData(asset, assetId, assetPath, parent);
            this._loadedAsset && this._loadedAsset.push(assetData);
            var deps = assetManager.dependUtil.getDepsRecursively(asset._uuid);

            for (var i = 0; i < deps.length; i++) {
              var _uuid = deps[i];
              var item = assetManager.assets.get(_uuid);

              if (item && item instanceof sp.SkeletonData) {
                item.getRuntimeData();
                item.addRef();
              }
            }

            asset.addRef();
            completeCB && completeCB(asset);
          } else {
            asset.decRef(true);
          }
        };

        _proto.getAssetLoadedByPath = function getAssetLoadedByPath(path) {
          for (var i = 0; i < this._loadedAsset.length; i++) {
            if (path === this._loadedAsset[i].dynamicPath) {
              return this._loadedAsset[i];
            }
          }

          return null;
        };

        _proto.getAssetLoadedById = function getAssetLoadedById(id) {
          for (var i = 0; i < this._loadedAsset.length; i++) {
            if (id === this._loadedAsset[i].id) {
              return this._loadedAsset[i];
            }
          }

          return null;
        };

        _proto.setUpAssetBundle = function setUpAssetBundle() {
          var _this3 = this;

          this._bundlePath = this._bundlePrefix + this.config.GAME_ID;
          this._localBundle = assetManager.getBundle(this._bundlePath);

          if (!this._localBundle) {
            assetManager.loadBundle(this._bundlePath, function (err, bundle) {
              if (err) {
                error("Error while loading bundle with path: " + _this3._bundlePath);
              } else {
                _this3._localBundle = bundle;

                _this3.onAssetBundleReady();
              }
            });
          } else {
            this.onAssetBundleReady();
          }
        };

        _proto.onAssetBundleReady = function onAssetBundleReady() {// override code here
        };

        _proto.onDestroy = function onDestroy() {
          this.clearResourcesLoaded();
        };

        return BaseDynamicLoading;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "dynamicLoading", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "resourceRootPath", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "assetPaths", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BaseFish1998.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseFish.ts', './gfEventEmitter.ts', './gfBaseEvents.ts', './gfActionHelper.ts', './Config1998.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, tween, UITransform, Vec3, gfBaseFish, gfEventEmitter, gfBaseEvents, stopAllActions, fadeOut, delay, scaleTo, call, Config1998;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      tween = module.tween;
      UITransform = module.UITransform;
      Vec3 = module.Vec3;
    }, function (module) {
      gfBaseFish = module.gfBaseFish;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      stopAllActions = module.stopAllActions;
      fadeOut = module.fadeOut;
      delay = module.delay;
      scaleTo = module.scaleTo;
      call = module.call;
    }, function (module) {
      Config1998 = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "6adc2AXw+RJ5LXd6fk0p9aL", "BaseFish1998", undefined);

      var ccclass = _decorator.ccclass;
      var BaseFish1998 = exports('BaseFish1998', (_dec = ccclass('BaseFish1998'), _dec(_class = /*#__PURE__*/function (_gfBaseFish) {
        _inheritsLoose(BaseFish1998, _gfBaseFish);

        function BaseFish1998() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfBaseFish.call.apply(_gfBaseFish, [this].concat(args)) || this;
          _this.compFreeze = null;
          _this.compLuckyFish = null;
          return _this;
        }

        var _proto = BaseFish1998.prototype;

        _proto.initFishData = function initFishData(data) {
          _gfBaseFish.prototype.initFishData.call(this, data);

          if (!this.compLuckyFish) {
            this.compLuckyFish = this.node.getComponent('GfLuckyFish');
          }

          if (!this.compFreeze) {
            this.compFreeze = this.node.getChildByName('FishFreezeEffect').getComponent('gfFishFreezeEffect');
          }

          this.compLuckyFish.initLuckyEffect(data);
          this.compLuckyFish.luckyEffect.setPosition(this._targetPoint.x, this._targetPoint.y, 1);
          this.compFreeze.initIceEffect(data.TimeRemainFreeze);
        };

        _proto.onHit = function onHit(data) {
          var _this2 = this;

          if (data) {
            this.triggerHit(data);
          }

          if (this.compFreeze.isFreezed()) return;
          this.setColor(this.HIT_COLOR);
          tween(this.node).delay(0.1).call(function () {
            if (_this2.compFreeze.isFreezed()) return;

            _this2.resetColor();
          }).start();
        };

        _proto.onCatch = function onCatch(data) {
          var _this3 = this;

          if (data.isCheckedFakeBullet === undefined) {
            if (this.needFakeBullet(data)) {
              this.createFakeBullet(data);
              return;
            }
          }

          this.onPlayEffectWinInCatchFish(data);
          stopAllActions(this.node);
          this.resetColor();
          this.setDie(true);
          this.playEffectDie();
          var listAction = tween(this.node);

          if (this._FishKind === Config1998.instance.FISH_KIND.BOMB) {
            gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.TRIGGER_BOMB, this.getLockPositionByWorldSpace());
            listAction.then(fadeOut(0.1));
          } else if (data.SkillID > 0) {
            var skillInfo = {
              SkillID: data.SkillID,
              BulletRemain: 1
            };
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.DROP_GUN_SKILL, {
              DeskStation: data.DeskStation,
              skillInfo: skillInfo
            });

            if (data.SkillID === Config1998.instance.SkillConfig.LASER) {
              gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.DROP_GUN_LASER, {
                fishPos: this.node.getComponent(UITransform).convertToWorldSpaceAR(new Vec3(0, 0, 0)),
                deskStation: data.DeskStation,
                skillInfo: skillInfo
              });
              gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.RECEIVE_LASER_GUN, data.DeskStation);
            }

            listAction.then(delay(0.5));
            listAction.then(scaleTo(0.2, 0, 0));
          } else {
            listAction.then(delay(1));
            listAction.then(fadeOut(0.5));
          }

          listAction.then(call(function () {
            _this3.onDie();
          }));
          listAction.start();
        };

        _proto.onPlayEffectWinInCatchFish = function onPlayEffectWinInCatchFish(data) {
          if (this.compLuckyFish.getMultiplier() > 1) {
            data.fishKind = this._FishKind;
            data.fishPos = this.getLockPositionByWorldSpace();
            this.compLuckyFish.onPlayEffectWinLuckfyFishInCatchFish(data);
          } else {
            gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.PLAY_REWARD_EFFECT, {
              data: data,
              fishKind: this._FishKind,
              fishPos: this.getLockPositionByWorldSpace()
            });
          }
        };

        _proto.unuse = function unuse() {
          _gfBaseFish.prototype.unuse.call(this);

          if (this.compFreeze) {
            this.compFreeze.reset();
          }
        };

        return BaseFish1998;
      }(gfBaseFish)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BaseTableHistoryDetail.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts', './utils.ts', './CustomEnum.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Prefab, Label, CCInteger, CCString, NodePool, Vec3, Event, instantiate, GameObject, formatMoney, SlotGameMode;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Prefab = module.Prefab;
      Label = module.Label;
      CCInteger = module.CCInteger;
      CCString = module.CCString;
      NodePool = module.NodePool;
      Vec3 = module.Vec3;
      Event = module.Event;
      instantiate = module.instantiate;
    }, function (module) {
      GameObject = module.GameObject;
    }, function (module) {
      formatMoney = module.formatMoney;
    }, function (module) {
      SlotGameMode = module.SlotGameMode;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17;

      cclegacy._RF.push({}, "4cc72EalHNHgLgsk4sPajZY", "BaseTableHistoryDetail", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BaseTableHistoryDetail = exports('BaseTableHistoryDetail', (_dec = ccclass('BaseTableHistoryDetail'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: Prefab
      }), _dec6 = property({
        type: Label
      }), _dec7 = property({
        type: Node
      }), _dec8 = property({
        type: Node
      }), _dec9 = property({
        type: SlotGameMode
      }), _dec10 = property({
        type: CCInteger,
        tooltip: "Array of BigW ild Collumn Index on Table from 0",
        visible: function visible() {
          return this.hasBigWild;
        }
      }), _dec11 = property({
        type: CCString,
        tooltip: "Big wild symbol name per col, should be an array of 5 cols",
        visible: function visible() {
          return this.hasBigWild;
        }
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(BaseTableHistoryDetail, _GameObject);

        function BaseTableHistoryDetail() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "slotTable", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "enableHighlightHolder", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "dimBackground", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "symbolPrefab", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "totalWinAmount", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "prevPageBtn", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nextPageBtn", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sceneType", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "customSymbolWidth", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "customSymbolHeight", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "symbolScaleX", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "symbolScaleY", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "hasSubSymbol", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "hasPayline", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "hasBigWild", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bigWildCols", _descriptor16, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bigWildSymbols", _descriptor17, _assertThisInitialized(_this));

          _this.symbolPool = null;
          _this.data = void 0;
          _this.pages = [];
          _this.currentFreeGamePage = 0;
          _this.currentJackpotPage = 0;
          _this.currentBonusGamePage = 0;
          _this.currentTopUpGamePage = 0;
          _this.currentNormalGamePage = 0;
          _this.symbols = [];
          return _this;
        }

        var _proto = BaseTableHistoryDetail.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          this.node.on('UPDATE_DETAIL_VIEW', this.updateDetailView, this);
          this.node.on('RESET_ALL', this.resetAll, this);
          this.node.on('CLEAR_TABLE', this.clearTable, this);
          this.symbolPool = new NodePool('SymbolPool');
          if (this.prevPageBtn) this.prevPageBtn.active = false;
          if (this.nextPageBtn) this.nextPageBtn.active = false;
        };

        _proto.updateDetailView = function updateDetailView(data, pages) {
          this.data = data;
          this.pages = pages;
          this.clearTable();
          this.updateTotalWinAmount(data);
        };

        _proto.updateTotalWinAmount = function updateTotalWinAmount(data) {
          this.totalWinAmount.string = '0';

          if (this.sceneType === SlotGameMode.JackpotGame) {
            if (data.latestWinJackpotInfo && data.latestWinJackpotInfo.length) {
              this.totalWinAmount.string = formatMoney(parseInt(data.latestWinJackpotInfo[0].jackpotAmount));
            }
          } else if (this.sceneType === SlotGameMode.FreeGame && data.totalFreeWinAmount !== undefined) {
            this.totalWinAmount.string = formatMoney(parseInt(data.winAmount));
          } else if (this.sceneType === SlotGameMode.BonusGame && data.totalBonusWinAmount !== undefined) {
            this.totalWinAmount.string = formatMoney(parseInt(data.winAmount));
          } else if (this.sceneType === SlotGameMode.TopUpGame && data.totalTopUpWinAmount) {
            this.totalWinAmount.string = formatMoney(parseInt(data.winAmount));
          } else if (this.sceneType === SlotGameMode.NormalGame && data.winAmount !== undefined) {
            this.totalWinAmount.string = formatMoney(parseInt(data.winAmount));
          }
        };

        _proto.renderTable = function renderTable(matrix, format, subSym) {
          if (!matrix) return;
          if (this.dimBackground) this.dimBackground.active = false;
          var symbolWidth = this.sceneType === SlotGameMode.FreeGame && this.config.SYMBOL_WIDTH_FREE_GAME ? this.config.SYMBOL_WIDTH_FREE_GAME : this.config.SYMBOL_WIDTH;
          var symbolHeight = this.sceneType === SlotGameMode.FreeGame && this.config.SYMBOL_HEIGHT_FREE_GAME ? this.config.SYMBOL_HEIGHT_FREE_GAME : this.config.SYMBOL_HEIGHT;
          symbolWidth = this.customSymbolWidth || symbolWidth;
          symbolHeight = this.customSymbolHeight || symbolHeight;
          var startX = (-format.length / 2 + 0.5) * symbolWidth;
          var count = 0;

          for (var col = 0; col < format.length; col++) {
            this.symbols[col] = [];
            var startY = (format[col] / 2 - 0.5) * symbolHeight;

            for (var row = 0; row < format[col]; row++) {
              var symbol = this.getSymbol();
              symbol.parent = this.slotTable;
              symbol.setScale(new Vec3(this.symbolScaleX, this.symbolScaleY, 1));
              symbol.setPosition(startX + col * symbolWidth, startY - row * symbolHeight);
              symbol.emit("INIT_FOR_PAYLINE", this.enableHighlightHolder, null, false);
              symbol.col = col;
              symbol.row = row;
              var symbolValue = matrix[count];

              if (this.hasBigWild) {
                var res = this.bigWildCols.indexOf(col);

                if (res >= 0 && symbolValue === "K") {
                  symbolValue = "";

                  if (row === 1) {
                    symbolValue = this.bigWildSymbols[col];
                    symbol.emit('CHANGE_TO_BIG_WILD', symbolValue);
                  }
                }
              }

              if (symbolValue === '' || symbolValue === matrix[count]) {
                symbol.emit('CHANGE_TO_SYMBOL', symbolValue);
              }

              symbol.symbolName = matrix[count];

              if (subSym && subSym.length && subSym.indexOf(count) > -1) {
                this.showSubSymbol(symbol, true);
              }

              this.symbols[col][row] = symbol;
              count++;
            }
          }

          this.showPaylines();
        };

        _proto.showPaylines = function showPaylines() {
          if (this.hasPayline && this.data.paylines && this.data.paylines.length && this.data.paylines !== '[]') {
            var parsePaylines = this.data.paylines.replace('[', '').replace(']', '');
            var paylines = this.dataStore.convertPayLine(parsePaylines.split(','));
            this.showTablePaylines(paylines);
          } else {
            if (this.dimBackground) this.dimBackground.active = false;
          }
        };

        _proto.showTablePaylines = function showTablePaylines(paylines) {
          var _this2 = this;

          if (!paylines || paylines.length == 0) return;
          this.disableHighlight();
          paylines.forEach(function (payline) {
            _this2.showNextPayline(payline);
          });
        };

        _proto.disableHighlight = function disableHighlight() {
          if (this.dimBackground) this.dimBackground.active = true;
        };

        _proto.showNextPayline = function showNextPayline(paylineInfo) {
          var _this3 = this;

          if (this.config.PAY_LINE_ALLWAYS) {
            var symbolName = paylineInfo.symbolName,
                symbolCount = paylineInfo.symbolCount;
            this.slotTable.children.forEach(function (symbol) {
              if ((symbol.symbolName === symbolName.trim() || symbol.symbolName === "K") && symbol.col < symbolCount) {
                _this3.showSymbolHightlight(symbol);
              }
            });
          } else {
            var payLineID = paylineInfo.payLineID,
                payLineWinNumbers = paylineInfo.payLineWinNumbers,
                _symbolName = paylineInfo.symbolName;
            var payline = this.config.PAY_LINE_MATRIX[payLineID.trim()];

            if (payline && payline.length && this.symbols.length > 0) {
              for (var paylinePos = 0; paylinePos < payLineWinNumbers; ++paylinePos) {
                var row = payline[paylinePos];
                var col = paylinePos;
                var symbol = this.symbols[col][row];
                if (symbol && (symbol.symbolName === _symbolName || symbol.symbolName === "K")) this.showSymbolHightlight(symbol);
              }
            }
          }
        };

        _proto.showSubSymbol = function showSubSymbol(symbol, isActive) {
          // Custom event show subSymbol
          if (!symbol) return;
          symbol.emit('SHOW_SUB_SYMBOL_STATIC', isActive);
        };

        _proto.showSymbolHightlight = function showSymbolHightlight(symbol) {
          if (!symbol) return;
          symbol.emit('ENABLE_HIGHLIGHT', true);
        };

        _proto.onPrevPage = function onPrevPage() {
          var currentPage = 0;

          if (this.sceneType === SlotGameMode.FreeGame) {
            currentPage = --this.currentFreeGamePage;
          } else if (this.sceneType === SlotGameMode.JackpotGame) {
            currentPage = --this.currentJackpotPage;
          } else if (this.sceneType === SlotGameMode.BonusGame) {
            currentPage = --this.currentBonusGamePage;
          } else if (this.sceneType === SlotGameMode.TopUpGame) {
            currentPage = --this.currentTopUpGamePage;
          } else if (this.sceneType === SlotGameMode.NormalGame) {
            currentPage = --this.currentNormalGamePage;
          }

          if (!currentPage) this.prevPageBtn.active = false;
          this.nextPageBtn.active = true;
          this.clearTable();
          this.playClickSound();
          var event = new Event('UPDATE_GAME_DETAIL', true);
          event['userData'] = {
            currentPage: currentPage,
            gameMode: this.sceneType
          };
          this.node.dispatchEvent(event); //if (this.eventManager) this.eventManager.emit('UPDATE_GAME_DETAIL', currentPage, this.sceneType);
        };

        _proto.onNextPage = function onNextPage() {
          var currentPage = 0;

          if (this.sceneType === SlotGameMode.FreeGame) {
            currentPage = ++this.currentFreeGamePage;
          } else if (this.sceneType === SlotGameMode.JackpotGame) {
            currentPage = ++this.currentJackpotPage;
          } else if (this.sceneType === SlotGameMode.BonusGame) {
            currentPage = ++this.currentBonusGamePage;
          } else if (this.sceneType === SlotGameMode.TopUpGame) {
            currentPage = ++this.currentTopUpGamePage;
          } else if (this.sceneType === SlotGameMode.NormalGame) {
            currentPage = ++this.currentNormalGamePage;
          }

          this.prevPageBtn.active = true;
          if (currentPage === this.pages.length - 1) this.nextPageBtn.active = false;
          this.clearTable();
          this.playClickSound();
          var event = new Event('UPDATE_GAME_DETAIL', true);
          event['userData'] = {
            currentPage: currentPage,
            gameMode: this.sceneType
          };
          this.node.dispatchEvent(event); //if (this.eventManager) this.eventManager.emit('UPDATE_GAME_DETAIL', currentPage, this.sceneType);
        };

        _proto.resetUI = function resetUI() {
          if (this.prevPageBtn) this.prevPageBtn.active = false;
          if (this.nextPageBtn) this.nextPageBtn.active = false;
          if (this.totalWinAmount) this.totalWinAmount.string = '0';
          this.clearTable();
        };

        _proto.resetAll = function resetAll() {
          this.data = '';
          this.pages = [];
          this.currentFreeGamePage = 0;
          this.currentJackpotPage = 0;
          this.currentBonusGamePage = 0;
          this.currentTopUpGamePage = 0;
          this.currentNormalGamePage = 0;
          this.resetUI();
        };

        _proto.clearTable = function clearTable() {
          for (var col = 0; col < this.symbols.length; col++) {
            for (var row = 0; row < this.symbols[col].length; row++) {
              var symbol = this.symbols[col][row];

              if (symbol) {
                this.resetSymbol(symbol);
                this.symbolPool.put(symbol);
              }
            }
          }

          this.symbols = [];
        };

        _proto.playClickSound = function playClickSound() {
          this.soundPlayer && this.soundPlayer.playSFXClick();
        };

        _proto.resetSymbol = function resetSymbol(symbol) {
          symbol.emit('RESET');
        };

        _proto.getSymbol = function getSymbol() {
          var element = this.symbolPool.get();
          if (!element) element = instantiate(this.symbolPrefab);
          return element;
        };

        _proto.onDestroy = function onDestroy() {
          _GameObject.prototype.onDestroy.call(this);

          this.symbolPool.clear();
        };

        return BaseTableHistoryDetail;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "slotTable", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "enableHighlightHolder", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "dimBackground", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "symbolPrefab", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "totalWinAmount", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "prevPageBtn", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "nextPageBtn", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "sceneType", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return SlotGameMode.NormalGame;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "customSymbolWidth", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "customSymbolHeight", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "symbolScaleX", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "symbolScaleY", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "hasSubSymbol", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "hasPayline", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "hasBigWild", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "bigWildCols", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "bigWildSymbols", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Bet.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts', './EventNames.ts', './utils.ts', './CustomEnum.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Button, Label, sys, GameObject, EventNames, formatWalletMoney, formatMoney, TutorialTriggerType;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Button = module.Button;
      Label = module.Label;
      sys = module.sys;
    }, function (module) {
      GameObject = module.GameObject;
    }, function (module) {
      EventNames = module.default;
    }, function (module) {
      formatWalletMoney = module.formatWalletMoney;
      formatMoney = module.formatMoney;
    }, function (module) {
      TutorialTriggerType = module.TutorialTriggerType;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14;

      cclegacy._RF.push({}, "81823CamwZJIoHs0ohUUGLH", "Bet", undefined);

      var lodash = globalThis._;
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Bet = exports('Bet', (_dec = ccclass('Bet'), _dec2 = property({
        type: Button
      }), _dec3 = property({
        type: Button
      }), _dec4 = property({
        type: Button
      }), _dec5 = property({
        type: Button
      }), _dec6 = property({
        type: Button
      }), _dec7 = property({
        type: Button
      }), _dec8 = property({
        type: Label
      }), _dec9 = property({
        type: Label
      }), _dec10 = property({
        type: Label
      }), _dec11 = property({
        type: Label,
        override: true
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(Bet, _GameObject);

        function Bet() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "increaseBetBtn", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "reduceBetBtn", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "increaseExtraBtn", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "reduceExtraBtn", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "increaseBetLinesBtn", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "reduceBetLinesBtn", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "totalLabel", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "betLabel", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "extraBetLabel", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "betLinesLabel", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "isFormatDenom", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "isFormatTotal", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "betUpSoundId", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "betDownSoundId", _descriptor14, _assertThisInitialized(_this));

          _this.betData = null;
          _this.betLines = [];
          return _this;
        }

        var _proto = Bet.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          if (!this.eventManager) throw new Error("do not have eventManager"); //

          this.node.on("INIT_BET", this.initBet, this);
          this.node.on("SET_BET_ID", this.setBetId, this);
          this.node.on("UPDATE_BET", this.updateBet, this);
          this.node.on("UPDATE_EXTRA_BET", this.updateExtraBet, this);
          this.node.on("LOAD_BET", this.loadCacheBet, this);
          this.node.on('ENABLE_BET', this.enableBet, this);
          this.node.on('DISABLE_BET', this.disableBet, this);
          this.betData = this.dataStore.betData;
          this.disableBet();
        };

        _proto.initBet = function initBet() {
          var cacheBet = this.loadCacheBet();
          var betKey = cacheBet ? cacheBet[0] : this.betData.betKey;

          if (!this.betData.mainBets.hasOwnProperty(betKey)) {
            betKey = this._getDefaultKey(this.betData.mainBets);
          }

          var extraBetKey = cacheBet ? cacheBet[1] : this.betData.extraBetKey;

          if (!this.betData.extraBets.hasOwnProperty(extraBetKey)) {
            extraBetKey = this._getDefaultKey(this.betData.extraBets);
          }

          this.updateBet(betKey);
          this.updateExtraBet(extraBetKey);

          if (this.config.HAS_SELECT_BET_LINE) {
            var cacheBetLines = this.loadCacheBetLines() || this.betData.betLines;
            this.updateBetLines(cacheBetLines, true);
          }
        };

        _proto.setBetId = function setBetId(betId) {
          this.updateBet(betId[0]);
          this.updateExtraBet(betId[1]);
        };

        _proto.updateBet = function updateBet(betKey) {
          this.betData.updateBet(betKey);
          this.betLabel.string = this.isFormatDenom ? formatWalletMoney(this.betData.denom) : formatMoney(this.betData.denom);
          this.totalLabel.string = this.isFormatTotal ? formatWalletMoney(this.betData.getTotalBet()) : formatMoney(this.betData.getTotalBet());
          this.eventManager.emit(EventNames.BET_UPDATE, true);
          if (!this.dataStore.isTrialMode) this.cacheBet();
        };

        _proto.updateExtraBet = function updateExtraBet(extraBetKey) {
          this.betData.updateExtraBet(extraBetKey);

          if (this.extraBetLabel) {
            this.extraBetLabel.string = this.betData.extraBetValue;
            this.totalLabel.string = this.isFormatTotal ? formatWalletMoney(this.betData.getTotalBet()) : formatMoney(this.betData.getTotalBet());
          }

          this.eventManager.emit(EventNames.BET_UPDATE);
          if (!this.dataStore.isTrialMode) this.cacheBet();
        };

        _proto.updateBetLines = function updateBetLines(betLines, loadCache) {
          if (loadCache === void 0) {
            loadCache = false;
          }

          if (!loadCache) {
            this.eventManager.emit(EventNames.BET_LINE_PREUPDATE);
          }

          this.betData.updateBetLines(betLines);

          if (this.betLinesLabel) {
            this.betLinesLabel.string = this.betData.betLineNumber;
            this.totalLabel.string = this.isFormatTotal ? formatWalletMoney(this.dataStore.getTotalBet()) : formatMoney(this.dataStore.getTotalBet());
          }

          if (!loadCache) {
            this.eventManager.emit(EventNames.BET_LINE_UPDATE);
          }

          if (!this.dataStore.isTrialMode) this.cacheBetLines();
        }
        /**
         * @event_click
         */
        ;

        _proto.increaseBet = function increaseBet() {
          this.betUpSoundId && this.soundPlayer && this.soundPlayer.playSfx(this.betUpSoundId);
          var _this$betData = this.betData,
              betKey = _this$betData.betKey,
              mainBets = _this$betData.mainBets;

          var newBetKey = this._getNextKey(betKey, mainBets);

          this.updateBet(newBetKey);
          this.guiMgr.onIngameEvent(TutorialTriggerType.IncreaseBet, 'BET_INCREASE');
        };

        _proto.reduceBet = function reduceBet() {
          this.betDownSoundId && this.soundPlayer && this.soundPlayer.playSfx(this.betDownSoundId);
          var _this$betData2 = this.betData,
              betKey = _this$betData2.betKey,
              mainBets = _this$betData2.mainBets;

          var newBetKey = this._getPrevKey(betKey, mainBets);

          this.updateBet(newBetKey);
        };

        _proto.increaseExtraBet = function increaseExtraBet() {
          this.betUpSoundId && this.soundPlayer && this.soundPlayer.playSfx(this.betUpSoundId);
          var _this$betData3 = this.betData,
              extraBetKey = _this$betData3.extraBetKey,
              extraBets = _this$betData3.extraBets;

          var newExtraBetKey = this._getNextKey(extraBetKey, extraBets);

          this.updateExtraBet(newExtraBetKey);
          this.guiMgr.onIngameEvent(TutorialTriggerType.IncreaseExtraBet, 'EXTRA_BET_INCREASE');
        };

        _proto.reduceExtraBet = function reduceExtraBet() {
          this.betDownSoundId && this.soundPlayer && this.soundPlayer.playSfx(this.betDownSoundId);
          var _this$betData4 = this.betData,
              extraBetKey = _this$betData4.extraBetKey,
              extraBets = _this$betData4.extraBets;

          var newExtraBetKey = this._getPrevKey(extraBetKey, extraBets);

          this.updateExtraBet(newExtraBetKey);
        };

        _proto.increaseBetLines = function increaseBetLines() {
          this.betUpSoundId && this.soundPlayer && this.soundPlayer.playSfx(this.betUpSoundId);
          var _this$betData5 = this.betData,
              betLines = _this$betData5.betLines,
              maxBetLine = _this$betData5.maxBetLine;
          var newBetLines = betLines.slice();

          if (newBetLines.length < maxBetLine) {
            var newLine = newBetLines.length + 1;
            newBetLines.push(newLine);
          } else {
            newBetLines = [1];
          }

          this.updateBetLines(newBetLines);
        };

        _proto.reduceBetLines = function reduceBetLines() {
          this.betDownSoundId && this.soundPlayer && this.soundPlayer.playSfx(this.betDownSoundId);
          var betLines = this.betData.betLines;
          var newBetLines = betLines.slice();

          if (newBetLines.length > 1) {
            newBetLines.pop();
          } else {
            newBetLines = this.betData.getDefaultBetLines();
          }

          this.updateBetLines(newBetLines);
        }
        /**
         * @cache_Bet_data
         */
        ;

        _proto.cacheBet = function cacheBet() {
          var gameId = this.config.GAME_ID;
          var betCacheConfig = JSON.parse(sys.localStorage.getItem('betId') || '{}');
          betCacheConfig = lodash.isObject(betCacheConfig) ? betCacheConfig : {};
          betCacheConfig[gameId] = this.betData.betId;
          sys.localStorage.setItem('betId', JSON.stringify(betCacheConfig));
        };

        _proto.loadCacheBet = function loadCacheBet() {
          var gameId = this.config.GAME_ID;
          var cacheBetId = JSON.parse(sys.localStorage.getItem('betId') || '{}');
          if (cacheBetId[gameId]) return cacheBetId[gameId];
          return '';
        };

        _proto.cacheBetLines = function cacheBetLines() {
          var gameId = this.config.GAME_ID;
          var cacheBetLines = JSON.parse(sys.localStorage.getItem('betLines') || '{}');
          cacheBetLines = lodash.isObject(cacheBetLines) ? cacheBetLines : {};
          cacheBetLines[gameId] = this.betData.betLines.slice();
          sys.localStorage.setItem('betLines', JSON.stringify(cacheBetLines));
        };

        _proto.loadCacheBetLines = function loadCacheBetLines() {
          var gameId = this.config.GAME_ID;
          var cacheBetLines = JSON.parse(sys.localStorage.getItem('betLines')) || {};
          if (cacheBetLines[gameId]) return cacheBetLines[gameId];
          return null;
        };

        _proto._getDefaultKey = function _getDefaultKey(obj) {
          var keys = Object.keys(obj);
          if (keys.length < 0) throw new Error("invalid object");
          return keys.sort()[0];
        };

        _proto._getNextKey = function _getNextKey(currentKey, object) {
          var keys = Object.keys(object);
          var currentIndex = keys.indexOf(currentKey);
          var newIndex = currentIndex === keys.length - 1 ? 0 : currentIndex + 1;
          return keys[newIndex];
        };

        _proto._getPrevKey = function _getPrevKey(currentKey, object) {
          var keys = Object.keys(object);
          var currentIndex = keys.indexOf(currentKey);
          var newIndex = currentIndex === 0 ? keys.length - 1 : currentIndex - 1;
          return keys[newIndex];
        };

        _proto.enableBet = function enableBet() {
          this.enableBetBtn();
          this.enableExtraBetBtn();
          this.enableBetLineBtn();
        };

        _proto.disableBet = function disableBet() {
          this.disableBetBtn();
          this.disableExtraBetBtn();
          this.disableBetLineBtn();
        };

        _proto.enableBetBtn = function enableBetBtn() {
          this.increaseBetBtn && (this.increaseBetBtn.interactable = true);
          this.reduceBetBtn && (this.reduceBetBtn.interactable = true);
        };

        _proto.disableBetBtn = function disableBetBtn() {
          this.increaseBetBtn && (this.increaseBetBtn.interactable = false);
          this.reduceBetBtn && (this.reduceBetBtn.interactable = false);
        };

        _proto.enableExtraBetBtn = function enableExtraBetBtn() {
          this.increaseExtraBtn && (this.increaseExtraBtn.interactable = true);
          this.reduceExtraBtn && (this.reduceExtraBtn.interactable = true);
        };

        _proto.disableExtraBetBtn = function disableExtraBetBtn() {
          this.increaseExtraBtn && (this.increaseExtraBtn.interactable = false);
          this.reduceExtraBtn && (this.reduceExtraBtn.interactable = false);
        };

        _proto.enableBetLineBtn = function enableBetLineBtn() {
          this.increaseBetLinesBtn && (this.increaseBetLinesBtn.interactable = true);
          this.reduceBetLinesBtn && (this.reduceBetLinesBtn.interactable = true);
        };

        _proto.disableBetLineBtn = function disableBetLineBtn() {
          this.increaseBetLinesBtn && (this.increaseBetLinesBtn.interactable = false);
          this.reduceBetLinesBtn && (this.reduceBetLinesBtn.interactable = false);
        };

        return Bet;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "increaseBetBtn", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "reduceBetBtn", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "increaseExtraBtn", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "reduceExtraBtn", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "increaseBetLinesBtn", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "reduceBetLinesBtn", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "totalLabel", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "betLabel", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "extraBetLabel", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "betLinesLabel", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "isFormatDenom", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "isFormatTotal", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "betUpSoundId", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "BET_UP";
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "betDownSoundId", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "BET_DOWN";
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BetData.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _createClass, cclegacy;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "09c7bjvNx1CmLTFZ9Hw7fkA", "BetData", undefined);

      var BetData = exports('default', /*#__PURE__*/function () {
        function BetData(config) {
          this.betKey = void 0;
          this.extraBetKey = void 0;
          this.mainBets = void 0;
          this.extraBets = {
            "0": 1
          };
          this.betLines = [];
          this.maxBetLine = 20;
          this.betLineNumber = this.maxBetLine;
          this.totalCredit = void 0;
          this.denom = void 0;
          this.isAlways = void 0;
          this.betKey = config.DEFAULT_BET;
          this.extraBetKey = config.DEFAULT_EXTRA_BET;
          this.mainBets = config.BETS;
          this.extraBets = config.EXTRA_BETS;
          this.betLineNumber = this.maxBetLine = config.PAY_LINE_LENGTH;
          this.isAlways = config.PAY_LINE_ALLWAYS;
          this.totalCredit = config.TOTAL_BET_CREDIT;
          this.denom = this.isAlways ? 1 : this.betValue / this.maxBetLine;

          if (config.HAS_SELECT_BET_LINE) {
            this.betLines = this.getDefaultBetLines();
          }
        }

        var _proto = BetData.prototype;

        _proto.updateBetData = function updateBetData(mainBets, extraBets, betLine) {
          this.mainBets = mainBets;
          var mainKeys = Object.keys(this.mainBets).sort();
          if (!this.mainBets.hasOwnProperty(this.betKey)) this.betKey = mainKeys[0];
          this.extraBets = extraBets || this.extraBets;
          var extraKeys = Object.keys(this.extraBets);
          if (!this.extraBets.hasOwnProperty(this.extraBetKey)) this.extraBetKey = extraKeys[0];
          this.betLines = betLine || this.betLines;
          this.denom = this.isAlways ? 1 : this.betValue / this.maxBetLine;
        };

        _proto.updateBet = function updateBet(betKey) {
          this.betKey = betKey;
          this.denom = this.isAlways ? 1 : this.betValue / this.maxBetLine;
        };

        _proto.updateExtraBet = function updateExtraBet(extraBetKey) {
          this.extraBetKey = extraBetKey;
        };

        _proto.updateBetLines = function updateBetLines(betLines) {
          this.betLines = betLines;
          this.betLineNumber = this.betLines.length;
        };

        _proto.getDefaultBetLines = function getDefaultBetLines() {
          // full lines
          var betLines = [];

          for (var i = 1; i <= this.maxBetLine; i++) {
            betLines.push(i);
          }

          return betLines;
        };

        _proto.getTotalBet = function getTotalBet() {
          if (this.isAlways) {
            return this.betValue * this.extraBetValue;
          } else {
            this.denom = this.betValue / this.maxBetLine;
            return this.denom * this.extraBetValue * this.betLineNumber;
          }
        };

        _proto.getBetLevel = function getBetLevel() {
          return this.betValue / this.totalCredit;
        };

        _createClass(BetData, [{
          key: "betId",
          get: function get() {
            return this.betKey + this.extraBetKey;
          }
        }, {
          key: "betValue",
          get: function get() {
            return this.mainBets[this.betKey];
          }
        }, {
          key: "extraBetValue",
          get: function get() {
            return this.extraBets[this.extraBetKey];
          }
        }]);

        return BetData;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BetHistoryMgr.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, instantiate, warn, GameObject;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      instantiate = module.instantiate;
      warn = module.warn;
    }, function (module) {
      GameObject = module.GameObject;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "f96b82SuNNKBJqsG+zgFnPs", "BetHistoryMgr", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BetHistoryMgr = exports('BetHistoryMgr', (_dec = ccclass('BetHistoryMgr'), _dec2 = property({
        type: Prefab
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(BetHistoryMgr, _GameObject);

        function BetHistoryMgr() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "betHistoryPrefab", _descriptor, _assertThisInitialized(_this));

          _this.playSession = null;
          _this.token = null;
          _this.tokenType = null;
          _this.userId = null;
          _this.betInstance = null;
          _this.betHistory = null;
          _this.gameId = null;
          return _this;
        }

        var _proto = BetHistoryMgr.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          var queryString = window.location.search;
          var urlParams = new URLSearchParams(queryString);
          this.playSession = urlParams.get('psId');
          this.token = urlParams.get('token');
          this.tokenType = urlParams.get('tokenType');
          this.userId = urlParams.get('userId'); //this.config = this.node["config"];

          if (this.betHistoryPrefab && this.playSession) {
            this.betInstance = instantiate(this.betHistoryPrefab);
            this.betInstance.parent = this.node;
            this.betInstance.active = true;
            this.betInstance.setPosition(0, 0);
            this.betInstance.getComponent('SlotUIScene').show();
            this.betHistory = this.betInstance.getComponent('SlotBetHistory');
            this.betInstance.getComponentInChildren('SlotBetHistoryDetail').setToken(this.token, this.tokenType, this.userId);
            this.betHistory.openBetDetail({
              userData: {
                sessionId: this.playSession
              }
            });
            this.betInstance.getComponentInChildren('SlotBetHistoryDetail').disableCloseDetail();
          } else {
            warn("Cant get history prefab for game " + this.gameId);
          }
        };

        return BetHistoryMgr;
      }(GameObject), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "betHistoryPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BetOptionItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Component, formatMoney;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      formatMoney = module.formatMoney;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "c74daLISiVCeZB30tnBNK5K", "BetOptionItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BetOptionItem = exports('BetOptionItem', (_dec = ccclass('BetOptionItem'), _dec2 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(BetOptionItem, _Component);

        function BetOptionItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "betOptionValue", _descriptor, _assertThisInitialized(_this));

          _this.controller = null;
          _this.itemIndex = 0;
          return _this;
        }

        var _proto = BetOptionItem.prototype;

        _proto.onLoad = function onLoad() {
          this.node.on("UPDATE_DATA", this.updateData, this);
          this.node['updatedata'] = this.updateData.bind(this);
        };

        _proto.updateData = function updateData(values, index, controller) {
          this.controller = controller;
          this.betOptionValue.string = formatMoney(values);
          this.itemIndex = index;
        };

        _proto.onClick = function onClick() {
          if (!this.controller.getSelectBlocked()) {
            this.controller.setStopTouchUp();
            this.controller.selectBet(this.itemIndex, 0.5);
          }
        };

        return BetOptionItem;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "betOptionValue", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BetOptionScrollView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, UITransform, ScrollView, tween, Layout, Vec3, GameObject;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      UITransform = module.UITransform;
      ScrollView = module.ScrollView;
      tween = module.tween;
      Layout = module.Layout;
      Vec3 = module.Vec3;
    }, function (module) {
      GameObject = module.GameObject;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "7fa2eZlc8pN17hZpUQRMS8/", "BetOptionScrollView", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BetOptionScrollView = exports('BetOptionScrollView', (_dec = ccclass('BetOptionScrollView'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(BetOptionScrollView, _GameObject);

        function BetOptionScrollView() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "scrollView", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "content", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "view", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "betSelectPrefabName", _descriptor4, _assertThisInitialized(_this));

          _this.poolFactory = null;
          _this.initPos = null;
          _this.heightItem = 60;
          _this.listItems = [];
          _this.currentIndex = 0;
          _this.limitTop = 0;
          _this.limitBottom = 0;
          _this.isTouchStarted = false;
          _this.controller = null;
          _this.isSelectBlocked = false;
          _this.countWheel = 0;
          _this.scrollDirection = 0;
          _this.isTouchUp = false;
          _this.listBetValues = [];
          _this.maxBet = 0;
          return _this;
        }

        var _proto = BetOptionScrollView.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          this.scrollView.on("scroll-ended", this.scrollEnded, this);
          this.scrollView.on("touch-up", this.touchUp, this);
          this.scrollView.on("scrolling", this.scrollingView, this);
          this.initPos = this.view.getComponent(UITransform).height / 2;
          this.node.on("UPDATE_DATA", this.updateData, this);
          this.node.on("SELECT_MAX_BET", this.selectMaxBet, this);
          this.node.on("CLEAR_ALL_BET", this.clearAllBets, this);
          this.view.on(Node.EventType.TOUCH_END, this.touchViewEnded.bind(this));
          this.view.on(Node.EventType.TOUCH_START, this.touchViewStart.bind(this));
          this.view.on(Node.EventType.TOUCH_MOVE, this.touchViewMove.bind(this));
          this.view.on(Node.EventType.TOUCH_CANCEL, this.touchViewCancel.bind(this));
          this.view.on(Node.EventType.MOUSE_WHEEL, this.mouseWheel.bind(this));
          this.listItems = [];
          this.currentIndex = 0;
          if (this.mainDirector) this.poolFactory = this.mainDirector.poolFactory;
        };

        _proto.scrollingView = function scrollingView() {
          var height = this.content.getPosition().y;
          if (height <= this.limitTop || height >= this.limitBottom) return;
          if (this.touchViewStart) height = this.getCorrectPositionY(this.content.getPosition().y);
        };

        _proto.touchViewMove = function touchViewMove() {
          if (this.touchViewStart) {
            this.content.getPosition().y = this.getCorrectPositionY(this.content.getPosition().y);
          }
        };

        _proto.touchViewEnded = function touchViewEnded() {
          this.isTouchStarted = false;

          if (this.getIsScrolling() == true) {
            this.controller.unSetSelectColorButtons(this.currentIndex == 0);
          }
        };

        _proto.touchViewStart = function touchViewStart() {
          this.isTouchStarted = true;
          this.controller.setSelectColorButtons();
        };

        _proto.touchViewCancel = function touchViewCancel() {
          if (this.getIsScrolling() == false) this.controller.unSetSelectColorButtons(this.currentIndex == 0);
        };

        _proto.getIsScrolling = function getIsScrolling() {
          return this.scrollView.getComponent(ScrollView).isScrolling();
        };

        _proto.getSelectBlocked = function getSelectBlocked() {
          return this.isSelectBlocked;
        };

        _proto.mouseWheel = function mouseWheel() {
          var _this2 = this;

          var height = this.content.getPosition().y;
          if (height <= this.limitTop || height >= this.limitBottom) return;
          if (!this.countWheel) this.countWheel = 0;
          if (!this.content.prevPos) this.content.prevPos = this.content.getPosition();

          if (this.countWheel >= 3) {
            this.scrollDirection = height - this.content.prevPos.y > 0 ? 1 : -1;
            height = this.getCorrectPositionY(height + this.scrollDirection * 25);
            this.countWheel = 0;
          }

          this.isTouchUp = false;
          this.node.tweenNode && this.node.tweenNode.top();
          this.node.tweennNode = tween(this.node).delay(0.101).call(function () {
            _this2.calculateScroll();
          }).start();
          this.content.prevPos = this.content.getPosition();
          this.countWheel++;
        };

        _proto.clearAllBets = function clearAllBets() {
          for (var i = 0; i < this.listItems.length; i++) {
            var removeObj = this.listItems[i];
            if (this.poolFactory) this.poolFactory.removeObject(removeObj);
          }

          this.listItems = [];
        };

        _proto.updateData = function updateData(listBetValues, currentBetData, controller) {
          if (listBetValues === void 0) {
            listBetValues = [];
          }

          this.controller = controller;
          this.clearAllBets();
          this.listBetValues = [].concat(listBetValues);
          this.maxBet = this.listBetValues[0];

          for (var i = 0; i < listBetValues.length; i++) {
            var item = this.poolFactory && this.poolFactory.getObject(this.betSelectPrefabName);

            if (item) {
              item.active = true;
              item.parent = this.content;
              item.emit("UPDATE_DATA", this.listBetValues[i], i, this);
              item.setSiblingIndex(2);
              this.heightItem = item.getComponent(UITransform).height;
              this.listItems.push(item);
            }
          }

          var found = this.listBetValues.findIndex(function (it) {
            if (it == currentBetData) return true;
          });
          var reserveFound = this.listBetValues.length - 1 - found;
          this.content.getComponent(Layout).updateLayout();
          this.currentIndex = reserveFound;
          this.selectItemInAction(0.1, reserveFound, this.currentIndex == 0);
          this.limitTop = this.heightItem * 3;
          this.limitBottom = this.content.getComponent(UITransform).height - this.heightItem * 3;
        };

        _proto.getCorrectPositionY = function getCorrectPositionY(newY) {
          if (this.content.getPosition().y <= this.limitTop) return this.limitTop;else if (this.content.getPosition().y >= this.limitBottom) return this.limitBottom;
          return newY;
        };

        _proto.setStopTouchUp = function setStopTouchUp() {
          this.isTouchUp = false;
        };

        _proto.touchUp = function touchUp() {
          this.isTouchUp = true;
        };

        _proto.selectBet = function selectBet(index, timeScroll) {
          if (index === void 0) {
            index = 0;
          }

          if (timeScroll === void 0) {
            timeScroll = 0.1;
          }

          this.controller.setSelectedBet(this.listBetValues[index], index == 0);
          var reserveIndex = this.listBetValues.length - 1 - index;
          this.currentIndex = index;
          this.selectItemInAction(timeScroll, reserveIndex, true);
          this.controller.unSetSelectColorButtons(this.currentIndex == 0);
        };

        _proto.selectMaxBet = function selectMaxBet() {
          this.selectBet(0);
        };

        _proto.selectItemInAction = function selectItemInAction(time, index, isMaxBet) {
          var _this3 = this;

          if (time === void 0) {
            time = 0.15;
          }

          if (isMaxBet === void 0) {
            isMaxBet = false;
          }

          if (this.isSelectBlocked) return;
          this.isSelectBlocked = true;
          this.controller.unSetSelectColorButtons(isMaxBet);
          var nextPos = this.initPos + index * this.heightItem;
          this.content.tweenMove && this.content.tweenMove.stop();
          this.content.tweenMove = tween(this.content).to(time, {
            position: new Vec3(0, nextPos, 0)
          }, {
            easing: 'expoOut'
          }).start();
          this.content.tweenUnBlock && this.content.tweenUnBlock.stop();
          this.content.tweenUnBlock = tween(this.content).delay(0.1).call(function () {
            _this3.isSelectBlocked = false;
          }).start();
        };

        _proto.scrollEnded = function scrollEnded() {
          if (this.isTouchUp) {
            this.calculateScroll(0.15);
          }
        };

        _proto.calculateScroll = function calculateScroll(timeScroll) {
          if (timeScroll === void 0) {
            timeScroll = 0.1;
          }

          var offset = this.content.getPosition().y - this.initPos;
          var index = Math.round(offset / this.heightItem);
          if (index < 0) index = 0;else if (index >= this.listBetValues.length) index = this.listBetValues.length - 1;
          var reserveIndex = this.listBetValues.length - 1 - index;
          this.currentIndex = reserveIndex;
          var isMaxBet = reserveIndex == 0;
          this.controller.setSelectedBet(this.listBetValues[reserveIndex], isMaxBet);
          this.selectItemInAction(timeScroll, index, isMaxBet);
          this.isTouchUp = false;
          this.controller.unSetSelectColorButtons(this.currentIndex == 0);
        };

        _proto.onDestroy = function onDestroy() {
          this.content.tweenUnBlock && this.content.tweenUnBlock.stop();
          this.content.tweenMove && this.content.tweenMove.stop();
          this.node.tweenNode && this.node.tweenNode.stop();
        };

        _proto.getSelectBlock = function getSelectBlock() {
          return this.isSelectBlocked;
        };

        return BetOptionScrollView;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "scrollView", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "content", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "view", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "betSelectPrefabName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "BetOptionItem9947";
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BetSelectionMgr.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, tween, GameObject;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      tween = module.tween;
    }, function (module) {
      GameObject = module.GameObject;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "f2cd5wBJKJCU6MZJLN9UrtQ", "BetSelectionMgr", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BetSelectionMgr = exports('BetSelectionMgr', (_dec = ccclass('BetSelectionMgr'), _dec2 = property(Node), _dec3 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(BetSelectionMgr, _GameObject);

        function BetSelectionMgr() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "overlay", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "betSelectionPanel", _descriptor2, _assertThisInitialized(_this));

          _this.isShowing = false;
          _this.tweenShow = null;
          return _this;
        }

        var _proto = BetSelectionMgr.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          this.node.on("SHOW", this.show, this);
          this.node.on("HIDE", this.hide, this);
          this.node['SHOW'] = this.show.bind(this);
          this.node['HIDE'] = this.hide.bind(this);
        };

        _proto.start = function start() {
          this.overlay.active = false;
          this.betSelectionPanel.active = false;
          this.isShowing = false;
        };

        _proto.show = function show() {
          var _this2 = this;

          if (this.isShowing) return;
          if (this.tweenShow) this.tweenShow.stop();
          this.tweenShow = tween(this.node).call(function () {
            _this2.isShowing = true;
            _this2.overlay.active = true;

            _this2.setOpacity(_this2.overlay, 0);

            _this2.fadeTo(_this2.overlay, 0.1, 120, {
              easing: 'sineIn'
            });
          }).delay(0.1).call(function () {
            _this2.betSelectionPanel.active = true;

            _this2.betSelectionPanel.emit("UPDATE_VALUE");

            _this2.betSelectionPanel.emit("SHOW");

            _this2.tweenShow = null;
          });
          this.tweenShow.start();
        };

        _proto.hide = function hide() {
          var _this3 = this;

          if (this.tweenShow) this.tweenShow.stop();
          this.tweenShow = tween(this.node).call(function () {
            _this3.isShowing = false;

            _this3.betSelectionPanel.emit("HIDE");
          }).delay(0.22).call(function () {
            _this3.betSelectionPanel.emit("CLEAR_ALL_BET");

            _this3.betSelectionPanel.active = false;

            _this3.fadeOut(_this3.overlay, 0.1, {
              easing: 'sineIn'
            });
          }).delay(0.1).call(function () {
            _this3.overlay.active = false;
            _this3.node.active = false;
            _this3.tweenShow = null;
          });
          this.tweenShow.start();
        };

        return BetSelectionMgr;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "overlay", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "betSelectionPanel", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BetSelectionPanelController.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts', './utils.ts', './CustomType.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Color, Button, Label, GameObject, formatMoney, findKeyByValue, CustomEvent;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Color = module.Color;
      Button = module.Button;
      Label = module.Label;
    }, function (module) {
      GameObject = module.GameObject;
    }, function (module) {
      formatMoney = module.formatMoney;
      findKeyByValue = module.findKeyByValue;
    }, function (module) {
      CustomEvent = module.CustomEvent;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12;

      cclegacy._RF.push({}, "dfe6bA6RzNHXqPkU4B2QNps", "BetSelectionPanelController", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BetSelectionPanelController = exports('BetSelectionPanelController', (_dec = ccclass('BetSelectionPanelController'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Node), _dec7 = property(Node), _dec8 = property(Node), _dec9 = property(Node), _dec10 = property(Color), _dec11 = property(Color), _dec12 = property(Color), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(BetSelectionPanelController, _GameObject);

        function BetSelectionPanelController() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "btnConfirm", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnClose", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnMaxBet", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "betOption", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lblWinAmount", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lblWallet", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lblCurrentBet", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lblMax", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "colorSelectedConfirm", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "colorSelectedMaxbet", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "colorUnSelected", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "selectedValue", _descriptor12, _assertThisInitialized(_this));

          _this.selectedBet = 0;
          _this.selectBetEvent = null;
          return _this;
        }

        var _proto = BetSelectionPanelController.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          this.node.on('UPDATE_VALUE', this.updateValue, this);
          this.node.on('CLEAR_ALL_BET', this.clearAllBets, this);
        };

        _proto.updateValue = function updateValue() {
          var currentBetData = this.dataStore.betData.getTotalBet();
          var mainBets = this.dataStore.betData.mainBets;
          var betValues = Object.values(mainBets).sort(function (a, b) {
            return b - a;
          });
          this.betOption.emit("UPDATE_DATA", betValues, currentBetData, this);
          var isMaxBet = betValues[0] == currentBetData;
          this.btnMaxBet.getComponent(Button).interactable = !isMaxBet;
          this.unSetSelectColorButtons(isMaxBet);
          this.updateBottomLabelValue();
        };

        _proto.updateBottomLabelValue = function updateBottomLabelValue() {
          var currentBetData = this.dataStore.betData.getTotalBet();
          var wallet = this.dataStore.getCurrentWallet();
          var winAmountPS = this.dataStore.playSession.winAmountPS;
          this.lblWinAmount && (this.lblWinAmount.getComponent(Label).string = formatMoney(winAmountPS));
          this.lblCurrentBet && (this.lblCurrentBet.getComponent(Label).string = formatMoney(currentBetData));

          if (!this.dataStore.isTrialMode) {
            this.lblWallet && (this.lblWallet.getComponent(Label).string = formatMoney(wallet));
          }
        };

        _proto.setSelectedBet = function setSelectedBet(value, isMaxBet) {
          if (isMaxBet === void 0) {
            isMaxBet = false;
          }

          this.selectedBet = value;
          this.btnMaxBet.getComponent(Button).interactable = !isMaxBet;
        };

        _proto.setSelectColorButtons = function setSelectColorButtons() {
          this.btnMaxBet.getComponent(Button).target.color = this.colorSelectedMaxbet;
          this.btnConfirm.getComponent(Button).target.color = this.colorSelectedConfirm;
          this.btnClose.getComponent(Button).target.color = this.colorSelectedConfirm;
          this.lblMax.color = this.colorSelectedMaxbet;
        };

        _proto.unSetSelectColorButtons = function unSetSelectColorButtons(isMaxBet) {
          if (isMaxBet === void 0) {
            isMaxBet = false;
          }

          if (!isMaxBet) {
            this.btnMaxBet.getComponent(Button).target.color = this.colorUnSelected;
            this.lblMax.color = this.colorUnSelected;
          } else {
            this.btnMaxBet.getComponent(Button).target.color = this.colorUnSelected;
            this.lblMax.color = this.colorSelectedMaxbet;
          }

          this.btnConfirm.getComponent(Button).target.color = this.colorUnSelected;
          this.btnClose.getComponent(Button).target.color = this.colorUnSelected;
        };

        _proto.clickBtnConfirm = function clickBtnConfirm() {
          var mainBets = this.dataStore.betData.mainBets;
          var keyId = findKeyByValue(mainBets, this.selectedBet);
          this.selectBetEvent = new CustomEvent('SELECT_BET_EVENT', true, {
            betValue: keyId
          }); // this.selectBetEvent['betValue'] = this.selectBetEvent

          this.node.dispatchEvent(this.selectBetEvent);
        };

        _proto.onClickMaxBet = function onClickMaxBet() {
          this.soundPlayer && this.soundPlayer.playSFXClick();
          this.betOption.emit('SELECT_MAX_BET');
        };

        _proto.clearAllBets = function clearAllBets() {
          this.betOption.emit("CLEAR_ALL_BET");
        };

        _proto.clickBtnClose = function clickBtnClose() {
          this.soundPlayer && this.soundPlayer.playSFXClick();
          this.node.parent.emit("HIDE");
        };

        return BetSelectionPanelController;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "btnConfirm", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btnClose", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "btnMaxBet", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "betOption", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "lblWinAmount", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "lblWallet", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "lblCurrentBet", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "lblMax", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "colorSelectedConfirm", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Color();
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "colorSelectedMaxbet", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Color();
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "colorUnSelected", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Color();
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "selectedValue", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return -1;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BigWild.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, CCFloat, CCString, Sprite, sp, tween, log, GameObject;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      CCFloat = module.CCFloat;
      CCString = module.CCString;
      Sprite = module.Sprite;
      sp = module.sp;
      tween = module.tween;
      log = module.log;
    }, function (module) {
      GameObject = module.GameObject;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10;

      cclegacy._RF.push({}, "ac272TdMiVOkoZA+w+u9qh1", "BigWild", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BigWild = exports('BigWild', (_dec = ccclass('BigWild'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property({
        type: CCFloat
      }), _dec7 = property({
        type: CCString
      }), _dec8 = property({
        type: CCString
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(BigWild, _GameObject);

        function BigWild() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "spineExpand", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "spineIdle", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "topStaticNode", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "botStaticNode", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "offsetYPos", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "expandAnimationNames", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "idleAnimationName", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "idleAnimationQueue", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "winLineFramePrefabName", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "fadeTime", _descriptor10, _assertThisInitialized(_this));

          _this._spineSkeletonExp = void 0;
          _this._spineSkeletonIdle = void 0;
          _this._poolFactory = null;
          _this._winLineFrame = null;
          _this._topStaticSprite = null;
          _this._botStaticSprite = null;
          _this._topStaticTween = null;
          _this._botStaticTween = null;
          _this.animationLevel = 2;
          return _this;
        }

        var _proto = BigWild.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          this.node.on("PLAY_BIG_WILD", this.playBigWild, this);
          this.node.on("RESET_BIG_WILD", this.reset, this);
          this.node.on("PLAY_ANIMATION", this.playAnimation, this);
          this.node.on("STOP_ANIMATION", this.stopAnimation, this);
          this.node.playBigWild = this.playBigWild.bind(this);
          this.node.reset = this.reset.bind(this);
          this.node.playAnimation = this.playAnimation.bind(this);
          this.node.stopAnimation = this.stopAnimation.bind(this);
          this.initSkeletonData();

          if (this.topStaticNode) {
            this._topStaticSprite = this.topStaticNode.getComponent(Sprite);
          }

          if (this.botStaticNode) {
            this._botStaticSprite = this.botStaticNode.getComponent(Sprite);
          }
        };

        _proto.start = function start() {
          var mainDirector = this.node["mainDirector"];

          if (mainDirector) {
            this._poolFactory = mainDirector.poolFactory;
          }

          this.createWinLineFrame();
        };

        _proto.onEnable = function onEnable() {
          this.createWinLineFrame();
        };

        _proto.onDisable = function onDisable() {
          if (this._poolFactory && this._winLineFrame) {
            this._poolFactory.removeObject(this._winLineFrame);

            this._winLineFrame = null;
          }
        };

        _proto.createWinLineFrame = function createWinLineFrame() {
          if (!this.winLineFramePrefabName) return;

          if (this._poolFactory && !this._winLineFrame) {
            this._winLineFrame = this._poolFactory.getObject(this.winLineFramePrefabName);
            this._winLineFrame.parent = this.node;
          }
        };

        _proto.reset = function reset() {
          this.unscheduleAllCallbacks();

          if (this.spineExpand) {
            this.setOpacity(this.spineExpand, 1);
            this.spineExpand.active = false;
          }

          if (this.spineIdle) {
            this.setOpacity(this.spineIdle, 1);
            this.spineIdle.active = false;
          }

          if (this.topStaticNode) {
            this._topStaticSprite.fillRange = 0;
            this._topStaticSprite.fillStart = 0;
            this.topStaticNode.active = false;
          }

          if (this.botStaticNode) {
            this._botStaticSprite.fillRange = 0;
            this._botStaticSprite.fillStart = 0;
            this.botStaticNode.active = false;
          }
        };

        _proto.initSkeletonData = function initSkeletonData() {
          if (this.spineExpand && this.spineExpand.getComponent(sp.Skeleton)) {
            this._spineSkeletonExp = this.spineExpand.getComponent(sp.Skeleton);

            if (!this._spineSkeletonExp) {
              return;
            }

            this.setOpacity(this.spineExpand, 1);

            for (var i = 0; i < this.expandAnimationNames.length; i++) {
              this._spineSkeletonExp.setAnimation(0, this.expandAnimationNames[i], false);
            }

            this.spineExpand.active = false;
          }

          if (this.spineIdle && this.spineIdle.getComponent(sp.Skeleton)) {
            this._spineSkeletonIdle = this.spineIdle.getComponent(sp.Skeleton);
            this.setOpacity(this.spineIdle, 1);

            this._spineSkeletonIdle.setAnimation(0, this.idleAnimationName, false);

            this.spineIdle.active = false;
          }
        };

        _proto.playBigWild = function playBigWild(row, col, isIdleFirst, playContinuosIdle) {
          if (isIdleFirst === void 0) {
            isIdleFirst = false;
          }

          if (playContinuosIdle === void 0) {
            playContinuosIdle = false;
          }
          /*const performanceLvl = (this.dataStore &&this.dataStore.performanceLevel) || 'HIGH_PERFORMANCE_LV';
          this.animationLevel = this.config[performanceLvl].PAYLINE_ANIMATION;
          if(this.animationLevel< Number(PerformanceLevel.Medium)){
              this.playStaticAnimation(row, col, isIdleFirst);
          }else{
              this.playSpineAnimation(row, col, isIdleFirst, playContinuosIdle);
          }*/


          this.playSpineAnimation(row, col, isIdleFirst, playContinuosIdle);
        };

        _proto.playStaticAnimation = function playStaticAnimation(row, col, isIdleFirst) {
          var _this2 = this;

          if (isIdleFirst === void 0) {
            isIdleFirst = false;
          }

          if (!this._topStaticSprite || !this._botStaticSprite) return;
          var duration = 0.15;
          this._topStaticSprite.fillRange = 0;
          this._botStaticSprite.fillRange = 0;
          if (this._topStaticTween) this._topStaticTween.stop();
          if (this._botStaticTween) this._botStaticTween.stop();

          if (isIdleFirst) {
            this.botStaticNode.active = true;
            this._botStaticSprite.fillRange = 1;
            this.playIdleSound(col);
          } else {
            switch (row) {
              case 2:
                // Bot
                this.botStaticNode.active = true;
                this._botStaticSprite.fillStart = 0;
                this._botStaticTween = tween(this._botStaticSprite).to(duration, {
                  fillRange: 1
                }, {
                  easing: 'quartIn'
                }).call(function () {
                  _this2._botStaticTween = null;

                  _this2.playIdleSound(col);
                });

                this._botStaticTween.start();

                break;

              case 1:
                // Mid
                this.botStaticNode.active = true;
                this._botStaticSprite.fillStart = 0.5;
                this._botStaticTween = tween(this._botStaticSprite).to(duration, {
                  fillRange: -0.5
                }, {
                  easing: 'quartIn'
                }).call(function () {
                  _this2._botStaticTween = null;
                });

                this._botStaticTween.start();

                this.topStaticNode.active = true;
                this._topStaticSprite.fillStart = 0.5;
                this._topStaticTween = tween(this._topStaticSprite).to(duration, {
                  fillRange: 0.5
                }, {
                  easing: 'quartIn'
                }).call(function () {
                  _this2._topStaticTween = null;

                  _this2.playIdleSound(col);
                });

                this._topStaticTween.start();

                break;

              case 0:
                // Top
                this.topStaticNode.active = true;
                this._topStaticSprite.fillStart = 1;
                this._topStaticTween = tween(this._topStaticSprite).to(duration, {
                  fillRange: -1
                }, {
                  easing: 'quartIn'
                }).call(function () {
                  _this2._topStaticTween = null;

                  _this2.playIdleSound(col);
                });

                this._topStaticTween.start();

                break;
            }

            this.playExpandSound(col);
          }
        };

        _proto.playSpineAnimation = function playSpineAnimation(row, col, isIdleFirst, playContinuosIdle) {
          var _this3 = this;

          if (isIdleFirst === void 0) {
            isIdleFirst = false;
          }

          if (playContinuosIdle === void 0) {
            playContinuosIdle = false;
          }

          this.unscheduleAllCallbacks();

          if (isIdleFirst) {
            if (playContinuosIdle) {
              this.playLastIdleAnimationInQueue(col);
            } else {
              this.playIdleAnimation(col);
            }
          } else {
            if (this._spineSkeletonExp) {
              this._spineSkeletonIdle && this._spineSkeletonIdle.setCompleteListener(function () {});
              this.spineIdle.active = false;
              this.setOpacity(this.spineIdle, 1);
              var expAnimationName = "";

              if (row >= 0 && row < this.offsetYPos.length) {
                this.spineExpand.setPosition(0, this.offsetYPos[row]);
                expAnimationName = this.expandAnimationNames[row];
                log('===== Exp Anim Name: ' + expAnimationName + ' offsetY: ' + this.offsetYPos[row]);
              }

              this._spineSkeletonExp.setCompleteListener(function () {
                _this3._spineSkeletonExp.setCompleteListener(function () {});

                _this3.spineIdle.active = true;

                _this3.scheduleOnce(function () {
                  if (playContinuosIdle) {
                    _this3.playIdleAnimationQueue(col);
                  } else {
                    _this3.playIdleAnimation(col);
                  }
                }, _this3.fadeTime);
              });

              this.spineExpand.active = true;
              this.setOpacity(this.spineExpand, 1);

              this._spineSkeletonExp.setAnimation(0, expAnimationName, false);

              this.playExpandSound(col);
              this.scheduleOnce(function () {
                _this3.setOpacity(_this3.spineExpand, 255);
              }, this.fadeTime);
            }
          }
        };

        _proto.playIdleAnimation = function playIdleAnimation(col) {
          var _this4 = this;

          if (this.spineIdle) {
            this.scheduleOnce(function () {
              _this4.setOpacity(_this4.spineExpand, 1);

              _this4.spineExpand.active = false;
            }, 0);
            this.spineIdle.active = true;
            this.setOpacity(this.spineIdle, 255);

            this._spineSkeletonIdle.setAnimation(0, this.idleAnimationName, true);

            this.playIdleSound(col);
          }
        };

        _proto.playLastIdleAnimationInQueue = function playLastIdleAnimationInQueue(col) {
          if (this.spineIdle && this.idleAnimationQueue && this.idleAnimationQueue.length > 0) {
            this.setOpacity(this.spineExpand, 1);
            this.spineExpand.active = false;
            this.spineIdle.active = true;
            this.setOpacity(this.spineIdle, 255);

            this._spineSkeletonIdle.setAnimation(0, this.idleAnimationQueue[this.idleAnimationQueue.length - 1], true);

            this.playIdleSound(col);
          }
        };

        _proto.playIdleAnimationQueue = function playIdleAnimationQueue(col) {
          if (this.spineIdle && this.idleAnimationQueue && this.idleAnimationQueue.length > 0) {
            this.setOpacity(this.spineExpand, 1);
            this.spineExpand.active = false;
            this.spineIdle.active = true;
            this.setOpacity(this.spineIdle, 255);

            this._spineSkeletonIdle.setAnimation(0, this.idleAnimationQueue[0], false);

            for (var i = 0; i < this.idleAnimationQueue.length - 1; i++) {
              var isLoop = i == this.idleAnimationQueue.length - 2; //dnvuanh remove wrong setmix
              //this._spineSkeletonIdle.setMix(this.idleAnimationQueue[i], this.idleAnimationQueue[i+1], 0.1);

              this._spineSkeletonIdle.addAnimation(0, this.idleAnimationQueue[i + 1], isLoop);
            }

            this.playIdleSound(col);
          }
        };

        _proto.playExpandSound = function playExpandSound(col) {
          this.soundPlayer && this.soundPlayer.playSfx("OPEN_WILD");
        };

        _proto.playIdleSound = function playIdleSound(col) {
          var wildSoundId = col === 1 ? "WILD_K1" : col === 3 ? "WILD_K2" : null;
          wildSoundId && this.soundPlayer && this.soundPlayer.playSfx(wildSoundId);
        };

        _proto.playAnimation = function playAnimation(row) {
          if (this._winLineFrame) {
            this._winLineFrame.active = true;

            this._winLineFrame.setPosition(0, this.offsetYPos[row]);
          }
        };

        _proto.stopAnimation = function stopAnimation() {
          if (this._winLineFrame) {
            this._winLineFrame.active = false;
          }
        };

        return BigWild;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "spineExpand", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "spineIdle", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "topStaticNode", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "botStaticNode", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "offsetYPos", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "expandAnimationNames", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "idleAnimationName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "idleAnimationQueue", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "winLineFramePrefabName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "fadeTime", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.1;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BigWildTable.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CustomEnum.ts', './DynamicLoadingPrefabControl.ts', './CustomType.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, CCInteger, instantiate, SlotGameMode, PerformanceLevel, DynamicLoadingPrefabControl, AssetPathConfig;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      CCInteger = module.CCInteger;
      instantiate = module.instantiate;
    }, function (module) {
      SlotGameMode = module.SlotGameMode;
      PerformanceLevel = module.PerformanceLevel;
    }, function (module) {
      DynamicLoadingPrefabControl = module.DynamicLoadingPrefabControl;
    }, function (module) {
      AssetPathConfig = module.AssetPathConfig;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "4fa48SxsaJARYGaqOVbcCNV", "BigWildTable", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BigWildObject = exports('BigWildObject', function BigWildObject(_col, _bigWild) {
        this.col = void 0;
        this.bigWild = void 0;
        this.col = _col;
        this.bigWild = _bigWild;
      });
      var BigWildTable = exports('BigWildTable', (_dec = ccclass('BigWildTable'), _dec2 = property({
        type: SlotGameMode
      }), _dec3 = property({
        type: Prefab,
        visible: function visible() {
          return !this.dynamicLoading;
        }
      }), _dec4 = property({
        type: AssetPathConfig,
        visible: function visible() {
          return this.dynamicLoading;
        }
      }), _dec5 = property({
        type: AssetPathConfig,
        visible: function visible() {
          return this.dynamicLoading;
        }
      }), _dec6 = property({
        type: CCInteger
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_DynamicLoadingPrefab) {
        _inheritsLoose(BigWildTable, _DynamicLoadingPrefab);

        function BigWildTable() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _DynamicLoadingPrefab.call.apply(_DynamicLoadingPrefab, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "currentGameMode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bigWildPrefabs", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "highPerfAssetPaths", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lowPerfAssetPaths", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bigWildCollumnIndexList", _descriptor5, _assertThisInitialized(_this));

          _this.bigWilds = [];
          _this._isPlayingHighPerf = true;
          _this._hasLastBigWild = false;
          _this._isPlayingBigWild = false;
          return _this;
        }

        var _proto = BigWildTable.prototype;

        _proto.onLoad = function onLoad() {
          _DynamicLoadingPrefab.prototype.onLoad.call(this); //this.eventManager.on(EventNames.ON_CHANGE_PERFORMANCE, this.onChangePerformance, this);

        };

        _proto.onEnable = function onEnable() {
          this.eventManager.on("INIT_BIG_WILD", this.createBigWilds, this);
          this.eventManager.on("SHOW_BIG_WILD", this.showBigWild, this);
          this.eventManager.on("RESET_BIG_WILD", this.reset, this);
          this.eventManager.on("PLAY_ANIMATION", this.playAnimation, this);
          this.eventManager.on("STOP_ANIMATION", this.stopAnimation, this);
        };

        _proto.start = function start() {
          if (this.bigWilds.length == 0) {
            this.createBigWilds();
          }
        };

        _proto.onDisable = function onDisable() {
          this.eventManager.off("INIT_BIG_WILD", this.createBigWilds, this);
          this.eventManager.off("SHOW_BIG_WILD", this.showBigWild, this);
          this.eventManager.off("RESET_BIG_WILD", this.reset, this);
          this.eventManager.off("PLAY_ANIMATION", this.playAnimation, this);
          this.eventManager.off("STOP_ANIMATION", this.stopAnimation, this);
        };

        _proto.createBigWilds = function createBigWilds(callback) {
          var _this2 = this;

          if (callback === void 0) {
            callback = null;
          }

          var _this$config = this.config,
              SYMBOL_WIDTH = _this$config.SYMBOL_WIDTH,
              NORMAL_TABLE_FORMAT = _this$config.NORMAL_TABLE_FORMAT,
              FREE_TABLE_FORMAT = _this$config.FREE_TABLE_FORMAT;
          var tableFormat = this.currentGameMode === SlotGameMode.FreeGame ? FREE_TABLE_FORMAT : NORMAL_TABLE_FORMAT;
          var startX = -(tableFormat.length / 2 - 0.5) * SYMBOL_WIDTH;
          var count = 0;

          if (this.dynamicLoading) {
            var _loop = function _loop(i) {
              var col = _this2.bigWildCollumnIndexList[i];

              _this2.createBigWildByPath(_this2.highPerfAssetPaths[i], function (bigWild) {
                if (bigWild) {
                  bigWild.name = 'BigWild_Collumn_' + col;
                  bigWild.parent = _this2.node;
                  bigWild.setPosition(startX + col * SYMBOL_WIDTH, 0);
                  var bigWildObject = new BigWildObject(col, bigWild);

                  _this2.bigWilds.push(bigWildObject);

                  _this2._isPlayingHighPerf = _this2.isHighPerformance();
                  count++;

                  if (count >= _this2.bigWildCollumnIndexList.length) {
                    callback && callback();
                  }
                }
              });
            };

            for (var i = 0; i < this.bigWildCollumnIndexList.length; i++) {
              _loop(i);
            }
          } else {
            for (var _i = 0; _i < this.bigWildCollumnIndexList.length; _i++) {
              var col = this.bigWildCollumnIndexList[_i];
              var bigWild = instantiate(this.bigWildPrefabs[_i]);

              if (bigWild) {
                bigWild.name = 'BigWild_Collumn_' + col;
                bigWild.parent = this.node;
                bigWild.setPosition(startX + col * SYMBOL_WIDTH, 0);
                var bigWildObject = new BigWildObject(col, bigWild);
                this.bigWilds.push(bigWildObject);
                this._isPlayingHighPerf = this.isHighPerformance();
                count++;

                if (count >= this.bigWildCollumnIndexList.length) {
                  callback && callback();
                }
              }
            }
          }
        };

        _proto.showBigWild = function showBigWild(currentMode, row, col, isIdleFirst, playContinuosIdle) {
          var _this3 = this;

          if (isIdleFirst === void 0) {
            isIdleFirst = false;
          }

          if (playContinuosIdle === void 0) {
            playContinuosIdle = false;
          }

          if (currentMode !== this.currentGameMode) return;

          if (this.bigWilds.length == 0) {
            this.createBigWilds(function () {
              for (var i = 0; i < _this3.bigWilds.length; i++) {
                var bigWildObject = _this3.bigWilds[i];

                if (bigWildObject && bigWildObject.col == col) {
                  bigWildObject.bigWild.emit("PLAY_BIG_WILD", row, col, isIdleFirst, playContinuosIdle);
                }
              }
            });
          } else {
            for (var i = 0; i < this.bigWilds.length; i++) {
              var bigWildObject = this.bigWilds[i];

              if (bigWildObject && bigWildObject.col == col) {
                bigWildObject.bigWild.emit("PLAY_BIG_WILD", row, col, isIdleFirst, playContinuosIdle);
              }
            }
          }

          this._isPlayingHighPerf = this.isHighPerformance();
          this._hasLastBigWild = true;
          this._isPlayingBigWild = true;
        };

        _proto.playAnimation = function playAnimation(currentMode, row, col) {
          if (currentMode !== this.currentGameMode) return;

          for (var i = 0; i < this.bigWilds.length; i++) {
            var bigWildObject = this.bigWilds[i];

            if (bigWildObject && bigWildObject.col == col) {
              bigWildObject.bigWild.emit("PLAY_ANIMATION", row);
            }
          }
        };

        _proto.stopAnimation = function stopAnimation(currentMode, col) {
          if (currentMode !== this.currentGameMode) return;

          for (var i = 0; i < this.bigWilds.length; i++) {
            var bigWildObject = this.bigWilds[i];

            if (bigWildObject && bigWildObject.col == col) {
              bigWildObject.bigWild.emit("STOP_ANIMATION");
            }
          }
        };

        _proto.reset = function reset(currentMode) {
          if (currentMode !== this.currentGameMode) return;

          for (var i = 0; i < this.bigWilds.length; i++) {
            var bigWildObject = this.bigWilds[i];

            if (bigWildObject) {
              bigWildObject.bigWild.emit("RESET_BIG_WILD");
            }
          }

          this._isPlayingBigWild = false;

          if (this._hasLastBigWild && this.bigWilds.length > 0) {
            this.reCreateBigWilds();
          }

          this._hasLastBigWild = false;
        };

        _proto.createBigWildByPath = function createBigWildByPath(assetPathConfig, completeCB) {
          var _this4 = this;

          if (completeCB === void 0) {
            completeCB = null;
          }

          if (assetPathConfig) {
            this._dynamicLoadByPath(assetPathConfig.path, assetPathConfig.id, assetPathConfig.parentNode, function (prefab) {
              var node = instantiate(prefab);
              node.active = true;

              _this4._usingObjects.push(node);

              completeCB && completeCB(node);
            });
          }
        };

        _proto.reCreateBigWilds = function reCreateBigWilds() {
          if (this.isHighPerformance() !== this._isPlayingHighPerf) {
            this.destroyDynamicLoadingObjects();
            this.bigWilds = [];
            this.createBigWilds();
          }
        };

        _proto.onChangePerformance = function onChangePerformance(isHighPer) {
          if (!this._isPlayingBigWild) {
            this.reCreateBigWilds();
          }
        };

        _proto.isHighPerformance = function isHighPerformance() {
          var performanceLvl = this.dataStore && this.dataStore.performanceLevel || 'HIGH_PERFORMANCE_LV';
          var animationLevel = this.config[performanceLvl].PAYLINE_ANIMATION;
          return animationLevel >= Number(PerformanceLevel.Medium);
        };

        _proto.onDestroy = function onDestroy() {//this.eventManager.off(EventNames.ON_CHANGE_PERFORMANCE, this.onChangePerformance, this);
        };

        return BigWildTable;
      }(DynamicLoadingPrefabControl), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "currentGameMode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return SlotGameMode.NormalGame;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "bigWildPrefabs", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "highPerfAssetPaths", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "lowPerfAssetPaths", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "bigWildCollumnIndexList", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BigWinMummy1989.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfEventEmitter.ts', './EventsCode1989.ts', './ReferenceManager1989.ts', './Config1989.ts', './gfActionHelper.ts', './gfBigWinWheelAvatar.ts', './gfUtilities.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Vec3, sys, v3, tween, Sprite, UITransform, gfEventEmitter, EventsCode1989, ReferenceManager1989, Config1989, scaleTo, stopAllActions, gfBigWinWheelAvatar, formatCoin;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Vec3 = module.Vec3;
      sys = module.sys;
      v3 = module.v3;
      tween = module.tween;
      Sprite = module.Sprite;
      UITransform = module.UITransform;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      EventsCode1989 = module.default;
    }, function (module) {
      ReferenceManager1989 = module.default;
    }, function (module) {
      Config1989 = module.default;
    }, function (module) {
      scaleTo = module.scaleTo;
      stopAllActions = module.stopAllActions;
    }, function (module) {
      gfBigWinWheelAvatar = module.gfBigWinWheelAvatar;
    }, function (module) {
      formatCoin = module.formatCoin;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "d45ffiSKo9JLak0FCgBzC6Z", "BigWinMummy1989", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BigWinMummy1989 = exports('BigWinMummy1989', (_dec = ccclass('BigWinMummy1989'), _dec2 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_gfBigWinWheelAvatar) {
        _inheritsLoose(BigWinMummy1989, _gfBigWinWheelAvatar);

        function BigWinMummy1989() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfBigWinWheelAvatar.call.apply(_gfBigWinWheelAvatar, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "scaleNode", _descriptor, _assertThisInitialized(_this));

          _this.lastedStateBigWin = 'Lv1';
          _this.animPrefix = {
            bigWin: "",
            superWin: "",
            megaWin: ""
          };
          _this.tweenAnimFrame = null;
          _this._isAboutToStop = false;
          _this.POSITION_BY_LEVEL = {};
          _this.scaleByType = 0.7;
          return _this;
        }

        var _proto = BigWinMummy1989.prototype;

        _proto.onLoad = function onLoad() {
          this.sizeByTyeWin = 0.8;
          this.scaleByType = 0.7;

          this._setUpConstantsVariable();
        };

        _proto._setUpConstantsVariable = function _setUpConstantsVariable() {
          this.TWEEN_COIN_DURATION = {
            DEFAULT: 2.5,
            FAST: 1
          };
          this.POSITION_BY_LEVEL = {
            Lv1: new Vec3(-2, 60, 0),
            Lv2: new Vec3(-2, 68, 0),
            Lv3: new Vec3(-2, 70, 0)
          };
          this.lastedStateBigWin = '';
          this.animPrefix.bigWin = 'Lv1';
          this.animPrefix.superWin = 'Lv2';
          this.animPrefix.megaWin = 'Lv3';
        };

        _proto.setupSkinBigWinWheel = function setupSkinBigWinWheel() {
          this.lastedStateBigWin = '';
          this.animPrefix.bigWin = 'Lv1';
          this.animPrefix.superWin = 'Lv2';
          this.animPrefix.megaWin = 'Lv3';
        };

        _proto.showAnimation = function showAnimation(_ref) {
          var gold = _ref.gold,
              bet = _ref.bet,
              isMe = _ref.isMe,
              _ref$fishKind = _ref.fishKind,
              fishKind = _ref$fishKind === void 0 ? 17 : _ref$fishKind,
              isTextImage = _ref.isTextImage,
              isKill = _ref.isKill;
          this.txtCoin.node.active = isMe;
          this.txtCoinOther.node.active = !isMe;
          if (!gold) return;

          if (!this.node.active || this._isAboutToStop) {
            this._reset();

            this._playAnim({
              gold: gold,
              bet: bet,
              isMe: isMe,
              fishKind: fishKind,
              isTextImage: isTextImage,
              isKill: isKill
            });
          } else {
            this._listEffect.push({
              gold: gold,
              bet: bet,
              isMe: isMe,
              fishKind: fishKind,
              isTextImage: isTextImage,
              isKill: isKill
            });
          }

          this._isAboutToStop = false;
        };

        _proto._playAnim = function _playAnim(_ref2, isUpdate) {
          var gold = _ref2.gold,
              bet = _ref2.bet,
              isMe = _ref2.isMe,
              fishKind = _ref2.fishKind,
              isTextImage = _ref2.isTextImage,
              isKill = _ref2.isKill;

          if (isUpdate === void 0) {
            isUpdate = false;
          }

          this.lblCoin = isMe ? this.txtCoin : this.txtCoinOther;
          this.lblCoin.node.active = true;
          this._winValue += gold;

          var skinName = this._setAnimByBet(bet);

          gfEventEmitter.instance.emit(EventsCode1989.SOUND.PAUSE_OR_RESUME_SOUND_WIN, false);
          var delayTimeTweenCoin = this._currentSkinName === '' ? 1 : 0;

          this._tweenCoin({
            winAmount: this._winValue,
            delay: delayTimeTweenCoin
          });

          var delayTime = this._currentSkinName !== skinName ? 0.5 : 0;

          this._playSpinAnim(skinName, isUpdate);

          this._playActionIconMainFish({
            delayTime: delayTime,
            fishKind: fishKind,
            isTextImage: isTextImage,
            isKill: isKill,
            gold: gold
          });
        };

        _proto._playSpinAnim = function _playSpinAnim(skinName, isUpdate) {
          if (isUpdate === void 0) {
            isUpdate = false;
          }

          this._currentSkinName = skinName;

          if (sys.isNative) {
            this.spine.setToSetupPose();
          }

          if (!isUpdate) {
            if (skinName !== this.lastedStateBigWin) {
              this.scaleNode.setScale(v3(this.scaleByType, this.scaleByType, 1));
              this.spine.node.setPosition(this.POSITION_BY_LEVEL[skinName]);
              this.spine.setAnimation(0, this._animShow, false);
              this.spine.addAnimation(0, this._animIdle, true);
            }
          } else {
            var animTrans = 'transform_' + this.lastedStateBigWin + "_" + skinName;
            tween(this.spine.node).to(0.4, {
              position: this.POSITION_BY_LEVEL[skinName]
            }).start();

            if (skinName !== this.lastedStateBigWin) {
              tween(this.scaleNode).then(scaleTo(0.3, this.scaleByType + 0.2, this.scaleByType + 0.2, 'sineIn')).then(scaleTo(0.25, this.scaleByType, this.scaleByType, 'sineOut')).parallel().start();
            }

            this.spine.setAnimation(0, animTrans, false);
            this.spine.addAnimation(0, this._animIdle, true);
          }

          this.lastedStateBigWin = skinName;

          if (this._tweenRL) {
            this._tweenRL.stop();
          }
        };

        _proto._setAnimByBet = function _setAnimByBet(bet) {
          var animName = this.animPrefix.bigWin;
          this.sizeByTyeWin = 0.8;
          this.scaleByType = 0.7;

          if (this._winValue >= bet * Config1989.instance.BIG_WIN_RATIO.SUPER) {
            animName = this.animPrefix.megaWin;
            this.sizeByTyeWin = 0.93;
            this.scaleByType = 1;
          } else if (this._winValue >= bet * Config1989.instance.BIG_WIN_RATIO.HUGE) {
            animName = this.animPrefix.superWin;
            this.sizeByTyeWin = 0.85;
            this.scaleByType = 0.85;
          }

          this._animShow = animName + "_start";
          this._animIdle = animName + "_loop";
          this._animHide = animName + "_end";
          return animName;
        };

        _proto._playAnimHideEffect = function _playAnimHideEffect() {
          this._isAboutToStop = true;
          this.spine.setAnimation(0, this._animHide, false);
          stopAllActions(this.iconMainFish);
          stopAllActions(this.ribbon);
          tween(this.lblCoin.node).to(0.2, {
            scale: v3(0, 0, 1)
          }).start();
          tween(this.iconMainFish).to(0.2, {
            scale: v3(0, 0, 1)
          }).start();
          tween(this.ribbon).to(0.2, {
            scale: v3(0, 0, 0)
          }).start();
          var player = ReferenceManager1989.instance.getPlayerByIndex(this.index);

          if (player.isMe) {
            player.addToDisplayWallet(this._winValue);
          }

          this._resetInfo();
        };

        _proto.hideAnimation = function hideAnimation(playEffect) {
          if (playEffect === void 0) {
            playEffect = true;
          }

          if (!this.node.active) return;

          if (playEffect) {
            this._checkHideAnim();
          } else {
            this.resetAllAction();

            this._resetInfo();

            this.node.active = false;
          }
        };

        _proto._playAnimFrame = function _playAnimFrame() {
          if (this.tweenAnimFrame) return;
          this.tweenAnimFrame && this.tweenAnimFrame.stop();
          this.tweenAnimFrame = tween(this.ribbon).repeatForever(tween().to(0.3, {
            scale: new Vec3(1.1, 1.1, 1.1)
          }).to(0.3, {
            scale: Vec3.ONE
          }));
          this.tweenAnimFrame && this.tweenAnimFrame.start();
        };

        _proto._checkPlayNext = function _checkPlayNext() {
          if (this._listEffect.length > 0) {
            this._duration = this.TWEEN_COIN_DURATION.FAST;

            var info = this._listEffect.shift();

            this.tweenAnimFrame && this.tweenAnimFrame.stop();
            this.tweenAnimFrame = null;
            stopAllActions(this.ribbon);

            this._playAnim(info, true);

            return true;
          }

          this._playAnimFrame();

          return false;
        };

        _proto._updateImage = function _updateImage(fishKind, isTextImage, isKill) {
          var assetFishes = this._listFishFrame;
          var sprite = null;
          var kind = fishKind - 1; // fish kind start from 1

          if (isTextImage && isKill) {
            sprite = assetFishes[kind];
          } else {
            if (assetFishes[kind]) {
              sprite = assetFishes[kind];
            } else {
              sprite = assetFishes[22];
            }
          }

          this.iconMainFish.getComponent(Sprite).spriteFrame = sprite;
        };

        _proto._tweenCoin = function _tweenCoin(data) {
          var _this2 = this;

          var winAmount = data.winAmount;
          var _coinValue = this.coinValue;

          if (this.tweenCoin) {
            this.tweenCoin.stop();
          }

          this.tweenCoin = tween(this).call(function () {
            gfEventEmitter.instance.emit(EventsCode1989.SOUND.PAUSE_OR_RESUME_SOUND_WIN, false);
          }).to(this._duration, null, {
            easing: "sineInOut",
            onUpdate: function onUpdate(target, ratio) {
              _this2.coinValue = _coinValue + (winAmount - _coinValue) * ratio;
            }
          }).call(function () {
            gfEventEmitter.instance.emit(EventsCode1989.SOUND.PAUSE_OR_RESUME_SOUND_WIN, true);

            _this2._playAnimFrame();

            _this2._checkHideAnim();
          });
          this.tweenCoin.start();
        };

        _proto._updateCoinWin = function _updateCoinWin() {
          this.lblCoin.string = formatCoin(this._coinValue);

          if (this.lblCoin.node.getComponent(UITransform).width > this.ribbon.getComponent(UITransform).width - 57) {
            this.ribbon.getComponent(UITransform).width += 10;
          }
        };

        _proto._changeImageFishIcon = function _changeImageFishIcon(data) {
          var _this3 = this;

          var fishKind = data.fishKind,
              isTextImage = data.isTextImage,
              isKill = data.isKill;
          stopAllActions(this.iconMainFish);
          tween(this.iconMainFish).then(scaleTo(0.1, 0, 0, 'backOut')).call(function () {
            _this3._updateImage(fishKind, isTextImage, isKill);
          }).then(scaleTo(0.5, this.sizeByTyeWin, this.sizeByTyeWin, 'backOut')).start();
        };

        _proto._resetInfo = function _resetInfo() {
          this._winValue = 0;
          this.coinValue = 0;
          this._isShowing = false;
          this._currentSkinName = '';
          this._currentFishKind = -1;
          this.sizeByTyeWin = 0.8;
          this.scaleByType = 0.7;
          this._duration = this.TWEEN_COIN_DURATION.DEFAULT;
          this.ribbon.getComponent(UITransform).width = 179;
          this.lastedStateBigWin = '';
          this.lblCoin.string = '';

          if (this.tweenCoin) {
            this.tweenCoin.stop();
          } // setOpacity(this.ribbon, 10);


          this.tweenAnimFrame = null;
        };

        _proto._reset = function _reset() {
          var _ReferenceManager$ins = ReferenceManager1989.instance.getPlayerByIndex(this.index),
              isMe = _ReferenceManager$ins.isMe;

          this.node.active = true;
          this.iconMainFish.setScale(0, 0, 1);
          this.ribbon.setScale(0, 0, 1);
          this.lblCoin = isMe ? this.txtCoin : this.txtCoinOther;
          this.lblCoin.string = '';
          this.lblCoin.node.setScale(0, 0, 1);
          tween(this.lblCoin.node).to(0.5, {
            scale: v3(1, 1, 1)
          }, {
            easing: 'bounceOut'
          }).start();
          tween(this.ribbon).to(0.5, {
            scale: v3(1, 1, 1)
          }, {
            easing: 'bounceOut'
          }).start();
          this.scaleNode.setScale(v3(0.7, 0.7, 0.7));
        };

        return BigWinMummy1989;
      }(gfBigWinWheelAvatar), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "scaleNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BonusRollReel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, tween, Vec3, warn, GameObject;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      tween = module.tween;
      Vec3 = module.Vec3;
      warn = module.warn;
    }, function (module) {
      GameObject = module.GameObject;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16;

      cclegacy._RF.push({}, "3329fv2dpxGyY9sc+AmSt7s", "BonusRollReel", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BonusRollReel = exports('BonusRollReel', (_dec = ccclass('BonusRollReel'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(BonusRollReel, _GameObject);

        function BonusRollReel() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "showSymbolIndex", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "topBuffer", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "botBuffer", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "unitDistance", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "fastTotalCircular", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "turboTotalCicular", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "stopEasingDistance", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "isBlock", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "autoUpdate", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "miniReel", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "showNumber", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "f2rFactor", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "reelNode", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "blockNode", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "unblockNode", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "reelEffect", _descriptor16, _assertThisInitialized(_this));

          _this.totalSymbol = 4;
          _this.offsetToStop = 2;
          _this.totalScrolling = 0;
          _this.scrollingSpeed = 0;
          _this.betDenom = 0;
          _this.currentIndex = 0;
          _this.previousY = 0;
          _this._symbols = [];
          _this.symbolPos = [];
          _this.symbolNameList = [];
          _this.mode = '';
          _this.reelIndex = -1;
          _this.totalCircular = 0;
          _this.isWaitingResult = false;
          _this.isRolling = false;
          _this.reelStopped = false;
          _this.canF2R = false;
          _this.symbolValue = null;
          _this.circularCount = 0;
          _this.callbackFinish = null;
          _this.spinAction = null;
          _this.targetY = 0;
          _this.tweenTime = void 0;
          _this.isShowingResult = false;
          _this.callBackDelayStop = null;
          _this.multiplierFactor = 0;
          _this.symbolPrefabName = '';
          _this.poolFactory = null;
          _this.creditLabelPrefabName = '';
          return _this;
        }

        var _proto = BonusRollReel.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          this.node.on("INIT", this.init, this);
          this.node.on("START_SPINNING", this.startSpinning, this);
          this.node.on("STOP_SPINNING", this.stopSpinning, this);
          this.node.on("UPGRADE_CREDIT", this.upgradeCredit, this);
          this.node.on("FAST_TO_RESULT", this.fastToResult, this);
          this.node.on("SET_MODE", this.setMode, this);
          this.node.on("SET_UP_BONUS_ROLL_RESUME", this.setupBonusRollResume, this);
          this.node.on("UPDATE_BET_DENOM", this.updateBetDenom, this);
          this.node.on("UNBLOCK_JACKPOT", this.unBlockJackpot, this);
          this.node.on("UPDATE_ALL_SYMBOLS", this.updateAllSymbols, this);
          this.node.on("HIDE_INTRO", this.hideIntro, this);
          this.node.updatePosition = this.updatePosition.bind(this);
          this.node.reelIndex = this.updateReelIndex.bind(this);
          this.betDenom = 1;
          this.setMode('FAST');
          this.totalSymbol = this.showNumber + this.topBuffer + this.botBuffer;
        };

        _proto.start = function start() {
          var MIN_SPEED = this.config.MIN_SPEED;
          this.scrollingSpeed = MIN_SPEED;
          this.currentIndex = 0;
          this.previousY = 0;
          this.isRolling = false;
          this.circularCount = 0;
          this.canF2R = false;
        };

        _proto.init = function init(poolFactory, symbolNameList, symbolPrefabName, creditLabelPrefabName, isBlock, config) {
          if (poolFactory) {
            this.poolFactory = poolFactory;
          }

          if (symbolPrefabName) {
            this.symbolPrefabName = symbolPrefabName;
          }

          if (creditLabelPrefabName) {
            this.creditLabelPrefabName = creditLabelPrefabName;
          }

          this.symbolNameList = symbolNameList;
          this.isBlock = isBlock;

          if (this.blockNode) {
            this.blockNode.active = this.isBlock;
          }

          this._symbols = [];
          this.createSymbols();
        };

        _proto.updateReelIndex = function updateReelIndex(col) {
          this.reelIndex = col;
        };

        _proto.startSpinning = function startSpinning() {
          if (this.isWaitingResult || this.isBlock) return;
          var MIN_SPEED = this.config.MIN_SPEED;
          this.isRolling = true;
          this.reelStopped = false;
          this.isWaitingResult = true;
          this.scrollingSpeed = MIN_SPEED;
          this.canF2R = false;
          this.symbolValue = null;
          this.isShowingResult = false;
          this.totalScrolling = 0;
          this.previousY = 0;
          this.circularCount = 0;
        };

        _proto.stopSpinning = function stopSpinning(symbolValue, callback) {
          var _this2 = this;

          if (this.isBlock) return;
          this.callbackFinish = callback;
          var delayTime = 0.5;
          this.canF2R = true;

          this.callBackDelayStop = function () {
            _this2.symbolValue = symbolValue;
            _this2.isShowingResult = true;
            var distanceMove = _this2.totalCircular * _this2.unitDistance;
            _this2.targetY = _this2.reelNode.position.y - distanceMove + _this2.totalScrolling;

            _this2.stopSpinningWithSteps();
          };

          this.unschedule(this.callBackDelayStop);
          this.scheduleOnce(this.callBackDelayStop, delayTime);
        };

        _proto.stopSpinningWithSteps = function stopSpinningWithSteps() {
          var _this3 = this;

          if (this.spinAction) {
            this.spinAction.stop();
          }

          this.tweenTime = Math.abs(this.targetY - this.reelNode.position.y) * 1.0 / (this.scrollingSpeed * this.multiplierFactor);
          this.spinAction = tween(this.reelNode).to(this.tweenTime, {
            position: new Vec3(0, this.targetY - this.stopEasingDistance, 0)
          }, {
            easing: 'sineOut',
            onUpdate: function onUpdate() {
              _this3.circulateSymbols();
            }
          }).call(function () {
            _this3.canF2R = false;
          }).to(0.05, {
            position: new Vec3(0, this.targetY, 0)
          }, {
            onUpdate: function onUpdate() {
              _this3.circulateSymbols();
            }
          }).call(function () {
            _this3.onFinishSpin();
          }).start();
        };

        _proto.onFinishSpin = function onFinishSpin() {
          this.reelNode.setPosition(this.reelNode.position.x, 0);

          this._symbols.sort(function (a, b) {
            return a.position.y - b.position.y;
          });

          this.spinAction = null;
          this.isWaitingResult = false;
          this.isRolling = false;
          this.callbackFinish && this.callbackFinish();

          for (var i = 0; i < this._symbols.length; i++) {
            var symbol = this._symbols[i];

            if (symbol) {
              symbol.setPosition(new Vec3(symbol.position.x, this.symbolPos[i], 0));

              if (i === this.showSymbolIndex && this.symbolValue !== undefined && this.symbolValue !== null) {
                symbol.changeSymbol(this.symbolValue, this.betDenom);
              } else {
                symbol.disableLabel && symbol.disableLabel();
              }
            }
          }

          this.currentIndex = 0;
        };

        _proto.upgradeCredit = function upgradeCredit(symbolValue) {
          var _this4 = this;

          this.symbolValue = symbolValue;
          this.reelNode.children.forEach(function (item) {
            if (item) {
              item.changeSymbol(_this4.symbolValue || _this4.getRandomSymbolValue(), _this4.betDenom);
            }
          });
        };

        _proto.fastToResult = function fastToResult() {
          if (!this.canF2R || this.isBlock) return;

          if (this.circularCount >= this.totalCircular - 1) {
            return;
          }

          this.canF2R = false;
          this.scrollingSpeed = this.config.MAX_SPEED * this.f2rFactor;

          if (this.callBackDelayStop) {
            this.unschedule(this.callBackDelayStop);
            this.callBackDelayStop();
          } else if (this.spinAction) {
            this.stopSpinningWithSteps();
          }
        };

        _proto.setMode = function setMode(mode) {
          this.mode = mode;
          this.multiplierFactor = this.mode === 'FAST' ? 1 : 5;
          this.totalCircular = this.mode === 'FAST' ? this.fastTotalCircular : this.turboTotalCicular;
        };

        _proto.createSymbols = function createSymbols() {
          if (this.poolFactory && !this.isBlock) {
            var startY = -(this.showNumber / 2 + this.botBuffer - 0.5) * this.unitDistance;

            for (var i = 0; i < this.totalSymbol; i++) {
              var symbol = this.poolFactory.getObject(this.symbolPrefabName);

              if (symbol) {
                symbol.active = true;
                symbol.parent = this.reelNode;
                symbol.setSiblingIndex(i);
                var x = 0;
                var y = startY + i * this.unitDistance;
                symbol.position = new Vec3(x, y, 0);

                if (this.creditLabelPrefabName && this.miniReel) {
                  var label = this.poolFactory.getObject(this.creditLabelPrefabName);

                  if (label) {
                    symbol.addChild(label);
                    label.position = new Vec3(0, 0, 0);
                  }
                }

                var symbolValue = this.getRandomSymbolValue();
                symbol.changeSymbol(symbolValue, this.betDenom);

                if (i === this.showSymbolIndex && Number(symbolValue) > 0) {
                  this.symbolValue = symbolValue;
                } else {
                  symbol.disableLabel && symbol.disableLabel();
                }

                this._symbols.push(symbol);

                this.symbolPos.push(symbol.position.y);
              }
            }
          }
        };

        _proto.getRandomSymbolValue = function getRandomSymbolValue() {
          var _this$config = this.config,
              MINI_SYMBOL_NAME_LIST = _this$config.MINI_SYMBOL_NAME_LIST,
              LIST_JACKPOTS = _this$config.LIST_JACKPOTS;

          if (this.symbolNameList && this.symbolNameList.length > 0) {
            return this.symbolNameList[Math.floor(Math.random() * this.symbolNameList.length)];
          } else {
            this.symbolNameList = this.miniReel ? MINI_SYMBOL_NAME_LIST : LIST_JACKPOTS;
            return this.getRandomSymbolValue();
          }
        };

        _proto.setupBonusRollResume = function setupBonusRollResume(symbolValue) {
          if (this.isBlock) return;
          this.symbolValue = symbolValue;

          for (var i = 0; i < this.reelNode.children.length; i++) {
            var botItem = this.reelNode.children[i];

            if (this.symbolValue) {
              botItem.changeSymbol(this.symbolValue, this.betDenom);
            } else {
              botItem.changeSymbol(this.getRandomSymbolValue(), this.betDenom);
            }
          }
        };

        _proto.update = function update(dt) {
          if (this.autoUpdate) {
            this.updatePosition(dt);
          }
        };

        _proto.updateBetDenom = function updateBetDenom(betDenom) {
          var _this5 = this;

          this.betDenom = betDenom;
          this.reelNode.children.forEach(function (item) {
            if (item) {
              item.emit("UPDATE_BET_DENOM", _this5.betDenom);
            }
          });
        };

        _proto.unBlockJackpot = function unBlockJackpot(active, callback) {
          if (active === void 0) {
            active = false;
          }

          if (callback === void 0) {
            callback = null;
          }

          this.isBlock = true;
          this.unblockNode.active = active;

          if (callback) {
            this.scheduleOnce(function () {
              callback && callback();
              callback = null;
            }, .5);
          }
        };

        _proto.updateAllSymbols = function updateAllSymbols(symbolName) {
          var rs = isNaN(symbolName) ? symbolName : parseInt(symbolName);
          warn("updateAllSymbols " + rs);
          this.reelNode.children.forEach(function (item, index) {
            item.changeSymbol(symbolName);
            if (isNaN(symbolName) == false) item.emit("ADD_NUMBER_INTRO", symbolName);
          });
        };

        _proto.hideIntro = function hideIntro() {
          this.reelNode.children.forEach(function (item) {
            item.emit("HIDE_NUMBER_INTRO");
          });
        };

        _proto.updatePosition = function updatePosition(dt) {
          if (this.isBlock) return;

          if (this.isRolling) {
            if (this.scrollingSpeed < this.config.MAX_SPEED) {
              this.scrollingSpeed += this.config.ACCEL * dt;
            } else if (this.canF2R) {
              this.scrollingSpeed = this.config.MAX_SPEED;
            }

            if (this.scrollingSpeed > this.config.MAX_SPEED) this.scrollingSpeed = this.config.MAX_SPEED;

            if (!this.isShowingResult) {
              var y = this.reelNode.position.y;
              y -= this.scrollingSpeed * dt;
              this.reelNode.position = new Vec3(this.reelNode.position.x, y, 0);
            }

            if (this.previousY != this.reelNode.position.y) {
              this.totalScrolling += Math.abs(this.previousY - this.reelNode.position.y);
              this.previousY = this.reelNode.position.y;
            }
          }

          if (!this.isShowingResult) {
            this.circulateSymbols();
          }
        };

        _proto.circulateSymbols = function circulateSymbols() {
          while (this.totalScrolling >= this.unitDistance) {
            var botItem = this._symbols[this.currentIndex];
            botItem.isRealSymbol = false;
            var y = botItem.position.y;
            y += this.unitDistance * this.totalSymbol;
            botItem.position = new Vec3(botItem.position.x, y, 0);
            this.currentIndex = (this.currentIndex + 1) % this.totalSymbol;
            this.totalScrolling = this.totalScrolling - this.unitDistance;
            var symbolName = this.getRandomSymbolValue();

            if (this.isShowingResult) {
              this.circularCount += 1;
              var offsetToStop = this.showNumber + this.topBuffer - 1;
              var stopCount = this.totalCircular - offsetToStop;

              if (this.circularCount >= stopCount && this.circularCount < stopCount + this.showNumber && this.symbolValue !== undefined && this.symbolValue != null) {
                botItem.changeSymbol(this.symbolValue, this.betDenom);
                botItem.isRealSymbol = true;
              } else {
                botItem.changeSymbol(symbolName, this.betDenom);
              }
            } else {
              botItem.changeSymbol(symbolName, this.betDenom);
            }
          }
        };

        return BonusRollReel;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "showSymbolIndex", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "topBuffer", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "botBuffer", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "unitDistance", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 100;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "fastTotalCircular", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 10;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "turboTotalCicular", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 5;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "stopEasingDistance", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 10;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "isBlock", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "autoUpdate", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "miniReel", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "showNumber", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "f2rFactor", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 8;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "reelNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "blockNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "unblockNode", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "reelEffect", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BonusRollSymbol.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, SpriteFrame, Prefab, Sprite, Label, warn, instantiate, Component, formatWalletMoney;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      SpriteFrame = module.SpriteFrame;
      Prefab = module.Prefab;
      Sprite = module.Sprite;
      Label = module.Label;
      warn = module.warn;
      instantiate = module.instantiate;
      Component = module.Component;
    }, function (module) {
      formatWalletMoney = module.formatWalletMoney;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "59fb7emvwlO97PuHFaZ0DLi", "BonusRollSymbol", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BonusRollSymbol = exports('BonusRollSymbol', (_dec = ccclass('BonusRollSymbol'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: SpriteFrame
      }), _dec4 = property({
        type: Prefab
      }), _dec5 = property({
        type: Sprite
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(BonusRollSymbol, _Component);

        function BonusRollSymbol() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "Bg", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sprites", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "rate1", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "rate2", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "numberPrefab", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "spriteBg", _descriptor6, _assertThisInitialized(_this));

          _this.isFirst = false;
          _this.creditValue = void 0;
          _this.betDenom = void 0;
          _this.numberIntro = null;
          return _this;
        }

        var _proto = BonusRollSymbol.prototype;

        _proto.onLoad = function onLoad() {
          this.node.changeSymbol = this.changeSymbol.bind(this);
          this.node.upgradeCredit = this.upgradeCredit.bind(this);
          this.node.disableLabel = this.disableLabel.bind(this);
          this.node.isFirstStringLabel = this.isFirstStringLabel.bind(this);
          if (this.Bg) this.spriteBg = this.Bg.getComponent(Sprite);
          this.node.on("UPDATE_BET_DENOM", this.updateBetDenom, this);
          this.node.on("ADD_NUMBER_INTRO", this.addNumberIntro, this);
          this.node.on("HIDE_NUMBER_INTRO", this.hideNumberIntro, this);
          this.isFirst = true;
        };

        _proto.isFirstStringLabel = function isFirstStringLabel(isFirst) {
          this.isFirst = isFirst;
        };

        _proto.changeSymbol = function changeSymbol(symbolValue, betDenom) {
          if (betDenom === void 0) {
            betDenom = 1;
          }

          var label = this.node.getComponentInChildren(Label);
          this.creditValue = null;

          if (label) {
            label.node.active = false;
          }

          if (symbolValue === 'JP') {
            this.spriteBg.spriteFrame = this.sprites[0];
          } else if (symbolValue === 'FR') {
            this.spriteBg.spriteFrame = this.sprites[1];
          } else if (symbolValue && symbolValue !== '0') {
            if (symbolValue < this.rate1) {
              this.spriteBg.spriteFrame = this.sprites[2];
            } else if (symbolValue < this.rate2) {
              this.spriteBg.spriteFrame = this.sprites[3];
            } else {
              this.spriteBg.spriteFrame = this.sprites[4];
            }

            if (label) {
              label.node.active = true;
              this.creditValue = parseInt(symbolValue);

              if (this.creditValue) {
                label.string = formatWalletMoney(this.creditValue * betDenom);
              } else {
                warn("mini symbol value: " + symbolValue);
              } // if (this.isFirst) {
              //     label.string = "";
              // }

            }
          } else {
            this.spriteBg.spriteFrame = this.sprites[2];
            warn("mini symbol value: " + symbolValue);
          }
        };

        _proto.upgradeCredit = function upgradeCredit(multiplier) {
          if (this.creditValue) {
            var label = this.node.getComponentInChildren(Label);

            if (label) {
              label.string = formatWalletMoney(this.creditValue * multiplier);
            }
          }
        };

        _proto.updateBetDenom = function updateBetDenom(betDenom) {
          this.betDenom = betDenom;

          if (this.creditValue && this.isFirst) {
            var label = this.node.getComponentInChildren(Label);

            if (label) {
              label.string = formatWalletMoney(this.creditValue * betDenom);
            }
          }

          this.isFirst = false;
        };

        _proto.disableLabel = function disableLabel() {
          var label = this.node.getComponentInChildren(Label);

          if (label) {
            label.node.active = false;
          }
        };

        _proto.addNumberIntro = function addNumberIntro(num) {
          if (!this.numberIntro) {
            this.numberIntro = instantiate(this.numberPrefab);
            this.node.addChild(this.numberIntro);
          }

          this.disableLabel();
          this.numberIntro.getComponent(Label).string = formatWalletMoney(num);
        };

        _proto.hideNumberIntro = function hideNumberIntro() {
          if (this.numberIntro) this.numberIntro.active = false;
        };

        return BonusRollSymbol;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "Bg", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "sprites", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "rate1", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 500;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "rate2", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1000;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "numberPrefab", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "spriteBg", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BonusRollTable.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts', './utils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, Node, instantiate, Vec3, log, GameObject, setOpacity;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Node = module.Node;
      instantiate = module.instantiate;
      Vec3 = module.Vec3;
      log = module.log;
    }, function (module) {
      GameObject = module.GameObject;
    }, function (module) {
      setOpacity = module.setOpacity;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;

      cclegacy._RF.push({}, "4335dv4mARLm6rwwxudiCmk", "BonusRollTable", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BonusRollTable = exports('BonusRollTable', (_dec = ccclass('BonusRollTable'), _dec2 = property({
        type: Prefab
      }), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: Node
      }), _dec6 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(BonusRollTable, _GameObject);

        function BonusRollTable() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "miniReelPrefab", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "holderNode", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "creditLabelPrefabName", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "symbolPrefabName", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "isFreeMode", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "coinMultiplier", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "particleHolder", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listLocks", _descriptor8, _assertThisInitialized(_this));

          _this.poolFactory = null;
          _this.isReady = false;
          _this.isFastToResult = false;
          _this.reels = [];
          _this.tableFormat = null;
          _this.symbolNameList = [];
          _this.mode = '';
          _this.curentConfig = void 0;
          _this.showingMultipler = false;
          _this.matrix = void 0;
          _this.mul = 1;
          _this.betDenom = void 0;
          _this.callbackMultiplier = void 0;
          _this.isPositionUpdated = false;
          return _this;
        }

        var _proto = BonusRollTable.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          this.node.on("INIT", this.init, this);
          this.node.on("START_SPINNING", this.startSpinning, this);
          this.node.on("STOP_SPINNING", this.stopSpinning, this);
          this.node.on("FAST_TO_RESULT", this.fastToResult, this);
          this.node.on("SET_MODE", this.setMode, this);
          this.node.on("SET_UP_BONUS_ROLL_RESUME", this.setupBonusRollResume, this);
          this.node.on("UPDATE_BET_DENOM", this.updateBetDenom, this);
          this.node.on("SHOW_MULTIPLIER", this.showMultiplier, this);
          this.node.on("RESET_MULTIPLIER_CB", this.resetMultiplierCB, this);
          this.node.on("UNBLOCK_JACKPOT", this.unBlockJackpot, this);
          this.node.on("SHOW_LOCKS", this.showLocks, this);
          this.node.on('STOP_REEL_WITH_RANDOM_MATRIX', this.stopReelWithRandom, this);
          this.node.on('SHOW_INTRO', this.showIntroSymbols, this);
          this.node.on('HIDE_INTRO', this.hideIntroSymbols, this);
          this.node.on("GAME_HIDE", this.onGameHide, this);
          this.node.on("GAME_SHOW", this.onGameShow, this);
          this.mode = 'FAST';
          this.isReady = false;
        };

        _proto.init = function init() {
          if (this.isReady) return;
          this.isFastToResult = false;
          this.reels = [];
          this.tableFormat = this.config.MINI_TABLE_FORMAT;
          this.symbolNameList = this.config.MINI_SYMBOL_NAME_LIST;
          var startX = -(this.tableFormat.length / 2 - 0.5) * this.config.TOP_UP_WIDTH + .05;

          for (var col = 0; col < this.tableFormat.length; col++) {
            var reel = instantiate(this.miniReelPrefab);
            reel.name = 'Mini_Reel_' + col;
            reel.parent = this.holderNode;
            var x = startX + this.config.TOP_UP_WIDTH * col;
            reel.setPosition(new Vec3(x, 0, 0));
            var isBlock = col === 1 || col === 3;

            if (this.mainDirector) {
              this.poolFactory = this.mainDirector.poolFactory;
            }

            reel.reelIndex = col;
            reel.emit('INIT', this.poolFactory, this.symbolNameList, this.symbolPrefabName, this.creditLabelPrefabName, isBlock);
            this.reels[col] = reel;
          }

          this.isReady = true;
        };

        _proto.onGameShow = function onGameShow() {
          if (this.holderNode) this.holderNode.active = true;
        };

        _proto.onGameHide = function onGameHide() {
          if (this.holderNode) this.holderNode.active = false;
        };

        _proto.showIntroSymbols = function showIntroSymbols(ranInt) {
          if (!this.isFreeMode) {
            if (ranInt == undefined) {
              var len = this.config.BEAUTY_MATRIX_BAR.length;
              ranInt = Math.floor(Math.random() * len);
            }

            var listSymbols = this.config.BEAUTY_MATRIX_BAR[ranInt];
            var mat = listSymbols.split(',');
            this.reels.forEach(function (it, index) {
              it.emit("UPDATE_ALL_SYMBOLS", mat[index]);
            });
          }
        };

        _proto.hideIntroSymbols = function hideIntroSymbols() {
          this.reels.forEach(function (it) {
            it.emit("HIDE_INTRO");
          });
        };

        _proto.setMode = function setMode(mode) {
          this.mode = mode;
        };

        _proto.startSpinning = function startSpinning() {
          this.isFastToResult = false;
          this.curentConfig = this.mode === 'FAST' ? this.config.TABLE_NORMAL : this.config.TABLE_TURBO;

          for (var col = 0; col < this.tableFormat.length; ++col) {
            var reel = this.reels[col];

            if (reel) {
              reel.emit("SET_MODE", this.mode);
              reel.emit("START_SPINNING");
            }
          }

          if (this.showingMultipler) {
            this.hideMultiplier();
          }

          this.isPositionUpdated = true;
        };

        _proto.stopReelWithRandom = function stopReelWithRandom() {
          this.cheatStopSpinning();
        };

        _proto.cheatStopSpinning = function cheatStopSpinning() {
          var fakeMatrix = [];

          for (var i = 0; i < this.tableFormat.length; i++) {
            var randIndex = Math.floor(Math.random() * this.symbolNameList.length);
            var randValue = this.symbolNameList[randIndex];
            fakeMatrix[i] = randValue;
          }

          this.stopSpinning({
            bonusRoll: fakeMatrix,
            multiplier: 1
          }, function () {
            log('On Table Stop Spinning: ' + fakeMatrix);
          });
        };

        _proto.stopSpinning = function stopSpinning(data, callback) {
          var multiplier = data.multiplier,
              bonusRoll = data.bonusRoll;
          this.matrix = bonusRoll;
          this.mul = multiplier || 1;

          for (var col = 0; col < this.tableFormat.length; ++col) {
            var symbolValue = this.matrix[col];
            var reel = this.reels[col];

            if (reel) {
              reel.emit("STOP_SPINNING", symbolValue, this.onReelStopCallback.bind(this, col, callback));
            }
          }
        };

        _proto.onReelStopCallback = function onReelStopCallback(col, callback) {
          if (col == this.tableFormat.length - 1) {
            callback && callback();
          }

          this.isPositionUpdated = false;
        };

        _proto.update = function update(dt) {
          if (this.isReady && this.isPositionUpdated) {
            for (var col = 0; col < this.tableFormat.length; ++col) {
              var reel = this.reels[col];

              if (reel) {
                reel.updatePosition(dt);
              }
            }
          }
        };

        _proto.fastToResult = function fastToResult() {
          if (!this.isFastToResult) {
            this.isFastToResult = true;
            this.hideMultiplier();

            for (var col = 0; col < this.tableFormat.length; ++col) {
              var reel = this.reels[col];

              if (reel) {
                reel.emit('FAST_TO_RESULT');
              }
            }
          }
        };

        _proto.setupBonusRollResume = function setupBonusRollResume(data) {
          var multiplier = data.multiplier,
              bonusRoll = data.bonusRoll,
              isResume = data.isResume;

          if (!bonusRoll) {
            log('Bonus roll is undefined');
            return;
          }

          this.matrix = bonusRoll;
          this.mul = multiplier || 1;

          for (var col = 0; col < this.tableFormat.length; ++col) {
            var reel = this.reels[col];
            var symbolValue = this.matrix[col];

            if (reel) {
              if (isResume && (col == 1 || col == 3)) {
                reel.emit("UNBLOCK_JACKPOT", true);
              }

              reel.emit("SET_UP_BONUS_ROLL_RESUME", Number(symbolValue) > 0 ? Number(symbolValue) * this.mul : symbolValue);
            }
          }

          if (isResume) {
            this.showLocks();
          }
        };

        _proto.updateBetDenom = function updateBetDenom(betDenom) {
          this.betDenom = betDenom;

          for (var col = 0; col < this.reels.length; ++col) {
            this.reels[col].emit("UPDATE_BET_DENOM", betDenom);
          }
        };

        _proto.showMultiplier = function showMultiplier(multiplier, callback) {
          if (!this.coinMultiplier) return;
          this.curentConfig = this.mode === 'FAST' ? this.config.TABLE_NORMAL : this.config.TABLE_TURBO;
          this.showingMultipler = true;
          this.callbackMultiplier = callback;
          this.coinMultiplier.active = true;
          this.coinMultiplier.setScale(new Vec3(1, 1, 1)); //TODO: SHOW MULTIPLIER HERE
        };

        _proto.upgradeCredit = function upgradeCredit(isForce) {
          if (isForce === void 0) {
            isForce = false;
          }

          for (var col = 0; col < this.tableFormat.length; ++col) {
            var reel = this.reels[col];
            var symbolValue = this.matrix[col];

            if (isForce) {
              if (reel) {
                reel.emit("UPGRADE_CREDIT", Number(symbolValue) > 0 ? symbolValue * this.mul : symbolValue);
              }
            } else {
              if (Number(symbolValue) > 0 && col !== 1 && col !== 3) {
                this.runMultiplyAnim(reel, symbolValue * this.mul, col);
              }
            }
          }
        };

        _proto.runMultiplyAnim = function runMultiplyAnim(reel, symbolValue, col) {
          if (reel) {
            reel.emit("UPGRADE_CREDIT", symbolValue);
          } //TODO

        };

        _proto.hideMultiplier = function hideMultiplier() {
          if (!this.showingMultipler) return;
          this.callbackMultiplier && this.callbackMultiplier();
          this.callbackMultiplier = null;
          this.coinMultiplier.active = false;
          this.showingMultipler = false; //RESET PARTICLE SYSTEM HERE
        };

        _proto.resetMultiplierCB = function resetMultiplierCB() {
          this.callbackMultiplier = null;
        };

        _proto.unBlockJackpot = function unBlockJackpot(active, callback) {
          if (active === void 0) {
            active = false;
          }

          if (callback === void 0) {
            callback = null;
          }

          for (var col = 0; col < this.reels.length; ++col) {
            if (col == 1 || col == 3) {
              this.reels[col].emit("UNBLOCK_JACKPOT", active, col == 1 ? callback : null);
            }
          }
        };

        _proto.showLocks = function showLocks(isOn) {
          if (isOn === void 0) {
            isOn = false;
          }

          this.listLocks.forEach(function (item) {
            item.active = isOn;

            if (item.getChildByName('Lock')) {
              setOpacity(item.getChildByName('Lock'), 255);
            }
          });
        };

        return BonusRollTable;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "miniReelPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "holderNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "creditLabelPrefabName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "symbolPrefabName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "isFreeMode", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "coinMultiplier", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "particleHolder", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "listLocks", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BonusValueControl.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Vec3, tween, Color, Component, formatWalletMoney, formatMoney;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Vec3 = module.Vec3;
      tween = module.tween;
      Color = module.Color;
      Component = module.Component;
    }, function (module) {
      formatWalletMoney = module.formatWalletMoney;
      formatMoney = module.formatMoney;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "92da5+beGZPe6lZgt2jpapj", "BonusValueControl", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          requireComponent = _decorator.requireComponent;
      var BonusValueControl = exports('BonusValueControl', (_dec = ccclass('BonusValueControl'), _dec2 = requireComponent(Label), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(BonusValueControl, _Component);

        function BonusValueControl() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "dimColor", _descriptor, _assertThisInitialized(_this));

          _this._label = null;
          _this._currentCreditValue = 0;
          _this._currentDenomValue = 1;
          _this._appearingTween = null;
          return _this;
        }

        var _proto = BonusValueControl.prototype;

        _proto.onLoad = function onLoad() {
          this._label = this.getComponent(Label);
        };

        _proto.showValue = function showValue(creditValue, denomRate, isFast, isSelected) {
          var _this2 = this;

          if (isFast === void 0) {
            isFast = false;
          }

          if (isSelected === void 0) {
            isSelected = false;
          }

          this._currentCreditValue = creditValue;
          this._currentDenomValue = denomRate;
          var money = this._currentDenomValue * this._currentCreditValue;

          if (isFast) {
            this.node.scale = new Vec3(1, 1, 1);

            if (this._label) {
              if (money >= 100000) {
                this._label.string = formatWalletMoney(money).toString();
              } else {
                this._label.string = formatMoney(money);
              }
            }
          } else {
            if (this._label) {
              this._label.string = 'X' + creditValue;
            }

            this.node.scale = new Vec3(0.01, 0.01, 0.01);
            if (this._appearingTween) this._appearingTween.stop();
            this._appearingTween = tween(this.node).to(0.5, {
              angle: -360,
              scale: new Vec3(1, 1, 1)
            }).delay(0.5).call(function () {
              if (_this2._label) {
                if (money >= 100000) {
                  _this2._label.string = formatWalletMoney(money).toString();
                } else {
                  _this2._label.string = formatMoney(money);
                }
              }

              _this2._appearingTween = null;
            });

            this._appearingTween.start();
          }

          this._label.color = isSelected ? Color.WHITE : this.dimColor;
        };

        _proto.reset = function reset() {
          if (this._label) {
            this._label.string = '';
          }

          if (this._appearingTween) this._appearingTween.stop();
          this.node.scale = new Vec3(0.01, 0.01, 0.01);
          this.node.angle = 0;
        };

        return BonusValueControl;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "dimColor", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Color(0, 0, 0, 0);
        }
      }), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BottomBarMgr.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './TweenViewComponent.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, TweenViewComponent;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
    }, function (module) {
      TweenViewComponent = module.TweenViewComponent;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "e10cdlvHPdLAKs5u8p+w8b/", "BottomBarMgr", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BottomBarMgr = exports('BottomBarMgr', (_dec = ccclass('BottomBarMgr'), _dec2 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_TweenViewComponent) {
        _inheritsLoose(BottomBarMgr, _TweenViewComponent);

        function BottomBarMgr() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _TweenViewComponent.call.apply(_TweenViewComponent, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "movingGroup", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = BottomBarMgr.prototype;

        _proto.show = function show(onStartCB, onCompleteCB) {
          if (onStartCB === void 0) {
            onStartCB = null;
          }

          if (onCompleteCB === void 0) {
            onCompleteCB = null;
          }

          if (this.movingGroup) {
            this.movingGroup.show();
          }

          _TweenViewComponent.prototype.show.call(this, onStartCB, onCompleteCB);
        };

        _proto.hide = function hide(onStartCB, onCompleteCB) {
          if (onStartCB === void 0) {
            onStartCB = null;
          }

          if (onCompleteCB === void 0) {
            onCompleteCB = null;
          }

          if (this.movingGroup) {
            this.movingGroup.hide();
          }

          _TweenViewComponent.prototype.show.call(this, onStartCB, onCompleteCB);
        };

        return BottomBarMgr;
      }(TweenViewComponent), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "movingGroup", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Bullet1989.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseConfig.ts', './gfBullet.ts', './gfUtilities.ts', './gfEventEmitter.ts', './gfBaseEvents.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Sprite, BoxCollider2D, misc, UITransform, Vec3, gfBaseConfig, gfBullet, SetZIndex, getRotation, v2Distance, gfEventEmitter, gfBaseEvents;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      BoxCollider2D = module.BoxCollider2D;
      misc = module.misc;
      UITransform = module.UITransform;
      Vec3 = module.Vec3;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfBullet = module.gfBullet;
    }, function (module) {
      SetZIndex = module.SetZIndex;
      getRotation = module.getRotation;
      v2Distance = module.v2Distance;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "41b7fGkyXZCJ4zzQKvRdMkK", "Bullet1989", undefined);

      var ccclass = _decorator.ccclass;
      var Bullet1989 = exports('Bullet1989', (_dec = ccclass('Bullet1989'), _dec(_class = /*#__PURE__*/function (_gfBullet) {
        _inheritsLoose(Bullet1989, _gfBullet);

        function Bullet1989() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfBullet.call.apply(_gfBullet, [this].concat(args)) || this;
          _this.hasHitWall = false;
          _this.hitArea = null;
          return _this;
        }

        var _proto = Bullet1989.prototype;

        _proto.limitPositionForTarget = function limitPositionForTarget() {};

        _proto.initAssets = function initAssets(config) {
          this.node.getComponentInChildren(Sprite).spriteFrame = config.asset;
          var box = this.node.getComponent(BoxCollider2D);
          box.offset.x = config.BoxCollider.x;
          box.offset.y = config.BoxCollider.y;
          box.size.width = config.BoxCollider.width;
          box.size.height = config.BoxCollider.height;
          SetZIndex(this.node, gfBaseConfig.instance.Z_INDEX.BULLET);
          this['_speed'] = gfBaseConfig.instance.BulletSpeed;
          this.hitArea = config.BoxCollider.height / 2;
        };

        _proto.initData = function initData(data) {
          this.hasHitWall = false;

          _gfBullet.prototype.initData.call(this, data);
        };

        _proto.updatePosition = function updatePosition(dt) {
          var delta = dt * this['_speed'];
          var x = this.node.position.x,
              y = this.node.position.y;

          if (this['_LockedFish']) {
            this.node.angle = getRotation(this['_LockedFish'].getLockPositionByNodeSpace(this.node.parent), this['_lastPos']);
            this['_vectorX'] = Math.cos(misc.degreesToRadians(this.node.angle));
            this['_vectorY'] = Math.sin(misc.degreesToRadians(this.node.angle));
          } else {
            var SceneBox = gfBaseConfig.instance.SceneBox;
            var isBulletDie = x > SceneBox.Right || x < SceneBox.Left || y > SceneBox.Top || y < SceneBox.Bottom || this.hasHitWall;

            if (isBulletDie) {
              if (this.hasHitWall) {
                var data = {
                  angle: this.node.angle,
                  hitPos: this.node.getComponent(UITransform).convertToWorldSpaceAR(new Vec3(this.hitArea, 0, 0)),
                  isBulletHole: true,
                  BulletMultiple: this['_BulletMultiple']
                };
                gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.ON_PLAY_NETFX, data);
              }

              this.onDie();
            }
          }

          x += this['_vectorX'] * delta;
          y += this['_vectorY'] * delta;
          this.node.setPosition(x, y, 0);
        };

        _proto.onCollisionEnter = function onCollisionEnter(self, other, contact) {
          if (this["_isDie"]) return;

          if (other['isWall'] && !this["_LockedFish"]) {
            this.hasHitWall = true;
          } else {
            _gfBullet.prototype.onCollisionEnter.call(this, self, other, contact);
          }
        };

        _proto.onHit = function onHit(fish) {
          var data = this.makeBulletCollisionData(fish);
          data["hitPos"] = this.calculateHitPosition(fish);
          fish.onHit(data);

          if (!this["_isFake"]) {
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.BULLET_COLLIDE_FISH, data);
          } else {
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.ON_PLAY_NETFX, data);
          }

          this["_isDie"] = true;
        };

        _proto.calculateHitPosition = function calculateHitPosition(fish) {
          var bulletPos = this.node.worldPosition;
          var fishPos = fish.getLockPositionByWorldSpace();
          var ratio = this.hitArea / v2Distance(bulletPos, fishPos);
          return new Vec3((fishPos.x - bulletPos.x) * ratio + bulletPos.x, (fishPos.y - bulletPos.y) * ratio + bulletPos.y);
        };

        return Bullet1989;
      }(gfBullet)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BulletLayer1989.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseConfig.ts', './gfDataStore.ts', './gfBulletLayer.ts', './gfUtilities.ts', './ReferenceManager1989.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, UITransform, gfBaseConfig, gfDataStore, gfBulletLayer, getPointByDegrees, ReferenceManager1989;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      UITransform = module.UITransform;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfBulletLayer = module.gfBulletLayer;
    }, function (module) {
      getPointByDegrees = module.getPointByDegrees;
    }, function (module) {
      ReferenceManager1989 = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "c1234cnBfNOBakihlnX/j1E", "BulletLayer1989", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BulletLayer1989 = exports('BulletLayer1989', (_dec = ccclass('BulletLayer1989'), _dec(_class = /*#__PURE__*/function (_gfBulletLayer) {
        _inheritsLoose(BulletLayer1989, _gfBulletLayer);

        function BulletLayer1989() {
          return _gfBulletLayer.apply(this, arguments) || this;
        }

        var _proto = BulletLayer1989.prototype;

        _proto.createBullet = function createBullet(data) {
          var player = ReferenceManager1989.instance.getPlayerByDeskStation(data.DeskStation);

          if (player) {
            var posFire = this.node.getComponent(UITransform).convertToNodeSpaceAR(player.gun.worldPosition);
            var realPosFire = getPointByDegrees(posFire.x, posFire.y, posFire.x + gfBaseConfig.instance.gunRadius, posFire.y, Number.parseFloat(data.Angle));
            data.position = realPosFire;

            if (player.isMe) {
              data.FireType = gfDataStore.instance.getTargetState();
              this.createBulletPool(data);
              this.countBullet(true);
            } else {
              this.createBulletPool(data);
            }
          }
        };

        return BulletLayer1989;
      }(gfBulletLayer)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BulletLayer1998.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBulletLayer.ts', './gfReferenceManager.ts', './gfFreezeGunFX.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, gfBulletLayer, gfReferenceManager, GfFreezeGunFX;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfBulletLayer = module.gfBulletLayer;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      GfFreezeGunFX = module.GfFreezeGunFX;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "55328LmSMZAuaNFbx9TO30V", "BulletLayer1998", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BulletLayer1998 = exports('BulletLayer1998', (_dec = ccclass('BulletLayer1998'), _dec(_class = /*#__PURE__*/function (_gfBulletLayer) {
        _inheritsLoose(BulletLayer1998, _gfBulletLayer);

        function BulletLayer1998() {
          return _gfBulletLayer.apply(this, arguments) || this;
        }

        var _proto = BulletLayer1998.prototype;

        _proto.createBulletPool = function createBulletPool(data) {
          var player = gfReferenceManager.instance.getPlayerByDeskStation(data.DeskStation);

          if (player.getComponent(GfFreezeGunFX).isFreezeGunActive()) {
            data.isFreezed = true;
          }

          _gfBulletLayer.prototype.createBulletPool.call(this, data);
        };

        return BulletLayer1998;
      }(gfBulletLayer)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BulletMapGen.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Fish.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Rect, SpriteFrame, Node, Collider2D, Contact2DType, misc, Sprite, BoxCollider2D, Component, Fish;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Rect = module.Rect;
      SpriteFrame = module.SpriteFrame;
      Node = module.Node;
      Collider2D = module.Collider2D;
      Contact2DType = module.Contact2DType;
      misc = module.misc;
      Sprite = module.Sprite;
      BoxCollider2D = module.BoxCollider2D;
      Component = module.Component;
    }, function (module) {
      Fish = module.Fish;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "feb97FV+IVBY6sErmfzFCLm", "BulletMapGen", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SceneBox = {
        Left: -830,
        Bottom: -415,
        Right: 830,
        Top: 415
      };
      var BULLET_CONFIG = {
        "0": {
          BoxCollider: new Rect(0, 0, 40, 20)
        },
        "1": {
          BoxCollider: new Rect(0, 0, 40, 50)
        },
        "2": {
          BoxCollider: new Rect(0, 0, 40, 55)
        },
        "3": {
          BoxCollider: new Rect(0, 0, 60, 88)
        },
        "4": {
          BoxCollider: new Rect(0, 0, 47, 90)
        }
      };
      var BulletMapGen = exports('BulletMapGen', (_dec = ccclass('BulletMapGen'), _dec2 = property(SpriteFrame), _dec3 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(BulletMapGen, _Component);

        function BulletMapGen() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "listBullet", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "spriteBullet", _descriptor2, _assertThisInitialized(_this));

          _this._speed = 940;
          _this._vectorX = 0;
          _this._vectorY = 0;
          _this._isDestroy = false;
          _this._lastPos = null;
          _this._lockFish = null;

          _this.getRotation = function (p1, p2) {
            if (p1 == null || p2 == null) return 0;
            return Math.atan2(p1.y - p2.y, p1.x - p2.x) * 180 / Math.PI;
          };

          return _this;
        }

        var _proto = BulletMapGen.prototype;

        _proto.onLoad = function onLoad() {
          this.node.on("INIT_DATA", this.initData, this);
          this.node.on("SET_LOCK_FISH", this.setLockFish, this);
          this.getComponent(Collider2D).on(Contact2DType.BEGIN_CONTACT, this.onCollisionEnter, this);
          this._lastPos = this.node.position;
        };

        _proto.initData = function initData(bulletId) {
          if (bulletId === void 0) {
            bulletId = 0;
          }

          this._vectorX = Math.cos(misc.degreesToRadians(this.node.angle));
          this._vectorY = Math.sin(misc.degreesToRadians(this.node.angle));
          this.spriteBullet.getComponent(Sprite).spriteFrame = this.listBullet[bulletId];
          this._isDestroy = false;
          this.setUpBoxCollider(bulletId);
          this._lockFish = null;
        };

        _proto.setUpBoxCollider = function setUpBoxCollider(bulletId) {
          var box = this.node.getComponent(BoxCollider2D);
          var BoxCollider = BULLET_CONFIG[bulletId].BoxCollider;

          if (box) {
            box.enabled = true;
            box.offset.x = BoxCollider.x;
            box.offset.y = BoxCollider.y;
            box.size.width = BoxCollider.width;
            box.size.height = BoxCollider.height;
          }
        };

        _proto.setLockFish = function setLockFish(lockFish) {
          this._lockFish = lockFish;
        };

        _proto.update = function update(dt) {
          var delta = dt * this._speed;
          var x = this.node.position.x;
          var y = this.node.position.y;

          if (this._lockFish && !this._lockFish["_isDead"]) {
            var mummy = this._lockFish.getComponent(Fish);

            this.node.angle = this.getRotation(mummy.getLockPositionByNodeSpace(this.node.parent), this._lastPos);
            this._vectorX = Math.cos(misc.degreesToRadians(this.node.angle));
            this._vectorY = Math.sin(misc.degreesToRadians(this.node.angle));
          }

          x += this._vectorX * delta;
          y += this._vectorY * delta;
          this.node.setPosition(x, y, 0);
          this._lastPos = this.node.position;

          if (x > SceneBox.Right || x < SceneBox.Left || y > SceneBox.Top || y < SceneBox.Bottom) {
            this._isDestroy = true;
          }
        };

        _proto.onCollisionEnter = function onCollisionEnter(self, fishTarget, contact) {
          var fish = fishTarget.getComponent(Fish);
          if (!fish || fish.node["_isDead"]) return;

          if (this._lockFish && !this._lockFish["_isDead"]) {
            if (fish.node["fishID"] != this._lockFish["fishID"]) return;
          }

          this._isDestroy = true;
        };

        _proto.isDestroy = function isDestroy() {
          return this._isDestroy;
        };

        return BulletMapGen;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "listBullet", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "spriteBullet", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CanvasScaleByOrientation.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, CCBoolean, Canvas, CCInteger, Widget, sys, view, macro, screen, log, ResolutionPolicy, Camera, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCBoolean = module.CCBoolean;
      Canvas = module.Canvas;
      CCInteger = module.CCInteger;
      Widget = module.Widget;
      sys = module.sys;
      view = module.view;
      macro = module.macro;
      screen = module.screen;
      log = module.log;
      ResolutionPolicy = module.ResolutionPolicy;
      Camera = module.Camera;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10;

      cclegacy._RF.push({}, "b4c0egcgEpKdZ75o3AkPNx+", "CanvasScaleByOrientation", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var CanvasScaleByOrientation = exports('CanvasScaleByOrientation', (_dec = ccclass('CanvasScaleByOrientation'), _dec2 = property(CCBoolean), _dec3 = property(CCBoolean), _dec4 = property({
        type: Canvas
      }), _dec5 = property(CCBoolean), _dec6 = property(CCBoolean), _dec7 = property(CCInteger), _dec8 = property(CCInteger), _dec9 = property({
        type: Widget
      }), _dec10 = property(CCBoolean), _dec11 = property({
        type: CCInteger
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(CanvasScaleByOrientation, _Component);

        function CanvasScaleByOrientation() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "autoOrientation", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "isPortrait", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "canvas", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "fitByOrientation", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "useCustomDesignResolution", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "customDSWidth", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "customDSHeight", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "widgetNodes", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "isDebug", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "minScreenRatio", _descriptor10, _assertThisInitialized(_this));

          _this._thisOnResized = void 0;
          _this.innerSize = void 0;
          return _this;
        }

        var _proto = CanvasScaleByOrientation.prototype;

        _proto.onLoad = function onLoad() {
          this.innerSize = {
            width: window.innerWidth,
            height: window.innerHeight
          };
          this._thisOnResized = this.onScreenResized.bind(this);

          if (sys.isBrowser) {
            window.addEventListener('resize', this._thisOnResized);
          } else {
            view.on('canvas-resize', this._thisOnResized);
          }

          this.scaleCanvasByOrientation();

          if (!sys.isNative) {
            var divFullscreen = document.getElementById('div_full_screen');

            if (this.isPortrait) {
              if (divFullscreen) {
                divFullscreen.style.visibility = "hidden";
              }
            }

            if (this.autoOrientation) {
              view.setOrientation(macro.ORIENTATION_AUTO);
            } else if (this.isPortrait) {
              view.setOrientation(macro.ORIENTATION_PORTRAIT);
            } else {
              view.setOrientation(macro.ORIENTATION_LANDSCAPE);
            }
          }
        };

        _proto.start = function start() {
          if (sys.isMobile) {
            var eventResize = new Event('gameShow');
            window.dispatchEvent(eventResize);
          }
        };

        _proto.scaleCanvasByOrientation = function scaleCanvasByOrientation() {
          var screenWidth = window ? window.innerWidth : screen.windowSize.width;
          var screenHeight = window ? window.innerHeight : screen.windowSize.height;

          if (this.autoOrientation) {
            if (screenWidth < screenHeight) {
              this.isPortrait = true;
            } else {
              this.isPortrait = false;
            }
          } else {
            if (this.isPortrait) {
              view.setOrientation(macro.ORIENTATION_PORTRAIT);
            } else {
              view.setOrientation(macro.ORIENTATION_LANDSCAPE);
            }
          }

          if (this.canvas) {
            this.isDebug && log("Canvas after update: ");
            this.isDebug && log(this.canvas);
            this.canvas.alignCanvasWithScreen = true;

            if (this.fitByOrientation) {
              var designRatio = this.useCustomDesignResolution ? this.customDSWidth / this.customDSHeight : view.getDesignResolutionSize().width / view.getDesignResolutionSize().height;
              var screenRatio = screenWidth / screenHeight;

              if (window && sys.isMobile && sys.isBrowser) {
                var isLandscapeOrien = this.isLandscapeScreen();

                if (this.isPortrait) {
                  screenRatio = isLandscapeOrien ? screenHeight / screenWidth : screenWidth / screenHeight;
                } else {
                  screenRatio = isLandscapeOrien ? window.innerWidth / window.innerHeight : window.innerHeight / window.innerWidth;
                }
              }

              this.isDebug && log("[TestResize]View size width: " + screenWidth + ", height: " + screenHeight + "  Design Resolution: W: " + view.getDesignResolutionSize().width + ", H: " + view.getDesignResolutionSize().height + ",  Screen Ratio: " + screenRatio + ", Design Ratio: " + designRatio + ", minScreenRatio: " + this.minScreenRatio);

              if (this.isPortrait) {
                if (screenRatio < designRatio) {
                  view.setDesignResolutionSize(view.getDesignResolutionSize().width, view.getDesignResolutionSize().height, ResolutionPolicy.FIXED_WIDTH);
                  this.isDebug && log("CANVAS FIT WIDTH");
                } else {
                  view.setDesignResolutionSize(view.getDesignResolutionSize().width, view.getDesignResolutionSize().height, ResolutionPolicy.FIXED_HEIGHT);
                  this.isDebug && log("CANVAS FIT HEIGHT");
                }

                this.rotateRootPortraitGame();
              } else {
                if (screenRatio < designRatio && screenRatio >= this.minScreenRatio) {
                  view.setDesignResolutionSize(view.getDesignResolutionSize().width, view.getDesignResolutionSize().height, ResolutionPolicy.FIXED_WIDTH);
                  this.isDebug && log("[TestResize]CANVAS FIT WIDTH");
                } else {
                  view.setDesignResolutionSize(view.getDesignResolutionSize().width, view.getDesignResolutionSize().height, ResolutionPolicy.FIXED_HEIGHT);
                  this.isDebug && log("[TestResize]CANVAS FIT HEIGHT");
                }
              }
            }
          } else {
            this.isDebug && log("No canvas component");
          }

          if (this.widgetNodes && this.widgetNodes.length > 0) {
            for (var i = 0; i < this.widgetNodes.length; i++) {
              var widget = this.widgetNodes[i];

              if (widget) {
                this.widgetNodes[i].updateAlignment();
              }
            }
          }
        };

        _proto.onScreenResized = function onScreenResized() {
          this.scaleCanvasByOrientation();
        };

        _proto.isLandscapeScreen = function isLandscapeScreen() {
          if (window.matchMedia("(orientation: landscape)").matches) {
            return true;
          }

          if (window.matchMedia("(orientation: portrait)").matches) {
            return false;
          }

          return false;
        };

        _proto.isShowKeyboard = function isShowKeyboard() {
          var currentViewSize = window.innerWidth * window.innerHeight;
          var rate = currentViewSize / (this.innerSize.width * this.innerSize.height);
          return rate < 0.8;
        };

        _proto.rotateRootPortraitGame = function rotateRootPortraitGame() {
          if (!this.isPortrait) return;

          if (sys.isMobile && sys.isBrowser) {
            var isLandScapeView = this.isLandscapeScreen() && !this.isShowKeyboard();
            this.node.children.forEach(function (child) {
              if (!child.getComponent(Camera)) {
                child.angle = isLandScapeView ? 180 : 0;
              }
            });
          }
        };

        _proto.onDestroy = function onDestroy() {
          if (sys.isBrowser) {
            window.removeEventListener('resize', this._thisOnResized);
          } else {
            view.off('canvas-resize', this._thisOnResized);
          }
        };

        return CanvasScaleByOrientation;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "autoOrientation", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "isPortrait", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "canvas", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "fitByOrientation", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "useCustomDesignResolution", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "customDSWidth", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1280;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "customDSHeight", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 720;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "widgetNodes", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "isDebug", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "minScreenRatio", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ClickAndShow.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, UIOpacity, tween, Component, setOpacity, fadeIn;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      UIOpacity = module.UIOpacity;
      tween = module.tween;
      Component = module.Component;
    }, function (module) {
      setOpacity = module.setOpacity;
      fadeIn = module.fadeIn;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "f1c22FetS9D86F5ibiTjmyB", "ClickAndShow", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ClickAndShow = exports('ClickAndShow', (_dec = ccclass('ClickAndShow'), _dec2 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ClickAndShow, _Component);

        function ClickAndShow() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "panel", _descriptor, _assertThisInitialized(_this));

          _this.fadeSpeed = 0.9;
          _this.isShowing = false;
          return _this;
        }

        var _proto = ClickAndShow.prototype;

        _proto.onLoad = function onLoad() {
          this.node.on("SHOW_PANEL", this.enter, this);
          this.node.on("HIDE_PANEL", this.exit, this);
          this.panel.active = false;
        };

        _proto.enter = function enter() {
          if (this.node.soundPlayer) this.node.soundPlayer.playSFXClick();
          this.isShowing = true;
          this.panel.active = true;
          setOpacity(this.panel, 0);
          fadeIn(this.panel, this.fadeSpeed);
        };

        _proto.exit = function exit() {
          var _this2 = this;

          if (!this.isShowing) return;
          this.isShowing = false;
          if (this.node.soundPlayer) this.node.soundPlayer.playSFXClick();
          var uiOp = this.panel.getComponent(UIOpacity);
          tween(uiOp).to(this.fadeSpeed, {
            opacity: 0
          }).call(function () {
            _this2.panel.active = false;
          }).start();
        };

        _proto.start = function start() {// [3]
        };

        return ClickAndShow;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "panel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CloudMovingControl.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, CCFloat, Vec3, GameObject;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCFloat = module.CCFloat;
      Vec3 = module.Vec3;
    }, function (module) {
      GameObject = module.GameObject;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12;

      cclegacy._RF.push({}, "b421cy4dHZAsZhwCDVBkGsv", "CloudMovingControl", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var CloudMovingControl = exports('CloudMovingControl', (_dec = ccclass('CloudMovingControl'), _dec2 = property({
        type: CCFloat
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(CloudMovingControl, _GameObject);

        function CloudMovingControl() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "cloudQuantity", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "cloudPrefabName", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "minScale", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "maxScale", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "minSpeed", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "maxSpeed", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "leftBorderX", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "rightBorderX", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "minPosY", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "maxPosY", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "playOnStart", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "horizontalDirections", _descriptor12, _assertThisInitialized(_this));

          _this._isPlaying = false;
          _this._clouds = [];
          _this._poolFactory = null;
          return _this;
        }

        var _proto = CloudMovingControl.prototype;

        _proto.onEnable = function onEnable() {
          if (this.eventManager) {
            this.eventManager.on("PLAY_CLOUD_MOVING", this.playEffect, this);
            this.eventManager.on("STOP_CLOUD_MOVING", this.stopEffect, this);
          }
        };

        _proto.onDisable = function onDisable() {
          if (this.eventManager) {
            this.eventManager.off("PLAY_CLOUD_MOVING", this.playEffect, this);
            this.eventManager.off("STOP_CLOUD_MOVING", this.stopEffect, this);
          }
        };

        _proto.start = function start() {
          this.createClouds();
          this.setUpCloudSpeed();

          if (this.playOnStart) {
            this.playEffect();
          }
        };

        _proto.createClouds = function createClouds() {
          if (!this._poolFactory) this._poolFactory = this.mainDirector.poolFactory;

          for (var i = 0; i < this.cloudQuantity && this._clouds.length < this.cloudQuantity; i++) {
            var cloud = this._poolFactory.getObject(this.cloudPrefabName);

            if (cloud) {
              var scaleFactor = this.getRandomRange(this.minScale, this.maxScale);
              cloud.active = true;
              var posX = this.getRandomRange(this.leftBorderX, this.rightBorderX);
              var posY = this.getRandomRange(this.minPosY, this.maxPosY);
              cloud.parent = this.node;
              cloud.scale = new Vec3(scaleFactor, scaleFactor, 1);
              cloud.setPosition(new Vec3(posX, posY, 0));

              this._clouds.push(cloud);
            }
          }
        };

        _proto.playEffect = function playEffect() {
          this._isPlaying = true;
        };

        _proto.stopEffect = function stopEffect() {
          this._isPlaying = false;
          this.setUpCloudSpeed();
        };

        _proto.setUpCloudSpeed = function setUpCloudSpeed() {
          for (var i = 0; i < this._clouds.length; i++) {
            var cloud = this._clouds[i];
            var horRandomDir = this.horizontalDirections[Math.floor(Math.random() * this.horizontalDirections.length)];

            if (cloud) {
              cloud["horSpeed"] = horRandomDir * this.getRandomRange(this.minSpeed, this.maxSpeed);
            }
          }
        };

        _proto.update = function update(dt) {
          if (this._isPlaying) {
            for (var i = 0; i < this._clouds.length; i++) {
              var cloud = this._clouds[i];

              if (cloud) {
                var pos = cloud.position;
                pos.x += cloud["horSpeed"] * dt;

                if (pos.x > this.rightBorderX) {
                  pos.x = this.leftBorderX;
                  pos.y = this.getRandomRange(this.minPosY, this.maxPosY);
                } else if (pos.x < this.leftBorderX) {
                  pos.x = this.rightBorderX;
                  pos.y = this.getRandomRange(this.minPosY, this.maxPosY);
                }

                cloud.setPosition(pos);
              }
            }
          }
        };

        _proto.getRandomRange = function getRandomRange(min, max) {
          return Math.random() * (max - min) + min;
        };

        return CloudMovingControl;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "cloudQuantity", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 5;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "cloudPrefabName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "minScale", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "maxScale", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 3;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "minSpeed", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 50;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "maxSpeed", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 150;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "leftBorderX", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return -1200;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "rightBorderX", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1200;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "minPosY", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return -100;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "maxPosY", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 100;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "playOnStart", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "horizontalDirections", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CoinEffect.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, ParticleSystem2D, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      ParticleSystem2D = module.ParticleSystem2D;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "363a80aYLhMurIq1bGA4+Ce", "CoinEffect", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TYPE = {
        BIG: 0,
        MEGA: 1,
        SUPER: 2
      };
      var CoinEffect = exports('CoinEffect', (_dec = ccclass('CoinEffect'), _dec2 = property({
        type: ParticleSystem2D
      }), _dec3 = property({
        type: ParticleSystem2D
      }), _dec4 = property({
        type: ParticleSystem2D
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(CoinEffect, _Component);

        function CoinEffect() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "coinBigWin", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "coinMegaWin", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "coinSuperWin", _descriptor3, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = CoinEffect.prototype;

        _proto.onLoad = function onLoad() {
          this.node.on('SHOW_COIN_EFFECT', this.showCoinEffect, this);
          this.node.on('HIDE_COIN_EFFECT', this.hideCoinEffect, this);
          this.node.on('RESET_COIN_EFFECT', this.resetCoinEffect, this);
          this.resetCoinEffect();
        };

        _proto.resetCoinEffect = function resetCoinEffect() {
          if (this.coinBigWin) this.coinBigWin.node.active = false;

          if (this.coinMegaWin) {
            this.coinMegaWin.forEach(function (item) {
              item.node.active = false;
            });
          }

          if (this.coinSuperWin) {
            this.coinSuperWin.forEach(function (item) {
              item.node.active = false;
            });
          }
        };

        _proto.hideCoinEffect = function hideCoinEffect() {
          if (this.coinBigWin) this.coinBigWin.stopSystem();

          if (this.coinMegaWin) {
            this.coinMegaWin.forEach(function (item) {
              item.stopSystem();
            });
          }

          if (this.coinSuperWin) {
            this.coinSuperWin.forEach(function (item) {
              item.stopSystem();
            });
          }
        };

        _proto.showCoinEffect = function showCoinEffect(type, isSkipEffect) {
          if (type === void 0) {
            type = TYPE.BIG;
          }

          if (type === TYPE.BIG) {
            if (this.coinBigWin) {
              this.coinBigWin.node.active = true;
              this.coinBigWin.resetSystem();
            }
          } else if (type === TYPE.MEGA) {
            if (!isSkipEffect) {
              if (this.coinBigWin) this.coinBigWin.stopSystem();

              if (this.coinMegaWin) {
                this.coinMegaWin.forEach(function (item) {
                  item.node.active = true;
                  item.resetSystem();
                });
              }
            }
          } else {
            if (!isSkipEffect) {
              if (this.coinBigWin) this.coinBigWin.resetSystem();
            }

            if (this.coinMegaWin) {
              this.coinMegaWin.forEach(function (item) {
                item.stopSystem();
              });
            }

            if (this.coinSuperWin) {
              this.coinSuperWin.forEach(function (item) {
                item.node.active = true;
                item.resetSystem();
              });
            }
          }
        };

        return CoinEffect;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "coinBigWin", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "coinMegaWin", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "coinSuperWin", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CoinsEffect.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './SlotUIScene.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Prefab, instantiate, ParticleSystem2D, view, tween, Vec3, setOpacity, SlotUIScene;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Prefab = module.Prefab;
      instantiate = module.instantiate;
      ParticleSystem2D = module.ParticleSystem2D;
      view = module.view;
      tween = module.tween;
      Vec3 = module.Vec3;
    }, function (module) {
      setOpacity = module.setOpacity;
    }, function (module) {
      SlotUIScene = module.SlotUIScene;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "fa67b6DG8NOpaf7Nl24G5YU", "CoinsEffect", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          integer = _decorator.integer;
      var CoinsEffect = exports('CoinsEffect', (_dec = ccclass('CoinsEffect'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Prefab
      }), _dec5 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_SlotUIScene) {
        _inheritsLoose(CoinsEffect, _SlotUIScene);

        function CoinsEffect() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SlotUIScene.call.apply(_SlotUIScene, [this].concat(args)) || this;
          _this.duration = void 0;
          _this.moneyPool = void 0;
          _this.moneyIndex = void 0;
          _this.coinDropperTween = void 0;
          _this.moneyDropperTween = void 0;

          _initializerDefineProperty(_this, "coinSpawnerCount", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "coinPipeDelayTime", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "coinDropper", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "moneySpawner", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "moneyPrefab", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "coinPiles", _descriptor6, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = CoinsEffect.prototype;

        _proto.onLoad = function onLoad() {
          this.initValue();
          this.node.on('START_PARTICLE', this.startParticle, this);
          this.node.on('STOP_PARTICLE', this.stopParticle, this);
          this.node.on('DROP_MONEY', this.randomDropMoney, this);
          this.duration = 10;
        };

        _proto.initValue = function initValue() {
          if (!this.moneyPrefab) return;
          this.moneyPool = [];

          for (var i = 0; i < 20; ++i) {
            var money = instantiate(this.moneyPrefab);
            money.parent = this.moneySpawner;
            setOpacity(money, 0);
            this.moneyPool.push(money);
          }

          setOpacity(this.moneySpawner, 0);
        };

        _proto.startParticle = function startParticle() {
          var _this2 = this;

          this.coinDropper.getComponent(ParticleSystem2D).resetSystem();
          this.coinPiles.forEach(function (pile) {
            pile.setPosition(0, -view.getVisibleSize().height / 2 - 20);
            pile.getComponent(ParticleSystem2D).resetSystem();
            var curPos = pile.getPosition();
            tween(pile).to(_this2.duration, {
              position: new Vec3(curPos.x + 200, curPos.y + 200, curPos.z)
            }).start();
          });
        };

        _proto.stopParticle = function stopParticle() {
          this.moneyDropperTween && this.moneyDropperTween.stop();
          this.coinDropper.getComponent(ParticleSystem2D).stopSystem();
          this.coinPiles.forEach(function (pile) {
            pile.getComponent(ParticleSystem2D).stopSystem();
          });
        };

        _proto.randomDropMoney = function randomDropMoney() {
          var _this3 = this;

          if (!this.moneyPrefab) return;
          this.moneyIndex = 0;
          setOpacity(this.moneySpawner, 255);
          this.moneyDropperTween = tween(this.moneySpawner).repeatForever(tween().delay(0.3).call(function () {
            _this3.dropMoney();
          })).start();
        };

        _proto.dropMoney = function dropMoney() {
          var money = this.moneyPool[this.moneyIndex];
          this.moneyIndex = (this.moneyIndex + 1) % this.moneyPool.length;
          money.x = (Math.random() - 0.5) * view.getVisibleSize().width;
          var randomAnimIdx = Math.random() * 3 | 0 + 1;
          var animName = 'TienRoi' + randomAnimIdx;
          setOpacity(money, 255);
          money.getComponent('sp.Skeleton').setAnimation(0, animName, false);
        };

        return CoinsEffect;
      }(SlotUIScene), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "coinSpawnerCount", [integer], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 3;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "coinPipeDelayTime", [integer], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1.3;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "coinDropper", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "moneySpawner", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "moneyPrefab", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "coinPiles", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Config1989.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseConfig.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _assertThisInitialized, cclegacy, gfBaseConfig;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      gfBaseConfig = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "71b07vG45VIxrGR5UUw+Vgy", "Config1989", undefined);

      var Config1989 = exports('default', /*#__PURE__*/function (_gfBaseConfig) {
        _inheritsLoose(Config1989, _gfBaseConfig);

        function Config1989() {
          var _this;

          _this = _gfBaseConfig.call(this) || this;
          _this.mapConfigs = null;
          Config1989.instance = _assertThisInitialized(_this);
          _this.GameId = '1989';
          _this.GameVersion = "0.0.1";
          _this.SceneName.Lobby = 'ktfLobby1989';
          _this.SceneName.Game = 'ktfGame1989';
          _this.IPMasterName = "IPMaster89";
          _this.RoomVersion = "|12";
          _this.ProdVersion = "|1";
          _this.ClientType = "|1";
          _this.mapConfigs = {
            1: {
              spawnIds: [781, 821, 471, 432, 394, 356, 318, 280, 242, 204, 166, 128, 90, 91, 99, 139, 420, 460, 500, 540, 580, 620, 660, 700, 740, 896, 934, 972, 1010, 1048, 1086, 1124, 1162, 1200, 1238, 1276, 1314, 1352, 1390, 1428, 1466, 1504, 1500, 1460, 1420, 1380, 1340, 1300, 1260, 1220, 1180, 1140, 1100],
              obstacleIds: [1305, 1304, 1265, 1266, 1227, 1226, 1032, 1031, 1030, 1029, 990, 991, 989, 950, 949, 910, 911, 872, 871, 832, 833, 716, 715, 676, 677, 638, 637, 598, 559, 599, 560, 521, 522, 561, 600, 562, 523, 524, 563, 564, 525, 721, 760, 799, 838, 877, 878, 839, 800, 761, 722, 567, 528, 529, 568, 569, 530, 531, 570, 571, 610, 611, 650, 689, 728, 845, 884, 923, 962, 1000, 1038, 1037, 1036, 1035, 889, 850, 811, 812, 851],
              wallIds: [741, 780, 820, 860, 861, 862, 863, 864, 865, 866, 867, 868, 907, 946, 985, 1023, 1062, 1061, 1099, 1139, 1179, 1219, 1259, 1299, 1339, 1379, 1419, 1459, 1499, 1505, 1467, 1429, 1391, 1353, 1315, 1277, 1239, 1201, 1163, 1125, 1087, 1049, 1011, 973, 935, 701, 661, 621, 581, 541, 501, 461, 421, 381, 380, 379, 378, 377, 376, 375, 374, 335, 296, 257, 218, 179, 140, 100, 60, 98, 137, 176, 215, 254, 293, 332, 371, 370, 369, 368, 367, 366, 365, 326, 287, 248, 209, 170, 131, 92, 52, 51, 89, 127, 165, 203, 241, 279, 317, 355, 393, 431, 470, 510, 511, 512, 513, 514, 515, 516, 517, 556, 595, 634, 673, 712, 751, 750, 749, 748, 747, 746, 745, 744, 743, 742],
              centerIds: [877, 878, 838, 839, 799, 800, 760, 761, 721, 722]
            }
          };
          _this.BIG_WIN_RATIO = {
            HUGE: 15,
            SUPER: 20,
            BIG_WIN_VALUE: 10
          };
          return _this;
        }

        var _proto = Config1989.prototype;

        _proto.destroy = function destroy() {
          _gfBaseConfig.prototype.destroy.call(this);

          Config1989.instance = null;
        };

        return Config1989;
      }(gfBaseConfig));
      Config1989.instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Config1998.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseConfig.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _assertThisInitialized, cclegacy, Vec2, gfBaseConfig;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      Vec2 = module.Vec2;
    }, function (module) {
      gfBaseConfig = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "0cb6ajeUd5DAqowqm+Ivgzd", "Config1998", undefined);

      var Config1998 = exports('default', /*#__PURE__*/function (_gfBaseConfig) {
        _inheritsLoose(Config1998, _gfBaseConfig);

        function Config1998() {
          var _position;

          var _this;

          _this = _gfBaseConfig.call(this) || this;
          _this.BOSS_PREFAB_NAME = {
            DRAGON: 'Dragon1998'
          };
          Config1998.instance = _assertThisInitialized(_this);
          _this.GameId = "1998";
          _this.GameVersion = "0.3.8";
          _this.IPMasterName = "IPMaster2";
          _this.RoomVersion = "|15";
          _this.ProdVersion = "|6";
          _this.ClientType = "|1";
          _this.SceneName.Lobby = 'ktfLobby1998';
          _this.SceneName.Game = 'ktfGame1998';
          _this.BundleName = 'bundle1998';
          _this.LoadGameByPrefab = true;
          _this.NOTIFY_MESSAGE = {
            position: (_position = {}, _position[_this.SceneName.Game] = new Vec2(0, 99999), _position[_this.SceneName.Lobby] = new Vec2(0, 320), _position),
            limited_stack_size: 10
          };
          return _this;
        }

        var _proto = Config1998.prototype;

        _proto.destroy = function destroy() {
          _gfBaseConfig.prototype.destroy.call(this);

          Config1998.instance = null;
        };

        return Config1998;
      }(gfBaseConfig));
      Config1998.instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Config9000.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gameCommonUtils.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component, gameCommonUtils;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      gameCommonUtils = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "1fb886d4N9Fy7CXaAPPs5e7", "Config9000", undefined);

      var ccclass = _decorator.ccclass;
      var Config9000 = exports('Config9000', (_dec = ccclass('Config9000'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Config9000, _Component);

        function Config9000() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = Config9000.prototype;

        _proto.onLoad = function onLoad() {
          this.node.config = {
            GAME_ID: '9965',
            JP_PREFIX_EVENT: '9965_',
            JP_NAMES: ["GRAND"],
            DEFAULT_BET: "1",
            BETS: {
              '1': 500,
              '2': 1000,
              '3': 5000,
              '4': 10000,
              '5': 50000,
              '6': 500000
            },
            DEFAULT_EXTRA_BET: "0",
            EXTRA_BETS: {
              "0": 1
            },
            TOTAL_BET_CREDIT: 25,
            TREASURE_VALUE_1: ["1", "2", "3", "4"],
            DEFAULT_TRIAL_JACKPOT: {
              "9965_1_GRAND": 250000,
              "9965_2_GRAND": 500000,
              "9965_3_GRAND": 2500000,
              "9965_4_GRAND": 5000000,
              "9965_5_GRAND": 25000000,
              "9965_6_GRAND": 250000000
            },
            DEFAULT_TRIAL_WALLET: 200000000,
            TRIAL_BET: '5',
            TRIAL_EXTRA_BET: '0',
            MESSAGE_DIALOG: gameCommonUtils.getMessageSlot(),
            DEMONTATION: 250,
            ACTIVE_SYMBOL: ["8", "18", "38", "68", "168"],
            BOX_MAP_VALUES: {
              100: 1,
              200: 2,
              400: 3
            },
            RANDOM_ACTIVE_SYMBOL: [["8"], ["8", "18"], ["8", "18", "38"], ["8", "18", "38", "68"], ["8", "18", "38", "68", "168"]],
            PAY_TABLE: {
              "2": [10, 15, 50],
              "3": [5, 10, 20],
              "4": [5, 10, 20],
              "5": [5, 10, 20],
              "6": [5, 10, 20],
              "22": [10, 15, 50],
              "33": [35, 65, 250],
              "44": [15, 50, 200],
              "55": [15, 35, 150],
              "66": [10, 30, 100]
            },
            GAME_SPEED: {
              NORMAL: 0,
              TURBO: 1,
              INSTANTLY: 2
            },
            PARTICLE_MOVING_TIME: 1,
            MUSIC_VOLUME: 0.7,
            SOUND_EFFECT_VOLUME: 1,
            JP_LIST_HISTORY: 'GRAND-MAJOR',
            BET_IDS: "10-20-30-40-50-60",
            BET_IDS_IFRAME: "10-20-30-40-50-60",
            SKIP_NEAR_WIN_TURBO: true,
            IS_SHOW_JACKPOT_EXPLOSION: true,
            HIGH_PERFORMANCE_LV: {
              PAYLINE_ANIMATION: 2,
              BIG_WIN_ANIMATION: 2,
              JP_WIN_ANIMATION: 2,
              BACKGROUND_ANIMATION: 2,
              NEAR_WIN_ANIMATION: 2,
              TRANSITION_ANIMATION: 2,
              BONUS_ANIMATION: 2
            },
            MEDIUM_PERFORMANCE_LV: {
              PAYLINE_ANIMATION: 1,
              BIG_WIN_ANIMATION: 1,
              JP_WIN_ANIMATION: 1,
              BACKGROUND_ANIMATION: 1,
              NEAR_WIN_ANIMATION: 1,
              TRANSITION_ANIMATION: 1,
              BONUS_ANIMATION: 1
            },
            LOW_PERFORMANCE_LV: {
              PAYLINE_ANIMATION: 0,
              BIG_WIN_ANIMATION: 0,
              JP_WIN_ANIMATION: 0,
              BACKGROUND_ANIMATION: 0,
              NEAR_WIN_ANIMATION: 0,
              TRANSITION_ANIMATION: 0,
              BONUS_ANIMATION: 0
            },

            /********** * ONLY TABLE CONFIG ****************/
            NORMAL_TABLE_FORMAT: [3, 3, 3, 3, 3],
            FREE_TABLE_FORMAT: [3, 3, 3, 3, 3],
            TOPUP_TABLE_FORMAT: [3, 3, 3, 3, 3],
            BONUS_TABLE_FORMAT: [3, 3, 3, 3, 3],
            TABLE_BUFFER: {
              TOP: 1,
              BOT: 1
            },
            ACCEL: 1200,
            MIN_SPEED: 2000,
            MAX_SPEED: 2800,
            SUPER_SPEED: 3500,
            TABLE_NORMAL: {
              TIME: 0.06,
              DELAY_START: 0.2,
              DELAY_STOP: 0.2,
              EASING_DISTANCE: 15,
              EASING_TIME: 0.5,
              TOTAL_CIRCULAR: 8,
              STEP_STOP: 12,
              RATE: 1,
              IS_TURBO: false,
              BLINKS: 2,
              BLINK_DURATION: 0.5,
              ANIMATION_DURATION: 2,
              EXPECT_PAYLINE_TIME: 2,
              EXPECT_PAYLINE_ALLWAYS_TIME: 2,
              MIN_TIME_EACH_PAYLINE: 0.3,
              NEAR_WIN_DELAY: 0.4,
              NEAR_WIN_DELAY_LAST_REEL: 0.8
            },
            TABLE_TURBO: {
              TIME: 0.06,
              DELAY_START: 0.1,
              DELAY_STOP: 0.1,
              EASING_DISTANCE: 15,
              EASING_TIME: 0,
              TOTAL_CIRCULAR: 6,
              STEP_STOP: 8,
              RATE: 2,
              IS_TURBO: true,
              BLINKS: 1,
              BLINK_DURATION: 0.5,
              ANIMATION_DURATION: 1,
              EXPECT_PAYLINE_TIME: 2,
              EXPECT_PAYLINE_ALLWAYS_TIME: 2,
              MIN_TIME_EACH_PAYLINE: 0.2,
              NEAR_WIN_DELAY: 0.2,
              NEAR_WIN_DELAY_LAST_REEL: 0.8
            },
            NORMAL_SYMBOLS: [['2', '3', '4', '5', '6'], ['2', '3', '4', '5', '6'], ['2', '3', '4', '5', '6'], ['2', '3', '4', '5', '6'], ['2', '3', '4', '5', '6']],
            FREE_SYMBOLS: [['2', '3', '4', '5', '6'], ['2', '3', '4', '5', '6'], ['2', '3', '4', '5', '6'], ['2', '3', '4', '5', '6'], ['2', '3', '4', '5', '6']],
            EXCEPTION_SYMBOLS: ["A", "R", "K", "K1", "K2"],
            WILD_SYMBOL: 'K',
            SYMBOL_SMALL_NAME_LIST: ['2', '3', '4', '5', '6'],
            SYMBOL_WIDTH: 190,
            SYMBOL_HEIGHT: 148,
            PAY_LINE_LENGTH: 20,
            PAY_LINE_ALLWAYS: false,
            SHOW_WINLINE_FRAME: false,
            SHOW_DRAWING_LINE: true,
            PAY_LINE_MATRIX: {
              "1": [1, 1, 1, 1, 1],
              "2": [0, 0, 0, 0, 0],
              "3": [2, 2, 2, 2, 2],
              "4": [0, 1, 2, 1, 0],
              "5": [2, 1, 0, 1, 2],
              "6": [1, 0, 1, 0, 1],
              "7": [1, 2, 1, 2, 1],
              "8": [0, 1, 0, 1, 0],
              "9": [2, 1, 2, 1, 2],
              "10": [1, 0, 0, 0, 1],
              "11": [1, 2, 2, 2, 1],
              "12": [2, 2, 1, 2, 2],
              "13": [0, 0, 1, 0, 0],
              "14": [2, 1, 1, 1, 2],
              "15": [0, 1, 1, 1, 0],
              "16": [0, 2, 0, 2, 0],
              "17": [2, 0, 2, 0, 2],
              "18": [1, 1, 0, 1, 1],
              "19": [1, 1, 2, 1, 1],
              "20": [2, 2, 0, 2, 2]
            },
            HAS_GAME_EVENT: false,
            SERVER_VERSION: '',

            /********** * ONLY FOR TUTORIAL ****************/
            TUTORIAL_TEXT: {
              CLICK_SPIN_1: "Bấm quay để bắt đầu chơi.",
              INFO_BET_1: "Xét trên dòng 1 đang cược 5K, có 3 \nbiểu tượng Eva và hệ số thưởng là\n 40 thì sẽ được trả thưởng\n là 5K x 40 = 200.000.",
              INTRO_JACKPOT: "Đây là hũ xu của game, mỗi lần quay sẽ góp 1 phần tiền cược vào hũ.",
              CONTINUE_SPIN: "Thử thêm lần nữa nào.",
              CLICK_BET: "Không thắng được gì. Thử tăng mức cược lên xem sao.",
              CLICK_TURBO: "Bấm vào đây để tăng tốc.",
              WIN_BONUS: "Tìm đủ 3 biểu tượng Bonus, bạn sẽ \nbiết được đường vào hầm bí mật.",
              BONUS_RULE: "Bạn có 3 lần mở rương với các phần thưởng khác nhau. Hãy chọn nào.",
              WIN_SCATTER: "Tìm đủ 3 biểu tượng Free bạn sẽ bắt được tín hiệu trợ giúp.",
              SPIN_TIMES: "Số lần quay còn lại sẽ được cập nhật ở đây.",
              CLICK_AUTO_SPIN: "Nhấn giữ để tự động quay."
            }
          };
        };

        return Config9000;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ConfigTest.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Config9000.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Config9000;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      Config9000 = module.Config9000;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "69cb38eYtpHNb+SwFFsizzs", "ConfigTest", undefined);

      var ccclass = _decorator.ccclass;
      var ConfigTest = exports('ConfigTest', (_dec = ccclass('ConfigTest'), _dec(_class = /*#__PURE__*/function (_Config) {
        _inheritsLoose(ConfigTest, _Config);

        function ConfigTest() {
          return _Config.apply(this, arguments) || this;
        }

        var _proto = ConfigTest.prototype;

        _proto.onLoad = function onLoad() {
          _Config.prototype.onLoad.call(this);

          Object.assign(this.node.config, {
            SYMBOL_WIDTH: 163,
            SYMBOL_HEIGHT: 152,
            TABLE_NORMAL: {
              TIME: 0.06,
              DELAY_START: 0,
              DELAY_STOP: 0.2,
              EASING_DISTANCE: 15,
              EASING_TIME: 0.5,
              TOTAL_CIRCULAR: 8,
              STEP_STOP: 12,
              RATE: 1,
              IS_TURBO: false,
              BLINKS: 2,
              BLINK_DURATION: 0.5,
              ANIMATION_DURATION: 2,
              EXPECT_PAYLINE_TIME: 2,
              EXPECT_PAYLINE_ALLWAYS_TIME: 2,
              MIN_TIME_EACH_PAYLINE: 0.3,
              NEAR_WIN_DELAY: 0.4,
              NEAR_WIN_DELAY_LAST_REEL: 0.8
            },
            TABLE_TURBO: {
              TIME: 0.06,
              DELAY_START: 0,
              DELAY_STOP: 0,
              EASING_DISTANCE: 15,
              EASING_TIME: 0,
              TOTAL_CIRCULAR: 6,
              STEP_STOP: 8,
              RATE: 2,
              IS_TURBO: true,
              BLINKS: 1,
              BLINK_DURATION: 0.5,
              ANIMATION_DURATION: 1,
              EXPECT_PAYLINE_TIME: 2,
              EXPECT_PAYLINE_ALLWAYS_TIME: 2,
              MIN_TIME_EACH_PAYLINE: 0.2,
              NEAR_WIN_DELAY: 0.2,
              NEAR_WIN_DELAY_LAST_REEL: 0.8
            },
            NORMAL_SYMBOLS: [['2', '3', '4', '5', '6'], ['2', '3', '4', '5', '6'], ['2', '3', '4', '5', '6'], ['2', '3', '4', '5', '6'], ['2', '3', '4', '5', '6']],
            FREE_SYMBOLS: [['2', '3', '4', '5', '6'], ['2', '3', '4', '5', '6'], ['2', '3', '4', '5', '6'], ['2', '3', '4', '5', '6'], ['2', '3', '4', '5', '6']],
            EXCEPTION_SYMBOLS: ["A", "R", "K", "K1", "K2"]
          });
        };

        return ConfigTest;
      }(Config9000)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/connectNetwork.ts", ['cc', './loadConfigAsync.ts', './serviceRest.ts', './gameCommonUtils.ts', './globalNetwork.ts', './mock.ts'], function (exports) {
  'use strict';

  var cclegacy, sys, log, loadConfigAsync, apiObject, gameCommonUtils, globalNetwork, mock;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      sys = module.sys;
      log = module.log;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      apiObject = module.default;
    }, function (module) {
      gameCommonUtils = module.default;
    }, function (module) {
      globalNetwork = module.default;
    }, function (module) {
      mock = module.mock;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e9aa5GoLR9JNqfGizKqYr82", "connectNetwork", undefined);

      var ConnectNetwork = /*#__PURE__*/function () {
        function ConnectNetwork() {
          this.gameId = '';
        }

        var _proto = ConnectNetwork.prototype;

        _proto.getToken = function getToken() {
          var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
              LOGIN_IFRAME = _loadConfigAsync$getC.LOGIN_IFRAME,
              URL_TOKEN = _loadConfigAsync$getC.URL_TOKEN,
              USER_TOKEN = _loadConfigAsync$getC.USER_TOKEN;

          var token = '';

          if (LOGIN_IFRAME) {
            var getUrlParam = gameCommonUtils.getUrlParam;
            token = getUrlParam(URL_TOKEN);
            sys.localStorage.setItem(USER_TOKEN, token);
          } else {
            token = sys.localStorage.getItem(USER_TOKEN);
          }

          return token;
        };

        _proto.getRefreshToken = function getRefreshToken() {
          var _loadConfigAsync$getC2 = loadConfigAsync.getConfig(),
              LOGIN_IFRAME = _loadConfigAsync$getC2.LOGIN_IFRAME,
              _loadConfigAsync$getC3 = _loadConfigAsync$getC2.URL_REFRESH_TOKEN,
              URL_REFRESH_TOKEN = _loadConfigAsync$getC3 === void 0 ? 'refresh-token' : _loadConfigAsync$getC3,
              _loadConfigAsync$getC4 = _loadConfigAsync$getC2.USER_REFRESH_TOKEN,
              USER_REFRESH_TOKEN = _loadConfigAsync$getC4 === void 0 ? 'user-refresh-token' : _loadConfigAsync$getC4;

          var refreshToken = '';

          if (LOGIN_IFRAME) {
            var getUrlParam = gameCommonUtils.getUrlParam;
            refreshToken = getUrlParam(URL_REFRESH_TOKEN);
            sys.localStorage.setItem(USER_REFRESH_TOKEN, refreshToken);
          } else {
            refreshToken = sys.localStorage.getItem(USER_REFRESH_TOKEN);
          }

          return refreshToken;
        };

        _proto.loginScene = function loginScene(_ref) {
          var _this = this;

          var _ref$callback = _ref.callback,
              _callback = _ref$callback === void 0 ? function () {} : _ref$callback,
              _ref$gameId = _ref.gameId,
              gameId = _ref$gameId === void 0 ? '' : _ref$gameId,
              _ref$callbackAuthFail = _ref.callbackAuthFailed,
              callbackAuthFailed = _ref$callbackAuthFail === void 0 ? function () {} : _ref$callbackAuthFail;

          log("Login using V3");

          var _loadConfigAsync$getC5 = loadConfigAsync.getConfig(),
              IS_FINISHED_REMOTE = _loadConfigAsync$getC5.IS_FINISHED_REMOTE,
              DEV_ENV = _loadConfigAsync$getC5.DEV_ENV,
              USER_TOKEN = _loadConfigAsync$getC5.USER_TOKEN;

          if (!IS_FINISHED_REMOTE) {
            setTimeout(function () {
              _this.loginScene({
                callback: _callback,
                gameId: gameId,
                callbackAuthFailed: callbackAuthFailed
              });
            }, 100);
            return;
          }

          this.gameId = gameId;
          var token = this.getToken();
          var refreshToken = this.getRefreshToken();

          var _loadConfigAsync$getC6 = loadConfigAsync.getConfig(),
              LOGIN_IFRAME = _loadConfigAsync$getC6.LOGIN_IFRAME,
              API_URL = _loadConfigAsync$getC6.API_URL;

          var envId = LOGIN_IFRAME ? 'iframe' : 'portal';
          var gameIdSocket = LOGIN_IFRAME ? gameId : 'all';
          var getUrlParam = gameCommonUtils.getUrlParam;
          var history = getUrlParam('history');
          if (LOGIN_IFRAME && history && history === 'true') return;

          if (token || !DEV_ENV) {
            if (token) {
              globalNetwork.init(token, refreshToken, envId, gameIdSocket);

              _callback();
            } else {
              callbackAuthFailed();
            }
          } else {
            var dataPost = {
              userName: mock.userText,
              password: mock.pwText,
              fingerPrint: 'test'
            };
            apiObject.post({
              url: 'auth/login',
              data: dataPost,
              callback: function callback(_ref2) {
                var data = _ref2.data;

                if (data.data.token) {
                  sys.localStorage.setItem(USER_TOKEN, data.data.token);
                  globalNetwork.init(data.data.token, '', envId, gameIdSocket);

                  _callback();
                } else {
                  callbackAuthFailed && callbackAuthFailed();
                }
              },
              callbackErr: function callbackErr() {
                callbackAuthFailed && callbackAuthFailed();
              },
              apiUrl: API_URL
            });
          }
        };

        return ConnectNetwork;
      }();

      var connectNetwork = exports('default', new ConnectNetwork());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CountDown.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, tween, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      tween = module.tween;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "e7558f3NxpPO66Q/lR3NXnP", "CountDown", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var CountDown = exports('CountDown', (_dec = ccclass('CountDown'), _dec2 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(CountDown, _Component);

        function CountDown() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "textNumber", _descriptor, _assertThisInitialized(_this));

          _this.tweenCount = null;
          _this.count = 0;
          return _this;
        }

        var _proto = CountDown.prototype;

        _proto.onLoad = function onLoad() {
          // globalThis.countDown = this;
          this.node.on("SHOW", this.show, this);
          this.node.on("START_COUNT", this.startCountDown, this);
          this.node.on("STOP_COUNT", this.stopCountDown, this);
          this.node.on("HIDE", this.hide, this);
        };

        _proto.show = function show(time) {
          this.node.active = true;
          this.textNumber.string = "" + time;
        };

        _proto.startCountDown = function startCountDown(time, callback) {
          var _this2 = this;

          if (time === void 0) {
            time = 10;
          }

          if (time < 1) throw new Error("Can not count down less than 1s");
          this.node.active = true;
          this.count = Math.floor(time);
          this.textNumber.string = "" + this.count;
          this.tweenCount && this.tweenCount.stop();
          this.tweenCount = tween(this.node).delay(1).call(function () {
            _this2.count--;
            _this2.textNumber.string = "" + _this2.count;
          }).union().repeat(this.count).call(function () {
            callback && callback();
            _this2.tweenCount = null;
          }).start();
        };

        _proto.stopCountDown = function stopCountDown() {
          this.tweenCount && this.tweenCount.stop();
          this.tweenCount = null;
        };

        _proto.hide = function hide() {
          this.node.active = false;
        };

        return CountDown;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "textNumber", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/crypto-core.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "28fa8SvM8xEGLnNgEyetyJC", "crypto-core", undefined);
      /* eslint-disable no-prototype-builtins */

      /* globals , globalThis*/

      /**
       * CryptoJS core components.
       */
      // eslint-disable-next-line no-shadow-restricted-names


      var CryptoJS = exports('default', function (Math, undefined$1) {
        // if (typeof window !== 'undefined' && window.crypto) {
        //     crypto = window.crypto;
        // }
        // // Native crypto in web worker (Browser)
        // if (typeof self !== 'undefined' && self.crypto) {
        //     crypto = self.crypto;
        // }
        // // Native crypto from worker
        // if (typeof globalThis !== 'undefined' && globalThis.crypto) {
        //     crypto = globalThis.crypto;
        // }
        // // Native (experimental IE 11) crypto from window (Browser)
        // if (!crypto && typeof window !== 'undefined' && window.msCrypto) {
        //     crypto = window.msCrypto;
        // }
        // // Native crypto from global (NodeJS)
        // if (!crypto && typeof global !== 'undefined' && global.crypto) {
        //     crypto = global.crypto;
        // }
        // // Native crypto import via require (NodeJS)
        // if (!crypto && typeof require === 'function') {
        //     try {
        //         crypto = require('crypto');
        //     } catch (err) {
        //         //
        //     }
        // }

        /*
         * Cryptographically secure pseudorandom number generator
         *
         * As Math.random() is cryptographically not safe to use
         */
        var cryptoSecureRandomInt = function cryptoSecureRandomInt() {
          throw new Error('Native crypto module could not be used to get secure random number.');
        };
        /*
         * Local polyfill of Object.create
          */


        var create = Object.create || function () {
          function F() {}

          return function (obj) {
            var subtype;
            F.prototype = obj;
            subtype = new F();
            F.prototype = null;
            return subtype;
          };
        }();
        /**
         * CryptoJS namespace.
         */


        var C = {};
        /**
         * Library namespace.
         */

        var C_lib = C.lib = {};
        /**
         * Base object for prototypal inheritance.
         */

        var Base = C_lib.Base = function () {
          return {
            /**
             * Creates a new object that inherits from this object.
             *
             * @param {Object} overrides Properties to copy into the new object.
             *
             * @return {Object} The new object.
             *
             * @static
             *
             * @example
             *
             *     var MyType = CryptoJS.lib.Base.extend({
             *         field: 'value',
             *
             *         method: function () {
             *         }
             *     });
             */
            extend: function extend(overrides) {
              // Spawn
              var subtype = create(this); // Augment

              if (overrides) {
                subtype.mixIn(overrides);
              } // Create default initializer
              // eslint-disable-next-line no-prototype-builtins


              if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {
                subtype.init = function () {
                  subtype.$super.init.apply(this, arguments);
                };
              } // Initializer's prototype is the subtype object


              subtype.init.prototype = subtype; // Reference supertype

              subtype.$super = this;
              return subtype;
            },

            /**
             * Extends this object and runs the init method.
             * Arguments to create() will be passed to init().
             *
             * @return {Object} The new object.
             *
             * @static
             *
             * @example
             *
             *     var instance = MyType.create();
             */
            create: function create() {
              var instance = this.extend();
              instance.init.apply(instance, arguments);
              return instance;
            },

            /**
             * Initializes a newly created object.
             * Override this method to add some logic when your objects are created.
             *
             * @example
             *
             *     var MyType = CryptoJS.lib.Base.extend({
             *         init: function () {
             *             // ...
             *         }
             *     });
             */
            init: function init() {},

            /**
             * Copies properties into this object.
             *
             * @param {Object} properties The properties to mix in.
             *
             * @example
             *
             *     MyType.mixIn({
             *         field: 'value'
             *     });
             */
            mixIn: function mixIn(properties) {
              for (var propertyName in properties) {
                if (properties.hasOwnProperty(propertyName)) {
                  this[propertyName] = properties[propertyName];
                }
              } // IE won't copy toString using the loop above


              if (properties.hasOwnProperty('toString')) {
                this.toString = properties.toString;
              }
            },

            /**
             * Creates a copy of this object.
             *
             * @return {Object} The clone.
             *
             * @example
             *
             *     var clone = instance.clone();
             */
            clone: function clone() {
              return this.init.prototype.extend(this);
            }
          };
        }();
        /**
         * An array of 32-bit words.
         *
         * @property {Array} words The array of 32-bit words.
         * @property {number} sigBytes The number of significant bytes in this word array.
         */


        var WordArray = C_lib.WordArray = Base.extend({
          /**
           * Initializes a newly created word array.
           *
           * @param {Array} words (Optional) An array of 32-bit words.
           * @param {number} sigBytes (Optional) The number of significant bytes in the words.
           *
           * @example
           *
           *     var wordArray = CryptoJS.lib.WordArray.create();
           *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
           *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
           */
          init: function init(words, sigBytes) {
            words = this.words = words || [];

            if (sigBytes != undefined$1) {
              this.sigBytes = sigBytes;
            } else {
              this.sigBytes = words.length * 4;
            }
          },

          /**
           * Converts this word array to a string.
           *
           * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
           *
           * @return {string} The stringified word array.
           *
           * @example
           *
           *     var string = wordArray + '';
           *     var string = wordArray.toString();
           *     var string = wordArray.toString(CryptoJS.enc.Utf8);
           */
          toString: function toString(encoder) {
            return (encoder || Hex).stringify(this);
          },

          /**
           * Concatenates a word array to this word array.
           *
           * @param {WordArray} wordArray The word array to append.
           *
           * @return {WordArray} This word array.
           *
           * @example
           *
           *     wordArray1.concat(wordArray2);
           */
          concat: function concat(wordArray) {
            // Shortcuts
            var thisWords = this.words;
            var thatWords = wordArray.words;
            var thisSigBytes = this.sigBytes;
            var thatSigBytes = wordArray.sigBytes; // Clamp excess bits

            this.clamp(); // Concat

            if (thisSigBytes % 4) {
              // Copy one byte at a time
              for (var i = 0; i < thatSigBytes; i++) {
                var thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
                thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;
              }
            } else {
              // Copy one word at a time
              for (var j = 0; j < thatSigBytes; j += 4) {
                thisWords[thisSigBytes + j >>> 2] = thatWords[j >>> 2];
              }
            }

            this.sigBytes += thatSigBytes; // Chainable

            return this;
          },

          /**
           * Removes insignificant bits.
           *
           * @example
           *
           *     wordArray.clamp();
           */
          clamp: function clamp() {
            // Shortcuts
            var words = this.words;
            var sigBytes = this.sigBytes; // Clamp

            words[sigBytes >>> 2] &= 0xffffffff << 32 - sigBytes % 4 * 8;
            words.length = Math.ceil(sigBytes / 4);
          },

          /**
           * Creates a copy of this word array.
           *
           * @return {WordArray} The clone.
           *
           * @example
           *
           *     var clone = wordArray.clone();
           */
          clone: function clone() {
            var clone = Base.clone.call(this);
            clone.words = this.words.slice(0);
            return clone;
          },

          /**
           * Creates a word array filled with random bytes.
           *
           * @param {number} nBytes The number of random bytes to generate.
           *
           * @return {WordArray} The random word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.lib.WordArray.random(16);
           */
          random: function random(nBytes) {
            var words = [];

            for (var i = 0; i < nBytes; i += 4) {
              words.push(cryptoSecureRandomInt());
            }

            return new WordArray.init(words, nBytes);
          }
        });
        /**
         * Encoder namespace.
         */

        var C_enc = C.enc = {};
        /**
         * Hex encoding strategy.
         */

        var Hex = C_enc.Hex = {
          /**
           * Converts a word array to a hex string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The hex string.
           *
           * @static
           *
           * @example
           *
           *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
           */
          stringify: function stringify(wordArray) {
            // Shortcuts
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes; // Convert

            var hexChars = [];

            for (var i = 0; i < sigBytes; i++) {
              var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
              hexChars.push((bite >>> 4).toString(16));
              hexChars.push((bite & 0x0f).toString(16));
            }

            return hexChars.join('');
          },

          /**
           * Converts a hex string to a word array.
           *
           * @param {string} hexStr The hex string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
           */
          parse: function parse(hexStr) {
            // Shortcut
            var hexStrLength = hexStr.length; // Convert

            var words = [];

            for (var i = 0; i < hexStrLength; i += 2) {
              words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << 24 - i % 8 * 4;
            }

            return new WordArray.init(words, hexStrLength / 2);
          }
        };
        /**
         * Latin1 encoding strategy.
         */

        var Latin1 = C_enc.Latin1 = {
          /**
           * Converts a word array to a Latin1 string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The Latin1 string.
           *
           * @static
           *
           * @example
           *
           *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
           */
          stringify: function stringify(wordArray) {
            // Shortcuts
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes; // Convert

            var latin1Chars = [];

            for (var i = 0; i < sigBytes; i++) {
              var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
              latin1Chars.push(String.fromCharCode(bite));
            }

            return latin1Chars.join('');
          },

          /**
           * Converts a Latin1 string to a word array.
           *
           * @param {string} latin1Str The Latin1 string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
           */
          parse: function parse(latin1Str) {
            // Shortcut
            var latin1StrLength = latin1Str.length; // Convert

            var words = [];

            for (var i = 0; i < latin1StrLength; i++) {
              words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << 24 - i % 4 * 8;
            }

            return new WordArray.init(words, latin1StrLength);
          }
        };
        /**
         * UTF-8 encoding strategy.
         */

        var Utf8 = C_enc.Utf8 = {
          /**
           * Converts a word array to a UTF-8 string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The UTF-8 string.
           *
           * @static
           *
           * @example
           *
           *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
           */
          stringify: function stringify(wordArray) {
            try {
              return decodeURIComponent(escape(Latin1.stringify(wordArray)));
            } catch (e) {
              throw new Error('Malformed UTF-8 data');
            }
          },

          /**
           * Converts a UTF-8 string to a word array.
           *
           * @param {string} utf8Str The UTF-8 string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
           */
          parse: function parse(utf8Str) {
            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
          }
        };
        /**
         * Abstract buffered block algorithm template.
         *
         * The property blockSize must be implemented in a concrete subtype.
         *
         * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
         */

        var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
          /**
           * Resets this block algorithm's data buffer to its initial state.
           *
           * @example
           *
           *     bufferedBlockAlgorithm.reset();
           */
          reset: function reset() {
            // Initial values
            this._data = new WordArray.init();
            this._nDataBytes = 0;
          },

          /**
           * Adds new data to this block algorithm's buffer.
           *
           * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
           *
           * @example
           *
           *     bufferedBlockAlgorithm._append('data');
           *     bufferedBlockAlgorithm._append(wordArray);
           */
          _append: function _append(data) {
            // Convert string to WordArray, else assume WordArray already
            if (typeof data == 'string') {
              data = Utf8.parse(data);
            } // Append


            this._data.concat(data);

            this._nDataBytes += data.sigBytes;
          },

          /**
           * Processes available data blocks.
           *
           * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
           *
           * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
           *
           * @return {WordArray} The processed data.
           *
           * @example
           *
           *     var processedData = bufferedBlockAlgorithm._process();
           *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
           */
          _process: function _process(doFlush) {
            var processedWords; // Shortcuts

            var data = this._data;
            var dataWords = data.words;
            var dataSigBytes = data.sigBytes;
            var blockSize = this.blockSize;
            var blockSizeBytes = blockSize * 4; // Count blocks ready

            var nBlocksReady = dataSigBytes / blockSizeBytes;

            if (doFlush) {
              // Round up to include partial blocks
              nBlocksReady = Math.ceil(nBlocksReady);
            } else {
              // Round down to include only full blocks,
              // less the number of blocks that must remain in the buffer
              nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
            } // Count words ready


            var nWordsReady = nBlocksReady * blockSize; // Count bytes ready

            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes); // Process blocks

            if (nWordsReady) {
              for (var offset = 0; offset < nWordsReady; offset += blockSize) {
                // Perform concrete-algorithm logic
                this._doProcessBlock(dataWords, offset);
              } // Remove processed words


              processedWords = dataWords.splice(0, nWordsReady);
              data.sigBytes -= nBytesReady;
            } // Return processed words


            return new WordArray.init(processedWords, nBytesReady);
          },

          /**
           * Creates a copy of this object.
           *
           * @return {Object} The clone.
           *
           * @example
           *
           *     var clone = bufferedBlockAlgorithm.clone();
           */
          clone: function clone() {
            var clone = Base.clone.call(this);
            clone._data = this._data.clone();
            return clone;
          },
          _minBufferSize: 0
        });
        /**
         * Abstract hasher template.
         *
         * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
         */

        C_lib.Hasher = BufferedBlockAlgorithm.extend({
          // eslint-disable-line @typescript-eslint/no-unused-vars

          /**
           * Configuration options.
           */
          cfg: Base.extend(null),

          /**
           * Initializes a newly created hasher.
           *
           * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
           *
           * @example
           *
           *     var hasher = CryptoJS.algo.SHA256.create();
           */
          init: function init(cfg) {
            // Apply config defaults
            this.cfg = this.cfg.extend(cfg); // Set initial values

            this.reset();
          },

          /**
           * Resets this hasher to its initial state.
           *
           * @example
           *
           *     hasher.reset();
           */
          reset: function reset() {
            // Reset data buffer
            BufferedBlockAlgorithm.reset.call(this); // Perform concrete-hasher logic

            this._doReset();
          },

          /**
           * Updates this hasher with a message.
           *
           * @param {WordArray|string} messageUpdate The message to append.
           *
           * @return {Hasher} This hasher.
           *
           * @example
           *
           *     hasher.update('message');
           *     hasher.update(wordArray);
           */
          update: function update(messageUpdate) {
            // Append
            this._append(messageUpdate); // Update the hash


            this._process(); // Chainable


            return this;
          },

          /**
           * Finalizes the hash computation.
           * Note that the finalize operation is effectively a destructive, read-once operation.
           *
           * @param {WordArray|string} messageUpdate (Optional) A final message update.
           *
           * @return {WordArray} The hash.
           *
           * @example
           *
           *     var hash = hasher.finalize();
           *     var hash = hasher.finalize('message');
           *     var hash = hasher.finalize(wordArray);
           */
          finalize: function finalize(messageUpdate) {
            // Final message update
            if (messageUpdate) {
              this._append(messageUpdate);
            } // Perform concrete-hasher logic


            var hash = this._doFinalize();

            return hash;
          },
          blockSize: 512 / 32,

          /**
           * Creates a shortcut function to a hasher's object interface.
           *
           * @param {Hasher} hasher The hasher to create a helper for.
           *
           * @return {Function} The shortcut function.
           *
           * @static
           *
           * @example
           *
           *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
           */
          _createHelper: function _createHelper(hasher) {
            return function (message, cfg) {
              return new hasher.init(cfg).finalize(message);
            };
          },

          /**
           * Creates a shortcut function to the HMAC's object interface.
           *
           * @param {Hasher} hasher The hasher to use in this HMAC helper.
           *
           * @return {Function} The shortcut function.
           *
           * @static
           *
           * @example
           *
           *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
           */
          _createHmacHelper: function _createHmacHelper(hasher) {
            return function (message, key) {
              return new C_algo.HMAC.init(hasher, key).finalize(message);
            };
          }
        });
        /**
         * Algorithm namespace.
         */

        var C_algo = C.algo = {};
        return C;
      }(Math));
      /**
       * Cipher core components.
       */
      // eslint-disable-next-line no-shadow-restricted-names

      CryptoJS.lib.Cipher || function () {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
        var C_enc = C.enc; // var Utf8 = C_enc.Utf8;  // eslint-disable-line @typescript-eslint/no-unused-vars

        var Base64 = C_enc.Base64;
        var C_algo = C.algo;
        var EvpKDF = C_algo.EvpKDF;
        /**
         * Abstract base cipher template.
         *
         * @property {number} keySize This cipher's key size. Default: 4 (128 bits)
         * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)
         * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.
         * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.
         */

        var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
          /**
           * Configuration options.
           *
           * @property {WordArray} iv The IV to use for this operation.
           */
          cfg: Base.extend(),

          /**
           * Creates this cipher in encryption mode.
           *
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {Cipher} A cipher instance.
           *
           * @static
           *
           * @example
           *
           *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });
           */
          createEncryptor: function createEncryptor(key, cfg) {
            return this.create(this._ENC_XFORM_MODE, key, cfg);
          },

          /**
           * Creates this cipher in decryption mode.
           *
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {Cipher} A cipher instance.
           *
           * @static
           *
           * @example
           *
           *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });
           */
          createDecryptor: function createDecryptor(key, cfg) {
            return this.create(this._DEC_XFORM_MODE, key, cfg);
          },

          /**
           * Initializes a newly created cipher.
           *
           * @param {number} xformMode Either the encryption or decryption transormation mode constant.
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @example
           *
           *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
           */
          init: function init(xformMode, key, cfg) {
            // Apply config defaults
            this.cfg = this.cfg.extend(cfg); // Store transform mode and key

            this._xformMode = xformMode;
            this._key = key; // Set initial values

            this.reset();
          },

          /**
           * Resets this cipher to its initial state.
           *
           * @example
           *
           *     cipher.reset();
           */
          reset: function reset() {
            // Reset data buffer
            BufferedBlockAlgorithm.reset.call(this); // Perform concrete-cipher logic

            this._doReset();
          },

          /**
           * Adds data to be encrypted or decrypted.
           *
           * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.
           *
           * @return {WordArray} The data after processing.
           *
           * @example
           *
           *     var encrypted = cipher.process('data');
           *     var encrypted = cipher.process(wordArray);
           */
          process: function process(dataUpdate) {
            // Append
            this._append(dataUpdate); // Process available blocks


            return this._process();
          },

          /**
           * Finalizes the encryption or decryption process.
           * Note that the finalize operation is effectively a destructive, read-once operation.
           *
           * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.
           *
           * @return {WordArray} The data after final processing.
           *
           * @example
           *
           *     var encrypted = cipher.finalize();
           *     var encrypted = cipher.finalize('data');
           *     var encrypted = cipher.finalize(wordArray);
           */
          finalize: function finalize(dataUpdate) {
            // Final data update
            if (dataUpdate) {
              this._append(dataUpdate);
            } // Perform concrete-cipher logic


            var finalProcessedData = this._doFinalize();

            return finalProcessedData;
          },
          keySize: 128 / 32,
          ivSize: 128 / 32,
          _ENC_XFORM_MODE: 1,
          _DEC_XFORM_MODE: 2,

          /**
           * Creates shortcut functions to a cipher's object interface.
           *
           * @param {Cipher} cipher The cipher to create a helper for.
           *
           * @return {Object} An object with encrypt and decrypt shortcut functions.
           *
           * @static
           *
           * @example
           *
           *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);
           */
          _createHelper: function () {
            function selectCipherStrategy(key) {
              if (typeof key == 'string') {
                return PasswordBasedCipher;
              } else {
                return SerializableCipher;
              }
            }

            return function (cipher) {
              return {
                encrypt: function encrypt(message, key, cfg) {
                  return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
                },
                decrypt: function decrypt(ciphertext, key, cfg) {
                  return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
                }
              };
            };
          }()
        });
        /**
         * Abstract base stream cipher template.
         *
         * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)
         */

        C_lib.StreamCipher = Cipher.extend({
          // eslint-disable-line @typescript-eslint/no-unused-vars
          _doFinalize: function _doFinalize() {
            // Process partial blocks
            var finalProcessedBlocks = this._process(!!'flush');

            return finalProcessedBlocks;
          },
          blockSize: 1
        });
        /**
         * Mode namespace.
         */

        var C_mode = C.mode = {};
        /**
         * Abstract base block cipher mode template.
         */

        var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
          /**
           * Creates this mode for encryption.
           *
           * @param {Cipher} cipher A block cipher instance.
           * @param {Array} iv The IV words.
           *
           * @static
           *
           * @example
           *
           *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);
           */
          createEncryptor: function createEncryptor(cipher, iv) {
            return this.Encryptor.create(cipher, iv);
          },

          /**
           * Creates this mode for decryption.
           *
           * @param {Cipher} cipher A block cipher instance.
           * @param {Array} iv The IV words.
           *
           * @static
           *
           * @example
           *
           *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);
           */
          createDecryptor: function createDecryptor(cipher, iv) {
            return this.Decryptor.create(cipher, iv);
          },

          /**
           * Initializes a newly created mode.
           *
           * @param {Cipher} cipher A block cipher instance.
           * @param {Array} iv The IV words.
           *
           * @example
           *
           *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);
           */
          init: function init(cipher, iv) {
            this._cipher = cipher;
            this._iv = iv;
          }
        });
        /**
         * Cipher Block Chaining mode.
         */

        var CBC = C_mode.CBC = function () {
          /**
           * Abstract base CBC mode.
           */
          var CBC = BlockCipherMode.extend();
          /**
           * CBC encryptor.
           */

          CBC.Encryptor = CBC.extend({
            /**
             * Processes the data block at offset.
             *
             * @param {Array} words The data words to operate on.
             * @param {number} offset The offset where the block starts.
             *
             * @example
             *
             *     mode.processBlock(data.words, offset);
             */
            processBlock: function processBlock(words, offset) {
              // Shortcuts
              var cipher = this._cipher;
              var blockSize = cipher.blockSize; // XOR and encrypt

              xorBlock.call(this, words, offset, blockSize);
              cipher.encryptBlock(words, offset); // Remember this block to use with next block

              this._prevBlock = words.slice(offset, offset + blockSize);
            }
          });
          /**
           * CBC decryptor.
           */

          CBC.Decryptor = CBC.extend({
            /**
             * Processes the data block at offset.
             *
             * @param {Array} words The data words to operate on.
             * @param {number} offset The offset where the block starts.
             *
             * @example
             *
             *     mode.processBlock(data.words, offset);
             */
            processBlock: function processBlock(words, offset) {
              // Shortcuts
              var cipher = this._cipher;
              var blockSize = cipher.blockSize; // Remember this block to use with next block

              var thisBlock = words.slice(offset, offset + blockSize); // Decrypt and XOR

              cipher.decryptBlock(words, offset);
              xorBlock.call(this, words, offset, blockSize); // This block becomes the previous block

              this._prevBlock = thisBlock;
            }
          });

          function xorBlock(words, offset, blockSize) {
            var block; // Shortcut

            var iv = this._iv; // Choose mixing block

            if (iv) {
              block = iv; // Remove IV for subsequent blocks

              this._iv = undefined;
            } else {
              block = this._prevBlock;
            } // XOR blocks


            for (var i = 0; i < blockSize; i++) {
              words[offset + i] ^= block[i];
            }
          }

          return CBC;
        }();
        /**
         * Padding namespace.
         */


        var C_pad = C.pad = {};
        /**
         * PKCS #5/7 padding strategy.
         */

        var Pkcs7 = C_pad.Pkcs7 = {
          /**
           * Pads data using the algorithm defined in PKCS #5/7.
           *
           * @param {WordArray} data The data to pad.
           * @param {number} blockSize The multiple that the data should be padded to.
           *
           * @static
           *
           * @example
           *
           *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);
           */
          pad: function pad(data, blockSize) {
            // Shortcut
            var blockSizeBytes = blockSize * 4; // Count padding bytes

            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes; // Create padding word

            var paddingWord = nPaddingBytes << 24 | nPaddingBytes << 16 | nPaddingBytes << 8 | nPaddingBytes; // Create padding

            var paddingWords = [];

            for (var i = 0; i < nPaddingBytes; i += 4) {
              paddingWords.push(paddingWord);
            }

            var padding = WordArray.create(paddingWords, nPaddingBytes); // Add padding

            data.concat(padding);
          },

          /**
           * Unpads data that had been padded using the algorithm defined in PKCS #5/7.
           *
           * @param {WordArray} data The data to unpad.
           *
           * @static
           *
           * @example
           *
           *     CryptoJS.pad.Pkcs7.unpad(wordArray);
           */
          unpad: function unpad(data) {
            // Get number of padding bytes from last byte
            var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 0xff; // Remove padding

            data.sigBytes -= nPaddingBytes;
          }
        };
        /**
         * Abstract base block cipher template.
         *
         * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)
         */

        C_lib.BlockCipher = Cipher.extend({
          // eslint-disable-line @typescript-eslint/no-unused-vars

          /**
           * Configuration options.
           *
           * @property {Mode} mode The block mode to use. Default: CBC
           * @property {Padding} padding The padding strategy to use. Default: Pkcs7
           */
          cfg: Cipher.cfg.extend({
            mode: CBC,
            padding: Pkcs7
          }),
          reset: function reset() {
            var modeCreator; // Reset cipher

            Cipher.reset.call(this); // Shortcuts

            var cfg = this.cfg;
            var iv = cfg.iv;
            var mode = cfg.mode; // Reset block mode

            if (this._xformMode == this._ENC_XFORM_MODE) {
              modeCreator = mode.createEncryptor;
            } else
              /* if (this._xformMode == this._DEC_XFORM_MODE) */
              {
                modeCreator = mode.createDecryptor; // Keep at least one block in the buffer for unpadding

                this._minBufferSize = 1;
              }

            if (this._mode && this._mode.__creator == modeCreator) {
              this._mode.init(this, iv && iv.words);
            } else {
              this._mode = modeCreator.call(mode, this, iv && iv.words);
              this._mode.__creator = modeCreator;
            }
          },
          _doProcessBlock: function _doProcessBlock(words, offset) {
            this._mode.processBlock(words, offset);
          },
          _doFinalize: function _doFinalize() {
            var finalProcessedBlocks; // Shortcut

            var padding = this.cfg.padding; // Finalize

            if (this._xformMode == this._ENC_XFORM_MODE) {
              // Pad data
              padding.pad(this._data, this.blockSize); // Process final blocks

              finalProcessedBlocks = this._process(!!'flush');
            } else
              /* if (this._xformMode == this._DEC_XFORM_MODE) */
              {
                // Process final blocks
                finalProcessedBlocks = this._process(!!'flush'); // Unpad data

                padding.unpad(finalProcessedBlocks);
              }

            return finalProcessedBlocks;
          },
          blockSize: 128 / 32
        });
        /**
         * A collection of cipher parameters.
         *
         * @property {WordArray} ciphertext The raw ciphertext.
         * @property {WordArray} key The key to this ciphertext.
         * @property {WordArray} iv The IV used in the ciphering operation.
         * @property {WordArray} salt The salt used with a key derivation function.
         * @property {Cipher} algorithm The cipher algorithm.
         * @property {Mode} mode The block mode used in the ciphering operation.
         * @property {Padding} padding The padding scheme used in the ciphering operation.
         * @property {number} blockSize The block size of the cipher.
         * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.
         */

        var CipherParams = C_lib.CipherParams = Base.extend({
          /**
           * Initializes a newly created cipher params object.
           *
           * @param {Object} cipherParams An object with any of the possible cipher parameters.
           *
           * @example
           *
           *     var cipherParams = CryptoJS.lib.CipherParams.create({
           *         ciphertext: ciphertextWordArray,
           *         key: keyWordArray,
           *         iv: ivWordArray,
           *         salt: saltWordArray,
           *         algorithm: CryptoJS.algo.AES,
           *         mode: CryptoJS.mode.CBC,
           *         padding: CryptoJS.pad.PKCS7,
           *         blockSize: 4,
           *         formatter: CryptoJS.format.OpenSSL
           *     });
           */
          init: function init(cipherParams) {
            this.mixIn(cipherParams);
          },

          /**
           * Converts this cipher params object to a string.
           *
           * @param {Format} formatter (Optional) The formatting strategy to use.
           *
           * @return {string} The stringified cipher params.
           *
           * @throws Error If neither the formatter nor the default formatter is set.
           *
           * @example
           *
           *     var string = cipherParams + '';
           *     var string = cipherParams.toString();
           *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);
           */
          toString: function toString(formatter) {
            return (formatter || this.formatter).stringify(this);
          }
        });
        /**
         * Format namespace.
         */

        var C_format = C.format = {};
        /**
         * OpenSSL formatting strategy.
         */

        var OpenSSLFormatter = C_format.OpenSSL = {
          /**
           * Converts a cipher params object to an OpenSSL-compatible string.
           *
           * @param {CipherParams} cipherParams The cipher params object.
           *
           * @return {string} The OpenSSL-compatible string.
           *
           * @static
           *
           * @example
           *
           *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);
           */
          stringify: function stringify(cipherParams) {
            var wordArray; // Shortcuts

            var ciphertext = cipherParams.ciphertext;
            var salt = cipherParams.salt; // Format

            if (salt) {
              wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);
            } else {
              wordArray = ciphertext;
            }

            return wordArray.toString(Base64);
          },

          /**
           * Converts an OpenSSL-compatible string to a cipher params object.
           *
           * @param {string} openSSLStr The OpenSSL-compatible string.
           *
           * @return {CipherParams} The cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);
           */
          parse: function parse(openSSLStr) {
            var salt; // Parse base64

            var ciphertext = Base64.parse(openSSLStr); // Shortcut

            var ciphertextWords = ciphertext.words; // Test for salt

            if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {
              // Extract salt
              salt = WordArray.create(ciphertextWords.slice(2, 4)); // Remove salt from ciphertext

              ciphertextWords.splice(0, 4);
              ciphertext.sigBytes -= 16;
            }

            return CipherParams.create({
              ciphertext: ciphertext,
              salt: salt
            });
          }
        };
        /**
         * A cipher wrapper that returns ciphertext as a serializable cipher params object.
         */

        var SerializableCipher = C_lib.SerializableCipher = Base.extend({
          /**
           * Configuration options.
           *
           * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
           */
          cfg: Base.extend({
            format: OpenSSLFormatter
          }),

          /**
           * Encrypts a message.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {WordArray|string} message The message to encrypt.
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {CipherParams} A cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
           */
          encrypt: function encrypt(cipher, message, key, cfg) {
            // Apply config defaults
            cfg = this.cfg.extend(cfg); // Encrypt

            var encryptor = cipher.createEncryptor(key, cfg);
            var ciphertext = encryptor.finalize(message); // Shortcut

            var cipherCfg = encryptor.cfg; // Create and return serializable cipher params

            return CipherParams.create({
              ciphertext: ciphertext,
              key: key,
              iv: cipherCfg.iv,
              algorithm: cipher,
              mode: cipherCfg.mode,
              padding: cipherCfg.padding,
              blockSize: cipher.blockSize,
              formatter: cfg.format
            });
          },

          /**
           * Decrypts serialized ciphertext.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {WordArray} The plaintext.
           *
           * @static
           *
           * @example
           *
           *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
           *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
           */
          decrypt: function decrypt(cipher, ciphertext, key, cfg) {
            // Apply config defaults
            cfg = this.cfg.extend(cfg); // Convert string to CipherParams

            ciphertext = this._parse(ciphertext, cfg.format); // Decrypt

            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);
            return plaintext;
          },

          /**
           * Converts serialized ciphertext to CipherParams,
           * else assumed CipherParams already and returns ciphertext unchanged.
           *
           * @param {CipherParams|string} ciphertext The ciphertext.
           * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.
           *
           * @return {CipherParams} The unserialized ciphertext.
           *
           * @static
           *
           * @example
           *
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);
           */
          _parse: function _parse(ciphertext, format) {
            if (typeof ciphertext == 'string') {
              return format.parse(ciphertext, this);
            } else {
              return ciphertext;
            }
          }
        });
        /**
         * Key derivation function namespace.
         */

        var C_kdf = C.kdf = {};
        /**
         * OpenSSL key derivation function.
         */

        var OpenSSLKdf = C_kdf.OpenSSL = {
          /**
           * Derives a key and IV from a password.
           *
           * @param {string} password The password to derive from.
           * @param {number} keySize The size in words of the key to generate.
           * @param {number} ivSize The size in words of the IV to generate.
           * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
           *
           * @return {CipherParams} A cipher params object with the key, IV, and salt.
           *
           * @static
           *
           * @example
           *
           *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);
           *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');
           */
          execute: function execute(password, keySize, ivSize, salt) {
            // Generate random salt
            if (!salt) {
              salt = WordArray.random(64 / 8);
            } // Derive key and IV


            var key = EvpKDF.create({
              keySize: keySize + ivSize
            }).compute(password, salt); // Separate key and IV

            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
            key.sigBytes = keySize * 4; // Return params

            return CipherParams.create({
              key: key,
              iv: iv,
              salt: salt
            });
          }
        };
        /**
         * A serializable cipher wrapper that derives the key from a password,
         * and returns ciphertext as a serializable cipher params object.
         */

        var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
          /**
           * Configuration options.
           *
           * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
           */
          cfg: SerializableCipher.cfg.extend({
            kdf: OpenSSLKdf
          }),

          /**
           * Encrypts a message using a password.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {WordArray|string} message The message to encrypt.
           * @param {string} password The password.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {CipherParams} A cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
           *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
           */
          encrypt: function encrypt(cipher, message, password, cfg) {
            // Apply config defaults
            cfg = this.cfg.extend(cfg); // Derive key and other params

            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize); // Add IV to config

            cfg.iv = derivedParams.iv; // Encrypt

            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg); // Mix in derived params

            ciphertext.mixIn(derivedParams);
            return ciphertext;
          },

          /**
           * Decrypts serialized ciphertext using a password.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
           * @param {string} password The password.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {WordArray} The plaintext.
           *
           * @static
           *
           * @example
           *
           *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
           *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
           */
          decrypt: function decrypt(cipher, ciphertext, password, cfg) {
            // Apply config defaults
            cfg = this.cfg.extend(cfg); // Convert string to CipherParams

            ciphertext = this._parse(ciphertext, cfg.format); // Derive key and other params

            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt); // Add IV to config

            cfg.iv = derivedParams.iv; // Decrypt

            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);
            return plaintext;
          }
        });
      }();

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CustomCanvasSize.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './loadConfigAsync.ts', './gameCommonUtils.ts', './CanvasScaleByOrientation.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, CCInteger, view, ResolutionPolicy, sys, Component, loadConfigAsync, gameCommonUtils, CanvasScaleByOrientation;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCInteger = module.CCInteger;
      view = module.view;
      ResolutionPolicy = module.ResolutionPolicy;
      sys = module.sys;
      Component = module.Component;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      gameCommonUtils = module.default;
    }, function (module) {
      CanvasScaleByOrientation = module.CanvasScaleByOrientation;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "765a98ou0RK46VyyIsLn7md", "CustomCanvasSize", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var CustomCanvasSize = exports('CustomCanvasSize', (_dec = ccclass('CustomCanvasSize'), _dec2 = property(CCInteger), _dec3 = property(CCInteger), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(CustomCanvasSize, _Component);

        function CustomCanvasSize() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "customDSWidth", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "customDSHeight", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "isPortrait", _descriptor3, _assertThisInitialized(_this));

          _this._defaultDesignResolution = {};
          _this._defaultResolutionPolicy = null;
          _this._thisOnResized = void 0;
          _this._canvasScaleComp = null;
          return _this;
        }

        var _proto = CustomCanvasSize.prototype;

        _proto.onLoad = function onLoad() {
          var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
              LOGIN_IFRAME = _loadConfigAsync$getC.LOGIN_IFRAME;

          this._canvasScaleComp = this.node.scene.getComponentInChildren(CanvasScaleByOrientation);

          if (!LOGIN_IFRAME) {
            this.updateCustomCanvasSize();
            this.updateWindowOrientation();
            this.scaleCanvasByOrientation(0.1);
          }
        };

        _proto.updateCustomCanvasSize = function updateCustomCanvasSize() {
          var resolutionSize = view.getDesignResolutionSize();
          this._defaultDesignResolution.width = resolutionSize.width;
          this._defaultDesignResolution.height = resolutionSize.height;
          this._defaultResolutionPolicy = view.getResolutionPolicy();

          var _currentResolutionPolicy = this.isPortrait ? ResolutionPolicy.FIXED_HEIGHT : ResolutionPolicy.FIXED_WIDTH;

          view.setDesignResolutionSize(this.customDSWidth, this.customDSHeight, _currentResolutionPolicy);
        };

        _proto.updateWindowOrientation = function updateWindowOrientation() {
          if (!sys.isNative && window && this.isMobile()) {
            var event = new Event("orientationchange");
            window.dispatchEvent(event);
          }
        };

        _proto.scaleCanvasByOrientation = function scaleCanvasByOrientation(delay) {
          var _this2 = this;

          this.scheduleOnce(function () {
            if (_this2._canvasScaleComp) {
              _this2._canvasScaleComp.scaleCanvasByOrientation();
            }
          }, delay);
        };

        _proto.isMobile = function isMobile() {
          var isMobile = navigator.userAgent.match(/(iPad)|(iPhone)|(iPod)|(android)|(webOS)/i) != null;
          return isMobile;
        };

        _proto.onDestroy = function onDestroy() {
          var _loadConfigAsync$getC2 = loadConfigAsync.getConfig(),
              LOGIN_IFRAME = _loadConfigAsync$getC2.LOGIN_IFRAME;

          if (!LOGIN_IFRAME) {
            var gameCanvasSize = gameCommonUtils.gameCanvasSize;

            if (gameCanvasSize && gameCanvasSize.width && gameCanvasSize.height) {
              var width = gameCanvasSize.width,
                  height = gameCanvasSize.height,
                  resolutionPolicy = gameCanvasSize.resolutionPolicy;
              view.setDesignResolutionSize(width, height, resolutionPolicy ? resolutionPolicy : this._defaultResolutionPolicy);
            } else {
              var _this$_defaultDesignR = this._defaultDesignResolution,
                  _width = _this$_defaultDesignR.width,
                  _height = _this$_defaultDesignR.height;
              view.setDesignResolutionSize(_width, _height, this._defaultResolutionPolicy);
            }

            this.updateWindowOrientation();
          }
        };

        return CustomCanvasSize;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "customDSWidth", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1280;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "customDSHeight", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 720;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "isPortrait", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CustomEnum.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, Enum;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Enum = module.Enum;
    }],
    execute: function () {
      exports({
        DialogContent: void 0,
        DialogTitle: void 0,
        DistanceType: void 0,
        EVENT_STATE: void 0,
        HorizontalExpandDirection: void 0,
        IndicatorAngel: void 0,
        NotifyWinEffect: void 0,
        PROMOTION_ERROR: void 0,
        PaylineType: void 0,
        PerformanceLevel: void 0,
        QUEST_DISPLAY: void 0,
        SLOT_SCREEN_MODE: void 0,
        SlotGameMode: void 0,
        SlotSceneType: void 0,
        StateGameMode: void 0,
        TOP_PLAYER_DISPLAY: void 0,
        TutorialCommandType: void 0,
        TutorialTriggerType: void 0,
        VerticalExpandDirection: void 0,
        WalletType: void 0,
        WinEffectLevel: void 0
      });

      cclegacy._RF.push({}, "98561X/zvpHDb4kZud08kR7", "CustomEnum", undefined);

      var PaylineType;

      (function (PaylineType) {
        PaylineType[PaylineType["Traditional"] = 0] = "Traditional";
        PaylineType[PaylineType["AllWaysToWin"] = 1] = "AllWaysToWin";
        PaylineType[PaylineType["Others"] = 9] = "Others";
      })(PaylineType || (PaylineType = exports('PaylineType', {})));

      Enum(PaylineType);
      var SlotGameMode;

      (function (SlotGameMode) {
        SlotGameMode[SlotGameMode["NormalGame"] = 0] = "NormalGame";
        SlotGameMode[SlotGameMode["FreeGame"] = 1] = "FreeGame";
        SlotGameMode[SlotGameMode["BonusGame"] = 2] = "BonusGame";
        SlotGameMode[SlotGameMode["TopUpGame"] = 3] = "TopUpGame";
        SlotGameMode[SlotGameMode["JackpotGame"] = 4] = "JackpotGame";
        SlotGameMode[SlotGameMode["GambleGame"] = 5] = "GambleGame";
        SlotGameMode[SlotGameMode["RespinGame"] = 6] = "RespinGame";
        SlotGameMode[SlotGameMode["Others"] = 9] = "Others";
      })(SlotGameMode || (SlotGameMode = exports('SlotGameMode', {})));

      Enum(SlotGameMode);
      var StateGameMode;

      (function (StateGameMode) {
        StateGameMode[StateGameMode["NormalGame"] = 1] = "NormalGame";
        StateGameMode[StateGameMode["FreeGame"] = 2] = "FreeGame";
        StateGameMode[StateGameMode["FreespinOption"] = 3] = "FreespinOption";
        StateGameMode[StateGameMode["BonusGame"] = 4] = "BonusGame";
        StateGameMode[StateGameMode["RespinGame"] = 5] = "RespinGame";
        StateGameMode[StateGameMode["Others"] = 9] = "Others";
      })(StateGameMode || (StateGameMode = exports('StateGameMode', {})));

      Enum(StateGameMode);
      var SlotSceneType;

      (function (SlotSceneType) {
        SlotSceneType[SlotSceneType["JackpotWin"] = 0] = "JackpotWin";
        SlotSceneType[SlotSceneType["BigWin"] = 1] = "BigWin";
        SlotSceneType[SlotSceneType["FreespinOption"] = 2] = "FreespinOption";
        SlotSceneType[SlotSceneType["Setting"] = 3] = "Setting";
        SlotSceneType[SlotSceneType["JackpotHistory"] = 4] = "JackpotHistory";
        SlotSceneType[SlotSceneType["BetHistory"] = 5] = "BetHistory";
        SlotSceneType[SlotSceneType["GameInfo"] = 6] = "GameInfo";
        SlotSceneType[SlotSceneType["TotalWinPanel"] = 7] = "TotalWinPanel";
        SlotSceneType[SlotSceneType["FreeGameOption"] = 8] = "FreeGameOption";
        SlotSceneType[SlotSceneType["IntroBonusGame"] = 9] = "IntroBonusGame";
        SlotSceneType[SlotSceneType["IntroFreeGame"] = 10] = "IntroFreeGame";
        SlotSceneType[SlotSceneType["IntroNormalGame"] = 11] = "IntroNormalGame";
        SlotSceneType[SlotSceneType["ExtraBetPopup"] = 12] = "ExtraBetPopup";
        SlotSceneType[SlotSceneType["IntroJackpotGame"] = 13] = "IntroJackpotGame";
        SlotSceneType[SlotSceneType["Loading"] = 14] = "Loading";
        SlotSceneType[SlotSceneType["BetLinePanel"] = 15] = "BetLinePanel";
        SlotSceneType[SlotSceneType["TotalWinBonus"] = 16] = "TotalWinBonus";
        SlotSceneType[SlotSceneType["IntroFreeSpinOption"] = 17] = "IntroFreeSpinOption";
        SlotSceneType[SlotSceneType["GameInfoPayable"] = 18] = "GameInfoPayable";
        SlotSceneType[SlotSceneType["IntroFreeResume"] = 19] = "IntroFreeResume";
        SlotSceneType[SlotSceneType["Other"] = 99] = "Other";
      })(SlotSceneType || (SlotSceneType = exports('SlotSceneType', {})));

      Enum(SlotSceneType);
      var DistanceType;

      (function (DistanceType) {
        DistanceType[DistanceType["Near"] = 0] = "Near";
        DistanceType[DistanceType["Middle"] = 1] = "Middle";
        DistanceType[DistanceType["Far"] = 2] = "Far";
        DistanceType[DistanceType["VeryFar"] = 3] = "VeryFar";
      })(DistanceType || (DistanceType = exports('DistanceType', {})));

      Enum(DistanceType);
      var IndicatorAngel;

      (function (IndicatorAngel) {
        IndicatorAngel[IndicatorAngel["top"] = 180] = "top";
        IndicatorAngel[IndicatorAngel["left"] = -90] = "left";
        IndicatorAngel[IndicatorAngel["right"] = 90] = "right";
      })(IndicatorAngel || (IndicatorAngel = exports('IndicatorAngel', {})));

      Enum(IndicatorAngel);
      var TutorialCommandType;

      (function (TutorialCommandType) {
        TutorialCommandType[TutorialCommandType["EnableButton"] = 0] = "EnableButton";
        TutorialCommandType[TutorialCommandType["DisableButton"] = 1] = "DisableButton";
        TutorialCommandType[TutorialCommandType["HighlightObject"] = 2] = "HighlightObject";
        TutorialCommandType[TutorialCommandType["RevertHighlightObject"] = 3] = "RevertHighlightObject";
        TutorialCommandType[TutorialCommandType["SetPosition"] = 4] = "SetPosition";
        TutorialCommandType[TutorialCommandType["SetRotation"] = 5] = "SetRotation";
        TutorialCommandType[TutorialCommandType["SetScale"] = 6] = "SetScale";
        TutorialCommandType[TutorialCommandType["SetContentSize"] = 7] = "SetContentSize";
        TutorialCommandType[TutorialCommandType["SetOpacity"] = 8] = "SetOpacity";
        TutorialCommandType[TutorialCommandType["ShowObject"] = 9] = "ShowObject";
        TutorialCommandType[TutorialCommandType["HideObject"] = 10] = "HideObject";
        TutorialCommandType[TutorialCommandType["AddFlag"] = 11] = "AddFlag";
        TutorialCommandType[TutorialCommandType["RemoveFlag"] = 12] = "RemoveFlag";
        TutorialCommandType[TutorialCommandType["BlockTouch"] = 14] = "BlockTouch";
        TutorialCommandType[TutorialCommandType["UnBlockTouch"] = 15] = "UnBlockTouch";
        TutorialCommandType[TutorialCommandType["WaitForTrigger"] = 16] = "WaitForTrigger";
        TutorialCommandType[TutorialCommandType["EditDialog"] = 17] = "EditDialog";
        TutorialCommandType[TutorialCommandType["MoveTo"] = 18] = "MoveTo";
        TutorialCommandType[TutorialCommandType["MoveFromTo"] = 19] = "MoveFromTo";
        TutorialCommandType[TutorialCommandType["HighlightSymbol"] = 20] = "HighlightSymbol";
        TutorialCommandType[TutorialCommandType["RevertAllHighlightObject"] = 21] = "RevertAllHighlightObject";
        TutorialCommandType[TutorialCommandType["ResumeCurrentScript"] = 22] = "ResumeCurrentScript";
        TutorialCommandType[TutorialCommandType["HighlightObjectByName"] = 23] = "HighlightObjectByName";
        TutorialCommandType[TutorialCommandType["PauseAction"] = 24] = "PauseAction";
        TutorialCommandType[TutorialCommandType["ResumeActions"] = 25] = "ResumeActions";
        TutorialCommandType[TutorialCommandType["SetSiblingIndex"] = 26] = "SetSiblingIndex";
        TutorialCommandType[TutorialCommandType["Custom"] = 99] = "Custom";
      })(TutorialCommandType || (TutorialCommandType = exports('TutorialCommandType', {})));

      Enum(TutorialCommandType);
      var TutorialTriggerType;

      (function (TutorialTriggerType) {
        TutorialTriggerType[TutorialTriggerType["SpinClicked"] = 0] = "SpinClicked";
        TutorialTriggerType[TutorialTriggerType["ResetSession"] = 1] = "ResetSession";
        TutorialTriggerType[TutorialTriggerType["TutorialClick"] = 2] = "TutorialClick";
        TutorialTriggerType[TutorialTriggerType["TurboClick"] = 3] = "TurboClick";
        TutorialTriggerType[TutorialTriggerType["IncreaseBet"] = 4] = "IncreaseBet";
        TutorialTriggerType[TutorialTriggerType["FinishBonusPayline"] = 5] = "FinishBonusPayline";
        TutorialTriggerType[TutorialTriggerType["FinishScatterPayline"] = 6] = "FinishScatterPayline";
        TutorialTriggerType[TutorialTriggerType["EnterFreeGame"] = 7] = "EnterFreeGame";
        TutorialTriggerType[TutorialTriggerType["EnterBonusGame"] = 8] = "EnterBonusGame";
        TutorialTriggerType[TutorialTriggerType["EnterTopupGame"] = 9] = "EnterTopupGame";
        TutorialTriggerType[TutorialTriggerType["ResumeNormalGame"] = 10] = "ResumeNormalGame";
        TutorialTriggerType[TutorialTriggerType["AutoSpinClicked"] = 11] = "AutoSpinClicked";
        TutorialTriggerType[TutorialTriggerType["SpinStopped"] = 12] = "SpinStopped";
        TutorialTriggerType[TutorialTriggerType["FinishJackpotPayline"] = 14] = "FinishJackpotPayline";
        TutorialTriggerType[TutorialTriggerType["SelectGoldenSymbol"] = 15] = "SelectGoldenSymbol";
        TutorialTriggerType[TutorialTriggerType["IncreaseExtraBet"] = 16] = "IncreaseExtraBet";
        TutorialTriggerType[TutorialTriggerType["AnyAction"] = 17] = "AnyAction";
        TutorialTriggerType[TutorialTriggerType["FreeGameOptionClick"] = 18] = "FreeGameOptionClick";
        TutorialTriggerType[TutorialTriggerType["EnterFreeGameOption"] = 19] = "EnterFreeGameOption";
        TutorialTriggerType[TutorialTriggerType["OnCutsceneClose"] = 20] = "OnCutsceneClose";
        TutorialTriggerType[TutorialTriggerType["AutoSpinPanelShow"] = 21] = "AutoSpinPanelShow";
        TutorialTriggerType[TutorialTriggerType["PauseAction"] = 22] = "PauseAction";
        TutorialTriggerType[TutorialTriggerType["ResumeAction"] = 23] = "ResumeAction";
        TutorialTriggerType[TutorialTriggerType["ExitFreeGame"] = 24] = "ExitFreeGame";
        TutorialTriggerType[TutorialTriggerType["ExitBonusGame"] = 25] = "ExitBonusGame";
        TutorialTriggerType[TutorialTriggerType["ExitTopUpGame"] = 26] = "ExitTopUpGame";
        TutorialTriggerType[TutorialTriggerType["OpenWildPanel"] = 27] = "OpenWildPanel";
        TutorialTriggerType[TutorialTriggerType["SelectWild"] = 28] = "SelectWild";
        TutorialTriggerType[TutorialTriggerType["CloseWildPanel"] = 29] = "CloseWildPanel";
        TutorialTriggerType[TutorialTriggerType["SelectWIldClosed"] = 30] = "SelectWIldClosed";
        TutorialTriggerType[TutorialTriggerType["OpenBetLinePanel"] = 31] = "OpenBetLinePanel";
        TutorialTriggerType[TutorialTriggerType["BetLineAllClick"] = 32] = "BetLineAllClick";
        TutorialTriggerType[TutorialTriggerType["BetLineEventClick"] = 33] = "BetLineEventClick";
        TutorialTriggerType[TutorialTriggerType["CloseBetLinePanel"] = 34] = "CloseBetLinePanel";
        TutorialTriggerType[TutorialTriggerType["ShowPayline"] = 35] = "ShowPayline";
        TutorialTriggerType[TutorialTriggerType["EnterRespinGame"] = 36] = "EnterRespinGame";
        TutorialTriggerType[TutorialTriggerType["BetSelectionPanelShow"] = 37] = "BetSelectionPanelShow";
        TutorialTriggerType[TutorialTriggerType["ConfirmBet"] = 38] = "ConfirmBet";
        TutorialTriggerType[TutorialTriggerType["ButtonClick"] = 39] = "ButtonClick";
        TutorialTriggerType[TutorialTriggerType["OnJackpotCutsceneClose"] = 40] = "OnJackpotCutsceneClose";
        TutorialTriggerType[TutorialTriggerType["Other"] = 99] = "Other";
        TutorialTriggerType[TutorialTriggerType["None"] = 999] = "None";
      })(TutorialTriggerType || (TutorialTriggerType = exports('TutorialTriggerType', {})));

      Enum(TutorialTriggerType);
      var PerformanceLevel;

      (function (PerformanceLevel) {
        PerformanceLevel[PerformanceLevel["High"] = 2] = "High";
        PerformanceLevel[PerformanceLevel["Medium"] = 1] = "Medium";
        PerformanceLevel[PerformanceLevel["Low"] = 0] = "Low";
      })(PerformanceLevel || (PerformanceLevel = exports('PerformanceLevel', {})));

      Enum(PerformanceLevel);
      var WinEffectLevel;

      (function (WinEffectLevel) {
        WinEffectLevel[WinEffectLevel["BIG"] = 0] = "BIG";
        WinEffectLevel[WinEffectLevel["MEGA"] = 1] = "MEGA";
        WinEffectLevel[WinEffectLevel["SUPER"] = 2] = "SUPER";
      })(WinEffectLevel || (WinEffectLevel = exports('WinEffectLevel', {})));

      Enum(WinEffectLevel);
      var WalletType;

      (function (WalletType) {
        WalletType[WalletType["NORMAL"] = 1] = "NORMAL";
        WalletType[WalletType["TRIAL"] = 2] = "TRIAL";
        WalletType[WalletType["PROMOTE"] = 4] = "PROMOTE";
      })(WalletType || (WalletType = exports('WalletType', {})));

      Enum(WalletType); //

      var SLOT_SCREEN_MODE;

      (function (SLOT_SCREEN_MODE) {
        SLOT_SCREEN_MODE[SLOT_SCREEN_MODE["SINGLE"] = 0] = "SINGLE";
        SLOT_SCREEN_MODE[SLOT_SCREEN_MODE["MULTI"] = 1] = "MULTI";
        SLOT_SCREEN_MODE[SLOT_SCREEN_MODE["SELECTION"] = 2] = "SELECTION";
        SLOT_SCREEN_MODE[SLOT_SCREEN_MODE["POPUP_CONFIRM"] = 3] = "POPUP_CONFIRM";
      })(SLOT_SCREEN_MODE || (SLOT_SCREEN_MODE = exports('SLOT_SCREEN_MODE', {})));

      var EVENT_STATE;

      (function (EVENT_STATE) {
        EVENT_STATE[EVENT_STATE["ACTIVE"] = 0] = "ACTIVE";
        EVENT_STATE[EVENT_STATE["INACTIVE"] = 1] = "INACTIVE";
        EVENT_STATE[EVENT_STATE["EXPIRED"] = 2] = "EXPIRED";
        EVENT_STATE[EVENT_STATE["FINISHED"] = 3] = "FINISHED";
        EVENT_STATE[EVENT_STATE["INVALID"] = 4] = "INVALID";
      })(EVENT_STATE || (EVENT_STATE = exports('EVENT_STATE', {})));

      var TOP_PLAYER_DISPLAY;

      (function (TOP_PLAYER_DISPLAY) {
        TOP_PLAYER_DISPLAY[TOP_PLAYER_DISPLAY["UNBENT"] = 0] = "UNBENT";
        TOP_PLAYER_DISPLAY[TOP_PLAYER_DISPLAY["RUN_OUT"] = 1] = "RUN_OUT";
      })(TOP_PLAYER_DISPLAY || (TOP_PLAYER_DISPLAY = exports('TOP_PLAYER_DISPLAY', {})));

      Enum(TOP_PLAYER_DISPLAY);
      var QUEST_DISPLAY;

      (function (QUEST_DISPLAY) {
        QUEST_DISPLAY[QUEST_DISPLAY["UNBENT"] = 0] = "UNBENT";
        QUEST_DISPLAY[QUEST_DISPLAY["RUN_OUT"] = 1] = "RUN_OUT";
      })(QUEST_DISPLAY || (QUEST_DISPLAY = exports('QUEST_DISPLAY', {})));

      Enum(QUEST_DISPLAY);
      var NotifyWinEffect;

      (function (NotifyWinEffect) {
        NotifyWinEffect[NotifyWinEffect["BigWin"] = 1] = "BigWin";
        NotifyWinEffect[NotifyWinEffect["JackpotWin"] = 2] = "JackpotWin";
      })(NotifyWinEffect || (NotifyWinEffect = exports('NotifyWinEffect', {})));

      Enum(NotifyWinEffect); //

      var DialogTitle;

      (function (DialogTitle) {
        DialogTitle[DialogTitle["ExitGame"] = 0] = "ExitGame";
        DialogTitle[DialogTitle["RemoveGame"] = 1] = "RemoveGame";
        DialogTitle[DialogTitle["ChangeGame"] = 2] = "ChangeGame";
        DialogTitle[DialogTitle["Announcement"] = 3] = "Announcement";
      })(DialogTitle || (DialogTitle = exports('DialogTitle', {})));

      Enum(DialogTitle);
      var DialogContent;

      (function (DialogContent) {
        DialogContent["ExitGame"] = "B\u1EA1n \u0111ang ch\u01A1i {n} game slot, b\u1EA1n\nmu\u1ED1n tho\xE1t t\u1EA5t c\u1EA3?";
        DialogContent["RemoveGame"] = "B\u1EA1n c\xF3 ch\u1EAFc mu\u1ED1n tho\xE1t game?";
        DialogContent["ChangeGame"] = "GAME \u0110ANG M\u1EDE S\u1EBC B\u1ECA T\u1EAET N\u1EBEU \u0110\u1ED4I\nGAME KH\xC1C";
      })(DialogContent || (DialogContent = exports('DialogContent', {})));

      Enum(DialogContent);
      var HorizontalExpandDirection;

      (function (HorizontalExpandDirection) {
        HorizontalExpandDirection[HorizontalExpandDirection["None"] = -20] = "None";
        HorizontalExpandDirection[HorizontalExpandDirection["LeftToRight"] = 20] = "LeftToRight";
        HorizontalExpandDirection[HorizontalExpandDirection["RightToLeft"] = 21] = "RightToLeft";
        HorizontalExpandDirection[HorizontalExpandDirection["FromMiddle"] = 22] = "FromMiddle";
      })(HorizontalExpandDirection || (HorizontalExpandDirection = exports('HorizontalExpandDirection', {})));

      Enum(HorizontalExpandDirection);
      var VerticalExpandDirection;

      (function (VerticalExpandDirection) {
        VerticalExpandDirection[VerticalExpandDirection["None"] = -10] = "None";
        VerticalExpandDirection[VerticalExpandDirection["BottomToTop"] = 10] = "BottomToTop";
        VerticalExpandDirection[VerticalExpandDirection["TopToBottom"] = 11] = "TopToBottom";
        VerticalExpandDirection[VerticalExpandDirection["FromMiddle"] = 12] = "FromMiddle";
      })(VerticalExpandDirection || (VerticalExpandDirection = exports('VerticalExpandDirection', {})));

      var PROMOTION_ERROR;

      (function (PROMOTION_ERROR) {
        PROMOTION_ERROR["WRONG_BET"] = "0016";
        PROMOTION_ERROR["EXPIRED"] = "0042";
        PROMOTION_ERROR["RESET"] = "0043";
        PROMOTION_ERROR["NEW"] = "0044";
      })(PROMOTION_ERROR || (PROMOTION_ERROR = exports('PROMOTION_ERROR', {})));

      Enum(PROMOTION_ERROR);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CustomEventNames.ts", ['cc', './EventNames.ts'], function (exports) {
  'use strict';

  var cclegacy, EventNames;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      EventNames = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "ed83dLTCwJAELr8FF4gQAec", "CustomEventNames", undefined);

      var customEvents = {
        // test
        TEST_testEvent: "TEST_testEvent"
      };
      var defaultEvent = Object.assign({}, EventNames);
      var gameEvent = exports('default', Object.assign(defaultEvent, customEvents));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CustomPageViewIndicator.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, SpriteFrame, SpriteComponent, PageViewIndicator;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SpriteFrame = module.SpriteFrame;
      SpriteComponent = module.SpriteComponent;
      PageViewIndicator = module.PageViewIndicator;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "db9c0YejNNPNITBLdrMDU11", "CustomPageViewIndicator", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var CustomPageViewIndicator = exports('CustomPageViewIndicator', (_dec = ccclass('CustomPageViewIndicator'), _dec2 = property(SpriteFrame), _dec(_class = (_class2 = /*#__PURE__*/function (_PageViewIndicator) {
        _inheritsLoose(CustomPageViewIndicator, _PageViewIndicator);

        function CustomPageViewIndicator() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _PageViewIndicator.call.apply(_PageViewIndicator, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "unSelectedSpriteFrame", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = CustomPageViewIndicator.prototype;

        _proto._changedState = function _changedState() {
          var indicators = this._indicators;
          if (indicators.length === 0) return;
          var idx = this._pageView._curPageIdx;
          if (idx >= indicators.length) return;

          for (var i = 0; i < indicators.length; ++i) {
            var node = indicators[i];

            if (node) {
              var sprite = node.getComponent(SpriteComponent);

              if (sprite) {
                sprite.spriteFrame = this.unSelectedSpriteFrame;
              }
            }
          }

          this.setSpriteFrame({
            indicators: indicators,
            idx: idx
          });
        };

        _proto.setSpriteFrame = function setSpriteFrame(_ref) {
          var indicators = _ref.indicators,
              idx = _ref.idx;
          var node = indicators[idx];

          if (node) {
            var sprite = node.getComponent(SpriteComponent);

            if (sprite) {
              sprite.spriteFrame = this.spriteFrame;
            }
          }
        };

        return CustomPageViewIndicator;
      }(PageViewIndicator), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "unSelectedSpriteFrame", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CustomTiledMap.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "fbe91v6eH9FLoWlbJNI3fL1", "CustomTiledMap", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var CustomTileddMap = exports('CustomTileddMap', (_dec = ccclass('CustomTileddMap'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(CustomTileddMap, _Component);

        function CustomTileddMap() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.inputBox = null;
          return _this;
        }

        var _proto = CustomTileddMap.prototype;

        _proto.start = function start() {
          var _this2 = this;

          var inputBox = this.inputBox;
          inputBox = document.createElement("input");
          inputBox.type = "file";

          inputBox.onchange = function (evt) {
            var fileList = evt.target.files;
            var file = fileList[0];
            if (!file) return;

            _this2.readFile(file);
          };

          document.body.appendChild(inputBox);
          this.inputBox = inputBox;
        };

        _proto.readFile = function readFile(fileUrl) {
          var exportClass = this;
          var reader = new FileReader();

          reader.onload = function (ev) {
            exportClass["export"](fileUrl.name, ev.target.result);
          };

          reader.readAsText(fileUrl);
        };

        _proto["export"] = function _export(name, result) {
          var newData = this._formatData(result);

          var dataStr = JSON.stringify(newData);
          var dataUri = 'data:application/json;charset=utf-8,' + encodeURIComponent(dataStr);
          var exportFileDefaultName = name;
          var linkElement = document.createElement('a');
          linkElement.setAttribute('href', dataUri);
          linkElement.setAttribute('download', exportFileDefaultName);
          linkElement.click();
        };

        _proto._formatData = function _formatData(result) {
          var data = JSON.parse(result);
          var newData = {};
          newData['mapSize'] = {
            width: data.width,
            height: data.height,
            tilewidth: data.tilewidth,
            tileheight: data.tileheight,
            offsetZ: data.properties[0].value
          };
          data.layers.forEach(function (layer) {
            if (layer.name == "background") {
              newData['bgID'] = layer.properties[0].value;
            }

            if (layer.name == "collider") {
              newData['collider'] = layer.data;
            }

            if (layer.name == "zIndex") {
              newData['zIndex'] = layer.data;
            }

            if (layer.name == "object") {
              var objects = {};
              layer.objects.forEach(function (object) {
                if (!objects[object.name]) {
                  objects[object.name] = {
                    zones: []
                  };
                }

                var c = object.x / (data.tilewidth / 2);
                var r = object.y / (data.tilewidth / 2);
                var mc = (object.x + object.width) / (data.tilewidth / 2);
                var mr = (object.y + object.height) / (data.tilewidth / 2);

                if (!object.gid) {
                  objects[object.name].zones.push({
                    minRow: Number(r.toFixed(2)),
                    minCol: Number(c.toFixed(2)),
                    maxRow: Number(mr.toFixed(2)),
                    maxCol: Number(mc.toFixed(2))
                  });
                } else {
                  objects[object.name].name = object.name;
                  objects[object.name].row = r;
                  objects[object.name].col = c;
                  objects[object.name].drawIndex = object.properties[0].value;
                }
              });
              newData['objects'] = objects;
            }

            if (layer.name == "zones") {
              var zones = Array(data.width * data.height).fill(0);
              layer.objects.forEach(function (object) {
                var c = Math.round(object.x / (data.tilewidth / 2));
                var r = Math.round(object.y / (data.tilewidth / 2));
                var mc = Math.round(object.x + object.width) / (data.tilewidth / 2);
                var mr = Math.round(object.y + object.height) / (data.tilewidth / 2);

                for (var row = r; row < mr; row++) {
                  for (var col = c; col < mc; col++) {
                    var index = row * data.width + col;
                    zones[index] = object.properties[0].value;
                  }
                }
              });
              newData['zones'] = zones;
            }

            if (layer.name == "zObject") {
              var zObjects = [];
              layer.objects.forEach(function (object) {
                var c = object.x / (data.tilewidth / 2);
                var r = object.y / (data.tilewidth / 2);
                var mc = (object.x + object.width) / (data.tilewidth / 2);
                var mr = (object.y + object.height) / (data.tilewidth / 2);
                var axis = object.properties[0].value;
                var from = object.properties[1].value;
                var to = object.properties[2].value;
                var dir = -1;

                if (object.properties[3]) {
                  dir = object.properties[3].value;
                }

                zObjects.push({
                  name: object.name,
                  minRow: Number(r.toFixed(2)),
                  minCol: Number(c.toFixed(2)),
                  maxRow: Number(mr.toFixed(2)),
                  maxCol: Number(mc.toFixed(2)),
                  axis: axis,
                  from: from,
                  to: to,
                  dir: dir
                });
              });
              newData['zObjects'] = zObjects;
            }
          });
          return newData;
        };

        return CustomTileddMap;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CustomToggle.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, SpriteFrame, Toggle, setOpacity;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SpriteFrame = module.SpriteFrame;
      Toggle = module.Toggle;
    }, function (module) {
      setOpacity = module.setOpacity;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "b468fzJEV9LUoupVX1bfhf5", "CustomToggle", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var CustomToggle = exports('CustomToggle', (_dec = ccclass('CustomToggle'), _dec2 = property({
        type: SpriteFrame
      }), _dec3 = property({
        type: SpriteFrame
      }), _dec4 = property({
        type: SpriteFrame
      }), _dec5 = property({
        type: SpriteFrame
      }), _dec6 = property({
        type: SpriteFrame
      }), _dec7 = property({
        type: SpriteFrame
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Toggle) {
        _inheritsLoose(CustomToggle, _Toggle);

        function CustomToggle() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Toggle.call.apply(_Toggle, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "checkedNormalSprite", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "checkedPressSprite", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "checkedDisableSprite", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "unCheckedNormalSprite", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "unCheckedPressSprite", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "unCheckedDisableSprite", _descriptor6, _assertThisInitialized(_this));

          _this.defaultTarget = null;
          return _this;
        }

        var _proto = CustomToggle.prototype;

        _proto._internalToggle = function _internalToggle() {
          _Toggle.prototype._internalToggle.call(this);

          this.normalSprite = this.isChecked ? this.checkedNormalSprite : this.unCheckedNormalSprite;
          this.pressedSprite = this.isChecked ? this.checkedPressSprite : this.unCheckedPressSprite;
          this.disabledSprite = this.isChecked ? this.checkedDisableSprite : this.unCheckedDisableSprite;
          this.defaultTarget = this.node.children[0];
          this.target = this.isChecked ? this.checkMark.node : this.defaultTarget;

          if (this.defaultTarget) {
            setOpacity(this.defaultTarget, this.isChecked ? 0 : 255);
          }

          if (this.checkMark) {
            setOpacity(this.checkMark.node, this.isChecked ? 255 : 0);
          }
        };

        return CustomToggle;
      }(Toggle), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "checkedNormalSprite", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "checkedPressSprite", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "checkedDisableSprite", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "unCheckedNormalSprite", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "unCheckedPressSprite", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "unCheckedDisableSprite", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CustomType.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CustomEnum.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, cclegacy, _decorator, Prefab, Node, sp, Label, SpriteFrame, Event, WalletType, SlotSceneType, HorizontalExpandDirection, VerticalExpandDirection;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Node = module.Node;
      sp = module.sp;
      Label = module.Label;
      SpriteFrame = module.SpriteFrame;
      Event = module.Event;
    }, function (module) {
      WalletType = module.WalletType;
      SlotSceneType = module.SlotSceneType;
      HorizontalExpandDirection = module.HorizontalExpandDirection;
      VerticalExpandDirection = module.VerticalExpandDirection;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _class4, _class5, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _dec12, _dec13, _class7, _class8, _descriptor10, _descriptor11, _dec14, _dec15, _dec16, _class10, _class11, _descriptor12, _descriptor13, _dec17, _dec18, _class13, _class14, _descriptor14, _descriptor15, _dec19, _dec20, _class16, _class17, _descriptor16, _descriptor17, _dec21, _dec22, _class19, _class20, _descriptor18, _descriptor19, _dec23, _dec24, _class22, _class23, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24, _descriptor25, _dec25, _dec26, _dec27, _class25, _class26, _descriptor26, _descriptor27, _descriptor28, _descriptor29;

      cclegacy._RF.push({}, "1c110+n0e5MbLjlzZh6IZ/D", "CustomType", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var PoolPrefab = exports('PoolPrefab', (_dec = ccclass('PoolPrefab'), _dec2 = property({
        displayName: 'Prefab Name',
        visible: true
      }), _dec3 = property({
        type: Prefab,
        displayName: 'Prefab',
        visible: true
      }), _dec4 = property({
        displayName: 'Initial Count',
        visible: true
      }), _dec(_class = (_class2 = function PoolPrefab() {
        _initializerDefineProperty(this, "prefabName", _descriptor, this);

        _initializerDefineProperty(this, "prefab", _descriptor2, this);

        _initializerDefineProperty(this, "initialCount", _descriptor3, this);
      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "prefabName", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "prefab", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "initialCount", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 5;
        }
      })), _class2)) || _class));
      var RotatingObject = exports('RotatingObject', (_dec5 = ccclass('RotatingObject'), _dec6 = property({
        type: Node,
        displayName: 'Node to rotate',
        visible: true
      }), _dec7 = property({
        displayName: 'Rotating Speed'
      }), _dec8 = property({
        displayName: 'Rotating Speed Variance'
      }), _dec9 = property({
        displayName: 'Clockwise = 1, Counter Clockwise = -1'
      }), _dec10 = property({
        displayName: 'Min Angle'
      }), _dec11 = property({
        displayName: 'Max Angle'
      }), _dec5(_class4 = (_class5 = function RotatingObject() {
        _initializerDefineProperty(this, "node", _descriptor4, this);

        _initializerDefineProperty(this, "speed", _descriptor5, this);

        _initializerDefineProperty(this, "speedVar", _descriptor6, this);

        _initializerDefineProperty(this, "clockwise", _descriptor7, this);

        _initializerDefineProperty(this, "minAngle", _descriptor8, this);

        _initializerDefineProperty(this, "maxAngle", _descriptor9, this);
      }, (_descriptor4 = _applyDecoratedDescriptor(_class5.prototype, "node", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class5.prototype, "speed", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 10;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class5.prototype, "speedVar", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 5;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class5.prototype, "clockwise", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class5.prototype, "minAngle", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class5.prototype, "maxAngle", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 10;
        }
      })), _class5)) || _class4));
      var SlotCustomDataType = exports('SlotCustomDataType', (_dec12 = ccclass('SlotCustomDataType'), _dec13 = property({
        type: sp.SkeletonData
      }), _dec12(_class7 = (_class8 = function SlotCustomDataType() {
        _initializerDefineProperty(this, "spineName", _descriptor10, this);

        _initializerDefineProperty(this, "spineData", _descriptor11, this);
      }, (_descriptor10 = _applyDecoratedDescriptor(_class8.prototype, "spineName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class8.prototype, "spineData", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class8)) || _class7));
      var WalletString = exports('WalletString', (_dec14 = ccclass('WalletString'), _dec15 = property({
        type: WalletType
      }), _dec16 = property({
        type: Label
      }), _dec14(_class10 = (_class11 = function WalletString() {
        _initializerDefineProperty(this, "walletType", _descriptor12, this);

        _initializerDefineProperty(this, "displayString", _descriptor13, this);
      }, (_descriptor12 = _applyDecoratedDescriptor(_class11.prototype, "walletType", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return WalletType.NORMAL;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class11.prototype, "displayString", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class11)) || _class10));
      var JackpotType = exports('JackpotType', (_dec17 = ccclass('JackpotType'), _dec18 = property({
        type: SpriteFrame
      }), _dec17(_class13 = (_class14 = function JackpotType() {
        _initializerDefineProperty(this, "jpName", _descriptor14, this);

        _initializerDefineProperty(this, "image", _descriptor15, this);
      }, (_descriptor14 = _applyDecoratedDescriptor(_class14.prototype, "jpName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class14.prototype, "image", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class14)) || _class13));
      var JackpotObject = exports('JackpotObject', (_dec19 = ccclass("JackpotObject"), _dec20 = property({
        type: Node
      }), _dec19(_class16 = (_class17 = function JackpotObject() {
        _initializerDefineProperty(this, "jpType", _descriptor16, this);

        _initializerDefineProperty(this, "jpNode", _descriptor17, this);
      }, (_descriptor16 = _applyDecoratedDescriptor(_class17.prototype, "jpType", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class17.prototype, "jpNode", [_dec20], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class17)) || _class16));
      var ScenePrefab = exports('ScenePrefab', (_dec21 = ccclass("ScenePrefab"), _dec22 = property({
        type: SlotSceneType
      }), _dec21(_class19 = (_class20 = function ScenePrefab() {
        _initializerDefineProperty(this, "sceneType", _descriptor18, this);

        _initializerDefineProperty(this, "prefabPath", _descriptor19, this);
      }, (_descriptor18 = _applyDecoratedDescriptor(_class20.prototype, "sceneType", [_dec22], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return SlotSceneType.Other;
        }
      }), _descriptor19 = _applyDecoratedDescriptor(_class20.prototype, "prefabPath", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      })), _class20)) || _class19));
      var CustomEvent = exports('CustomEvent', /*#__PURE__*/function (_Event) {
        _inheritsLoose(CustomEvent, _Event);

        function CustomEvent(name, bubbles, details) {
          var _this;

          _this = _Event.call(this, name, bubbles) || this;
          _this.details = null;
          _this.details = details;
          return _this;
        }

        return CustomEvent;
      }(Event));
      var AssetPathConfig = exports('AssetPathConfig', (_dec23 = ccclass("AssetPathConfig"), _dec24 = property(Node), _dec23(_class22 = (_class23 = function AssetPathConfig() {
        _initializerDefineProperty(this, "id", _descriptor20, this);

        _initializerDefineProperty(this, "path", _descriptor21, this);

        _initializerDefineProperty(this, "index", _descriptor22, this);

        _initializerDefineProperty(this, "parentNode", _descriptor23, this);

        _initializerDefineProperty(this, "lazyLoadOnWeb", _descriptor24, this);

        _initializerDefineProperty(this, "lazyLoadOnNative", _descriptor25, this);
      }, (_descriptor20 = _applyDecoratedDescriptor(_class23.prototype, "id", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return -1;
        }
      }), _descriptor21 = _applyDecoratedDescriptor(_class23.prototype, "path", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _descriptor22 = _applyDecoratedDescriptor(_class23.prototype, "index", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor23 = _applyDecoratedDescriptor(_class23.prototype, "parentNode", [_dec24], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor24 = _applyDecoratedDescriptor(_class23.prototype, "lazyLoadOnWeb", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor25 = _applyDecoratedDescriptor(_class23.prototype, "lazyLoadOnNative", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      })), _class23)) || _class22));
      var ExpandingConfig = exports('ExpandingConfig', (_dec25 = ccclass("ExpandingConfig"), _dec26 = property({
        type: HorizontalExpandDirection
      }), _dec27 = property({
        type: VerticalExpandDirection
      }), _dec25(_class25 = (_class26 = function ExpandingConfig() {
        _initializerDefineProperty(this, "expandWidth", _descriptor26, this);

        _initializerDefineProperty(this, "expandHeight", _descriptor27, this);

        _initializerDefineProperty(this, "expandDirectionHorizontal", _descriptor28, this);

        _initializerDefineProperty(this, "expandDirectionVertical", _descriptor29, this);
      }, (_descriptor26 = _applyDecoratedDescriptor(_class26.prototype, "expandWidth", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 200;
        }
      }), _descriptor27 = _applyDecoratedDescriptor(_class26.prototype, "expandHeight", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 200;
        }
      }), _descriptor28 = _applyDecoratedDescriptor(_class26.prototype, "expandDirectionHorizontal", [_dec26], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return HorizontalExpandDirection.LeftToRight;
        }
      }), _descriptor29 = _applyDecoratedDescriptor(_class26.prototype, "expandDirectionVertical", [_dec27], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return VerticalExpandDirection.BottomToTop;
        }
      })), _class26)) || _class25));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CustomTypeShare.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, cclegacy, _decorator, AudioClip, AudioSource, Event;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      AudioClip = module.AudioClip;
      AudioSource = module.AudioSource;
      Event = module.Event;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _dec4, _class4;

      cclegacy._RF.push({}, "a9b9bNRtfxJ4ZzdD4GzCwFi", "CustomTypeShare", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var CustomAudioClip = exports('CustomAudioClip', (_dec = ccclass('CustomAudioClip'), _dec2 = property({
        type: AudioClip
      }), _dec3 = property({
        type: AudioSource,
        visible: false
      }), _dec(_class = (_class2 = function CustomAudioClip() {
        _initializerDefineProperty(this, "isMusic", _descriptor, this);

        _initializerDefineProperty(this, "isEffect", _descriptor2, this);

        _initializerDefineProperty(this, "destroyedOnSwitchMode", _descriptor3, this);

        _initializerDefineProperty(this, "soundId", _descriptor4, this);

        _initializerDefineProperty(this, "maxCount", _descriptor5, this);

        _initializerDefineProperty(this, "ignoreCheckMaxChannel", _descriptor6, this);

        _initializerDefineProperty(this, "audioFile", _descriptor7, this);

        _initializerDefineProperty(this, "audioSource", _descriptor8, this);

        this.audioSourcePool = [];
      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "isMusic", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "isEffect", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "destroyedOnSwitchMode", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "soundId", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "maxCount", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "ignoreCheckMaxChannel", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "audioFile", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "audioSource", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      var CustomEvent = exports('CustomEvent', (_dec4 = ccclass('CustomEvent'), _dec4(_class4 = /*#__PURE__*/function (_Event) {
        _inheritsLoose(CustomEvent, _Event);

        function CustomEvent(name, bubbles, details) {
          var _this;

          _this = _Event.call(this, name, bubbles) || this;
          _this.details = null;
          _this.details = details;
          return _this;
        }

        return CustomEvent;
      }(Event)) || _class4));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DataStore.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BetData.ts', './SlotUtils.ts', './CustomEnum.ts', './QuestData.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, warn, Component, BetData, convertSlotMatrix, convertPayLineAlways, convertPayLine, PerformanceLevel, WalletType, SlotGameMode, StateGameMode, QuestData;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      warn = module.warn;
      Component = module.Component;
    }, function (module) {
      BetData = module.default;
    }, function (module) {
      convertSlotMatrix = module.convertSlotMatrix;
      convertPayLineAlways = module.convertPayLineAlways;
      convertPayLine = module.convertPayLine;
    }, function (module) {
      PerformanceLevel = module.PerformanceLevel;
      WalletType = module.WalletType;
      SlotGameMode = module.SlotGameMode;
      StateGameMode = module.StateGameMode;
    }, function (module) {
      QuestData = module.QuestData;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "ae662qMETdFSIuvnHv9fXxl", "DataStore", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var DataStore = exports('DataStore', (_dec = ccclass('DataStore'), _dec2 = property({
        type: PerformanceLevel,
        visible: true
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(DataStore, _Component);

        function DataStore() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.config = null;
          _this.wallets = [];
          _this.selectedWallet = WalletType.NORMAL;
          _this.walletHasUpdate = false;
          _this.betData = void 0;
          _this.playSession = {};
          _this.lastEvent = {};
          _this.lastNormalResult = {};
          _this.isAlways = false;
          _this.spinTimes = 0;
          _this.isAutoSpin = false;
          _this.isTrialMode = false;
          _this.isDisplayFullScreen = true;
          _this.isAdsMode = false;
          _this.modeTurbo = false;
          _this.gameSpeed = 0;
          _this.promotion = null;
          _this.currentGameMode = SlotGameMode.NormalGame;
          _this.extendData = {};
          _this.questData = new QuestData();
          _this.isAutoSpinNormal = false;
          _this.walletTypes = [];

          _initializerDefineProperty(_this, "_performanceLevel", _descriptor, _assertThisInitialized(_this));

          _this._pausedWallet = 0;
          _this._isDebug = true;
          return _this;
        }

        var _proto = DataStore.prototype;

        _proto.onLoad = function onLoad() {
          this._isDebug && (window['dataStore'] = this);
          this.config = this.node.config;
          this.node.dataStore = this;
          this.betData = new BetData(this.config); // default

          this.isAlways = this.config.PAY_LINE_ALLWAYS;
          this.wallets[WalletType.NORMAL] = 0;
          this.wallets[WalletType.TRIAL] = 0;
          this.wallets[WalletType.PROMOTE] = 0;
        }
        /**
         * @extend and @override this func 
         * if the game have the different way to calculate money
         * Don't need to extends new BetData. 
         */
        ;

        _proto.getTotalBet = function getTotalBet() {
          return this.betData.getTotalBet();
        }
        /**
         * @wallet
         */
        ;

        _proto.getWalletAfterSpin = function getWalletAfterSpin() {
          return this.getCurrentWallet() - this.getTotalBet();
        };

        _proto.setWalletTypes = function setWalletTypes(types) {
          this.walletTypes = types;
        };

        _proto.getWalletTypes = function getWalletTypes() {
          return this.walletTypes;
        };

        _proto.switchWallet = function switchWallet(wallet) {
          this.selectedWallet = wallet;
        };

        _proto.getCurrentWallet = function getCurrentWallet() {
          return this.wallets[this.selectedWallet];
        };

        _proto.setWallet = function setWallet(wallet, value) {
          if (this.wallets[wallet] != value) {
            this.wallets[wallet] = value;
            this.walletHasUpdate = true;
          }
        };

        _proto.getWallets = function getWallets() {
          return this.wallets;
        };

        _proto.getCurrentWalletType = function getCurrentWalletType() {
          return this.selectedWallet;
        };

        _proto.setCurrentWallet = function setCurrentWallet(value) {
          if (this.wallets[this.selectedWallet] != value) {
            this.wallets[this.selectedWallet] = value;
            this.walletHasUpdate = true;
          }
        } //save value only
        ;

        _proto.updateWallets = function updateWallets(_ref) {
          var amount = _ref.amount,
              pAmount = _ref.pAmount;

          if (this.wallets[WalletType.NORMAL] !== amount || this.wallets[WalletType.PROMOTE] !== pAmount) {
            this.wallets[WalletType.NORMAL] = amount;
            this.wallets[WalletType.PROMOTE] = pAmount;
            this.walletHasUpdate = true;
          }
        };

        _proto.syncWalletUI = function syncWalletUI(wallets) {
          if (!isNaN(wallets[WalletType.NORMAL]) && wallets[WalletType.NORMAL] !== this.wallets[WalletType.NORMAL] || !isNaN(wallets[WalletType.PROMOTE]) && wallets[WalletType.PROMOTE] !== this.wallets[WalletType.PROMOTE] || !isNaN(wallets[WalletType.TRIAL]) && wallets[WalletType.TRIAL] !== this.wallets[WalletType.TRIAL]) this.walletHasUpdate = true;else {
            this.walletHasUpdate = false;
          }
        };

        _proto.isPausingWallet = function isPausingWallet(type) {
          return (this._pausedWallet & type) == type;
        };

        _proto.pauseCurrentWallet = function pauseCurrentWallet() {
          if (!this.isPausingWallet(this.selectedWallet)) {
            this.pauseWallet(this.selectedWallet);
          }
        };

        _proto.resumeCurrentWallet = function resumeCurrentWallet() {
          if (this.isPausingWallet(this.selectedWallet)) {
            this.resumeWallet(this.selectedWallet);
          }
        };

        _proto.pauseWallet = function pauseWallet(type) {
          if (!this.isPausingWallet(type)) this._pausedWallet = this._pausedWallet + type;
        };

        _proto.resumeWallet = function resumeWallet(type) {
          if (this.isPausingWallet(type)) this._pausedWallet -= type;
        }
        /**
         * @process_data
         */
        ;

        _proto.formatData = function formatData(playSession) {
          var _this$config = this.config,
              NORMAL_TABLE_FORMAT = _this$config.NORMAL_TABLE_FORMAT,
              FREE_TABLE_FORMAT = _this$config.FREE_TABLE_FORMAT;
          var matrix = playSession.matrix,
              normalGameMatrix = playSession.normalGameMatrix,
              freeGameMatrix = playSession.freeGameMatrix,
              payLines = playSession.payLines,
              state = playSession.state,
              bonusGameMatrix = playSession.bonusGameMatrix,
              eventData = playSession.eventData,
              winAmountQuest = playSession.winAmountQuest,
              winAmountEvent = playSession.winAmountEvent,
              isTrialMode = playSession.isTrialMode;
          var tableFormat = NORMAL_TABLE_FORMAT;

          if (state == StateGameMode.FreeGame) {
            tableFormat = FREE_TABLE_FORMAT;
          }

          if (matrix) {
            playSession.matrix = this.convertMatrix(matrix, tableFormat);
          } else if (freeGameMatrix) {
            playSession.matrix = this.convertMatrix(freeGameMatrix, tableFormat);
          } else if (normalGameMatrix) {
            playSession.matrix = this.convertMatrix(normalGameMatrix, tableFormat);
          }

          if (playSession.payLines) {
            playSession.payLines = this.convertPayLine(payLines);
          }

          if (bonusGameMatrix) {
            playSession.bonusGameMatrix = this.formatBonusMatrix(bonusGameMatrix);
          }

          if (eventData && !isTrialMode) {
            this.questData.updateQuestData(eventData, winAmountQuest, winAmountEvent);
          }

          this.playSession = playSession;
          warn("%c run data-update ", "color: red", this.playSession);
          return playSession;
        };

        _proto.convertMatrix = function convertMatrix(matrix, tableFormat) {
          if (tableFormat === void 0) {
            tableFormat = null;
          }

          var NORMAL_TABLE_FORMAT = this.config.NORMAL_TABLE_FORMAT;
          return convertSlotMatrix(matrix, tableFormat ? tableFormat : NORMAL_TABLE_FORMAT);
        };

        _proto.convertPayLine = function convertPayLine$1(payLines) {
          if (this.isAlways) {
            return convertPayLineAlways(payLines);
          } else {
            return convertPayLine(payLines);
          }
        };

        _proto.formatBonusMatrix = function formatBonusMatrix(bonusGameMatrix) {
          return bonusGameMatrix.map(function (value) {
            return Number(value);
          });
        };

        _proto.setTurbo = function setTurbo(value) {
          this.modeTurbo = value;
        };

        _proto.setLowPerformance = function setLowPerformance() {
          this._performanceLevel = PerformanceLevel.Low;
        };

        _proto.setMediumPerformance = function setMediumPerformance() {
          this._performanceLevel = PerformanceLevel.Medium;
        };

        _proto.setHighPerformance = function setHighPerformance() {
          this._performanceLevel = PerformanceLevel.High;
        };

        _proto.getQuestData = function getQuestData() {
          return this.questData;
        };

        _createClass(DataStore, [{
          key: "performanceLevel",
          get: function get() {
            var performance = 'HIGH_PERFORMANCE_LV';

            switch (this._performanceLevel) {
              case PerformanceLevel.Medium:
                performance = 'MEDIUM_PERFORMANCE_LV';
                break;

              case PerformanceLevel.Low:
                performance = 'LOW_PERFORMANCE_LV';
                break;
            }

            return performance;
          }
        }]);

        return DataStore;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_performanceLevel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return PerformanceLevel.High;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DataStore1989.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfDataStore.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _assertThisInitialized, cclegacy, _decorator, gfDataStore;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfDataStore = module.default;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "89af70Jg5tO0K2vGonmaIij", "DataStore1989", undefined);

      var ccclass = _decorator.ccclass;
      var DataStore1989 = exports('default', (_dec = ccclass('DataStore1989'), _dec(_class = (_class2 = /*#__PURE__*/function (_gfDataStore) {
        _inheritsLoose(DataStore1989, _gfDataStore);

        function DataStore1989() {
          var _this;

          _this = _gfDataStore.call(this) || this;
          DataStore1989.instance = _assertThisInitialized(_this);
          return _this;
        }

        return DataStore1989;
      }(gfDataStore), _class2.instance = null, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DataStore1998.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfDataStore.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _assertThisInitialized, cclegacy, _decorator, gfDataStore;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfDataStore = module.default;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "1777a4CfaVE5Lxw6Bf0rkSd", "DataStore1998", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var DataStore1998 = exports('default', (_dec = ccclass('DataStore1998'), _dec(_class = (_class2 = /*#__PURE__*/function (_gfDataStore) {
        _inheritsLoose(DataStore1998, _gfDataStore);

        function DataStore1998() {
          var _this;

          _this = _gfDataStore.call(this) || this;
          DataStore1998.instance = _assertThisInitialized(_this);
          return _this;
        }

        return DataStore1998;
      }(gfDataStore), _class2.instance = null, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Debug.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './MapManager.ts', './Moving.ts', './MummySpawner.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Component, MapManager, Moving, MummySpawner;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Component = module.Component;
    }, function (module) {
      MapManager = module.MapManager;
    }, function (module) {
      Moving = module.Moving;
    }, function (module) {
      MummySpawner = module.MummySpawner;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "40946zEf61Nd67fUS7bCEiG", "Debug", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var mummyAnimList = ['ID_01', 'ID_02', 'ID_03', 'ID_04', 'ID_05', 'ID_06', 'ID_07', 'ID_08', 'ID_09', 'ID_10', 'ID_11', 'ID_Bomb', 'ID_Hoader'];
      var Debug = exports('Debug', (_dec = ccclass('Debug'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: MapManager
      }), _dec4 = property({
        type: MummySpawner
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Debug, _Component);

        function Debug() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "gridRenderer", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "mapManager", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "mummySpawner", _descriptor3, _assertThisInitialized(_this));

          _this._selectedMenu = null;
          _this.selectedMummy = {
            anim: "",
            speed: "",
            direction: "",
            x: "",
            y: "",
            z: "",
            col: "",
            row: "",
            zoneIndex: "",
            autoMove: false,
            angle: ""
          };
          _this._debugMenu = null;
          _this._debugFlags = {
            drawGrid: true
          };
          _this._mapMenu = null;
          _this._mapMenuOption = {
            totalMummy: 0
          };
          _this._gui = null;
          return _this;
        }

        var _proto = Debug.prototype;

        _proto.onLoad = function onLoad() {
          if (globalThis.dat && globalThis.dat.gui) {
            this._loadMenu();
          }

          document.body.childNodes[document.body.childNodes.length - 1].style.zIndex = 999;
        };

        _proto._loadMenu = function _loadMenu() {
          var _this2 = this;

          this._gui = new globalThis.dat.gui.GUI();
          this._debugMenu = this._gui.addFolder('Debug Zone');

          var debugGrid = this._debugMenu.add(this._debugFlags, 'drawGrid', true);

          debugGrid.onChange(function (value) {
            _this2.gridRenderer.active = value;
          });

          this._debugMenu.open();

          this._selectedMenu = this._gui.addFolder('Selected Mummy');

          var anim = this._selectedMenu.add(this.selectedMummy, 'anim', mummyAnimList);

          anim.onChange(function (value) {
            var mummy = _this2.mapManager.getSelectedMummy();

            if (mummy) {
              _this2.mummySpawner.changeAnimByName(mummy, value);
            }
          });

          var autoMove = this._selectedMenu.add(this.selectedMummy, "autoMove", false);

          autoMove.onChange(function (value) {
            var mummy = _this2.mapManager.getSelectedMummy();

            var mummyScript = mummy.getComponent(Moving);
            mummyScript.setAutoMove(value);
          });

          var speed = this._selectedMenu.add(this.selectedMummy, 'speed', "");

          speed.onChange(function (value) {
            var mummy = _this2.mapManager.getSelectedMummy();

            if (mummy) {
              mummy.getComponent(Moving).setSpeed(Number(value));
            }
          });

          this._selectedMenu.add(this.selectedMummy, 'direction', "");

          this._selectedMenu.add(this.selectedMummy, "x", "0");

          this._selectedMenu.add(this.selectedMummy, "y", "0");

          this._selectedMenu.add(this.selectedMummy, "z", "0");

          this._selectedMenu.add(this.selectedMummy, "col", "0");

          this._selectedMenu.add(this.selectedMummy, "row", "0");

          this._selectedMenu.add(this.selectedMummy, "zoneIndex", "0");

          this._selectedMenu.add(this.selectedMummy, "angle", "0");

          this._selectedMenu.open();

          this._mapMenu = this._gui.addFolder("Map");

          this._mapMenuOption['addMummy'] = function () {
            _this2.mummySpawner.spawnRandomOne();

            _this2._mapMenuOption.totalMummy += 1;

            _this2._mapMenu.updateDisplay();
          };

          this._mapMenuOption['removeMummy'] = function () {
            _this2.mummySpawner.removeRandomOne();

            _this2._mapMenuOption.totalMummy -= 1;

            _this2._mapMenu.updateDisplay();
          };

          this._mapMenu.add(this._mapMenuOption, "totalMummy", 0);

          this._mapMenu.add(this._mapMenuOption, "addMummy");

          this._mapMenu.add(this._mapMenuOption, "removeMummy");
        };

        _proto._updateSelectedMummy = function _updateSelectedMummy() {
          var mummy = this.mapManager.getSelectedMummy();

          if (mummy) {
            var mummyScript = mummy.getComponent(Moving);
            this.selectedMummy.anim = mummyScript.getSpine().skeletonData.name;
            this.selectedMummy.speed = mummyScript.getSpeed();
            this.selectedMummy.x = mummy.position.x.toFixed(2);
            this.selectedMummy.y = mummy.position.y.toFixed(2);
            this.selectedMummy.z = mummy.position.z.toFixed(2);
            this.selectedMummy.col = mummyScript.getGridPosition().col.toFixed(2);
            this.selectedMummy.row = mummyScript.getGridPosition().row.toFixed(2);
            this.selectedMummy.direction = mummyScript.getDirection();
            this.selectedMummy.autoMove = mummyScript.isAutoMove();
            this.selectedMummy.zoneIndex = this.mapManager.getDrawIndex(mummy.position);
            this.selectedMummy.angle = mummy.angle.toFixed(2);

            this._selectedMenu.updateDisplay();
          }
        };

        _proto.update = function update(dt) {
          this._updateSelectedMummy();
        };

        return Debug;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "gridRenderer", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "mapManager", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "mummySpawner", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DemoComponent.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "090adojOBJBC4OeVRM6Woj1", "DemoComponent", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var DemoComponent = exports('DemoComponent', (_dec = ccclass('DemoComponent'), _dec2 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(DemoComponent, _Component);

        function DemoComponent() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "dialogMessage", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = DemoComponent.prototype;

        _proto.start = function start() {
          //this.dialogMessage.emit('PLAY', {strText: 'This is a test', actionOK: ()=>{}, actionCancel: ()=>{}});
          this.dialogMessage.emit('PLAY', {
            winAmount: 99999
          });
        } // update (deltaTime: number) {
        //     // [4]
        // }
        ;

        return DemoComponent;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "dialogMessage", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DialogDisplayControl.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Vec3, tween, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      tween = module.tween;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "94c3bCpKiVDY5syIybSol/3", "DialogDisplayControl", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var DialogDisplayControl = exports('DialogDisplayControl', (_dec = ccclass('DialogDisplayControl'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(DialogDisplayControl, _Component);

        function DialogDisplayControl() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "scaleEaseType", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "duration", _descriptor2, _assertThisInitialized(_this));

          _this._scaleTween = null;
          return _this;
        }

        var _proto = DialogDisplayControl.prototype;

        _proto.onEnable = function onEnable() {
          this.tweenScale();
        };

        _proto.onDisable = function onDisable() {
          if (this._scaleTween) this._scaleTween.stop();
          this.node.scale = new Vec3(0.001, 0.001, 0.001);
        };

        _proto.tweenScale = function tweenScale() {
          if (this._scaleTween) this._scaleTween.stop();
          this.node.scale = new Vec3(0.001, 0.001, 0.001);
          this._scaleTween = tween(this.node).to(this.duration, {
            scale: Vec3.ONE
          }, {
            easing: this.scaleEaseType
          });

          this._scaleTween.start();
        };

        return DialogDisplayControl;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "scaleEaseType", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'backOut';
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "duration", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.5;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Director.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './connectNetwork.ts', './globalNetwork.ts', './CustomEnum.ts', './UIManager.ts', './NetworkEnum.ts', './SlotText.ts', './gameCommonUtils.ts', './loadConfigAsync.ts', './SlotSoundPlayer.ts', './PoolFactory.ts', './gameStateSlot.ts', './EventListenerManager.ts', './SpineSkeletonDatabase.ts', './EventNames.ts', './utils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, JsonAsset, game, Game, macro, log, director, sys, setDisplayStats, error, Event, tween, MotionStreak, Component, connectNetwork, globalNetwork, SlotGameMode, PROMOTION_ERROR, WalletType, UIManager, NetworkState, NetworkEvent, SlotText, gameCommonUtils, loadConfigAsync, SlotSoundPlayer, PoolFactory, GameStateManager, EventListenerManager, SpineSkeletonDatabase, EventNames, formatWalletMoney;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      JsonAsset = module.JsonAsset;
      game = module.game;
      Game = module.Game;
      macro = module.macro;
      log = module.log;
      director = module.director;
      sys = module.sys;
      setDisplayStats = module.setDisplayStats;
      error = module.error;
      Event = module.Event;
      tween = module.tween;
      MotionStreak = module.MotionStreak;
      Component = module.Component;
    }, function (module) {
      connectNetwork = module.default;
    }, function (module) {
      globalNetwork = module.default;
    }, function (module) {
      SlotGameMode = module.SlotGameMode;
      PROMOTION_ERROR = module.PROMOTION_ERROR;
      WalletType = module.WalletType;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      NetworkState = module.NetworkState;
      NetworkEvent = module.NetworkEvent;
    }, function (module) {
      SlotText = module.SlotText;
    }, function (module) {
      gameCommonUtils = module.default;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      SlotSoundPlayer = module.SlotSoundPlayer;
    }, function (module) {
      PoolFactory = module.PoolFactory;
    }, function (module) {
      GameStateManager = module.GameStateManager;
    }, function (module) {
      EventListenerManager = module.EventListenerManager;
    }, function (module) {
      SpineSkeletonDatabase = module.SpineSkeletonDatabase;
    }, function (module) {
      EventNames = module.default;
    }, function (module) {
      formatWalletMoney = module.formatWalletMoney;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;

      cclegacy._RF.push({}, "99d055Vmh5MfptzAh3MqZWv", "Director", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Director = exports('Director', (_dec = ccclass('Director'), _dec2 = property({
        type: PoolFactory,
        visible: true,
        tooltip: "An unique Pool Factory to manage all instantiation in game"
      }), _dec3 = property({
        type: UIManager
      }), _dec4 = property({
        type: SlotSoundPlayer
      }), _dec5 = property({
        type: EventListenerManager
      }), _dec6 = property({
        type: JsonAsset
      }), _dec7 = property({
        type: SpineSkeletonDatabase
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Director, _Component);

        function Director() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "startGameOnStart", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "_poolFactory", _descriptor2, _assertThisInitialized(_this));

          _this.gameModes = [];

          _initializerDefineProperty(_this, "offlineMode", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "guiMgr", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "soundPlayer", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "eventManager", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tutorialData", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "spineSkeletonDatabase", _descriptor8, _assertThisInitialized(_this));

          _this.config = null;
          _this.dataStore = null;
          _this.eventId = null;
          _this.hidePopupPromotion = void 0;
          _this.networkState = NetworkState.NOT_CONNECT;
          _this.gameStateManager = null;
          _this.appHide = false;
          _this.totalSlotGame = 1;
          _this.currentGameMode = _this.gameModes[SlotGameMode.NormalGame];
          _this.resumeDelay = 0.3;
          _this.errorData = null;
          return _this;
        }

        var _proto = Director.prototype;

        _proto.onLoad = function onLoad() {
          //set up game model
          this.config = this.node["config"];
          this.dataStore = this.node["dataStore"]; // listen to setup game model for children nodes;

          this.node.on("GET_GAME_MODEL", this.setupGameModel, this); // listen event focus, blur game

          game.on(Game.EVENT_HIDE, this.onEventHide, this);
          game.on(Game.EVENT_SHOW, this.onEventShow, this);
          this.node.on('ON_GAME_FULL', this.onDisplayFull.bind(this));
          this.node.on('ON_GAME_THUMBNAIL', this.onDisplayThumbnail.bind(this));
          this.node.on('SET_UP_POOL_FACTORY', this.setUpPoolFactory.bind(this));
          this.node.on('SET_UP_UI_MANAGER', this.setUpUIManager.bind(this));
          this.node.on('SET_UP_SLOT_SOUND_MANAGER', this.setUpSoundManager.bind(this));
          this.node.on('SET_UP_SPINE_DATABASE', this.setUpSpineDatabase.bind(this));
          this.node.on('START_GAME', this.startGame.bind(this));
          this.node.on('FORCE_NETWORK_GLT', this.forceNetwork.bind(this));
          gameCommonUtils.handleReleaseBundle();

          if (gameCommonUtils.isLoginIframe()) {
            macro.ENABLE_MULTI_TOUCH = false;
          }
        };

        _proto.setUpPoolFactory = function setUpPoolFactory(evt) {
          evt.propagationStopped = true;

          if (evt.details) {
            this._poolFactory = evt.details.poolFactory;
          }
        };

        _proto.setEventId = function setEventId(eventId) {
          this.eventId = eventId;
        };

        _proto.getEventId = function getEventId() {
          return this.eventId;
        };

        _proto.setUpUIManager = function setUpUIManager(evt) {
          evt.propagationStopped = true;

          if (evt.details) {
            this.guiMgr = evt.details.guiMgr;
          }
        };

        _proto.setUpSpineDatabase = function setUpSpineDatabase(evt) {
          evt.propagationStopped = true;

          if (evt.details) {
            this.spineSkeletonDatabase = evt.details.spineSkeletonDatabase;
          }
        };

        _proto.setUpSoundManager = function setUpSoundManager(evt) {
          evt.propagationStopped = true;

          if (evt.details) {
            this.soundPlayer = evt.details.soundManager;
          }
        };

        _proto.setupGameModel = function setupGameModel(evt) {
          if (this.config) {
            evt.propagationStopped = true;
            evt.target.config = this.config;
            evt.target.dataStore = this.dataStore;
            evt.target.mainDirector = this;
          }
        };

        _proto.start = function start() {
          if (this.startGameOnStart) {
            this.startGame();
          }
        };

        _proto.startGame = function startGame() {
          if (!this.offlineMode) {
            connectNetwork.loginScene({
              callback: this.setUpGame.bind(this),
              gameId: this.node.config['GAME_ID'],
              callbackAuthFailed: this.loginFailed.bind(this)
            });
          }

          this.initGameMode();
        };

        _proto.enableButtonInteraction = function enableButtonInteraction() {
          for (var gameMode in this.gameModes) {
            this.gameModes[gameMode].emit('ENABLE_BUTTON_INTERACTION');
          }

          this.guiMgr.enableButtons();
        };

        _proto.initGameMode = function initGameMode() {
          //Binding game modes
          for (var gameMode in this.gameModes) {
            var isNormalGame = false;
            this.gameModes[gameMode].init(isNormalGame);
          } //4 modes: normalGame, freeGame, bonusGame. topUpGame


          this.dataStore.currentGameMode = SlotGameMode.NormalGame;
          this.currentGameMode = this.gameModes[SlotGameMode.NormalGame];
          this.currentGameMode && this.currentGameMode.enter();
        };

        _proto.onEventHide = function onEventHide() {
          log("GAME_HIDE");
          this.appHide = true;

          if (this.gameStateManager) {
            this.gameStateManager.gameOnPause();
          }
        };

        _proto.onEventShow = function onEventShow() {
          log("GAME_SHOW");
          this.appHide = false;

          if (this.gameStateManager) {
            this.gameStateManager.gameOnResume();
          }

          if (this.config.IS_SUPPORT_EVENT) {
            this.gameStateManager.getLastedQuest();
          }

          director.emit("EVENT_CLIENT2_RECONNECT");
        };

        _proto.loginFailed = function loginFailed() {
          log("[MainDirector] authFailed");

          this._showPopupHandleOutGame(SlotText.AUTHEN_FAILED, gameCommonUtils.handleBackLogin);
        };

        _proto.getServerVersion = function getServerVersion() {
          var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
              LOGIN_IFRAME = _loadConfigAsync$getC.LOGIN_IFRAME;

          var version = this.config.SERVER_VERSION || '';

          if (LOGIN_IFRAME) {
            version = gameCommonUtils.getUrlParam('gameVersion') || version;
          }

          return version;
        };

        _proto.setUpGame = function setUpGame() {
          var gameId = this.config.GAME_ID;
          if (this.config.HAS_GAME_EVENT === false) this.eventId = '0';
          var serverVersion = this.getServerVersion();

          if (sys.isBrowser) {
            var debugStats = gameCommonUtils.getUrlParam('stats');

            if (debugStats === 'true' || debugStats === 'false') {
              setDisplayStats(JSON.parse(debugStats));
            }
          }

          this.gameStateManager = globalNetwork.registerGame({
            gameState: GameStateManager,
            gameId: gameId,
            serverVersion: serverVersion,
            eventId: this.eventId,
            isSlotGame: true,
            stateUpdate: this._stateUpdate.bind(this),
            userLogout: this._userLogout.bind(this),
            joinGameSuccess: this._joinGameSuccess.bind(this),
            onJackpotWin: this._jackpotWin.bind(this),
            onJackpotWinAnnounce: this._jackpotWinAnnounce.bind(this),
            joinGameFailed: this._joinGameFailed.bind(this),
            networkUpdate: this._networkUpdate.bind(this),
            eventUpdate: this._eventUpdate.bind(this),
            updateTopUser: this._updateTopUser.bind(this),
            onWalletUpdate: this._onWalletUpdate.bind(this),
            onJoinGameDenied: this._onJoinGameDenied.bind(this)
          });
          if (this.gameStateManager && this.tutorialData) this.gameStateManager.bindTutorialData(this.tutorialData.json);
        };

        _proto.sendSpinToNetwork = function sendSpinToNetwork(gameMode, betData, betLines) {
          if (betData === void 0) {
            betData = '';
          }

          log("MainDirector] sendSpinToNetwork", {
            betData: betData,
            betLines: betLines,
            gameMode: gameMode
          });

          switch (gameMode) {
            case SlotGameMode.NormalGame:
              this.gameStateManager.triggerSpinRequest(betData, betLines, this.dataStore.getCurrentWalletType());
              break;

            case SlotGameMode.FreeGame:
              this.gameStateManager.triggerFreeSpinRequest();
              break;

            case SlotGameMode.BonusGame:
              this.gameStateManager.triggerMiniGame(betData);
              break;

            case SlotGameMode.TopUpGame:
              this.gameStateManager.triggerFreeSpinRequest();
              break;

            case SlotGameMode.RespinGame:
              this.gameStateManager.triggerRespinRequest();
              break;
          }
        };

        _proto.showTrialButtons = function showTrialButtons(isOn) {
          this.guiMgr.enableTrialBtn(isOn);
        };

        _proto.isPauseTutorialFlag = function isPauseTutorialFlag(flag) {
          return this.guiMgr && this.guiMgr.checkPauseTutorial(flag);
        };

        _proto.newGameMode = function newGameMode(_ref, callback) {
          var _this2 = this;

          var name = _ref.name,
              data = _ref.data;

          if (!this.gameModes[name]) {
            this.node.emit("LOAD_MODULE_BY_NAME", name, function () {
              // this.stopJackpotWin();
              _this2.gameModes[name].init();

              _this2.currentGameMode.hide();

              _this2.dataStore.currentGameMode = name;
              _this2.currentGameMode = _this2.gameModes[name];

              _this2.currentGameMode.enter(data, callback);
            });
          } else {
            // this.stopJackpotWin();
            this.currentGameMode.hide();
            this.dataStore.currentGameMode = name;
            this.currentGameMode = this.gameModes[name];
            this.currentGameMode.enter(data, callback);
          }
        };

        _proto.resumeGameMode = function resumeGameMode(_ref2, callback) {
          var name = _ref2.name;

          if (this.gameModes[name]) {
            this.dataStore.currentGameMode = name;
            this.currentGameMode = this.gameModes[name];
            this.currentGameMode.show(callback);
          }
        };

        _proto.freeSpinOptionTrigger = function freeSpinOptionTrigger(option) {
          this.gameStateManager.triggerFreeSpinOption(option);
        };

        _proto._stateUpdate = function _stateUpdate(data) {
          if (this.networkState == NetworkState.DISCONNECTED) {
            error("[MainDirector] stateUpdate come after user disconnect, please recheck flow");
            return;
          }

          if (this.dataStore.isTrialMode) {
            this.guiMgr.onUpdateTrialData(data);
          }

          if (this.guiMgr.isTutorialFinished()) {
            this.networkState = NetworkState.CONNECTED;
          }

          data = this.dataStore.formatData(data);
          log("[MainDirector] stateUpdate " + data);
          this.currentGameMode.stateUpdate(function () {});
        };

        _proto._stateResume = function _stateResume(data) {
          var _this3 = this;

          log("[MainDirector] stateResume " + data);
          data = this.dataStore.formatData(data);
          this.scheduleOnce(function () {
            _this3.currentGameMode.stateResume(function () {});
          }, this.resumeDelay);
        };

        _proto._userLogout = function _userLogout() {
          log("[MainDirector] userLogout");
          this.gameStateManager.outGame();
          this.networkState = NetworkState.DISCONNECTED;

          if (this.config.IS_SUPPORT_EVENT && !gameCommonUtils.isLoginIframe()) {
            this.node.dispatchEvent(new Event('USER_LOGOUT', true));
          } else {
            this._showPopupHandleOutGame(SlotText.ANOTHER_ACCOUNT, gameCommonUtils.handleBackLogin);
          }
        };

        _proto._showPopupHandleOutGame = function _showPopupHandleOutGame(text, cbHandler) {
          if (gameCommonUtils.isLoginIframe()) {
            var isShowButton = gameCommonUtils.checkConditionCloseGameIframe();
            var actionOK = null;

            if (isShowButton) {
              actionOK = gameCommonUtils.handleCloseGameIframe;
            }

            this.guiMgr.showDialog(text, actionOK, null, true);
          } else {
            this.guiMgr.showDialog(text, cbHandler, null, true);
          }
        };

        _proto._joinGameSuccess = function _joinGameSuccess(meta) {
          log("%c [MainDirector] joinGameSuccess", "color: red", meta);
          this.networkState = NetworkState.CONNECTED;
          var extendData = meta.extendData;
          var mBet = extendData.mBet,
              eBet = extendData.eBet,
              metaDataUser = extendData.metaDataUser,
              eData = extendData.eData;
          var currentWallets = metaDataUser.currentWallets;

          if (mBet) {
            this._initBetData(mBet, eBet);
          }

          this.enableButtonInteraction(); //update wallet if any

          if (currentWallets) {
            this.dataStore.updateWallets(currentWallets);
            this.guiMgr.updateWallet(this.dataStore.getWallets());
          }

          this.guiMgr.initJackpot(meta.jackpotInfo);
          this.gameStateManager.networkCallbackJP(this._jackpotUpdate.bind(this));

          if (meta.hasOwnProperty('dataResume')) {
            this._stateResume(meta.dataResume);

            this.gameModes[SlotGameMode.NormalGame].emit("SPIN_DISABLE");
            this.guiMgr.disableBet();
          } else {
            this._setUpAfterJoinGame();

            this.gameModes[SlotGameMode.NormalGame].emit("SPIN_ENABLE");
            this.guiMgr.enableBet();
          }

          if (eData) {
            if (this.config.IS_SUPPORT_EVENT) {
              this._initQuestData(eData);
            }
          }

          this.extendJoinGame(meta);
          this.dataStore.setWalletTypes(meta['wallet-types']);
          this.guiMgr.setWalletTypes(meta['wallet-types']);
          this.eventManager.emit(EventNames.JOIN_GAME_SUCCESS, {
            dataResume: meta.dataResume
          });
        };

        _proto._initQuestData = function _initQuestData(eData) {
          this.dataStore.getQuestData().initQuestData(eData);
          this.guiMgr.initQuest();
        };

        _proto._onJoinGameDenied = function _onJoinGameDenied() {
          var _this4 = this;

          if (!this.node) return;
          this.scheduleOnce(function () {
            var ACCOUNT_BLOCKED = _this4.config.MESSAGE_DIALOG.ACCOUNT_BLOCKED;

            _this4._showPopupHandleOutGame(ACCOUNT_BLOCKED, gameCommonUtils.handleBackLogin);
          }, 0.3);
        };

        _proto._initBetData = function _initBetData(mBet, eBet) {
          var listDataBet = mBet.split(',');
          var mainBets = {};
          listDataBet.forEach(function (item) {
            mainBets[item.split(';')[0][0]] = parseInt(item.split(';')[1]);
          });
          var extraBets = null;

          if (eBet) {
            extraBets = {};
            var lisExtraBetData = eBet.split(',');
            lisExtraBetData.forEach(function (item) {
              extraBets[item.split(';')[0][0]] = parseInt(item.split(';')[1]);
            });
          }

          this.dataStore.betData.updateBetData(mainBets, extraBets);
          this.guiMgr.initBet();
        };

        _proto.extendJoinGame = function extendJoinGame(meta) {
          var metaDataPromotion = meta.extendData.metaDataPromotion;
          var dataResume = meta.dataResume;
          if (!metaDataPromotion || !metaDataPromotion.promotionRemain) return;

          if (dataResume) {
            this.promotionUpdate(metaDataPromotion, true);
          } else {
            this.promotionUpdate(metaDataPromotion);
          }
        };

        _proto.promotionUpdate = function promotionUpdate(metaData, isResume) {
          if (isResume === void 0) {
            isResume = false;
          }

          if (metaData) {
            if (this.dataStore) {
              var betId = metaData.betId,
                  promotionRemain = metaData.promotionRemain,
                  promotionTotal = metaData.promotionTotal;
              this.dataStore.promotion = {
                promotionBetId: betId,
                promotionRemain: promotionRemain,
                promotionTotal: promotionTotal
              };
              this.showPromotionPopup(isResume);
            }
          }
        };

        _proto.showPromotionPopup = function showPromotionPopup(isResume) {
          var _this5 = this;

          if (isResume === void 0) {
            isResume = false;
          }

          if (isResume) return;
          this.guiMgr.disableBet();

          var actionBtnOK = function actionBtnOK() {};

          var actionCancel = null;
          var _this$dataStore$promo = this.dataStore.promotion,
              promotionRemain = _this$dataStore$promo.promotionRemain,
              promotionBetId = _this$dataStore$promo.promotionBetId;
          var _ref3 = this.dataStore,
              promotionErrorCode = _ref3.promotionErrorCode;
          this.guiMgr.setBetId(promotionBetId);
          var totalBetValue = this.dataStore.getTotalBet();
          var message = "B\u1EA1n \u0111\u01B0\u1EE3c t\u1EB7ng " + promotionRemain + " \nl\u01B0\u1EE3t quay mi\u1EC5n ph\xED, \nv\u1EDBi m\u1EE9c c\u01B0\u1EE3c " + formatWalletMoney(totalBetValue);

          if (promotionErrorCode) {
            switch (promotionErrorCode) {
              case PROMOTION_ERROR.RESET:
                message = "QU\xC0 T\u1EB6NG: " + promotionRemain + " l\u01B0\u1EE3t quay mi\u1EC5n ph\xED c\u1EE7a ng\xE0y m\u1EDBi (c\u01B0\u1EE3c " + formatWalletMoney(totalBetValue) + ")\nQUAY TI\u1EBEP NH\xC9!";
                break;

              case PROMOTION_ERROR.NEW:
                message = "QU\xC0 T\u1EB6NG: " + promotionRemain + " l\u01B0\u1EE3t quay mi\u1EC5n ph\xED (c\u01B0\u1EE3c " + formatWalletMoney(totalBetValue) + ")\nQUAY TI\u1EBEP NH\xC9!";
                break;
            }

            this.dataStore.promotionErrorCode = null;
          }

          this.guiMgr.showDialog(message, actionBtnOK, actionCancel);
          this.setUpPromotion();
          this.hidePopupPromotion = tween(this).delay(5).call(function () {
            _this5.guiMgr.hideDialog();

            _this5.hidePopupPromotion = null;
          }).start();
        };

        _proto.setUpPromotion = function setUpPromotion() {
          this.currentGameMode.emit("SETUP_PROMO_SPIN");
        };

        _proto._setUpAfterJoinGame = function _setUpAfterJoinGame() {
          this.guiMgr.enableTrialBtn(true);
          this.guiMgr.selectWallet();
        };

        _proto._joinGameFailed = function _joinGameFailed() {
          log("[MainDirector] joinGameFail");
          this.eventManager.emit(EventNames.JOIN_GAME_FAIL);
          this.networkState = NetworkState.DISCONNECTED;

          this._showPopupHandleOutGame(SlotText.AUTHEN_FAILED, gameCommonUtils.handleBackLogin);
        };

        _proto._jackpotWin = function _jackpotWin() {
          log("[MainDirector] jackpotWin"); //TODO: implement notify jackpot win
        };

        _proto._jackpotWinAnnounce = function _jackpotWinAnnounce(data, isMe) {
          log("[MainDirector] jackpotWinAnnounce: ", data, isMe); //TODO: implement notify jackpot win annouce
        };

        _proto._networkUpdate = function _networkUpdate(event, code, errorData) {
          if (code === void 0) {
            code = '';
          }

          if (errorData === void 0) {
            errorData = null;
          }

          log("[MainDirector] network event " + event + " " + code);
          if (this.networkState == NetworkState.DISCONNECTED) return;

          switch (event) {
            case NetworkEvent.FAIL_CONNECT_SERVER:
              this.onFailConnect();
              break;

            case NetworkEvent.SLOW_CONNECTION:
              this.onSlowConnect();
              break;

            case NetworkEvent.SOCKET_LOST_CONNECTION:
              this.onLostConnect();
              break;

            case NetworkEvent.SOCKET_RESUME_CONNECTION:
              this.onResumeConnect();
              break;

            case NetworkEvent.TIMEOUT_REQUEST_DIE:
              this.onTimeOutDie();
              break;

            case NetworkEvent.TIMEOUT_REQUEST_WAIT:
              this.onTimeOutWait();
              break;

            case NetworkEvent.WALLET_ERROR_CODE:
              this.onWalletError(code);
              break;

            case NetworkEvent.BACKEND_ERROR_CODE:
              this.onBackEndError(code);
              break;

            case NetworkEvent.PROMOTION_ERROR:
              this.errorData = errorData;
              this.onPromotionError(code);
              break;
          }
        };

        _proto.onFailConnect = function onFailConnect() {
          var message = SlotText.SYSTEM_ERROR;
          this.networkState = NetworkState.DISCONNECTED;
          this.guiMgr.showDialog(message, function () {});
        };

        _proto.onSlowConnect = function onSlowConnect() {
          if (this.guiMgr.isTutorialFinished()) {
            this.guiMgr.showToast(SlotText.NETWORK_WARNING);
          }
        };

        _proto.onLostConnect = function onLostConnect() {
          var message = SlotText.NETWORK_DISCONNECT;
          this.networkState = NetworkState.LOST_CONNECTION;

          this._showPopupHandleOutGame(message, function () {});
        };

        _proto.onResumeConnect = function onResumeConnect() {
          if (this.networkState == NetworkState.CONNECTED && this.dataStore.isTrialMode) {
            this.guiMgr.hideDialog();
          }

          if (this.networkState == NetworkState.LOST_CONNECTION || this.networkState == NetworkState.WAITING_RESPONSE) {
            this.guiMgr.hideDialog();
            this.networkState = NetworkState.CONNECTED;
          }
        };

        _proto.onTimeOutDie = function onTimeOutDie() {
          this.networkState = NetworkState.DISCONNECTED;
          var message = SlotText.SYSTEM_ERROR;

          var actionOK = function actionOK() {
            gameCommonUtils.handleFlowOutGame();
          };

          this._showPopupHandleOutGame(message, actionOK);
        };

        _proto.onTimeOutWait = function onTimeOutWait() {
          this.networkState = NetworkState.WAITING_RESPONSE;
          var message = SlotText.DISCONNECT;

          var actionOK = function actionOK() {
            gameCommonUtils.handleFlowOutGame();
          };

          this._showPopupHandleOutGame(message, actionOK);
        };

        _proto.onWalletError = function onWalletError(code) {
          var _this6 = this;

          var message = this.getMessageError(code);

          var actionOK = function actionOK() {
            var _this6$gameStateManag = _this6.gameStateManager._playerInfoStateManager.getWallets(),
                amount = _this6$gameStateManag.amount;

            _this6.dataStore.setCurrentWallet(amount);

            _this6.dataStore.resumeCurrentWallet();
          };

          this.guiMgr.showDialog(message, actionOK);
        };

        _proto.onBackEndError = function onBackEndError(code) {
          var _loadConfigAsync$getC2 = loadConfigAsync.getConfig(),
              LOGIN_IFRAME = _loadConfigAsync$getC2.LOGIN_IFRAME;

          var actionOK = function actionOK() {
            if (LOGIN_IFRAME) {
              gameCommonUtils.handleCloseGameIframe();
            } else {
              gameCommonUtils.handleFlowOutGame();
            }
          };

          var message = this.getMessageError(code);
          this.guiMgr.showDialog(message, actionOK);
        };

        _proto.onPromotionError = function onPromotionError(code) {
          var message = this.getMessageError(code);

          var _this$gameStateManage = this.gameStateManager._playerInfoStateManager.getWallets(),
              amount = _this$gameStateManage.amount;

          this.dataStore.setCurrentWallet(amount);
          this.dataStore.resumeCurrentWallet();

          var actionOK = function actionOK() {//
          };

          this.guiMgr.showDialog(message, actionOK);
        };

        _proto.getMessageError = function getMessageError(code) {
          var action = this.handleErrorCode(code);
          return action.message + ("\n(" + code + ")");
        };

        _proto.forceStopSpinning = function forceStopSpinning() {
          var _this7 = this;

          this.scheduleOnce(function () {
            _this7.currentGameMode.emit('STOP_WITH_RANDOM_MATRIX');
          }, 0.2);
          var promotion = this.dataStore.promotion;
          if (!promotion) return;
          var _this$dataStore$promo2 = this.dataStore.promotion,
              promotionRemain = _this$dataStore$promo2.promotionRemain,
              promotionTotal = _this$dataStore$promo2.promotionTotal;

          if (promotionTotal && promotionTotal > 0 && this.dataStore.currentGameMode == SlotGameMode.NormalGame) {
            var spinTimes = promotionTotal == promotionRemain ? Number(promotionTotal) : Number(promotionRemain || 0) + 1;
            this.currentGameMode.emit("UPDATE_SPINTIMES", spinTimes);
            this.dataStore.promotion.promotionRemain = spinTimes;
          }

          this.resetPlaysessionDataLastSpin();
        };

        _proto.handleErrorCode = function handleErrorCode(code) {
          var message = SlotText.SYSTEM_ERROR;
          this.forceStopSpinning();

          switch (code) {
            case '0000':
              code = '1000';
              this.networkState = NetworkState.DISCONNECTED;
              message = SlotText.SYSTEM_ERROR;
              break;

            case 'W2408':
            case 'W2500':
            case 'W2008':
            case 'W29999':
              message = SlotText.SYSTEM_ERROR;
              break;

            case '0001':
              if (this.config.IS_SUPPORT_EVENT && this.dataStore.getWalletTypes().length > 1) {
                var walletType = this.dataStore.getCurrentWalletType();

                if (walletType == WalletType.PROMOTE) {
                  message = SlotText.NO_MONEY_EVENT.replace("[wallet]", SlotText.WALLET_PROMOTE);
                } else {
                  message = SlotText.NO_MONEY_EVENT.replace("[wallet]", SlotText.WALLET_NORMAL);
                }
              } else {
                message = SlotText.NO_MONEY;
              }

              break;

            case '0007':
              message = SlotText.NO_PLAYSESSION;
              this.networkState = NetworkState.DISCONNECTED;
              break;

            case '0029':
              message = SlotText.GROUP_MAINTAIN;
              this.networkState = NetworkState.DISCONNECTED;
              break;

            case '0014':
              message = SlotText.NO_FREESPIN_OPTION;
              this.networkState = NetworkState.DISCONNECTED;
              break;

            case '0031':
              message = SlotText.EVENT_NOT_AVAILABLE;

            case 'W2001':
            case 'W2004':
              message = SlotText.SPIN_UNSUCCESS;
              break;

            case 'W2006':
            case 'W2007':
              message = SlotText.ACCOUNT_BLOCKED;
              break;

            case PROMOTION_ERROR.WRONG_BET:
            case PROMOTION_ERROR.RESET:
            case PROMOTION_ERROR.NEW:
            case PROMOTION_ERROR.EXPIRED:
              message = this.handlePromotionError(code);
              break;
          }

          return {
            message: message
          };
        };

        _proto._onWalletUpdate = function _onWalletUpdate(data) {
          this.dataStore.updateWallets(data);
        };

        _proto._jackpotUpdate = function _jackpotUpdate(data) {
          this.guiMgr.updateJackpot(data);
        };

        _proto.skipTutorialMode = function skipTutorialMode() {
          if (this.dataStore.isTrialMode) {
            this.gameStateManager.skipTutorial();
          }
        };

        _proto.onDisplayFull = function onDisplayFull(totalGame) {
          log("game display full");

          if (this.soundPlayer) {
            this.soundPlayer.loadCacheConfig();
            this.guiMgr.updateSoundSetting();
            this.soundPlayer.unmuteMusic();
            this.soundPlayer.unmuteAllEffects();
          }

          this.totalSlotGame = totalGame;
          this.dataStore.setHighPerformance();
          this.dataStore.isDisplayFullScreen = true;
          this.eventManager && this.eventManager.emit(EventNames.ON_CHANGE_PERFORMANCE, true);
          this.node.getComponentsInChildren(MotionStreak).forEach(function (it) {
            it.reset();
          });
          this.node.emit('UPDATE_POSITION');
        };

        _proto.onDisplayThumbnail = function onDisplayThumbnail() {
          if (this.soundPlayer) {
            this.soundPlayer.muteMusic();
            this.soundPlayer.muteAllEffects();
          }

          log("game display thumbnail");
          this.dataStore.setLowPerformance();
          this.dataStore.isDisplayFullScreen = false;
          this.eventManager && this.eventManager.emit(EventNames.ON_CHANGE_PERFORMANCE, false);
          this.node.getComponentsInChildren(MotionStreak).forEach(function (it) {
            it.reset();
          });
        };

        _proto._eventUpdate = function _eventUpdate(data) {
          var code = data.code,
              eventId = data.eventId,
              questId = data.questId,
              eData = data.eData; //this.dataStore.eventNotify(code, eventId, questId, eData);

          switch (code) {
            case '0032':
              {
                this.dataStore.questData.reset();
                this.dataStore.questData.active = false;
                this.guiMgr.refreshQuestUI();
              }
              break;

            case '0033':
              {
                this.dataStore.questData.active = true;
                this.guiMgr.refreshQuestUI();
              }
              break;

            case '0034':
              {
                this.dataStore.questData.active = false;
                this.guiMgr.refreshQuestUI();
              }
              break;

            case '0037':
              {
                this.dataStore.questData.active = true;
                this.guiMgr.refreshQuestUI();
              }
              break;
            //quest close

            case '0039':
              {
                log("[DataStore] event force close " + eventId + " " + questId);
                this.dataStore.questData.active = false;
                this.guiMgr.forceCloseEvent();
              }
              break;
            //quest completed

            case '0038':
              {
                this.dataStore.questData.reset();

                if (eData) {
                  this.dataStore.questData.active = true;
                  this.dataStore.questData.initQuestData(eData);
                  this.guiMgr.initQuest();
                } else {
                  error("new quest error eData is null");
                }
              }
              break;

            case '0040':
              {
                log("[DataStore] Quest complete " + eventId + " " + questId + " " + eData);
                var eventInfo = this.dataStore.questData.eventInfo;
                var isCurrentGame = eventInfo.isCurrentGame;
                var playedAnimWin = eventInfo.playedAnimWin;
                this.dataStore.questData.questComplete(eData);
                var isEventFinished = eventInfo.isFinished;

                if (!isCurrentGame) {
                  log('not current game, update ui immediatly');
                  this.guiMgr.refreshQuestUI();

                  if (isEventFinished) {
                    this.guiMgr.finishEvent(null);
                  }
                } else if (isEventFinished) {
                  log('event finished, wait for anim');
                  var showedAnim = this.dataStore.questData.showedAnim;

                  if (!showedAnim) {
                    this.dataStore.questData.playingFinish = true;
                  } else {
                    log('event finished, check next event');
                    this.getNextEvent();
                  }
                } else if (playedAnimWin) {
                  log('refresh event');
                  this.guiMgr.refreshQuestUI();
                } else {
                  log('something wrong');
                }
              }
              break;

            case '0041':
              {
                log("[DataStore] New event comming " + eventId + " " + questId + " " + eData);
                var playingFinish = this.dataStore.questData.playingFinish;
                this.dataStore.questData.reset();

                if (eData) {
                  if (!playingFinish) {
                    this.dataStore.questData.active = true;
                    this.dataStore.questData.initQuestData(eData);
                    this.guiMgr.initQuest();
                  }
                } else {
                  this.dataStore.questData.active = false;
                  this.guiMgr.refreshQuestUI();
                }
              }
              break;
          }
        };

        _proto.getNextEvent = function getNextEvent() {
          log('[Director] try get next event');

          if (this.config.IS_SUPPORT_EVENT) {
            this.gameStateManager.getLastedQuest();
          }
        };

        _proto._updateTopUser = function _updateTopUser(data) {
          var userList = data.userList,
              userOnline = data.ccu;
          if (this.guiMgr) this.guiMgr.topUserUpdate(userList, userOnline);
        };

        _proto.forceNetwork = function forceNetwork(event) {
          var isForced = event.userData.isForced;
          this.gameStateManager.onForceGetLatestedState(isForced);
        };

        _proto.showPopUpCloseGame = function showPopUpCloseGame() {
          var _this8 = this;

          var actionBackToLobby = function actionBackToLobby() {
            if (_this8.soundPlayer) {
              _this8.soundPlayer.playSFXClick();

              _this8.soundPlayer.stopAllAudio();
            }

            gameCommonUtils.handleCloseGameIframe();
          };

          var updatedEvent = new Event('SHOW_POP_UP_CLOSE_GAME', true);
          updatedEvent.dialogContent = {
            actionOK: actionBackToLobby,
            actionCancel: function actionCancel() {}
          };
          this.node.dispatchEvent(updatedEvent);
        };

        _proto.onDestroy = function onDestroy() {
          if (this.hidePopupPromotion) {
            this.hidePopupPromotion.stop();
            this.hidePopupPromotion = null;
          }

          if (this.gameStateManager) {
            this.gameStateManager.outGame();
          }
        };

        _proto.handlePromotionError = function handlePromotionError(code) {
          var message = SlotText.SYSTEM_ERROR;

          switch (code) {
            case PROMOTION_ERROR.WRONG_BET:
            case PROMOTION_ERROR.RESET:
            case PROMOTION_ERROR.NEW:
              //Format this.errorData is either an Array or Object
              if (this.errorData) {
                var metaData;
                var promotion;

                if (this.errorData[0] && this.errorData[0].metaData) {
                  metaData = this.errorData[0].metaData;
                  promotion = metaData.promotion || null;
                } else {
                  var _error = this.errorData.error;

                  if (_error[0] && _error[0].metaData) {
                    metaData = _error[0].metaData;
                    promotion = metaData.promotion || null;
                  }
                }

                if (promotion) {
                  var promotionData = promotion.split(';');
                  var updatedData = {
                    betId: promotionData[0],
                    promotionRemain: Number(promotionData[1]),
                    promotionTotal: Number(promotionData[2])
                  };
                  this.dataStore.promotionErrorCode = code;
                  this.promotionUpdate(updatedData);
                }
              }

              break;

            case PROMOTION_ERROR.EXPIRED:
              message = SlotText.PROMOTION_EXPIRED;
              this.dataStore.promotion = null;
          }

          return message;
        };

        _proto.resetPlaysessionDataLastSpin = function resetPlaysessionDataLastSpin() {
          // Reset data last spin here
          if (!this.dataStore.playSession || Object.keys(this.dataStore.playSession).length == 0) return;

          if (this.dataStore.playSession.winAmount) {
            this.dataStore.playSession.winAmount = 0;
          }

          if (this.dataStore.playSession.winAmountPS) {
            this.dataStore.playSession.winAmountPS = 0;
          }
        };

        _createClass(Director, [{
          key: "poolFactory",
          get: function get() {
            return this._poolFactory;
          }
        }]);

        return Director;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "startGameOnStart", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_poolFactory", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "offlineMode", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "guiMgr", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "soundPlayer", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "eventManager", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "tutorialData", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "spineSkeletonDatabase", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DotsHistory.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "ce146S9s0xBJqTizQi+3E6w", "DotsHistory", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var DotsHistory = exports('DotsHistory', (_dec = ccclass('DotsHistory'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(DotsHistory, _Component);

        function DotsHistory() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "jackpotDot", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "topupDot", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bonusDot", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "freeDot", _descriptor4, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = DotsHistory.prototype;

        _proto.onLoad = function onLoad() {
          this.node.on('SHOW_DOTS', this.showDots, this);
        };

        _proto.showDots = function showDots(data) {
          this.jackpotDot.active = false;
          this.topupDot.active = false;
          this.bonusDot.active = false;
          this.freeDot.active = false;
          if (data.totalJpWinAmount) this.jackpotDot.active = true;
          if (data.totalTopupWinAmount || data.topUpGameTotal) this.topupDot.active = true;
          if (data.totalBonusWinAmount || data.bonusGameTotal) this.bonusDot.active = true;
          if (data.totalFreeWinAmount || data.freeGameTotal) this.freeDot.active = true;
        };

        return DotsHistory;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "jackpotDot", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "topupDot", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "bonusDot", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "freeDot", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DragAndDrop.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, CCInteger, UITransform, view, sys, Vec3, Event, tween, v3, Component, setOpacity;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      CCInteger = module.CCInteger;
      UITransform = module.UITransform;
      view = module.view;
      sys = module.sys;
      Vec3 = module.Vec3;
      Event = module.Event;
      tween = module.tween;
      v3 = module.v3;
      Component = module.Component;
    }, function (module) {
      setOpacity = module.setOpacity;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "b45efPGuT5Lb5dYd+h06SUQ", "DragAndDrop", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var DraggAndDrop = exports('DraggAndDrop', (_dec = ccclass('DraggAndDrop'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(CCInteger), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(DraggAndDrop, _Component);

        function DraggAndDrop() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.deltaX = 0;
          _this.deltaY = 0;
          _this.originalY = 0;
          _this.originalX = 0;

          _initializerDefineProperty(_this, "dragHolder", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "overlay", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "opacity", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "stickToBorder", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "borderOffsetX", _descriptor5, _assertThisInitialized(_this));

          _this.moveTween = null;
          _this.dragging = false;
          _this.borderLeftX = 0;
          _this.borderRightX = 0;
          _this.startPosition = null;
          return _this;
        }

        var _proto = DraggAndDrop.prototype;

        _proto.onLoad = function onLoad() {
          if (!this.dragHolder) return;
          this.dragHolder.on(Node.EventType.TOUCH_START, this._onDragStart, this);
          this.dragHolder.on(Node.EventType.TOUCH_MOVE, this._onDragMove, this);
          this.dragHolder.on(Node.EventType.TOUCH_END, this._onDragEnd, this);

          if (this.overlay) {
            this.overlay.on(Node.EventType.TOUCH_END, this._onOverlayTouchEnd, this);
          }

          if (!this.dragHolder.getComponent(UITransform)) {
            this.dragHolder.addComponent(UITransform);
          }

          this.calculateBorder();
          globalThis.multislot = this;
        };

        _proto.calculateBorder = function calculateBorder() {
          var maxWidth = view.getDesignResolutionSize().width;
          if (sys.isNative) maxWidth = view.getVisibleSize().width;
          this.borderLeftX = -maxWidth / 2 + this.borderOffsetX;
          this.borderRightX = maxWidth / 2 - this.borderOffsetX;
        };

        _proto._onDragStart = function _onDragStart(event) {
          this.startPosition = new Vec3(this.node.position.x, this.node.position.y, this.node.position.z);
          this.dragging = true;
          if (this.overlay) this.overlay.active = true;
          this.originalX = this.dragHolder.position.x;
          this.originalY = this.dragHolder.position.y;
          this.deltaX = event.getLocationX() - this.dragHolder.position.x;
          this.deltaY = event.getLocationY() - this.dragHolder.position.y;
          setOpacity(this.dragHolder, 100);
        };

        _proto._onDragMove = function _onDragMove(event) {
          if (!this.dragging) return;
          this.dragging = true;
          var delta = event.getUIDelta();
          var fullWidth = view.getVisibleSize().width;
          var fullHeight = view.getVisibleSize().height;

          var _this$dragHolder$getC = this.dragHolder.getComponent(UITransform),
              width = _this$dragHolder$getC.width,
              height = _this$dragHolder$getC.height;

          var minX = -fullWidth / 2 + width / 2;
          var maxX = fullWidth / 2 - width / 2;
          var minY = -fullHeight / 2 + height / 2;
          var maxY = fullHeight / 2 - height / 2;
          var moveX = this.dragHolder.position.x + delta.x;
          var moveY = this.dragHolder.position.y + delta.y;

          if (moveX < minX) {
            moveX = minX;
          } else if (moveX > maxX) {
            moveX = maxX;
          }

          if (moveY < minY) {
            moveY = minY;
          } else if (moveY > maxY) {
            moveY = maxY;
          }

          this.dragHolder.setPosition(moveX, moveY);
        };

        _proto._onDragEnd = function _onDragEnd(event) {
          var distance = Math.sqrt(Math.pow(this.dragHolder.position.x - this.originalX, 2) + Math.pow(this.dragHolder.position.y - this.originalY, 2));

          if (distance < 10) {
            this.node.dispatchEvent(new Event('BACK_TO_MULTI', true));
          }

          this.dragging = false;
          var ev = new Event('REQUEST_POSITION', true);
          ev['startPosition'] = this.startPosition;
          this.node.dispatchEvent(ev);
          setOpacity(this.dragHolder, 255);
        };

        _proto.easeOutBack = function easeOutBack(x) {
          var c1 = 1.70158;
          var c3 = c1 + 1;
          return 1 + c3 * Math.pow(x - 1, 3) + c1 * Math.pow(x - 1, 2);
        };

        _proto.moveToLeft = function moveToLeft(time) {
          var _this2 = this;

          var moveTime = _.clamp(time, 0.8, 1.2);

          this.moveTween = tween(this.node).to(moveTime, {
            position: v3(this.borderLeftX, this.node.position.y, this.node.position.z)
          }, {
            easing: function easing(t) {
              return _this2.easeOutBack(t);
            }
          }).start();
        };

        _proto.moveToRight = function moveToRight(time) {
          var _this3 = this;

          var moveTime = _.clamp(time, 0.8, 1.2);

          this.moveTween = tween(this.node).to(moveTime, {
            position: v3(this.borderRightX, this.node.position.y, this.node.position.z)
          }, {
            easing: function easing(t) {
              return _this3.easeOutBack(t);
            }
          }).start();
        };

        _proto._onOverlayTouchEnd = function _onOverlayTouchEnd(event) {
          if (this.overlay) this.overlay.active = false;
          setOpacity(this.dragHolder, this.opacity);
        };

        _proto.onDestroy = function onDestroy() {
          if (this.moveTween) {
            this.moveTween.stop();
          }

          if (this.dragHolder) {
            this.dragHolder.off(Node.EventType.TOUCH_START, this._onDragStart, this);
            this.dragHolder.off(Node.EventType.TOUCH_MOVE, this._onDragMove, this);
            this.dragHolder.off(Node.EventType.TOUCH_END, this._onDragEnd, this);
          }

          if (this.overlay) this.overlay.off(Node.EventType.TOUCH_END, this._onDragEnd, this);
        };

        return DraggAndDrop;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "dragHolder", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "overlay", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "opacity", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 180;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "stickToBorder", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "borderOffsetX", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 30;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DragAndDropSpine.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, CCInteger, UITransform, view, sys, Vec3, Event, tween, v3, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      CCInteger = module.CCInteger;
      UITransform = module.UITransform;
      view = module.view;
      sys = module.sys;
      Vec3 = module.Vec3;
      Event = module.Event;
      tween = module.tween;
      v3 = module.v3;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "80a4fwlJN9KAIstNQ0LurDo", "DragAndDropSpine", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var DragAndDropSpine = exports('DragAndDropSpine', (_dec = ccclass('DragAndDropSpine'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(CCInteger), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(DragAndDropSpine, _Component);

        function DragAndDropSpine() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.deltaX = 0;
          _this.deltaY = 0;
          _this.originalY = 0;
          _this.originalX = 0;

          _initializerDefineProperty(_this, "dragHolder", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "overlay", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "opacity", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "stickToBorder", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "borderOffsetX", _descriptor5, _assertThisInitialized(_this));

          _this.moveTween = null;
          _this.dragging = false;
          _this.borderLeftX = 0;
          _this.borderRightX = 0;
          _this.startPosition = null;
          return _this;
        }

        var _proto = DragAndDropSpine.prototype;

        _proto.onLoad = function onLoad() {
          if (!this.dragHolder) return;
          this.dragHolder.on(Node.EventType.TOUCH_START, this._onDragStart, this);
          this.dragHolder.on(Node.EventType.TOUCH_MOVE, this._onDragMove, this);
          this.dragHolder.on(Node.EventType.TOUCH_END, this._onDragEnd, this);

          if (this.overlay) {
            this.overlay.on(Node.EventType.TOUCH_END, this._onOverlayTouchEnd, this);
          }

          if (!this.dragHolder.getComponent(UITransform)) {
            this.dragHolder.addComponent(UITransform);
          }

          this.calculateBorder();
          globalThis.multislot = this;
        };

        _proto.calculateBorder = function calculateBorder() {
          var maxWidth = view.getDesignResolutionSize().width;
          if (sys.isNative) maxWidth = view.getVisibleSize().width;
          this.borderLeftX = -maxWidth / 2 + this.borderOffsetX;
          this.borderRightX = maxWidth / 2 - this.borderOffsetX;
        };

        _proto._onDragStart = function _onDragStart(event) {
          this.startPosition = new Vec3(this.node.position.x, this.node.position.y, this.node.position.z);
          this.dragging = true;
          if (this.overlay) this.overlay.active = true;
          this.originalX = this.dragHolder.position.x;
          this.originalY = this.dragHolder.position.y;
          this.deltaX = event.getLocationX() - this.dragHolder.position.x;
          this.deltaY = event.getLocationY() - this.dragHolder.position.y;
        };

        _proto._onDragMove = function _onDragMove(event) {
          if (!this.dragging) return;
          this.dragging = true;
          var delta = event.getUIDelta();
          var fullWidth = view.getVisibleSize().width;
          var fullHeight = view.getVisibleSize().height;

          var _this$dragHolder$getC = this.dragHolder.getComponent(UITransform),
              width = _this$dragHolder$getC.width,
              height = _this$dragHolder$getC.height;

          var minX = -fullWidth / 2 + width / 2;
          var maxX = fullWidth / 2 - width / 2;
          var minY = -fullHeight / 2 + height / 2;
          var maxY = fullHeight / 2 - height / 2;
          var moveX = this.dragHolder.position.x + delta.x;
          var moveY = this.dragHolder.position.y + delta.y;

          if (moveX < minX) {
            moveX = minX;
          } else if (moveX > maxX) {
            moveX = maxX;
          }

          if (moveY < minY) {
            moveY = minY;
          } else if (moveY > maxY) {
            moveY = maxY;
          }

          this.dragHolder.setPosition(moveX, moveY);
        };

        _proto._onDragEnd = function _onDragEnd(event) {
          var distance = Math.sqrt(Math.pow(this.dragHolder.position.x - this.originalX, 2) + Math.pow(this.dragHolder.position.y - this.originalY, 2));

          if (distance < 10) {
            this.node.dispatchEvent(new Event('BACK_TO_MULTI', true));
          }

          this.dragging = false;
          var ev = new Event('REQUEST_POSITION', true);
          ev['startPosition'] = this.startPosition;
          this.node.dispatchEvent(ev);
        };

        _proto.easeOutBack = function easeOutBack(x) {
          var c1 = 1.70158;
          var c3 = c1 + 1;
          return 1 + c3 * Math.pow(x - 1, 3) + c1 * Math.pow(x - 1, 2);
        };

        _proto.moveToLeft = function moveToLeft(time) {
          var _this2 = this;

          var moveTime = _.clamp(time, 0.8, 1.2);

          this.moveTween = tween(this.node).to(moveTime, {
            position: v3(this.borderLeftX, this.node.position.y, this.node.position.z)
          }, {
            easing: function easing(t) {
              return _this2.easeOutBack(t);
            }
          }).start();
        };

        _proto.moveToRight = function moveToRight(time) {
          var _this3 = this;

          var moveTime = _.clamp(time, 0.8, 1.2);

          this.moveTween = tween(this.node).to(moveTime, {
            position: v3(this.borderRightX, this.node.position.y, this.node.position.z)
          }, {
            easing: function easing(t) {
              return _this3.easeOutBack(t);
            }
          }).start();
        };

        _proto._onOverlayTouchEnd = function _onOverlayTouchEnd(event) {
          if (this.overlay) this.overlay.active = false;
        };

        _proto.onDestroy = function onDestroy() {
          if (this.moveTween) {
            this.moveTween.stop();
          }

          if (this.dragHolder) {
            this.dragHolder.off(Node.EventType.TOUCH_START, this._onDragStart, this);
            this.dragHolder.off(Node.EventType.TOUCH_MOVE, this._onDragMove, this);
            this.dragHolder.off(Node.EventType.TOUCH_END, this._onDragEnd, this);
          }

          if (this.overlay) this.overlay.off(Node.EventType.TOUCH_END, this._onDragEnd, this);
        };

        return DragAndDropSpine;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "dragHolder", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "overlay", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "opacity", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 180;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "stickToBorder", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "borderOffsetX", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 30;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Draggable.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, CCInteger, view, UITransform, sys, Event, tween, v3, GameObject;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      CCInteger = module.CCInteger;
      view = module.view;
      UITransform = module.UITransform;
      sys = module.sys;
      Event = module.Event;
      tween = module.tween;
      v3 = module.v3;
    }, function (module) {
      GameObject = module.GameObject;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "10808PO81pPibTRRS6Rlvlz", "Draggable", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Draggable = exports('Draggable', (_dec = ccclass('Draggable'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(CCInteger), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(Draggable, _GameObject);

        function Draggable() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;
          _this.deltaX = 0;
          _this.deltaY = 0;
          _this.originalY = 0;
          _this.originalX = 0;

          _initializerDefineProperty(_this, "dragHolder", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "overlay", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "opacity", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "stickToBorder", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "borderOffsetX", _descriptor5, _assertThisInitialized(_this));

          _this.moveTween = null;
          _this.dragging = false;
          _this.borderLeftX = 0;
          _this.borderRightX = 0;
          return _this;
        }

        var _proto = Draggable.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          if (!this.dragHolder) return;
          this.dragHolder.on(Node.EventType.TOUCH_START, this._onDragStart, this);
          this.dragHolder.on(Node.EventType.TOUCH_MOVE, this._onDragMove, this);
          this.dragHolder.on(Node.EventType.TOUCH_END, this._onDragEnd, this);
          this.node.on(Node.EventType.MOUSE_UP, this.moveToBorder, this);
          this.node.on(Node.EventType.TOUCH_CANCEL, this.moveToBorder, this);
          view.on('canvas-resize', this._thisOnResized, this);

          if (this.overlay) {
            this.overlay.on(Node.EventType.TOUCH_END, this._onOverlayTouchEnd, this);
          }

          if (!this.dragHolder.getComponent(UITransform)) {
            this.dragHolder.addComponent(UITransform);
          }

          this.calculateBorder();
          globalThis.multislot = this;
        };

        _proto.calculateBorder = function calculateBorder() {
          var maxWidth = view.getDesignResolutionSize().width;
          if (sys.isNative) maxWidth = view.getVisibleSize().width;
          this.borderLeftX = -maxWidth / 2 + this.borderOffsetX;
          this.borderRightX = maxWidth / 2 - this.borderOffsetX;
        };

        _proto._onDragStart = function _onDragStart(event) {
          this.dragging = true;
          if (this.overlay) this.overlay.active = true;
          this.originalX = this.dragHolder.position.x;
          this.originalY = this.dragHolder.position.y;
          this.deltaX = event.getLocationX() - this.dragHolder.position.x;
          this.deltaY = event.getLocationY() - this.dragHolder.position.y;
          this.setOpacity(this.dragHolder, 255);
        };

        _proto._onDragMove = function _onDragMove(event) {
          if (!this.dragging) return;
          this.dragging = true;
          var delta = event.getUIDelta();
          var fullWidth = view.getVisibleSize().width;
          var fullHeight = view.getVisibleSize().height;

          var _this$dragHolder$getC = this.dragHolder.getComponent(UITransform),
              width = _this$dragHolder$getC.width,
              height = _this$dragHolder$getC.height;

          var minX = -fullWidth / 2 + width / 2;
          var maxX = fullWidth / 2 - width / 2;
          var minY = -fullHeight / 2 + height / 2;
          var maxY = fullHeight / 2 - height / 2;
          var moveX = this.dragHolder.position.x + delta.x;
          var moveY = this.dragHolder.position.y + delta.y;

          if (moveX < minX) {
            moveX = minX;
          } else if (moveX > maxX) {
            moveX = maxX;
          }

          if (moveY < minY) {
            moveY = minY;
          } else if (moveY > maxY) {
            moveY = maxY;
          }

          this.dragHolder.setPosition(moveX, moveY);
        };

        _proto._onDragEnd = function _onDragEnd(event) {
          var distance = Math.sqrt(Math.pow(this.dragHolder.position.x - this.originalX, 2) + Math.pow(this.dragHolder.position.y - this.originalY, 2));

          if (distance < 10) {
            this.node.dispatchEvent(new Event('BACK_TO_MULTI', true));
          }

          this.dragging = false;

          if (this.stickToBorder) {
            this.moveToBorder();
          }
        };

        _proto.moveToBorder = function moveToBorder() {
          this.calculateBorder();
          var distanceLeft = Math.abs(this.node.position.x - this.borderLeftX);
          var distanceRight = Math.abs(this.borderRightX - this.node.position.x);

          if (this.moveTween) {
            this.moveTween.stop();
          }

          if (distanceLeft <= distanceRight) this.moveToLeft(distanceLeft / 300);else this.moveToRight(distanceRight / 300);
        };

        _proto.easeOutBack = function easeOutBack(x) {
          var c1 = 1.70158;
          var c3 = c1 + 1;
          return 1 + c3 * Math.pow(x - 1, 3) + c1 * Math.pow(x - 1, 2);
        };

        _proto.moveToLeft = function moveToLeft(time) {
          var _this2 = this;

          var moveTime = _.clamp(time, 0.8, 1.2);

          this.moveTween = tween(this.node).to(moveTime, {
            position: v3(this.borderLeftX, this.node.position.y, this.node.position.z)
          }, {
            easing: function easing(t) {
              return _this2.easeOutBack(t);
            }
          }).start();
        };

        _proto.moveToRight = function moveToRight(time) {
          var _this3 = this;

          var moveTime = _.clamp(time, 0.8, 1.2);

          this.moveTween = tween(this.node).to(moveTime, {
            position: v3(this.borderRightX, this.node.position.y, this.node.position.z)
          }, {
            easing: function easing(t) {
              return _this3.easeOutBack(t);
            }
          }).start();
        };

        _proto._onOverlayTouchEnd = function _onOverlayTouchEnd(event) {
          if (this.overlay) this.overlay.active = false;
          this.setOpacity(this.dragHolder, this.opacity);
        };

        _proto.onDestroy = function onDestroy() {
          if (this.moveTween) {
            this.moveTween.stop();
          }

          if (this.dragHolder) {
            this.dragHolder.off(Node.EventType.TOUCH_START, this._onDragStart, this);
            this.dragHolder.off(Node.EventType.TOUCH_MOVE, this._onDragMove, this);
            this.dragHolder.off(Node.EventType.TOUCH_END, this._onDragEnd, this);
          }

          if (this.overlay) this.overlay.off(Node.EventType.TOUCH_END, this._onDragEnd, this);
        };

        return Draggable;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "dragHolder", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "overlay", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "opacity", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 180;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "stickToBorder", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "borderOffsetX", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 30;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Dragon1998.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfEventEmitter.ts', './gfActionHelper.ts', './DataStore1998.ts', './gfBaseEvents.ts', './Config1998.ts', './gfDragon.ts', './gfDragonCacheData.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, UIOpacity, Color, BoxCollider2D, Vec3, gfEventEmitter, stopAllActions, DataStore1998, gfBaseEvents, Config1998, gfDragon, BoneCacheValue;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      UIOpacity = module.UIOpacity;
      Color = module.Color;
      BoxCollider2D = module.BoxCollider2D;
      Vec3 = module.Vec3;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      stopAllActions = module.stopAllActions;
    }, function (module) {
      DataStore1998 = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      Config1998 = module.default;
    }, function (module) {
      gfDragon = module.gfDragon;
    }, function (module) {
      BoneCacheValue = module.BoneCacheValue;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "d5047MlCA1Bkru45hpxgUGa", "Dragon1998", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var animationList = ["Swim In", "Swim Loop", "Swim Out"];
      var TIME_ANIM_SWIM_IN = 5.997;
      var TIME_ANIM_SWIM_LOOP = 29.985;
      var TIME_ANIM_SWIM_OUT = 5.997;
      var BASE_TIME_SCALE = 0.667;
      var TOTAL_LIVE_TIME = 42;
      var Dragon1998 = exports('Dragon1998', (_dec = ccclass('Dragon1998'), _dec(_class = /*#__PURE__*/function (_gfDragon) {
        _inheritsLoose(Dragon1998, _gfDragon);

        function Dragon1998() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfDragon.call.apply(_gfDragon, [this].concat(args)) || this;
          _this._isLeft = void 0;
          return _this;
        }

        var _proto = Dragon1998.prototype; //TODO

        _proto.initFishData = function initFishData(data) {
          this._isDie = false;
          this._isOutScreen = true;
          this.node.getComponent(UIOpacity).opacity = 255;
          this.node.active = true;
          this._FishID = data.FishID;
          this._FishKind = data.FishKind;
          this._isLeft = data.isL;
          this.unscheduleAllCallbacks();
          this.fishAnim.color = Color.WHITE;
          stopAllActions(this.fishAnim.node);
          var timeLost = data.BuildTick ? Math.max(0, (DataStore1998.instance.getTime() - data.BuildTick) / 1000) : 0;
          var timeRemain = TOTAL_LIVE_TIME - timeLost;

          if (!this._isLoaded) {
            this.setupBones();
          }

          this.startMoving(timeRemain);
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_SOUND_BACKGROUND, Config1998.instance.SOUND_BACKGROUND_CONFIG.DRAGON);
        };

        _proto.setupBones = function setupBones() {
          this.listBox = this.node.getComponentsInChildren(BoxCollider2D);
          this.durationMap = {};

          for (var i = 0; i < animationList.length; i++) {
            var animName = animationList[i];
            var pos = this.fishAnim.skeletonData._skeletonJson.animations[animName].paths['Path Loop'].position;
            var duration = pos[pos.length - 1].time / BASE_TIME_SCALE;
            this.durationMap[animName] = duration;
          }

          this.listBoneName = ["Head", "Body 3", "Body 6", "Body 9", "Body 12", "Body 15", "Body 18", "Body 21", "Body 24", "Body 27", "Body 30", "Body 33", "Body 36", "Body 39", "Body 42", "Body 45", "Body 47", "All Tail Position"];
          this.bone = [];

          for (var _i = 0; _i < this.listBoneName.length; _i++) {
            this.bone[_i] = this.fishAnim.findBone(this.listBoneName[_i]);
          }

          this._isLoaded = true;
        };

        _proto.setDragonAnim = function setDragonAnim(trackInd, animName, loop, timePassed) {
          if (timePassed === void 0) {
            timePassed = 0;
          }

          if (!this._isDie) {
            if (animName === "Swim In" || animName === "Swim Out") {
              this.schedule(this.checkOutScreen, 0.2);
            } else {
              this.unschedule(this.checkOutScreen);
              this._isOutScreen = false;
            }
          }

          this.fishAnim.setAnimation(trackInd, animName, loop);

          if (timePassed > 0) {
            // @ts-ignore
            cc.sys.isNative ? this.fishAnim._updateRealtime(timePassed) : this.fishAnim.updateAnimation(timePassed);
          }

          this.curAnimTime = timePassed;
          this.curAnimName = animName;

          if (!BoneCacheValue[animName]) {
            BoneCacheValue[animName] = [];
          }
        };

        _proto.startMoving = function startMoving(timeRemain) {
          var _this2 = this;

          this.node.setPosition(new Vec3(Config1998.instance.AppSize.Width / 2, Config1998.instance.AppSize.Height / 2));
          this.fishAnim.timeScale = BASE_TIME_SCALE;

          if (timeRemain <= TIME_ANIM_SWIM_OUT) {
            this.setDragonAnim(0, "Swim Out", false, TIME_ANIM_SWIM_OUT - timeRemain);
            this.fishAnim.setCompleteListener(function () {});
          } else if (timeRemain <= TIME_ANIM_SWIM_OUT + TIME_ANIM_SWIM_LOOP) {
            var swimLoopTimeLeft = timeRemain - TIME_ANIM_SWIM_OUT;
            this.setDragonAnim(0, "Swim Loop", false, TIME_ANIM_SWIM_LOOP - swimLoopTimeLeft);
            this.fishAnim.setCompleteListener(function () {
              _this2.setDragonAnim(0, "Swim Out", false);

              _this2.fishAnim.setCompleteListener(function () {});
            });
          } else {
            var swimInTimeLeft = timeRemain - TIME_ANIM_SWIM_OUT - TIME_ANIM_SWIM_LOOP;
            var timePassed = Math.max(TIME_ANIM_SWIM_IN - swimInTimeLeft, 0);
            var animSwimInName = "Swim In";
            this.setDragonAnim(0, animSwimInName, false, timePassed);
            this.fishAnim.setCompleteListener(function () {
              _this2.setDragonAnim(0, "Swim Loop", false);

              _this2.fishAnim.setCompleteListener(function () {
                _this2.setDragonAnim(0, "Swim Out", false);

                _this2.fishAnim.setCompleteListener(function () {});
              });
            });
          }
        };

        return Dragon1998;
      }(gfDragon)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DragonBall1998.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfActionHelper.ts', './gfEventEmitter.ts', './gfBaseEvents.ts', './gfUtilities.ts', './gfDragonBall.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, UITransform, v3, Vec3, tween, setOpacity, getRandomInt, fadeIn, fadeOut, rotateBy, moveTo, scaleTo, gfEventEmitter, gfBaseEvents, autoEnum, gfDragonBall;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      UITransform = module.UITransform;
      v3 = module.v3;
      Vec3 = module.Vec3;
      tween = module.tween;
    }, function (module) {
      setOpacity = module.setOpacity;
      getRandomInt = module.getRandomInt;
    }, function (module) {
      fadeIn = module.fadeIn;
      fadeOut = module.fadeOut;
      rotateBy = module.rotateBy;
      moveTo = module.moveTo;
      scaleTo = module.scaleTo;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      autoEnum = module.autoEnum;
    }, function (module) {
      gfDragonBall = module.gfDragonBall;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "9677aHGykZCb4Kxh3dSSGOy", "DragonBall1998", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var STATE = autoEnum(["Invalid", "Dropping", "InTray", "InJackpotStar"]);
      var DragonBall1998 = exports('DragonBall1998', (_dec = ccclass('DragonBall1998'), _dec(_class = /*#__PURE__*/function (_gfDragonBall) {
        _inheritsLoose(DragonBall1998, _gfDragonBall);

        function DragonBall1998() {
          return _gfDragonBall.apply(this, arguments) || this;
        }

        var _proto = DragonBall1998.prototype;

        _proto.dropToPlayer = function dropToPlayer(dragonPosition, playerBallHolder, deskStation) {
          var _this = this;

          var destination = this.node.parent.getComponent(UITransform).convertToNodeSpaceAR(playerBallHolder.getComponent(UITransform).convertToWorldSpaceAR(v3(0, 0)));
          setOpacity(this.ballSprite.node, 0);
          setOpacity(this.ballSpark, 0);
          setOpacity(this.hitGlow, 0);
          setOpacity(this.hitLight, 0);
          setOpacity(this.frontEff, 0); //@ts-ignore

          this._state = STATE.Dropping;
          var dropTime = 0.5;
          var sparkTime = 0.25;
          var zoomTime = 1;
          var stopTime = 0.5;
          var randomX = getRandomInt(-200, 200);
          var randomY = getRandomInt(-150, 150);
          var randomPos = new Vec3(randomX, randomY, 0);
          this.node.setPosition(dragonPosition);
          tween(this.ballSpark).then(fadeIn(sparkTime)).then(fadeOut(sparkTime)).start();
          tween(this.node).delay(sparkTime).call(function () {
            _this.frontEff.active = true;
            _this.backEff.active = true;
            setOpacity(_this.frontEff, 255);
            setOpacity(_this.backEff, 255);

            _this.frontEff.scale.set(v3(0, 0, 0));

            _this.backEff.scale.set(v3(0, 0, 0));

            tween(_this.frontEff).to(zoomTime, {
              scale: v3(1, 1, 1)
            }).start();
            tween(_this.frontEff).to(zoomTime, {
              scale: v3(1, 1, 1)
            }).start();
            tween(_this.backEff).repeatForever(rotateBy(1, 360)).start();

            _this.fireEfx.scale.set(v3(0, 0, 0));

            setOpacity(_this.fireEfx, 255);
            _this.fireEfx.active = true;
            tween(_this.fireEfx).to(zoomTime, {
              scale: v3(2.5, 2.5, 1)
            }).start();
            tween(_this.fireEfx).repeatForever(rotateBy(1, 360)).start();
          }).delay(zoomTime).parallel(moveTo(stopTime, randomPos.x, randomPos.y), tween().call(function () {
            tween(_this.frontEff).then(fadeOut(0.1)).start();
            tween(_this.ballSprite).then(fadeIn(0.1)).start();
          })).delay(stopTime).parallel(moveTo(dropTime, destination.x, destination.y), scaleTo(dropTime, this.baseScale)).call(function () {
            _this.addToPlayer(playerBallHolder); //@ts-ignore


            _this._state = STATE.InTray;
            gfEventEmitter.instance.emit(gfBaseEvents.DRAGON.DONE_BALL_DROP, deskStation);
          }).start();
        };

        return DragonBall1998;
      }(gfDragonBall)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DropSpecialGun1998.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfDropSpecialGunFX.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, tween, gfDropSpecialGunFX;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      tween = module.tween;
    }, function (module) {
      gfDropSpecialGunFX = module.gfDropSpecialGunFX;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "9b72ejUQoVKEL34NUgr5VSh", "DropSpecialGun1998", undefined);

      var ccclass = _decorator.ccclass;
      var DropSpecialGun1998 = exports('DropSpecialGun1998', (_dec = ccclass('DropSpecialGun1998'), _dec(_class = /*#__PURE__*/function (_gfDropSpecialGunFX) {
        _inheritsLoose(DropSpecialGun1998, _gfDropSpecialGunFX);

        function DropSpecialGun1998() {
          return _gfDropSpecialGunFX.apply(this, arguments) || this;
        }

        var _proto = DropSpecialGun1998.prototype;

        _proto.onDrop = function onDrop() {
          this.node.angle = this.node.angle - 90;
          return tween().delay(.85);
        };

        _proto.onFly = function onFly() {
          return tween().to(1, {
            position: this.endPosition
          });
        };

        _proto.onFinish = function onFinish() {
          var _this = this;

          return tween().delay(0.85).call(function () {
            _this.node.removeFromParent();

            _this.node.destroy();

            typeof _this.callBack === 'function' && _this.callBack(_this);
          });
        };

        return DropSpecialGun1998;
      }(gfDropSpecialGunFX)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DummyData.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "81bc4J+5GlL/abiTddM4Eq8", "DummyData", undefined);

      var demoData = exports('default', [{
        id: 1,
        speed: 50,
        path: [{
          "r": 23,
          "c": 10
        }, {
          "r": 23,
          "c": 11
        }, {
          "r": 23,
          "c": 12
        }, {
          "r": 23,
          "c": 13
        }, {
          "r": 22,
          "c": 13
        }, {
          "r": 22,
          "c": 14
        }, {
          "r": 22,
          "c": 15
        }, {
          "r": 22,
          "c": 16
        }, {
          "r": 22,
          "c": 17
        }, {
          "r": 22,
          "c": 18
        }, {
          "r": 22,
          "c": 19
        }, {
          "r": 23,
          "c": 19
        }, {
          "r": 24,
          "c": 19
        }, {
          "r": 25,
          "c": 19
        }, {
          "r": 26,
          "c": 19
        }]
      }, {
        id: 2,
        speed: 30,
        path: [{
          "r": 23,
          "c": 10
        }, {
          "r": 23,
          "c": 11
        }, {
          "r": 23,
          "c": 12
        }, {
          "r": 23,
          "c": 13
        }, {
          "r": 22,
          "c": 13
        }, {
          "r": 22,
          "c": 14
        }, {
          "r": 22,
          "c": 15
        }, {
          "r": 22,
          "c": 16
        }, {
          "r": 22,
          "c": 17
        }, {
          "r": 22,
          "c": 18
        }, {
          "r": 22,
          "c": 19
        }, {
          "r": 23,
          "c": 19
        }, {
          "r": 24,
          "c": 19
        }, {
          "r": 25,
          "c": 19
        }, {
          "r": 26,
          "c": 19
        }]
      }]);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DynamicLoadingPrefabControl.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BaseDynamicLoading.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, sys, instantiate, BaseDynamicLoading;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sys = module.sys;
      instantiate = module.instantiate;
    }, function (module) {
      BaseDynamicLoading = module.BaseDynamicLoading;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "2046cH/FqhEXZmB9tebq2iz", "DynamicLoadingPrefabControl", undefined);

      var ccclass = _decorator.ccclass;
      var DynamicLoadingPrefabControl = exports('DynamicLoadingPrefabControl', (_dec = ccclass('DynamicLoadingPrefabControl'), _dec(_class = /*#__PURE__*/function (_BaseDynamicLoading) {
        _inheritsLoose(DynamicLoadingPrefabControl, _BaseDynamicLoading);

        function DynamicLoadingPrefabControl() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseDynamicLoading.call.apply(_BaseDynamicLoading, [this].concat(args)) || this;
          _this._isHighPerformance = false;
          _this._usingObjects = [];
          _this._isLoaded = false;
          return _this;
        }

        var _proto = DynamicLoadingPrefabControl.prototype;

        _proto.onLoad = function onLoad() {
          _BaseDynamicLoading.prototype.onLoad.call(this);
        } //dnvuanh remove causing bad performance

        /*onEnable(){
            if(this.eventManager){
                this.eventManager.on(EventNames.ON_CHANGE_PERFORMANCE, this.onChangePerformance, this);
            }
        };
         onDisable(){
            if(this.eventManager){
                this.eventManager.off(EventNames.ON_CHANGE_PERFORMANCE, this.onChangePerformance, this);
            }
        }*/
        ;

        _proto.onChangePerformance = function onChangePerformance(isHighPer) {
          var _this2 = this;

          this._isHighPerformance = isHighPer;

          if (isHighPer) {
            if (this._isLoaded) return;
            this.createObjectsAsyncByPaths(function () {
              if (!_this2._isHighPerformance) {
                _this2.destroyDynamicLoadingObjects();
              }
            });
          } else {
            this.destroyDynamicLoadingObjects();
          }
        };

        _proto.createObjectsAsyncByPaths = function createObjectsAsyncByPaths(completeCB) {
          var _this3 = this;

          if (completeCB === void 0) {
            completeCB = null;
          }

          if (!this._localBundle) return;
          var count = 0;

          var _loop = function _loop(i) {
            var assetPathConfig = _this3.assetPaths[i];

            if (assetPathConfig) {
              _this3._dynamicLoadByPath(assetPathConfig.path, assetPathConfig.id, assetPathConfig.parentNode, function (prefab) {
                if (_this3._isHighPerformance) {
                  var node = instantiate(prefab);
                  node.active = true;
                  node.parent = assetPathConfig.parentNode;

                  _this3._usingObjects.push(node);
                }

                count++;

                if (count >= _this3.assetPaths.length) {
                  completeCB && completeCB();
                }
              });
            }
          };

          for (var i = 0; i < this.assetPaths.length; i++) {
            _loop(i);
          }

          this._isLoaded = true;
        };

        _proto.onAssetBundleReady = function onAssetBundleReady() {
          var _this4 = this;

          if (!this._isLoaded) {
            this._isHighPerformance = true;
            this.createObjectsAsyncByPaths(function () {
              if (!_this4._isHighPerformance) {
                _this4.destroyDynamicLoadingObjects();
              }
            });
          }
        };

        _proto.destroyDynamicLoadingObjects = function destroyDynamicLoadingObjects() {
          for (var i = 0; i < this._usingObjects.length; i++) {
            var node = this._usingObjects[i];

            if (node) {
              node.destroy();
            }
          }

          this._usingObjects = []; // this.clearResourcesLoaded();

          this._isLoaded = false;

          if (sys.isNative) {
            sys.garbageCollect();
          }
        };

        return DynamicLoadingPrefabControl;
      }(BaseDynamicLoading)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EffectDragon1998.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfEventEmitter.ts', './gfBaseEvents.ts', './gfEffectDragon.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, gfEventEmitter, gfBaseEvents, GfEffectDragon;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      GfEffectDragon = module.GfEffectDragon;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "ffe90OxwpdHZbpdtdbVQk/E", "EffectDragon1998", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var EffectDragon1998 = exports('EffectDragon1998', (_dec = ccclass('EffectDragon1998'), _dec(_class = /*#__PURE__*/function (_GfEffectDragon) {
        _inheritsLoose(EffectDragon1998, _GfEffectDragon);

        function EffectDragon1998() {
          return _GfEffectDragon.apply(this, arguments) || this;
        }

        var _proto = EffectDragon1998.prototype;

        _proto.showJackpotWinAmountPopup = function showJackpotWinAmountPopup() {
          gfEventEmitter.instance.emit(gfBaseEvents.CUT_SCENE.SHOW_CUT_SCENE, "JackpotWinPopup1998", this.endData);
        };

        return EffectDragon1998;
      }(GfEffectDragon)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EffectLayer1989.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfEffectLayer.ts', './gfReferenceManager.ts', './utils.ts', './gfEventEmitter.ts', './gfBaseEvents.ts', './gfPoolManager.ts', './gfBaseConfig.ts', './gfUtilities.ts', './gfActionHelper.ts', './MapConfig.ts', './gfDataStore.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, SpriteFrame, Node, UITransform, Vec3, tween, gfEffectLayer, gfReferenceManager, getPostionInOtherNode, setOpacity, gfEventEmitter, gfBaseEvents, gfPoolManager, gfBaseConfig, SetZIndex, formatCoin, v3f, moveBy, fadeIn, scaleTo, fadeOut, moveTo, MapConfig, gfDataStore;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SpriteFrame = module.SpriteFrame;
      Node = module.Node;
      UITransform = module.UITransform;
      Vec3 = module.Vec3;
      tween = module.tween;
    }, function (module) {
      gfEffectLayer = module.gfEffectLayer;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      getPostionInOtherNode = module.getPostionInOtherNode;
      setOpacity = module.setOpacity;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfPoolManager = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      SetZIndex = module.SetZIndex;
      formatCoin = module.formatCoin;
    }, function (module) {
      v3f = module.v3f;
      moveBy = module.moveBy;
      fadeIn = module.fadeIn;
      scaleTo = module.scaleTo;
      fadeOut = module.fadeOut;
      moveTo = module.moveTo;
    }, function (module) {
      MapConfig = module.MapConfig;
    }, function (module) {
      gfDataStore = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "e404ei7P8pHk6Qrz2aMx4N+", "EffectLayer1989", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var EffectLayer1989 = exports('EffectLayer1989', (_dec = ccclass('EffectLayer1989'), _dec2 = property(SpriteFrame), _dec3 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_gfEffectLayer) {
        _inheritsLoose(EffectLayer1989, _gfEffectLayer);

        function EffectLayer1989() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfEffectLayer.call.apply(_gfEffectLayer, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "listFishAvt", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "coinHolder", _descriptor2, _assertThisInitialized(_this));

          _this._mapConfig = null;
          return _this;
        }

        var _proto = EffectLayer1989.prototype;

        _proto.onLoad = function onLoad() {
          var _this2 = this;

          _gfEffectLayer.prototype.onLoad.call(this);

          if (this.bigWinWheels && this.bigWinWheels.length > 0) {
            this.bigWinWheels.forEach(function (bigWinItem) {
              bigWinItem.setUpListAvatarIcon(_this2.listFishAvt);
              SetZIndex(bigWinItem.node.parent, gfBaseConfig.instance.Z_INDEX.BIGWIN);
            });
          }

          this._mapConfig = new MapConfig({
            gridSizeX: 30,
            gridSizeY: 30,
            gridWidth: 96,
            gridHeight: 48
          });
        };

        _proto.playNetFX = function playNetFX(data) {
          var hitPos = data.hitPos,
              isBulletHole = data.isBulletHole,
              BulletMultiple = data.BulletMultiple,
              angle = data.angle;
          var netFX = gfPoolManager.instance.getNetFX(data);
          var bulletKind = gfDataStore.instance.getBulletIndex(BulletMultiple);
          if (!netFX) return;

          if (isBulletHole) {
            netFX.node.setScale(v3f(1 + bulletKind * 0.2));
            netFX.node.angle = angle - 145;
          }

          netFX.node.setParent(this.node);
          SetZIndex(netFX.node, gfBaseConfig.instance.Z_INDEX.NETFX);
          netFX.node.position = this.node.getComponent(UITransform).convertToNodeSpaceAR(hitPos);
        };

        _proto.playCoinReward = function playCoinReward(rewardData) {
          var data = rewardData.data,
              fishPos = rewardData.fishPos,
              fishKind = rewardData.fishKind,
              footPos = rewardData.footPos;
          var GoldReward = data.GoldReward,
              BulletMultiple = data.BulletMultiple,
              isSkill = data.isSkill,
              DeskStation = data.DeskStation,
              skipUpdateWallet = data.skipUpdateWallet;
          var footPosition = this.node.getComponent(UITransform).convertToNodeSpaceAR(footPos);
          var beganPos = this.node.getComponent(UITransform).convertToNodeSpaceAR(fishPos);
          var isBigWin = GoldReward >= BulletMultiple * gfBaseConfig.instance.BIG_WIN_RATIO.BIG_WIN_VALUE;

          if (isBigWin && !isSkill && !skipUpdateWallet) {
            var player = gfReferenceManager.instance.getPlayerByDeskStation(DeskStation);
            if (!player || GoldReward == 0) return;
            this.onPlayEffectWinInCatchFish({
              player: player,
              gold: GoldReward,
              bet: BulletMultiple,
              fishKind: fishKind
            });
          }

          this._playWinEffect({
            deskStation: DeskStation,
            fishKind: fishKind,
            beganPos: beganPos,
            goldReward: GoldReward,
            isSkill: isSkill,
            bet: BulletMultiple,
            skipUpdateWallet: skipUpdateWallet,
            footPos: footPosition,
            isBigWin: isBigWin
          });
        };

        _proto._playWinEffect = function _playWinEffect(data) {
          var deskStation = data.deskStation,
              goldReward = data.goldReward,
              beganPos = data.beganPos;
          var player = gfReferenceManager.instance.getPlayerByDeskStation(deskStation);
          if (!player || goldReward == 0) return;
          var LABEL_WIDTH = 150;
          var LABEL_HEIGHT = 25;
          var _BaseConfig$instance$ = gfBaseConfig.instance.realSize,
              Width = _BaseConfig$instance$.Width,
              Height = _BaseConfig$instance$.Height;
          var x = Math.min(Math.max(beganPos.x, -Width / 2 - LABEL_WIDTH / 2), Width / 2 - LABEL_WIDTH / 2);
          var y = Math.min(Math.max(beganPos.y, -Height / 2 - LABEL_HEIGHT / 2), Height / 2 - LABEL_HEIGHT / 2);
          var myInfo = player.isMe ? gfReferenceManager.instance.getPlayerLayer().getMyUserInfo() : player.avatar.node;
          data.labelPosition = new Vec3(x, y, 1);
          data.endPos = getPostionInOtherNode(this.node, myInfo);
          data.isMe = player.isMe;

          this._playCoinAnim(data);

          this._playCoinLabelEffect(data);
        };

        _proto._playCoinAnim = function _playCoinAnim(data) {
          var _this3 = this;

          var goldReward = data.goldReward,
              bet = data.bet,
              beganPos = data.beganPos,
              isSkill = data.isSkill,
              deskStation = data.deskStation,
              playBigWin = data.playBigWin,
              skipUpdateWallet = data.skipUpdateWallet,
              footPos = data.footPos,
              isBigWin = data.isBigWin;

          var _this$calculateCoinFo = this.calculateCoinForce(goldReward, bet),
              coinCount = _this$calculateCoinFo.coinCount,
              force = _this$calculateCoinFo.force;

          var player = gfReferenceManager.instance.getPlayerByDeskStation(deskStation);

          if (!isSkill && !playBigWin) {
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.EFFECT_CATCH);
          }

          if (!player) return;

          var _loop = function _loop(i) {
            var coinFx = player.isMe ? gfPoolManager.instance.getCoin(gfBaseConfig.instance.COIN_TYPE.MY_COIN) : gfPoolManager.instance.getCoin(gfBaseConfig.instance.COIN_TYPE.OTHER_COIN);
            coinFx['_animState'] = null;
            coinFx.node.setParent(_this3.node);
            coinFx.node.setPosition(beganPos);
            coinFx.index = i;
            coinFx.startAnimation(0);
            coinFx.setOpacity(0);
            SetZIndex(coinFx.node, gfBaseConfig.instance.Z_INDEX.COIN);
            if (coinFx['_animState']) coinFx['_animState'].setTime(Math.random()); //random time play coin

            coinFx.node.setScale(v3f(_this3.randRange(0.12, 0.2))); //random scale 0.12=> 0.2

            var _this3$getRandomByGri = _this3.getRandomByGrid(footPos, -0.6 * force, 0.6 * force),
                xRandom = _this3$getRandomByGri.xRandom,
                yRandom = _this3$getRandomByGri.yRandom; //random 1.5 grid


            var explosionX = xRandom - (xRandom - footPos.x) * 0.5;

            var explosionY = beganPos.y + force * _this3.randRange(30, 60);

            tween(coinFx.node).then(fadeIn(0.01)).then(moveTo(0.2 * force, explosionX, explosionY, 0)).then(moveTo(0.3 * force, xRandom, yRandom, 0, 'quadInOut')).call(function () {
              coinFx.node.setParent(_this3.coinHolder);
            }).delay(0.3 + 0.01 * i).parallel(moveTo(0.25, xRandom, yRandom + 80, 0, 'bounceIn'), fadeOut(0.25)).call(function () {
              if (!skipUpdateWallet && i === 0 && data.isMe && !isBigWin) {
                player.addToDisplayWallet(goldReward);
              }

              coinFx.stopAnimation();
            }).start();
          };

          for (var i = 0; i < coinCount; ++i) {
            _loop(i);
          }
        };

        _proto.getRandomByGrid = function getRandomByGrid(currentPos, min, max) {
          var _this$_mapConfig$posi = this._mapConfig.positionToGridFloat(currentPos.x, currentPos.y),
              X = _this$_mapConfig$posi.X,
              Y = _this$_mapConfig$posi.Y;

          X += this.randRange(min, max);
          Y += this.randRange(min, max);

          var _this$_mapConfig$grid = this._mapConfig.gridToPosition(X, Y),
              x = _this$_mapConfig$grid.x,
              y = _this$_mapConfig$grid.y;

          return {
            xRandom: x,
            yRandom: y
          };
        };

        _proto.randRange = function randRange(min, max) {
          return min + Math.random() * (max - min);
        };

        _proto.calculateCoinForce = function calculateCoinForce(goldReward, bullet) {
          var totalMultiply = goldReward / bullet;
          var coinCount = 0;
          var force = 0;

          if (totalMultiply <= 10) {
            //Tier 1
            coinCount = 3;
            force = 0.9;
          } else if (totalMultiply <= 30) {
            //Tier 2
            coinCount = 8;
            force = 1;
          } else if (totalMultiply <= 60) {
            //Tier 3
            coinCount = 15;
            force = 1.1;
          } else if (totalMultiply <= 400) {
            //Tier 4
            coinCount = 30;
            force = 1.2;
          } else {
            coinCount = 70;
            force = 1.25;
          }

          return {
            coinCount: coinCount,
            force: force
          };
        };

        _proto._playCoinLabelEffect = function _playCoinLabelEffect(data) {
          var goldReward = data.goldReward,
              labelPosition = data.labelPosition,
              isMe = data.isMe;
          var label = gfPoolManager.instance.getLabelCoin(isMe);
          this.node.addChild(label.node);
          label.setString("+" + formatCoin(goldReward));
          label.node.setPosition(labelPosition.x, labelPosition.y, gfBaseConfig.instance.Z_INDEX.COIN_LABEL);
          SetZIndex(label.node, gfBaseConfig.instance.Z_INDEX.COIN_LABEL);
          setOpacity(label.node, 1);
          tween(label.node).delay(0.5).parallel(moveBy(0.25, 0, 10, 0), fadeIn(0.2)).delay(0.3).parallel(scaleTo(0.3, 1.5), fadeOut(0.25)).call(function () {
            label.returnPool();
          }).start();
        };

        _proto.userExitBoard = function userExitBoard(data) {
          var player = gfReferenceManager.instance.getPlayerByDeskStation(data.DeskStation);

          var wheel = this._getWheel(player.index);

          if (!player || !wheel) return;
          wheel.onUserExitBoard();
          wheel.hideAnimation(false);
        };

        _proto.update = function update() {
          this.coinHolder.children.sort(function (a, b) {
            return b.position.y - a.position.y;
          });
        };

        return EffectLayer1989;
      }(gfEffectLayer), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "listFishAvt", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "coinHolder", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EffectLayer1998.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfActionHelper.ts', './gfEffectLayer.ts', './gfBaseEvents.ts', './Config1998.ts', './gfEventEmitter.ts', './gfReferenceManager.ts', './utils.ts', './gfPoolManager.ts', './gfUtilities.ts', './DataStore1998.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, UITransform, v2, instantiate, tween, v3, v3f, fadeIn, moveTo, gfEffectLayer, gfBaseEvents, Config1998, gfEventEmitter, gfReferenceManager, getPostionInOtherNode, getRandomInt, gfPoolManager, registerEvent, SetZIndex, v2Distance, DataStore1998;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      UITransform = module.UITransform;
      v2 = module.v2;
      instantiate = module.instantiate;
      tween = module.tween;
      v3 = module.v3;
    }, function (module) {
      v3f = module.v3f;
      fadeIn = module.fadeIn;
      moveTo = module.moveTo;
    }, function (module) {
      gfEffectLayer = module.gfEffectLayer;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      Config1998 = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      getPostionInOtherNode = module.getPostionInOtherNode;
      getRandomInt = module.getRandomInt;
    }, function (module) {
      gfPoolManager = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      SetZIndex = module.SetZIndex;
      v2Distance = module.v2Distance;
    }, function (module) {
      DataStore1998 = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "2bf5cHTBslGcakoYCJ5ngto", "EffectLayer1998", undefined);

      var ccclass = _decorator.ccclass;
      var EffectLayer1998 = exports('EffectLayer1998', (_dec = ccclass('EffectLayer1998'), _dec(_class = /*#__PURE__*/function (_gfEffectLayer) {
        _inheritsLoose(EffectLayer1998, _gfEffectLayer);

        function EffectLayer1998() {
          return _gfEffectLayer.apply(this, arguments) || this;
        }

        var _proto = EffectLayer1998.prototype;

        _proto.initEvents = function initEvents() {
          _gfEffectLayer.prototype.initEvents.call(this);

          registerEvent(gfBaseEvents.EFFECT_LAYER.LUCKY_EFFECT_FISH, this.playLuckyEffect, this);
          registerEvent(gfBaseEvents.EFFECT_LAYER.PLAY_LUCKY_EFFECT_DONE, this.onPlayLuckyEffectDone, this);
        };

        _proto.playCoinReward = function playCoinReward(rewardData) {
          var data = rewardData.data,
              fishPos = rewardData.fishPos,
              fishKind = rewardData.fishKind;

          if (fishPos) {
            fishPos = this.node.getComponent(UITransform).convertToNodeSpaceAR(fishPos);
          } else if (data.skillID === Config1998.instance.SkillConfig.LASER) {
            fishPos = this.getRandomPositionOutScreenByLaser(data);
          } else {
            fishPos = this.getRandomPositionOutScreen();
          }

          var isBigwin = data.GoldReward >= data.BulletMultiple * Config1998.instance.BIG_WIN_RATIO.BIG_WIN_VALUE;

          if (isBigwin && !data.isSkill && !data.skipUpdateWallet) {
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHAKE_SCREEN, {
              timeOneStep: 0.05,
              amplitude: 6
            });

            this._playBigWinEffect({
              deskStation: data.DeskStation,
              beganPos: fishPos,
              gold: data.GoldReward,
              bet: data.BulletMultiple,
              isSkill: data.isSkill,
              fishKind: fishKind
            });
          } else {
            var skipUpdateWallet = data.skipUpdateWallet;

            if (!skipUpdateWallet && data.isSkill) {
              var player = gfReferenceManager.instance.getPlayerByDeskStation(data.DeskStation);
              skipUpdateWallet = !this._getWheel(player.index).isShowingDragonBall();
            }

            this._playCoinEffect({
              deskStation: data.DeskStation,
              fishKind: fishKind,
              beganPos: fishPos,
              goldReward: data.GoldReward,
              isSkill: data.isSkill,
              bulletMultiple: data.BulletMultiple,
              skipUpdateWallet: skipUpdateWallet
            });
          }
        };

        _proto._playCoinEffect = function _playCoinEffect(data) {
          var _this = this;

          var deskStation = data.deskStation,
              beganPos = data.beganPos,
              goldReward = data.goldReward,
              isSkill = data.isSkill,
              bulletMultiple = data.bulletMultiple,
              skipUpdateWallet = data.skipUpdateWallet;

          if (goldReward === 0) {
            return;
          }

          var player = gfReferenceManager.instance.getPlayerByDeskStation(deskStation);
          var endPos = getPostionInOtherNode(this.node, player.wallet.node);

          if (isSkill) {
            gfPoolManager.instance.createSmallExplosion({
              position: beganPos
            });
            this.scheduleOnce(function () {
              _this.playEffectCoin({
                beganPos: beganPos,
                goldReward: goldReward,
                bulletMultiple: bulletMultiple,
                endPos: endPos,
                isSkill: isSkill,
                player: player,
                deskStation: deskStation,
                skipUpdateWallet: skipUpdateWallet
              });
            }, 0.8);
          } else {
            this.playEffectCoin({
              beganPos: beganPos,
              goldReward: goldReward,
              bulletMultiple: bulletMultiple,
              endPos: endPos,
              isSkill: isSkill,
              player: player,
              deskStation: deskStation,
              skipUpdateWallet: skipUpdateWallet
            });
          }
        };

        _proto.playEffectCoin = function playEffectCoin(data) {
          var beganPos = data.beganPos,
              goldReward = data.goldReward,
              bulletMultiple = data.bulletMultiple,
              endPos = data.endPos,
              isSkill = data.isSkill,
              player = data.player,
              deskStation = data.deskStation,
              skipUpdateWallet = data.skipUpdateWallet;
          var LABEL_WIDTH = 150;
          var LABEL_HEIGHT = 25;
          var _GameConfig$instance$ = Config1998.instance.realSize,
              Width = _GameConfig$instance$.Width,
              Height = _GameConfig$instance$.Height;
          var x = Math.min(Math.max(beganPos.x, -Width / 2 - LABEL_WIDTH / 2), Width / 2 - LABEL_WIDTH / 2);
          var y = Math.min(Math.max(beganPos.y, -Height / 2 - LABEL_HEIGHT / 2), Height / 2 - LABEL_HEIGHT / 2);
          var labelPosition = v2(x, y);

          this._playCoinLabelEffect({
            goldReward: goldReward,
            bulletMultiple: bulletMultiple,
            labelPosition: labelPosition,
            beganPos: beganPos,
            endPos: endPos,
            isSkill: isSkill,
            isMe: player.isMe,
            deskStation: deskStation,
            skipUpdateWallet: skipUpdateWallet
          });
        };

        _proto._playCoinAnim = function _playCoinAnim(data) {
          var _this2 = this;

          var goldReward = data.goldReward,
              bulletMultiple = data.bulletMultiple,
              beganPos = data.beganPos,
              endPos = data.endPos,
              isSkill = data.isSkill,
              deskStation = data.deskStation,
              playBigWin = data.playBigWin,
              skipUpdateWallet = data.skipUpdateWallet;
          var coinCount = this.calculateCoin(goldReward, bulletMultiple);

          if (!isSkill && !playBigWin) {
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.EFFECT_CATCH);
          }

          var player = gfReferenceManager.instance.getPlayerByDeskStation(deskStation);

          var _loop = function _loop(i) {
            var coinFx = player.isMe ? gfPoolManager.instance.getCoin(Config1998.instance.COIN_TYPE.MY_COIN) : gfPoolManager.instance.getCoin(Config1998.instance.COIN_TYPE.OTHER_COIN);
            coinFx.node.setPosition(beganPos.x, beganPos.y, 0);
            coinFx.index = i;
            SetZIndex(coinFx.node, Config1998.instance.Z_INDEX.COIN);

            _this2.node.addChild(coinFx.node);

            coinFx.startAnimation(0);
            coinFx.node.setScale(v3f(0.4));
            coinFx.setOpacity(0);
            var xRandom = i % 2 === 0 ? 15 + Math.random() * 5 : -(5 + Math.random() * 15);
            xRandom *= i;
            var yRandom = getRandomInt(-5, 5) * 7.5 - 50;
            var moveTime = v2Distance(beganPos, endPos) / 1500;
            var action = tween(coinFx.node);
            action.then(fadeIn(0.25));
            action.then(moveTo(0.175, beganPos.x + xRandom / 2, beganPos.y + 100, coinFx.node.position.z));
            action.call(function () {
              if (data.isMe && coinFx.index === 0 && !isSkill) {
                gfEventEmitter.instance.emit(gfBaseEvents.SOUND.EFFECT_GOLD);
              }
            });
            action.then(moveTo(0.5, beganPos.x + xRandom, beganPos.y + yRandom, coinFx.node.position.z, 'bounceOut'));
            action.delay(0.15 + 0.1 * i);
            action.then(moveTo(moveTime, endPos.x, endPos.y, coinFx.node.position.z, 'sineIn'));
            action.call(function () {
              if (!skipUpdateWallet && i === 0 && data.isMe) {
                player.addToDisplayWallet(goldReward);
              }

              coinFx.stopAnimation();
              player.playerEffectScale();
            });
            action.start();
          };

          for (var i = 0; i < coinCount; ++i) {
            _loop(i);
          }
        };

        _proto.triggerBombFX = function triggerBombFX(posNode) {
          var itemBomb = instantiate(this.itemBomb);
          var startPos = this.node.getComponent(UITransform).convertToNodeSpaceAR(posNode);
          this.node.addChild(itemBomb);

          this._listSkillItem.push(itemBomb);

          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHAKE_SCREEN, {
            timeOneStep: 0.03,
            amplitude: 6
          });
          itemBomb.setPosition(startPos);
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.EFFECT_BOMB);
        };

        _proto.onPlayLuckyEffectDone = function onPlayLuckyEffectDone(data) {
          this.playCoinReward(data);
        };

        _proto.playLuckyEffect = function playLuckyEffect(data) {
          var luckyEffect = gfPoolManager.instance.getLuckyEffectWithData(data);

          if (luckyEffect) {
            luckyEffect.node.setParent(this.node);
            luckyEffect.node.worldPosition = data.fishPos;
          }
        };

        _proto.effectItemFreeze = function effectItemFreeze(data) {
          var _this3 = this;

          var player = gfReferenceManager.instance.getPlayerByDeskStation(data.deskStation);
          var endNode = player.isMe ? gfReferenceManager.instance.getBtnFreeze() : player.node;
          var fromPosition = data.Fish ? this.node.getComponent(UITransform).convertToNodeSpaceAR(data.Fish.getLockPositionByWorldSpace()) : this.getRandomPositionOutScreen();
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.EFFECT_GET_ITEM_FREEZE);
          var destination = this.node.getComponent(UITransform).convertToNodeSpaceAR(endNode.worldPosition);
          var freezeItem = gfPoolManager.instance.getFreezeFX();
          freezeItem.node.setParent(this.node);
          freezeItem.initAssets();
          freezeItem.node.setPosition(fromPosition);
          var jumpHigh = 60;
          if (player.isMe) this._flyingSkill++;
          tween(freezeItem.node).to(0.175, {
            position: v3(fromPosition.x, fromPosition.y + jumpHigh, 0)
          }).to(0.5, {
            position: v3(fromPosition.x, fromPosition.y, 0)
          }, {
            easing: 'bounceOut'
          }).delay(0.7).to(0.4, {
            position: destination
          }).delay(0.235).call(function () {
            if (DataStore1998.instance.getSelfDeskStation() === data.deskStation) {
              if (_this3._flyingSkill > 0) _this3._flyingSkill--;
              gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.FREEZE_ADD_ITEM);
            }

            freezeItem.value = 0;
            freezeItem.returnPool();
          }).start();
        };

        return EffectLayer1998;
      }(gfEffectLayer)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EffectLockFish1989.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfEffectLockFish.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, sp, gfEffectLockFish;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
    }, function (module) {
      gfEffectLockFish = module.gfEffectLockFish;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "54c1clXHF5HZLadtmKJQOwm", "EffectLockFish1989", undefined);

      var ccclass = _decorator.ccclass;
      var MUMMY_OFFSET_LOCK = {
        '2': 15
      };
      var EffectLockFish1989 = exports('EffectLockFish1989', (_dec = ccclass('EffectLockFish1989'), _dec(_class = /*#__PURE__*/function (_gfEffectLockFish) {
        _inheritsLoose(EffectLockFish1989, _gfEffectLockFish);

        function EffectLockFish1989() {
          return _gfEffectLockFish.apply(this, arguments) || this;
        }

        var _proto = EffectLockFish1989.prototype;

        _proto._calculatorInfo = function _calculatorInfo() {
          var endPos = this._targetFish.node.getPosition();

          if (!endPos) return;

          if (MUMMY_OFFSET_LOCK[this._targetFish._FishKind]) {
            endPos.y -= MUMMY_OFFSET_LOCK[this._targetFish._FishKind];
          }

          this.iconTarget.setPosition(endPos);
        };

        _proto.playChangeTargetAnim = function playChangeTargetAnim() {
          if (this.iconTarget && this.iconTarget.getComponent(sp.Skeleton)) {
            this.iconTarget.getComponent(sp.Skeleton).setAnimation(0, 'appear', false);
            this.iconTarget.getComponent(sp.Skeleton).addAnimation(0, 'loop', true);
          }
        };

        return EffectLockFish1989;
      }(gfEffectLockFish)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EffectLockFish1998.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfEffectLockFish.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, gfEffectLockFish;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfEffectLockFish = module.gfEffectLockFish;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "216b819ly1B2b0QA+jnbCe5", "EffectLockFish1998", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var EffectLockFish1998 = exports('EffectLockFish1998', (_dec = ccclass('EffectLockFish1998'), _dec(_class = /*#__PURE__*/function (_gfEffectLockFish) {
        _inheritsLoose(EffectLockFish1998, _gfEffectLockFish);

        function EffectLockFish1998() {
          return _gfEffectLockFish.apply(this, arguments) || this;
        }

        var _proto = EffectLockFish1998.prototype;

        _proto.update = function update() {
          _gfEffectLockFish.prototype.update.call(this);

          this._canPlayEffect = false;
        };

        return EffectLockFish1998;
      }(gfEffectLockFish)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EventList.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './serviceRest.ts', './globalNetwork.ts', './loadConfigAsync.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, Node, Toggle, EditBox, NodePool, instantiate, sys, Component, apiObject, globalNetwork, loadConfigAsync;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Node = module.Node;
      Toggle = module.Toggle;
      EditBox = module.EditBox;
      NodePool = module.NodePool;
      instantiate = module.instantiate;
      sys = module.sys;
      Component = module.Component;
    }, function (module) {
      apiObject = module.default;
    }, function (module) {
      globalNetwork = module.default;
    }, function (module) {
      loadConfigAsync = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "f0679PqTwdL3ppie1JhQX4J", "EventList", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GameEvents = exports('GameEvents', (_dec = ccclass('GameEvents'), _dec2 = property({
        type: Prefab
      }), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Toggle
      }), _dec5 = property({
        type: EditBox
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GameEvents, _Component);

        function GameEvents() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.listEvent = [];

          _initializerDefineProperty(_this, "eventPrefab", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "eventHolder", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "filterSlot", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "filterTag", _descriptor4, _assertThisInitialized(_this));

          _this.eventPool = null;
          return _this;
        }

        var _proto = GameEvents.prototype;

        _proto.onLoad = function onLoad() {
          this.eventPool = new NodePool();
        };

        _proto.getEvent = function getEvent() {
          var event = this.eventPool.get();

          if (!event) {
            event = instantiate(this.eventPrefab);
          }

          return event;
        };

        _proto.removeAllEvents = function removeAllEvents() {
          while (this.eventHolder.children.length > 0) {
            this.eventPool.put(this.eventHolder.children[0]);
          }
        };

        _proto.onEnable = function onEnable() {
          this.removeAllEvents();
          this.loadEvents();
        };

        _proto.onDisable = function onDisable() {
          this.listEvent = null;
          sys.garbageCollect();
        };

        _proto.loadEvents = function loadEvents() {
          var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
              API_URL = _loadConfigAsync$getC.API_URL;

          var eventUrl = API_URL + 'event-config/event-available-by-user';
          var headers = {
            'Authorization': globalNetwork.getToken()
          };
          apiObject.getWithHeader({
            url: eventUrl,
            callback: this.onEventsLoaded.bind(this),
            headers: headers
          });
        };

        _proto.onEventsLoaded = function onEventsLoaded(res) {
          this.listEvent = res.data || [];
          this.filterEvent(this.filterSlot.isChecked ? this.filterTag.string : "");
        };

        _proto.onToggleFilter = function onToggleFilter() {
          this.filterEvent(this.filterSlot.isChecked ? this.filterTag.string : "");
        };

        _proto.filterEvent = function filterEvent(key) {
          this.removeAllEvents();

          for (var i = 0; i < this.listEvent.length; i++) {
            var eventInfo = this.listEvent[i].eventInfo;

            if (eventInfo) {
              var eventName = eventInfo.name.toLocaleLowerCase();
              var updatedTitle = key.toLocaleLowerCase();

              if (eventName.includes(updatedTitle)) {
                var event = this.getEvent();
                event.setParent(this.eventHolder);
                event.getComponent('GameEvent').init(this.listEvent[i]);
              }
            }
          }
        };

        _proto.onLoadError = function onLoadError(error) {// console.log(error);
        };

        _proto.onDestroy = function onDestroy() {
          this.eventPool.clear();
        };

        return GameEvents;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "eventPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "eventHolder", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "filterSlot", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "filterTag", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EventListenerManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, warn, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      warn = module.warn;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "3c085XLolNK4pPd/oLUMOG1", "EventListenerManager", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var EventListenerManager = exports('EventListenerManager', (_dec = ccclass('EventListenerManager'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(EventListenerManager, _Component);

        function EventListenerManager() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.handlers = {};
          return _this;
        }

        var _proto = EventListenerManager.prototype;

        _proto.on = function on(eventName, handler, target) {
          var objHandler = {
            handler: handler,
            target: target
          };
          var handlerList = this.handlers[eventName];

          if (!handlerList) {
            handlerList = [];
            this.handlers[eventName] = handlerList;
          }

          for (var i = 0; i < handlerList.length; i++) {
            var existObjHandler = handlerList[i];

            if (!existObjHandler) {
              handlerList[i] = objHandler;
              return i;
            } else {
              if (existObjHandler.handler === handler && existObjHandler.target === target) {
                warn("[EventListenerManager] Existing target: " + target + " and its handler: " + handler.name + " were already registered to an event: " + eventName);
                return i;
              }
            }
          }

          handlerList.push(objHandler);
          return handlerList.length;
        };

        _proto.off = function off(eventName, handler, target) {
          var handlerList = this.handlers[eventName];

          if (!handlerList) {
            return;
          }

          for (var i = 0; i < handlerList.length; i++) {
            var oldObj = handlerList[i];

            if (oldObj.handler === handler && target === oldObj.target) {
              handlerList.splice(i--, 1);
            }
          }
        };

        _proto.targetOff = function targetOff(target) {
          for (var eventName in this.handlers) {
            var handlerList = this.handlers[eventName];

            if (handlerList) {
              for (var i = 0; i < handlerList.length; i++) {
                if (handlerList[i].target === target) {
                  handlerList.splice(i--, 1);
                }
              }
            }
          }
        };

        _proto.emit = function emit(eventName) {
          var handlerList = this.handlers[eventName];

          if (!handlerList) {
            return;
          }

          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }

          for (var i = 0; i < handlerList.length; i++) {
            var objHandler = handlerList[i];

            if (objHandler && objHandler.handler && objHandler.target) {
              objHandler.handler.apply(objHandler.target, args);
            }
          }
        };

        return EventListenerManager;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EventMiniIcon.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Sprite, Node, Color, Vec3, tween, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Node = module.Node;
      Color = module.Color;
      Vec3 = module.Vec3;
      tween = module.tween;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "4ffc8E40llBOLk88bbv1q9q", "EventMiniIcon", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var EventMiniIcon = exports('EventMiniIcon', (_dec = ccclass('EventMiniIcon'), _dec2 = property({
        type: Sprite
      }), _dec3 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(EventMiniIcon, _Component);

        function EventMiniIcon() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "sprite", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "iconDone", _descriptor2, _assertThisInitialized(_this));

          _this.inited = false;
          return _this;
        }

        var _proto = EventMiniIcon.prototype;

        _proto.init = function init(frame, isDone) {
          this.sprite.spriteFrame = frame;

          if (isDone) {
            this.sprite.color = new Color(100, 100, 100, 255);

            if (this.inited && !this.iconDone.active) {
              this.iconDone.active = true;
              this.iconDone.scale = new Vec3(0.4, 0.4, 0.4);
              tween(this.iconDone).to(0.2, {
                scale: new Vec3(1.2, 1.2, 1.2)
              }).to(0.2, {
                scale: new Vec3(0.9, 0.9, 0.9)
              }).to(0.2, {
                scale: new Vec3(1.0, 1.0, 1.0)
              }).start();
            } else {
              this.iconDone.active = true;
            }
          } else {
            this.iconDone.active = false;
            this.sprite.color = new Color(255, 255, 255, 255);
          }

          this.inited = true;
        };

        _proto.setDone = function setDone() {
          this.iconDone.active = true;
          this.iconDone.scale = new Vec3(0.4, 0.4, 0.4);
          this.sprite.color = new Color(100, 100, 100, 255);
          tween(this.iconDone).to(0.2, {
            scale: new Vec3(1.2, 1.2, 1.2)
          }).to(0.2, {
            scale: new Vec3(0.9, 0.9, 0.9)
          }).to(0.2, {
            scale: new Vec3(1.0, 1.0, 1.0)
          }).start();
        };

        _proto.setCurrent = function setCurrent() {
          this.iconDone.active = false;
          this.sprite.color = new Color(255, 255, 255, 255);
        };

        return EventMiniIcon;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "sprite", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "iconDone", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EventMiniProgress.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts', './EventMiniIcon.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, SpriteAtlas, Prefab, Node, ScrollView, NodePool, instantiate, v3, UITransform, Layout, v2, GameObject, EventMiniIcon;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SpriteAtlas = module.SpriteAtlas;
      Prefab = module.Prefab;
      Node = module.Node;
      ScrollView = module.ScrollView;
      NodePool = module.NodePool;
      instantiate = module.instantiate;
      v3 = module.v3;
      UITransform = module.UITransform;
      Layout = module.Layout;
      v2 = module.v2;
    }, function (module) {
      GameObject = module.GameObject;
    }, function (module) {
      EventMiniIcon = module.EventMiniIcon;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "3a03fa0jZ9G4LXj/n7p+YCT", "EventMiniProgress", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var EventMiniProgress = exports('EventMiniProgress', (_dec = ccclass('EventMiniProgress'), _dec2 = property({
        type: SpriteAtlas
      }), _dec3 = property({
        type: Prefab
      }), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: Node
      }), _dec6 = property({
        type: ScrollView
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(EventMiniProgress, _GameObject);

        function EventMiniProgress() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;
          _this.currentIndex = 0;
          _this.currentQuest = null;

          _initializerDefineProperty(_this, "icons", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "miniIconPrefab", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "iconHolder", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "highlight", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "scrollView", _descriptor5, _assertThisInitialized(_this));

          _this.inited = false;
          _this.itemWidth = 0;
          _this.iconPool = new NodePool();
          _this.progress = [];
          return _this;
        }

        var _proto = EventMiniProgress.prototype;

        _proto.getIcon = function getIcon() {
          var icon = this.iconPool.get();

          if (!icon) {
            icon = instantiate(this.miniIconPrefab);
          }

          return icon;
        };

        _proto.removeAllIcon = function removeAllIcon() {
          while (this.iconHolder.children.length > 0) {
            this.iconPool.put(this.iconHolder.children[0]);
          }
        };

        _proto.setDoneCurrent = function setDoneCurrent() {
          this.iconHolder.children[this.currentIndex].getComponent(EventMiniIcon).setDone();
          this.highlight.active = false;

          if (this.iconHolder.children[this.currentIndex + 1]) {
            this.iconHolder.children[this.currentIndex + 1].getComponent(EventMiniIcon).setCurrent();
            this.highlight.active = true;
            this.highlight.setParent(this.iconHolder.children[this.currentIndex + 1]);
            this.highlight.setPosition(v3(0, 0, 0));
          }
        };

        _proto.updateProgress = function updateProgress(questProcess) {
          if (questProcess && questProcess.length) {
            for (var i = 0; i < questProcess.length; i++) {
              var _questProcess$i = questProcess[i],
                  gameId = _questProcess$i.gameId,
                  isValid = _questProcess$i.isValid;
              var icon = this.iconHolder.children[i];

              if (!icon) {
                icon = this.getIcon();
                icon.setParent(this.iconHolder);
              }

              var sprite = this.icons.getSpriteFrame(gameId);
              icon.getComponent(EventMiniIcon).init(sprite, questProcess[i].isFinished);
              if (!this.itemWidth) this.itemWidth = icon.getComponent(UITransform).width;

              if (isValid) {
                this.highlight.active = true;
                this.highlight.setParent(icon);
                this.highlight.setPosition(v3(0, 0, 0));
                this.currentIndex = i;
              }
            }
          }
        };

        _proto.getRewardPosition = function getRewardPosition() {
          return this.highlight;
        };

        _proto.getCurrentIndex = function getCurrentIndex() {
          return this.currentIndex;
        };

        _proto.updateScrollView = function updateScrollView() {
          if (!this.scrollView || !this.itemWidth) return;
          var spacingX = this.iconHolder.getComponent(Layout).spacingX;
          var movingStep = (spacingX + this.itemWidth) * this.currentIndex;
          this.scrollView.scrollToOffset(v2(movingStep, 0), 0.01);
        };

        _proto.onDestroy = function onDestroy() {
          this.iconPool.clear();
        };

        return EventMiniProgress;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "icons", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "miniIconPrefab", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "iconHolder", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "highlight", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "scrollView", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EventNames.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "ee628icwdpH9qW5mmecXm9c", "EventNames", undefined);

      var EventNames = exports('default', {
        //network
        JOIN_GAME_SUCCESS: 'JOIN_GAME_SUCCESS',
        JOIN_GAME_FAIL: 'JOIN_GAME_FAIL',
        //table
        TABLE_START_SPIN: 'TABLE_START_SPIN',
        TABLE_STOP_SPIN: 'TABLE_STOP_SPIN',
        FAST_TO_RESULT_FINISH: 'FAST_TO_RESULT_FINISH',
        //slot button
        SPIN_CLICK: 'SPIN_CLICK',
        FAST_TO_RESULT_CLICK: 'FAST_TO_RESULT_CLICK',
        AUTO_SPIN_START: 'AUTO_SPIN_START',
        AUTO_SPIN_STOP: 'AUTO_SPIN_STOP',
        //cutscene
        BIGWIN_START: 'BIGWIN_START',
        BIGWIN_END: 'BIGWIN_END',
        SKIP_BIGWIN_FTR: 'SKIP_BIGWIN_FTR',
        JACKPOT_START: 'JACKPOT_START',
        JACKPOT_END: 'JACKPOT_END',
        FREEOPTION_RESULT_START: 'FREEOPTION_RESULT_START',
        //payline
        DRAWING_LINE_CLEAR: 'DRAWING_LINE_CLEAR',
        DRAWING_LINE_ADD: 'DRAWING_LINE_ADD',
        DRAWING_LINE_ADD_FIRST: 'DRAWING_LINE_ADD_FIRST',
        DRAWING_LINE_ADD_LAST: 'DRAWING_LINE_ADD_LAST',
        DRAWING_LINE_ADD_DOT: 'DRAWING_LINE_ADD_DOT',
        //BET
        BET_UPDATE: 'BET_UPDATE',
        BET_LINE_PREUPDATE: 'BET_LINE_PREUPDATE',
        BET_LINE_UPDATE: 'BET_LINE_UPDATE',
        //WALLET
        SWITCH_WALLET: 'SWITCH_WALLET',
        START_UPDATE_WALLET: 'START_UPDATE_WALLET',
        //SESSION
        GAME_RESTART: 'GAME_RESTART',
        GAME_RESET_SESSION: 'GAME_RESET_SESSION',
        //gamemode
        SWITCH_MODE_TRIAL: 'GAME_MODE_TRIAL',
        SWITCH_MODE_REAL: 'SWITCH_MODE_REAL',
        //performance
        ON_CHANGE_PERFORMANCE: 'ON_CHANGE_PERFORMANCE',
        //loading
        CREATE_ON_DEMAND_OBJECT: 'CREATE_ON_DEMAND_OBJECT',
        REMOVE_ON_DEMAND_OBJECT: 'REMOVE_ON_DEMAND_OBJECT',
        OPEN_INFO: 'OPEN_INFO',
        //TUTORIAL:
        TUTORIAL_START: 'TUTORIAL_START',
        TUTORIAL_BREAK: 'TUTORIAL_BREAK',
        TUTORIAL_END: 'TUTORIAL_END',
        //TURBO
        TURBO_ON: 'TURBO_ON',
        TURBO_OFF: 'TURBO_OFF',
        //WIN AMOUNT
        FINISH_UPDATE_WINAMOUNT: 'FINISH_UPDATE_WINAMOUNT',
        PLAY_ANIM_WINQUEST: 'PLAY_ANIM_WINQUEST',
        SPIN_CLICK_ACTION: 'SPIN_CLICK_ACTION'
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EventsCode1989.ts", ['cc', './gfBaseEvents.ts', './gfUtilities.ts'], function (exports) {
  'use strict';

  var cclegacy, gfBaseEvents, mergeTwoObject;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      mergeTwoObject = module.mergeTwoObject;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f557d/J2wdMeq+WdFYqfSrM", "EventsCode1989", undefined);

      var EventsCode = {
        GAME_LAYER: {
          UPDATE_WALLET_MY_USER: "UPDATE_WALLET_MY_USER",
          INIT_MY_USER_INFO: "INIT_MY_USER_INFO",
          CHANGE_BACKGROUND: "CHANGE_BACKGROUND",
          CLOSE_HUD: 'CLOSE_HUD'
        },
        LOBBY_LAYER: {
          PLAY_TRANSITION_GATE: "PLAY_TRANSITION_GATE"
        }
      };
      var EventsCode1989 = exports('default', mergeTwoObject(EventsCode, gfBaseEvents));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EventsCode1998.ts", ['cc', './gfBaseEvents.ts', './gfUtilities.ts'], function (exports) {
  'use strict';

  var cclegacy, gfBaseEvents, mergeTwoObject;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      mergeTwoObject = module.mergeTwoObject;
    }],
    execute: function () {
      cclegacy._RF.push({}, "29609zbJsFI/a24p2S5TQ2g", "EventsCode1998", undefined);

      var EventsCode1998 = {
        SOUND: {
          ACTIVE_FREEZE: "ACTIVE_FREEZE",
          ADD_ITEM: "ADD_ITEM"
        }
      };
      EventsCode1998 = mergeTwoObject(gfBaseEvents, EventsCode1998);
      var EventCode = exports('default', EventsCode1998);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ExtendMiniBox.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './MiniBox.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, MiniBox;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      MiniBox = module.MiniBox;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "afbbdA/+LpEJ5EjFSM+Lt3e", "ExtendMiniBox", undefined);

      var ccclass = _decorator.ccclass;
      var ExtendMiniBox = exports('ExtendMiniBox', (_dec = ccclass('ExtendMiniBox'), _dec(_class = /*#__PURE__*/function (_MiniBox) {
        _inheritsLoose(ExtendMiniBox, _MiniBox);

        function ExtendMiniBox() {
          return _MiniBox.apply(this, arguments) || this;
        }

        var _proto = ExtendMiniBox.prototype;

        _proto.init = function init() {
          this.boxPosition = this.node.position.clone(); // Debug: { warn(this.boxPosition)}
        };

        return ExtendMiniBox;
      }(MiniBox)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ExtendMiniTable.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './MiniTable.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, Node, instantiate, v3, tween, fadeTo, MiniTable;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Node = module.Node;
      instantiate = module.instantiate;
      v3 = module.v3;
      tween = module.tween;
    }, function (module) {
      fadeTo = module.fadeTo;
    }, function (module) {
      MiniTable = module.MiniTable;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "75bc6NA5ZJIXKxx7X0zGeCp", "ExtendMiniTable", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          integer = _decorator.integer;
      var ExtendMiniTable = exports('ExtendMiniTable', (_dec = ccclass('ExtendMiniTable'), _dec2 = property(Prefab), _dec3 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_MiniTable) {
        _inheritsLoose(ExtendMiniTable, _MiniTable);

        function ExtendMiniTable() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _MiniTable.call.apply(_MiniTable, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "extendBoxPrefab", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "extendBoxHolder", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "maxExtendBox", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "extendWidthStep", _descriptor4, _assertThisInitialized(_this));

          _this.extendBoxes = [];
          _this.extendValues = void 0;
          _this.maxMiniBox = void 0;
          _this.currentPhase = 1;
          return _this;
        }

        var _proto = ExtendMiniTable.prototype;

        _proto.onLoad = function onLoad() {
          _MiniTable.prototype.onLoad.call(this);

          this.node.on("SHOW_MINI_BOXES", this.showMiniBoxes, this);
          this.node.on("HIDE_MINI_BOXES", this.hideMiniBoxes, this);
          this.node.on("SHOW_EXTEND_BOXES", this.showExtendBoxes, this);
          this.node.on("HIDE_EXTEND_BOXES", this.hideExtendBoxes, this);
        };

        _proto.initBoxes = function initBoxes() {
          _MiniTable.prototype.initBoxes.call(this);

          this.initExtendBoxes();
          this.hideExtendBoxes();
        };

        _proto.initExtendBoxes = function initExtendBoxes() {
          var maxMiniBox = this.colNumber * this.rowNumber;

          for (var index = 0; index < this.maxExtendBox; index++) {
            var eBox = instantiate(this.extendBoxPrefab);
            this.extendBoxHolder.addChild(eBox);
            eBox.active = true;
            eBox['boxIndex'] = maxMiniBox + index;
            this.extendBoxes.push(eBox);
            eBox.setPosition(this.getPosExtendBox(index));
            eBox.emit('INIT');
          }
        };

        _proto.getPosExtendBox = function getPosExtendBox(index) {
          var x = ((1 - this.maxExtendBox) / 2 + index) * this.extendWidthStep;
          return v3(x, 0);
        };

        _proto.showMiniBoxes = function showMiniBoxes(callBack, time) {
          if (callBack === void 0) {
            callBack = null;
          }

          if (time === void 0) {
            time = 0;
          }

          this.currentPhase = 1;
          this.listBoxes.forEach(function (box) {
            return box.emit("SHOW");
          });

          if (time > 0 && callBack) {
            this.scheduleOnce(callBack, time);
          } else {
            callBack && callBack();
          }
        };

        _proto.hideMiniBoxes = function hideMiniBoxes(callBack, time) {
          if (callBack === void 0) {
            callBack = null;
          }

          if (time === void 0) {
            time = 0;
          }

          this.listBoxes.forEach(function (box) {
            return box.emit("HIDE");
          });

          if (time > 0 && callBack) {
            this.scheduleOnce(callBack, time);
          } else {
            callBack && callBack();
          }
        };

        _proto.showExtendBoxes = function showExtendBoxes(callBack, time) {
          if (callBack === void 0) {
            callBack = null;
          }

          if (time === void 0) {
            time = 0;
          }

          this.currentPhase = 2;
          this.extendBoxHolder.active = true;
          this.extendBoxes.forEach(function (eBox) {
            return eBox.emit("SHOW");
          });

          if (time > 0 && callBack) {
            this.scheduleOnce(callBack, time);
          } else {
            callBack && callBack();
          }
        };

        _proto.hideExtendBoxes = function hideExtendBoxes(callBack, time) {
          if (callBack === void 0) {
            callBack = null;
          }

          if (time === void 0) {
            time = 0;
          }

          this.extendBoxHolder.active = false;
          this.extendBoxes.forEach(function (eBox) {
            return eBox.emit("HIDE");
          });

          if (time > 0 && callBack) {
            this.scheduleOnce(callBack, time);
          } else {
            callBack && callBack();
          }
        };

        _proto.resumeTable = function resumeTable(data, defaultValue) {
          if (!data) return;

          for (var i = 0; i < this.listBoxes.length; i++) {
            if (data[i] !== defaultValue) {
              this.listBoxes[i].emit("BOX_OPEN", data[i], true, true);
            }
          }
        };

        _proto.openBox = function openBox(data, callback) {
          var index = data.index,
              value = data.value;

          if (index < this.listBoxes.length) {
            this.listBoxes[index].emit("BOX_OPEN", value, false, true, callback);
          } else {
            index -= this.listBoxes.length;
            this.extendBoxes[index].emit("BOX_OPEN", value, false, true, callback);
          }
        };

        _proto.openAllBoxes = function openAllBoxes(result, callback) {
          if (this.currentPhase === 1) {
            _MiniTable.prototype.openAllBoxes.call(this, result, callback);
          } else {
            this.result = result;

            for (var i = 0; i < this.extendBoxes.length; i++) {
              var eBox = this.extendBoxes[i];

              if (eBox.isOpen === false) {
                var randValue = this.getRandomValue();
                eBox.stopAnimClick();
                eBox.emit("BOX_OPEN", randValue, true, false, null);
                fadeTo(eBox, 0.5, 0.5);
              }
            }

            if (callback && typeof callback === 'function') {
              tween(this.node).delay(this.openAllBoxDelay).call(function () {
                callback();
              }).start();
            }
          }
        };

        _proto.autoClickExtend = function autoClickExtend() {
          var index = this.randRange(0, this.extendBoxes.length);
          this.listBoxes[index].onClickItem(null, true);
        };

        _proto.autoClick = function autoClick() {
          if (this.currentPhase === 2) {
            var index = this.randRange(0, this.extendBoxes.length);
            this.extendBoxes[index].onClickItem(null, true);
          } else {
            var _index = this.randRange(0, this.listBoxes.length);

            this.listBoxes[_index]["isOpen"] ? this.autoClick() : this.listBoxes[_index].onClickItem(null, true);
          }
        };

        _proto.resetTable = function resetTable() {
          this.listBoxes.forEach(function (box) {
            return box.emit("BOX_RESET");
          });
          this.extendBoxes.forEach(function (eBox) {
            return eBox.emit("BOX_RESET");
          });
          this.hideExtendBoxes();
          this.currentPhase = 1;
        };

        return ExtendMiniTable;
      }(MiniTable), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "extendBoxPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "extendBoxHolder", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "maxExtendBox", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 3;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "extendWidthStep", [integer], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 150;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FakeDirector.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "2a2d8U+UElD0L7EBqxDmWKR", "FakeDirector", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var FakeDirector = exports('FakeDirector', (_dec = ccclass('FakeDirector'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(FakeDirector, _Component);

        function FakeDirector() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.config = null;
          _this.dataStore = null;
          _this.eventManager = null;
          return _this;
        }

        var _proto = FakeDirector.prototype;

        _proto.onLoad = function onLoad() {
          this.config = this.node["config"];
          this.dataStore = this.node["dataStore"];
          this.eventManager = this.node;
          this.node.on("GET_GAME_MODEL", this.setupGameModel, this);
        };

        _proto.setupGameModel = function setupGameModel(evt) {
          if (this.config) {
            evt.propagationStopped = true;
            evt.target.config = this.config;
            evt.target.dataStore = this.dataStore;
            evt.target.mainDirector = this;
          }
        };

        return FakeDirector;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Fish.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, v2, Rect, sp, Graphics, BoxCollider2D, tween, v3, Event, UITransform, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      v2 = module.v2;
      Rect = module.Rect;
      sp = module.sp;
      Graphics = module.Graphics;
      BoxCollider2D = module.BoxCollider2D;
      tween = module.tween;
      v3 = module.v3;
      Event = module.Event;
      UITransform = module.UITransform;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "d46417sPE1IE58H9U9ALkOg", "Fish", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var FISH_CONFIG = {
        "1": {
          targetPoint: v2(0, 50),
          BoxCollider: new Rect(0.6, 51, 30, 30)
        },
        "2": {
          targetPoint: v2(1, -4),
          BoxCollider: new Rect(1, -4, 40, 50)
        },
        "3": {
          targetPoint: v2(0, 7),
          BoxCollider: new Rect(0, 12, 55, 55)
        },
        "4": {
          targetPoint: v2(0, 60),
          BoxCollider: new Rect(0, 47, 57, 95)
        },
        "5": {
          targetPoint: v2(0, 50),
          BoxCollider: new Rect(0, 40, 60, 90)
        },
        "6": {
          targetPoint: v2(0, 50),
          BoxCollider: new Rect(0, 40, 60, 90)
        },
        "7": {
          targetPoint: v2(0, 30),
          BoxCollider: new Rect(0, 30, 50, 90)
        },
        "8": {
          targetPoint: v2(0, 60),
          BoxCollider: new Rect(0, 50, 83, 110)
        },
        "9": {
          targetPoint: v2(0, 60),
          BoxCollider: new Rect(0, 50, 50, 120)
        },
        "10": {
          targetPoint: v2(0, 80),
          BoxCollider: new Rect(0, 60, 95, 145)
        },
        "11": {
          targetPoint: v2(0, 120),
          BoxCollider: new Rect(0, 85, 80, 140)
        },
        "12": {
          targetPoint: v2(0, 0),
          BoxCollider: new Rect(0, 0, 100, 100)
        }
      };
      var Fish = exports('Fish', (_dec = ccclass('Fish'), _dec2 = property(sp.Skeleton), _dec3 = property(sp.SkeletonData), _dec4 = property(Graphics), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Fish, _Component);

        function Fish() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "spine", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "spineData", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "cellGraphics", _descriptor3, _assertThisInitialized(_this));

          _this.fishInfo = null;
          _this.spineDataMap = {};
          _this._tweenMove = null;
          _this._fishData = null;
          _this._targetPoint = null;
          return _this;
        }

        var _proto = Fish.prototype;

        _proto.onLoad = function onLoad() {
          var _this2 = this;

          this.spineData.forEach(function (data) {
            return _this2.spineDataMap[Number(data.name.slice(3))] = data;
          });
          this.node.on("INIT", this.init, this);
          this.node.on("ON_SELECTED", this.onSelected, this);
        };

        _proto.init = function init(fishData) {
          this._fishData = fishData;
          var FishKind = fishData.FishKind,
              zIndex = fishData.zIndex,
              size = fishData.size,
              FishID = fishData.FishID;
          if (!this.spineDataMap[FishKind]) return console.error("invalid FishKind");
          this.spine.skeletonData = null;
          this.spine.skeletonData = this.spineDataMap[FishKind];
          this.spine.setSkin("Front");

          if (this.spine.findAnimation("Walk")) {
            this.spine.setAnimation(0, "Walk", true);
          } else if (this.spine.findAnimation("Fly")) {
            this.spine.setAnimation(0, "Fly", true);
          }

          this.node["fishKind"] = FishKind;
          this.node["fishID"] = FishID;
          this.node["_isDead"] = false;
          this.node["zIndex"] = zIndex;
          this.node['isFish'] = true;
          this.setUpBoxCollider();

          this._drawCell(size);

          this._move();
        };

        _proto._drawCell = function _drawCell(size) {
          var h = size * 48,
              w = size * 96;
          var graphics = this.cellGraphics;
          graphics.node.active = true;
          graphics.clear();
          graphics.strokeColor.fromHEX('#00ff00');
          graphics.lineWidth = 3;
          graphics.moveTo(0, h / 2);
          graphics.lineTo(w / 2, 0);
          graphics.lineTo(0, -h / 2);
          graphics.lineTo(-w / 2, 0);
          graphics.lineTo(0, h / 2);
          graphics.stroke();
          graphics.node.active = false;
        };

        _proto.setUpBoxCollider = function setUpBoxCollider() {
          var box = this.node.getComponent(BoxCollider2D);
          var _FISH_CONFIG$this$_fi = FISH_CONFIG[this._fishData.FishKind],
              targetPoint = _FISH_CONFIG$this$_fi.targetPoint,
              BoxCollider = _FISH_CONFIG$this$_fi.BoxCollider;
          this.node["targetPoint"] = targetPoint;

          if (box) {
            box.enabled = true;
            box.offset.x = BoxCollider.x;
            box.offset.y = BoxCollider.y;
            box.size.width = BoxCollider.width;
            box.size.height = BoxCollider.height;
          }
        };

        _proto._move = function _move() {
          var _this3 = this; // window.fish = this.node;


          this.node._uiProps.colorDirty = true;
          var _this$_fishData = this._fishData,
              keyFrames = _this$_fishData.keyFrames,
              timeScale = _this$_fishData.timeScale;
          this._tweenMove = tween(this.node);
          this.node.setPosition(keyFrames[0].position);
          keyFrames.forEach(function (frame, index) {
            var position = frame.position,
                dur = frame.dur,
                skin = frame.skin,
                scaleX = frame.scaleX;

            if (index > 0) {
              _this3._tweenMove.call(function () {
                _this3.node.scale = v3(scaleX, 1, 1);

                _this3.spine.setSkin(skin);

                _this3.node._uiProps.colorDirty = true;
                _this3.spine.timeScale = timeScale;
              }).to(dur / timeScale, {
                position: position
              });
            }
          });

          this._tweenMove.call(function () {
            _this3._tweenMove = null;
            _this3.node["_isDead"] = true; // this.node.destroy();

            _this3.onRemoveFish();
          }).start();
        };

        _proto.onSelected = function onSelected(isSelect) {
          this.cellGraphics.node.active = isSelect;
          this.cellGraphics.node._uiProps.colorDirty = false;
          isSelect && this._tweenMove && this._tweenMove.stop();
        };

        _proto.onRemoveFish = function onRemoveFish() {
          var removeEvent = new Event('REMOVE_FISH', true);
          removeEvent['userData'] = {
            fish: this.node
          };
          this.node.dispatchEvent(removeEvent);
        };

        _proto.logData = function logData() {
          console.warn(this._fishData);
        };

        _proto.getFishKind = function getFishKind() {
          var FishKind = this._fishData.FishKind;
          return FishKind;
        };

        _proto.getLockPositionByNodeSpace = function getLockPositionByNodeSpace(node) {
          return node.getComponent(UITransform).convertToNodeSpaceAR(this.getLockPositionByWorldSpace());
        };

        _proto.getLockPositionByWorldSpace = function getLockPositionByWorldSpace() {
          return this.node.getComponent(UITransform).convertToWorldSpaceAR(v3(this.node["targetPoint"].x, this.node["targetPoint"].y, 0));
        };

        return Fish;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "spine", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "spineData", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "cellGraphics", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FishGroup17Extend1998.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfFishGroupData.ts', './Config1998.ts', './gfFishGroup17.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, v2, gfFishGroupData, Config1998, gfFishGroup17;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      v2 = module.v2;
    }, function (module) {
      gfFishGroupData = module.default;
    }, function (module) {
      Config1998 = module.default;
    }, function (module) {
      gfFishGroup17 = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "8357c6mq7ZJAJ74gtJmRDH6", "FishGroup17Extend1998", undefined);

      var FishGroup17Externd1998 = exports('default', /*#__PURE__*/function (_gfFishGroup) {
        _inheritsLoose(FishGroup17Externd1998, _gfFishGroup);

        function FishGroup17Externd1998() {
          return _gfFishGroup.apply(this, arguments) || this;
        }

        FishGroup17Externd1998.create = function create() {
          var yPos = Config1998.instance.AppSize.Height / 2;
          var left = -600;
          var deltaX = 410;
          var deltaBigX = 48;
          var right = Config1998.instance.AppSize.Width - left;

          if (gfFishGroupData.isFlipped()) {
            var _ref = [right, left];
            left = _ref[0];
            right = _ref[1];
            deltaX = -deltaX;
            deltaBigX = -deltaBigX;
          }

          this.createCircleFishGroup({
            moveTime: 61,
            moveScale: 2,
            count: 80,
            startPos: v2(right, yPos),
            radius: 250
          });
          this.createCircleFishGroup({
            moveTime: 61,
            moveScale: 2,
            count: 30,
            startPos: v2(right, yPos),
            radius: 180
          });
          this.createCircleFishGroup({
            moveTime: 61,
            moveScale: 2,
            count: 16,
            startPos: v2(right - deltaX, yPos),
            radius: 100
          });
          this.createCircleFishGroup({
            moveTime: 61,
            moveScale: 2,
            count: 16,
            startPos: v2(right + deltaX, yPos),
            radius: 100
          });
          this.createCircleFishGroup({
            moveTime: 61,
            moveScale: 2,
            count: 1,
            startPos: v2(right + deltaBigX, yPos),
            radius: 0
          });
        };

        return FishGroup17Externd1998;
      }(gfFishGroup17));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FishGroupMgr1998.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfFishGroupMgr.ts', './FishGroup17Extend1998.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, gfFishGroupMgr, FishGroup17Externd1998;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfFishGroupMgr = module.default;
    }, function (module) {
      FishGroup17Externd1998 = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "65892UZcghGpblh/v9h5P+v", "FishGroupMgr1998", undefined);

      var ccclass = _decorator.ccclass;
      var FishGroupMgr1998 = exports('FishGroupMgr1998', (_dec = ccclass('FishGroupMgr1998'), _dec(_class = /*#__PURE__*/function (_gfFishGroupMgr) {
        _inheritsLoose(FishGroupMgr1998, _gfFishGroupMgr);

        function FishGroupMgr1998() {
          return _gfFishGroupMgr.apply(this, arguments) || this;
        }

        var _proto = FishGroupMgr1998.prototype;

        _proto.createFishGroup1 = function createFishGroup1() {
          FishGroup17Externd1998.create();
        };

        return FishGroupMgr1998;
      }(gfFishGroupMgr)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FishManager1989.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfFishManager.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _assertThisInitialized, cclegacy, gfFishManager;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      gfFishManager = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "9d5d4GWjdNF+4Wn1XG+Hryn", "FishManager1989", undefined);

      var FishManager1989 = exports('default', /*#__PURE__*/function (_gfFishManager) {
        _inheritsLoose(FishManager1989, _gfFishManager);

        function FishManager1989() {
          var _this;

          _this = _gfFishManager.call(this) || this;
          FishManager1989.instance = _assertThisInitialized(_this);
          return _this;
        }

        return FishManager1989;
      }(gfFishManager));
      FishManager1989.instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FishManager1998.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfFishManager.ts', './gfUtilities.ts', './DataStore1998.ts', './ReferenceManager1998.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _assertThisInitialized, cclegacy, UITransform, v3, Intersection2D, gfFishManager, v2Distance, removeEvents, DataStore1998, ReferenceManager1998;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      UITransform = module.UITransform;
      v3 = module.v3;
      Intersection2D = module.Intersection2D;
    }, function (module) {
      gfFishManager = module.default;
    }, function (module) {
      v2Distance = module.v2Distance;
      removeEvents = module.removeEvents;
    }, function (module) {
      DataStore1998 = module.default;
    }, function (module) {
      ReferenceManager1998 = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "ce3b8x/p7VJUoc3vcUfCkmZ", "FishManager1998", undefined);

      var FishManager1998 = exports('default', /*#__PURE__*/function (_gfFishManager) {
        _inheritsLoose(FishManager1998, _gfFishManager);

        function FishManager1998() {
          var _this;

          _this = _gfFishManager.call(this) || this;
          FishManager1998.instance = _assertThisInitialized(_this);
          return _this;
        }

        var _proto = FishManager1998.prototype;

        _proto.GetFishForTargetAll = function GetFishForTargetAll() {
          var selfInfo = DataStore1998.instance.getSelfInfo();

          if (selfInfo.isPriorityTargetBoss) {
            for (var i = 0; i < this.listFish.length; ++i) {
              var fish = this.listFish[i];

              if (fish.isAvailable() && this.isBossKind(fish.getKind())) {
                selfInfo.LockFishKind = fish.getKind();
                return fish;
              }
            }
          }

          return this.getFishByDistanceForTargetAll();
        };

        _proto.getFishByDistanceForTargetAll = function getFishByDistanceForTargetAll() {
          var player = ReferenceManager1998.instance.getPlayerByDeskStation(DataStore1998.instance.getSelfInfo().DeskStation);
          var selfInfo = DataStore1998.instance.getSelfInfo();

          if (!player) {
            return null;
          }

          var playerPos = player.node.getComponent(UITransform).convertToWorldSpaceAR(v3(0, 0, 1));
          var arrayFish = [].concat(this.listFish);
          arrayFish.forEach(function (fish) {
            var distance = v2Distance(playerPos, fish.node.position);
            fish['distance'] = distance;
          });
          arrayFish = arrayFish.sort(function (a, b) {
            return a['distance'] - b['distance'];
          });

          for (var i = 0; i < arrayFish.length; ++i) {
            var fish = arrayFish[i];

            if (fish.isAvailable()) {
              selfInfo.LockFishKind = fish.getKind();
              return fish;
            }
          }

          return null;
        };

        _proto.GetFishByPoint = function GetFishByPoint(point) {
          var fishResult = null;
          var selfInfo = DataStore1998.instance.getSelfInfo();

          for (var i = 0; i < this.listFish.length; ++i) {
            var fish = this.listFish[i];

            if (fish && fish.isAvailable() && (!selfInfo.LockFish || selfInfo.LockFish && selfInfo.LockFish.getId() !== fish.getId())) {
              var boxList = fish.getListBox();

              if (boxList) {
                for (var j = 0; j < boxList.length; ++j) {
                  if (boxList[j].worldPoints && Intersection2D.pointInPolygon(point, boxList[j].worldPoints)) {
                    if (!fishResult || fishResult && fish.getZIndex() > fishResult.getZIndex()) {
                      fishResult = fish;
                    }
                  }
                }
              }
            }
          }

          return fishResult;
        };

        _proto.destroy = function destroy() {
          removeEvents(this);

          _gfFishManager.prototype.destroy.call(this);
        };

        return FishManager1998;
      }(gfFishManager));
      FishManager1998.instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FreeGameOption.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SlotUIScene.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, SlotUIScene;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      SlotUIScene = module.SlotUIScene;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "32733MXtthJI5HAVD+VqrX/", "FreeGameOption", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var FreeGameOption = exports('FreeGameOption', (_dec = ccclass('FreeGameOption'), _dec(_class = /*#__PURE__*/function (_SlotUIScene) {
        _inheritsLoose(FreeGameOption, _SlotUIScene);

        function FreeGameOption() {
          return _SlotUIScene.apply(this, arguments) || this;
        }

        var _proto = FreeGameOption.prototype;

        _proto.exit = function exit(callback) {
          if (callback === void 0) {
            callback = null;
          }

          if (callback) this.callback = callback;

          if (this.callback) {
            this.node.emit("STOP");
            this.callback();
          }

          this.node.active = false;
        };

        return FreeGameOption;
      }(SlotUIScene)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FreeGameWriter.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CustomEnum.ts', './SlotGameWriter.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, SlotSceneType, SlotGameMode, SlotGameWriter;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      SlotSceneType = module.SlotSceneType;
      SlotGameMode = module.SlotGameMode;
    }, function (module) {
      SlotGameWriter = module.SlotGameWriter;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "c210eUJPypIAICb9y9T+yr/", "FreeGameWriter", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var FreeGameWriter = exports('FreeGameWriter', (_dec = ccclass('FreeGameWriter'), _dec(_class = /*#__PURE__*/function (_SlotGameWriter) {
        _inheritsLoose(FreeGameWriter, _SlotGameWriter);

        function FreeGameWriter() {
          return _SlotGameWriter.apply(this, arguments) || this;
        }

        var _proto = FreeGameWriter.prototype;

        _proto.makeScriptShowResults = function makeScriptShowResults() {
          var dataStore = this.node.dataStore;
          var _dataStore$playSessio = dataStore.playSession,
              matrix = _dataStore$playSessio.matrix,
              winAmount = _dataStore$playSessio.winAmount,
              winAmountPS = _dataStore$playSessio.winAmountPS,
              payLines = _dataStore$playSessio.payLines,
              bonusGame = _dataStore$playSessio.bonusGame,
              freeGameRemain = _dataStore$playSessio.freeGameRemain,
              freeGameTotal = _dataStore$playSessio.freeGameTotal,
              jackpotInfo = _dataStore$playSessio.jackpotInfo;
          var betData = dataStore.betData;
          var listScript = [];
          listScript.push({
            command: "_setUpPaylines",
            data: {
              matrix: matrix,
              payLines: payLines
            }
          });
          listScript.push({
            command: "_pauseUpdateJP"
          });
          listScript.push({
            command: "_showBigWild",
            data: {
              isResume: false
            }
          }); //TODO: jackpot

          if (jackpotInfo) {
            var infoJP = jackpotInfo[jackpotInfo.length - 1];
            var arrayJP = infoJP.split(';');
            var jackpotAmount = 0;
            var jpLineId;

            if (arrayJP && arrayJP.length > 2) {
              jackpotAmount = Number(arrayJP[1]);
              jpLineId = arrayJP[2];
            }

            if (jpLineId) {
              listScript.push({
                command: "_showJackpotPayLine",
                data: {
                  jpPayLineID: jpLineId
                }
              });
            }

            listScript.push({
              command: "_showCutscene",
              data: {
                name: SlotSceneType.IntroJackpotGame
              }
            });
            listScript.push({
              command: "_showUnskippedCutscene",
              data: {
                name: SlotSceneType.JackpotWin,
                content: {
                  winAmount: jackpotAmount,
                  currentBetData: betData.getTotalBet()
                }
              }
            });
            listScript.push({
              command: "_resumeUpdateJP"
            });
          }

          if (bonusGame && bonusGame > 0) {
            if (winAmount && winAmount > 0) {
              listScript.push({
                command: '_updateWinningAmount',
                data: {
                  winAmount: winAmountPS,
                  time: 300
                }
              });
            }

            listScript.push({
              command: "_showBonusPayLine"
            });
            listScript.push({
              command: "_showCutscene",
              data: {
                name: SlotSceneType.IntroBonusGame
              }
            });
            listScript.push({
              command: "_newGameMode",
              data: {
                name: "bonusGame"
              }
            });
            listScript.push({
              command: "_resumeGameMode",
              data: {
                name: SlotGameMode.FreeGame
              }
            });
          }

          if (payLines && payLines.length > 0) {
            listScript.push({
              command: "_blinkAllPaylines"
            });
            listScript.push({
              command: "_showFreePayline"
            });
          }

          if (!freeGameRemain || freeGameRemain <= 0) {
            if (winAmountPS && winAmountPS > 0) {
              listScript.push({
                command: '_updateWinningAmount',
                data: {
                  winAmount: winAmountPS,
                  time: 300
                }
              });
            }

            listScript.push({
              command: "_delayTimeScript",
              data: 1
            });
            listScript.push({
              command: "_showUnskippedCutscene",
              data: {
                name: SlotSceneType.TotalWinPanel,
                content: {
                  winAmount: winAmountPS,
                  freeGameTotal: freeGameTotal
                }
              }
            });
            listScript.push({
              command: "_clearPaylines"
            });
            listScript.push({
              command: "_gameExit"
            });
          } else {
            if (freeGameRemain > dataStore.spinTimes) {
              listScript.push({
                command: "_showScatterPayLine"
              });
              listScript.push({
                command: "_moveParticles"
              });
              listScript.push({
                command: "_addSpinTimesAnimation",
                data: freeGameRemain - dataStore.spinTimes
              });
              dataStore.spinTimes = freeGameRemain;
              listScript.push({
                command: "_updateSpinTimes",
                data: freeGameRemain
              });
              listScript.push({
                command: "_delayTimeScript",
                data: 0.5
              });
            } else {
              dataStore.spinTimes = freeGameRemain;
              listScript.push({
                command: "_updateSpinTimes",
                data: freeGameRemain
              });
            }

            listScript.push({
              command: "_gameRestart"
            });
          }

          return listScript;
        };

        return FreeGameWriter;
      }(SlotGameWriter)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FreespinOption.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SlotUIScene.ts', './CustomEnum.ts', './utils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Label, Button, SlotUIScene, TutorialTriggerType, setOpacity;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
      Button = module.Button;
    }, function (module) {
      SlotUIScene = module.SlotUIScene;
    }, function (module) {
      TutorialTriggerType = module.TutorialTriggerType;
    }, function (module) {
      setOpacity = module.setOpacity;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "8204ahS8mpMnY9z9PezUrML", "FreespinOption", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BaseFreespinOption = exports('BaseFreespinOption', (_dec = ccclass('BaseFreespinOption'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Label
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_SlotUIScene) {
        _inheritsLoose(BaseFreespinOption, _SlotUIScene);

        function BaseFreespinOption() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SlotUIScene.call.apply(_SlotUIScene, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "options", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "countDownText", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "autoSelectTime", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "countDownTime", _descriptor4, _assertThisInitialized(_this));

          _this.repeatCountDown = null;
          _this._count = null;
          return _this;
        }

        var _proto = BaseFreespinOption.prototype; //enable option when open

        _proto.enter = function enter() {
          this.guiMgr.onIngameEvent(TutorialTriggerType.EnterFreeGameOption, 'ON_ENTER_FREEGAME_OPTION');
          this.options.children.forEach(function (item) {
            item.getComponent(Button).interactable = true;
            setOpacity(item, 255);
          });
          this.runAutoSelectOption();
          this.soundPlayer && this.soundPlayer.playMusic("BGM_SELECT_OPTION");
        };

        _proto.runAutoSelectOption = function runAutoSelectOption() {
          var _this2 = this;

          this._count = this.autoSelectTime;

          if (this.countDownText) {
            this.setOpacity(this.countDownText.node, 255);
            this.countDownText.string = "H\u1EC7 th\u1ED1ng s\u1EBD t\u1EF1 ch\u1ECDn sau: " + this._count + "s";
          }

          this.repeatCountDown = function () {
            if (_this2._count == 0) {
              var randomOption = Math.ceil(Math.random() * _this2.options.children.length);

              _this2.optionClick(null, randomOption);

              _this2.unschedule(_this2.repeatCountDown);
            }

            _this2._count--;

            if (_this2.countDownText) {
              _this2.countDownText.string = "H\u1EC7 th\u1ED1ng s\u1EBD t\u1EF1 ch\u1ECDn sau: " + _this2._count + "s";
            }

            if (_this2._count <= _this2.countDownTime) {
              _this2.playAudioCountDown();
            }
          };

          this.schedule(this.repeatCountDown, 1);
        }; //disable option when close


        _proto.optionClick = function optionClick(ev, index) {
          this.unschedule(this.repeatCountDown);
          this.soundPlayer && this.soundPlayer.stopAllEffects();
          this.soundPlayer && this.soundPlayer.playSfx("BONUS_COIN_SELECT");

          if (this.countDownText) {
            this.setOpacity(this.countDownText.node, 0);
          }

          this.options.children.forEach(function (item, i) {
            item.getComponent(Button).interactable = false;

            if (i + 1 == index) {
              setOpacity(item, 255);
            } else {
              setOpacity(item, 150);
            }
          });
          this.runAnimSelecedOption(index);
        };

        _proto.runAnimSelecedOption = function runAnimSelecedOption(option) {
          // to do
          this.guiMgr.onIngameEvent(TutorialTriggerType.FreeGameOptionClick, 'FREEGAME_OPTION_SELECT');
          this.mainDirector.freeSpinOptionTrigger(option);
        };

        _proto.playAudioCountDown = function playAudioCountDown() {
          this.soundPlayer && this.soundPlayer.playSfx("COUNT_DOWN_30S");
        };

        return BaseFreespinOption;
      }(SlotUIScene), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "options", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "countDownText", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "autoSelectTime", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 15;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "countDownTime", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 5;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FreezeSkill1998.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfFreezeSkill.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, gfFreezeSkill;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
    }, function (module) {
      gfFreezeSkill = module.gfFreezeSkill;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "bb140DE+AdD8rmYv/1B+V/l", "FreezeSkill1998", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var FreezeSkill1998 = exports('FreezeSkill1998', (_dec = ccclass('FreezeSkill1998'), _dec2 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_gfFreezeSkill) {
        _inheritsLoose(FreezeSkill1998, _gfFreezeSkill);

        function FreezeSkill1998() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfFreezeSkill.call.apply(_gfFreezeSkill, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "imageGray", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = FreezeSkill1998.prototype;

        _proto.updateCooldownProgress = function updateCooldownProgress() {
          _gfFreezeSkill.prototype.updateCooldownProgress.call(this);

          this.imageGray.active = true;
        };

        _proto.updateFreezeButtonStatus = function updateFreezeButtonStatus() {
          _gfFreezeSkill.prototype.updateFreezeButtonStatus.call(this);

          this.imageGray.active = !this.btnFreeze.interactable;
        };

        return FreezeSkill1998;
      }(gfFreezeSkill), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "imageGray", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GambleBox.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Label, Event, tween, Vec3, Button, GameObject;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
      Event = module.Event;
      tween = module.tween;
      Vec3 = module.Vec3;
      Button = module.Button;
    }, function (module) {
      GameObject = module.GameObject;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "f8577QAtftI9po6B2oqnGtz", "GambleBox", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GambleBox = exports('GambleBox', (_dec = ccclass('GambleBox'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(GambleBox, _GameObject);

        function GambleBox() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "staticNode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "symbolNode", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labelScore", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "soundBoxClick", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "soundBoxOpen", _descriptor5, _assertThisInitialized(_this));

          _this.tweenClick = void 0;
          return _this;
        }

        var _proto = GambleBox.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          this.node.on("SHOW", this.show, this);
          this.node.on("HIDE", this.hide, this);
          this.node.on("PLAY_ANIM_CLICK", this.playAnimClick, this);
          this.node.on("STOP_ANIM_CLICK", this.stopAnimClick, this);
          this.node.on("OPEN", this.playAnimOpen, this);
          this.node.on("DIM", this.dim, this);
          this.node.on("RESET", this.resetBox, this);
          this.node.on("ENABLE", this.enableClick, this);
          this.node.on("DISABLE", this.disableClick, this);
          this.node.isOpen = false;
        };

        _proto.show = function show() {
          this.node.active = true;
        };

        _proto.hide = function hide() {
          this.node.active = false;
        };

        _proto.onClickBox = function onClickBox(e) {
          if (this.node.isOpen) return;
          var event = new Event('CLICK_BOX', true);
          this.node.dispatchEvent(event);
        };

        _proto.playAnimClick = function playAnimClick() {
          this.soundBoxClick && this.soundPlayer && this.soundPlayer.playSfx(this.soundBoxClick);
          var time = 0.02;
          this.stopAnimClick();
          this.tweenClick = tween(this.node).repeatForever(tween(this.node).by(time, {
            position: new Vec3(-10, 0, 0)
          }).by(time, {
            position: new Vec3(10, 0, 0)
          }).by(time, {
            position: new Vec3(10, 0, 0)
          }).by(time, {
            position: new Vec3(-10, 0, 0)
          }));
          this.tweenClick.start();
        };

        _proto.stopAnimClick = function stopAnimClick() {
          if (this.tweenClick) this.tweenClick.stop();
          this.tweenClick = null;
        };

        _proto.playAnimOpen = function playAnimOpen(value, callback) {
          var _this2 = this;

          this.node.isOpen = true;
          this.disableClick();
          this.soundBoxOpen && this.soundPlayer && this.soundPlayer.playSfx(this.soundBoxOpen);
          tween(this.node).delay(0.5).call(function () {
            _this2.stopAnimClick();

            _this2.showScore(value);
          }).delay(0.5).call(function () {
            if (callback && typeof callback === 'function') {
              callback();
            }
          }).start();
        };

        _proto.dim = function dim() {
          this.setOpacity(this.node, 150);
        };

        _proto.showScore = function showScore(value) {
          this.labelScore.string = value.toString();
        };

        _proto.enableClick = function enableClick() {
          this.node.getComponent(Button).interactable = true;
        };

        _proto.disableClick = function disableClick() {
          this.node.getComponent(Button).interactable = false;
        };

        _proto.resetBox = function resetBox() {
          this.stopAnimClick();
          this.labelScore.string = "";
          this.symbolNode.active = false;
          this.setOpacity(this.staticNode, 255);
          this.setOpacity(this.node, 255);
          this.node.isOpen = false;
          this.enableClick();
        };

        return GambleBox;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "staticNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "symbolNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "labelScore", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "soundBoxClick", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "soundBoxOpen", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GambleDirector.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CustomEnum.ts', './BaseDirector.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Prefab, instantiate, v3, SlotGameMode, BaseDirector;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Prefab = module.Prefab;
      instantiate = module.instantiate;
      v3 = module.v3;
    }, function (module) {
      SlotGameMode = module.SlotGameMode;
    }, function (module) {
      BaseDirector = module.BaseDirector;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "6e5b7pgYPxE77AttN0m8GZL", "GambleDirector", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          integer = _decorator.integer;
      var GambleDirector = exports('GambleDirector', (_dec = ccclass('GambleDirector'), _dec2 = property(Node), _dec3 = property(Prefab), _dec(_class = (_class2 = /*#__PURE__*/function (_BaseDirector) {
        _inheritsLoose(GambleDirector, _BaseDirector);

        function GambleDirector() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseDirector.call.apply(_BaseDirector, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "table", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "boxPrefab", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "boxNumber", _descriptor3, _assertThisInitialized(_this));

          _this.listBoxes = [];
          _this.listOpenedIndexes = [];
          _this.isWaitingResult = false;
          _this.currentPick = void 0;
          _this.maxOpenBoxes = 1;
          _this.remainValues = [];
          _this.isIdle = true;
          _this.callbackStateUpdate = null;
          _this._delayTimeCallback = null;
          _this.countDownText = null;
          _this.isClickStopGamble = false;
          return _this;
        }

        var _proto = GambleDirector.prototype;

        _proto.onLoad = function onLoad() {
          // Debug: { window['gamble'] = this; }
          _BaseDirector.prototype.onLoad.call(this);

          this.setOpacity(this.node, 0);
          this.node.on("GAME_UPDATE", this.stateUpdate, this);
          this.node.on("GAME_ENTER", this.ready, this);
          this.node.on("GAME_SHOW", this.showGame, this);
          this.node.on("GAME_HIDE", this.hideGame, this);
          this.node.on('CLICK_BOX', this.onClickBox, this);
          this.init();
          if (this.mainDirector) this.mainDirector.gameModes[SlotGameMode.GambleGame] = this.node;
        };

        _proto.showGame = function showGame() {
          this.node.active = true;
        };

        _proto.hideGame = function hideGame() {
          this.node.active = false;
        };

        _proto.init = function init() {
          this.writer = this.node['writer'];
          this.isWaitingResult = false;
          this.node.active = false;
          this.initBoxes();
        };

        _proto.initBoxes = function initBoxes() {
          for (var index = 0; index < this.boxNumber; index++) {
            var box = instantiate(this.boxPrefab);
            box.boxIndex = index;
            box.active = true;
            this.table.addChild(box);
            this.listBoxes.push(box);
            box.setPosition(this.getPosByIndex(index));
          }
        };

        _proto.getPosByIndex = function getPosByIndex(index) {
          var WIDTH = 175;
          var x = (index - (this.boxNumber - 1) / 2) * WIDTH;
          return v3(x, 0, 0);
        };

        _proto.onClickBox = function onClickBox(event) {
          event.propagationStopped = true;
          if (this.isWaitingResult) return;
          if (this.isClickStopGamble) return;
          var box = event.target;

          if (this.canOpenBox(box)) {
            this.isIdle = false;
            this.currentPick = box.boxIndex;
            this.runAction("GambleGameClick", this.currentPick);
            this.listOpenedIndexes.push(this.currentPick);
            box.emit("DISABLE");
            box.emit("PLAY_ANIM_CLICK");
          }
        };

        _proto.onClickStopGamble = function onClickStopGamble() {
          if (this.isWaitingResult) return;
          if (this.isClickStopGamble) return;
          var gambleRemain = this.dataStore.playSession.gambleRemain;
          if (!gambleRemain) return this._gameExit();
          this.isWaitingResult = true;
          this.isClickStopGamble = true;
          this.mainDirector.gameStateManager.triggerGambleSpinRequest(1, 0);
        };

        _proto.canOpenBox = function canOpenBox(box) {
          if (this.listOpenedIndexes.length >= this.maxOpenBoxes) return false;
          if (this.listOpenedIndexes.indexOf(box.boxIndex) > -1) return false;
          return this.listOpenedIndexes.length < this.maxOpenBoxes;
        };

        _proto.resetGambleGame = function resetGambleGame() {
          this.isIdle = true;
          this.currentPick = void 0;
          this.listOpenedIndexes = [];
          this.isClickStopGamble = false;
          this.listBoxes.forEach(function (box) {
            return box.emit("RESET");
          });
        }
        /**
         * @receive_data
         * */
        ;

        _proto.stateUpdate = function stateUpdate(callback) {
          this.callbackStateUpdate = callback;

          if (this.isClickStopGamble) {
            this._gameExit();

            return;
          }

          this.runAction('ResultReceive');
        };

        _proto.runCallbackStateUpdate = function runCallbackStateUpdate() {
          if (typeof this.callbackStateUpdate == "function") {
            this.callbackStateUpdate();
            this.callbackStateUpdate = null;
          }
        };

        _proto.ready = function ready() {
          this.isWaitingResult = false;
          this.runAction("GambleGameStart");
        };

        _proto._checkPauseTutorial = function _checkPauseTutorial(flag) {
          return this.guiMgr.checkPauseTutorial(flag);
        };

        _proto.pickOutRandomValue = function pickOutRandomValue() {
          var randomIndex = Math.floor(Math.random() * this.remainValues.length);
          return this.remainValues.splice(randomIndex, 1)[0];
        }
        /** 
         * @commands
         */
        ;

        _proto._enableGambleButton = function _enableGambleButton(script, isEnable) {
          this.eventManager.emit("ENABLE_GAMBLE_BUTTON", isEnable);
          this.executeNextScript(script);
        };

        _proto._delayTimeScript = function _delayTimeScript(script, time) {
          var _this2 = this;

          this._delayTimeCallback = function () {
            _this2.executeNextScript(script);
          };

          this.scheduleOnce(this._delayTimeCallback, time);
        };

        _proto._showCutscene = function _showCutscene(script, _ref) {
          var _this3 = this;

          var name = _ref.name,
              content = _ref.content;

          if (this._checkPauseTutorial('pauseFreeGame') || this._checkPauseTutorial('pauseBonusGame') || this._checkPauseTutorial('pauseGambleGame')) {
            this.storeCurrentScripts = '_showCutscene';
            var data = {
              name: name,
              content: content
            };
            this.storeNextScripts = {
              script: script,
              data: data
            };
          } else {
            this.guiMgr.showCutScene(name, content, function () {
              _this3.executeNextScript(script);
            });
          }
        };

        _proto._gambleGameStart = function _gambleGameStart(scripts) {
          if (this._checkPauseTutorial('pauseGambleGame')) {
            this.storeCurrentScripts = '_gambleGameStart';
            this.storeNextScripts = {
              scripts: scripts,
              data: {}
            };
          } else {
            this.executeNextScript(scripts);
          }
        };

        _proto._sendRequestPlayGamble = function _sendRequestPlayGamble(scripts, _ref2) {
          var openCell = _ref2.openCell;
          this.isWaitingResult = true;
          var winAmountPS = this.dataStore.playSession.winAmountPS;
          this.dataStore.setCurrentWallet(this.dataStore.getCurrentWallet() - winAmountPS);
          this.mainDirector.guiMgr.updateWallet(this.dataStore.getWallets());
          this.dataStore.pauseCurrentWallet();
          this.mainDirector.gameStateManager.triggerGambleSpinRequest(openCell, winAmountPS);
          this.executeNextScript(scripts);
        };

        _proto._showResult = function _showResult(script) {
          this.isWaitingResult = false;
          this.runAction("ShowResult");
          this.executeNextScript(script);
        };

        _proto._openPickedBox = function _openPickedBox(scripts, data) {
          var _this4 = this;

          var index = data.index,
              value = data.value;
          var box = this.listBoxes[index];
          box.emit("OPEN", value, function () {
            _this4.executeNextScript(scripts);
          });
        };

        _proto._setRemainValues = function _setRemainValues(scripts, remainValues) {
          this.remainValues = remainValues;
          this.executeNextScript(scripts);
        };

        _proto._openAllBoxes = function _openAllBoxes(scripts) {
          var _this5 = this;

          for (var i = 0; i < this.listBoxes.length; i++) {
            var box = this.listBoxes[i];

            if (box.isOpen === false) {
              var randomValue = this.pickOutRandomValue();
              box.emit("STOP_ANIM_CLICK");
              box.emit("OPEN", randomValue, null);
              this.setOpacity(box, 180);
            }
          }

          this.scheduleOnce(function () {
            _this5.executeNextScript(scripts);
          }, 2);
        };

        _proto._updateWinningAmount = function _updateWinningAmount(scripts, _ref3) {
          var winAmount = _ref3.winAmount,
              time = _ref3.time;
          this.guiMgr.updateWinAmount(winAmount, time / 1000);
          this.executeNextScript(scripts);
        };

        _proto._clearWinAmount = function _clearWinAmount(script) {
          this.guiMgr.fadeOutWinAmount();
          this.executeNextScript(script);
        };

        _proto._showBigWin = function _showBigWin(script, _ref4) {
          var _this6 = this;

          var name = _ref4.name,
              content = _ref4.content;

          if (this.canStoreAsyncScript()) {
            var callback = function callback() {
              _this6.guiMgr.showCutScene(name, content, function () {
                _this6.runAsyncScript();
              });
            };

            this.storeAsyncScript(script, {
              callback: callback,
              name: "_showBigWin",
              isSkippable: true
            });
          } else {
            this.guiMgr.showCutScene(name, content, function () {
              _this6.executeNextScript(script);
            });
          }
        };

        _proto._gambleGameRestart = function _gambleGameRestart(scripts) {
          this.resetGambleGame();
          this.executeNextScript(scripts);
        };

        _proto._gameExit = function _gameExit() {
          this.resetGambleGame();
          this.eventManager.emit("HIDE_GAMBLE_GAME");
          this.node.exit();
        };

        return GambleDirector;
      }(BaseDirector), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "table", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "boxPrefab", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "boxNumber", [integer], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 3;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GambleWriter.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts', './utils.ts', './CustomEnum.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, GameObject, shuffleArray, removeElementByValue, SlotSceneType;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      GameObject = module.GameObject;
    }, function (module) {
      shuffleArray = module.shuffleArray;
      removeElementByValue = module.removeElementByValue;
    }, function (module) {
      SlotSceneType = module.SlotSceneType;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "6ca40ppxixI+Zf7C06uqOLq", "GambleWriter", undefined);

      var ccclass = _decorator.ccclass;
      var GambleWriter = exports('GambleWriter', (_dec = ccclass('GambleWriter'), _dec(_class = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(GambleWriter, _GameObject);

        function GambleWriter() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;
          _this.currentPick = null;
          _this.allValues = [0, 0, 2, 2];
          return _this;
        }

        var _proto = GambleWriter.prototype;

        _proto.onLoad = function onLoad() {
          this.node['writer'] = this;
        };

        _proto.makeScriptGambleGameStart = function makeScriptGambleGameStart() {
          return [{
            command: "_gambleGameStart"
          }];
        };

        _proto.makeScriptGambleGameClick = function makeScriptGambleGameClick(boxIndex) {
          this.currentPick = boxIndex;
          return [{
            command: '_clearWinAmount'
          }, {
            command: "_sendRequestPlayGamble",
            data: {
              openCell: boxIndex
            }
          }];
        };

        _proto.makeScriptResultReceive = function makeScriptResultReceive() {
          var listScript = [];
          listScript.push({
            command: "_showResult"
          });
          return listScript;
        };

        _proto.makeScriptShowResult = function makeScriptShowResult() {
          var listScript = [];
          var _this$dataStore$playS = this.dataStore.playSession,
              winAmountPS = _this$dataStore$playS.winAmountPS,
              gambleRemain = _this$dataStore$playS.gambleRemain;
          var gambleValue = winAmountPS > 0 ? 2 : 0;
          listScript.push({
            command: "_openPickedBox",
            data: {
              index: this.currentPick,
              value: gambleValue
            }
          });
          var cloneValues = this.allValues.slice(); // copy

          var remainValues = shuffleArray(removeElementByValue(cloneValues, gambleValue));
          listScript.push({
            command: "_setRemainValues",
            data: remainValues
          });
          listScript.push({
            command: "_openAllBoxes"
          });

          if (winAmountPS > 0) {
            listScript.push({
              command: "_updateWinningAmount",
              data: {
                winAmount: winAmountPS,
                time: 300
              }
            });
          }

          listScript.push({
            command: "_showCutscene",
            data: {
              name: SlotSceneType.TotalWinPanel,
              content: {
                winAmount: winAmountPS
              }
            }
          });

          if (gambleRemain > 0) {
            listScript.push({
              command: "_gambleGameRestart"
            });
            return listScript;
          } else {
            listScript.push({
              command: "_enableGambleButton",
              data: false
            });
            listScript.push({
              command: "_gameExit"
            });
            return listScript;
          }
        };

        return GambleWriter;
      }(GameObject)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameAnalytics.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EventNames.ts', './GameObject.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, log, EventNames, GameObject;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      log = module.log;
    }, function (module) {
      EventNames = module.default;
    }, function (module) {
      GameObject = module.GameObject;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "33dc3+580VNC5Cmh3Z2xIm8", "GameAnalytics", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GameAnalytics = exports('GameAnalytics', (_dec = ccclass('GameAnalytics'), _dec(_class = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(GameAnalytics, _GameObject);

        function GameAnalytics() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;
          _this.firebaseApp = null;
          _this.analytics = null;
          return _this;
        }

        var _proto = GameAnalytics.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          if (globalThis.firebase) {
            this.firebaseApp = globalThis.firebase.initializeApp(this.config.FIREBASE_CONFIG, this.config.GAME_ID);
            this.analytics = this.firebaseApp.analytics();
            this.eventManager.on(EventNames.JOIN_GAME_SUCCESS, this.onJoinGameSuccess, this);
            this.eventManager.on(EventNames.JOIN_GAME_FAIL, this.onJoinGameFail, this);
            this.eventManager.on(EventNames.SPIN_CLICK, this.onSpinClick, this);
            this.eventManager.on(EventNames.AUTO_SPIN_START, this.onAutoSpinStart, this);
            this.eventManager.on(EventNames.TUTORIAL_START, this.onTutorialStart, this);
            this.eventManager.on(EventNames.TUTORIAL_BREAK, this.onTutorialBreak, this);
            this.eventManager.on(EventNames.TUTORIAL_END, this.onTutorialEnd, this);
            this.eventManager.on(EventNames.TURBO_ON, this.onTurboOn, this);
            this.eventManager.on(EventNames.TURBO_OFF, this.onTurboOff, this);
            this.eventManager.on(EventNames.OPEN_INFO, this.onOpenInfo, this);
          }
        };

        _proto.onJoinGameSuccess = function onJoinGameSuccess(_ref) {
          var dataResume = _ref.dataResume;
          var isResume = dataResume ? true : false;
          this.logEvent(EventNames.JOIN_GAME_SUCCESS, {
            "IsResume": isResume
          });
        };

        _proto.onJoinGameFail = function onJoinGameFail(errorCode) {
          if (errorCode === void 0) {
            errorCode = 0;
          }

          this.logEvent(EventNames.JOIN_GAME_FAIL, {
            'ErrorCode': errorCode
          });
        };

        _proto.onSpinClick = function onSpinClick() {
          this.logEvent(EventNames.SPIN_CLICK, {
            'TotalBet': this.dataStore.getTotalBet(),
            'IsTrial': this.dataStore.isTrialMode,
            'IsTurbo': this.dataStore.modeTurbo
          });
        };

        _proto.onAutoSpinStart = function onAutoSpinStart(spinTimes) {
          this.logEvent(EventNames.AUTO_SPIN_START, {
            'SpinTimes': spinTimes,
            'TotalBet': this.dataStore.getTotalBet()
          });
        };

        _proto.onTurboOn = function onTurboOn() {
          this.logEvent(EventNames.TURBO_ON, {});
        };

        _proto.onTurboOff = function onTurboOff() {
          this.logEvent(EventNames.TURBO_OFF, {});
        };

        _proto.onTutorialStart = function onTutorialStart() {
          this.logEvent(EventNames.TUTORIAL_START, {});
        };

        _proto.onTutorialBreak = function onTutorialBreak() {
          this.logEvent(EventNames.TUTORIAL_BREAK, {});
        };

        _proto.onTutorialEnd = function onTutorialEnd() {
          this.logEvent(EventNames.TUTORIAL_END, {});
        };

        _proto.onOpenInfo = function onOpenInfo(page) {
          this.logEvent(EventNames.OPEN_INFO, {
            'Page': page
          });
        };

        _proto.logEvent = function logEvent(eventName, params) {
          log("GameAnalytics Track Event " + eventName);
          this.analytics.logEvent(eventName, params);
        };

        _proto.onDestroy = function onDestroy() {
          this.eventManager.off(EventNames.JOIN_GAME_SUCCESS, this.onJoinGameSuccess, this);
          this.eventManager.off(EventNames.JOIN_GAME_FAIL, this.onJoinGameFail, this);
          this.eventManager.off(EventNames.SPIN_CLICK, this.onSpinClick, this);
          this.eventManager.off(EventNames.AUTO_SPIN_START, this.onAutoSpinStart, this);
          this.eventManager.off(EventNames.TUTORIAL_START, this.onTutorialStart, this);
          this.eventManager.off(EventNames.TUTORIAL_BREAK, this.onTutorialBreak, this);
          this.eventManager.off(EventNames.TUTORIAL_END, this.onTutorialEnd, this);
          this.eventManager.off(EventNames.TURBO_ON, this.onTurboOn, this);
          this.eventManager.off(EventNames.TURBO_OFF, this.onTurboOff, this);
          this.eventManager.off(EventNames.OPEN_INFO, this.onOpenInfo, this);
        };

        return GameAnalytics;
      }(GameObject)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gameCommonUtils.ts", ['cc', './loadConfigAsync.ts', './utils.ts'], function (exports) {
  'use strict';

  var cclegacy, sys, rect, director, game, loadConfigAsync, setOpacity;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      sys = module.sys;
      rect = module.rect;
      director = module.director;
      game = module.game;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      setOpacity = module.setOpacity;
    }],
    execute: function () {
      cclegacy._RF.push({}, "57626ZrpD9Ds4C68txemV+u", "gameCommonUtils", undefined);

      var lodash = globalThis._;

      var GameCommonUtils = /*#__PURE__*/function () {
        function GameCommonUtils() {
          var _this = this;

          this.gameCanvasSize = {};

          this.getUrlParam = function (name) {
            if (sys.isNative) return null;
            var url = new URL(window.location);
            return url.searchParams.get(name);
          };

          this.checkConditionCloseGameIframe = function () {
            var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
                LOGIN_IFRAME = _loadConfigAsync$getC.LOGIN_IFRAME;

            if (!LOGIN_IFRAME) {
              return true;
            }

            var returnUrl = _this.getUrlParam('ru');

            return returnUrl && LOGIN_IFRAME;
          };

          this.handleCloseGameIframe = function () {
            var _loadConfigAsync$getC2 = loadConfigAsync.getConfig(),
                LOGIN_IFRAME = _loadConfigAsync$getC2.LOGIN_IFRAME;

            if (!LOGIN_IFRAME) {
              _this.handleBackToLobby();

              return;
            }

            var returnUrl = _this.getUrlParam('ru');

            if (returnUrl && LOGIN_IFRAME) {
              if (returnUrl.trim() === 'close') {
                window.close();
              } else {
                window.location.href = returnUrl;
              }
            } else {
              location.reload();
            }
          };

          this.handleFlowOutGame = function () {
            var _loadConfigAsync$getC3 = loadConfigAsync.getConfig(),
                LOGIN_IFRAME = _loadConfigAsync$getC3.LOGIN_IFRAME;

            if (LOGIN_IFRAME) {
              if (window && window.location) {
                window.location.reload();
              }
            } else {
              _this.handleBackToLobby();
            }
          };

          this.handleBackLogin = function () {
            var _loadConfigAsync$getC4 = loadConfigAsync.getConfig(),
                LOGIN_IFRAME = _loadConfigAsync$getC4.LOGIN_IFRAME;

            if (LOGIN_IFRAME) {
              if (window && window.location) {
                window.location.reload();
              }
            } else {
              _this.handleBackToLobby();
            }
          };

          this.getMessageSlot = function (mess) {
            if (mess === void 0) {
              mess = {};
            }

            var messageConfig = Object.assign({
              NAME: 'DialogMessage',
              NO_MONEY: 'Số dư trong ví không đủ, vui lòng nạp thêm để chơi tiếp.',
              NO_MONEY_EVENT: 'Số dư trong [wallet] không đủ, vui lòng nạp thêm để chơi tiếp.',
              LOST_CONNECT: 'Bạn đã bị mất kết nối. \n Vui lòng chờ ...',
              SPIN_4_EVER: 'Bạn đã mất kết nối. \n Vui lòng thử lại.',
              ANOTHER_ACCOUNT: 'Tài khoản của bạn đã đăng nhập\ntừ thiết bị khác.',
              AUTHEN_FAILED: 'Xác thực tài khoản thất bại.',
              DEPOSIT_MONEY: 'Số dư không đủ, bạn có muốn nạp thêm ?',
              MISMATCH_DATA: 'Dữ liệu không đồng bộ với máy chủ, vui lòng thử lại.',
              SYSTEM_ERROR: 'Có lỗi xảy ra, vui lòng thử lại.',
              DISCONNECT: 'Bị mất kết nối tới máy chủ\n Đang kết nối lại.',
              NO_PLAYSESSION: 'Hệ thống không tìm thấy phiên chơi.',
              GROUP_MAINTAIN: 'Hệ thống đang bảo trì.\nVui lòng quay lại sau.',
              NETWORK_WARNING: 'Đường truyền mạng yếu!',
              NETWORK_DISCONNECT: 'Bị mất kết nối tới máy chủ \nĐang kết nối lại.',
              NO_FREESPIN_OPTION: 'Dữ liệu không đồng bộ với máy chủ, vui lòng thử lại.',
              IN_PROGRESSING: 'Mạng chậm vui lòng đợi trong giây lát để hoàn thành\nlượt quay hoặc bấm xác nhận để tải lại game.',
              SPIN_UNSUCCESS: 'Thao tác không thành công, vui lòng thử lại.',
              ACCOUNT_BLOCKED: 'Tài khoản của bạn đã bị khoá, vui lòng liên hệ admin.',
              QUEST_LOCK: 'Bạn chưa hoàn thành\nnhiệm vụ game trước.',
              EVENT_FORCE_CLOSE: 'ĐÓNG SỰ KIỆN',
              MISSION_FORCE_CLOSE: 'ĐÓNG NHIỆM VỤ',
              SUGGEST_TURBO: 'WOW, NHANH QUÁ!!!\nBẠN CÓ MUỐN MỞ CHẾ ĐỘ QUAY NHANH?',
              EVENT_ENDED: 'Sự kiện đã kết thúc.',
              FINISH_DEMO: 'ĐÂY LÀ BẢN DEMO,\nBẠN CÓ MUỐN CHƠI THẬT KHÔNG?',
              EVENT_UNSUPPORT_WALLET: 'Nhiệm vụ không được tính\nkhi chơi ví ngọc',
              EVENT_UNSUPPORT_BETID: 'Nhiệm vụ không được tính\nkhi chơi mức cược này'
            }, mess);

            var _loadConfigAsync$getC5 = loadConfigAsync.getConfig(),
                LOGIN_IFRAME = _loadConfigAsync$getC5.LOGIN_IFRAME;

            if (LOGIN_IFRAME) {
              messageConfig.ACCOUNT_BLOCKED = "Tài khoản bị khóa chơi game " + document.title.replace('Techplay - ', '');
            }

            return messageConfig;
          };

          this.getMessageSlotEng = function (mess) {
            if (mess === void 0) {
              mess = {};
            }

            var messageConfig = Object.assign({
              NAME: 'DialogMessage',
              NO_MONEY: 'You have run out of your balance, please top up.',
              LOST_CONNECT: 'Your device is not connected to the Internet.\nPlease try again.',
              SPIN_4_EVER: 'Your device is not connected to the Internet.\nPlease try again.',
              ANOTHER_ACCOUNT: 'You are logging in another device.',
              AUTHEN_FAILED: 'Authentication failed.',
              DEPOSIT_MONEY: 'Your balance is not enough, do you want to top up?',
              MISMATCH_DATA: 'Data is not synchronized between client and server.',
              SYSTEM_ERROR: 'System error, please try again later.',
              DISCONNECT: 'Message Disconnect.',
              NO_PLAYSESSION: 'Playsession is not correct.',
              GROUP_MAINTAIN: 'Server is under maintenance, please try again later.',
              NETWORK_WARNING: 'Đường truyền mạng yếu!',
              NETWORK_DISCONNECT: 'Bị mất kết nối tới máy chủ \nĐang kết nối lại.',
              NO_FREESPIN_OPTION: 'Dữ liệu không đồng bộ với máy chủ, vui lòng thử lại.',
              SPIN_UNSUCCESS: 'Thao tác không thành công, vui lòng thử lại.',
              ACCOUNT_BLOCKED: 'Tài khoản của bạn đã bị khoá, vui lòng liên hệ admin.',
              SUGGEST_TURBO: 'WOW, NHANH QUÁ!!!\nBẠN CÓ MUỐN MỞ CHẾ ĐỘ QUAY NHANH?'
            }, mess);

            var _loadConfigAsync$getC6 = loadConfigAsync.getConfig(),
                LOGIN_IFRAME = _loadConfigAsync$getC6.LOGIN_IFRAME;

            if (LOGIN_IFRAME) {
              messageConfig.ACCOUNT_BLOCKED = "Tài khoản bị khóa chơi game " + document.title.replace('Techplay - ', '');
            }

            return messageConfig;
          };

          this.getBetValueWithGame = function (gameId, listBet) {
            if (!gameId) return '';
            var betValue = sys.localStorage.getItem('betValueWithGame');

            if (lodash.isEmpty(betValue)) {
              var newObj = {};
              newObj[gameId] = '';
              sys.localStorage.setItem('betValueWithGame', JSON.stringify(newObj));
            } else {
              betValue = JSON.parse(betValue);

              if (lodash.isEmpty(listBet)) {
                return betValue[gameId];
              } else {
                if (lodash.isArray(listBet) && listBet.includes(betValue[gameId])) {
                  return betValue[gameId];
                } else {
                  var isExist = false;
                  Object.keys(listBet).map(function (betId) {
                    if (listBet[betId] === betValue[gameId]) {
                      isExist = true;
                    }
                  });

                  if (isExist) {
                    return betValue[gameId];
                  }
                }
              }
            }

            return '';
          };

          this.setBetValueWithGame = function (gameId, betId) {
            var betValue = sys.localStorage.getItem('betValueWithGame');

            if (lodash.isEmpty(betValue)) {
              var newObj = {};
              newObj[gameId] = betId;
              sys.localStorage.setItem('betValueWithGame', JSON.stringify(newObj));
            } else {
              betValue = JSON.parse(betValue);
              betValue[gameId] = betId;
              sys.localStorage.setItem('betValueWithGame', JSON.stringify(betValue));
            }
          };

          this.getKeyWithGame = function (gameId, key, value) {
            if (value === void 0) {
              value = '';
            }

            if (!gameId || !key) return '';
            var betLinesValue = sys.localStorage.getItem(key);

            if (lodash.isEmpty(betLinesValue)) {
              var newObj = {};
              newObj[gameId] = value;
              sys.localStorage.setItem(key, JSON.stringify(newObj));
            } else {
              betLinesValue = JSON.parse(betLinesValue);
              return betLinesValue[gameId] ? betLinesValue[gameId] : value;
            }

            return value;
          };

          this.setKeyWithGame = function (gameId, key, value) {
            if (value === void 0) {
              value = '';
            }

            if (!gameId || !key) return '';
            var betLinesValue = sys.localStorage.getItem(key);

            if (lodash.isEmpty(betLinesValue)) {
              var newObj = {};
              newObj[gameId] = value;
              sys.localStorage.setItem(key, JSON.stringify(newObj));
            } else {
              betLinesValue = JSON.parse(betLinesValue);
              betLinesValue[gameId] = value;
              sys.localStorage.setItem(key, JSON.stringify(betLinesValue));
            }
          };

          this.optimizeScrollView = function (listView) {
            var view = listView.parent;
            var viewRect = rect(-view.width / 2, -listView.y - view.height, view.width, view.height);

            for (var i = 0; i < listView.children.length; i++) {
              var node = listView.children[i];

              if (viewRect.intersects(node.getBoundingBox())) {
                setOpacity(node, 255);
              } else {
                setOpacity(node, 0);
              }
            }
          };
        }

        var _proto = GameCommonUtils.prototype;

        _proto.isLoginIframe = function isLoginIframe() {
          var _loadConfigAsync$getC7 = loadConfigAsync.getConfig(),
              LOGIN_IFRAME = _loadConfigAsync$getC7.LOGIN_IFRAME;

          return LOGIN_IFRAME === true;
        };

        _proto.handleBackToLobby = function handleBackToLobby() {
          var _loadConfigAsync$getC8 = loadConfigAsync.getConfig(),
              IS_PRODUCTION = _loadConfigAsync$getC8.IS_PRODUCTION,
              LOBBY_SCENE_NAME = _loadConfigAsync$getC8.LOBBY_SCENE_NAME;

          if (IS_PRODUCTION) {
            director.emit("INTEGRATION_BACK_TO_LOBBY");
          } else {
            var scene = director.getScene();
            var nodePersist = scene.getChildByName('OverlayPersistent');

            if (nodePersist) {
              game.removePersistRootNode(nodePersist);
            }

            director.preloadScene(LOBBY_SCENE_NAME, function () {
              director.loadScene(LOBBY_SCENE_NAME);
            });
          }
        };

        _proto.handleReleaseBundle = function handleReleaseBundle() {};

        return GameCommonUtils;
      }();

      var gameCommonUtils = exports('default', new GameCommonUtils());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameEvent.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, Node, Label, NodePool, instantiate, Component, formatMoney, customDateFormat, startGameFromEvent;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Node = module.Node;
      Label = module.Label;
      NodePool = module.NodePool;
      instantiate = module.instantiate;
      Component = module.Component;
    }, function (module) {
      formatMoney = module.formatMoney;
      customDateFormat = module.customDateFormat;
      startGameFromEvent = module.startGameFromEvent;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;

      cclegacy._RF.push({}, "3a765ClryJDR75k/7uN4CBN", "GameEvent", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GameEvent = exports('GameEvent', (_dec = ccclass('GameEvent'), _dec2 = property({
        type: Prefab
      }), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: Label
      }), _dec6 = property({
        type: Label
      }), _dec7 = property({
        type: Label
      }), _dec8 = property({
        type: Label
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GameEvent, _Component);

        function GameEvent() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.currentQuest = null;
          _this.eventId = null;
          _this.type = '';

          _initializerDefineProperty(_this, "questPrefab", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "questHolder", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "rewardHolder", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "rewardString", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "eventName", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "eventTime", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "eventPeriod", _descriptor7, _assertThisInitialized(_this));

          _this.questPool = null;
          return _this;
        }

        var _proto = GameEvent.prototype;

        _proto.onLoad = function onLoad() {
          this.questPool = new NodePool();
        };

        _proto.getQuest = function getQuest() {
          var quest = this.questPool.get();

          if (!quest) {
            quest = instantiate(this.questPrefab);
          }

          return quest;
        };

        _proto.onDisable = function onDisable() {
          while (this.questHolder.children.length > 0) {
            this.questPool.put(this.questHolder.children[0]);
          }
        };

        _proto.init = function init(data) {
          // console.log(data);
          this.currentQuest = null;
          this.eventId = data.eventInfo.id;
          this.type = data.eventInfo.isMission == 1 ? "Mission" : "Event";
          this.eventName.string = this.type + ": " + data.eventInfo.name;
          var loadCurrentQuest = false;

          for (var i = 0; i < data.listQuest.length; i++) {
            var quest = this.getQuest();
            quest.setParent(this.questHolder);
            quest.getComponent('GameQuest').init(data.listQuest[i], data.eventInfo.id);

            if (!loadCurrentQuest && !data.listQuest[i].isComplete) {
              this.currentQuest = data.listQuest[i];
              loadCurrentQuest = true;
            }
          }

          if (data.eventInfo.rewardAmount) {
            this.rewardHolder.active = true;
            this.rewardString.string = formatMoney(data.eventInfo.rewardAmount);
          } else {
            this.rewardHolder.active = false;
          }

          var startDate = new Date(data.eventInfo.startDate);
          var endDate = new Date(data.eventInfo.endDate);
          var startDateStr = customDateFormat(startDate, '#hhhh#:#mm# #DD#-#MM#-#YYYY#');
          var endDataStr = customDateFormat(endDate, '#hhhh#:#mm# #DD#-#MM#-#YYYY#');
          this.eventTime.string = "Th\u1EDDi gian: " + startDateStr + " - " + endDataStr;

          if (data.eventInfo.timePeriod && data.eventInfo.timePeriod.length > 0) {
            var periodString = '';

            for (var _i = 0; _i < data.eventInfo.timePeriod.length; _i++) {
              var period = data.eventInfo.timePeriod[_i];
              periodString += "[" + this.convertHourUTC(period.startTime) + " - " + this.convertHourUTC(period.endTime) + "]";
            }

            this.eventPeriod.string = 'Khung giờ: ' + periodString;
          } else {
            this.eventPeriod.string = 'Khung giờ: Tất Cả';
          }
        };

        _proto.convertHourUTC = function convertHourUTC(time) {
          //to GMT +7
          var timeArray = time.split(':');
          var hour = parseInt(timeArray[0]) + 7;
          hour = hour > 24 ? hour - 24 : hour;
          var result = hour + ":" + timeArray[1];
          if (hour < 10) result = '0' + result;
          return result;
        };

        _proto.playEvent = function playEvent() {
          if (this.currentQuest) {
            var gameId = this.currentQuest.serviceIds[0];
            var eventId = this.eventId;
            startGameFromEvent(gameId);
          }
        };

        _proto.onDestroy = function onDestroy() {
          this.questPool.clear();
        };

        return GameEvent;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "questPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "questHolder", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "rewardHolder", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "rewardString", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "eventName", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "eventTime", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "eventPeriod", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameLayer1989.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfEventEmitter.ts', './gfGameLayer.ts', './gfBaseEvents.ts', './DataStore1989.ts', './ReferenceManager1989.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, gfEventEmitter, GfGameLayer, gfBaseEvents, DataStore1989, ReferenceManager1989;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      GfGameLayer = module.GfGameLayer;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      DataStore1989 = module.default;
    }, function (module) {
      ReferenceManager1989 = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "9372e4iH/xE1KnP4SxPC61X", "GameLayer1989", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GameLayer1989 = exports('GameLayer1989', (_dec = ccclass('GameLayer1989'), _dec(_class = /*#__PURE__*/function (_GfGameLayer) {
        _inheritsLoose(GameLayer1989, _GfGameLayer);

        function GameLayer1989() {
          return _GfGameLayer.apply(this, arguments) || this;
        }

        var _proto = GameLayer1989.prototype;

        _proto.sendDataPlayerFire = function sendDataPlayerFire(data) {
          var player = ReferenceManager1989.instance.getPlayerByDeskStation(DataStore1989.instance.getSelfDeskStation());

          if (player && player.checkUpdateGunByWallet()) {
            var outData = this.calculateDataPlayerFire(data);
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.SEND_GUN_FIRE, outData);
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.ON_PLAYER_FIRE, outData);
          }
        };

        _proto.onOtherPlayerFire = function onOtherPlayerFire(data) {
          var player = ReferenceManager1989.instance.getPlayerByDeskStation(data.DeskStation);
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.ON_PLAYER_FIRE, data);
        };

        return GameLayer1989;
      }(GfGameLayer)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameLogo.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './loadConfigAsync.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component, loadConfigAsync;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      loadConfigAsync = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "197f4TTNgtGs71sl9ECWnVm", "GameLogo", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GameLogo = exports('GameLogo', (_dec = ccclass('GameLogo'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GameLogo, _Component);

        function GameLogo() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = GameLogo.prototype;

        _proto.onLoad = function onLoad() {
          var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
              LOGIN_IFRAME = _loadConfigAsync$getC.LOGIN_IFRAME;

          if (LOGIN_IFRAME) {
            this.node.active = false;
          }
        };

        return GameLogo;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameMode.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, sys, Component, setOpacity;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sys = module.sys;
      Component = module.Component;
    }, function (module) {
      setOpacity = module.setOpacity;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "698e2Ijr7hE3ZOE6T4o6wQQ", "GameMode", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GameMode = exports('GameMode', (_dec = ccclass('GameMode'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GameMode, _Component);

        function GameMode() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.callBackWhenHide = void 0;
          return _this;
        }

        var _proto = GameMode.prototype;

        _proto.onLoad = function onLoad() {
          this.node.init = this.init.bind(this);
          this.node.enter = this.enter.bind(this);
          this.node.exit = this.exit.bind(this);
          this.node.hide = this.hide.bind(this);
          this.node.show = this.show.bind(this);
          this.node.reset = this.reset.bind(this);
          this.node.stateUpdate = this.stateUpdate.bind(this);
          this.node.stateResume = this.stateResume.bind(this);
          this.node.resetCallbackWhenHide = this.resetCallbackWhenHide.bind(this);
        };

        _proto.init = function init(isActive) {
          if (isActive === void 0) {
            isActive = false;
          }

          this.node.emit('GAME_INIT');
          setOpacity(this.node, 1);
          this.node.active = false;

          if (isActive) {
            setOpacity(this.node, 255);
            this.node.active = true;
          }
        };

        _proto.stateResume = function stateResume(callback) {
          this.node.emit('GAME_RESUME');

          if (callback && typeof callback == "function") {
            callback();
          }
        };

        _proto.stateUpdate = function stateUpdate(callback) {
          this.node.emit('GAME_UPDATE');

          if (callback && typeof callback == "function") {
            callback();
          }
        };

        _proto.show = function show(callback) {
          if (callback === void 0) {
            callback = null;
          }

          this.node.active = true;
          setOpacity(this.node, 255);
          this.node.emit('GAME_SHOW');

          if (callback && typeof callback == "function") {
            callback();
          }
        };

        _proto.exit = function exit() {
          if (this.callBackWhenHide && typeof this.callBackWhenHide == "function") {
            this.callBackWhenHide();
            this.callBackWhenHide = null;
          }

          this.hide();
          this.node.emit('GAME_EXIT');
          this.node.active = false;

          if (sys.isNative) {
            log('>>>>> GC Collect in Native');
            sys.garbageCollect();
          }
        };

        _proto.hide = function hide(callback) {
          if (callback === void 0) {
            callback = null;
          }

          setOpacity(this.node, 1);
          this.node.emit('GAME_HIDE');

          if (callback && typeof callback == "function") {
            callback();
          }

          this.node.active = false;
        };

        _proto.enter = function enter(data, callback) {
          this.node.active = true;
          this.show();
          this.callBackWhenHide = callback;
          this.node.emit('GAME_ENTER', data);
        };

        _proto.reset = function reset(callback) {
          this.node.emit('GAME_RESET');

          if (callback && typeof callback == "function") {
            callback();
          }
        };

        _proto.resetCallbackWhenHide = function resetCallbackWhenHide() {
          if (this.callBackWhenHide && typeof this.callBackWhenHide == "function") {
            this.callBackWhenHide = null;
          }
        };

        return GameMode;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameObject.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './CustomType.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _createClass, cclegacy, _decorator, Component, getOpacity, setOpacity, fadeIn, fadeOut, fadeTo, CustomEvent;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      getOpacity = module.getOpacity;
      setOpacity = module.setOpacity;
      fadeIn = module.fadeIn;
      fadeOut = module.fadeOut;
      fadeTo = module.fadeTo;
    }, function (module) {
      CustomEvent = module.CustomEvent;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "055b1lhRoJDK42lugsBQz08", "GameObject", undefined);

      var ccclass = _decorator.ccclass;
      var GameObject = exports('GameObject', (_dec = ccclass('GameObject'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GameObject, _Component);

        function GameObject() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = GameObject.prototype;

        _proto.onLoad = function onLoad() {
          this.node.on("GET_GAME_MODEL", this.getGameModel, this);

          if (!this.node["mainDirector"]) {
            this.node.dispatchEvent(new CustomEvent("GET_GAME_MODEL", true));
          }
        };

        _proto.getGameModel = function getGameModel(evt) {
          if (this.config) {
            evt.propagationStopped = true;
            evt.target.config = this.config;
            evt.target.dataStore = this.dataStore;
            evt.target.mainDirector = this.mainDirector;
          }
        };

        _proto.getOpacity = function getOpacity$1(node) {
          return getOpacity(node);
        };

        _proto.setOpacity = function setOpacity$1(node, opacity) {
          setOpacity(node, opacity);
        };

        _proto.fadeIn = function fadeIn$1(target, duration, options) {
          return fadeIn(target, duration, options);
        };

        _proto.fadeOut = function fadeOut$1(target, duration, options) {
          return fadeOut(target, duration, options);
        };

        _proto.fadeTo = function fadeTo$1(target, duration, opacity, options) {
          return fadeTo(target, duration, opacity, options);
        };

        _proto.onDestroy = function onDestroy() {
          this.node.off("GET_GAME_MODEL", this.getGameModel, this);

          if (this.eventManager) {
            this.eventManager.targetOff(this);
          }

          this.node.mainDirector = null;
          this.node.config = null;
          this.node.dataStore = null;
        };

        _createClass(GameObject, [{
          key: "mainDirector",
          get: function get() {
            return this.node.mainDirector;
          }
        }, {
          key: "config",
          get: function get() {
            return this.node.config;
          }
        }, {
          key: "dataStore",
          get: function get() {
            return this.node.dataStore;
          }
        }, {
          key: "soundPlayer",
          get: function get() {
            if (this.mainDirector) return this.mainDirector.soundPlayer;
            return null;
          }
        }, {
          key: "eventManager",
          get: function get() {
            if (this.mainDirector) return this.mainDirector.eventManager;
            return null;
          }
        }, {
          key: "guiMgr",
          get: function get() {
            if (this.mainDirector) return this.mainDirector.guiMgr;
            return null;
          }
        }]);

        return GameObject;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameQuest.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './LobbyScene.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Sprite, Node, Label, Component, formatMoney, LobbyScene;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Node = module.Node;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      formatMoney = module.formatMoney;
    }, function (module) {
      LobbyScene = module.LobbyScene;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "6c9a3NtH3hPhpKRbfg0K99V", "GameQuest", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GameQuest = exports('GameQuest', (_dec = ccclass('GameQuest'), _dec2 = property({
        type: Sprite
      }), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Label
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GameQuest, _Component);

        function GameQuest() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.gameId = null;
          _this.finished = false;
          _this.eventId = '';

          _initializerDefineProperty(_this, "iconGame", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "iconDone", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "reward", _descriptor3, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = GameQuest.prototype;

        _proto.init = function init(data, eventId) {
          this.eventId = eventId;
          this.gameId = data.serviceIds[0];
          var lobbyScene = this.node.scene.getComponentInChildren(LobbyScene);

          if (lobbyScene) {
            this.iconGame.spriteFrame = lobbyScene.getIconSpriteFrame(this.gameId);
          } else {
            this.iconGame.spriteFrame = null;
          }

          this.finished = data.isComplete;
          this.iconDone.active = this.finished;
          this.reward.string = formatMoney(data.rewardAmount); // console.log(`Reward String ${this.reward.string}`)
        };

        return GameQuest;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "iconGame", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "iconDone", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "reward", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gameStateSlot.ts", ['cc', './game-network.mjs_cjs=&original=.js', './loadConfigAsync.ts', './gameCommonUtils.ts', './NetworkEnum.ts', './MsgKeyMapping.ts', './utils.ts', './CustomEnum.ts', './game-network.js'], function (exports) {
  'use strict';

  var cclegacy, log, sys, loadConfigAsync, gameCommonUtils, NetworkEvent, MsgReceiveMapping, MsgSendMapping, MsgTopUserMapping, mapObjectKey, WalletType, PROMOTION_ERROR, _cjsExports;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      log = module.log;
      sys = module.sys;
    }, null, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      gameCommonUtils = module.default;
    }, function (module) {
      NetworkEvent = module.NetworkEvent;
    }, function (module) {
      MsgReceiveMapping = module.MsgReceiveMapping;
      MsgSendMapping = module.MsgSendMapping;
      MsgTopUserMapping = module.MsgTopUserMapping;
    }, function (module) {
      mapObjectKey = module.mapObjectKey;
    }, function (module) {
      WalletType = module.WalletType;
      PROMOTION_ERROR = module.PROMOTION_ERROR;
    }, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "ad964ok3MBPWp0kx2TruCgi", "gameStateSlot", undefined);

      var network = globalThis.GameNetwork || _cjsExports;
      var MessageManager = network.MessageManager,
          EventManager = network.EventManager,
          CommandManager = network.CommandManager,
          PlayerInfoStateManager = network.PlayerInfoStateManager;
      var _network$lib = network.lib,
          logger = _network$lib.logger,
          uuid = _network$lib.uuid;
      var messageManager = MessageManager.getInstance();
      var playerInfoStateManager = PlayerInfoStateManager.getInstance();
      var lodash = globalThis._;
      var SLOT_STRATEGY = {
        'client-join-game-request': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 10000,
          recoverEvent: "DIE"
        },
        'client-join-game-request-ev': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 10000,
          recoverEvent: "DIE"
        },
        'jg': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 10000,
          recoverEvent: "DIE"
        },
        'jge': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 10000,
          recoverEvent: "DIE"
        },
        'client-normal-spin-request': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 5000,
          recoverEvent: "PANIC"
        },
        'ng': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 5000,
          recoverEvent: "PANIC"
        },
        'client-free-spin-request': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 5000,
          recoverEvent: "PANIC"
        },
        'fg': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 5000,
          recoverEvent: "PANIC"
        },
        'client-respin-request': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 5000,
          recoverEvent: "PANIC"
        },
        'rg': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 5000,
          recoverEvent: "PANIC"
        },
        'client-lightning-spin-request': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 5000,
          recoverEvent: "PANIC"
        },
        'client-powerup-spin-request': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 5000,
          recoverEvent: "PANIC"
        },
        'client-mini-game-request': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 5000,
          recoverEvent: "PANIC"
        },
        'mg': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 5000,
          recoverEvent: "PANIC"
        },
        'client-free-spin-option-request': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 5000,
          recoverEvent: "PANIC"
        },
        'fo': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 5000,
          recoverEvent: "PANIC"
        },
        'client-gamble-spin-request': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 5000,
          recoverEvent: "PANIC"
        },
        'gg': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 5000,
          recoverEvent: "PANIC"
        },
        'glt': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 10000,
          recoverEvent: "PANIC"
        },
        'glte': {
          resendCount: 0,
          shouldWaitForACK: false,
          canBeDuplicated: true,
          timeWaitForEvent: 10000,
          recoverEvent: "DIE"
        },
        'client-join-game-trial-request': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 10000,
          recoverEvent: "DIE"
        },
        'client-normal-game-trial-request': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 10000,
          recoverEvent: "DIE"
        },
        'client-free-game-trial-request': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 10000,
          recoverEvent: "DIE"
        },
        'client-bonus-game-trial-request': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 10000,
          recoverEvent: "DIE"
        },
        'client-respin-trial-request': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 10000,
          recoverEvent: "DIE"
        },
        'rgt': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 10000,
          recoverEvent: "DIE"
        },
        'client-free-game-option-trial-request': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 10000,
          recoverEvent: "DIE"
        },
        'client-gamble-game-trial-request': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 10000,
          recoverEvent: "DIE"
        },
        'client-lightning-game-trial-request': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 10000,
          recoverEvent: "DIE"
        },
        'client-powerup-game-trial-request': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 10000,
          recoverEvent: "DIE"
        },
        'ngt': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 10000,
          recoverEvent: "DIE"
        },
        'fgt': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 10000,
          recoverEvent: "DIE"
        },
        'mgt': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 10000,
          recoverEvent: "DIE"
        },
        'fot': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 10000,
          recoverEvent: "DIE"
        },
        'p': {
          //ping
          resendCount: 0,
          shouldWaitForACK: false,
          canBeDuplicated: true,
          recoverEvent: "DIE"
        }
      };
      var NEW_EVENT = {
        'client-normal-spin-request': 'ng',
        'client-free-spin-request': 'fg',
        'client-respin-request': 'rg',
        'client-mini-game-request': 'mg',
        'client-gamble-spin-request': 'gg',
        'client-join-game-request': 'jg',
        'client-join-game-request-ev': 'jge',
        'client-free-spin-option-request': 'fo',
        'client-normal-game-trial-request': 'ngt',
        'client-free-game-trial-request': 'fgt',
        'client-respin-trial-request': 'rgt',
        'client-bonus-game-trial-request': 'mgt',
        'client-gamble-game-trial-request': 'ggt',
        'client-free-game-option-trial-request': 'fot'
      };
      var GameStateManager = exports('GameStateManager', /*#__PURE__*/function () {
        function GameStateManager(data) {
          var _this = this;

          this._routingEventHandler = void 0;
          this.expectedEvent = '';
          this.expectedCommandId = '';
          this.socket = void 0;
          this.token = void 0;
          this._playerInfoStateManager = void 0;
          this._state = void 0;
          this.gameData = void 0;
          this.serviceId = void 0;
          this._eventManager = void 0;
          this._commandManager = void 0;
          this.lastSuccessCommandId = '';
          this.gameCommandId = '';
          this.waitForEventData = {};
          this._lastCommandIds = [];
          this.gltCounting = 0;
          this._spinTutorialData = void 0;
          this._trialMode = false;
          this._spinTrialDataIndex = 0;
          this._spinTutorialIndex = 0;
          this.requestingNewPS = void 0;
          this.trialPS = void 0;
          this.lastTrialPS = void 0;
          this.spinTimer = void 0;
          this._fireEventUserLogOutFunc = void 0;
          this.timeoutLastedState = void 0;
          this.channelSubscides = void 0;
          this._outGame = void 0;
          this.currentPSData = void 0;
          this.latestExecuteCommandResult = void 0;
          this.isForceGetLatestedState = false;
          this.serverVersion = '';
          this.timeoutKeepAlive = null;
          this.supportEvent = false;
          var gameData = data.gameData;
          var gameId = gameData.gameId,
              eventId = gameData.eventId,
              serverVersion = gameData.serverVersion;
          this._playerInfoStateManager = playerInfoStateManager;
          this.token = this._playerInfoStateManager.getToken();
          this._state = GameStateManager.STATE_NORMAL;
          this.gameData = gameData;
          this.serviceId = gameId;
          this.supportEvent = eventId !== '0';
          this._commandManager = new CommandManager(gameId, 3, NEW_EVENT ? 'cId' : 'commandId');
          this._eventManager = new EventManager(false, {
            'jgr': 'client-join-game-result',
            'sud': 'state-updated',
            'spu': 'state-pushed',
            'jud': 'jackpot-updated',
            'erp': 'error-pushed',
            'mep': 'message-pushed'
          });
          this.lastSuccessCommandId = '';
          this.gameCommandId = '';
          this.waitForEventData = {};
          this._lastCommandIds = [];
          this.channelSubscides = [];
          this.gltCounting = 0;
          this._onWalletUpdate = this._onWalletUpdate.bind(this);
          this.serverVersion = serverVersion;
          messageManager.registerGame(gameId, {
            onAck: this._commandManager.onAck.bind(this._commandManager),
            onCannotSendMessage: this._commandManager.onCannotSendMessage.bind(this._commandManager)
          }, {
            onCannotConnect: function onCannotConnect() {
              _this._updateNetworkState(NetworkEvent.FAIL_CONNECT_SERVER);
            },
            onCannotAuthen: function onCannotAuthen() {
              _this._cleanUp();

              logger.debug('AUTHEN FAILED');

              _this.gameData.joinGameFailed();
            },
            onNetworkWarning: function onNetworkWarning() {
              _this._updateNetworkState(NetworkEvent.SLOW_CONNECTION);
            },
            onShowPopupDisconnected: function onShowPopupDisconnected() {
              _this._updateNetworkState(NetworkEvent.SOCKET_LOST_CONNECTION);
            },
            onConnected: function onConnected() {
              _this._updateNetworkState(NetworkEvent.SOCKET_RESUME_CONNECTION);
            },
            onEvent: this._eventManager.onEvent.bind(this._eventManager)
          });

          this._setUpEventListener(eventId);

          this._handleNetworkStatusEvent();
        }

        var _proto = GameStateManager.prototype;

        _proto.bindTutorialData = function bindTutorialData(tutorialData) {
          this._spinTutorialData = tutorialData;
        };

        _proto.getWallets = function getWallets() {
          return this._playerInfoStateManager.getWallets();
        };

        _proto._onWalletUpdate = function _onWalletUpdate() {
          this.gameData.onWalletUpdate(this._playerInfoStateManager.getWallets());
        };

        _proto.switchToTrial = function switchToTrial() {
          this._trialMode = true;
          this._spinTutorialIndex = 0;
          return this._trialMode;
        };

        _proto.skipTutorial = function skipTutorial() {
          this._spinTutorialIndex = 999;
        };

        _proto.switchToReal = function switchToReal() {
          this._trialMode = false;
        };

        _proto.triggerJoinTrial = function triggerJoinTrial() {
          this._clientSendRequest({
            event: 'client-join-game-trial-request'
          });
        };

        _proto.triggerSpinRequest = function triggerSpinRequest(betId, betLines, spinType) {
          if (spinType === void 0) {
            spinType = WalletType.NORMAL;
          }

          var sendData = {
            betId: betId
          };

          if (betLines) {
            sendData.betLines = betLines;
          }

          var eventName = 'client-normal-spin-request';

          switch (spinType) {
            case WalletType.NORMAL:
              this.requestingNewPS = true;
              eventName = 'client-normal-spin-request';
              break;

            case WalletType.TRIAL:
              eventName = 'client-normal-game-trial-request';
              break;

            case WalletType.PROMOTE:
              this.requestingNewPS = true;
              eventName = 'client-normal-spin-request';
              sendData.wo = 1;
              break;

            default:
              eventName = 'client-normal-spin-request';
              break;
          }

          if (this._trialMode && this._getNewTrialPS()) {
            this._returnTrialPS();
          } else {
            this._clientSendRequest({
              event: eventName,
              data: sendData
            });
          }
        };

        _proto.getLastedQuest = function getLastedQuest() {
          this._clientSendRequest({
            event: 'glte',
            data: {
              userId: this._playerInfoStateManager.getUserId(),
              serviceId: this.serviceId,
              token: this.token
            }
          });
        };

        _proto._getNewTrialPS = function _getNewTrialPS() {
          if (this._spinTutorialData && this._spinTutorialIndex < this._spinTutorialData.length) {
            this.trialPS = lodash.cloneDeep(this._spinTutorialData[this._spinTutorialIndex]);
            this._spinTutorialIndex++;
          } else {
            this.trialPS = null;
          }

          this._spinTrialDataIndex = 0;
          return this.trialPS != null;
        };

        _proto._returnTrialPS = function _returnTrialPS() {
          var _this2 = this;

          this.lastTrialPS = this.trialPS.shift();
          if (!this.lastTrialPS) return;
          var response = {};
          response.data = this.lastTrialPS;
          logger.debug("___TRIAL: response", response);
          this.gameCommandId = uuid();
          response.data[this.serviceId].data.cId = this.gameCommandId;
          clearTimeout(this.spinTimer);
          this.spinTimer = setTimeout(function () {
            _this2._fireEventStateUpdated(response.data[_this2.serviceId]);

            _this2._spinTrialDataIndex++;
          }, 300);
        };

        _proto.triggerFreeSpinRequest = function triggerFreeSpinRequest() {
          if (this._trialMode) {
            if (this.trialPS) this._returnTrialPS();else {
              this._clientSendRequest({
                event: 'client-free-game-trial-request',
                data: {}
              });
            }
          } else {
            this._clientSendRequest({
              event: 'client-free-spin-request',
              data: {}
            });
          }
        };

        _proto.triggerFreeSpinOption = function triggerFreeSpinOption(option) {
          if (this._trialMode) {
            if (this.trialPS) this._returnTrialPS();else {
              this._clientSendRequest({
                event: 'client-free-game-option-trial-request',
                data: {
                  option: option
                }
              });
            }
          } else {
            this._clientSendRequest({
              event: 'client-free-spin-option-request',
              data: {
                option: option
              }
            });
          }
        };

        _proto.triggerMiniGame = function triggerMiniGame(openCell) {
          if (this._trialMode) {
            if (this.trialPS) this._returnTrialPS();else {
              this._clientSendRequest({
                event: 'client-bonus-game-trial-request',
                data: {
                  openCell: openCell
                }
              });
            }
          } else {
            this._clientSendRequest({
              event: 'client-mini-game-request',
              data: {
                openCell: openCell
              }
            });
          }
        };

        _proto.triggerLightningSpinRequest = function triggerLightningSpinRequest() {
          if (this._trialMode) {
            if (this.trialPS) this._returnTrialPS();else {
              this._clientSendRequest({
                event: 'client-lightning-game-trial-request',
                data: {}
              });
            }
          } else {
            this._clientSendRequest({
              event: 'client-lightning-spin-request',
              data: {}
            });
          }
        };

        _proto.triggerPowerUpSpinRequest = function triggerPowerUpSpinRequest(openCell) {
          if (this._trialMode) {
            if (this.trialPS) this._returnTrialPS();else {
              this._clientSendRequest({
                event: 'client-powerup-game-trial-request',
                data: {
                  openCell: openCell
                }
              });
            }
          } else {
            this._clientSendRequest({
              event: 'client-powerup-spin-request',
              data: {
                openCell: openCell
              }
            });
          }
        };

        _proto.triggerGambleSpinRequest = function triggerGambleSpinRequest(openCell, totalBet) {
          if (this._trialMode) {
            if (this.trialPS) {
              if (totalBet > 0) this.trialPS.shift();

              this._returnTrialPS();
            } else {
              this._clientSendRequest({
                event: 'client-gamble-game-trial-request',
                data: {
                  openCell: openCell,
                  totalBet: totalBet
                }
              });
            }
          } else {
            this._clientSendRequest({
              event: 'client-gamble-spin-request',
              data: {
                openCell: openCell,
                totalBet: totalBet
              }
            });
          }
        };

        _proto._triggerGetLatestStatePrivate = function _triggerGetLatestStatePrivate(metaData) {
          var stateType = metaData.stateType,
              serviceId = metaData.serviceId,
              objectId = metaData.objectId; //Ensure do not repeat call latest state the same type

          var data = {
            serviceId: serviceId,
            objectId: objectId,
            stateType: stateType
          };

          this._clientSendRequest({
            event: 'glt',
            data: data
          });
        };

        _proto.cleanUpForGame = function cleanUpForGame() {
          this._commandManager.cleanUp();

          this._eventManager.cleanUp();

          this._playerInfoStateManager.removeEvent('wallet-updated', this._onWalletUpdate);

          this._playerInfoStateManager.removeEvent('user-logged-out', this._fireEventUserLogOutFunc);

          if (this.timeoutLastedState) {
            clearTimeout(this.timeoutLastedState);
          }

          if (this.timeoutKeepAlive) {
            clearTimeout(this.timeoutKeepAlive);
          }
        };

        _proto.outGame = function outGame() {
          var _this3 = this;

          if (this._outGame) return;
          this.cleanUpForGame();
          this.channelSubscides.forEach(function (it) {
            _this3._commandManager.unSubscribe(it);
          });
          this.channelSubscides = [];
          messageManager.unregisterGame(this.serviceId);
          this._outGame = true;
        };

        _proto.networkCallbackJP = function networkCallbackJP(callbackJP) {
          this._eventManager.registerEvent('jackpot-updated', function (result) {
            var data = result.data;
            callbackJP(data);
          });
        };

        _proto.gameOnPause = function gameOnPause() {
          logger.debug('gameOnPause');
        };

        _proto.gameOnResume = function gameOnResume() {
          logger.debug('gameOnResume');

          if (this.gameCommandId) {
            logger.debug('_resumeApp has this.gameCommandId: %s', this.gameCommandId);
          }
        };

        _proto._subscribeJPChannel = function _subscribeJPChannel(groupChannelName) {
          if (groupChannelName) {
            this.channelSubscides.push(groupChannelName);

            this._commandManager.subscribe(groupChannelName);
          }
        };

        _proto._verifyExpectedEvent = function _verifyExpectedEvent(eventData) {
          var result = false;
          var convertEvent = ['f', 'n', 'nor', 'fre', 'frO', 'bon', 'b', 'gam', 'lig', 'pow', 'adv', 'o', 'g', 'r'];
          var index = convertEvent.indexOf(eventData.event);
          if (index >= 0) eventData.event = 'state-updated';
          eventData = mapObjectKey(eventData, MsgReceiveMapping);

          if (eventData.event === 'client-join-game-result') {
            var data = eventData.data;
            result = data.commandId === this.latestExecuteCommandResult && this.gameCommandId === data.commandId;
          } else if (eventData.event === 'client-join-trial-game-result') {
            var _data = eventData.data;
            result = _data.commandId === this.latestExecuteCommandResult && this.gameCommandId === _data.commandId;
          } else if (eventData.event === 'state-updated' && this._state === GameStateManager.STATE_NORMAL && !this.isForceGetLatestedState) {
            var _data2 = eventData.data;
            result = _data2.commandId === this.latestExecuteCommandResult && this.gameCommandId === _data2.commandId;
          } else if (eventData.event === 'state-pushed' && this._state === GameStateManager.STATE_PANIC) {
            var _data3 = eventData.data;
            result = _data3.gameCommandId === this.gameCommandId;
          } else if (eventData.event === 'error-pushed' && this._state === GameStateManager.STATE_NORMAL && eventData.data && eventData.data[0]) {
            var _data4 = eventData.data;
            result = _data4[0].commandId === this.latestExecuteCommandResult;

            if (this.isForceGetLatestedState) {
              return false;
            }
          }

          if (result == true && typeof this.gameData.networkUpdate === 'function') {
            this.gameData.networkUpdate(NetworkEvent.SOCKET_RESUME_CONNECTION);
          }

          return result;
        };

        _proto._checkMismatchData = function _checkMismatchData(eventData) {
          var isMismatch = false; //if (eventData.event === 'state-updated')

          {
            if (!this.currentPSData) //resume case
              {
                this.currentPSData = {};
                this.currentPSData.id = eventData.id;
                this.currentPSData.version = eventData.version;
                this.requestingNewPS = false;
                return;
              }

            if (this.requestingNewPS) {
              if (eventData.version > 1) {
                logger.debug("Mismatch data new PS, event version is " + eventData.version);
                isMismatch = true;
              } else {
                this.currentPSData = {
                  id: eventData.id,
                  version: eventData.version
                };
                logger.debug('Pass new PS request');
                this.requestingNewPS = false;
              }
            } else {
              if (eventData.id == this.currentPSData.id) {
                if (eventData.version == this.currentPSData.version + 1) this.currentPSData.version = eventData.version;else {
                  logger.debug("Mismatch data, event version is " + eventData.version);
                  isMismatch = true;
                }
              }
            }
          }

          if (isMismatch) {
            log('Mismatch');

            this._updateNetworkState(NetworkEvent.MISMATCH_DATA);
          }
        };

        _proto._gotoNormalMode = function _gotoNormalMode() {
          if (this._outGame) return;
          logger.debug('NORMAL MODE');

          this._eventManager.removeWaitingQueue();

          this._commandManager.clearRemainingCommand();

          if (typeof this.gameData.networkUpdate === 'function') this.gameData.networkUpdate(NetworkEvent.SOCKET_RESUME_CONNECTION);
        };

        _proto._gotoPanicMode = function _gotoPanicMode() {
          if (this._outGame) return;
          logger.debug('PANIC MODE');

          this._eventManager.removeWaitingQueue();

          this._commandManager.clearRemainingCommand();

          var playerUserId = this._playerInfoStateManager.getUserId();

          this._triggerGetLatestStatePrivate({
            stateType: this.serviceId,
            serviceId: this.serviceId,
            objectId: playerUserId
          });
        };

        _proto._updateNetworkState = function _updateNetworkState(state, forceDie, code, errorData) {
          if (forceDie === void 0) {
            forceDie = false;
          }

          if (code === void 0) {
            code = '0000';
          }

          if (errorData === void 0) {
            errorData = null;
          }

          if (forceDie) {
            this._gotoDieMode();
          }

          this.gameData.networkUpdate(state, code, errorData);
        };

        _proto._gotoDieMode = function _gotoDieMode() {
          if (this._outGame) return;

          this._cleanUp();
        };

        _proto._cleanUp = function _cleanUp() {
          if (this._outGame) return;
          this._outGame = true;
          this.cleanUpForGame();
          messageManager.unregisterGame(this.serviceId);
        };

        _proto._timeoutExpectedEventHandler = function _timeoutExpectedEventHandler(event) {
          var eventRecover = SLOT_STRATEGY[event].recoverEvent;
          this._state = eventRecover;

          if (eventRecover === GameStateManager.STATE_PANIC) {
            this._gotoPanicMode();
          } else if (eventRecover === GameStateManager.STATE_DIE) {
            log("_timeoutExpectedEventHandler " + event + " no recover");

            this._updateNetworkState(NetworkEvent.TIMEOUT_REQUEST_DIE, true);
          }
        };

        _proto._clientSendRequest = function _clientSendRequest(_ref) {
          var _this4 = this;

          var _ref$event = _ref.event,
              event = _ref$event === void 0 ? '' : _ref$event,
              _ref$data = _ref.data,
              data = _ref$data === void 0 ? {} : _ref$data;

          if (this.timeoutKeepAlive) {
            clearTimeout(this.timeoutKeepAlive);
          }

          if (this.supportEvent) {
            this.timeoutKeepAlive = setTimeout(function () {
              _this4._sendPingMessage();
            }, 30000);
          }

          var version = this.serverVersion;
          var strategy = lodash.pick(SLOT_STRATEGY[event], ['resendCount', 'shouldWaitForACK', 'canBeDuplicated']);
          data = Object.assign(data, {
            token: this.token,
            serviceId: this.serviceId
          });
          data = mapObjectKey(data, MsgSendMapping);
          event = NEW_EVENT && NEW_EVENT[event] ? NEW_EVENT[event] : event;

          var commandId = this._commandManager.executeCommand({
            event: event,
            data: data,
            version: version
          }, strategy);

          if (commandId === CommandManager.COMMAND_FAILED_CONC_OVER_LIMIT) {
            logger.error('onEnterInit -> CommandManager.COMMAND_FAILED_CONC_OVER_LIMIT');
          } else if (commandId === CommandManager.COMMAND_FAILED_DUPLICATE) {
            logger.error('onEnterInit -> CommandManager.COMMAND_FAILED_DUPLICATE');
          } else if (strategy.resendCount > 0) {
            this.latestExecuteCommandResult = commandId;

            this._waitForNetwork(event);
          }

          log(commandId);
        };

        _proto._waitForEvent = function _waitForEvent(event) {
          var waitForEventId = this._eventManager.waitForEvent(SLOT_STRATEGY[event].timeWaitForEvent, this._verifyExpectedEvent.bind(this), this._timeoutExpectedEventHandler.bind(this, event));

          if (this.gameCommandId) {
            this.waitForEventData = {
              waitForEventId: waitForEventId,
              event: event
            };
          }
        };

        _proto._waitForNetwork = function _waitForNetwork(event) {
          var _this5 = this;

          this._eventManager.waitForEvent(SLOT_STRATEGY[event].timeWaitForEvent, this._verifyExpectedEvent.bind(this), function () {
            _this5._updateNetworkState(NetworkEvent.TIMEOUT_REQUEST_WAIT);
          });
        };

        _proto._setUpEventListener = function _setUpEventListener(launchFrom) {
          if (launchFrom === void 0) {
            launchFrom = null;
          }

          var code = '';
          var eId = '';

          var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
              LOGIN_IFRAME = _loadConfigAsync$getC.LOGIN_IFRAME,
              URL_CODE = _loadConfigAsync$getC.URL_CODE;

          var env = 3;

          if (LOGIN_IFRAME) {
            code = gameCommonUtils.getUrlParam(URL_CODE);
            env = parseInt(gameCommonUtils.getUrlParam('env')) || 2;
          } else {
            if (sys.isBrowser) {
              env = 1;
            } else {
              env = 3;
            }
          }

          if (launchFrom) {
            eId = launchFrom;
          }

          var event = eId === '0' ? 'client-join-game-request' : 'client-join-game-request-ev';

          this._clientSendRequest({
            event: event,
            data: {
              code: code,
              env: env,
              eId: eId
            }
          });

          this._bindingEvents();
        };

        _proto._bindingEvents = function _bindingEvents() {
          var self = this;

          this._fireEventUserLogOutFunc = function () {
            self.isLogOut = true;

            if (typeof self.gameData.userLogout === 'function') {
              self.gameData.userLogout();
            }

            self._cleanUp();
          };

          this._playerInfoStateManager.registerEvent('user-logged-out', this._fireEventUserLogOutFunc);

          this._eventManager.registerEvent('client-join-game-result', this._fireEventJoinGameResult.bind(this));

          this._eventManager.registerEvent('join-game-denied', this._fireEventJoinGameDenied.bind(this));

          this._eventManager.registerEvent('state-updated', this._fireEventStateUpdated.bind(this));

          this._eventManager.registerEvent('state-pushed', this._fireEventStatePushed.bind(this));

          this._eventManager.registerEvent('error-pushed', this._fireEventErrorPushed.bind(this));

          this._eventManager.registerEvent('jackpot-win', this._fireEventJackpotWin.bind(this));

          this._eventManager.registerEvent('JPA', this._fireEventJackpotWinAnnounce.bind(this));

          this._eventManager.registerEvent('nor', this._fireEventStateUpdated.bind(this));

          this._eventManager.registerEvent('fre', this._fireEventStateUpdated.bind(this));

          this._eventManager.registerEvent('n', this._fireEventStateUpdated.bind(this));

          this._eventManager.registerEvent('f', this._fireEventStateUpdated.bind(this));

          this._eventManager.registerEvent('r', this._fireEventStateUpdated.bind(this));

          this._eventManager.registerEvent('frO', this._fireEventStateUpdated.bind(this));

          this._eventManager.registerEvent('bon', this._fireEventStateUpdated.bind(this));

          this._eventManager.registerEvent('b', this._fireEventStateUpdated.bind(this));

          this._eventManager.registerEvent('gam', this._fireEventStateUpdated.bind(this));

          this._eventManager.registerEvent('lig', this._fireEventStateUpdated.bind(this));

          this._eventManager.registerEvent('pow', this._fireEventStateUpdated.bind(this));

          this._eventManager.registerEvent('adv', this._fireEventStateUpdated.bind(this));

          this._eventManager.registerEvent('o', this._fireEventStateUpdated.bind(this));

          this._eventManager.registerEvent('g', this._fireEventStateUpdated.bind(this));

          this._eventManager.registerEvent('ev', this._fireEventQuestUpdate.bind(this));

          this._eventManager.registerEvent('topuser', this._fireEventTopUser.bind(this));

          this._commandManager.registerEvent(CommandManager.COMMAND_SEND_SUCCESSFULLY, this._handleCommandSendSuccessfully.bind(this));
        };

        _proto._handleCommandSendSuccessfully = function _handleCommandSendSuccessfully(commandPayload) {
          var commandId = commandPayload.data.commandId || commandPayload.data.cId;
          var event = commandPayload.event;

          if (event !== 'glt') {
            this.gameCommandId = commandId;
          }

          if (commandId === this.latestExecuteCommandResult) {
            this._saveNewCommandId(commandId);

            this._waitForEvent(event);
          } //

        };

        _proto._saveNewCommandId = function _saveNewCommandId(commandId) {
          if (this._lastCommandIds.length >= 10) {
            this._lastCommandIds.shift();
          }

          this._lastCommandIds.push(commandId);
        };

        _proto._handleNetworkStatusEvent = function _handleNetworkStatusEvent() {
          var _this6 = this;

          this._eventManager.registerEvent(EventManager.CAN_NOT_CONNECT, function () {
            _this6._state = GameStateManager.STATE_DIE;

            _this6._updateNetworkState(NetworkEvent.FAIL_CONNECT_SERVER);
          });

          this._eventManager.registerEvent(EventManager.CONNECTED, function () {});
        };

        _proto._fireEventErrorPushed = function _fireEventErrorPushed(result) {
          if (this.isForceGetLatestedState) return;
          var data = result.data;
          data = mapObjectKey(data, MsgReceiveMapping);

          if (lodash.isArray(data) && data[0]) {
            var errorCode = data[0].code; //wallet error

            if (errorCode[0] == 'W' || errorCode == '0000' || errorCode == '0001') {
              this._updateNetworkState(NetworkEvent.WALLET_ERROR_CODE, false, errorCode);

              this._state = GameStateManager.STATE_NORMAL;

              if (this.timeoutLastedState) {
                clearTimeout(this.timeoutLastedState);
              }

              this._gotoNormalMode();
            } else if (errorCode == '0030' && this._state == GameStateManager.STATE_PANIC) {
              //server is inprogress
              this.gltCounting = 0;
            } else if (errorCode == '0031') ;else if (errorCode == PROMOTION_ERROR.EXPIRED || errorCode === PROMOTION_ERROR.NEW || errorCode == PROMOTION_ERROR.RESET || errorCode == PROMOTION_ERROR.WRONG_BET) {
              this._state = GameStateManager.STATE_NORMAL;
              this.gameCommandId = '';
              this.waitForEventData = {};

              this._updateNetworkState(NetworkEvent.PROMOTION_ERROR, false, errorCode, data);

              if (this.timeoutLastedState) {
                clearTimeout(this.timeoutLastedState);
              }

              this._gotoNormalMode();
            } else {
              this._state = GameStateManager.STATE_NORMAL;
              this.gameCommandId = '';
              this.waitForEventData = {};
              var forceDie = errorCode !== '0031';

              this._updateNetworkState(NetworkEvent.BACKEND_ERROR_CODE, forceDie, errorCode);

              if (this.timeoutLastedState) {
                clearTimeout(this.timeoutLastedState);
              }
            }
          }
        };

        _proto._fireEventJoinGameResult = function _fireEventJoinGameResult(result) {
          var data = result.data;
          data = mapObjectKey(data, MsgReceiveMapping);
          this._state = GameStateManager.STATE_NORMAL;

          if (typeof this.gameData.joinGameSuccess === 'function' && data.commandId === this.gameCommandId) {
            var playerUserId = this._playerInfoStateManager.getUserId();

            var _data5 = data,
                extendData = _data5.extendData;

            this._subscribeJPChannel(data.groupChannelName);

            this._subscribeJPChannel("presence-" + this.serviceId + "-notify");

            this._onWalletUpdate();

            this._playerInfoStateManager.registerEvent('wallet-updated', this._onWalletUpdate);

            var dataJoinGame = lodash.cloneDeep(data);

            if (dataJoinGame[playerUserId] && dataJoinGame[playerUserId].isFinished === false) {
              dataJoinGame.dataResume = dataJoinGame[playerUserId];
              this.currentPSData = {};
              this.currentPSData.id = dataJoinGame.dataResume.id;
              this.currentPSData.version = dataJoinGame.dataResume.version;
              this.requestingNewPS = false; // this._checkUserIdAndThrowError(dataJoinGame.dataResume, 'join-game-result for resume');
            } else if (dataJoinGame[playerUserId] && dataJoinGame[playerUserId].gambleRemain > 0) {
              dataJoinGame.dataGamble = dataJoinGame[playerUserId];
              this.currentPSData = {};
              this.currentPSData.id = dataJoinGame.dataGamble.id;
              this.currentPSData.version = dataJoinGame.dataGamble.version;
              this.requestingNewPS = false;
            }

            if (!lodash.isEmpty(extendData.metaDataPromotion) && extendData.metaDataPromotion.status === 0) {
              dataJoinGame.metaDataPromotion = extendData.metaDataPromotion;
            }

            if (lodash.isEmpty(extendData.metaDataUser) || !extendData.metaDataUser) {
              dataJoinGame.extendData.metaDataUser = {};
              dataJoinGame.extendData.metaDataUser.currentWallets = this._playerInfoStateManager.getWallets();
            } // if (CC_DEV) {
            //     dataJoinGame.metaDataPromotion = {
            //         betId: '43',
            //         serviceId: '9990',
            //         promotionRemain: 3,
            //         promotionTotal: 3,
            //         promotionCode: '1234'
            //     };
            // };


            delete dataJoinGame[playerUserId];
            this.gameCommandId = '';
            this.waitForEventData = {};
            logger.debug('event join-game-result', JSON.stringify(data));
            dataJoinGame['wallet-types'] = this._playerInfoStateManager.getWalletTypes();
            this.gameData.joinGameSuccess(dataJoinGame);
          }
        };

        _proto._fireEventJoinGameDenied = function _fireEventJoinGameDenied() {
          this.outGame();
          this.gameData.onJoinGameDenied();
        };

        _proto._fireEventStateUpdated = function _fireEventStateUpdated(result) {
          var data = result.data;
          data = mapObjectKey(data, MsgReceiveMapping);

          if (this._state === GameStateManager.STATE_NORMAL && typeof this.gameData.stateUpdate === 'function' && this.gameCommandId === data.commandId && !this.isForceGetLatestedState) {
            this.lastSuccessCommandId = this.gameCommandId;
            this.gameCommandId = '';
            this.waitForEventData = {};
            this.latestExecuteCommandResult = '';
            var dataRes = data;
            logger.debug('event state-updated', JSON.stringify(dataRes));
            this.gameData.stateUpdate(dataRes);
            if (!this._trialMode) this._checkMismatchData(dataRes); //if trialmode, dont need to check userid
            // !this._trialMode && this._checkUserIdAndThrowError(dataRes, 'state-updated');
          }
        };

        _proto._fireEventJackpotWin = function _fireEventJackpotWin(result) {
          var data = result.data;

          if (this._state === GameStateManager.STATE_NORMAL && typeof this.gameData.onJackpotWin === 'function') {
            var commandId = data.jpInfo[0].cmdId;

            if (this._lastCommandIds.indexOf(commandId) > -1) {
              logger.debug('event jackpot-win: It is me', JSON.stringify(data));
            } else {
              this.gameData.onJackpotWin(data);
              logger.debug('event jackpot-win: other user', JSON.stringify(data));
            }
          }
        };

        _proto._fireEventJackpotWinAnnounce = function _fireEventJackpotWinAnnounce(result) {
          var data = result.data;

          if (this._state === GameStateManager.STATE_NORMAL && typeof this.gameData.onJackpotWinAnnounce === 'function') {
            var commandId = data.jpInfo[0].cId;

            var isMe = this._lastCommandIds.includes(commandId);

            this.gameData.onJackpotWinAnnounce(data, isMe);
          }
        };

        _proto._checkUserIdAndThrowError = function _checkUserIdAndThrowError(dataRes, eventName) {
          var playerUserId = this._playerInfoStateManager.getUserId();

          if (dataRes.userId !== playerUserId) {
            throw Error("Event " + eventName + ", current user id: " + playerUserId + ", User id wrong: " + dataRes.userId + ", PS id: " + dataRes.id + ", commandId: " + dataRes.commandId);
          }
        };

        _proto._fireEventStatePushed = function _fireEventStatePushed(result) {
          var _this7 = this;

          var data = result.data;
          data = mapObjectKey(data, MsgReceiveMapping);
          var gameCommandId = data.gameCommandId;

          if (this._state === GameStateManager.STATE_PANIC && typeof this.gameData.stateUpdate === 'function' && gameCommandId) {
            if (gameCommandId === this.gameCommandId) {
              this.gltCounting = 0;
              this.lastSuccessCommandId = this.gameCommandId;
              this._state = GameStateManager.STATE_NORMAL;
              this.gameCommandId = '';
              this.waitForEventData = {};
              logger.debug('event state-pushed', JSON.stringify(data));

              this._gotoNormalMode();

              var _data6 = data,
                  error = _data6.error;

              if (lodash.isArray(error) && error[0]) {
                var errorCode = error[0].code;

                this._updateNetworkState(NetworkEvent.PROMOTION_ERROR, false, errorCode, data);
              } else {
                this.gameData.stateUpdate(data);
                this.currentPSData = {};
                this.currentPSData.id = data.id;
                this.currentPSData.version = data.version;
              }

              this.requestingNewPS = false;

              if (this.timeoutLastedState) {
                clearTimeout(this.timeoutLastedState);
              }
            } else if (this.gltCounting < 10) {
              this.gltCounting += 1;
              this.timeoutLastedState = setTimeout(function () {
                _this7._gotoPanicMode();
              }, 2000);
            } else {
              var commandId = data.commandId;
              log("Mismatch command " + " lasted " + this.lastSuccessCommandId + " current " + commandId);

              this._updateNetworkState(NetworkEvent.MISMATCH_DATA, true);
            }
          }
        };

        _proto._sendPingMessage = function _sendPingMessage() {
          var command = {
            event: "p",
            data: {
              userId: this._playerInfoStateManager.getUserId(),
              serviceId: this.serviceId,
              token: this.token
            }
          };

          this._clientSendRequest(command);
        };

        _proto._fireEventQuestUpdate = function _fireEventQuestUpdate(result) {
          var data = result.data;
          var eventData = mapObjectKey(data, MsgReceiveMapping);
          this.gameData.eventUpdate(eventData);
        };

        _proto._fireEventTopUser = function _fireEventTopUser(result) {
          var data = result.data;
          var eventData = mapObjectKey(data, MsgTopUserMapping);
          this.gameData.updateTopUser(eventData);
        };

        _proto.onForceGetLatestedState = function onForceGetLatestedState(isOn) {
          if (isOn === void 0) {
            isOn = false;
          }

          this.isForceGetLatestedState = isOn;
          log('To click force get latested state: ', isOn);
        };

        _proto.triggerRespinRequest = function triggerRespinRequest() {
          if (this._trialMode) {
            if (this.trialPS) this._returnTrialPS();else {
              this._clientSendRequest({
                event: 'client-respin-trial-request',
                data: {}
              });
            }
          } else {
            this._clientSendRequest({
              event: 'client-respin-request',
              data: {}
            });
          }
        };

        return GameStateManager;
      }());
      GameStateManager.STATE_NORMAL = 'NORMAL';
      GameStateManager.STATE_PANIC = 'PANIC';
      GameStateManager.STATE_DIE = 'DIE';

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, NodePool, instantiate, v3, Mask, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      NodePool = module.NodePool;
      instantiate = module.instantiate;
      v3 = module.v3;
      Mask = module.Mask;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "b6a57YhRL5N3J0pAReJY2U+", "GameView", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GameView = exports('GameView', (_dec = ccclass('GameView'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Number), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GameView, _Component);

        function GameView() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "eventManager", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "fishNode", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "fishHolder", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "gunHolder", _descriptor4, _assertThisInitialized(_this));

          _this.fishes = [];
          _this._map = null;
          _this._fishInfo = null;

          _initializerDefineProperty(_this, "totalInitPool", _descriptor5, _assertThisInitialized(_this));

          _this.fishPool = null;
          _this.selectedFish = null;
          return _this;
        }

        var _proto = GameView.prototype;

        _proto.onLoad = function onLoad() {
          this.eventManager.on('SET_MAP', this.setMap, this);
          this.eventManager.on('NEW_FISH', this.getNewFish, this);
          this.eventManager.on('CLEAR_FISHES', this.clearFishes, this);
          this.eventManager.on('SHOW_MASK', this.showMask, this);
          this.eventManager.on('SHOW_GUN', this.showGun, this);
          this.node.on("REMOVE_FISH", this.onRemoveFish, this);
          this.initPool();
        };

        _proto.initPool = function initPool() {
          this.fishPool = new NodePool();

          for (var i = 0; i < this.totalInitPool; i++) {
            var fish = instantiate(this.fishNode);
            this.fishPool.put(fish);
          }
        };

        _proto.setMap = function setMap(map) {
          this._map = map;
          this._fishInfo = this._map.fishInfo;
        };

        _proto.getNewFish = function getNewFish(fishData) {
          var fish = this.getFishFromPool();
          this.fishes.push(fish);
          fish.active = true;
          this.fishHolder.addChild(fish);
          fish._uiProps.colorDirty = true;
          fishData = this._formatData(fishData);
          fish.emit("INIT", fishData, this._map);
          fish.on(Node.EventType.MOUSE_DOWN, this.onSelectFish, this);
        };

        _proto.getFishFromPool = function getFishFromPool() {
          return this.fishPool.get() || instantiate(this.fishNode);
        };

        _proto.onRemoveFish = function onRemoveFish(event) {
          event.propagationStopped = true;
          var fish = event.userData.fish;
          fish.off(Node.EventType.MOUSE_DOWN, this.onSelectFish, this);
          this.fishPool.put(fish);
        };

        _proto.onSelectFish = function onSelectFish(evt) {
          var _this2 = this;

          this.selectedFish = evt.target;
          this.fishes.forEach(function (fish) {
            return fish.emit("ON_SELECTED", fish === _this2.selectedFish);
          });
        };

        _proto._formatData = function _formatData(fishData) {
          var _this3 = this;

          var FishKind = fishData.FishKind,
              Position = fishData.Position;
          var formatData = Object.assign({}, this._fishInfo[FishKind]);
          Object.assign(formatData, fishData);
          formatData.path = Position.map(function (id) {
            return _this3._map.idToGrid(id);
          });
          formatData.keyFrames = this._getKeyFrames(formatData);
          return formatData;
        };

        _proto._getKeyFrames = function _getKeyFrames(fishData) {
          var path = fishData.path,
              timeStep = fishData.timeStep,
              dx = fishData.dx,
              dy = fishData.dy;
          dx = 0;
          dy = 0; // *test

          var frames = [];
          var startFrame = {};

          var startPos = this._map.gridCenterToPosition(path[0]);

          startFrame.position = v3(startPos.x + dx, startPos.y + dy);
          startFrame.dur = 0;
          startFrame.skin = this._getSkin(path[0], path[1]);
          startFrame.scaleX = this._getScaleX(path[0], path[1]);
          frames.push(startFrame);

          for (var index = 1; index < path.length; index++) {
            var frame = {};
            var p1 = path[index - 1];
            var p2 = path[index];

            if (p1.X === p2.X && p1.Y === p2.Y) {
              continue;
            }

            if (p1.X !== p2.X && p1.Y !== p2.Y) {
              console.error("invalid line", p1, p2);
            }

            var endPoint = this._map.gridCenterToPosition(p2);

            var distance = Math.abs(p2.X - p1.X + p2.Y - p1.Y);
            frame.dur = distance * timeStep;
            frame.position = v3(endPoint.x + dx, endPoint.y + dy);
            frame.skin = this._getSkin(p1, p2);
            frame.scaleX = this._getScaleX(p1, p2);
            frames.push(frame);
          } // console.error(frames);


          return frames;
        };

        _proto._getSkin = function _getSkin(p1, p2) {
          if (p1.Y > p2.Y || p1.X > p2.X) return "Back"; // down 

          if (p1.Y < p2.Y || p1.X < p2.X) return "Front";
          debugger;
        };

        _proto._getScaleX = function _getScaleX(p1, p2) {
          return p1.X === p2.X ? 1 : -1;
        };

        _proto.clearFishes = function clearFishes() {
          var _this4 = this;

          this.fishes.forEach(function (fish) {
            fish.off(Node.EventType.MOUSE_DOWN, _this4.onSelectFish, _this4);

            _this4.fishPool.put(fish);
          });
          this.fishes.length = 0;
          this.selectedFish = null;
        };

        _proto.showMask = function showMask(isShow) {
          var mask = this.node.getComponent(Mask);
          if (mask.enabled === isShow) return;
          mask.enabled = isShow;
        };

        _proto.showGun = function showGun(isShow) {
          this.gunHolder.active = isShow;
          this.gunHolder._uiProps.colorDirty = true;
        };

        return GameView;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "eventManager", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "fishNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "fishHolder", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "gunHolder", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "totalInitPool", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 15;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GeneralInitialization1989.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfEventEmitter.ts', './gfNetworkParser.ts', './Config1989.ts', './DataStore1989.ts', './gfMainFSM.ts', './MainController1989.ts', './ReferenceManager1989.ts', './gfLocalize.ts', './FishManager1989.ts', './PoolManager1989.ts', './NodePoolConfig1989.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, JsonAsset, Prefab, Component, gfEventEmitter, gfNetworkParser, Config1989, DataStore1989, gfMainFSM, MainController1989, ReferenceManager1989, gfLocalize, FishManager1989, PoolManager1989, NodePoolConfig1989;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      JsonAsset = module.JsonAsset;
      Prefab = module.Prefab;
      Component = module.Component;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfNetworkParser = module.default;
    }, function (module) {
      Config1989 = module.default;
    }, function (module) {
      DataStore1989 = module.default;
    }, function (module) {
      gfMainFSM = module.default;
    }, function (module) {
      MainController1989 = module.default;
    }, function (module) {
      ReferenceManager1989 = module.default;
    }, function (module) {
      gfLocalize = module.default;
    }, function (module) {
      FishManager1989 = module.default;
    }, function (module) {
      PoolManager1989 = module.default;
    }, function (module) {
      NodePoolConfig1989 = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "7482aKya1tDNpAge+C+zyMV", "GeneralInitialization1989", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GeneralInitialization1989 = exports('GeneralInitialization1989', (_dec = ccclass('GeneralInitialization1989'), _dec2 = property(JsonAsset), _dec3 = property(Prefab), _dec4 = property(Prefab), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GeneralInitialization1989, _Component);

        function GeneralInitialization1989() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "jsonLocalize", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "gameObjectPrefabs", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodePoolAssetPrefab", _descriptor3, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = GeneralInitialization1989.prototype;

        _proto.onLoad = function onLoad() {
          this.initInstances();
        };

        _proto.initInstances = function initInstances() {
          //Init Localize
          new gfLocalize();
          gfLocalize.instance.initLocalizeConfig(this.jsonLocalize.json); //Init Event Emitter

          new gfEventEmitter(); //Init NetworkParser

          new gfNetworkParser(); //Init GameConfig

          if (!Config1989.instance) {
            new Config1989();
          } //Init Datastore


          new DataStore1989(); //Init ReferenceManager

          new ReferenceManager1989(); //Init Main FSM

          new gfMainFSM(); //Init Main Controller

          new MainController1989();
          new FishManager1989();
          new PoolManager1989(this.gameObjectPrefabs);
          new NodePoolConfig1989(this.nodePoolAssetPrefab);
        };

        _proto.loginGame = function loginGame() {
          MainController1989.instance.initToken();
          DataStore1989.instance.setDataStore({
            "currentSceneName": Config1989.instance.SceneName.Lobby
          });
        };

        return GeneralInitialization1989;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "jsonLocalize", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "gameObjectPrefabs", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "nodePoolAssetPrefab", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GeneralInitialization1998.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfEventEmitter.ts', './gfNetworkParser.ts', './Config1998.ts', './DataStore1998.ts', './gfMainFSM.ts', './MainController1998.ts', './ReferenceManager1998.ts', './gfLocalize.ts', './FishManager1998.ts', './PoolManager1998.ts', './NodePoolConfig1998.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, JsonAsset, Prefab, Component, gfEventEmitter, gfNetworkParser, Config1998, DataStore1998, gfMainFSM, MainController1998, ReferenceManager1998, gfLocalize, FishManager1998, PoolManager1998, NodePoolConfig1998;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      JsonAsset = module.JsonAsset;
      Prefab = module.Prefab;
      Component = module.Component;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfNetworkParser = module.default;
    }, function (module) {
      Config1998 = module.default;
    }, function (module) {
      DataStore1998 = module.default;
    }, function (module) {
      gfMainFSM = module.default;
    }, function (module) {
      MainController1998 = module.default;
    }, function (module) {
      ReferenceManager1998 = module.default;
    }, function (module) {
      gfLocalize = module.default;
    }, function (module) {
      FishManager1998 = module.default;
    }, function (module) {
      PoolManager1998 = module.default;
    }, function (module) {
      NodePoolConfig1998 = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "ceef4iHQalD3pv2CeIYBIZY", "GeneralInitialization1998", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GeneralInitialization1998 = exports('GeneralInitialization1998', (_dec = ccclass('GeneralInitialization1998'), _dec2 = property(JsonAsset), _dec3 = property(Prefab), _dec4 = property(Prefab), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GeneralInitialization1998, _Component);

        function GeneralInitialization1998() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "jsonLocalize", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "gameObjectPrefabs", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodePoolAssetPrefab", _descriptor3, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = GeneralInitialization1998.prototype;

        _proto.onLoad = function onLoad() {
          this.initInstances();
        };

        _proto.initInstances = function initInstances() {
          //Init Localize
          new gfLocalize();
          gfLocalize.instance.initLocalizeConfig(this.jsonLocalize.json); //Init Event Emitter

          new gfEventEmitter(); //Init NetworkParser

          new gfNetworkParser(); //Init GameConfig

          if (!Config1998.instance) {
            new Config1998();
          } //Init Datastore


          new DataStore1998(); //Init ReferenceManager

          new ReferenceManager1998(); //Init Main FSM

          new gfMainFSM(); //Init Main Controller

          new MainController1998(); //Init Popup Controller
          //new PopupController();
          //Init Notify Controller
          //new NotifyController();

          new FishManager1998();
          new PoolManager1998(this.gameObjectPrefabs);
          new NodePoolConfig1998(this.nodePoolAssetPrefab);
        };

        _proto.loginGame = function loginGame() {
          MainController1998.instance.initToken();
          DataStore1998.instance.setDataStore({
            "currentSceneName": Config1998.instance.SceneName.Lobby
          });
        };

        return GeneralInitialization1998;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "jsonLocalize", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "gameObjectPrefabs", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "nodePoolAssetPrefab", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gf3DParticle.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseConfig.ts', './gfPoolManager.ts', './utils.ts', './gfActionHelper.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _inheritsLoose, _assertThisInitialized, cclegacy, _decorator, misc, v3, Component, gfBaseConfig, gfPoolManager, getRandomInt, v3f;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      misc = module.misc;
      v3 = module.v3;
      Component = module.Component;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfPoolManager = module.default;
    }, function (module) {
      getRandomInt = module.getRandomInt;
    }, function (module) {
      v3f = module.v3f;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _descriptor2, _dec2, _dec3, _dec4, _dec5, _class4, _class5, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12;

      cclegacy._RF.push({}, "ba957p7g4xH/6+/05dsHsb4", "gf3DParticle", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var configParticle = exports('configParticle', (_dec = ccclass('configParticle'), _dec(_class = (_class2 = function configParticle() {
        _initializerDefineProperty(this, "start", _descriptor, this);

        _initializerDefineProperty(this, "end", _descriptor2, this);
      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "start", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "end", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      })), _class2)) || _class));
      var gf3DParticle = exports('gf3DParticle', (_dec2 = ccclass('gf3DParticle'), _dec3 = property(configParticle), _dec4 = property(configParticle), _dec5 = property(configParticle), _dec2(_class4 = (_class5 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gf3DParticle, _Component);

        function gf3DParticle() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "particlePerSpawn", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "spawnInterval", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "gravity", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "speed", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "angle", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "size", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lifetime", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "radius", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "duration", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "coinAnimSpeed", _descriptor12, _assertThisInitialized(_this));

          _this._isMe = true;
          _this.isPlaying = false;
          _this.spawnTimer = void 0;
          _this.timer = void 0;
          return _this;
        }

        var _proto = gf3DParticle.prototype;

        _proto.onLoad = function onLoad() {
          // this.node.setSpawnRate = this.setSpawnRate.bind(this);
          // this.node.setGravity = this.setGravity.bind(this);
          // this.node.setItemSpeed = this.setItemSpeed.bind(this);
          // this.node.setSpawnInterval = this.setSpawnInterval.bind(this);
          // this.node.setLifetime = this.setLifetime.bind(this);
          // this.node.startAnimation = this.startAnimation.bind(this);
          // this.node.stopAnimation = this.stopAnimation.bind(this);
          // this.node.setDuration = this.setDuration.bind(this);
          // this.node.setIsMe = this.setIsMe.bind(this);
          this.isPlaying = false;
        };

        _proto.startAnimation = function startAnimation() {
          this.isPlaying = true;
          this.spawnTimer = this.spawnInterval;
          this.timer = 0;
        };

        _proto.setSpawnRate = function setSpawnRate(perSpawn) {
          this.particlePerSpawn = perSpawn;
        };

        _proto.setSpawnInterval = function setSpawnInterval(interval) {
          this.spawnInterval = interval;
          this.spawnTimer = this.spawnInterval;
        };

        _proto.setItemSpeed = function setItemSpeed(minSpeed, maxSpeed) {
          this.speed = {
            start: minSpeed,
            end: maxSpeed
          };
        };

        _proto.setGravity = function setGravity(gravity) {
          this.gravity = gravity;
        };

        _proto.setDuration = function setDuration(duration) {
          this.duration = duration;
        };

        _proto.setLifetime = function setLifetime(lifeTime) {
          this.lifetime = lifeTime;
        };

        _proto.setIsMe = function setIsMe(isMe) {
          this._isMe = isMe;
        };

        _proto.stopAnimation = function stopAnimation() {
          this.isPlaying = false;
          this.timer = 0;

          while (this.node.children.length > 0) {
            this.node.children[0].emit("STOP_ANIMATION");
          }
        };

        _proto.update = function update(dt) {
          if ((this.duration < 0 || this.timer <= this.duration) && this.isPlaying == true) {
            this.timer += dt;
            this.spawnTimer += dt;

            if (this.spawnTimer >= this.spawnInterval) {
              this.spawnTimer -= this.spawnInterval;

              for (var i = 0; i < this.particlePerSpawn; i++) {
                var coin = this._isMe ? gfPoolManager.instance.getCoin(gfBaseConfig.instance.COIN_TYPE.MY_COIN) : gfPoolManager.instance.getCoin(gfBaseConfig.instance.COIN_TYPE.OTHER_COIN);
                coin.node.parent = this.node;
                coin.node.angle = getRandomInt(0, 360);
                coin.setOpacity(255);
                coin.node.setScale(v3f(this.size.start + Math.random() * (this.size.end - this.size.start) * 2));
                var angle = misc.degreesToRadians(this.angle.start) + Math.random() * (misc.degreesToRadians(this.angle.end) - misc.degreesToRadians(this.angle.start));
                var pos = this.radius === 0 ? v3(0, 0, 0) : this.generatePoint(angle);
                coin.node.setPosition(pos.x, pos.y, coin.node.position.z);
                var speed = this.speed.start + Math.random() * (this.speed.end - this.speed.start);
                coin.startAnimation(1, this.coinAnimSpeed, Math.cos(angle) * speed, Math.sin(angle) * speed, 0, this.gravity, this.lifetime);
              }
            }
          }
        };

        _proto.generatePoint = function generatePoint(angle) {
          var x = Math.cos(angle) * this.radius;
          var y = Math.sin(angle) * this.radius;
          return v3(x, y, 0);
        };

        return gf3DParticle;
      }(Component), (_descriptor3 = _applyDecoratedDescriptor(_class5.prototype, "particlePerSpawn", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 80;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class5.prototype, "spawnInterval", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 2;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class5.prototype, "gravity", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return -250;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class5.prototype, "speed", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class5.prototype, "angle", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class5.prototype, "size", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class5.prototype, "lifetime", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class5.prototype, "radius", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class5.prototype, "duration", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return -1;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class5.prototype, "coinAnimSpeed", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1.25;
        }
      })), _class5)) || _class4));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfActionHelper.ts", ['cc', './utils.ts', './gfUtilities.ts'], function (exports) {
  'use strict';

  var cclegacy, tween, UIRenderer, UIOpacity, math, v3, Tween, bezier, v2, misc, Color, setOpacity, roundAngle;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      tween = module.tween;
      UIRenderer = module.UIRenderer;
      UIOpacity = module.UIOpacity;
      math = module.math;
      v3 = module.v3;
      Tween = module.Tween;
      bezier = module.bezier;
      v2 = module.v2;
      misc = module.misc;
      Color = module.Color;
    }, function (module) {
      setOpacity = module.setOpacity;
    }, function (module) {
      roundAngle = module.roundAngle;
    }],
    execute: function () {
      cclegacy._RF.push({}, "41cdfMfFS5De7ZV3uy8io9a", "gfActionHelper", undefined);

      var fadeOut = exports('fadeOut', function fadeOut(time, easing) {
        return fadeTo(time, 0, easing);
      });
      var fadeIn = exports('fadeIn', function fadeIn(time, easing) {
        return fadeTo(time, 255, easing);
      });
      var fadeTo = exports('fadeTo', function fadeTo(time, opacity, easing) {
        if (opacity < 0 || opacity > 255) {
          opacity = 0;
        }

        var currentOpacity = 0;
        return tween().to(time, null, {
          easing: easing,
          onStart: function onStart(target) {
            var renderer = target.getComponent(UIRenderer);

            if (renderer) {
              currentOpacity = renderer.color.a;
            } else {
              var uiProps = target.getComponent(UIOpacity);

              if (!uiProps) {
                uiProps = target.addComponent(UIOpacity);
              }

              currentOpacity = uiProps.opacity;
            }
          },
          onUpdate: function onUpdate(target, ratio) {
            var newOpacity = math.lerp(currentOpacity, opacity, ratio);
            setOpacity(target, newOpacity);
          }
        });
      });
      var delay = exports('delay', function delay(time) {
        return tween().delay(time);
      });
      var scaleTo = exports('scaleTo', function scaleTo(time, x, y, easing) {
        if (y == undefined) {
          y = x;
        }

        return tween().to(time, {
          scale: v3(x, y, 1)
        }, {
          easing: easing
        });
      });
      var rotateTo = exports('rotateTo', function rotateTo(time, angle, easing) {
        var startAngle = null;
        var realAngle = null;
        return tween().to(time, null, {
          easing: easing,
          onStart: function onStart(target) {
            startAngle = roundAngle(target.angle);
            realAngle = roundAngle(angle - startAngle);
          },
          onUpdate: function onUpdate(target, ratio) {
            target.angle = startAngle + realAngle * ratio;
          }
        });
      });
      var rotateBy = exports('rotateBy', function rotateBy(time, a, easing) {
        return tween().by(time, {
          angle: a
        }, {
          easing: easing
        });
      });
      var call = exports('call', function call(callFunc) {
        return tween().call(callFunc);
      });
      var v3f = exports('v3f', function v3f(f) {
        return v3(f, f, f);
      });
      var stopAllActions = exports('stopAllActions', function stopAllActions(target) {
        Tween.stopAllByTarget(target);
      });
      var moveTo = exports('moveTo', function moveTo(dur, x, y, z, easing) {
        if (y === void 0) {
          y = 0;
        }

        if (z === void 0) {
          z = 0;
        }

        return tween().to(dur, {
          position: v3(x, y, z)
        }, {
          easing: easing
        });
      });
      var moveBy = exports('moveBy', function moveBy(dur, x, y, z, easing) {
        if (y === void 0) {
          y = 0;
        }

        if (z === void 0) {
          z = 0;
        }

        return tween().by(dur, {
          position: v3(x, y, z)
        }, {
          easing: easing
        });
      });
      var bezierTo = exports('bezierTo', function bezierTo(dur, points, easing) {
        var start = v3(0, 0, 0);
        return tween().to(dur, null, {
          easing: easing,
          onStart: function onStart(target) {
            start = target.getPosition();
          },
          onUpdate: function onUpdate(target, ratio) {
            var x = bezier(start.x, points[0].x, points[1].x, points[2].x, ratio);
            var y = bezier(start.y, points[0].y, points[1].y, points[2].y, ratio);
            target.setPosition(x, y, start.z);
          }
        });
      });
      var gfMoveBy = exports('gfMoveBy', function gfMoveBy(duration, x, y, timeSkipped, easing) {
        if (timeSkipped === void 0) {
          timeSkipped = 0;
        }

        var startPos = v3(0, 0, 0);
        return tween().to(duration, null, {
          easing: easing,
          onStart: function onStart(target) {
            startPos = target.getPosition();
          },
          onUpdate: function onUpdate(target, ratio) {
            var dt = (ratio * duration + timeSkipped) / (duration + timeSkipped);
            var px = startPos.x + dt * x;
            var py = startPos.y + dt * y;
            target.setPosition(px, py, startPos.z);
          }
        });
      });
      var gfMoveTo = exports('gfMoveTo', function gfMoveTo(duration, x, y, timeSkipped, easing) {
        if (timeSkipped === void 0) {
          timeSkipped = 0;
        }

        var startPos = v3(0, 0, 0);
        return tween().to(duration, null, {
          easing: easing,
          onStart: function onStart(target) {
            startPos = target.getPosition();
          },
          onUpdate: function onUpdate(target, ratio) {
            var dt = (ratio * duration + timeSkipped) / (duration + timeSkipped);
            var px = startPos.x + dt * (x - startPos.x);
            var py = startPos.y + dt * (y - startPos.y);
            target.setPosition(px, py, startPos.z);
          }
        });
      });
      var gfMoveByDistance = exports('gfMoveByDistance', function gfMoveByDistance(duration, distance, timeSkipped) {
        if (timeSkipped === void 0) {
          timeSkipped = 0;
        }

        var startPos = v3(0, 0, 0);
        var deltaPos = v2(0, 0);
        return tween().to(duration, null, {
          onStart: function onStart(target) {
            var node = target;
            startPos = node.getPosition();
            var angle = misc.degreesToRadians(node.angle);
            deltaPos = v2(distance * Math.cos(angle), distance * Math.sin(angle));
          },
          onUpdate: function onUpdate(target, ratio) {
            var dt = (ratio * duration + timeSkipped) / (duration + timeSkipped);
            var px = startPos.x + dt * deltaPos.x;
            var py = startPos.y + dt * deltaPos.y;
            target.setPosition(px, py, startPos.z);
          }
        });
      });
      var gfCircleBy = exports('gfCircleBy', function gfCircleBy(duration, center, radius, angle, timeSkipped) {
        if (timeSkipped === void 0) {
          timeSkipped = 0;
        }

        var startPos = v3(0, 0, 0);
        var baseAngle = 0;
        return tween().to(duration, null, {
          onStart: function onStart(target) {
            var node = target;
            startPos = node.getPosition();
            baseAngle = Math.atan2(startPos.y - center.y, startPos.x - center.x);
          },
          onUpdate: function onUpdate(target, ratio) {
            var dt = (ratio * duration + timeSkipped) / (duration + timeSkipped);
            var radian = baseAngle + misc.degreesToRadians(angle) * dt;
            var x = radius * Math.cos(radian);
            var y = radius * Math.sin(radian);
            target.setPosition(x + center.x, y + center.y, startPos.z);
          }
        });
      });
      var gfBezierBy = exports('gfBezierBy', function gfBezierBy(duration, points, timeSkipped) {
        if (timeSkipped === void 0) {
          timeSkipped = 0;
        }

        var start = v3(0, 0, 0);
        return tween().to(duration, null, {
          onStart: function onStart(target) {
            start = target.getPosition();
          },
          onUpdate: function onUpdate(target, ratio) {
            var dt = (ratio * duration + timeSkipped) / (duration + timeSkipped);
            var x = bezier(start.x, start.x + points[0].x, start.x + points[1].x, start.x + points[2].x, dt);
            var y = bezier(start.y, start.y + points[0].y, start.y + points[1].y, start.y + points[2].y, dt);
            target.setPosition(x, y, start.z);
          }
        });
      });
      var shake = exports('shake', function shake(pos, duration, delay) {
        if (delay === void 0) {
          delay = 0;
        }

        var timeFrame = duration / 11;
        var posX = pos.x;
        var posY = pos.y;
        return tween().to(timeFrame, {
          position: v3(posX - 1, posY - 2, 0),
          angle: -1
        }) //10%
        .to(timeFrame, {
          position: v3(posX - 3, posY + 0, 0),
          angle: 1
        }) //20%
        .to(timeFrame, {
          position: v3(posX + 3, posY + 2, 0),
          angle: 0
        }) //30%
        .to(timeFrame, {
          position: v3(posX + 1, posY - 1, 0),
          angle: 1
        }) //40%
        .to(timeFrame, {
          position: v3(posX - 1, posY + 2, 0),
          angle: -1
        }) //50%
        .to(timeFrame, {
          position: v3(posX - 3, posY + 1, 0),
          angle: 0
        }) //60%
        .to(timeFrame, {
          position: v3(posX + 3, posY + 1, 0),
          angle: -1
        }) //70%
        .to(timeFrame, {
          position: v3(posX - 1, posY - 1, 0),
          angle: 1
        }) //80%
        .to(timeFrame, {
          position: v3(posX + 1, posY + 2, 0),
          angle: 0
        }) //90%
        .to(timeFrame, {
          position: v3(posX + 1, posY - 2, 0),
          angle: -1
        }) //100%
        .to(timeFrame, {
          position: v3(posX, posY, 0),
          angle: 0
        }) //100%
        .delay(delay);
      });
      var blink = exports('blink', function blink(duration, times, finalOpacity) {
        if (finalOpacity === void 0) {
          finalOpacity = 255;
        }

        var slice = 1.0 / times;
        return tween().to(duration, null, {
          onUpdate: function onUpdate(target, ratio) {
            var m = ratio % slice;
            setOpacity(target, m > slice / 2 ? 255 : 0);
          },
          onComplete: function onComplete(target) {
            setOpacity(target, finalOpacity);
          }
        });
      });
      var moveBySpring = exports('moveBySpring', function moveBySpring(data, timeSkipped) {
        if (timeSkipped === void 0) {
          timeSkipped = 0;
        }

        var duration = data.duration,
            cycleIntensity = data.cycleIntensity,
            speed = data.speed,
            radius = data.radius,
            timeSpent = data.timeSpent,
            pos = data.pos,
            flip = data.flip,
            angle = data.angle;
        var startPos = v3(0, 0, 0);
        return tween().to(duration, null, {
          onStart: function onStart(target) {
            var node = target;
            startPos = node.getPosition();
          },
          onUpdate: function onUpdate(target, dt) {
            dt = (dt * duration + timeSpent) / (duration + timeSkipped);

            function mx(u) {
              var timeSpent = u * duration * speed * (flip ? 1 : -1);
              return (timeSpent / cycleIntensity - Math.cos(timeSpent + angle * Math.PI / 180)) * radius + pos.x;
            }

            function my(u) {
              var timeSpent = u * duration * speed * (flip ? 1 : -1);
              return Math.sin(timeSpent + angle * Math.PI / 180) * radius + pos.y;
            }

            var x = mx(dt);
            var y = my(dt);
            target.setPosition(x, y, startPos.z);
          }
        });
      });
      var gfSetOpacityAll = exports('gfSetOpacityAll', function gfSetOpacityAll(node, opacity) {
        setOpacity(node, opacity);
        var children = node.getComponentsInChildren(UIRenderer);
        children.forEach(function (child) {
          var _child$color = child.color,
              r = _child$color.r,
              g = _child$color.g,
              b = _child$color.b;
          child.color = new Color(r, g, b, opacity);
        });
      });
      var gfFadeOutAll = exports('gfFadeOutAll', function gfFadeOutAll(time, easing) {
        return gfFadeToAll(time, 0, easing);
      });
      var gfFadeInAll = exports('gfFadeInAll', function gfFadeInAll(time, easing) {
        return gfFadeToAll(time, 255, easing);
      });
      var gfFadeToAll = exports('gfFadeToAll', function gfFadeToAll(time, opacity, easing) {
        opacity = math.clamp(opacity, 0, 255);
        var currentOpacity = 255;
        return tween().to(time, null, {
          easing: easing,
          onStart: function onStart(target) {
            var node = target;
            var uiProps = node.getComponent(UIOpacity);

            if (uiProps) {
              currentOpacity = uiProps.opacity;
            } else {
              var renderable2D = node.getComponent(UIRenderer);

              if (renderable2D) {
                currentOpacity = renderable2D.color.a;
              }
            }
          },
          onUpdate: function onUpdate(target, ratio) {
            var node = target;
            var newOpacity = math.lerp(currentOpacity, opacity, ratio);
            setOpacity(node, newOpacity);
            var children = node.getComponentsInChildren(UIRenderer);
            children.forEach(function (child) {
              var _child$color2 = child.color,
                  r = _child$color2.r,
                  g = _child$color2.g,
                  b = _child$color2.b;
              child.color = new Color(r, g, b, newOpacity);
            });
          }
        });
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfAssetBundle.ts", ['cc', './gfBaseConfig.ts', './gfPoolManager.ts'], function (exports) {
  'use strict';

  var cclegacy, Prefab, assetManager, gfBaseConfig, gfPoolManager;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Prefab = module.Prefab;
      assetManager = module.assetManager;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfPoolManager = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "8c97dRruwtJ64FqLt6xq3zu", "gfAssetBundle", undefined);

      var gfAssetBundle = exports('default', /*#__PURE__*/function () {
        function gfAssetBundle() {
          this.GameBundle = void 0;
          gfAssetBundle.instance = this;
        }

        var _proto = gfAssetBundle.prototype;

        _proto.loadVipRoomAssets = function loadVipRoomAssets(callback) {
          var _this = this;

          if (!this.GameBundle) {
            callback && callback();
            return;
          }

          var listBoss = Object.keys(gfBaseConfig.instance.BOSS_PREFAB_NAME);

          if (listBoss.length > 0) {
            var _loop = function _loop(i) {
              _this.GameBundle.load(gfBaseConfig.instance.BOSS_PREFAB_NAME[listBoss[i]], Prefab, function (err, prefab) {
                gfPoolManager.instance.instantiateBoss(prefab);

                if (listBoss.length - 1 === i) {
                  callback && callback();
                }
              });
            };

            for (var i = 0; i < listBoss.length; i++) {
              _loop(i);
            }
          } else {
            callback && callback();
          }
        };

        _proto.releaseVipRoomAssets = function releaseVipRoomAssets() {
          if (!this.GameBundle) return;
          var listBoss = Object.keys(gfBaseConfig.instance.BOSS_PREFAB_NAME);

          if (listBoss.length > 0) {
            for (var i = 0; i < listBoss.length; i++) {
              this.GameBundle.release(gfBaseConfig.instance.BOSS_PREFAB_NAME[listBoss[i]], Prefab);
            }

            gfPoolManager.instance.releaseBoss();
          }
        };

        _proto.releaseLoadingAssets = function releaseLoadingAssets() {
          if (!this.GameBundle) return;
          this.GameBundle.release('./Scenes/' + gfBaseConfig.instance.LoadingSceneName);
        };

        _proto.destroy = function destroy() {
          if (!this.GameBundle) return;
          this.GameBundle.releaseAll();
          assetManager.removeBundle(this.GameBundle);
          this.GameBundle = null;
          gfAssetBundle.instance = null;
        };

        return gfAssetBundle;
      }());
      gfAssetBundle.instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfBackgroundController.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfActionHelper.ts', './gfUtilities.ts', './gfDataStore.ts', './gfEventEmitter.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, SpriteFrame, Sprite, tween, Component, gfBaseEvents, fadeOut, fadeIn, registerEvent, removeEvents, gfDataStore, gfEventEmitter;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SpriteFrame = module.SpriteFrame;
      Sprite = module.Sprite;
      tween = module.tween;
      Component = module.Component;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      fadeOut = module.fadeOut;
      fadeIn = module.fadeIn;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "448e8PVDLlGxICPVN85eBPB", "gfBackgroundController", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfBackgroundController = exports('GfBackgroundController', (_dec = ccclass('GfBackgroundController'), _dec2 = property(SpriteFrame), _dec3 = property(Sprite), _dec4 = property(Sprite), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfBackgroundController, _Component);

        function GfBackgroundController() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "arrDataBackground", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "background1", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "background2", _descriptor3, _assertThisInitialized(_this));

          _this._curBackgroundID = -1;
          return _this;
        }

        var _proto = GfBackgroundController.prototype;

        _proto.onLoad = function onLoad() {
          this.initEvents();
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.GAME_LAYER.GAME_CHANGE_ROUND, this.onChangeRound, this);
          registerEvent(gfBaseEvents.GAME_LAYER.UPDATE_ROOM_DATA, this.onInitBackground, this);
          registerEvent(gfBaseEvents.EFFECT_LAYER.MINIBOSS_SMASH, this.onSlapTailEffect, this);
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.resetOnExit, this);
          registerEvent(gfBaseEvents.COMMON.GAME_SHOW, this.resetOnExit, this);
        };

        _proto.onInitBackground = function onInitBackground(data) {
          var backgroundID = data.SceneKind;
          if (this._curBackgroundID == backgroundID) return;
          this._curBackgroundID = backgroundID;
          this.background1.spriteFrame = this.arrDataBackground[backgroundID];
          this.background2.spriteFrame = this.arrDataBackground[backgroundID];
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.INIT_BUBBLE, backgroundID);
        };

        _proto.onChangeRound = function onChangeRound(data) {
          var _this2 = this;

          var backgroundID = data.SceneKind;
          var isFishGroupToNormal = data.isFishGroupToNormal;
          if (this._curBackgroundID == backgroundID) return;
          this._curBackgroundID = backgroundID;
          tween(this.background1.node).delay(1).then(fadeOut(1.5)).call(function () {
            _this2.background1.spriteFrame = _this2.arrDataBackground[_this2._curBackgroundID];
          }).then(fadeIn(0)).start();
          tween(this.background2.node).then(fadeOut(0)).call(function () {
            _this2.background2.spriteFrame = _this2.arrDataBackground[_this2._curBackgroundID];
          }).delay(1).then(fadeIn(1.5)).start();

          if (!isFishGroupToNormal) {
            if (this._curBackgroundID > 2) {
              gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.PLAY_WAVE_TRANSITION);
            } else {
              gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.PLAY_FISH_GROUP_TRANSITION, !!(gfDataStore.instance.getSelfDeskStation() > 1));
            }

            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.CHANGE_BUBBLE, this._curBackgroundID); //@TODO move out fish
          }
        };

        _proto.onSlapTailEffect = function onSlapTailEffect(data) {// const { nodeSmashTail, scaleX } = data;
          // this.slapTailFX = cc.instantiate(this.slapTailEffect);
          // this.node.addChild(this.slapTailFX);
          // this.slapTailFX.setPosition(getPostionInOtherNode(this.node, nodeSmashTail));
          // this.slapTailFX.scaleX = -scaleX;
          // let animState = this.slapTailFX.getComponent(cc.Animation).play('SlapTailMiniBoss');
          // animState.off('finished');
          // animState.on('finished', () => {
          //     if(cc.isValid(this.slapTailFX)){
          //         this.slapTailFX.destroy();
          //         this.slapTailFX = null;
          //     }
          // });
        };

        _proto.resetOnExit = function resetOnExit() {// if(cc.isValid(this.slapTailFX)){
          //     this.slapTailFX.destroy();
          //     this.slapTailFX = null;
          // }
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return GfBackgroundController;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "arrDataBackground", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "background1", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "background2", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfBallTray.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfBaseEvents.ts', './gfActionHelper.ts', './gfEventEmitter.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, sp, tween, v3, Component, setOpacity, gfBaseEvents, stopAllActions, scaleTo, gfEventEmitter;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      sp = module.sp;
      tween = module.tween;
      v3 = module.v3;
      Component = module.Component;
    }, function (module) {
      setOpacity = module.setOpacity;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      stopAllActions = module.stopAllActions;
      scaleTo = module.scaleTo;
    }, function (module) {
      gfEventEmitter = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "aab78w0roROIJELbktbTQbV", "gfBallTray", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfBallTray = exports('GfBallTray', (_dec = ccclass('GfBallTray'), _dec2 = property(Node), _dec3 = property(sp.Skeleton), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfBallTray, _Component);

        function GfBallTray() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "trayGlowFX", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bodySpine", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "slot7FX", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "electroEffect", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "ballHolder", _descriptor5, _assertThisInitialized(_this));

          _this._ballInTray = void 0;
          _this._isActive = false;
          return _this;
        }

        var _proto = GfBallTray.prototype;

        _proto.onLoad = function onLoad() {
          setOpacity(this.bodySpine.node, 0);
          setOpacity(this.slot7FX, 0);
          this.slot7FX.active = false;
          this.trayGlowFX.active = false;
        };

        _proto.appear = function appear() {
          if (this._isActive) return;
          this._isActive = true;
          this.node.active = true;
          setOpacity(this.bodySpine.node, 255);
          this.bodySpine.setAnimation(0, 'Appear', false);
          this.bodySpine.setCompleteListener(function () {});
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.BALL_TRAY_SHOW);
        };

        _proto.disappear = function disappear() {
          var _this2 = this;

          this._isActive = false;
          this.bodySpine.setAnimation(0, 'Disappear', false);
          this.bodySpine.setCompleteListener(function () {
            _this2.node.active = false;
          });
          this.hideElectroEffect();
          setOpacity(this.slot7FX, 0);
          this._ballInTray = 0;
          this.slot7FX.active = false;
          this.trayGlowFX.active = false;
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.BALL_TRAY_DRAW);
        };

        _proto.isAppear = function isAppear() {
          return this._isActive;
        };

        _proto.hide = function hide() {
          this._isActive = false;
          this.node.active = false;
          setOpacity(this.slot7FX, 0);
          this.slot7FX.active = false;
          this.trayGlowFX.active = false;
          this._ballInTray = 0;
          this.hideElectroEffect();
        };

        _proto.activeSlot7FX = function activeSlot7FX() {
          this.slot7FX.active = true;
          setOpacity(this.slot7FX, 255);
        };

        _proto.activeTrayGlow = function activeTrayGlow() {
          this.trayGlowFX.active = true;
        };

        _proto.getBallHolder = function getBallHolder(index) {
          if (!this.ballHolder[index]) return this.node;
          return this.ballHolder[index];
        };

        _proto.onBallEnter = function onBallEnter(count) {
          if (count === void 0) {
            count = 1;
          }

          this._ballInTray += count;
          this.showElectroEffect();
        };

        _proto.showElectroEffect = function showElectroEffect() {
          var scaleTime = 0.2;

          if (this.electroEffect) {
            if (this._ballInTray >= 4) {
              this.electroEffect.active = true;
              stopAllActions(this.electroEffect);
              tween(this.electroEffect).then(scaleTo(scaleTime, 1.5)).then(scaleTo(scaleTime, 1.4)).start();
            } else if (this._ballInTray > 1) {
              this.electroEffect.active = true;
              stopAllActions(this.electroEffect);
              tween(this.electroEffect).then(scaleTo(scaleTime, 1.1)).then(scaleTo(scaleTime, 1.0)).start();
            }
          }

          if (this._ballInTray > 1) {
            this.activeTrayGlow();
          }

          if (this._ballInTray >= 6) {
            this.activeSlot7FX();
          }
        };

        _proto.hideElectroEffect = function hideElectroEffect() {
          if (this.electroEffect) {
            this.electroEffect.scale = v3(0);
            this.electroEffect.active = false;
          }
        };

        return GfBallTray;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "trayGlowFX", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "bodySpine", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "slot7FX", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "electroEffect", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "ballHolder", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfBaseCellHistory.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfUtilities.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, UITransform, Label, Component, formatMoney, formatTimeStamp, formatUserName;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      UITransform = module.UITransform;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      formatMoney = module.formatMoney;
    }, function (module) {
      formatTimeStamp = module.formatTimeStamp;
      formatUserName = module.formatUserName;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "80122TukRxO4YAoD+vE5lcq", "gfBaseCellHistory", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfBaseCellHistory = exports('GfBaseCellHistory', (_dec = ccclass('GfBaseCellHistory'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfBaseCellHistory, _Component);

        function GfBaseCellHistory() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "time", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "account", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bet", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "winAmount", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "height", _descriptor5, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = GfBaseCellHistory.prototype;

        _proto.onLoad = function onLoad() {
          this.node.getComponent(UITransform).height = this.height;
        };

        _proto.updateData = function updateData(data) {
          if (!data) return;
          this.time.getComponent(Label).string = formatTimeStamp(data.time);
          this.account.getComponent(Label).string = formatUserName(data.dn);
          this.bet.getComponent(Label).string = formatMoney(data.betAmt);
          this.winAmount.getComponent(Label).string = formatMoney(data.jpAmt);
        };

        return GfBaseCellHistory;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "time", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "account", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "bet", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "winAmount", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "height", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 50;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfBaseConfig.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, Vec3;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Vec3 = module.Vec3;
    }],
    execute: function () {
      cclegacy._RF.push({}, "74a69ZRNVVE0Y3Ky3LtcPr0", "gfBaseConfig", undefined);

      var gfBaseConfig = exports('default', /*#__PURE__*/function () {
        // 2D speed
        // in second
        // 10s
        function gfBaseConfig() {
          var _this$NOTIFY_CONFIG,
              _position,
              _this = this;

          this.IPMasterName = "IPMaster1";
          this.IPMaster = "";
          this.IPGame = "";
          this.token4Game = "";
          this.userToken = "";
          this.token4Master = "";
          this.RoomVersion = "|1";
          this.ProdVersion = "|1";
          this.ClientType = "|1";
          this.GameId = '1999';
          this.IsDevMode = false;
          this.RoomKind = {
            Normal: "1",
            VIP: "3"
          };
          this.GameVersion = "0.5.6";
          this.MiniBossSceneKind = 1;
          this.SceneName = {
            Lobby: 'ktfLobby1901',
            Game: 'ktfGame1901'
          };
          this.LoadingSceneName = 'ktfLoading1901';
          this.LOCAL_STORE = {
            LOCAL_LOGIN_VAR: "ktfllv",
            NOT_SHOW_NT: "NSNT",
            MUSIC_VOLUME: "music_volume",
            EFFECT_VOLUME: "effect_volume",
            SHOW_EVENT_INFO: "SEIF"
          };
          this.TotalGun = 7;
          this.MaxBullet = 20;
          this.BotState = {
            INITIALIZED: 1,
            STARTED: 2,
            STOPPED: 3
          };
          this.AppSize = {
            Width: 1280,
            Height: 720,
            MaxWidth: 1604
          };
          this.realSize = {
            Width: 1280,
            Height: 720
          };
          this.SceneBox = {
            Left: 0,
            Bottom: 0,
            Right: 1280,
            Top: 720
          };
          this.BulletSpeed = 938;
          this.NetFx = {
            NormalNet: 0,
            ExplostionNet: 1,
            IceNet: 2
          };
          this.gunRadius = 92;
          this.ChangeTarget = 5;
          this.TARGET_LOCK = {
            NONE: 0,
            AUTO_FIRE: 1,
            TARGET_ONE: 2,
            TARGET_ALL: 3,
            AUTO_BOT: 4,
            PAUSE: 5
          };
          this.SKILL_ITEM = {
            FREEZE: 1
          };
          this.POPUP_TYPE = {
            Info: 'PopupInfo',
            Message: 'PopupNotify',
            Tutorial: 'PopupTutorial',
            Setting: 'PopupSetting',
            Chat: 'PopupChatMsg',
            Jackpot: 'PopupHistoryJackpot'
          };
          this.POPUP_ANIMATION = {
            PULSE: 'PULSE',
            BOUNCE: 'BOUNCE',
            EASE: 'EASE',
            FADE: 'FADE',
            DEFAULT: 'DEFAULT'
          };
          this.POPUP_PROMPT = {
            JUST_CONFIRM_BUTTON: 'JUST_CONFIRM_BUTTON',
            CONFIRM_AND_CLOSE_BUTTON: 'CONFIRM_AND_CLOSE_BUTTON',
            CONFIRM_AND_REJECT_BUTTON: 'CONFIRM_AND_REJECT_BUTTON',
            NONE_BUTTON: 'NONE_BUTTON'
          };
          this.TIME_COUNTDOWN_ITEM_FREEZE = 10;
          this.CursorBase64 = "AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAAAAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+7AAH/uwAC/7sAAv+7AAH/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+8AAj/twAZ/6wAJv+tADT/rQAy/60AIv+5ABb/uwAD/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+7AAD/vAAI/7EAIP+9HHX/1XbC/9FmxP/SacX/1G67/7cFXf+0ABj/vAAF/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+7AAD/uwAO/7IAG/+rADb/sA50/9Nt2v//////////////////////xD7A/7ADZ/+rAC3/tQAY/7wACv+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/vAAH/7UAGf+pADv/wTiK/+ax3//01///5rXv/+q29v///////////+Kk7//sxvb/8c77/+Cb0v+6H3n/qwAx/7kAFv+8AAP/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/70AC/+vACL/sgpm/+e34P/57P//4abX/8I3iv+wAWj/qgCF//z7///tx/b/ogBz/7YMbP/HTJf/5bbj//ru///ZjMT/qwBO/7QAHP+8AAb/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+9AAr/rQAm/7ktgf/58P//6sXo/7YdeP+pADP/sgAa/7oAGv+yAC//xjmJ/8Epd/+0ACb/uQAW/7AAH/+pAD3/vjqM//HX+P/v0vL/sQll/7EAHv+8AAb/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/vAAG/68AIv+5K4H//////9eHxf+lAEP/tAAd/7wACf+7AAD/ugAA/7wADv+yABD/tAAQ/7wACf+6AAD/uwAA/7wADf+xACL/qgBZ/+m76P/46v//rgZg/7UAG/+7AAH/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7sAAP+1ABr/sApj//78///Ygsb/pQA5/7sAFf+7AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7wAAf+3ABv/pQBK/+y/7P/vx/H/qQBG/7oAFP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/uwAO/6kAOP/oseP/7MLu/6YAQ/+6ABX/uwAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7sAAP+2ABz/qwBf//v0///Vcbz/qwAo/7wABv+6AAD/ugAA/7oAAP+6AAD/ugAA/7sAAP+xABv/wzWO//75//+2DXj/tAAd/7sAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7wAA/+tACT/yESj//z0//+zBmP/twAU/7oAAP+6AAD/ugAA/7oAAP+6AAD/vAAI/6wANf/os+T/4qPZ/6kAM/+9AAn/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+7AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7sAEf+rAEr/8dL3/9h6v/+tACP/vAAB/7oAAP+6AAD/ugAA/7wACP+wACD/sgB2//jm///DM4z/sgAZ/7sAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAf+7AAz/swAQ/7EAEf+5AA7/uwAD/7oAAP+6AAD/ugAA/7oAAP+6AAD/vAAB/6wAI//WeLf/78v2/6YAVf+1ABn/vAAI/7oAAP+6AAD/twAZ/74pdP/Ratf/6bb1/68AaP+7ABn/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAH/ugAV/7EAO/+/KYH/wDGJ/7EASf+4ABv/uwAD/7oAAP+6AAD/ugAA/7oAAP+6AAD/tQAh/70ahv/tw///xEHD/8Mwc/+2ABj/ugAB/7sAAf+sACT/2HjF///////mr/H/qgCI/7IAL/+8AA3/ugAA/7oAAP+6AAD/ugAA/7sACP+wADP/z2Wz////////////3Y/S/7EASf+6AA7/ugAA/7oAAP+6AAD/ugAA/7wADf+wADT/sQCY//LQ/P//////2H7F/6sAJP+7AAL/uwAB/60ANP/RZsT////////////77f//xT+H/7EAD/+6AAD/ugAA/7oAAP+6AAD/tgAJ/7YEZ//++v//////////////////wjKM/7EAEP+7AAD/ugAA/7oAAP+6AAD/sgAP/8U+h//57P/////////////QZMT/rQA0/7sAAf+7AAL/rAAy/9Jqxf///////////+rB6P/BNXj/tAAQ/7oAAP+6AAD/ugAA/7oAAP+3AAn/tARd//jo//////////////////++KID/sgAQ/7sAAP+6AAD/ugAA/7oAAP+0ABD/wTR4/+i66P///////////9Joxf+tADL/uwAB/7sAAv+tACH/1W69//7+///io+z/pAB2/7MAJv+8AAn/ugAA/7oAAP+6AAD/ugAA/7sABv+xACr/wziW//LV+f/45v//0GW0/7AAO/+7AAz/ugAA/7oAAP+6AAD/ugAA/7wACv+xACr/qwCK/+7J/P/57f//13W9/60AIP+7AAL/ugAA/7kAFv+3EV7/yEbB/+/G+v+1AGz/uQAW/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7wAEf+xACr/tQBg/7gHaf+wADT/ugAV/7sAAf+6AAD/ugAA/7oAAP+6AAD/uwAA/7QAHv/EL43/7sb//7gbqf+9GFz/uQAV/7oAAP+6AAD/vAAE/7QAGP+wAGb/9uL//8pIm/+wAB3/uwAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7sABv+3AAr/tgAK/7oACP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+8AAT/qwAp/9yMxf/swu//pwBH/7YAEf+8AAT/ugAA/7oAAP+6AAD/vAAE/6sALP/indX/6rvo/6gAPP+8AA3/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7kAFf+tAFj/9uD//9BerP+uAB7/vAAA/7oAAP+6AAD/ugAA/7oAAP+7AAD/tQAY/7oad//9+///vyyQ/7AAIf+8AAH/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+9AAf/qQAq/9JpvP/35v//rgBS/7kAEv+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+8AAr/qgAu/9yJzP/46P//qABW/7cAGv+7AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/vQAE/7EAIP+zEnn//////8hMn/+tACL/uwAE/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+5ABb/qgBM//LS+P/puOj/pQBK/7YAHP+8AAP/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/70ACP+xACH/rAJl//vu///gmtL/qQA3/7sAEP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7wAAv+zABv/sAlj//jo///swez/rQBh/64AJv+7ABH/uwAB/7oAAP+8AA3/sgAP/7QAEP+9AAn/ugAA/7wABP+5ABb/qgAs/7Ufev/45///6Lbi/6kASf+4ABf/uwAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7wABv+yAB3/sARi/+zI6v/03f3/xVGc/6wATf+tACX/tQAg/7AAM//GOIj/wSl5/7EAK/+0AB7/qwAr/68AW//PbrL//PT//96g0P+pAEj/twAa/7sAAv+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7wABf+1ABv/qgBH/9FxtP/13///6sTu/9R8tP+9IIj/sAWU//36///sxvb/qgeG/8Mxjv/akcT/7s/2//DS9f/GUZn/qgA4/7gAGP+7AAL/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7sAAf+6ABT/rAAq/7UIZ//Vdrj/67rw/+zC/v/01P/////////////uy/3/7Mn+/+q16v/NYKf/rwBW/68AJP+8ABD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+8AAf/twAT/64AJf+nAFX/w0PE//////////////////////+2Iaf/qABG/68AIP+6ABL/vAAE/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/vAAC/7QAGv/CJ3P/1njB/9Fmxf/SacT/13W7/70OW/+2ABL/uwAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/vAAI/7cAGP+sACX/rQA0/60AMv+tACH/uQAW/7sABP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7sAAf+7AAL/uwAB/7sAAf+6AAH/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA//w////wD///4Af//4AB//4AAH/8AAA/+AAAH/AMMA/wP/gP4H/+B+D//gfA//8DgfgfAYHwD4AA8A8AAPAPAADwDwAA8A8AgfgPgYH8PwHA//8H4H/+B+B//AfwH/gP8AQgH/gAAB/8AAA//gAA//+AAf//4A////AP///8H/8=";
          this.FISH_KIND = {
            LASER_CRAB: 27,
            DRAGON: 32,
            MINIBOSS: 33,
            KING_LOBSTER: 34,
            LANTERN: 36,
            BOMB: 43,
            BOMB_M: 44,
            DRILL: 46,
            DRILL_M: 47,
            FIRE_STORM: 49,
            KING_CRAB: 50
          };
          this.PRIORITY_FISH = [this.FISH_KIND.DRAGON, this.FISH_KIND.MINIBOSS];
          this.NOTIFY_TYPE = {
            SYSTEM: 0,
            JACKPOT: 1,
            MESSAGE_BIG_FISH: 2,
            MESSAGE_SPECIAL_SKILL: 3,
            MESSAGE_DRAGON_BALL: 4,
            MESSAGE_KILL_MINIBOSS: 5,
            MESSAGE_DROP_ITEM_MINIBOSS: 6,
            MESSAGE_EVENT: 7
          };
          this.NOTIFY_CONFIG = (_this$NOTIFY_CONFIG = {}, _this$NOTIFY_CONFIG[this.NOTIFY_TYPE.JACKPOT] = {
            userName: 0,
            goldReward: 1
          }, _this$NOTIFY_CONFIG[this.NOTIFY_TYPE.MESSAGE_BIG_FISH] = {
            userName: 0,
            fishKind: 1,
            multiple: 3,
            goldReward: 2
          }, _this$NOTIFY_CONFIG[this.NOTIFY_TYPE.MESSAGE_SPECIAL_SKILL] = {
            userName: 0,
            subID: 1,
            goldReward: 2
          }, _this$NOTIFY_CONFIG[this.NOTIFY_TYPE.MESSAGE_DRAGON_BALL] = {
            userName: 0,
            countBall: 1,
            goldReward: 2
          }, _this$NOTIFY_CONFIG[this.NOTIFY_TYPE.MESSAGE_KILL_MINIBOSS] = {
            userName: 0,
            fishKind: 1,
            goldReward: 3,
            itemID: 2,
            multiple: 4
          }, _this$NOTIFY_CONFIG[this.NOTIFY_TYPE.MESSAGE_DROP_ITEM_MINIBOSS] = {
            userName: 0,
            fishKind: 1,
            itemID: 2,
            goldReward: 3,
            multiple: 4
          }, _this$NOTIFY_CONFIG[this.NOTIFY_TYPE.MESSAGE_EVENT] = {
            userName: 0,
            goldReward: 1
          }, _this$NOTIFY_CONFIG);
          this.Z_INDEX = {
            NOTIFY: 2000,
            MENU: 2099,
            POPUP: 2100,
            WAITING: 2200,
            COIN: 98,
            COIN_LABEL: 99,
            BIGWIN: 100,
            DRAGON_BALL: 101,
            DRAGON: 900,
            BULLET: 999,
            NETFX_ICE: 91,
            NETFX_MINIBOSS: 92,
            NETFX: 93,
            CUTSCENE: 1900
          };
          this.EXCEPTION_SOUNDS = ['sfxClick'];
          this.NOTIFY_MESSAGE = {
            position: (_position = {}, _position[this.SceneName.Game] = new Vec3(0, 240, 1), _position[this.SceneName.Lobby] = new Vec3(0, 240, 1), _position),
            limited_stack_size: 10
          };
          this.NOTIFY_JACKPOT = {
            array_type_notify_jackpot: [this.NOTIFY_TYPE.JACKPOT],
            limited_stack_size: 10
          };
          this.AUTO_BOT = {
            DATA_TIMER: ["0'", "30'", "60'", "90'", "120'", "∞"],
            MAX_TIME: 150,
            SPECIAL_ITEM: "i"
          };
          this.SOUND_BACKGROUND_CONFIG = {
            MINI_BOSS: "MINI_BOSS",
            DRAGON: "DRAGON",
            LOBBY: "LOBBY",
            IN_GAME: "IN_GAME",
            FISH_GROUP: "FISH_GROUP"
          };
          this.DEFAULT_AVATAR = "Avatar0";
          this.COIN_TYPE = {
            MY_COIN: 0,
            OTHER_COIN: 1
          };
          this.NOTIFY_ENVIRONMENT_CONFIG = {
            ALL: 0,
            IFRAME: 1,
            APP: 2
          };
          this.ENVIRONMENT_CONFIG = {
            WEB_APP: 1,
            IFRAME: 2,
            NATIVE_APP: 3
          };
          this.GunSkill = {
            LASER: "gun9"
          };
          this.SkillConfig = {
            TIMEOUT: 30,
            LASER: 1,
            BOOM: 3,
            FISH_BOMB: 5
          };
          this.SHAKE_SCREEN_STYLE = {
            HORIZONTAL: 0,
            VERTICAL: 1,
            CROSS_1: 2,
            //theo hình dấu cộng
            CROSS_2: 3,
            //theo hình dấu nhân
            FULL: 4 //kết hợp cả 2 loại style CROSS

          };
          this.BIG_WIN_RATIO = {
            HUGE: 180,
            SUPER: 301,
            BIG_WIN_VALUE: 80
          };
          this.waiting_timeout = 15;
          this.SOUND_SLIDER = false;
          this.POS_WIFI_STATUS = {
            LEFT: new Vec3(-476, -253, 1),
            RIGHT: new Vec3(445, -255, 1)
          };
          this.POS_EVENT = {
            LEFT: new Vec3(-565, -100, 1),
            RIGHT: new Vec3(565, -100, 1)
          };
          this.BOSS_PREFAB_NAME = {
            DRAGON: 'gfDragon'
          };
          this.TURN_ON_WIFI_STATUS = false;
          this.LoadGameByPrefab = false;
          this.BundleName = 'bundle1901';
          this.ScenePrefabs = {};
          this.MainGameNode = null;
          this.LOAD_DYNAMIC_ASSET = false;
          this.vfxSkillDelay = {
            0: {
              distances: [300, 600],
              velocity: 3000
            },
            1: {
              distances: [300, 600],
              velocity: 2100
            },
            5: {
              distances: [300, 600],
              velocity: 6000
            },
            MAX_DISTANCE: 1280
          };
          this.LIST_SPECIAL_FISH_KIND = [27, 32, 33, 43, 44, 46, 47, 49, 50];
          this.Skill = {
            TIMEOUT: 30,
            ID: {
              LASER: 1,
              BOOM: 3,
              FISH_BOMB: 5,
              DRILL: 7,
              FIRE_STORM: 8
            },
            IsGunSkill: function IsGunSkill(skillID) {
              return skillID == _this.Skill.ID.LASER || skillID == _this.Skill.ID.DRILL || skillID == _this.Skill.ID.FIRE_STORM;
            },
            PRIORITY_SKILL: [this.SkillConfig.LASER]
          };
          this.FISH_LOG_CONFIG = {
            DRAGON: "Dragon appear",
            FISH_GROUP: "Fish group appear"
          };
          gfBaseConfig.instance = this;
        }

        var _proto = gfBaseConfig.prototype;

        _proto.parseJoinGame = function parseJoinGame(data) {
          this.IPGame = data.Server;
          this.token4Game = data.Token;
        };

        _proto.destroy = function destroy() {
          gfBaseConfig.instance = null;
        };

        _proto.IsSpecialFish = function IsSpecialFish(fishKind) {
          return this.LIST_SPECIAL_FISH_KIND.indexOf(fishKind) != -1;
        };

        _proto.IsCrab = function IsCrab(fishKind) {
          return fishKind == this.FISH_KIND.BOMB || fishKind == this.FISH_KIND.BOMB_M || fishKind == this.FISH_KIND.LASER_CRAB || fishKind == this.FISH_KIND.DRILL || fishKind == this.FISH_KIND.DRILL_M;
        };

        return gfBaseConfig;
      }());
      gfBaseConfig.instance = null;
      gfBaseConfig.instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfBaseEvents.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e57f8GD7yFOiJEBw3WDnc3w", "gfBaseEvents", undefined); // Contain Events communicate between components


      var gfBaseEvents = exports('default', {
        COMMON: {
          UPDATE_PING: "UPDATE_PING",
          SHOW_WAITING: "SHOW_WAITING",
          HIDE_WAITING: "HIDE_WAITING",
          UPDATE_WAITING_PERCENT: "UPDATE_WAITING_PERCENT",
          GO_LOBBY: "GO_LOBBY",
          EXIT_GAME_ROOM: "EXIT_GAME_ROOM",
          CLOSE_SCENE: "COMMON_CLOSE_SCENE",
          INIT_SCENE: "COMMON_INIT_SCENE",
          REFRESH_PAGE: "REFRESH_PAGE",
          UPDATE_JACKPOT: "UPDATE_JACKPOT",
          SHOW_NOTIFY: "SHOW_NOTIFY",
          RESET_TOUCH_LISTENER: "RESET_TOUCH_LISTENER",
          RESET_TOUCH_LISTENER_NO_MONEY: "RESET_TOUCH_LISTENER_NO_MONEY",
          REMOVE_TOUCH_LISTENER: "REMOVE_TOUCH_LISTENER",
          GAME_SHOW: "GAME_SHOW",
          GAME_HIDE: "GAME_HIDE",
          SHAKE_SCREEN: "SHAKE_SCREEN",
          ON_SHOW_GAME_LAYER: "ON_SHOW_GAME_LAYER",
          SCENE_LOAD_DONE: "SCENE_LOAD_DONE",
          SEND_EXIT_GAME_SERVER: "SEND_EXIT_GAME_SERVER",
          CONNECT_MASTER: "CONNECT_MASTER",
          CONNECT_GAME: "CONNECT_GAME",
          REMOVE_PERSIST_NODE: "REMOVE_PERSIST_NODE",
          ON_SCREEN_RESIZE: "ON_SCREEN_RESIZE",
          FISH_LOG: "FISH_LOG",
          EXIT_GAME: "EXIT_GAME",
          LOADING_TRANSITION: "LOADING_TRANSITION",
          NETWORK_STATUS_INFO: "NETWORK_STATUS_INFO",
          BEFORE_LOAD_SCENE: "BEFORE_LOAD_SCENE",
          SET_REFERENCE_DATA: "SET_REFERENCE_DATA"
        },
        POPUP: {
          CLOSE_ALL: "CLOSE_ALL",
          UPDATE_BOT_SETTING: "UPDATE_BOT_SETTING",
          GET_BOT_SETTING: "GET_BOT_SETTING",
          SET_BOT_SETTING: "SET_BOT_SETTING",
          POPUP_PROMPT: "POPUP_PROMPT",
          POPUP_SETTING: "POPUP_SETTING",
          POPUP_INFO: "POPUP_INFO",
          POPUP_TUTORIAL: "POPUP_TUTORIAL",
          POPUP_JACKPOT_HISTORY: "POPUP_JACKPOT_HISTORY",
          POPUP_EVENT_INFO: "POPUP_EVENT_INFO",
          CHECK_SHOW_POPUP_EVENT: "CHECK_SHOW_POPUP_EVENT",
          CLOSE_TOP_POPUP: "CLOSE_TOP_POPUP"
        },
        SOUND: {
          SOUND_EFFECT_ENABLE: "SOUND_EFFECT_ENABLE",
          SOUND_BGM_ENABLE: "SOUND_BGM_ENABLE",
          RESUME_SOUND_BACKGROUND: "RESUME_SOUND_BACKGROUND",
          PLAY_SOUND_BACKGROUND: "PLAY_SOUND_BACKGROUND",
          STOP_ALL: "STOP_ALL",
          CLICK: "CLICK",
          GUN_FIRE: "GUN_FIRE",
          EFFECT_GOLD: "EFFECT_GOLD",
          EFFECT_CATCH: "EFFECT_CATCH",
          EFFECT_CATCH_BIGFISH: "EFFECT_CATCH_BIGFISH",
          EFFECT_BOMB: "EFFECT_BOMB",
          BIG_WIN: "BIG_WIN",
          MEGA_WIN: "MEGA_WIN",
          SUPER_WIN: "SUPER_WIN",
          FIRE_LASER: "FIRE_LASER",
          MINIBOSS_DEAD: "MINIBOSS_DEAD",
          MINIBOSS_HIT: "MINIBOSS_HIT",
          DRAGON_SCREAM: "DRAGON_SCREAM",
          DRAGON_DIE: "DRAGON_DIE",
          BALL_TRAY_SHOW: "BALL_TRAY_SHOW",
          BALL_TRAY_DRAW: "BALL_TRAY_DRAW",
          COLLECT_BALL: "COLLECT_BALL",
          DRAGON_APPEAR: "SOUND_DRAGON_APPEAR",
          RESET_VOLUME: "RESET_VOLUME",
          UPDATE_MUSIC_VOL: "UPDATE_MUSIC_VOL",
          UPDATE_EFFECT_VOL: "UPDATE_EFFECT_VOL",
          DRAGON_BIG_WIN: "DRAGON_BIG_WIN",
          STOP_ALL_AUDIO: "STOP_ALL_AUDIO",
          PLAY_EFFECT_JACKPOT_COIN: "PLAY_EFFECT_JACKPOT_COIN",
          STOP_EFFECT_JACKPOT_COIN: "STOP_EFFECT_JACKPOT_COIN",
          DRAGON_HIT_BALL: "DRAGON_HIT_BALL",
          DRAGON_BALL_REWARD: "DRAGON_BALL_REWARD",
          DRAGON_BALL_HIDE: "DRAGON_BALL_HIDE",
          MAIN_BGM: "MAIN_BGM",
          LOBBY_BGM: "LOBBY_BGM",
          MINIBOSS_BGM: "MINIBOSS_BGM",
          DRAGON_BGM: "DRAGON_BGM",
          CLICK_BET: "CLICK_BET",
          EVENT_JOIN_GAME: "EVENT_JOIN_GAME",
          EFFECT_GET_ITEM_FREEZE: "EFFECT_GET_ITEM_FREEZE",
          EFFECT_GET_ITEM_LASER: "EFFECT_GET_ITEM_LASER",
          PAUSE_OR_RESUME_SOUND_WIN: "PAUSE_OR_RESUME_SOUND_WIN",
          STOP_BIG_WIN: "STOP_SOUND_BIG_WIN"
        },
        GAME_LAYER: {
          UPDATE_TABLE_ID: "UPDATE_TABLE_ID",
          ON_ENTER_GAME_ROOM: "GAME_LAYER_ON_ENTER_GAME_ROOM",
          ON_PLAYER_FIRE: "ON_PLAYER_FIRE",
          CREATE_FISH: "GAME_LAYER_CREATE_FISH",
          CREATE_FISH_GROUP: "GAME_LAYER_CREATE_FISH_GROUP",
          RESUME_FISH_GROUP: "GAME_LAYER_RESUME_FISH_GROUP",
          BULLET_COLLIDE_FISH: "GAME_LAYER_BULLET_COLLIDE_FISH",
          SEND_GUN_FIRE: "SEND_GUN_FIRE",
          SEND_FIRE_LASER: "SEND_FIRE_LASER",
          SEND_FIRE_DRILL: "SEND_FIRE_DRILL",
          PLAY_LASER: "PLAY_LASER",
          CREATE_BULLET: "GAME_LAYER_CREATE_BULLET",
          CATCH_FISH: "CATCH_FISH",
          CHOOSE_FISH_BY_POINT: "CHOOSE_FISH_BY_POINT",
          ON_SEND_FIRE: "ON_SEND_FIRE",
          REMOVE_FISH: "REMOVE_FISH",
          FREEZE_FISH: "FREEZE_FISH",
          UPDATE_LOCK_FISH_IMAGE: "UPDATE_LOCK_FISH_IMAGE",
          UPDATE_ROOM_DATA: "GAME_LAYER_UPDATE_ROOM_DATA",
          ON_OTHER_PLAYER_FIRE: "ON_OTHER_PLAYER_FIRE",
          FREEZE_EFFECT_ITEM: "FREEZE_EFFECT_ITEM",
          FREEZE_ADD_ITEM: "FREEZE_ADD_ITEM",
          SEND_ACTIVE_FREEZE_GUN: "SEND_ACTIVE_FREEZE_GUN",
          UPDATE_LIST_ITEM: "UPDATE_LIST_ITEM",
          ON_ACTIVE_FREEZE_GUN: "ON_ACTIVE_FREEZE_GUN",
          ON_STOP_FREEZE_GUN: "ON_STOP_FREEZE_GUN",
          GAME_CHANGE_ROUND: "GAME_CHANGE_ROUND",
          SHOW_JACKPOT_INFO: "SHOW_JACKPOT_INFO",
          INTERACTABLE_HUD: "INTERACTABLE_HUD",
          CATCH_FISH_BY_SKILL: "GAME_LAYER_CATCH_FISH_BY_SKILL",
          MOVE_OUT_ALL_FISHES: "MOVE_OUT_ALL_FISHES",
          OFF_ALL_TARGET: "OFF_ALL_TARGET",
          GAME_UPDATE_SKILL: "GAME_UPDATE_SKILL",
          INIT_BUBBLE: "INIT_BUBBLE",
          CHANGE_BUBBLE: "CHANGE_BUBBLE",
          PAUSE_AUTO_FIRE: "PAUSE_AUTO_FIRE",
          RESUME_AUTO_FIRE: "RESUME_AUTO_FIRE",
          RECEIVE_LASER_GUN: "RECEIVE_LASER_GUN",
          RESUME_DRILL_GUN: "RESUME_DRILL_GUN",
          BLOCK_ALL_BUTTON_WHEN_REFRESH: "BLOCK_ALL_BUTTON_WHEN_REFRESH",
          ON_AFTER_INIT_PLAYER_LIST: "ON_AFTER_INIT_PLAYER_LIST",
          RESUME_OLD_TARGET: "RESUME_OLD_TARGET",
          UPDATE_JACKPOT_INFO: "GAME_LAYER_UPDATE_JACKPOT_INFO",
          ON_PLAY_NETFX: "ON_PLAY_NETFX",
          UPDATE_EVENT_TRAY: "UPDATE_EVENT_TRAY",
          UPDATE_TOTAL_FREEZE_SKILL: "UPDATE_TOTAL_FREEZE_SKILL",
          DROP_GUN_SKILL: "DROP_GUN_SKILL",
          ON_SEND_FIRE_SKILL: "ON_SEND_FIRE_SKILL"
        },
        FISH_LAYER: {
          CATCH_FISH_BY_SKILL: "FISH_LAYER_CATCH_FISH_BY_SKILL",
          BOSS_ON_GAME: "FISH_LAYER_BOSS_ON_GAME"
        },
        DRAGON: {
          WARNING: "GAME_DRAGON_WARNING",
          ON_END: "GAME_DRAGON_END",
          ON_BALL_DROPPED: "GAME_DRAGON_ON_BALL_DROPPED",
          DROP_BALL: "GAME_DRAGON_DROP_BALL",
          SMALL_EXPLOSION: "DRAGON_DIE_SMALL_EXPLOSION",
          BIG_EXPLOSION: "DRAGON_DIE_BIG_EXPLOSION",
          DONE_BALL_DROP: "DRAGON_BALL_DROP_DONE",
          DONE_JACKPOT_STAR: "DRAGON_PLAY_JACKPOT_STAR_DONE",
          SHOW_JACKPOT_WINAMOUNT: "DRAGON_SHOW_JACKPOT_CUTSCENE",
          BALL_ENTER_BIGWIN_WHEEL: "DRAGON_BALL_ENTER_BIGWIN",
          DONE_PLAYER_BIGWIN: "DRAGON_DONE_PLAYER_BIGWIN",
          DONE_ALL_BIGWIN: "DRAGON_DONE_ALL_BIGWIN",
          ADD_BALL_TO_PLAYER: "DRAGON_ADD_BALL_TO_PLAYER",
          JACKPOT_WINAMOUNT_POPUP_CLOSE: "DRAGON_JACKPOT_WINAMOUNT_POPUP_CLOSE",
          CREATE: "DRAGON_CREATE",
          PLAY_DRAGON_BALL_JACKPOT: "PLAY_DRAGON_BALL_JACKPOT"
        },
        LOBBY_LAYER: {
          ON_SHOW_LOBBY_LAYER: "ON_SHOW_LOBBY_LAYER",
          UPDATE_LOBBY_INFO: "UPDATE_LOBBY_INFO",
          UPDATE_LOBBY_WALLET: "UPDATE_LOBBY_WALLET",
          LOBBY_GET_ROOM_INFO: "LOBBY_GET_ROOM_INFO",
          LOBBY_UPDATE_VIP_LEVEL: "LOBBY_UPDATE_VIP_LEVEL"
        },
        PLAYER_LAYER: {
          UPDATE_LIST_PLAYER: "UPDATE_LIST_PLAYER",
          PLAYER_JOIN_BOARD: "PLAYER_JOIN_BOARD",
          PLAYER_LEAVE_BOARD: "PLAYER_LEAVE_BOARD",
          STOP_LOCK_FISH: "STOP_LOCK_FISH",
          CHANGE_LOCK_FISH: "CHANGE_LOCK_FISH",
          START_LOCK_FISH: "START_LOCK_FISH",
          FREEZE_EFFECT: "FREEZE_EFFECT",
          CHANGE_GUN_LASER: "CHANGE_GUN_LASER",
          GAME_UPDATE_WALLET: "GAME_UPDATE_WALLET",
          HIDE_IS_ME: "HIDE_IS_ME",
          SHOW_POPUP_NO_MONEY: "PLAYER_SHOW_POPUP_NO_MONEY",
          REMOVE_BALL: "REMOVE_BALL",
          SEND_FIRE_SKILL: "PLAYER_SEND_FIRE_SKILL",
          PLAYER_UPDATE_VIP_LEVEL: "PLAYER_UPDATE_VIP_LEVEL",
          CHECK_NEXT_GUN_SKILL: "PLAYER_CHECK_NEXT_GUN_SKILL",
          CHANGE_GUN_SKILL: "CHANGE_GUN_SKILL",
          HIDE_GUN_SKILL: "HIDE_GUN_SKILL"
        },
        EVENT_TRAY_LAYER: {
          RESET_EVENT_TRAY: "RESET_EVENT_TRAY"
        },
        // SKILL_LAYER : {
        //     RESET_BUTTON_PANEL              :               "RESET_BUTTON_PANEL"
        // },
        //
        EFFECT_LAYER: {
          REMOVE_EVENT_EFFECT_PLAYER: "REMOVE_EVENT_EFFECT_PLAYER",
          ON_PLAY_NETFX: "ON_PLAY_NETFX",
          PLAY_BIG_WIN_EFFECT: "PLAY_BIG_WIN_EFFECT",
          PLAY_WAVE_TRANSITION: "PLAY_WAVE_TRANSITION",
          SHOW_NOTIFY_LOCK_FISH: "SHOW_NOTIFY_LOCK_FISH",
          HIDE_NOTIFY_LOCK_FISH: "HIDE_NOTIFY_LOCK_FISH",
          LUCKY_EFFECT_FISH: "LUCKY_EFFECT_FISH",
          PLAY_REWARD_EFFECT: "PLAY_REWARD_EFFECT",
          PLAY_LUCKY_EFFECT_DONE: "PLAY_LUCKY_EFFECT_DONE",
          CLEAR_DROP_GUN_LASER: "CLEAR_DROP_GUN_LASER",
          PLAY_FISH_GROUP_TRANSITION: "PLAY_FISH_GROUP_TRANSITION",
          CHANGE_BUBBLE: "CHANGE_BUBBLE",
          DROP_GUN_LASER: "DROP_GUN_LASER",
          MINIBOSS_SMASH: "MINIBOSS_SMASH",
          MINIBOSS_DROP_ITEM: "MINIBOSS_DROP_ITEM",
          MINIBOSS_CRITICAL: "MINIBOSS_CRITICAL",
          MINIBOSS_DROP_GEM: "MINIBOSS_DROP_GEM",
          MINIBOSS_DROP_FIN: "MINIBOSS_DROP_FIN",
          TRIGGER_BOMB: "TRIGGER_BOMB",
          ADD_ANIM_TO_QUEUE_ANIM: "EFFECT_LAYER_ADD_ANIM_TO_QUEUE_ANIM",
          CHECK_QUEUE_ANIM: "EFFECT_LAYER_CHECK_QUEUE_ANIM",
          PLAY_EFFECT_EVENT_WIN: "PLAY_EFFECT_EVENT_WIN"
        },
        WALLET: {
          ADD_TO_DISPLAY: "WALLET_ADD_TO_DISPLAY",
          ADD_GOLD_REWARD: "WALLET_ADD_GOLD_REWARD"
        },
        CUT_SCENE: {
          SHOW_CUT_SCENE: "SHOW_CUT_SCENE",
          HIDE_CUT_SCENE: "HIDE_CUT_SCENE",
          HIDE_ALL_CUT_SCENE: "HIDE_ALL_CUT_SCENE"
        },
        EVENT: {
          UPDATE_EVENT_STATUS: "UPDATE_EVENT_STATUS",
          EVENT_COMING: "EVENT_COMING",
          EVENT_PLAYING: "EVENT_PLAYING",
          EVENT_END: "EVENT_END",
          EVENT_IDLE: "EVENT_IDLE",
          SEND_GET_EVENT_INFO: "SEND_GET_EVENT_INFO"
        }
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfBaseFish.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfBaseConfig.ts', './gfDataStore.ts', './gfReferenceManager.ts', './gfUtilities.ts', './gfActionHelper.ts', './gfMoveByThreePoints.ts', './gfNode.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, BoxCollider2D, v2, tween, v3, Vec3, misc, UITransform, Tween, Color, gfBaseEvents, gfEventEmitter, gfBaseConfig, gfDataStore, gfReferenceManager, convertFishCoordinateSystem, v2Distance, getPointBetweenTwoPointByPercent, getRotation, isPointInScreen, SetZIndex, fadeOut, delay, scaleTo, call, rotateTo, gfMoveByThreePoints, gfNode;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      BoxCollider2D = module.BoxCollider2D;
      v2 = module.v2;
      tween = module.tween;
      v3 = module.v3;
      Vec3 = module.Vec3;
      misc = module.misc;
      UITransform = module.UITransform;
      Tween = module.Tween;
      Color = module.Color;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      convertFishCoordinateSystem = module.convertFishCoordinateSystem;
      v2Distance = module.v2Distance;
      getPointBetweenTwoPointByPercent = module.getPointBetweenTwoPointByPercent;
      getRotation = module.getRotation;
      isPointInScreen = module.isPointInScreen;
      SetZIndex = module.SetZIndex;
    }, function (module) {
      fadeOut = module.fadeOut;
      delay = module.delay;
      scaleTo = module.scaleTo;
      call = module.call;
      rotateTo = module.rotateTo;
    }, function (module) {
      gfMoveByThreePoints = module.default;
    }, function (module) {
      gfNode = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "ff2e0CgJnFIOIxIH4G1Rti3", "gfBaseFish", undefined);

      var ccclass = _decorator.ccclass;
      var gfBaseFish = exports('gfBaseFish', (_dec = ccclass('gfBaseFish'), _dec(_class = /*#__PURE__*/function (_gfNode) {
        _inheritsLoose(gfBaseFish, _gfNode);

        function gfBaseFish() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfNode.call.apply(_gfNode, [this].concat(args)) || this;
          _this.NORMAL_COLOR = new Color(255, 255, 255, 255);
          _this.HIT_COLOR = new Color(230, 30, 30, 255);
          _this._maxWidth = 0;
          _this._maxHeight = 0;
          _this._offsetX = 0;
          _this._offsetY = 0;
          _this._FishID = 0;
          _this._FishKind = 0;
          _this._buildTick = 0;
          _this._isFishGroup = false;
          _this._timeLost = 0;
          _this._isDie = false;
          _this._isOutScreen = true;
          _this._skipRotate = false;
          _this._lastPos = null;
          _this._targetPoint = v2(0, 0);
          _this._visibleSize = v2(0, 0);
          _this._hitTime = [];
          _this._dataCatchFish = null;
          _this._moveOutAction = null;
          _this._skipFlipY = false;
          _this.speed = 100;
          _this.moveAction = void 0;
          _this.zIndex = 0;
          return _this;
        }

        var _proto = gfBaseFish.prototype;

        _proto.onLoad = function onLoad() {};

        _proto.initAssets = function initAssets(config) {
          this.speed = config.speed;
          this.setUpBoxColliders(config.BoxCollider);
          this.updateZIndex(config.zIndex);
          this._skipRotate = !!config.skipRotate;

          if (config.targetPoint) {
            this._targetPoint = config.targetPoint;
          }

          this.updateVisibleSize(config.visibleSize);
        };

        _proto.setUpBoxColliders = function setUpBoxColliders(boxes) {
          var _this2 = this;

          var fishColliderBoxes = this.node.getComponents(BoxCollider2D);

          for (var i = 0; i < fishColliderBoxes.length; ++i) {
            fishColliderBoxes[i].enabled = false;
          }

          if (boxes.constructor === Array) {
            boxes.forEach(function (configBox, i) {
              var fishBox = fishColliderBoxes[i];

              if (!fishBox) {
                fishBox = _this2.node.addComponent(BoxCollider2D);
                fishBox.group = fishColliderBoxes[0].group;
              }

              _this2.setBoxCollider(fishBox, configBox);
            });
          } else {
            this.setBoxCollider(fishColliderBoxes[0], boxes);
          }
        };

        _proto.updateVisibleSize = function updateVisibleSize(visibleSize) {
          this._maxWidth = this.node.getComponent(BoxCollider2D).size.width * this.node.scale.x;
          this._maxHeight = this.node.getComponent(BoxCollider2D).size.height * this.node.scale.y;
          this._offsetX = this.node.getComponent(BoxCollider2D).offset.x * this.node.scale.x;
          this._offsetY = this.node.getComponent(BoxCollider2D).offset.y * this.node.scale.y;

          if (visibleSize) {
            this._visibleSize = visibleSize;
          } else {
            var x = 2 * this._maxWidth + this._offsetX;
            var y = 2 * this._maxHeight + this._offsetY;
            this._visibleSize = v2(x, y);
          }
        };

        _proto.getVisibleSize = function getVisibleSize() {
          return this._visibleSize;
        };

        _proto.setBoxCollider = function setBoxCollider(box, config) {
          box.enabled = true;
          box.offset.x = config.x;
          box.offset.y = config.y;
          box.size.width = config.width;
          box.size.height = config.height;
        };

        _proto.initFishData = function initFishData(data) {
          this._FishID = data.FishID;
          this._FishKind = data.FishKind;
          this._isFishGroup = !!data.isFishGroup;
          this._skipFlipY = data.skipFlipY ? data.skipFlipY : false;
          this._isDie = false;
          this._moveOutAction = data.moveOutAction;
          this.updateZIndex(data.zIndex);

          if (data.Position) {
            this._buildTick = data.BuildTick;
            this._timeLost = Math.max(0, (gfDataStore.instance.getTime() - this._buildTick) / 1000);
            this.moveByPoints(data.Position, data.isResume);
          }
        };

        _proto.moveByPoints = function moveByPoints(points, isResume) {
          var _this3 = this;

          this.moveAction = tween(this.node);
          var moveTime = 0;

          if (gfDataStore.instance.getSelfDeskStation() > 1) {
            convertFishCoordinateSystem(points);
          }

          var p1 = v2(points[0].PosX, points[0].PosY);
          var p2 = v2(points[1].PosX, points[1].PosY);

          if (points.length === 2) {
            moveTime = v2Distance(p1, p2) / this.speed;

            if (isResume) {
              var fPoint = getPointBetweenTwoPointByPercent(p1, p2, this._timeLost / moveTime);
              this.node.setPosition(v3(fPoint.x, fPoint.y, 0));
            } else {
              this.node.setPosition(v3(p1.x, p1.y, 0));
            }

            moveTime = Math.max(moveTime - this._timeLost, 0);
            this.moveAction.then(tween().to(moveTime, {
              position: v3(p2.x, p2.y, 0)
            }));
          } else if (points.length === 3) {
            var p3 = v2(points[2].PosX, points[2].PosY);
            this.node.setPosition(v3(p1.x, p1.y, 0));
            var config = {
              speed: this.speed,
              points: [p1, p2, p3],
              timeSpent: this._timeLost,
              isResume: isResume
            };
            this.moveAction.then(gfMoveByThreePoints(config));
          }

          this.moveAction.call(function () {
            _this3.onDie();
          });
          this.moveAction.start();
        };

        _proto.update = function update(dt) {
          if (this._isDie) {
            return;
          }

          this.updateAngle();
          this.updateOutScreen();
        };

        _proto.updateAngle = function updateAngle() {
          if (this._lastPos) {
            var curP = this.node.getPosition();
            var baseScaleX = Math.abs(this.node.scale.x);

            if (this._lastPos.x !== curP.x || this._lastPos.y !== curP.y) {
              if (this._skipRotate) {
                this.node.setScale(new Vec3(this._lastPos.x > curP.x ? -baseScaleX : baseScaleX, this.node.scale.y, this.node.scale.z));
              } else {
                var angle = getRotation(curP, this._lastPos);
                this.updateFlipY(angle);
                this.node.angle = angle;
              }
            }
          }

          this._lastPos = this.node.getPosition();
        };

        _proto.updateFlipY = function updateFlipY(angle) {
          if (this._skipFlipY) return;
          var baseScaleY = Math.abs(this.node.scale.y);
          this.node.setScale(this.node.scale.x, angle > 90 || angle < -90 ? -baseScaleY : baseScaleY, this.node.scale.z);
        };

        _proto.updateOutScreen = function updateOutScreen() {
          if (isPointInScreen(this.node.getPosition())) {
            this._isOutScreen = false;
            this.setOpacity(255);
          } else {
            var wLeftCenter = this.convertToRelativePoint(v2(-this._maxWidth / 2 + this._offsetX, 0));
            var wRightCenter = this.convertToRelativePoint(v2(this._maxWidth / 2 + this._offsetX, 0));
            this._isOutScreen = !(isPointInScreen(wLeftCenter) || isPointInScreen(wRightCenter));

            if (this._isOutScreen) {
              this.updateOpacity();
            } else {
              this.setOpacity(255);
            }
          }
        };

        _proto.convertToRelativePoint = function convertToRelativePoint(point) {
          var radian = misc.degreesToRadians(this.node.angle);
          var x = this.node.position.x + point.x * Math.cos(radian) - point.y * Math.sin(radian);
          var y = this.node.position.y + point.x * Math.sin(radian) + point.y * Math.cos(radian);
          return v2(x, y);
        };

        _proto.updateOpacity = function updateOpacity() {
          if (this._isDie) return;
          var leftPoint = v2(-this._visibleSize.x / 2, 0);
          var rightPoint = v2(this._visibleSize.x / 2, 0);
          var wLeftCenter = this.convertToRelativePoint(leftPoint);
          var wRightCenter = this.convertToRelativePoint(rightPoint);
          var outScreen = !(isPointInScreen(wLeftCenter, 100) || isPointInScreen(wRightCenter, 100));
          this.setOpacity(outScreen ? 0 : 255);
        };

        _proto.updateZIndex = function updateZIndex(zIndex) {
          if (zIndex != undefined) {
            this.zIndex = zIndex;
            SetZIndex(this.node, zIndex);
          }
        };

        _proto.onDie = function onDie() {
          this._isDie = true;
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.REMOVE_FISH, this._FishID);
          this.returnPool();
        };

        _proto.resetColor = function resetColor() {};

        _proto.setColor = function setColor(color) {};

        _proto.onHit = function onHit(data) {
          var _this4 = this;

          if (data) {
            this.triggerHit(data);
          }

          this.setColor(this.HIT_COLOR);
          tween(this.node).delay(0.1).call(function () {
            _this4.resetColor();
          }).start();
        };

        _proto.onCatch = function onCatch(data) {
          var _this5 = this;

          if (data.isCheckedFakeBullet === undefined) {
            if (this.needFakeBullet(data)) {
              this.createFakeBullet(data);
              return;
            }
          }

          this.onPlayEffectWinInCatchFish(data);
          this.stopAllActions();
          this.resetColor();
          this._isDie = true;
          this.playEffectDie();
          this.moveAction = tween(this.node);

          if (this._FishKind === gfBaseConfig.instance.FISH_KIND.BOMB) {
            gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.TRIGGER_BOMB, this.getLockPositionByWorldSpace());
            this.moveAction.then(fadeOut(0.1));
          } else if (data.SkillID > 0) {
            var skillInfo = {
              SkillID: data.SkillID,
              BulletRemain: 1
            };
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.DROP_GUN_SKILL, {
              DeskStation: data.DeskStation,
              skillInfo: skillInfo
            });

            if (data.SkillID === gfBaseConfig.instance.SkillConfig.LASER) {
              gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.DROP_GUN_LASER, {
                fishPos: this.node.getComponent(UITransform).convertToWorldSpaceAR(new Vec3(0, 0, 0)),
                deskStation: data.DeskStation,
                skillInfo: skillInfo
              });
              gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.RECEIVE_LASER_GUN, data.DeskStation);
            }

            this.moveAction.then(fadeOut(0.1));
            this.moveAction.then(delay(0.5));
            this.moveAction.then(scaleTo(0.2, 0));
          } else {
            this.moveAction.then(delay(1));
            this.moveAction.then(fadeOut(0.5));
          }

          this.moveAction.then(call(function () {
            _this5.onDie();
          }));
          this.moveAction.start();
        };

        _proto.getTargetPoint = function getTargetPoint() {
          return this._targetPoint;
        };

        _proto.getLockPositionByNodeSpace = function getLockPositionByNodeSpace(node) {
          return node.getComponent(UITransform).convertToNodeSpaceAR(this.getLockPositionByWorldSpace());
        };

        _proto.getLockPositionByWorldSpace = function getLockPositionByWorldSpace() {
          return this.node.getComponent(UITransform).convertToWorldSpaceAR(v3(this._targetPoint.x, this._targetPoint.y, 0));
        };

        _proto.onPlayEffectWinInCatchFish = function onPlayEffectWinInCatchFish(data) {
          gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.PLAY_REWARD_EFFECT, {
            data: data,
            fishKind: this._FishKind,
            fishPos: this.getLockPositionByWorldSpace()
          });
        };

        _proto.stopAllActions = function stopAllActions() {
          Tween.stopAllByTarget(this.node);
        };

        _proto.moveOut = function moveOut(time) {
          var _this6 = this;

          if (this._isDie) return;

          if (this._isOutScreen) {
            this.onDie();
            return;
          }

          this.stopAllActions();
          this.moveAction = tween(this.node);
          var moveOutActions = [];
          this.changeAnimationSpeed(2.5);

          if (this._moveOutAction) {
            moveOutActions.push(this._moveOutAction);
          } else {
            var AppSize = gfBaseConfig.instance.AppSize;
            var yPos = (this.node.position.y > AppSize.Height / 2 ? AppSize.Height + 400 : -400) - this.node.position.y;
            var angle = this.node.position.y > AppSize.Height / 2 ? -90 : 90;

            if (this._skipRotate) {
              this.moveAction.then(delay(0.325));
            } else {
              this.moveAction.then(rotateTo(0.325, angle));
            }

            this.moveAction.then(tween().by(1.675, {
              position: v3(0, yPos, 0)
            }, {
              easing: 'sineOut'
            }));
          }

          this.moveAction.then(call(function () {
            _this6.onDie();
          }));
          this.moveAction.start();
        };

        _proto.setDie = function setDie(isDie) {
          this._isDie = isDie;
        };

        _proto.checkDie = function checkDie() {
          return this._isDie;
        };

        _proto.isAvailable = function isAvailable() {
          return !this.checkDie() && !this.checkOutScene();
        };

        _proto.getKind = function getKind() {
          return this._FishKind;
        };

        _proto.getZIndex = function getZIndex() {
          return this.zIndex;
        };

        _proto.getId = function getId() {
          return this._FishID;
        };

        _proto.checkOutScene = function checkOutScene() {
          return this._isOutScreen;
        };

        _proto.checkFishGroup = function checkFishGroup() {
          return this._isFishGroup;
        };

        _proto.changeAnimationSpeed = function changeAnimationSpeed(x) {};

        _proto.resetAnimationSpeed = function resetAnimationSpeed() {};

        _proto.playEffectDie = function playEffectDie() {};

        _proto.needFakeBullet = function needFakeBullet(data) {
          var player = gfReferenceManager.instance.getPlayerByDeskStation(data.DeskStation);
          if (!player) return false;

          if (data.DeskStation !== gfDataStore.instance.getSelfDeskStation() && !data.isSkill && !this._isDie && !data.SkillID && !player.isHoldingSkillGun()) {
            return this._hitTime[data.DeskStation] ? gfDataStore.instance.getTime() > this._hitTime[data.DeskStation] + 1000 : true;
          }

          return false;
        };

        _proto.createFakeBullet = function createFakeBullet(data) {
          var _this7 = this;

          this._dataCatchFish = data;
          this.scheduleOnce(function () {
            if (_this7.needFakeBullet(data)) {
              var bulletData = {
                Angle: 0,
                LockedFishID: _this7._FishID,
                isBulletFake: true,
                DeskStation: data.DeskStation,
                BulletMultiple: data.BulletMultiple,
                FishID: data.FishID
              };
              gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.ON_PLAYER_FIRE, bulletData);
              gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.CREATE_BULLET, bulletData);
            }
          }, 1);
        };

        _proto.triggerHit = function triggerHit(data) {
          this._hitTime[data.DeskStation] = gfDataStore.instance.getTime();

          if (this._dataCatchFish && this._dataCatchFish.DeskStation === data.DeskStation) {
            this._dataCatchFish.isCheckedFakeBullet = true;
            this.onCatch(this._dataCatchFish);
            this._dataCatchFish = null;
          }
        };

        _proto.getListBox = function getListBox() {
          return this.getComponents(BoxCollider2D);
        } // Called whenever object is returned to Object Pool
        ;

        _proto.unuse = function unuse() {
          Tween.stopAllByTarget(this.node);
          this.node.active = false;
          this.setOpacity(0);
          this.node.scale = v3(1, 1, 1);
          this.unscheduleAllCallbacks();
          this.resetColor();
          this.resetAnimationSpeed();
          this.node.angle = 0;
          this._isDie = true;
          this._isOutScreen = true;
          this._FishID = null;
          this._moveOutAction = null;
          this._lastPos = null;
          this._targetPoint = v2(0, 0);
          this._hitTime.length = 0;
          this._dataCatchFish = null;
          this.moveAction = null;
        };

        return gfBaseFish;
      }(gfNode)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfBaseHistory.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './serviceRest.ts', './loadConfigAsync.ts', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfBaseCellHistory.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Prefab, CCString, UIOpacity, Button, Label, warn, instantiate, Component, apiObject, loadConfigAsync, gfBaseEvents, gfEventEmitter, GfBaseCellHistory;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Prefab = module.Prefab;
      CCString = module.CCString;
      UIOpacity = module.UIOpacity;
      Button = module.Button;
      Label = module.Label;
      warn = module.warn;
      instantiate = module.instantiate;
      Component = module.Component;
    }, function (module) {
      apiObject = module.default;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      GfBaseCellHistory = module.GfBaseCellHistory;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10;

      cclegacy._RF.push({}, "e805awNTAlKVppn+BPOs/M1", "gfBaseHistory", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfBaseHistory = exports('GfBaseHistory', (_dec = ccclass('GfBaseHistory'), _dec2 = property(Node), _dec3 = property(Prefab), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Node), _dec7 = property(Node), _dec8 = property(Node), _dec9 = property(CCString), _dec10 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfBaseHistory, _Component);

        function GfBaseHistory() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "table", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "cell", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "pageIndexView", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "itemPerPage", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "loading", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnBack", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnNext", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "noHistoryText", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "pagePrefix", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "errorMessage", _descriptor10, _assertThisInitialized(_this));

          _this._initialized = false;
          _this.currentPage = void 0;
          _this.totalPage = void 0;
          _this.jpPrefix = void 0;
          _this.gameId = void 0;
          _this.jpList = void 0;
          _this.url = void 0;
          return _this;
        }

        var _proto = GfBaseHistory.prototype;

        _proto.onLoad = function onLoad() {
          if (this._initialized) {
            return;
          }

          this.currentPage = 1;
          this.totalPage = 1;
          this.stopLoading();
          this.initTableCells(this.itemPerPage);
          this.noHistoryText.active = false;
          this.btnNext.on(Node.EventType.TOUCH_START, this.onNextPage.bind(this));
          this.btnNext.on(Node.EventType.TOUCH_END, this.cancelChangePage.bind(this));
          this.btnNext.on(Node.EventType.TOUCH_CANCEL, this.cancelChangePage.bind(this));
          this.btnNext.on(Node.EventType.MOUSE_LEAVE, this.cancelChangePage.bind(this));
          this.btnBack.on(Node.EventType.TOUCH_START, this.onPrevPage.bind(this));
          this.btnBack.on(Node.EventType.TOUCH_END, this.cancelChangePage.bind(this));
          this.btnBack.on(Node.EventType.TOUCH_CANCEL, this.cancelChangePage.bind(this));
          this.btnBack.on(Node.EventType.MOUSE_LEAVE, this.cancelChangePage.bind(this));
          this._initialized = true;
        };

        _proto.initData = function initData(data) {
          var gameId = data.gameId,
              jpList = data.jpList,
              jpPrefix = data.jpPrefix,
              url = data.url;
          this.gameId = gameId;
          this.jpList = jpList;
          this.jpPrefix = jpPrefix;
          this.url = url;
        };

        _proto.openPanel = function openPanel(data) {
          this.initData(data);
          this.node.active = true;
          this.node.getComponent(UIOpacity).opacity = 255;
          this.currentPage = 1;

          if (this.currentPage == 1) {
            this.btnBack.getComponent(Button).interactable = false;
            this.btnNext.getComponent(Button).interactable = false;
          }

          this.pageIndexView.getComponent(Label).string = this.pagePrefix + this.currentPage.toString();
          if (this.errorMessage) this.errorMessage.active = false;
          this.playLoading();
          this.requestDataPage(this.currentPage, this.itemPerPage, this.onRequestResponse.bind(this), this.requestErr.bind(this));
        };

        _proto.closePanel = function closePanel() {
          this.clearTableData();
        };

        _proto.playLoading = function playLoading() {
          this.noHistoryText.active = false;
          this.loading.active = true;
        };

        _proto.stopLoading = function stopLoading() {
          this.loading.active = false;
        };

        _proto.onNextPage = function onNextPage() {
          if (this.btnNext.getComponent(Button).interactable) {
            this.btnBack.getComponent(Button).interactable = false;
          }
        };

        _proto.onPrevPage = function onPrevPage() {
          if (this.btnBack.getComponent(Button).interactable) {
            this.btnNext.getComponent(Button).interactable = false;
          }
        };

        _proto.cancelChangePage = function cancelChangePage() {
          if (this.currentPage !== 1) this.btnBack.getComponent(Button).interactable = true;
          if (this.currentPage < this.totalPage) this.btnNext.getComponent(Button).interactable = true;
        };

        _proto.onNextButton = function onNextButton() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          this.btnNext.getComponent(Button).interactable = false;
          this.btnBack.getComponent(Button).interactable = false;
          this.currentPage += 1;
          this.playLoading();
          this.requestDataPage(this.currentPage, this.itemPerPage, this.onRequestResponse.bind(this), this.requestErr.bind(this));
        };

        _proto.onPreviousButton = function onPreviousButton() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          if (this.currentPage == 1) return;
          this.btnNext.getComponent(Button).interactable = false;
          this.btnBack.getComponent(Button).interactable = false;
          this.currentPage -= 1;
          this.playLoading();
          this.requestDataPage(this.currentPage, this.itemPerPage, this.onRequestResponse.bind(this), this.requestErr.bind(this));
        };

        _proto.requestDataPage = function requestDataPage(page, quantity, callback, callbackErr) {
          var from = (page - 1) * quantity;
          var requestParams = {
            serviceId: this.jpPrefix + this.gameId,
            from: from,
            size: quantity,
            type: this.jpList
          };
          if (this.errorMessage) this.errorMessage.active = false;
          this.requestHistory(requestParams, callback, callbackErr);
        };

        _proto.requestHistory = function requestHistory(requestParams, callback, callbackErr, headers) {
          if (requestParams === void 0) {
            requestParams = {};
          }

          if (headers === void 0) {
            headers = null;
          }

          if (!this.gameId) {
            warn("GameId has not been set");
            callback({});
            return;
          }

          var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
              API_URL = _loadConfigAsync$getC.API_URL;

          if (headers) {
            apiObject.getWithHeader({
              url: this.url,
              params: requestParams,
              callback: callback,
              callbackErr: callbackErr,
              headers: headers,
              apiUrl: API_URL
            });
          } else {
            apiObject.get({
              url: this.url,
              params: requestParams,
              callback: callback,
              callbackErr: callbackErr,
              apiUrl: API_URL
            });
          }
        };

        _proto.requestErr = function requestErr() {
          this.stopLoading();

          if (this.errorMessage) {
            this.errorMessage.active = true;
            this.clearTableData();
          }
        };

        _proto.onRequestResponse = function onRequestResponse(res) {
          this.noHistoryText.active = !!(res.error || Object.keys(res).length <= 0 || !res.data || res.data.length <= 0);

          if (res.total) {
            this.totalPage = Math.ceil(res.total / this.itemPerPage);
          }

          this.stopLoading();

          if (!res.error) {
            if (Object.keys(res).length > 0 && res.data && res.data.length > 0) {
              this.btnNext.getComponent(Button).interactable = true;
              this.btnBack.getComponent(Button).interactable = true;
              this.pageIndexView.getComponent(Label).string = this.currentPage.toString();
              this.updateTableData(res.data);

              if (this.currentPage == 1) {
                this.btnBack.getComponent(Button).interactable = false;
              }

              if (res.total <= this.currentPage * this.itemPerPage || res.data.length < this.itemPerPage) {
                this.btnNext.getComponent(Button).interactable = false;
                return;
              }
            } else {
              return;
            }
          }
        } // Table
        ;

        _proto.initTableCells = function initTableCells(itemPerPage) {
          for (var i = 0; i < itemPerPage; ++i) {
            var cell = instantiate(this.cell);
            cell.parent = this.table;
          }
        };

        _proto.updateTableData = function updateTableData(data) {
          this.table.children.forEach(function (child, index) {
            if (index < data.length) {
              child.getComponent(GfBaseCellHistory).updateData(data[index]);
              child.active = true;
            } else {
              child.active = false;
            }
          });
        };

        _proto.clearTableData = function clearTableData() {
          this.table.children.forEach(function (child) {
            return child.active = false;
          });
        };

        return GfBaseHistory;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "table", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "cell", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "pageIndexView", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "itemPerPage", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 7;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "loading", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "btnBack", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "btnNext", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "noHistoryText", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "pagePrefix", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "errorMessage", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfBigWinWheel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfEventEmitter.ts', './gfBaseEvents.ts', './gfBaseConfig.ts', './gfReferenceManager.ts', './gfUtilities.ts', './utils.ts', './gfActionHelper.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Label, sp, warn, sys, tween, v3, Component, gfEventEmitter, gfBaseEvents, gfBaseConfig, gfReferenceManager, formatCoin, removeEvents, setOpacity, getPostionInOtherNode, stopAllActions;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      sp = module.sp;
      warn = module.warn;
      sys = module.sys;
      tween = module.tween;
      v3 = module.v3;
      Component = module.Component;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      formatCoin = module.formatCoin;
      removeEvents = module.removeEvents;
    }, function (module) {
      setOpacity = module.setOpacity;
      getPostionInOtherNode = module.getPostionInOtherNode;
    }, function (module) {
      stopAllActions = module.stopAllActions;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "79331f9p6hCPr9MJNRIF8dW", "gfBigWinWheel", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfBigWinWheel = exports('gfBigWinWheel', (_dec = ccclass('gfBigWinWheel'), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property(sp.Skeleton), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfBigWinWheel, _Component);

        function gfBigWinWheel() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "txtCoin", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "txtCoinOther", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "spine", _descriptor3, _assertThisInitialized(_this));

          _this._skinName = void 0;
          _this.tweenCoin = void 0;
          _this.tweenHide = void 0;
          _this.skinName = {
            win: "",
            bigWin: "",
            superWin: "",
            megaWin: ""
          };
          _this._coinValue = 0;
          _this._winValue = 0;
          _this._tweenRL = null;
          _this._isShowing = false;
          _this._duration = 2.5;
          _this._ballWaiting = 0;
          _this._isDragonBigWin = false;
          _this._currentSkinName = '';
          _this._existBoard = false;
          _this.lblCoin = void 0;
          _this._originPos = null;
          _this._animShow = "AllAppear";
          _this._animIdle = "AllIdle";
          _this._animHide = "AllDisappear";
          _this.index = -1;
          return _this;
        }

        var _proto = gfBigWinWheel.prototype;

        _proto.onLoad = function onLoad() {
          this.lblCoin = null;
          this._originPos = this.node.getPosition();
          this.initEvent();
          this.setupSkinBigWinWheel();
        };

        _proto.setupSkinBigWinWheel = function setupSkinBigWinWheel() {
          this.skinName.win = "Thang";
          this.skinName.bigWin = "Thang Lon";
          this.skinName.superWin = "Thang Cuc Lon";
          this.skinName.megaWin = "Thang Sieu Lon";
        };

        _proto.initEvent = function initEvent() {//@TODO: split dragon ball to dedicated games
        };

        _proto.showAnimation = function showAnimation(data) {
          if (!this.node.active) {
            this.show(data);
          } else {
            this.updateData(data);
          }
        };

        _proto.show = function show(data) {
          var gold = data.gold,
              bet = data.bet,
              isMe = data.isMe;

          if (!gold) {
            warn('BigWin without Gold!!!');
            return;
          }

          this.node.active = true;
          this.reset();
          this.lblCoin = isMe ? this.txtCoin : this.txtCoinOther;
          this.lblCoin.node.active = true;
          this._winValue += gold;

          this._tweenCoin({
            winAmount: this._winValue,
            isMe: isMe
          });

          var skinName = this.getSkinByBet(bet);

          this._playSpinAnim(skinName);
        };

        _proto.reset = function reset() {
          this.resetLabels();
          this._ballWaiting = 0;
          stopAllActions(this.node);
          if (!this._originPos) this._originPos = this.node.getPosition();
          this.node.position = this._originPos;
          this.node.setScale(1, 1);
          setOpacity(this.node, 255);
        };

        _proto.resetLabels = function resetLabels() {
          var arr = [this.txtCoin, this.txtCoinOther];
          arr.forEach(function (item) {
            stopAllActions(item.node);
            item.node.angle = 0;
            item.node.setScale(1, 1);
            item.node.active = false;
            item.string = "";
          });
          arr.length = 0;
        };

        _proto.getSkinByBet = function getSkinByBet(bet) {
          var skinName = this.skinName.bigWin;

          if (this._winValue >= bet * gfBaseConfig.instance.BIG_WIN_RATIO.SUPER) {
            skinName = this.skinName.megaWin;
          } else if (this._winValue >= bet * gfBaseConfig.instance.BIG_WIN_RATIO.HUGE) {
            skinName = this.skinName.superWin;
          }

          return skinName;
        };

        _proto._playSpinAnim = function _playSpinAnim(skinName) {
          var _this2 = this;

          this._currentSkinName = skinName;
          this.spine.setSkin(skinName);

          if (sys.isNative) {
            this.spine.setToSetupPose();
          }

          this.spine.setAnimation(0, this._animShow, false);
          this.spine.addAnimation(0, this._animIdle, true);
          tween(this.node).delay(0.5).call(function () {
            skinName === _this2.skinName.megaWin ? gfEventEmitter.instance.emit(gfBaseEvents.SOUND.MEGA_WIN) : gfEventEmitter.instance.emit(gfBaseEvents.SOUND.BIG_WIN);
          }).start();
        };

        _proto.updateData = function updateData(data) {
          var gold = data.gold,
              bet = data.bet,
              isMe = data.isMe;

          if (this.tweenCoin && !this.tweenHide) {
            if (!gold) {
              warn('BigWin without Gold!!!');
              return;
            }

            var skinName = this.getSkinByBet(bet);
            this._winValue += gold;

            if (skinName !== this._currentSkinName) {
              this._playSpinAnim(skinName);
            }

            this._tweenCoin({
              winAmount: this._winValue,
              isMe: isMe
            });
          } else {
            //closing
            this.show(data);
          }
        };

        _proto.onBallEnter = function onBallEnter() {
          this.node.active = true;

          var _ReferenceManager$ins = gfReferenceManager.instance.getPlayerByIndex(this.index),
              isMe = _ReferenceManager$ins.isMe;

          this.lblCoin = isMe ? this.txtCoin : this.txtCoinOther;

          this._resetTxtAngle();

          --this._ballWaiting;

          if (this._ballWaiting === 0) {
            this.spine.setAnimation(0, "RibbonAppear", false);
            this.spine.addAnimation(0, "AllIdle", true);

            this._tweenCoin({
              winAmount: this._winValue,
              isMe: isMe
            });

            gfEventEmitter.instance.emit(gfBaseEvents.DRAGON.DONE_PLAYER_BIGWIN);
          }
        };

        _proto.showDragonBalls = function showDragonBalls(_ref) {
          var winValue = _ref.winValue,
              ballCount = _ref.ballCount;
          this.node.active = true;

          if (this.tweenCoin) {
            this._coinValue = 0;
            this.tweenCoin.stop();
            var player = gfReferenceManager.instance.getPlayerByIndex(this.index);

            if (player.isMe) {
              player.addToDisplayWallet(this._winValue);
            }
          }

          var _ReferenceManager$ins2 = gfReferenceManager.instance.getPlayerByIndex(this.index),
              isMe = _ReferenceManager$ins2.isMe;

          this.lblCoin = isMe ? this.txtCoin : this.txtCoinOther;
          this.reset();
          this._ballWaiting = ballCount;
          this._isDragonBigWin = true;
          var skiName = ballCount > 5 ? this.skinName.megaWin : ballCount > 4 ? this.skinName.superWin : ballCount > 2 ? this.skinName.bigWin : this.skinName.win;
          this.spine.setSkin(skiName);

          if (sys.isNative) {
            this.spine.setToSetupPose();
          }

          this._winValue = winValue | 0;
          this.lblCoin.string = "";
          this.spine.setAnimation(0, "SpinnerAppear", false);
          this.spine.addAnimation(0, "SpinnerIdle", true);
        };

        _proto.showDragonBallsJackpot = function showDragonBallsJackpot(_ref2) {
          var winValue = _ref2.winValue;
          this.node.active = true;
          this.lblCoin = this.txtCoinOther;
          this.reset();
          this._skinName = this.skinName.megaWin;
          this.spine.setSkin(this.skinName.megaWin);

          if (sys.isNative) {
            this.spine.setToSetupPose();
          }

          this._winValue = winValue | 0;
          this.lblCoin.string = "";
          this.lblCoin.node.active = true;
          this.spine.setAnimation(0, this._animShow, false);
          this.spine.addAnimation(0, this._animIdle, true);

          this._tweenCoin({
            winAmount: this._winValue,
            isMe: false
          });
        };

        _proto._updateCoinWin = function _updateCoinWin() {
          this.lblCoin.string = formatCoin(this._coinValue);
          this.lblCoin.node.angle = 0;
        };

        _proto._tweenCoin = function _tweenCoin(data) {
          var _this3 = this;

          var winAmount = data.winAmount,
              isMe = data.isMe;
          var curCoin = this._coinValue;

          if (this.tweenCoin) {
            this.tweenCoin.stop();

            this._resetTxtAngle();
          }

          this.tweenCoin = tween(this).to(this._duration, null, {
            onUpdate: function onUpdate(target, ratio) {
              _this3.coinValue = curCoin + ratio * (winAmount - curCoin);
            }
          }).call(function () {
            if (isMe) {
              _this3._tweenLblCoin();
            }
          }).delay(1).call(function () {
            _this3.hideAnimation(true);
          });
          this.tweenCoin.start();
        };

        _proto._tweenLblCoin = function _tweenLblCoin() {
          this._tweenRL = tween(this.lblCoin.node).repeat(5, tween(this.lblCoin.node).to(0.25, {
            angle: -10
          }).to(0.25, {
            angle: 10
          }).start()).to(0.25, {
            angle: 0
          });

          this._tweenRL.start();
        };

        _proto._resetTxtAngle = function _resetTxtAngle() {
          this.txtCoinOther.node.angle = 0;
          this.txtCoin.node.angle = 0;

          if (this.lblCoin) {
            this.lblCoin.node.active = true;
            stopAllActions(this.lblCoin);
            this.lblCoin.node.angle = 0;
          }
        } //@TODO: REFACTOR THIS!!!!
        ;

        _proto.hideAnimation = function hideAnimation(playEffect) {
          var _this4 = this;

          if (playEffect === void 0) {
            playEffect = true;
          }

          var winValue = this._winValue;

          if (playEffect) {
            var stepMoveOut = 20;

            if (this.index > 1) {
              stepMoveOut *= -1;
            }

            var player = gfReferenceManager.instance.getPlayerByIndex(this.index);
            var endPos = this._originPos;
            if (player) endPos = getPostionInOtherNode(this.node.parent, player.gun);
            this.spine.setAnimation(0, this._animHide, false);

            if (this.lblCoin) {
              tween(this.lblCoin.node).to(0.25, {
                scale: v3(0, 0, 0)
              }).start();
            }

            this.tweenHide = tween(this.node).to(0.23, {
              position: v3(this.node.position.x, this.node.position.y + stepMoveOut, 0)
            }).delay(0.1).to(0.4, {
              position: endPos,
              scale: v3(0, 0, 0)
            }).call(function () {
              if (player.isMe) {
                player.addToDisplayWallet(winValue);
              }

              _this4.onFinish();
            }).start();
          } else {
            if (this.tweenCoin) {
              this.tweenCoin.stop();
            }

            if (this._ballWaiting > 0) {
              gfEventEmitter.instance.emit(gfBaseEvents.DRAGON.DONE_PLAYER_BIGWIN);
            }

            this.onFinish();
          }
        };

        _proto.onUserExitBoard = function onUserExitBoard() {
          this._existBoard = true;
        };

        _proto.onFinish = function onFinish() {
          this.reset();
          this.node.active = false;
          this._isDragonBigWin = false;
          this._coinValue = 0;
          this._winValue = 0;
          this._ballWaiting = 0;
        };

        _proto.isShowingDragonBall = function isShowingDragonBall() {
          return this._isDragonBigWin;
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);

          if (this.tweenCoin) {
            this.tweenCoin.stop();
          }

          if (this.tweenHide) {
            this.tweenHide.stop();
          }
        };

        _createClass(gfBigWinWheel, [{
          key: "coinValue",
          get: function get() {
            return this._coinValue;
          },
          set: function set(value) {
            this._coinValue = value;

            this._updateCoinWin();
          }
        }]);

        return gfBigWinWheel;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "txtCoin", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "txtCoinOther", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "spine", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfBigWinWheelAvatar.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfEventEmitter.ts', './gfBaseEvents.ts', './gfBaseConfig.ts', './gfReferenceManager.ts', './gfBigWinWheel.ts', './gfActionHelper.ts', './gfUtilities.ts', './utils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, sys, tween, Sprite, v3, UITransform, gfEventEmitter, gfBaseEvents, gfBaseConfig, gfReferenceManager, gfBigWinWheel, stopAllActions, scaleTo, shake, formatCoin, convertAssetArrayToObject;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      sys = module.sys;
      tween = module.tween;
      Sprite = module.Sprite;
      v3 = module.v3;
      UITransform = module.UITransform;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfBigWinWheel = module.gfBigWinWheel;
    }, function (module) {
      stopAllActions = module.stopAllActions;
      scaleTo = module.scaleTo;
      shake = module.shake;
    }, function (module) {
      formatCoin = module.formatCoin;
    }, function (module) {
      convertAssetArrayToObject = module.convertAssetArrayToObject;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "51f75NdAWZHI7NaDvU1u5kt", "gfBigWinWheelAvatar", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfBigWinWheelAvatar = exports('gfBigWinWheelAvatar', (_dec = ccclass('gfBigWinWheelAvatar'), _dec2 = property(Node), _dec3 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_gfBigWinWheel) {
        _inheritsLoose(gfBigWinWheelAvatar, _gfBigWinWheel);

        function gfBigWinWheelAvatar() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfBigWinWheel.call.apply(_gfBigWinWheel, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "iconMainFish", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "ribbon", _descriptor2, _assertThisInitialized(_this));

          _this._listEffect = [];
          _this._currentFishKind = -1;
          _this.sizeByTyeWin = void 0;
          _this._listFishFrame = void 0;
          _this._listTextFrame = void 0;
          _this.SKIN_NAME = void 0;
          _this.ANIMATION_NAME = void 0;
          _this.TWEEN_COIN_DURATION = void 0;
          return _this;
        }

        var _proto = gfBigWinWheelAvatar.prototype;

        _proto.onLoad = function onLoad() {
          this.sizeByTyeWin = 0.8;

          this._setUpConstantsVariable();

          this.spine.setMix(this.ANIMATION_NAME.APPEAR, this.ANIMATION_NAME.IDLE, 0.1);
        };

        _proto._setUpConstantsVariable = function _setUpConstantsVariable() {
          this.SKIN_NAME = {
            WIN: "Thang",
            BIG_WIN: "ThangLon",
            SUPER_WIN: "ThangCucLon",
            MEGA_WIN: "ThangSieuLon"
          };
          this.ANIMATION_NAME = {
            APPEAR: "AllAppear",
            IDLE: "AllIdle",
            DISAPPEAR: "RibbonAppear"
          };
          this.TWEEN_COIN_DURATION = {
            DEFAULT: 2.5,
            FAST: 1
          };
        };

        _proto.setUpListAvatarIcon = function setUpListAvatarIcon(listIcon) {
          this._listFishFrame = listIcon;
        };

        _proto.setUpListTextFrame = function setUpListTextFrame(listTextFrame) {
          this._listTextFrame = listTextFrame;
        };

        _proto.showAnimation = function showAnimation(_ref) {
          var gold = _ref.gold,
              bet = _ref.bet,
              isMe = _ref.isMe,
              _ref$fishKind = _ref.fishKind,
              fishKind = _ref$fishKind === void 0 ? 17 : _ref$fishKind,
              isTextImage = _ref.isTextImage,
              isKill = _ref.isKill;
          this.txtCoin.node.active = isMe;
          this.txtCoinOther.node.active = !isMe;
          if (!gold) return;

          if (!this.node.active) {
            this._reset();

            this._playAnim({
              gold: gold,
              bet: bet,
              isMe: isMe,
              fishKind: fishKind,
              isTextImage: isTextImage,
              isKill: isKill
            });
          } else {
            this._listEffect.push({
              gold: gold,
              bet: bet,
              isMe: isMe,
              fishKind: fishKind,
              isTextImage: isTextImage,
              isKill: isKill
            });
          }
        };

        _proto._playAnim = function _playAnim(_ref2) {
          var gold = _ref2.gold,
              bet = _ref2.bet,
              isMe = _ref2.isMe,
              fishKind = _ref2.fishKind,
              isTextImage = _ref2.isTextImage,
              isKill = _ref2.isKill;
          this.lblCoin = isMe ? this.txtCoin : this.txtCoinOther;
          this.lblCoin.node.active = true;
          this._winValue += gold;

          var skinName = this._setSkinByBet(bet);

          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PAUSE_OR_RESUME_SOUND_WIN, false);
          skinName == this.SKIN_NAME.MEGA_WIN ? gfEventEmitter.instance.emit(gfBaseEvents.SOUND.MEGA_WIN) : gfEventEmitter.instance.emit(gfBaseEvents.SOUND.BIG_WIN);
          var delayTimeTweenCoin = this._currentSkinName === '' ? 1 : 0;

          this._tweenCoin({
            winAmount: this._winValue,
            delay: delayTimeTweenCoin
          });

          var delayTime = this._currentSkinName !== skinName ? 0.5 : 0;

          this._playSpinAnim(skinName);

          this._playActionIconMainFish({
            delayTime: delayTime,
            fishKind: fishKind,
            isTextImage: isTextImage,
            isKill: isKill,
            gold: gold
          });
        };

        _proto.hideAnimation = function hideAnimation(playEffect) {
          if (playEffect === void 0) {
            playEffect = true;
          }

          if (!this.node.active) return;

          if (playEffect) {
            this._checkHideAnim();
          } else {
            this.resetAllAction();

            this._resetInfo();

            this.node.active = false;
          }
        };

        _proto._playSpinAnim = function _playSpinAnim(skinName) {
          if (this._currentSkinName !== skinName) {
            this.spine.setSkin(skinName);

            if (sys.isNative) {
              this.spine.setToSetupPose();
            }

            this._currentSkinName = skinName;
            this.spine.setAnimation(0, this.ANIMATION_NAME.APPEAR, false);
            this.spine.setCompleteListener(this._completeAppear.bind(this));
          } else {
            this.spine.setAnimation(0, this.ANIMATION_NAME.IDLE, true);
          }
        };

        _proto._setSkinByBet = function _setSkinByBet(bet) {
          var skinName = this.SKIN_NAME.BIG_WIN;
          this.sizeByTyeWin = 0.8;

          if (this._winValue >= bet * gfBaseConfig.instance.BIG_WIN_RATIO.SUPER) {
            skinName = this.SKIN_NAME.MEGA_WIN;
            this.sizeByTyeWin = 1;
          } else if (this._winValue >= bet * gfBaseConfig.instance.BIG_WIN_RATIO.HUGE) {
            skinName = this.SKIN_NAME.SUPER_WIN;
            this.sizeByTyeWin = 0.9;
          }

          return skinName;
        };

        _proto._completeAppear = function _completeAppear() {
          // eslint-disable-line
          this.spine.setAnimation(0, this.ANIMATION_NAME.IDLE, true);
          this.spine.setCompleteListener(function () {});
        };

        _proto._changeImageFishIcon = function _changeImageFishIcon(data) {
          var _this2 = this;

          var fishKind = data.fishKind,
              isTextImage = data.isTextImage,
              isKill = data.isKill;
          stopAllActions(this.iconMainFish);
          tween(this.iconMainFish).then(scaleTo(0.1, 0, 0, 'backOut')).call(function () {
            _this2._updateImage(fishKind, isTextImage, isKill);
          }).then(scaleTo(0.5, this.sizeByTyeWin, this.sizeByTyeWin, 'backOut')).then(shake(this.iconMainFish.position, 0.5)).start();
        };

        _proto._updateImage = function _updateImage(fishKind, isTextImage, isKill) {
          var assetFishes = convertAssetArrayToObject(this._listFishFrame);
          var sprite = null;

          if (isTextImage) {
            if (isKill) {
              sprite = assetFishes['Avatar_' + fishKind];
            } else {
              sprite = this._listTextFrame[0];
            }
          } else {
            if (assetFishes['Avatar_' + fishKind]) {
              sprite = assetFishes['Avatar_' + fishKind];
            } else {
              sprite = assetFishes['Avatar_' + 22];
            }
          }

          this.iconMainFish.getComponent(Sprite).spriteFrame = sprite;
        };

        _proto._tweenCoin = function _tweenCoin(data) {
          var _this3 = this;

          var winAmount = data.winAmount;
          var _coinValue = this.coinValue;

          if (this.tweenCoin) {
            this.tweenCoin.stop();
          }

          this.tweenCoin = tween(this).call(function () {
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PAUSE_OR_RESUME_SOUND_WIN, false);
          }).to(this._duration, null, {
            easing: "sineInOut",
            onUpdate: function onUpdate(target, ratio) {
              _this3.coinValue = _coinValue + winAmount * ratio;
            }
          }).call(function () {
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PAUSE_OR_RESUME_SOUND_WIN, true);

            _this3._checkHideAnim();
          });
          this.tweenCoin.start();
        };

        _proto._playActionIconMainFish = function _playActionIconMainFish(data) {
          var _this4 = this;

          var delayTime = data.delayTime,
              fishKind = data.fishKind;
          tween(this.spine.node).delay(delayTime).call(function () {
            if (_this4._currentFishKind !== fishKind) {
              _this4._changeImageFishIcon(data);

              _this4._currentFishKind = fishKind;
            }
          }).start();
        };

        _proto._checkHideAnim = function _checkHideAnim() {
          var _this5 = this;

          if (!this._checkPlayNext()) {
            tween(this.node).delay(1).call(function () {
              if (!_this5._checkPlayNext()) {
                var player = gfReferenceManager.instance.getPlayerByIndex(_this5.index);

                if (player.isMe) {
                  gfEventEmitter.instance.emit(gfBaseEvents.SOUND.STOP_BIG_WIN);
                }

                _this5._playAnimHideEffect();
              }
            }).start();
          }
        };

        _proto._checkPlayNext = function _checkPlayNext() {
          if (this._listEffect.length > 0) {
            this._duration = this.TWEEN_COIN_DURATION.FAST;

            var info = this._listEffect.shift();

            this._playAnim(info);

            return true;
          }

          return false;
        };

        _proto._playAnimHideEffect = function _playAnimHideEffect() {
          this.spine.setAnimation(0, this.ANIMATION_NAME.DISAPPEAR, false);
          tween(this.lblCoin.node).to(0.2, {
            scale: v3(0, 0, 1)
          }).start();
          stopAllActions(this.iconMainFish);
          tween(this.iconMainFish).to(0.2, {
            scale: v3(0, 0, 1)
          }).start();
          tween(this.ribbon).to(0.2, {
            scale: v3(0, 0, 0)
          }).start();
          var player = gfReferenceManager.instance.getPlayerByIndex(this.index);

          if (player.isMe) {
            player.addToDisplayWallet(this._winValue);
          }

          this._resetInfo();
        };

        _proto._updateCoinWin = function _updateCoinWin() {
          this.lblCoin.string = formatCoin(this._coinValue);

          if (this.lblCoin.node.getComponent(UITransform).width > this.ribbon.getComponent(UITransform).width - 120) {
            this.ribbon.getComponent(UITransform).width += 5;
          }
        };

        _proto._resetInfo = function _resetInfo() {
          this._winValue = 0;
          this.coinValue = 0;
          this._isShowing = false;
          this._currentSkinName = '';
          this._currentFishKind = -1;
          this.sizeByTyeWin = 0.8;
          this._duration = this.TWEEN_COIN_DURATION.DEFAULT;
          this.ribbon.getComponent(UITransform).width = 250;
          this.lblCoin.string = '';

          if (this.tweenCoin) {
            this.tweenCoin.stop();
          }
        };

        _proto._reset = function _reset() {
          var _ReferenceManager$ins = gfReferenceManager.instance.getPlayerByIndex(this.index),
              isMe = _ReferenceManager$ins.isMe;

          this.node.active = true;
          this.iconMainFish.setScale(0, 0, 1);
          this.ribbon.setScale(0, 0, 1);
          this.lblCoin = isMe ? this.txtCoin : this.txtCoinOther;
          this.lblCoin.string = '';
          this.lblCoin.node.setScale(0, 0, 1);
          tween(this.lblCoin.node).to(0.5, {
            scale: v3(1, 1, 1)
          }, {
            easing: 'bounceOut'
          }).start();
          tween(this.ribbon).to(0.5, {
            scale: v3(1, 1, 1)
          }, {
            easing: 'bounceOut'
          }).start();
        };

        _proto.resetAllAction = function resetAllAction() {
          stopAllActions(this.node);
          stopAllActions(this.ribbon);
          stopAllActions(this.lblCoin.node);
          stopAllActions(this.spine.node);
          stopAllActions(this.iconMainFish);

          if (this.tweenCoin) {
            this.tweenCoin.stop();
          }

          this._listEffect = [];
          this.spine.setToSetupPose();
          this.iconMainFish.setScale(0, 0, 1);
        };

        _proto.reset = function reset() {
          if (!this.lblCoin) {
            this.lblCoin = this.txtCoin;
          }

          _gfBigWinWheel.prototype.reset.call(this);

          this.resetAllAction();
        };

        return gfBigWinWheelAvatar;
      }(gfBigWinWheel), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "iconMainFish", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "ribbon", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfBlockAllInput.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfUtilities.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component, gfBaseEvents, registerEvent, removeEvents;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "72b3exqR0JHzboyROaa+4zY", "gfBlockAllInput", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfBlockAllInput = exports('gfBlockAllInput', (_dec = ccclass('gfBlockAllInput'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfBlockAllInput, _Component);

        function gfBlockAllInput() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = gfBlockAllInput.prototype;

        _proto.onLoad = function onLoad() {
          registerEvent(gfBaseEvents.GAME_LAYER.BLOCK_ALL_BUTTON_WHEN_REFRESH, this.blockAll, this);
          this.node.active = false;
        };

        _proto.blockAll = function blockAll() {
          this.node.active = true;
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return gfBlockAllInput;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfBlurScrollView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, ScrollView, isValid, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      ScrollView = module.ScrollView;
      isValid = module.isValid;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "b66f8n3AdJAR7nVq9d9ro3m", "gfBlurScrollView", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfBlurScrollView = exports('gfBlurScrollView', (_dec = ccclass('gfBlurScrollView'), _dec2 = property(Node), _dec3 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfBlurScrollView, _Component);

        function gfBlurScrollView() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "topBlur", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bottomBlur", _descriptor2, _assertThisInitialized(_this));

          _this.minOffsetY = 0;
          return _this;
        }

        var _proto = gfBlurScrollView.prototype;

        _proto.onLoad = function onLoad() {
          this.node.on('scrolling', this.scrolling, this);
          this.minOffsetY = 0;
        };

        _proto.onEnable = function onEnable() {
          var scrollView = this.node.getComponent(ScrollView);
          this.scrolling(scrollView);
        };

        _proto.scrolling = function scrolling(event) {
          var scrollOffset = event.getScrollOffset();

          if (scrollOffset.y <= this.minOffsetY && isValid(this.topBlur)) {
            this.topBlur.active = false;
            return;
          }

          if (scrollOffset.y >= event.getMaxScrollOffset().y && isValid(this.bottomBlur)) {
            this.bottomBlur.active = false;
            return;
          }

          this.topBlur.active = true;
          this.bottomBlur.active = true;
        };

        _proto.onDestroy = function onDestroy() {
          this.node.off('scrolling', this.scrolling, this);
        };

        return gfBlurScrollView;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "topBlur", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "bottomBlur", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfBlurScrollViewController.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, ScrollView, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      ScrollView = module.ScrollView;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "7ae0b+JgddJa6SDxk8f3lSD", "gfBlurScrollViewController", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfBlurScrollViewController = exports('gfBlurScrollViewController', (_dec = ccclass('gfBlurScrollViewController'), _dec2 = property(Node), _dec3 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfBlurScrollViewController, _Component);

        function gfBlurScrollViewController() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "decor_top", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "decor_bot", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = gfBlurScrollViewController.prototype;

        _proto.onLoad = function onLoad() {
          this.node.on(ScrollView.EventType.SCROLLING, this.onScrolling, this);
          this.decor_top.active = false;
        };

        _proto.onScrolling = function onScrolling() {
          var scrollOffset = this.node.getComponent(ScrollView).getScrollOffset();

          if (scrollOffset.y <= 0) {
            this.decor_top.active = false;
            this.decor_bot.active = true;
            return;
          }

          if (scrollOffset.y >= this.node.getComponent(ScrollView).getMaxScrollOffset().y) {
            this.decor_bot.active = false;
            this.decor_top.active = true;
            return;
          }

          this.decor_top.active = true;
          this.decor_bot.active = true;
        };

        _proto.onDestroy = function onDestroy() {
          this.node.off(ScrollView.EventType.SCROLLING, this.onScrolling, this);
        };

        return gfBlurScrollViewController;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "decor_top", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "decor_bot", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfBubble.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfActionHelper.ts', './gfUtilities.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, v3, Node, Component, tween, gfBaseEvents, fadeOut, fadeIn, registerEvent, removeEvents;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      v3 = module.v3;
      Node = module.Node;
      Component = module.Component;
      tween = module.tween;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      fadeOut = module.fadeOut;
      fadeIn = module.fadeIn;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "4b1fapnhTFCyKZzqTCSwxzy", "gfBubble", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var POS_LIST = [[v3(-629, 13, 1), v3(-554, 75, 1), v3(-4, -319, 1), v3(582, 67, 1), v3(513, -275, 1)], //Background 0
      [v3(-620, 69, 1), v3(-333, 249, 1), v3(-500, -321, 1), v3(600, 98, 1), v3(301, -331, 1)], //Background 1
      [v3(-588, 134, 1), v3(-525, 250, 1), v3(-555, -302, 1), v3(572, -36, 1), v3(430, -320, 1)], //Background 2
      [v3(-464, 96, 1), v3(579, 78, 1), v3(-587, -259, 1), v3(-200, 184, 1), v3(466, -285, 1)], //Background 3
      [v3(-629, 13, 1), v3(-554, 75, 1), v3(-4, -319, 1), v3(582, 67, 1), v3(513, -275, 1)], //Background 0
      [v3(-620, 69, 1), v3(-333, 249, 1), v3(-500, -321, 1), v3(600, 98, 1), v3(301, -331, 1)], //Background 1
      [v3(-588, 134, 1), v3(-525, 250, 1), v3(-555, -302, 1), v3(572, -36, 1), v3(430, -320, 1)], //Background 2
      [v3(-464, 96, 1), v3(579, 78, 1), v3(-587, -259, 1), v3(-200, 184, 1), v3(466, -285, 1)], //Background 3
      [v3(-464, 96, 1), v3(579, 78, 1), v3(-587, -259, 1), v3(-200, 184, 1), v3(466, -285, 1)], //Background 3
      [v3(-464, 96, 1), v3(579, 78, 1), v3(-587, -259, 1), v3(-200, 184, 1), v3(466, -285, 1)] //Background 3
      ];
      var GfBubble = exports('GfBubble', (_dec = ccclass('GfBubble'), _dec2 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfBubble, _Component);

        function GfBubble() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "BubbleNodes", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = GfBubble.prototype;

        _proto.onLoad = function onLoad() {
          this.initEvents();
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.GAME_LAYER.INIT_BUBBLE, this.initBubble, this);
          registerEvent(gfBaseEvents.GAME_LAYER.CHANGE_BUBBLE, this.changeBackground, this);
        };

        _proto.initBubble = function initBubble(index) {
          for (var i = 0; i < this.BubbleNodes.length; i++) {
            this.BubbleNodes[i].setPosition(POS_LIST[index][i]);
          }
        };

        _proto.changeBackground = function changeBackground(index) {
          var _this2 = this;

          var _loop = function _loop(i) {
            tween(_this2.BubbleNodes[i]).then(fadeOut(0.5)).delay(0.5).call(function () {
              _this2.BubbleNodes[i].setPosition(POS_LIST[index][i]);
            }).then(fadeIn(1.5)).start();
          };

          for (var i = 0; i < this.BubbleNodes.length; i++) {
            _loop(i);
          }
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return GfBubble;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "BubbleNodes", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfBubbleTransition.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfActionHelper.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, UIOpacity, tween, v3, Component, fadeOut;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      UIOpacity = module.UIOpacity;
      tween = module.tween;
      v3 = module.v3;
      Component = module.Component;
    }, function (module) {
      fadeOut = module.fadeOut;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "226f1XJTa1IH4OFwpGBBGUO", "gfBubbleTransition", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfBubbleTransition = exports('GfBubbleTransition', (_dec = ccclass('GfBubbleTransition'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfBubbleTransition, _Component);

        function GfBubbleTransition() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = GfBubbleTransition.prototype;

        _proto.start = function start() {
          var _this = this;

          this.node.setScale(0, 0, 0);
          this.node.getComponent(UIOpacity).opacity = 255;
          var offset = 5;
          var shakeTime = 0.5;
          tween(this.node).to(shakeTime, {
            position: v3(-offset, 0, this.node.position.z)
          }).to(shakeTime, {
            position: v3(offset, 0, this.node.position.z)
          }).repeatForever().start();
          tween(this.node).parallel(tween().to(0.5, {
            scale: v3(0.5, 1, this.node.scale.z)
          }), tween().then(fadeOut(1))).removeSelf().call(function () {
            _this.node.destroy();
          }).start();
        };

        return GfBubbleTransition;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfBullet.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfEventEmitter.ts', './gfBaseEvents.ts', './gfBaseConfig.ts', './gfUtilities.ts', './gfFishManager.ts', './gfNode.ts', './gfBaseFish.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Collider2D, Contact2DType, Sprite, BoxCollider2D, misc, gfEventEmitter, gfBaseEvents, gfBaseConfig, SetZIndex, getRotation, v2Distance, gfFishManager, gfNode, gfBaseFish;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Collider2D = module.Collider2D;
      Contact2DType = module.Contact2DType;
      Sprite = module.Sprite;
      BoxCollider2D = module.BoxCollider2D;
      misc = module.misc;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      SetZIndex = module.SetZIndex;
      getRotation = module.getRotation;
      v2Distance = module.v2Distance;
    }, function (module) {
      gfFishManager = module.default;
    }, function (module) {
      gfNode = module.default;
    }, function (module) {
      gfBaseFish = module.gfBaseFish;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "24803oDDQRJLLLvpEqor32O", "gfBullet", undefined);

      var ccclass = _decorator.ccclass;
      var gfBullet = exports('gfBullet', (_dec = ccclass('gfBullet'), _dec(_class = /*#__PURE__*/function (_gfNode) {
        _inheritsLoose(gfBullet, _gfNode);

        function gfBullet() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfNode.call.apply(_gfNode, [this].concat(args)) || this;
          _this._BulletMultiple = 0;
          _this._LockedFish = null;
          _this._DeskStation = null;
          _this._BulletID = null;
          _this._isMe = false;
          _this._lastPos = null;
          _this._vectorX = 0;
          _this._vectorY = 0;
          _this._isDie = false;
          _this._isFreezed = false;
          _this._FireType = 0;
          _this._isFake = false;
          _this._speed = 0;
          return _this;
        }

        var _proto = gfBullet.prototype;

        _proto.onLoad = function onLoad() {
          this.getComponent(Collider2D).on(Contact2DType.BEGIN_CONTACT, this.onCollisionEnter, this);
        };

        _proto.initAssets = function initAssets(config) {
          this.node.getComponent(Sprite).spriteFrame = config.asset;
          var box = this.node.getComponent(BoxCollider2D);
          box.offset.x = config.BoxCollider.x;
          box.offset.y = config.BoxCollider.y;
          box.size.width = config.BoxCollider.width;
          box.size.height = config.BoxCollider.height;
          SetZIndex(this.node, gfBaseConfig.instance.Z_INDEX.BULLET);
          this._speed = gfBaseConfig.instance.BulletSpeed;
        };

        _proto.initData = function initData(data) {
          this.node.setPosition(data.position);
          this.node.angle = data.Angle;
          this._BulletMultiple = data.BulletMultiple;
          this._LockedFish = gfFishManager.instance.getFishById(data.LockedFishID);
          this._DeskStation = data.DeskStation;
          this._BulletID = data.BulletID;
          this._isMe = data.isMe;
          this._isFake = data.isBulletFake;
          this._isFreezed = data.isFreezed;
          this._FireType = data.FireType;
          this._vectorX = Math.cos(misc.degreesToRadians(this.node.angle));
          this._vectorY = Math.sin(misc.degreesToRadians(this.node.angle));
        };

        _proto.update = function update(dt) {
          if (this._isDie) {
            this.onDie();
            return;
          }

          if (this._LockedFish) {
            if (this._isFake) {
              if (this._LockedFish.checkDie()) {
                this._LockedFish = null;
                this.onDie();
                return;
              }
            } else {
              if (!this._LockedFish.isAvailable()) {
                this._LockedFish = null;
              }
            }
          }

          if (this._lastPos) {
            this.updatePosition(dt);
            this.limitPositionForTarget();
            this.node.angle = getRotation(this.node.getPosition(), this._lastPos);
          }

          this._lastPos = this.node.getPosition();
        };

        _proto.updatePosition = function updatePosition(dt) {
          var delta = dt * this._speed;
          var x = this.node.position.x,
              y = this.node.position.y;

          if (this._LockedFish) {
            this.node.angle = getRotation(this._LockedFish.getLockPositionByNodeSpace(this.node.parent), this._lastPos);
            this._vectorX = Math.cos(misc.degreesToRadians(this.node.angle));
            this._vectorY = Math.sin(misc.degreesToRadians(this.node.angle));
          } else {
            var SceneBox = gfBaseConfig.instance.SceneBox;

            if (x > SceneBox.Right) {
              this._vectorX *= -1;
              x = SceneBox.Right;
            } else if (x < SceneBox.Left) {
              this._vectorX *= -1;
              x = SceneBox.Left;
            }

            if (y > SceneBox.Top) {
              this._vectorY *= -1;
              y = SceneBox.Top;
            } else if (y < SceneBox.Bottom) {
              this._vectorY *= -1;
              y = SceneBox.Bottom;
            }
          }

          x += this._vectorX * delta;
          y += this._vectorY * delta;
          this.node.setPosition(x, y, 0);
        };

        _proto.onCollisionEnter = function onCollisionEnter(self, other, contact) {
          if (this._isDie) return;
          var fish = other.getComponent(gfBaseFish) || other.node.parent.getComponent(gfBaseFish);
          if (!fish || fish.checkDie()) return;

          if (this._LockedFish) {
            if (fish.getId() != this._LockedFish._FishID) {
              return;
            }
          }

          this.onHit(fish);
        };

        _proto.limitPositionForTarget = function limitPositionForTarget() {
          if (this._LockedFish) {
            var fishPos = this._LockedFish.getLockPositionByNodeSpace(this.node.parent);

            if (v2Distance(this.node.position, this._lastPos) > v2Distance(this._lastPos, fishPos)) {
              this.node.position = fishPos;
              this.onHit(this._LockedFish);
            }
          }
        };

        _proto.onHit = function onHit(fish) {
          var data = this.makeBulletCollisionData(fish);
          fish.onHit(data);

          if (!this._isFake) {
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.BULLET_COLLIDE_FISH, data);
          } else {
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.ON_PLAY_NETFX, data);
          }

          this._isDie = true;
        };

        _proto.makeBulletCollisionData = function makeBulletCollisionData(fish) {
          var data = {
            bullet: this,
            position: this.node.position,
            FishID: fish.getId(),
            FishKind: fish.getKind(),
            BulletMultiple: this._BulletMultiple,
            isMe: this._isMe,
            BulletID: this._BulletID,
            isFreezed: this._isFreezed,
            DeskStation: this._DeskStation,
            FireType: this._FireType
          };
          return data;
        };

        _proto.onDie = function onDie() {
          this.returnPool();
        };

        _proto.checkDie = function checkDie() {
          return this._isDie;
        };

        _proto.isAvailable = function isAvailable() {
          return !this.checkDie();
        };

        _proto.isFake = function isFake() {
          return this._isFake;
        };

        _proto.getPosition = function getPosition() {
          return this.node.getPosition();
        };

        _proto.getAngle = function getAngle() {
          return this.node.angle;
        } //Called whenever object is returned to Object Pool
        ;

        _proto.unuse = function unuse() {
          this._BulletMultiple = 0;
          this._LockedFish = null;
          this._DeskStation = null;
          this._BulletID = null;
          this._isMe = false;
          this._lastPos = undefined;
          this._vectorX = 0;
          this._vectorY = 0;
          this._isDie = false;

          _gfNode.prototype.unuse.call(this);
        };

        return gfBullet;
      }(gfNode)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfBulletLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfBaseConfig.ts', './gfDataStore.ts', './gfReferenceManager.ts', './gfUtilities.ts', './gfPoolManager.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, UITransform, Component, gfBaseEvents, gfBaseConfig, gfDataStore, gfReferenceManager, registerEvent, getPointByDegrees, removeEvents, gfPoolManager;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      UITransform = module.UITransform;
      Component = module.Component;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      getPointByDegrees = module.getPointByDegrees;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfPoolManager = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "5f8c2rNPRJLuKY00KHKsTQq", "gfBulletLayer", undefined);

      var ccclass = _decorator.ccclass;
      var gfBulletLayer = exports('gfBulletLayer', (_dec = ccclass('gfBulletLayer'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfBulletLayer, _Component);

        function gfBulletLayer() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.numBullet = 0;
          return _this;
        }

        var _proto = gfBulletLayer.prototype;

        _proto.onLoad = function onLoad() {
          this.initEvent();
          this.numBullet = 0;
        };

        _proto.initEvent = function initEvent() {
          registerEvent(gfBaseEvents.GAME_LAYER.CREATE_BULLET, this.createBullet, this);
          registerEvent(gfBaseEvents.GAME_LAYER.BULLET_COLLIDE_FISH, this.countDownBullet, this);
          registerEvent(gfBaseEvents.GAME_LAYER.ON_ENTER_GAME_ROOM, this.onResumeGame, this);
        };

        _proto.createBullet = function createBullet(data) {
          var player = gfReferenceManager.instance.getPlayerByDeskStation(data.DeskStation);

          if (player) {
            var posFire = this.node.getComponent(UITransform).convertToNodeSpaceAR(player.gun.worldPosition);
            var realPosFire = getPointByDegrees(posFire.x, posFire.y, posFire.x + gfBaseConfig.instance.gunRadius, posFire.y, Number.parseFloat(data.Angle));
            data.position = realPosFire;

            if (player.isMe) {
              if (this.numBullet < gfBaseConfig.instance.MaxBullet) {
                data.FireType = gfDataStore.instance.getTargetState();
                this.createBulletPool(data);
                this.countBullet(true);
              } else {
                this.onReachMaxNumBullet(true);
              }
            } else {
              this.createBulletPool(data);
            }
          }
        };

        _proto.createBulletPool = function createBulletPool(data) {
          var bullet = gfPoolManager.instance.getBulletWithData(data);
          bullet.node.setParent(this.node);
        };

        _proto.countBullet = function countBullet(plus) {
          if (plus === void 0) {
            plus = true;
          }

          this.numBullet += plus ? 1 : -1;

          if (this.numBullet < 0) {
            this.numBullet = 0;
          } else if (this.numBullet >= gfBaseConfig.instance.MaxBullet) {
            this.onReachMaxNumBullet(true);
          }

          if (gfDataStore.instance.isReachMaxNumBullet()) {
            if (this.numBullet < gfBaseConfig.instance.MaxBullet) {
              this.onReachMaxNumBullet(false);
            }
          }
        };

        _proto.countDownBullet = function countDownBullet(data) {
          if (data.isMe) {
            this.countBullet(false);
          }
        };

        _proto.onResumeGame = function onResumeGame() {
          this.numBullet = 0;
          this.onReachMaxNumBullet(false);
        };

        _proto.onReachMaxNumBullet = function onReachMaxNumBullet(isMax) {
          gfDataStore.instance.setDataStore({
            reachMaxNumBullet: isMax
          });
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return gfBulletLayer;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfCoinFX.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfNode.ts', './gfActionHelper.ts', './gfBaseConfig.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Animation, tween, UITransform, gfNode, fadeOut, call, gfBaseConfig;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Animation = module.Animation;
      tween = module.tween;
      UITransform = module.UITransform;
    }, function (module) {
      gfNode = module.default;
    }, function (module) {
      fadeOut = module.fadeOut;
      call = module.call;
    }, function (module) {
      gfBaseConfig = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "f380cz8iaxPraDA+YrZD7Yl", "gfCoinFX", undefined);

      var TYPE_COIN = ["COIN_3D", "COIN_PARTICLE"];
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfCoinFX = exports('gfCoinFX', (_dec = ccclass('gfCoinFX'), _dec2 = property(Animation), _dec(_class = (_class2 = /*#__PURE__*/function (_gfNode) {
        _inheritsLoose(gfCoinFX, _gfNode);

        function gfCoinFX() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfNode.call.apply(_gfNode, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "anim", _descriptor, _assertThisInitialized(_this));

          _this.velX = void 0;
          _this.velY = void 0;
          _this.aclX = void 0;
          _this.aclY = void 0;
          _this.screenSize = void 0;
          _this.type = void 0;
          _this.lifetime = void 0;
          _this._animState = void 0;
          _this.index = 0;
          _this.animName = void 0;
          return _this;
        }

        var _proto = gfCoinFX.prototype;

        _proto.onLoad = function onLoad() {
          this.velX = 0;
          this.velY = 0;
          this.aclX = 0;
          this.aclY = 0;
          this.screenSize = gfBaseConfig.instance.realSize;
          this.type = TYPE_COIN[0];
          this.node.on("STOP_ANIMATION", this.stopAnimation, this);
        };

        _proto.initAssets = function initAssets(config) {
          this.anim.clips = [config.asset];
          this.animName = config.asset.name;
        };

        _proto.startAnimation = function startAnimation(type, coinAnimSpeed, velX, velY, aclX, aclY, lifetime) {
          if (type === void 0) {
            type = 0;
          }

          if (coinAnimSpeed === void 0) {
            coinAnimSpeed = 1;
          }

          if (velX === void 0) {
            velX = 1;
          }

          if (velY === void 0) {
            velY = 1;
          }

          if (aclX === void 0) {
            aclX = 1;
          }

          if (aclY === void 0) {
            aclY = 1;
          }

          if (lifetime === void 0) {
            lifetime = -1;
          }

          this.type = TYPE_COIN[type];
          this.velX = velX;
          this.velY = velY;
          this.aclX = aclX;
          this.aclY = aclY;
          this.lifetime = lifetime;

          if (!this._animState) {
            this._animState = this.anim.getState(this.animName);
          }

          this._animState.speed = coinAnimSpeed;
          this.anim.play(this.animName);
        };

        _proto.stopAnimation = function stopAnimation() {
          this.anim.stop();
          this.returnPool();
        };

        _proto.update = function update(dt) {
          var _this2 = this;

          if (this.type != TYPE_COIN[1]) return;

          if (this.lifetime >= 0) {
            this.lifetime -= dt;

            if (this.lifetime <= 0) {
              tween(this.node).then(fadeOut(0.5)).then(call(function () {
                _this2.stopAnimation();
              })).start();
              return;
            }
          }

          this.node.setPosition(this.node.position.x + this.velX * dt, this.node.position.y + this.velY * dt, 0);
          this.velX += this.aclX * dt;
          this.velY += this.aclY * dt;
          var pos = this.node.parent.getComponent(UITransform).convertToWorldSpaceAR(this.node.position);

          if (pos.x < -this.screenSize.Width * 0.25 || pos.x > this.screenSize.Width * 1.25 || pos.y < -this.screenSize.Height * 0.25 || pos.y > this.screenSize.Height * 1.25) {
            this.stopAnimation();
          }
        } //nodepool
        //Called whenever card object is get from Object Pool
        ;

        _proto.reuse = function reuse(poolMng) {
          _gfNode.prototype.reuse.call(this, poolMng);

          this.type = TYPE_COIN[0];
        };

        return gfCoinFX;
      }(gfNode), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "anim", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfCoinLabel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfNode.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Label, gfNode;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
    }, function (module) {
      gfNode = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "cb4429oW5FBmJ42ATSrwfSZ", "gfCoinLabel", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfCoinLabel = exports('gfCoinLabel', (_dec = ccclass('gfCoinLabel'), _dec(_class = /*#__PURE__*/function (_gfNode) {
        _inheritsLoose(gfCoinLabel, _gfNode);

        function gfCoinLabel() {
          return _gfNode.apply(this, arguments) || this;
        }

        var _proto = gfCoinLabel.prototype;

        _proto.initAssets = function initAssets(config) {
          if (config) {
            this.node.getComponent(Label).font = config;
          }
        };

        _proto.setString = function setString(value) {
          this.node.getComponent(Label).string = value;
        };

        return gfCoinLabel;
      }(gfNode)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfCuSceneJackpotWin.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfCutSceneItem.ts', './gfActionHelper.ts', './gfUtilities.ts', './gfEventEmitter.ts', './gfBaseEvents.ts', './gf3DParticle.ts', './gfDataStore.ts', './gfBaseConfig.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Component, Label, Node, v3, tween, Button, gfCutSceneItem, fadeOut, stopAllActions, formatCoin, gfEventEmitter, gfBaseEvents, gf3DParticle, gfDataStore, gfBaseConfig;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
      Label = module.Label;
      Node = module.Node;
      v3 = module.v3;
      tween = module.tween;
      Button = module.Button;
    }, function (module) {
      gfCutSceneItem = module.gfCutSceneItem;
    }, function (module) {
      fadeOut = module.fadeOut;
      stopAllActions = module.stopAllActions;
    }, function (module) {
      formatCoin = module.formatCoin;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gf3DParticle = module.gf3DParticle;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "36a4cPBh6pHfrE6FP8Gk35n", "gfCuSceneJackpotWin", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfCuSceneJackpotWin = exports('GfCuSceneJackpotWin', (_dec = ccclass('GfCuSceneJackpotWin'), _dec2 = property(Component), _dec3 = property(Label), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_gfCutSceneItem) {
        _inheritsLoose(GfCuSceneJackpotWin, _gfCutSceneItem);

        function GfCuSceneJackpotWin() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfCutSceneItem.call.apply(_gfCutSceneItem, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "blackLayer", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "txtCoin", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "particleCoin", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "animNode", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "winFrame", _descriptor5, _assertThisInitialized(_this));

          _this.tweenCoin = void 0;
          _this._coinValue = 0;
          _this.winValue = 0;
          _this._duration = 9;
          return _this;
        }

        var _proto = GfCuSceneJackpotWin.prototype;

        _proto.extendShow = function extendShow(content, callback) {
          this.setWinValue(content.jackpotAmount);
          this.start();
        };

        _proto.setWinValue = function setWinValue(value) {
          this.winValue = value;
        };

        _proto._updateCoinWin = function _updateCoinWin() {
          this.txtCoin.string = formatCoin(this._coinValue);
        };

        _proto.start = function start() {
          var _this2 = this;

          this.txtCoin.string = "0";
          this.winFrame.active = false;
          this.animNode.scale.set(v3(0, 0, 1));
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.STOP_ALL_AUDIO);
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.DRAGON_BIG_WIN);
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_EFFECT_JACKPOT_COIN);
          this.particleCoin.active = true;
          this.particleCoin.getComponent(gf3DParticle).startAnimation();
          this.winFrame.active = true;
          this.winFrame.scale.set(1, 0.2);
          tween(this.winFrame).to(0.1, {
            scale: v3(1, 1, 1)
          }).start();
          tween(this.animNode).to(0.25, {
            scale: v3(1, 1, 1)
          }).start();
          this.scheduleOnce(function () {
            _this2.winFrame.getComponent(Button).interactable = true;
          }, 0.65);

          this._tweenCoin();
        };

        _proto._tweenCoin = function _tweenCoin() {
          var _this3 = this;

          var superValue = this.winValue * 0.75;
          var megaValue = this.winValue * 0.5;
          this.tweenCoin = tween(this).to(this._duration / 3, null, {
            onUpdate: function onUpdate(target, ratio) {
              _this3.coinValue = ratio * megaValue;
            }
          }).to(this._duration / 3, null, {
            onUpdate: function onUpdate(target, ratio) {
              _this3.coinValue = _this3.coinValue + ratio * (superValue - _this3.coinValue);
            }
          }).to(this._duration / 3, null, {
            onUpdate: function onUpdate(target, ratio) {
              _this3.coinValue = _this3.coinValue + (_this3.winValue - _this3.coinValue) * ratio;
            }
          }).call(function () {
            _this3.hide();
          });
          this.tweenCoin.start();
        };

        _proto.quickShow = function quickShow() {
          var _this4 = this;

          if (this.coinValue === this.winValue) {
            return;
          }

          this.winFrame.active = false;
          this.blackLayer.getComponent(Button).interactable = false;
          this.tweenCoin.stop();
          this.tweenCoin = tween(this).to(1, null, {
            onUpdate: function onUpdate(target, ratio) {
              _this4.coinValue = _this4.coinValue + (_this4.winValue - _this4.coinValue) * ratio;
            }
          }).delay(1).call(function () {
            _this4.hide();
          }).start();
        };

        _proto.hide = function hide() {
          var _this5 = this;

          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.STOP_EFFECT_JACKPOT_COIN);
          gfDataStore.instance.curBGMusic = null;
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_SOUND_BACKGROUND, gfBaseConfig.instance.SOUND_BACKGROUND_CONFIG.IN_GAME);
          tween(this.node).delay(.5).then(fadeOut(0.5)).call(function () {
            _this5.particleCoin.getComponent(gf3DParticle).stopAnimation();

            gfEventEmitter.instance.emit(gfBaseEvents.DRAGON.JACKPOT_WINAMOUNT_POPUP_CLOSE);
            gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.CHECK_QUEUE_ANIM);

            _gfCutSceneItem.prototype.hide.call(_this5);
          }).removeSelf().start();
        };

        _proto.onDestroy = function onDestroy() {
          stopAllActions(this.node);

          if (!gfDataStore.instance || !gfEventEmitter.instance) {
            return;
          }

          if (this.tweenCoin) {
            gfDataStore.instance.curBGMusic = null;
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.STOP_EFFECT_JACKPOT_COIN);
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_SOUND_BACKGROUND, gfBaseConfig.instance.SOUND_BACKGROUND_CONFIG.IN_GAME);
            this.tweenCoin.stop();
          }
        };

        _createClass(GfCuSceneJackpotWin, [{
          key: "coinValue",
          get: function get() {
            return this._coinValue;
          },
          set: function set(value) {
            this._coinValue = value;

            this._updateCoinWin();
          }
        }]);

        return GfCuSceneJackpotWin;
      }(gfCutSceneItem), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "blackLayer", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "txtCoin", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "particleCoin", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "animNode", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "winFrame", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfCustomDataType.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, _decorator, AnimationClip, sp, SpriteFrame, Font;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      AnimationClip = module.AnimationClip;
      sp = module.sp;
      SpriteFrame = module.SpriteFrame;
      Font = module.Font;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _dec4, _dec5, _dec6, _class4, _class5, _descriptor3, _descriptor4, _dec7, _dec8, _dec9, _class7, _class8, _descriptor5, _descriptor6, _dec10, _dec11, _dec12, _class10, _class11, _descriptor7, _descriptor8, _dec13, _dec14, _dec15, _class13, _class14, _descriptor9, _descriptor10, _dec16, _dec17, _dec18, _class16, _class17, _descriptor11, _descriptor12, _dec19, _dec20, _dec21, _class19, _class20, _descriptor13, _descriptor14, _dec22, _dec23, _dec24, _class22, _class23, _descriptor15, _descriptor16, _dec25, _dec26, _class25, _class26, _descriptor17, _descriptor18, _dec27, _dec28, _dec29, _class28, _class29, _descriptor19, _descriptor20, _dec30, _dec31, _dec32, _class31, _class32, _descriptor21, _descriptor22;

      cclegacy._RF.push({}, "7e8d4aBKjZHD7Jyk/cIgLo4", "gfCustomDataType", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfSpriteFishAsset = exports('gfSpriteFishAsset', (_dec = ccclass('gfSpriteFishAsset'), _dec2 = property(AnimationClip), _dec3 = property({
        visible: true
      }), _dec(_class = (_class2 = function gfSpriteFishAsset() {
        _initializerDefineProperty(this, "animation", _descriptor, this);

        _initializerDefineProperty(this, "_name", _descriptor2, this);
      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "animation", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_name", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      })), _class2)) || _class));
      var gfSpineFishAsset = exports('gfSpineFishAsset', (_dec4 = ccclass('gfSpineFishAsset'), _dec5 = property(sp.SkeletonData), _dec6 = property({
        visible: true
      }), _dec4(_class4 = (_class5 = function gfSpineFishAsset() {
        _initializerDefineProperty(this, "animation", _descriptor3, this);

        _initializerDefineProperty(this, "_name", _descriptor4, this);
      }, (_descriptor3 = _applyDecoratedDescriptor(_class5.prototype, "animation", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class5.prototype, "_name", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      })), _class5)) || _class4));
      var gfBulletAsset = exports('gfBulletAsset', (_dec7 = ccclass('gfBulletAsset'), _dec8 = property(SpriteFrame), _dec9 = property({
        visible: true
      }), _dec7(_class7 = (_class8 = function gfBulletAsset() {
        _initializerDefineProperty(this, "sprite", _descriptor5, this);

        _initializerDefineProperty(this, "_name", _descriptor6, this);
      }, (_descriptor5 = _applyDecoratedDescriptor(_class8.prototype, "sprite", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6 = _applyDecoratedDescriptor(_class8.prototype, "_name", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      })), _class8)) || _class7));
      var gfFreezeItemFXAsset = exports('gfFreezeItemFXAsset', (_dec10 = ccclass('gfFreezeItemFXAsset'), _dec11 = property(AnimationClip), _dec12 = property({
        visible: true
      }), _dec10(_class10 = (_class11 = function gfFreezeItemFXAsset() {
        _initializerDefineProperty(this, "animation", _descriptor7, this);

        _initializerDefineProperty(this, "_name", _descriptor8, this);
      }, (_descriptor7 = _applyDecoratedDescriptor(_class11.prototype, "animation", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor8 = _applyDecoratedDescriptor(_class11.prototype, "_name", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      })), _class11)) || _class10));
      var gfNetFXAsset = exports('gfNetFXAsset', (_dec13 = ccclass('gfNetFXAsset'), _dec14 = property(sp.SkeletonData), _dec15 = property({
        visible: true
      }), _dec13(_class13 = (_class14 = function gfNetFXAsset() {
        _initializerDefineProperty(this, "animation", _descriptor9, this);

        _initializerDefineProperty(this, "_name", _descriptor10, this);
      }, (_descriptor9 = _applyDecoratedDescriptor(_class14.prototype, "animation", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor10 = _applyDecoratedDescriptor(_class14.prototype, "_name", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      })), _class14)) || _class13));
      var gfCoinAsset = exports('gfCoinAsset', (_dec16 = ccclass('gfCoinAsset'), _dec17 = property(AnimationClip), _dec18 = property({
        visible: true
      }), _dec16(_class16 = (_class17 = function gfCoinAsset() {
        _initializerDefineProperty(this, "animation", _descriptor11, this);

        _initializerDefineProperty(this, "_name", _descriptor12, this);
      }, (_descriptor11 = _applyDecoratedDescriptor(_class17.prototype, "animation", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor12 = _applyDecoratedDescriptor(_class17.prototype, "_name", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      })), _class17)) || _class16));
      var gfDragonBallAsset = exports('gfDragonBallAsset', (_dec19 = ccclass('gfDragonBallAsset'), _dec20 = property(SpriteFrame), _dec21 = property({
        visible: true
      }), _dec19(_class19 = (_class20 = function gfDragonBallAsset() {
        _initializerDefineProperty(this, "sprite", _descriptor13, this);

        _initializerDefineProperty(this, "_name", _descriptor14, this);
      }, (_descriptor13 = _applyDecoratedDescriptor(_class20.prototype, "sprite", [_dec20], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor14 = _applyDecoratedDescriptor(_class20.prototype, "_name", [_dec21], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      })), _class20)) || _class19));
      var gfLabelCoinAsset = exports('gfLabelCoinAsset', (_dec22 = ccclass('gfLabelCoinAsset'), _dec23 = property(Font), _dec24 = property({
        visible: true
      }), _dec22(_class22 = (_class23 = function gfLabelCoinAsset() {
        _initializerDefineProperty(this, "font", _descriptor15, this);

        _initializerDefineProperty(this, "_name", _descriptor16, this);
      }, (_descriptor15 = _applyDecoratedDescriptor(_class23.prototype, "font", [_dec23], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor16 = _applyDecoratedDescriptor(_class23.prototype, "_name", [_dec24], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      })), _class23)) || _class22));
      var gfJackpotStatic = exports('gfJackpotStatic', (_dec25 = ccclass('gfJackpotStatic'), _dec26 = property(SpriteFrame), _dec25(_class25 = (_class26 = function gfJackpotStatic() {
        _initializerDefineProperty(this, "name", _descriptor17, this);

        _initializerDefineProperty(this, "static", _descriptor18, this);
      }, (_descriptor17 = _applyDecoratedDescriptor(_class26.prototype, "name", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class26.prototype, "static", [_dec26], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class26)) || _class25));
      var gfGunSkeletonData = exports('gfGunSkeletonData', (_dec27 = ccclass('gfGunSkeletonData'), _dec28 = property({
        visible: true
      }), _dec29 = property(sp.SkeletonData), _dec27(_class28 = (_class29 = function gfGunSkeletonData() {
        _initializerDefineProperty(this, "_name", _descriptor19, this);

        _initializerDefineProperty(this, "animation", _descriptor20, this);
      }, (_descriptor19 = _applyDecoratedDescriptor(_class29.prototype, "_name", [_dec28], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor20 = _applyDecoratedDescriptor(_class29.prototype, "animation", [_dec29], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class29)) || _class28));
      var EnvObjectAsset = exports('EnvObjectAsset', (_dec30 = ccclass('EnvObjectAsset'), _dec31 = property({
        visible: true
      }), _dec32 = property(SpriteFrame), _dec30(_class31 = (_class32 = function EnvObjectAsset() {
        _initializerDefineProperty(this, "_name", _descriptor21, this);

        _initializerDefineProperty(this, "sprite", _descriptor22, this);
      }, (_descriptor21 = _applyDecoratedDescriptor(_class32.prototype, "_name", [_dec31], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor22 = _applyDecoratedDescriptor(_class32.prototype, "sprite", [_dec32], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class32)) || _class31));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfCutSceneItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfActionHelper.ts', './utils.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, tween, log, Tween, Component, call, delay, setOpacity;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      tween = module.tween;
      log = module.log;
      Tween = module.Tween;
      Component = module.Component;
    }, function (module) {
      call = module.call;
      delay = module.delay;
    }, function (module) {
      setOpacity = module.setOpacity;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "5e27fpLouRPtJkozKYizg3I", "gfCutSceneItem", undefined);

      var ccclass = _decorator.ccclass;
      var gfCutSceneItem = exports('gfCutSceneItem', (_dec = ccclass('gfCutSceneItem'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfCutSceneItem, _Component);

        function gfCutSceneItem() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = gfCutSceneItem.prototype;

        _proto.onLoad = function onLoad() {
          this.node.active = false;
          setOpacity(this.node, 0);
          this.node['show'] = this.show.bind(this);
          this.node['hide'] = this.hide.bind(this);
          this.node['resetOnExit'] = this.resetOnExit.bind(this);
        };

        _proto.show = function show(content, callback) {
          this.node.active = true;
          setOpacity(this.node, 255);
          this.extendShow(content, callback);
        };

        _proto.extendShow = function extendShow(content, callback) {
          var _this = this; // Overwrite here


          tween(this.node).then(call(function () {
            log("Content", content);
          })).then(delay(2)).then(call(function () {
            if (callback && typeof callback === 'function') {
              callback();
            }

            _this.hide();
          }));
        };

        _proto.hide = function hide() {
          Tween.stopAllByTarget(this.node);
          this.node.active = false;
          setOpacity(this.node, 0);
          this.node.removeFromParent();
          this.node.destroy();
        };

        _proto.resetOnExit = function resetOnExit() {};

        return gfCutSceneItem;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfCutSceneLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseConfig.ts', './gfBaseEvents.ts', './gfUtilities.ts', './utils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, instantiate, isValid, Component, gfBaseConfig, gfBaseEvents, SetZIndex, registerEvent, removeEvents, convertAssetArrayToObject;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      instantiate = module.instantiate;
      isValid = module.isValid;
      Component = module.Component;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      SetZIndex = module.SetZIndex;
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      convertAssetArrayToObject = module.convertAssetArrayToObject;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "1d7bcUxjolBO5vxnSUWWlQw", "gfCutSceneLayer", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfCutSceneLayer = exports('gfCutSceneLayer', (_dec = ccclass('gfCutSceneLayer'), _dec2 = property(Prefab), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfCutSceneLayer, _Component);

        function gfCutSceneLayer() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "listCutScene", _descriptor, _assertThisInitialized(_this));

          _this._listNodeCutScene = [];
          _this.cutSceneAssets = null;
          return _this;
        }

        var _proto = gfCutSceneLayer.prototype;

        _proto.onLoad = function onLoad() {
          this.setZIndex();
          this.cutSceneAssets = convertAssetArrayToObject(this.listCutScene);
          this.initEvents();
        };

        _proto.setZIndex = function setZIndex() {
          SetZIndex(this.node, gfBaseConfig.instance.Z_INDEX.CUTSCENE);
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.resetOnExit, this);
          registerEvent(gfBaseEvents.COMMON.GAME_SHOW, this.resetOnExit, this);
          registerEvent(gfBaseEvents.CUT_SCENE.SHOW_CUT_SCENE, this.showCutScene, this);
          registerEvent(gfBaseEvents.CUT_SCENE.HIDE_CUT_SCENE, this.hideCutScene, this);
          registerEvent(gfBaseEvents.CUT_SCENE.HIDE_ALL_CUT_SCENE, this.hideAllCutScene, this);
        };

        _proto.showCutScene = function showCutScene(name, content, callback) {
          if (name === void 0) {
            name = "";
          }

          if (content === void 0) {
            content = null;
          }

          var cutScenePrefab = this.cutSceneAssets[name];
          if (!cutScenePrefab) return;
          var cutSceneItem = instantiate(cutScenePrefab);
          cutSceneItem.parent = this.node;
          cutSceneItem.show(content, callback);

          this._listNodeCutScene.push(cutSceneItem);
        };

        _proto.hideCutScene = function hideCutScene(name) {
          if (name === void 0) {
            name = "";
          } //TODO: implement later


          var cutscene = this.getCutSceneByName(name);
          if (!cutscene) return;
          cutscene.hide();
          this._listNodeCutScene = this._listNodeCutScene.filter(function (cutscene) {
            return cutscene.name !== name;
          });
        };

        _proto.hideAllCutScene = function hideAllCutScene() {
          this._listNodeCutScene.forEach(function (item) {
            if (isValid(item)) {
              item.resetOnExit();
              item.destroy();
            }
          });

          this._listNodeCutScene.length = 0;
        };

        _proto.getCutSceneByName = function getCutSceneByName(name) {
          return this._listNodeCutScene.find(function (cutscene) {
            return cutscene.name === name;
          });
        };

        _proto.resetOnExit = function resetOnExit() {
          this.hideAllCutScene();
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return gfCutSceneLayer;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "listCutScene", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfCutSceneWin.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfCutSceneItem.ts', './animateNumberLabel.ts', './gfActionHelper.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Component, Node, tween, Button, gfCutSceneItem, AnimateNumberLabel, stopAllActions;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
      Node = module.Node;
      tween = module.tween;
      Button = module.Button;
    }, function (module) {
      gfCutSceneItem = module.gfCutSceneItem;
    }, function (module) {
      AnimateNumberLabel = module.AnimateNumberLabel;
    }, function (module) {
      stopAllActions = module.stopAllActions;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "db4968kfPlKYZIinqpJhYyL", "gfCutSceneWin", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfCutSceneWin = exports('gfCutSceneWin', (_dec = ccclass('gfCutSceneWin'), _dec2 = property(Component), _dec3 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_gfCutSceneItem) {
        _inheritsLoose(gfCutSceneWin, _gfCutSceneItem);

        function gfCutSceneWin() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfCutSceneItem.call.apply(_gfCutSceneItem, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "overlay", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "txtCoin", _descriptor2, _assertThisInitialized(_this));

          _this.CONFIG_TIME = void 0;
          _this.callbackFunc = void 0;
          _this.winValue = 0;
          _this.isQuickShow = void 0;
          return _this;
        }

        var _proto = gfCutSceneWin.prototype;

        _proto.onLoad = function onLoad() {
          _gfCutSceneItem.prototype.onLoad.call(this);

          this.CONFIG_TIME = {
            START: 2,
            IDLE: 6,
            END: 1
          };
        };

        _proto.extendShow = function extendShow(content, callback) {
          var _this2 = this;

          this.resetCutScene();
          this.callbackFunc = callback;
          this.winValue = content.GoldReward;
          tween(this.node).call(function () {
            _this2.animStart();
          }).delay(this.CONFIG_TIME.START).call(function () {
            _this2.animIdle();
          }).delay(this.CONFIG_TIME.IDLE).call(function () {
            _this2.animEnd();
          }).start();
        };

        _proto.animStart = function animStart() {};

        _proto.animIdle = function animIdle() {
          this.overlay.getComponent(Button).interactable = true;
          this.txtCoin.active = true;
          this.txtCoin.getComponent(AnimateNumberLabel).onUpdateValue(this.winValue, (this.CONFIG_TIME.IDLE - 2) * 1000);
        };

        _proto.animEnd = function animEnd() {
          var _this3 = this;

          this.txtCoin.active = false;
          stopAllActions(this.node);
          tween(this.node).delay(this.CONFIG_TIME.END).call(function () {
            if (_this3.callbackFunc && typeof _this3.callbackFunc === 'function') {
              _this3.callbackFunc();
            }

            _this3.node.destroy();
          }).start();
        };

        _proto.resetCutScene = function resetCutScene() {
          this.isQuickShow = false;
          this.overlay.getComponent(Button).interactable = false;
          this.txtCoin.getComponent(AnimateNumberLabel).resetValue();
          this.txtCoin.active = false;
          stopAllActions(this.node);
        };

        _proto.quickShow = function quickShow() {
          var _this4 = this;

          if (this.isQuickShow) return; //cc.warn("quickShow");

          this.isQuickShow = true;
          stopAllActions(this.node);
          tween(this.node).call(function () {
            _this4.txtCoin.getComponent(AnimateNumberLabel).onUpdateValue(_this4.winValue, 500);
          }).delay(1.5).call(function () {
            _this4.animEnd();
          }).start();
        };

        return gfCutSceneWin;
      }(gfCutSceneItem), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "overlay", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "txtCoin", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfDataStore.ts", ['cc', './gfUtilities.ts', './gfBaseConfig.ts'], function (exports) {
  'use strict';

  var cclegacy, isEmpty, gfBaseConfig;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      isEmpty = module.isEmpty;
    }, function (module) {
      gfBaseConfig = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "85e1bKgh5VG1ZymH+Qp38JU", "gfDataStore", undefined);

      var gfDataStore = exports('default', /*#__PURE__*/function () {
        function gfDataStore() {
          this.listJackpotBet = void 0;
          this.selfInfo = void 0;
          this.GunValue = void 0;
          this.targetState = void 0;
          this.currentTargetState = void 0;
          this.jackpotValue = void 0;
          this.currentRoom = void 0;
          this.currentSceneName = void 0;
          this.deltaTime = void 0;
          this.mousePos = void 0;
          this.listCatchLaser = void 0;
          this.isEnableBGM = void 0;
          this.isEnableSFX = void 0;
          this.currSound = void 0;
          this.currMusic = void 0;
          this.reachMaxNumBullet = void 0;
          this.botSetting = void 0;
          this.FireSpeed = void 0;
          this.ChangeTarget = void 0;
          this.oldTarget = void 0;
          this.curBGMusic = void 0;
          this.timeHide = void 0;
          this.isPlayingLoadingTransition = false;
          gfDataStore.instance = this;
          this.selfInfo = {
            UserID: "",
            Wallet: 0,
            PromotionWallet: 0,
            Username: "TestUser",
            Avatar: "Avatar0",
            DeskStation: null,
            LockFish: null,
            LockFishKind: -1,
            LockFishID: null,
            isLockGun: false,
            skillLaser: false,
            autoState: 0,
            listItem: [],
            DeskId: '',
            TargetTime: null,
            isPriorityTargetBoss: false,
            skillLock: 0,
            cpm: null,
            pek: null,
            isReadyToPlay: false,
            VipLevel: 0,
            EventInfo: null
          };
          this.listJackpotBet = "50-60-70-80-90-a0-b0";
          this.GunValue = [];
          this.targetState = 0;
          this.currentTargetState = 0;
          this.jackpotValue = 0;
          this.currentRoom = null;
          this.currentSceneName = null;
          this.deltaTime = 0;
          this.mousePos = null;
          this.listCatchLaser = [];
          this.isEnableBGM = false;
          this.isEnableSFX = false;
          this.currSound = 0;
          this.currMusic = 0;
          this.reachMaxNumBullet = false;
          this.ChangeTarget = 5;
          this.botSetting = {
            fishKindArr: [],
            bulletValue: 0,
            duration: 0,
            botStarted: 0,
            autoCountdown: 0,
            bulletIndex: 0
          };
          this.FireSpeed = {
            NORMAL: 0.25,
            TURBO: 0.15
          };
          this.oldTarget = {
            targetState: null,
            LockFishKind: null,
            LockFishID: null
          };
          this.curBGMusic = null;
          this.timeHide = null;
        }

        var _proto = gfDataStore.prototype;

        _proto.setSelfInfo = function setSelfInfo(data) {
          var _this = this;

          if (!isEmpty(data)) {
            Object.keys(data).forEach(function (key) {
              _this.selfInfo[key] = data[key];
            });
          }
        };

        _proto.getSelfInfo = function getSelfInfo() {
          return this.selfInfo;
        };

        _proto.getJackpotValue = function getJackpotValue() {
          return this.jackpotValue;
        };

        _proto.setDataStore = function setDataStore(dataStore) {
          var _this2 = this;

          if (!isEmpty(dataStore)) {
            Object.keys(dataStore).forEach(function (key) {
              _this2[key] = dataStore[key];
            });
          }
        };

        _proto.parseLoginGame = function parseLoginGame(data) {
          var _this3 = this;

          if (!isEmpty(data)) {
            Object.keys(data).forEach(function (key) {
              _this3.selfInfo[key] = data[key];
            });

            if (data.BetConfig) {
              this.parseBetConfig(data.BetConfig);
            }

            if (data.KindID) {
              this.currentRoom = data.KindID;
            }

            if (data.itemInfo) {
              this.parseListItemConfig(data.itemInfo.listItem);
            }

            this.parseFireSpeed(data.FireSpeed);

            if (data.TargetTime) {
              this.ChangeTarget = data.TargetTime;
            }
          }
        };

        _proto.parseFireSpeed = function parseFireSpeed(data) {
          if (!data.FireSpeed) return;
          this.FireSpeed.NORMAL = data[1];
          this.FireSpeed.TURBO = data[0];
        };

        _proto.getCurrentSceneName = function getCurrentSceneName() {
          return this.currentSceneName;
        };

        _proto.getCurrentRoom = function getCurrentRoom() {
          return this.currentRoom;
        };

        _proto.setCurrentRoom = function setCurrentRoom(kind) {
          this.currentRoom = kind;
        } //ID = 1 : ice
        ;

        _proto.parseListItemConfig = function parseListItemConfig(lstItem) {
          for (var i = 0; i < lstItem.length; i++) {
            this.selfInfo.listItem[lstItem[i].ID] = lstItem[i].amount;
          }
        };

        _proto.parseBetConfig = function parseBetConfig(data) {
          for (var i = 0; i < data.length; ++i) {
            this.GunValue[i] = data[i];
          }
        };

        _proto.clearSelfInfo = function clearSelfInfo() {
          this.selfInfo.DeskId = '';
        };

        _proto.getSelfDeskStation = function getSelfDeskStation() {
          return this.selfInfo.DeskStation;
        };

        _proto.getBulletIndex = function getBulletIndex(bulletMultiple) {
          for (var i = 0; i < this.GunValue.length; ++i) {
            if (bulletMultiple == this.GunValue[i]) return i;
          }

          return 0;
        };

        _proto.getGunValue = function getGunValue() {
          return this.GunValue;
        };

        _proto.getTotalGun = function getTotalGun() {
          return this.GunValue.length;
        };

        _proto.checkWallet = function checkWallet() {
          return this.selfInfo.Wallet > 0;
        };

        _proto.getWallet = function getWallet() {
          return this.selfInfo.Wallet;
        };

        _proto.getTargetState = function getTargetState() {
          return this.targetState;
        };

        _proto.getCurrentTargetStage = function getCurrentTargetStage() {
          return this.currentTargetState;
        };

        _proto.getMousePos = function getMousePos() {
          return this.mousePos;
        };

        _proto.getListCatchLaser = function getListCatchLaser() {
          return this.listCatchLaser;
        };

        _proto.getIsEnableSFX = function getIsEnableSFX() {
          return this.isEnableSFX;
        };

        _proto.setIsEnableSFX = function setIsEnableSFX(isEnableSFX) {
          this.isEnableSFX = isEnableSFX;
        };

        _proto.getIsEnableBGM = function getIsEnableBGM() {
          return this.isEnableBGM;
        };

        _proto.setIsEnableBGM = function setIsEnableBGM(isEnableBGM) {
          this.isEnableBGM = isEnableBGM;
        };

        _proto.getCurrentSFXVolume = function getCurrentSFXVolume() {
          return this.currSound;
        };

        _proto.setCurrentSFXVolume = function setCurrentSFXVolume(volume) {
          this.currSound = volume;
        };

        _proto.getCurrentBGMVolume = function getCurrentBGMVolume() {
          return this.currMusic;
        };

        _proto.setCurrentBGMVolume = function setCurrentBGMVolume(volume) {
          this.currMusic = volume;
        };

        _proto.getCurBGMusic = function getCurBGMusic() {
          return this.curBGMusic;
        };

        _proto.setCurBGMusic = function setCurBGMusic(curBGMusic) {
          this.curBGMusic = curBGMusic;
        };

        _proto.updateDeltaTime = function updateDeltaTime(serverTime) {
          if (serverTime) {
            this.deltaTime = Date.now() - serverTime;
          } else {
            this.deltaTime = 0;
          }
        };

        _proto.getTime = function getTime() {
          return Date.now() - this.deltaTime;
        };

        _proto.setBotSetting = function setBotSetting(data) {
          var _this4 = this;

          if (!isEmpty(data)) {
            Object.keys(data).forEach(function (key) {
              _this4.botSetting[key] = data[key];
            });
          }
        };

        _proto.getBotSetting = function getBotSetting() {
          return this.botSetting;
        };

        _proto.isAutoPaused = function isAutoPaused() {
          return this.targetState === gfBaseConfig.instance.TARGET_LOCK.PAUSE;
        };

        _proto.isReachMaxNumBullet = function isReachMaxNumBullet() {
          return this.reachMaxNumBullet;
        };

        _proto.saveCurrentTarget = function saveCurrentTarget() {
          if (this.targetState === gfBaseConfig.instance.TARGET_LOCK.NONE) return;
          this.oldTarget.targetState = this.targetState;
          this.oldTarget.LockFishKind = this.selfInfo.LockFishKind;

          if (this.selfInfo.LockFish) {
            this.oldTarget.LockFishID = this.selfInfo.LockFish._FishID;
          }
        };

        _proto.getTimeHide = function getTimeHide() {
          return this.timeHide;
        };

        _proto.clearOldTarget = function clearOldTarget() {
          this.oldTarget = {
            targetState: null,
            LockFishKind: null,
            LockFishID: null
          };
        };

        _proto.getOldTarget = function getOldTarget() {
          return this.oldTarget;
        };

        _proto.getIsReadyToPlay = function getIsReadyToPlay() {
          return this.selfInfo.isReadyToPlay;
        };

        _proto.getItemSkillById = function getItemSkillById(id) {
          //@ts-ignore
          return this.selfInfo.listItem.find(function (e) {
            return e.ID === id;
          });
        };

        _proto.setListItemSkillByData = function setListItemSkillByData(data) {
          if (!isEmpty(data)) {
            var listItem = this.selfInfo.listItem; //@ts-ignore

            for (var i = 0; i < listItem.length; i++) {
              if (listItem[i].ID === data.ID) {
                listItem[i] = data;
              }
            }
          }
        };

        _proto.getEventInfo = function getEventInfo() {
          return this.selfInfo.EventInfo;
        };

        _proto.clearEventInfo = function clearEventInfo() {
          this.selfInfo.EventInfo = null;
        };

        _proto.destroy = function destroy() {
          gfDataStore.instance = null;
        };

        return gfDataStore;
      }());
      gfDataStore.instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfDragon.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfDragonCacheData.ts', './gfBaseConfig.ts', './gfEventEmitter.ts', './gfBaseEvents.ts', './gfDataStore.ts', './gfUtilities.ts', './gfBaseFish.ts', './gfActionHelper.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, Color, _decorator, sp, sys, UIOpacity, UITransform, Vec3, tween, v3, BoneCacheValue, gfBaseConfig, gfEventEmitter, gfBaseEvents, gfDataStore, SetZIndex, isPointInScreen, gfBaseFish, stopAllActions, fadeOut;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      Color = module.Color;
      _decorator = module._decorator;
      sp = module.sp;
      sys = module.sys;
      UIOpacity = module.UIOpacity;
      UITransform = module.UITransform;
      Vec3 = module.Vec3;
      tween = module.tween;
      v3 = module.v3;
    }, function (module) {
      BoneCacheValue = module.BoneCacheValue;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      SetZIndex = module.SetZIndex;
      isPointInScreen = module.isPointInScreen;
    }, function (module) {
      gfBaseFish = module.gfBaseFish;
    }, function (module) {
      stopAllActions = module.stopAllActions;
      fadeOut = module.fadeOut;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "558eeXCIjhNK6dXof0Xebcv", "gfDragon", undefined);

      var animationList = ["Swim In", "Swim Out", "Swim Loop"];
      var TIME_ANIM_SWIM_IN = 5.997;
      var TIME_ANIM_SWIM_LOOP = 29.985;
      var TIME_ANIM_SWIM_OUT = 5.997;
      var BASE_TIME_SCALE = 1 / 6;
      var TOTAL_LIVE_TIME = 42;
      var FLAG_COLOR = new Color(230, 230, 230, 255);
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfDragon = exports('gfDragon', (_dec = ccclass('gfDragon'), _dec2 = property(sp.Skeleton), _dec(_class = (_class2 = /*#__PURE__*/function (_gfBaseFish) {
        _inheritsLoose(gfDragon, _gfBaseFish);

        function gfDragon() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfBaseFish.call.apply(_gfBaseFish, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "fishAnim", _descriptor, _assertThisInitialized(_this));

          _this.listBox = void 0;
          _this.durationMap = void 0;
          _this.listBoneName = void 0;
          _this.bone = void 0;
          _this._timeRemain = void 0;
          _this._mainMaterial = void 0;
          _this._isLoaded = false;
          _this.curAnimTime = void 0;
          _this.curAnimName = void 0;
          return _this;
        }

        var _proto = gfDragon.prototype;

        _proto.onLoad = function onLoad() {
          SetZIndex(this.node, gfBaseConfig.instance.Z_INDEX.DRAGON);
          this.fishAnim = this.node.getComponent(sp.Skeleton);
          this.fishAnim.setAnimationCacheMode(sp.Skeleton.AnimationCacheMode.REALTIME);
        };

        _proto.start = function start() {
          if (!this._isLoaded) {
            this.setupBones();
          }
        };

        _proto.setupBones = function setupBones() {
          this.durationMap = {};

          for (var i = 0; i < animationList.length; i++) {
            var animName = animationList[i];
            var pos = this.fishAnim.skeletonData._skeletonJson.animations[animName].paths['Path Loop'].position;
            var duration = pos[pos.length - 1].time / BASE_TIME_SCALE;
            this.durationMap[animName] = duration;
          }

          this.listBoneName = ["Head", "Body 3", "Body 6", "Body 9", "Body 12", "Body 15", "Body 18", "Body 21", "Body 24", "Body 27", "Body 30", "Body 33", "Body 36", "Body 39", "Body 42", "Body 45", "Body 47", "All Tail Position"];
          this.bone = [];

          if (!sys.isNative) {
            for (var _i = 0; _i < this.listBoneName.length; _i++) {
              this.bone[_i] = this.fishAnim.findBone(this.listBoneName[_i]);
            }
          }

          this._isLoaded = true;
        };

        _proto.getListBox = function getListBox() {
          return this.listBox;
        };

        _proto.initFishData = function initFishData(data) {
          this._isDie = false;
          this._isOutScreen = true;
          this.node.getComponent(UIOpacity).opacity = 255;
          this.node.active = true;
          this._FishID = data.FishID;
          this._FishKind = data.FishKind;
          this.unscheduleAllCallbacks();
          this.fishAnim.color = Color.WHITE;
          stopAllActions(this.fishAnim.node);
          var timeRemain = TOTAL_LIVE_TIME - Math.max(0, (gfDataStore.instance.getTime() - data.BuildTick) / 1000);

          if (!this._isLoaded) {
            this.setupBones();
          }

          this.startMoving(timeRemain);
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_SOUND_BACKGROUND, gfBaseConfig.instance.SOUND_BACKGROUND_CONFIG.DRAGON);
        };

        _proto.setDragonAnim = function setDragonAnim(trackInd, animName, loop, timePassed) {
          if (timePassed === void 0) {
            timePassed = 0;
          }

          if (!this._isDie) {
            if (animName === "Swim In" || animName === "Swim Out") {
              this.checkOutScreen();
              this.schedule(this.checkOutScreen, 0.2);
            } else {
              this.unschedule(this.checkOutScreen);
              this._isOutScreen = false;
            }
          }

          this.fishAnim.setAnimation(trackInd, animName, loop);

          if (timePassed > 0) {
            // @ts-ignore
            cc.sys.isNative ? this.fishAnim._updateRealtime(timePassed) : this.fishAnim.updateAnimation(timePassed);
          }

          this.curAnimTime = timePassed;
          this.curAnimName = animName;

          if (!BoneCacheValue[animName]) {
            BoneCacheValue[animName] = [];
          }
        };

        _proto.playEffectDie = function playEffectDie() {
          var _this2 = this;

          this.unschedule(this.checkOutScreen);
          this.fishAnim.timeScale = 0;
          stopAllActions(this.fishAnim.node);
          this.fishAnim.setCompleteListener(function () {});
          this.fishAnim.clearTrack(0);
          var explBones = [0, 14, 6, 17, 9];
          var explPositions = [];

          for (var i = 0; i < explBones.length; ++i) {
            explPositions.push(this.node.getComponent(UITransform).convertToWorldSpaceAR(new Vec3(this.bone[explBones[i]].worldX, this.bone[explBones[i]].worldY)));
          }

          gfEventEmitter.instance.emit(gfBaseEvents.DRAGON.SMALL_EXPLOSION, explPositions);
          tween(this.fishAnim.node).by(0.1, {
            position: v3(0, 10)
          }).by(0.1, {
            position: v3(0, -10)
          }).by(0.1, {
            position: v3(0, -10)
          }).by(0.1, {
            position: v3(10, 10)
          }).by(0.1, {
            position: v3(-10, 0)
          }).by(0.1, {
            position: v3(-10, 0)
          }).by(0.1, {
            position: v3(10, 0)
          }).by(0.1, {
            position: v3(0, 10)
          }).by(0.1, {
            position: v3(0, -10)
          }).by(0.1, {
            position: v3(0, -10)
          }).by(0.1, {
            position: v3(10, 10)
          }).by(0.1, {
            position: v3(-10, 0)
          }).by(0.1, {
            position: v3(-10, 0)
          }).by(0.1, {
            position: v3(10, 0)
          }).start();
          this.fishAnim.color = Color.RED;
          tween(this.fishAnim).repeat(3, tween().call(function () {
            _this2.fishAnim.color = Color.RED;
          }).delay(0.35).call(function () {
            _this2.fishAnim.color = Color.WHITE;
          }).delay(0.35)).call(function () {
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHAKE_SCREEN, {
              timeOneStep: 0.1,
              amplitude: 10
            });
            gfEventEmitter.instance.emit(gfBaseEvents.DRAGON.BIG_EXPLOSION, _this2.node.getComponent(UITransform).convertToWorldSpaceAR(_this2.node.getChildByName('Box6').position));
          }).then(fadeOut(0.1)).delay(0.75).call(function () {
            _this2.onDie();
          }).start();
        };

        _proto.startMoving = function startMoving(timeRemain) {
          var _this3 = this;

          this.node.setPosition(new Vec3(gfBaseConfig.instance.AppSize.Width / 2, gfBaseConfig.instance.AppSize.Height / 2));
          this.fishAnim.timeScale = BASE_TIME_SCALE;

          if (timeRemain <= TIME_ANIM_SWIM_OUT) {
            this.setDragonAnim(0, "Swim Out", false, TIME_ANIM_SWIM_OUT - timeRemain);
            this.fishAnim.setCompleteListener(function () {});
          } else if (timeRemain <= TIME_ANIM_SWIM_OUT + TIME_ANIM_SWIM_LOOP) {
            var swimLoopTimeLeft = timeRemain - TIME_ANIM_SWIM_OUT;
            this.setDragonAnim(0, "Swim Loop", false, TIME_ANIM_SWIM_LOOP - swimLoopTimeLeft);
            this.fishAnim.setCompleteListener(function () {
              _this3.setDragonAnim(0, "Swim Out", false);

              _this3.fishAnim.setCompleteListener(function () {});
            });
          } else {
            var swimInTimeLeft = timeRemain - TIME_ANIM_SWIM_OUT - TIME_ANIM_SWIM_LOOP;
            var timePassed = Math.max(TIME_ANIM_SWIM_IN - swimInTimeLeft, 0);
            this.setDragonAnim(0, "Swim In", false, timePassed);
            this.fishAnim.setCompleteListener(function () {
              _this3.setDragonAnim(0, "Swim Loop", false);

              _this3.fishAnim.setCompleteListener(function () {
                _this3.setDragonAnim(0, "Swim Out", false);

                _this3.fishAnim.setCompleteListener(function () {});
              });
            });
          }
        };

        _proto.onHit = function onHit() {
          var _this4 = this;

          this.fishAnim.color = FLAG_COLOR;
          this.scheduleOnce(function () {
            _this4.fishAnim.color = Color.WHITE;
          }, 0.1);
        };

        _proto.onCatch = function onCatch() {
          this._isDie = true;
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.DRAGON_DIE);
          this.playEffectDie();
        };

        _proto.onDie = function onDie(isResume) {
          if (isResume === void 0) {
            isResume = false;
          }

          if (!isResume) {
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_SOUND_BACKGROUND, gfBaseConfig.instance.SOUND_BACKGROUND_CONFIG.IN_GAME);
          }

          this._isDie = true;
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.REMOVE_FISH, this._FishID);
          this.node.removeFromParent();
        };

        _proto.update = function update(dt) {
          if (this._isDie) return;
        };

        _proto.checkOutScreen = function checkOutScreen() {
          var lastState = this._isOutScreen;
          var head = this.node.parent.getComponent(UITransform).convertToNodeSpaceAR(this.node.getComponent(UITransform).convertToWorldSpaceAR(new Vec3(this.node.getChildByName('Box1').position)));
          var tail = this.node.parent.getComponent(UITransform).convertToNodeSpaceAR(this.node.getComponent(UITransform).convertToWorldSpaceAR(new Vec3(this.node.getChildByName('Box12').position)));
          this._isOutScreen = !(isPointInScreen(head) || isPointInScreen(tail));

          if (lastState && !this._isOutScreen) {
            gfEventEmitter.instance.emit(gfBaseEvents.FISH_LAYER.BOSS_ON_GAME);
          }
        };

        _proto.getLockPositionByNodeSpace = function getLockPositionByNodeSpace(node) {
          var head = this.node.getComponent(UITransform).convertToWorldSpaceAR(new Vec3(this.node.getChildByName('Box1').position));
          var tail = this.node.getComponent(UITransform).convertToWorldSpaceAR(new Vec3(this.node.getChildByName('Box12').position));
          var body = this.node.getComponent(UITransform).convertToWorldSpaceAR(new Vec3(this.node.getChildByName('Box5').position));
          var bodyIndexList = [head, body, tail];

          for (var i = 0; i < bodyIndexList.length; ++i) {
            if (isPointInScreen(this.node.parent.getComponent(UITransform).convertToNodeSpaceAR(bodyIndexList[i]))) {
              return node.getComponent(UITransform).convertToNodeSpaceAR(bodyIndexList[i]);
            }
          }

          return node.getComponent(UITransform).convertToNodeSpaceAR(tail);
        };

        _proto.getBallDropPosition = function getBallDropPosition() {
          return this.node.getComponent(UITransform).convertToWorldSpaceAR(this.node.getChildByName('Box5').position);
        };

        _proto.onDestroy = function onDestroy() {};

        _proto.moveOut = function moveOut() {};

        _proto.onIced = function onIced() {};

        _proto.returnPool = function returnPool() {};

        return gfDragon;
      }(gfBaseFish), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "fishAnim", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfDragonBall.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfNode.ts', './gfBaseConfig.ts', './gfUtilities.ts', './utils.ts', './gfActionHelper.ts', './gfEventEmitter.ts', './gfBaseEvents.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Sprite, Node, UITransform, v3, Vec3, tween, gfNode, gfBaseConfig, autoEnum, SetZIndex, setOpacity, getRandomInt, randRange, fadeIn, fadeOut, rotateBy, moveTo, scaleTo, stopAllActions, gfEventEmitter, gfBaseEvents;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Node = module.Node;
      UITransform = module.UITransform;
      v3 = module.v3;
      Vec3 = module.Vec3;
      tween = module.tween;
    }, function (module) {
      gfNode = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      autoEnum = module.autoEnum;
      SetZIndex = module.SetZIndex;
    }, function (module) {
      setOpacity = module.setOpacity;
      getRandomInt = module.getRandomInt;
      randRange = module.randRange;
    }, function (module) {
      fadeIn = module.fadeIn;
      fadeOut = module.fadeOut;
      rotateBy = module.rotateBy;
      moveTo = module.moveTo;
      scaleTo = module.scaleTo;
      stopAllActions = module.stopAllActions;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;

      cclegacy._RF.push({}, "d9c9frW3PZCmJJSX44SpjTm", "gfDragonBall", undefined);

      var STATE = autoEnum(["Invalid", "Dropping", "InTray", "InJackpotStar"]);
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfDragonBall = exports('gfDragonBall', (_dec = ccclass('gfDragonBall'), _dec2 = property(Sprite), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Node), _dec7 = property(Node), _dec8 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_gfNode) {
        _inheritsLoose(gfDragonBall, _gfNode);

        function gfDragonBall() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfNode.call.apply(_gfNode, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "ballSprite", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "backEff", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "frontEff", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "ballSpark", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "hitGlow", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "hitLight", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "fireEfx", _descriptor7, _assertThisInitialized(_this));

          _this._state = void 0;
          _this.baseScale = void 0;
          _this.kind = void 0;
          return _this;
        }

        var _proto = gfDragonBall.prototype;

        _proto.initAssets = function initAssets(config) {
          this.ballSprite.spriteFrame = config.asset;
          this.baseScale = config.scale;
          this.kind = config.kind;
          SetZIndex(this.node, gfBaseConfig.instance.Z_INDEX.DRAGON_BALL);
        };

        _proto.dropToPlayer = function dropToPlayer(dragonPosition, playerBallHolder, deskStation) {
          var _this2 = this;

          var destination = this.node.parent.getComponent(UITransform).convertToNodeSpaceAR(playerBallHolder.getComponent(UITransform).convertToWorldSpaceAR(v3(0, 0)));
          setOpacity(this.ballSprite.node, 0);
          setOpacity(this.ballSpark, 0);
          setOpacity(this.hitGlow, 0);
          setOpacity(this.hitLight, 0);
          setOpacity(this.frontEff, 0); //@ts-ignore

          this._state = STATE.Dropping;
          var dropTime = 0.5;
          var sparkTime = 0.25;
          var zoomTime = 1;
          var stopTime = 0.5;
          var randomX = getRandomInt(-200, 200);
          var randomY = getRandomInt(-150, 150);
          var randomPos = new Vec3(randomX, randomY, 0);
          this.node.setPosition(dragonPosition);
          tween(this.ballSpark).then(fadeIn(sparkTime)).then(fadeOut(sparkTime)).start();
          tween(this.node).delay(sparkTime).call(function () {
            _this2.frontEff.active = true;
            _this2.backEff.active = true;
            setOpacity(_this2.frontEff, 255);
            setOpacity(_this2.backEff, 255);

            _this2.frontEff.scale.set(v3(0, 0, 0));

            _this2.backEff.scale.set(v3(0, 0, 0));

            tween(_this2.frontEff).to(zoomTime, {
              scale: v3(1, 1, 1)
            }).start();
            tween(_this2.frontEff).to(zoomTime, {
              scale: v3(1, 1, 1)
            }).start();
            tween(_this2.backEff).repeatForever(rotateBy(1, 360)).start();

            _this2.fireEfx.scale.set(v3(0, 0, 0));

            setOpacity(_this2.fireEfx, 255);
            _this2.fireEfx.active = true;
            tween(_this2.fireEfx).to(zoomTime, {
              scale: v3(2.5, 2.5, 1)
            }).start();
            tween(_this2.fireEfx).repeatForever(rotateBy(1, 360)).start();
          }).delay(zoomTime).parallel(moveTo(stopTime, randomPos.x, randomPos.y), tween().call(function () {
            tween(_this2.frontEff).then(fadeOut(0.1)).start();
            tween(_this2.ballSprite).then(fadeIn(0.1)).start();
          })).delay(stopTime).parallel(moveTo(dropTime, destination.x, destination.y), scaleTo(dropTime, this.baseScale)).call(function () {
            _this2.addToPlayer(playerBallHolder); //@ts-ignore


            _this2._state = STATE.InTray;
            gfEventEmitter.instance.emit(gfBaseEvents.DRAGON.DONE_BALL_DROP, deskStation);
          }).start();
        };

        _proto.addToPlayer = function addToPlayer(playerBallHolder) {
          setOpacity(this.frontEff, 0);
          setOpacity(this.ballSprite.node, 255);
          this.node.scale = new Vec3(this.baseScale, this.baseScale);
          this.node.parent = playerBallHolder;
          this.node.position = v3(0, 0);
          setOpacity(this.backEff, 0);
          setOpacity(this.fireEfx, 0);
          this.hitGlow.scale = v3(3, 3);
          tween(this.hitGlow).repeatForever(tween().then(fadeIn(1)).then(fadeOut(1))).start();
          setOpacity(this.hitLight, 255);
          this.hitLight.scale = v3(0, 0);
          tween(this.hitGlow).then(scaleTo(0.15, 4)).then(fadeOut(0.15)).start();
        };

        _proto.playGlowEffect = function playGlowEffect() {
          if (this.backEff.active) this.backEff.active = false;
          this.frontEff.active = true;
          setOpacity(this.frontEff, 0);
          tween(this.frontEff).then(fadeIn(0.25)).delay(0.15).repeatForever(tween().then(scaleTo(0.15, 1.1)).then(scaleTo(0.15, 1))).start();
        };

        _proto.playLightEffect = function playLightEffect() {
          var _this3 = this;

          if (this.frontEff.active) this.stopGlowEffect();
          this.backEff.active = true;
          setOpacity(this.backEff, 0);
          tween(this.backEff).then(fadeIn(0.25)).call(function () {
            tween(_this3.backEff).repeatForever(tween().parallel(tween().then(scaleTo(0.25, 0.9)).then(scaleTo(0.25, 1.05)), rotateBy(0.5, -90))).start();
          }).start();
        };

        _proto.stopGlowEffect = function stopGlowEffect() {
          var _this4 = this;

          stopAllActions(this.frontEff);
          this.frontEff.scale = v3(1, 1);
          tween(this.frontEff).then(fadeOut(0.25)).call(function () {
            _this4.frontEff.active = false;
          }).start();
        };

        _proto.moveToJackpotStar = function moveToJackpotStar(_ref) {
          var _this5 = this;

          var delay = _ref.delay,
              position = _ref.position; //@ts-ignore

          this._state = STATE.InJackpotStar;
          this.playGlowEffect();
          tween(this.node).delay(delay).to(1, {
            position: position,
            scale: v3(1, 1, 1)
          }).delay(0.25).call(function () {
            _this5.playLightEffect();
          }).start();
        };

        _proto.flyAway = function flyAway(flyTime) {
          var _this6 = this;

          if (flyTime === void 0) {
            flyTime = 1;
          }

          var rand = randRange(10, 14) / 10;
          tween(this.node).parallel(moveTo(flyTime * rand, this.node.position.x * 15, this.node.position.y * 15), scaleTo(flyTime * rand, 5)).call(function () {
            _this6.returnPool();
          }).start();
        };

        _proto.moveToBigWinEffect = function moveToBigWinEffect(_ref2) {
          var _this7 = this;

          var ballIndex = _ref2.ballIndex,
              position = _ref2.position,
              playerIndex = _ref2.playerIndex;
          var flyTime = 0.5;
          var delayEach = 0.2;
          tween(this.node).delay(ballIndex * delayEach).parallel(moveTo(flyTime, position.x, position.y), scaleTo(flyTime, 1, 1)).call(function () {
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.DRAGON_BALL_HIDE);
          }).then(scaleTo(flyTime, 0)).call(function () {
            gfEventEmitter.instance.emit(gfBaseEvents.DRAGON.BALL_ENTER_BIGWIN_WHEEL, playerIndex);
          }).call(function () {
            _this7.returnPool();
          }).start();
        };

        _proto.isDropping = function isDropping() {
          //@ts-ignore
          return this._state == STATE.Dropping;
        };

        _proto.isInJackpotStar = function isInJackpotStar() {
          //@ts-ignore
          return this._state == STATE.InJackpotStar;
        };

        _proto.unuse = function unuse() {
          _gfNode.prototype.unuse.call(this); //@ts-ignore


          this._state = STATE.Invalid;
          stopAllActions(this.ballSprite.node);
          stopAllActions(this.backEff);
          stopAllActions(this.frontEff);
          stopAllActions(this.ballSpark);
          stopAllActions(this.hitGlow);
          stopAllActions(this.hitLight);
          stopAllActions(this.fireEfx);
        };

        return gfDragonBall;
      }(gfNode), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "ballSprite", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "backEff", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "frontEff", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "ballSpark", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "hitGlow", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "hitLight", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "fireEfx", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfDragonCacheData.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "189c5bd0a9ErqA9xYJApx//", "gfDragonCacheData", undefined);

      var BoneCacheValue = exports('BoneCacheValue', {});
      var DragonCacheData = exports('DragonCacheData', {
        "Swim In": ["294,-442,271,-467,239,-504,199,-537,159,-562,114,-586,67,-605,23,-621,-26,-634,-79,-645,-124,-653,-172,-660,-222,-664,-276,-668,-325,-670,-371,-671,-404,-670,-420,-663", "296,-438,274,-464,242,-500,202,-535,163,-560,118,-584,71,-604,27,-619,-22,-633,-74,-645,-120,-653,-167,-659,-218,-664,-271,-668,-321,-670,-367,-671,-399,-670,-416,-663", "301,-430,279,-458,248,-494,210,-529,170,-556,127,-580,79,-601,35,-617,-13,-631,-65,-643,-112,-651,-159,-658,-209,-663,-261,-667,-313,-670,-359,-670,-391,-670,-407,-663", "305,-422,284,-450,254,-488,217,-523,178,-551,135,-576,86,-598,43,-614,-4,-628,-55,-641,-104,-650,-150,-657,-200,-662,-252,-667,-305,-669,-351,-670,-382,-671,-398,-663", "309,-414,289,-442,260,-481,224,-517,185,-547,143,-572,95,-594,51,-611,5,-626,-46,-639,-96,-649,-142,-656,-191,-662,-242,-666,-297,-669,-342,-670,-374,-671,-390,-664", "312,-405,294,-434,265,-475,231,-511,191,-542,151,-567,104,-590,59,-609,13,-623,-36,-636,-88,-647,-134,-655,-182,-661,-233,-665,-287,-669,-334,-670,-365,-670,-382,-664", "315,-397,298,-426,271,-468,238,-504,198,-538,158,-563,113,-586,66,-606,22,-621,-27,-634,-80,-646,-125,-653,-173,-660,-223,-665,-277,-668,-326,-670,-357,-670,-373,-664", "318,-389,302,-418,275,-462,244,-498,205,-533,166,-559,121,-582,74,-603,30,-618,-18,-632,-71,-644,-117,-652,-164,-659,-214,-664,-267,-668,-318,-670,-349,-670,-365,-664", "320,-381,305,-410,281,-455,250,-492,212,-527,173,-554,130,-578,81,-600,38,-616,-9,-630,-61,-642,-109,-651,-156,-658,-205,-663,-258,-667,-310,-669,-340,-670,-357,-663", "323,-372,309,-402,286,-447,256,-485,220,-521,180,-550,138,-574,90,-597,46,-613,-1,-627,-52,-640,-101,-649,-147,-656,-196,-662,-248,-666,-302,-669,-332,-670,-349,-663", "325,-363,312,-394,291,-439,262,-479,227,-514,187,-545,146,-570,99,-593,54,-610,8,-625,-42,-638,-93,-648,-139,-655,-187,-661,-239,-666,-293,-669,-324,-670,-340,-663", "326,-354,314,-386,295,-431,267,-472,234,-508,194,-540,154,-566,107,-589,62,-608,16,-622,-33,-636,-85,-647,-131,-654,-179,-660,-229,-665,-283,-668,-316,-670,-332,-663", "328,-345,317,-378,299,-423,272,-466,240,-502,200,-536,161,-561,116,-585,69,-605,25,-620,-24,-633,-77,-645,-122,-653,-170,-659,-220,-664,-273,-668,-308,-669,-324,-663", "329,-336,319,-369,303,-415,277,-459,247,-496,207,-530,169,-557,125,-581,77,-602,33,-617,-15,-631,-67,-643,-114,-652,-161,-658,-211,-664,-264,-667,-300,-669,-316,-663", "329,-327,321,-360,307,-407,282,-452,253,-489,215,-524,176,-553,133,-577,84,-599,41,-615,-6,-629,-58,-641,-106,-650,-153,-657,-202,-663,-254,-667,-291,-669,-307,-662", "329,-318,322,-351,310,-399,288,-444,258,-483,222,-518,183,-548,141,-573,93,-595,49,-612,2,-626,-48,-639,-98,-649,-144,-656,-193,-662,-245,-666,-281,-668,-297,-662", "329,-309,324,-342,313,-391,292,-436,264,-477,229,-512,189,-543,149,-568,102,-591,57,-609,11,-624,-39,-637,-90,-648,-136,-655,-184,-661,-235,-666,-271,-668,-288,-662", "329,-300,324,-333,315,-383,297,-428,269,-470,236,-506,196,-539,156,-564,111,-588,64,-607,19,-622,-30,-635,-83,-646,-128,-654,-175,-660,-226,-665,-261,-667,-278,-661", "328,-291,325,-324,318,-374,301,-420,274,-464,243,-500,203,-534,164,-560,119,-584,72,-604,28,-619,-21,-633,-73,-644,-119,-652,-167,-659,-217,-664,-252,-667,-269,-661", "327,-282,325,-315,320,-365,304,-412,279,-457,249,-493,210,-528,171,-555,128,-579,79,-601,36,-616,-12,-630,-64,-642,-111,-651,-158,-658,-208,-663,-242,-666,-259,-660", "325,-273,325,-307,322,-356,308,-404,284,-449,255,-487,218,-522,178,-551,136,-575,87,-598,44,-614,-3,-628,-54,-640,-103,-650,-150,-657,-199,-662,-233,-665,-250,-660", "324,-264,324,-298,323,-348,311,-396,289,-441,260,-481,225,-516,185,-546,144,-571,96,-594,52,-611,6,-626,-45,-638,-95,-648,-141,-656,-190,-661,-224,-665,-241,-659", "321,-255,324,-289,324,-339,314,-388,294,-433,266,-474,232,-510,192,-542,152,-567,105,-590,59,-608,14,-623,-36,-636,-87,-647,-133,-654,-181,-661,-215,-664,-231,-658", "319,-246,322,-280,325,-330,316,-380,298,-425,271,-468,239,-504,198,-537,159,-563,114,-586,67,-606,22,-621,-26,-634,-80,-646,-125,-653,-172,-660,-205,-663,-222,-658", "316,-238,321,-271,325,-321,318,-371,302,-417,276,-461,245,-497,205,-532,167,-558,122,-582,75,-603,31,-618,-17,-632,-70,-644,-116,-652,-163,-659,-196,-662,-213,-657", "313,-229,319,-263,325,-312,320,-362,306,-409,281,-454,251,-491,213,-526,174,-554,131,-578,82,-600,39,-615,-9,-629,-60,-642,-108,-651,-155,-657,-188,-661,-204,-656", "310,-221,317,-254,325,-304,322,-353,309,-401,286,-446,257,-485,220,-520,181,-549,139,-574,90,-596,47,-613,0,-627,-51,-640,-100,-649,-146,-656,-179,-660,-196,-655", "306,-213,314,-245,324,-295,323,-344,312,-393,291,-438,263,-478,228,-514,188,-545,147,-570,99,-593,55,-610,9,-625,-41,-638,-92,-648,-138,-655,-170,-659,-187,-654", "302,-205,311,-237,323,-286,324,-335,315,-385,296,-430,268,-472,234,-508,194,-540,154,-565,108,-589,62,-607,17,-622,-32,-635,-85,-646,-130,-654,-161,-658,-178,-653", "297,-197,308,-229,322,-277,325,-327,317,-377,300,-422,273,-465,241,-501,201,-535,162,-561,117,-585,70,-604,25,-620,-23,-633,-76,-645,-121,-653,-153,-657,-170,-652", "292,-189,305,-221,320,-268,325,-318,319,-368,304,-414,278,-459,247,-495,208,-530,169,-557,125,-581,77,-602,34,-617,-14,-631,-66,-643,-113,-651,-144,-656,-161,-651", "287,-181,301,-213,318,-259,325,-309,321,-359,307,-406,283,-451,253,-489,216,-524,176,-552,134,-576,85,-599,42,-614,-5,-629,-57,-641,-105,-650,-136,-655,-153,-650", "282,-174,297,-205,316,-251,325,-300,323,-350,310,-398,288,-443,259,-482,223,-518,183,-548,142,-572,94,-595,50,-612,3,-626,-47,-639,-97,-649,-128,-654,-145,-649", "276,-167,292,-197,313,-242,324,-292,324,-341,313,-390,293,-435,264,-476,230,-512,190,-543,150,-568,103,-591,57,-609,12,-624,-38,-637,-90,-647,-120,-652,-137,-648", "271,-160,288,-189,310,-234,323,-283,325,-332,316,-382,297,-427,270,-469,237,-505,197,-538,157,-564,112,-587,65,-606,20,-621,-29,-635,-82,-646,-111,-651,-129,-647", "264,-153,283,-182,307,-226,321,-274,325,-323,318,-373,301,-419,275,-463,243,-499,203,-534,165,-559,120,-583,73,-603,28,-619,-20,-632,-72,-644,-103,-650,-121,-646", "258,-147,277,-175,303,-218,319,-265,325,-315,320,-364,305,-411,280,-456,249,-493,211,-528,172,-555,128,-579,80,-601,37,-616,-11,-630,-63,-642,-95,-648,-113,-644", "251,-141,272,-168,299,-210,317,-256,325,-306,322,-356,308,-403,285,-448,255,-486,219,-522,179,-550,137,-575,88,-597,45,-613,-2,-628,-53,-640,-88,-647,-105,-643", "244,-135,266,-161,295,-202,315,-248,324,-297,323,-347,311,-395,290,-440,261,-480,226,-515,186,-546,145,-571,97,-594,52,-611,6,-625,-44,-638,-80,-646,-97,-642", "237,-129,260,-155,291,-194,312,-239,323,-288,324,-338,314,-387,294,-432,266,-474,233,-509,193,-541,152,-566,106,-590,60,-608,15,-623,-35,-636,-70,-644,-87,-640", "229,-124,253,-149,286,-187,309,-231,322,-279,325,-329,316,-379,299,-424,272,-467,239,-503,199,-537,160,-562,115,-586,68,-605,23,-620,-25,-634,-60,-642,-78,-638", "222,-120,247,-143,281,-179,306,-223,321,-270,325,-320,319,-370,303,-416,276,-460,246,-497,206,-531,167,-558,123,-582,75,-602,31,-618,-17,-632,-51,-640,-68,-636", "214,-115,240,-137,275,-172,302,-215,319,-262,325,-311,321,-361,306,-408,282,-453,252,-490,214,-525,175,-553,131,-578,83,-599,40,-615,-8,-629,-42,-638,-59,-634", "206,-111,233,-132,270,-166,298,-207,316,-253,325,-303,322,-352,309,-400,287,-445,257,-484,221,-519,182,-549,140,-573,91,-596,48,-613,1,-627,-32,-635,-50,-632", "197,-107,225,-127,264,-159,293,-199,314,-245,324,-294,323,-343,312,-392,292,-437,263,-478,228,-513,188,-544,147,-569,100,-592,55,-610,10,-624,-23,-633,-41,-630", "189,-103,218,-122,257,-153,289,-191,311,-236,323,-285,324,-334,315,-384,296,-429,268,-471,235,-507,195,-540,155,-565,109,-588,63,-607,18,-622,-14,-631,-32,-628", "181,-99,210,-118,251,-146,284,-184,308,-228,322,-276,325,-326,317,-376,300,-421,273,-465,242,-501,201,-535,163,-561,118,-584,71,-604,26,-619,-6,-629,-23,-626", "173,-96,202,-114,244,-141,279,-177,304,-220,320,-267,325,-317,319,-367,304,-413,278,-458,248,-495,209,-529,170,-556,126,-580,78,-601,34,-617,3,-626,-14,-624", "165,-93,193,-110,237,-135,273,-170,300,-212,318,-259,325,-308,321,-358,307,-405,284,-450,254,-488,217,-523,177,-552,134,-576,86,-598,43,-614,12,-624,-6,-622", "157,-90,185,-106,230,-130,268,-163,296,-204,316,-250,325,-300,323,-349,310,-397,289,-442,260,-482,224,-517,184,-547,142,-572,95,-595,50,-612,20,-621,2,-619", "149,-87,177,-102,222,-125,261,-157,292,-196,313,-242,324,-291,324,-340,313,-389,293,-434,265,-475,231,-511,191,-542,150,-568,104,-591,58,-609,28,-619,11,-617", "140,-84,169,-99,215,-121,255,-150,287,-189,310,-233,323,-282,325,-331,316,-381,298,-426,270,-469,237,-505,197,-538,158,-563,112,-587,66,-606,36,-616,19,-615", "131,-81,161,-96,207,-117,248,-144,282,-181,307,-225,321,-273,325,-322,318,-373,302,-418,275,-462,244,-499,204,-533,165,-559,121,-583,73,-603,44,-614,27,-612", "123,-78,153,-93,198,-112,242,-139,277,-174,303,-217,319,-264,325,-314,320,-364,305,-410,280,-455,250,-492,212,-527,173,-554,129,-579,81,-600,52,-611,35,-610", "114,-76,145,-90,190,-108,234,-133,271,-167,299,-209,317,-255,325,-305,322,-355,309,-402,285,-447,256,-486,219,-521,180,-550,137,-575,89,-597,60,-608,42,-607", "106,-74,136,-87,182,-105,227,-128,265,-161,295,-201,315,-247,324,-296,323,-346,312,-394,290,-439,262,-479,226,-515,187,-545,145,-570,98,-593,68,-605,50,-604", "98,-72,128,-84,174,-101,220,-123,259,-154,290,-193,312,-239,323,-287,324,-337,314,-386,295,-431,267,-473,233,-509,193,-541,153,-566,107,-589,75,-602,57,-602", "88,-70,119,-82,166,-98,212,-119,253,-148,285,-186,309,-230,322,-278,325,-328,317,-378,299,-423,272,-466,240,-502,200,-536,161,-562,116,-585,83,-600,65,-599", "79,-69,111,-80,158,-95,204,-115,246,-142,280,-179,305,-222,320,-270,325,-319,319,-369,303,-415,277,-460,246,-496,207,-531,168,-557,124,-581,91,-596,73,-596", "71,-68,103,-78,151,-92,195,-111,239,-136,275,-172,302,-214,318,-261,325,-310,321,-360,306,-407,282,-452,252,-490,215,-525,175,-553,132,-577,100,-592,82,-592", "62,-67,95,-76,142,-89,187,-107,232,-131,269,-165,297,-206,316,-252,325,-302,322,-351,310,-399,287,-444,258,-483,222,-519,182,-548,140,-573,109,-588,91,-589", "54,-67,86,-74,133,-86,179,-103,224,-126,263,-158,293,-198,314,-244,324,-293,324,-342,313,-391,292,-436,264,-477,229,-513,189,-544,148,-569,118,-584,100,-586", "44,-67,77,-73,125,-83,171,-100,217,-122,257,-152,288,-191,311,-235,323,-284,324,-334,315,-383,296,-429,269,-471,236,-506,196,-539,156,-564,126,-580,109,-582", "35,-67,68,-72,116,-81,163,-97,209,-118,250,-146,283,-183,308,-227,321,-275,325,-325,317,-375,300,-421,274,-464,242,-500,202,-534,163,-560,134,-576,117,-579", "26,-68,60,-72,108,-79,156,-94,201,-113,243,-140,278,-176,304,-219,320,-266,325,-316,320,-366,304,-412,279,-457,248,-494,210,-529,171,-556,142,-572,126,-576", "18,-69,51,-71,100,-77,148,-91,192,-109,236,-135,273,-169,300,-211,318,-258,325,-307,321,-357,308,-404,284,-449,254,-488,217,-523,178,-551,150,-568,134,-572", "9,-70,42,-71,91,-75,139,-88,184,-106,229,-129,267,-163,296,-203,315,-249,324,-299,323,-348,311,-396,289,-442,260,-481,225,-516,185,-547,158,-563,142,-568", "0,-72,33,-72,82,-74,130,-85,176,-102,222,-125,261,-156,291,-195,313,-241,324,-290,324,-339,314,-388,294,-434,266,-475,231,-510,191,-542,165,-559,150,-565", "-9,-74,25,-72,74,-73,122,-82,168,-99,214,-120,254,-150,287,-188,310,-232,322,-281,325,-330,316,-380,298,-426,271,-468,238,-504,198,-537,172,-555,157,-561", "-17,-76,16,-73,65,-72,113,-80,160,-96,206,-116,248,-144,281,-181,306,-224,321,-272,325,-322,318,-372,302,-418,276,-462,245,-498,205,-532,180,-550,165,-557", "-26,-79,7,-75,57,-71,105,-78,153,-93,198,-112,241,-138,276,-173,303,-216,319,-263,325,-313,320,-363,306,-410,281,-454,251,-492,213,-526,186,-546,172,-554", "-34,-82,-1,-76,48,-71,97,-76,144,-90,189,-108,234,-133,271,-167,299,-208,317,-255,325,-304,322,-354,309,-401,286,-447,257,-485,220,-520,193,-541,179,-550", "-42,-85,-10,-79,39,-71,88,-75,136,-87,181,-104,226,-128,265,-160,294,-200,314,-246,324,-295,323,-345,312,-393,291,-439,262,-479,227,-514,200,-536,186,-546", "-51,-89,-18,-81,30,-72,79,-73,127,-84,173,-101,219,-123,259,-154,290,-193,311,-238,323,-286,324,-336,314,-385,295,-431,267,-472,234,-508,207,-531,194,-541", "-59,-92,-26,-84,21,-73,70,-72,119,-82,165,-98,211,-119,252,-147,285,-185,308,-229,322,-278,325,-327,317,-377,299,-423,273,-466,241,-502,214,-525,202,-536", "-67,-96,-35,-87,13,-74,62,-72,110,-79,158,-95,203,-115,245,-142,280,-178,305,-221,320,-269,325,-318,319,-368,303,-415,277,-459,247,-496,222,-519,210,-531", "-74,-100,-43,-90,4,-75,54,-71,102,-78,150,-92,195,-110,238,-136,274,-171,301,-213,318,-260,325,-310,321,-359,307,-407,283,-452,253,-489,229,-513,218,-525", "-82,-105,-51,-93,-4,-77,44,-71,94,-76,141,-89,186,-107,231,-131,268,-164,297,-205,316,-251,325,-301,322,-350,310,-399,288,-444,259,-483,236,-507,226,-520", "-90,-109,-59,-97,-13,-79,36,-71,85,-74,132,-86,178,-103,224,-126,263,-158,293,-197,313,-243,324,-292,324,-342,313,-390,292,-436,264,-476,242,-500,233,-514", "-98,-114,-67,-101,-21,-82,27,-72,76,-73,124,-83,170,-100,216,-121,256,-151,288,-190,310,-235,323,-283,324,-333,315,-382,297,-428,269,-470,248,-494,240,-508", "-105,-118,-74,-105,-29,-85,18,-73,67,-72,116,-81,162,-96,208,-117,250,-145,283,-182,307,-226,321,-274,325,-324,318,-374,301,-420,274,-463,254,-488,246,-503", "-112,-123,-82,-109,-38,-88,10,-74,59,-71,107,-79,155,-93,200,-113,243,-139,278,-175,304,-218,320,-265,325,-315,320,-365,305,-412,279,-457,260,-481,253,-497", "-120,-128,-89,-114,-46,-91,1,-76,50,-71,99,-77,147,-90,191,-109,236,-134,272,-168,300,-210,317,-257,325,-306,322,-356,308,-404,285,-449,265,-475,259,-491", "-127,-132,-97,-118,-54,-95,-7,-78,41,-71,90,-75,138,-87,183,-105,228,-129,266,-162,295,-202,315,-248,324,-298,323,-347,311,-396,290,-441,271,-468,265,-485", "-135,-137,-104,-123,-62,-99,-16,-80,32,-72,81,-74,129,-85,175,-102,221,-124,260,-155,291,-195,312,-240,324,-289,324,-338,314,-387,294,-433,276,-462,271,-478", "-142,-142,-112,-128,-69,-103,-24,-83,24,-72,73,-73,121,-82,167,-98,213,-120,254,-149,286,-187,309,-232,322,-280,325,-329,316,-379,298,-425,281,-455,277,-472", "-149,-147,-119,-132,-77,-107,-32,-86,15,-73,64,-72,113,-80,160,-95,205,-116,247,-143,281,-180,306,-224,321,-271,325,-321,318,-371,302,-417,286,-447,283,-464", "-156,-152,-127,-137,-85,-111,-41,-89,7,-75,56,-71,104,-78,152,-92,197,-112,240,-137,276,-173,302,-215,319,-262,325,-312,320,-362,306,-409,291,-439,288,-456", "-164,-157,-134,-142,-92,-116,-49,-92,-2,-77,47,-71,96,-76,143,-89,188,-108,233,-132,270,-166,298,-207,317,-254,325,-303,322,-353,309,-401,295,-431,293,-448", "-171,-162,-141,-147,-100,-120,-57,-96,-11,-79,38,-71,87,-75,135,-86,180,-104,226,-127,264,-159,294,-199,314,-245,324,-295,323,-344,312,-393,299,-423,298,-441", "-178,-167,-148,-152,-107,-125,-65,-100,-19,-81,29,-72,78,-73,126,-84,172,-101,218,-123,258,-153,289,-192,311,-237,323,-286,324,-335,315,-385,303,-415,303,-433", "-185,-171,-156,-157,-114,-129,-72,-104,-27,-84,21,-73,70,-72,118,-81,164,-97,210,-118,251,-147,284,-184,308,-229,322,-277,325,-326,317,-376,307,-407,307,-425", "-193,-176,-163,-162,-122,-134,-80,-108,-35,-87,12,-74,61,-72,110,-79,157,-94,202,-114,245,-141,279,-177,305,-221,320,-268,325,-317,319,-367,310,-399,311,-416", "-200,-181,-170,-167,-129,-139,-87,-113,-44,-90,3,-75,53,-71,101,-77,149,-91,194,-110,238,-135,274,-170,301,-212,318,-259,325,-309,321,-359,313,-391,314,-408", "-207,-186,-178,-172,-137,-144,-95,-117,-52,-94,-5,-77,44,-71,93,-76,140,-88,185,-106,230,-130,268,-164,297,-204,316,-251,325,-300,323,-350,315,-383,317,-400", "-215,-190,-185,-176,-144,-149,-103,-122,-60,-98,-14,-80,35,-71,84,-74,132,-85,177,-103,223,-125,262,-157,292,-197,313,-242,324,-291,324,-341,318,-374,320,-392", "-223,-195,-192,-181,-151,-154,-110,-126,-67,-102,-22,-82,26,-72,75,-73,123,-83,169,-99,215,-121,255,-151,287,-189,310,-234,323,-282,325,-332,320,-365,323,-383", "-231,-200,-199,-186,-158,-159,-117,-131,-75,-106,-30,-85,17,-73,66,-72,115,-81,162,-96,207,-117,249,-145,282,-182,307,-226,321,-273,325,-323,322,-356,326,-374", "-240,-205,-207,-191,-166,-164,-125,-136,-83,-110,-38,-88,9,-74,58,-71,107,-79,154,-93,199,-113,242,-139,277,-175,303,-218,319,-265,325,-314,323,-347,328,-365", "-248,-209,-215,-195,-173,-169,-132,-141,-90,-114,-46,-92,0,-76,49,-71,98,-77,146,-90,191,-109,235,-133,272,-168,299,-209,317,-256,325,-306,324,-339,329,-355", "-256,-214,-223,-200,-180,-173,-139,-146,-98,-119,-55,-95,-8,-78,40,-71,89,-75,137,-87,182,-105,228,-128,266,-161,295,-202,315,-247,324,-297,325,-330,331,-346", "-264,-217,-231,-205,-187,-178,-146,-151,-105,-123,-63,-99,-17,-81,31,-72,81,-74,128,-84,174,-101,220,-124,260,-155,290,-194,312,-239,323,-288,325,-321,332,-337", "-272,-221,-239,-210,-195,-183,-154,-155,-113,-128,-70,-103,-25,-83,23,-72,72,-73,120,-82,167,-98,212,-119,253,-148,286,-186,309,-231,322,-279,325,-312,332,-328", "-280,-224,-248,-214,-202,-188,-161,-160,-120,-133,-78,-107,-33,-86,14,-74,63,-72,112,-80,159,-95,204,-115,246,-142,280,-179,306,-223,321,-270,325,-303,333,-319", "-287,-227,-256,-218,-210,-192,-168,-165,-127,-138,-85,-111,-41,-89,6,-75,55,-71,104,-78,151,-92,196,-111,239,-137,275,-172,302,-215,319,-261,324,-295,333,-310", "-295,-230,-264,-222,-218,-197,-176,-170,-135,-143,-93,-116,-49,-93,-3,-77,46,-71,95,-76,143,-89,188,-107,232,-132,269,-165,298,-207,316,-253,323,-286,332,-301", "-303,-233,-272,-226,-226,-202,-183,-175,-142,-148,-101,-121,-57,-97,-11,-79,37,-71,86,-74,134,-86,180,-104,225,-127,264,-159,293,-199,314,-244,322,-277,331,-292", "-311,-236,-280,-229,-234,-207,-190,-180,-149,-152,-108,-125,-65,-100,-20,-81,28,-72,77,-73,125,-83,172,-100,217,-122,257,-152,289,-191,311,-236,320,-268,330,-283", "-320,-238,-288,-232,-242,-212,-197,-185,-156,-157,-115,-130,-73,-105,-28,-84,20,-73,69,-72,117,-81,164,-97,210,-118,251,-146,284,-184,308,-228,318,-259,329,-273", "-329,-240,-296,-235,-251,-216,-205,-189,-164,-162,-123,-135,-81,-109,-36,-87,11,-74,60,-72,109,-79,156,-94,201,-114,244,-140,278,-177,304,-220,316,-251,327,-264", "-338,-242,-303,-238,-259,-220,-213,-194,-171,-167,-130,-140,-88,-113,-44,-91,2,-76,52,-71,101,-77,148,-91,193,-110,237,-135,273,-170,300,-212,313,-242,325,-256", "-347,-244,-312,-240,-267,-224,-221,-199,-178,-172,-137,-144,-96,-118,-52,-94,-6,-78,43,-71,92,-75,139,-88,185,-106,230,-130,267,-163,296,-204,310,-234,322,-247", "-355,-245,-321,-243,-275,-227,-229,-204,-186,-177,-145,-149,-103,-122,-60,-98,-15,-80,34,-72,83,-74,131,-85,177,-102,222,-125,261,-156,292,-196,307,-226,320,-238", "-364,-246,-330,-245,-283,-230,-237,-209,-193,-181,-152,-154,-111,-127,-68,-102,-23,-82,25,-72,74,-73,122,-83,169,-99,215,-120,255,-150,287,-188,303,-218,317,-230", "-372,-247,-339,-247,-291,-233,-245,-213,-200,-186,-159,-159,-118,-132,-76,-106,-31,-85,17,-73,66,-72,114,-80,161,-96,207,-116,248,-144,282,-181,299,-210,313,-221", "-380,-247,-348,-248,-298,-236,-254,-217,-208,-191,-166,-164,-125,-136,-83,-110,-39,-88,8,-75,57,-71,106,-78,153,-93,198,-112,241,-138,277,-174,295,-202,309,-212", "-389,-247,-357,-250,-306,-239,-262,-221,-215,-196,-174,-169,-133,-141,-91,-115,-47,-92,-1,-76,48,-71,98,-77,145,-90,190,-108,234,-133,271,-167,290,-194,305,-204", "-398,-246,-365,-250,-315,-241,-270,-225,-224,-201,-181,-174,-140,-146,-99,-119,-55,-96,-9,-78,39,-71,89,-75,136,-87,182,-105,227,-128,265,-161,286,-187,301,-196", "-407,-246,-374,-251,-325,-244,-278,-228,-232,-206,-188,-178,-147,-151,-106,-124,-63,-99,-18,-81,31,-72,80,-73,128,-84,174,-101,219,-123,259,-154,281,-179,296,-188", "-416,-245,-382,-251,-334,-246,-286,-231,-240,-210,-195,-183,-154,-156,-113,-129,-71,-103,-26,-83,22,-73,71,-72,119,-82,166,-98,212,-119,252,-148,275,-172,291,-181", "-424,-243,-391,-251,-343,-248,-293,-234,-248,-215,-203,-188,-162,-161,-121,-133,-79,-108,-34,-86,13,-74,62,-72,111,-80,158,-95,203,-115,246,-142,270,-165,286,-173", "-433,-241,-401,-251,-351,-249,-301,-237,-257,-219,-210,-193,-169,-166,-128,-138,-86,-112,-42,-90,5,-75,54,-71,103,-78,150,-92,195,-111,239,-136,264,-159,280,-166", "-441,-239,-410,-250,-360,-250,-310,-240,-265,-223,-218,-198,-176,-171,-136,-143,-94,-116,-50,-93,-4,-77,45,-71,94,-76,142,-89,187,-107,232,-131,257,-152,274,-159", "-449,-237,-419,-249,-369,-251,-319,-242,-273,-226,-227,-203,-184,-175,-143,-148,-101,-121,-58,-97,-12,-79,36,-71,85,-74,133,-86,179,-103,224,-126,251,-146,268,-152", "-457,-234,-427,-247,-377,-251,-328,-245,-281,-229,-235,-208,-191,-180,-150,-153,-109,-126,-66,-101,-21,-82,27,-72,76,-73,124,-83,171,-100,217,-122,244,-140,261,-145", "-465,-230,-436,-245,-385,-251,-337,-246,-288,-233,-243,-212,-198,-185,-157,-158,-116,-130,-74,-105,-29,-85,19,-73,68,-72,116,-81,163,-97,209,-117,237,-135,254,-139", "-473,-227,-444,-243,-395,-251,-346,-248,-296,-235,-251,-216,-206,-190,-164,-163,-123,-135,-81,-109,-37,-88,10,-74,59,-72,108,-79,155,-94,200,-113,230,-130,247,-133", "-481,-223,-452,-240,-404,-250,-355,-249,-304,-238,-260,-220,-213,-195,-172,-168,-131,-140,-89,-114,-45,-91,2,-76,51,-71,100,-77,147,-91,192,-109,222,-125,240,-128", "-489,-218,-461,-237,-413,-249,-363,-250,-313,-241,-268,-224,-221,-200,-179,-172,-138,-145,-97,-118,-53,-95,-7,-78,42,-71,91,-75,138,-88,184,-106,215,-121,232,-122", "-496,-213,-469,-233,-422,-248,-372,-251,-322,-243,-276,-227,-230,-205,-186,-177,-145,-150,-104,-123,-61,-98,-15,-80,33,-72,82,-74,130,-85,176,-102,207,-116,225,-117", "-503,-208,-477,-230,-430,-246,-380,-251,-331,-245,-284,-231,-238,-209,-194,-182,-152,-155,-111,-127,-69,-102,-24,-83,24,-72,73,-73,121,-82,168,-99,198,-112,216,-113", "-510,-203,-485,-225,-439,-244,-389,-251,-340,-247,-291,-234,-246,-214,-201,-187,-160,-160,-119,-132,-77,-106,-32,-86,16,-73,65,-72,113,-80,160,-96,190,-108,208,-109", "-516,-197,-493,-221,-447,-242,-398,-251,-349,-249,-299,-236,-254,-218,-208,-192,-167,-165,-126,-137,-84,-111,-40,-89,7,-75,56,-71,105,-78,152,-93,182,-105,200,-105", "-523,-191,-500,-216,-455,-239,-407,-250,-358,-250,-307,-239,-263,-222,-216,-196,-175,-169,-134,-142,-92,-115,-48,-92,-2,-77,47,-71,97,-76,144,-90,174,-101,192,-101", "-529,-185,-507,-211,-464,-236,-416,-249,-366,-251,-316,-242,-271,-225,-225,-201,-182,-174,-141,-147,-99,-120,-56,-96,-10,-79,39,-71,88,-75,135,-87,166,-98,184,-98", "-535,-179,-514,-205,-472,-232,-425,-247,-375,-251,-326,-244,-279,-229,-233,-206,-189,-179,-148,-152,-107,-124,-64,-100,-18,-81,30,-72,79,-73,127,-84,158,-95,176,-94", "-540,-172,-521,-199,-480,-228,-434,-246,-383,-251,-335,-246,-286,-232,-241,-211,-196,-184,-155,-156,-114,-129,-72,-104,-27,-84,21,-73,70,-72,118,-81,151,-92,168,-91", "-546,-165,-527,-193,-488,-224,-442,-243,-392,-251,-343,-248,-294,-235,-249,-215,-204,-189,-162,-161,-121,-134,-79,-108,-35,-87,13,-74,62,-72,110,-79,142,-89,159,-88", "-551,-158,-534,-187,-496,-219,-450,-241,-401,-251,-352,-249,-302,-237,-257,-219,-211,-193,-170,-166,-129,-139,-87,-112,-43,-90,4,-75,53,-71,102,-77,133,-86,150,-85", "-555,-150,-539,-180,-503,-214,-459,-238,-411,-250,-361,-250,-311,-240,-266,-223,-219,-198,-177,-171,-136,-144,-95,-117,-51,-94,-5,-77,44,-71,93,-76,125,-83,142,-82", "-560,-143,-545,-173,-510,-209,-467,-234,-419,-248,-369,-251,-320,-243,-274,-227,-228,-203,-184,-176,-143,-148,-102,-122,-59,-97,-13,-79,35,-71,84,-74,116,-81,133,-80", "-564,-135,-550,-166,-517,-203,-475,-231,-428,-247,-378,-251,-329,-245,-281,-230,-236,-208,-192,-181,-151,-153,-109,-126,-67,-101,-21,-82,27,-72,76,-73,108,-79,125,-78", "-568,-127,-556,-158,-523,-197,-483,-226,-437,-245,-386,-251,-338,-247,-289,-233,-244,-212,-199,-185,-158,-158,-117,-131,-74,-105,-30,-85,18,-73,67,-72,100,-77,117,-76", "-572,-119,-560,-151,-530,-191,-491,-222,-445,-243,-396,-251,-347,-248,-297,-236,-252,-217,-206,-190,-165,-163,-124,-136,-82,-110,-38,-88,9,-74,59,-71,91,-75,108,-74", "-575,-111,-565,-143,-536,-184,-498,-217,-453,-240,-405,-250,-355,-249,-305,-238,-260,-221,-214,-195,-173,-168,-132,-141,-90,-114,-46,-91,1,-76,50,-71,82,-74,99,-72", "-578,-103,-569,-135,-542,-177,-505,-212,-462,-237,-414,-249,-364,-250,-314,-241,-268,-224,-222,-200,-180,-173,-139,-145,-97,-119,-54,-95,-8,-78,41,-71,73,-73,90,-71", "-581,-95,-573,-127,-547,-170,-512,-206,-470,-233,-423,-248,-373,-251,-323,-243,-276,-228,-231,-205,-187,-178,-146,-150,-105,-123,-62,-99,-16,-80,32,-72,65,-72,81,-69", "-583,-86,-576,-119,-552,-163,-519,-201,-478,-229,-431,-246,-381,-251,-332,-245,-284,-231,-239,-210,-194,-182,-153,-155,-112,-128,-70,-103,-25,-83,23,-72,56,-71,73,-69", "-585,-78,-580,-111,-557,-156,-526,-195,-486,-225,-440,-244,-390,-251,-341,-247,-292,-234,-247,-214,-202,-187,-160,-160,-119,-133,-77,-107,-33,-86,15,-73,48,-71,64,-68", "-587,-69,-583,-102,-562,-148,-532,-188,-494,-220,-448,-242,-399,-251,-350,-249,-300,-237,-255,-218,-209,-192,-168,-165,-127,-137,-85,-111,-41,-89,6,-75,39,-71,55,-68", "-589,-61,-585,-94,-566,-140,-538,-182,-501,-215,-456,-239,-408,-250,-359,-250,-308,-239,-263,-222,-217,-197,-175,-170,-134,-142,-93,-116,-49,-93,-2,-77,30,-72,46,-68", "-590,-52,-588,-85,-570,-132,-544,-175,-508,-210,-465,-235,-417,-249,-367,-251,-317,-242,-271,-226,-225,-202,-182,-175,-141,-147,-100,-120,-57,-96,-11,-79,21,-73,37,-68", "-591,-43,-590,-77,-574,-124,-549,-168,-515,-204,-473,-232,-426,-247,-376,-251,-326,-244,-279,-229,-234,-207,-190,-179,-149,-152,-107,-125,-65,-100,-19,-81,13,-74,29,-69", "-592,-34,-592,-68,-578,-116,-554,-160,-522,-198,-481,-228,-434,-245,-384,-251,-335,-246,-287,-232,-242,-211,-197,-184,-156,-157,-115,-130,-72,-104,-28,-84,4,-75,20,-70", "-592,-25,-593,-59,-581,-108,-559,-153,-528,-192,-489,-223,-443,-243,-393,-251,-344,-248,-295,-235,-250,-216,-204,-189,-163,-162,-122,-134,-80,-108,-36,-87,-4,-77,11,-72", "-592,-17,-595,-50,-584,-99,-564,-145,-534,-186,-496,-218,-451,-241,-402,-251,-353,-249,-303,-238,-258,-220,-212,-194,-171,-167,-130,-139,-88,-113,-44,-90,-13,-79,2,-74", "-592,-8,-596,-41,-586,-91,-568,-137,-540,-179,-504,-213,-459,-238,-411,-250,-362,-250,-311,-240,-266,-223,-220,-199,-178,-172,-137,-144,-95,-117,-52,-94,-21,-82,-6,-76", "-592,1,-596,-32,-589,-82,-572,-129,-546,-172,-511,-208,-468,-234,-420,-248,-370,-251,-321,-243,-274,-227,-228,-204,-185,-176,-144,-149,-103,-122,-60,-98,-30,-85,-14,-79", "-591,9,-597,-23,-591,-73,-575,-121,-551,-165,-517,-202,-476,-230,-429,-247,-379,-251,-330,-245,-282,-230,-237,-208,-192,-181,-151,-154,-110,-127,-68,-102,-38,-88,-23,-81", "-590,18,-597,-15,-592,-65,-579,-113,-556,-158,-524,-196,-484,-226,-438,-245,-387,-251,-339,-247,-290,-233,-245,-213,-200,-186,-159,-159,-117,-131,-75,-106,-46,-91,-31,-85", "-589,27,-597,-6,-594,-56,-582,-104,-561,-150,-530,-190,-492,-221,-446,-242,-397,-251,-348,-248,-298,-236,-253,-217,-207,-191,-166,-164,-125,-136,-83,-110,-54,-95,-39,-88", "-588,36,-596,3,-595,-47,-585,-96,-565,-142,-536,-183,-499,-217,-454,-240,-406,-250,-356,-250,-306,-238,-261,-221,-215,-196,-173,-169,-132,-141,-91,-114,-62,-99,-47,-92", "-586,44,-595,12,-596,-38,-587,-87,-569,-134,-542,-177,-506,-211,-463,-236,-415,-249,-365,-250,-315,-241,-269,-225,-223,-201,-180,-173,-140,-146,-98,-119,-69,-103,-55,-96", "-584,53,-594,21,-597,-29,-589,-79,-573,-126,-548,-170,-513,-206,-471,-233,-424,-248,-373,-251,-324,-244,-277,-228,-231,-206,-188,-178,-147,-151,-105,-124,-77,-107,-62,-100", "-582,61,-593,30,-597,-20,-591,-70,-577,-118,-553,-162,-520,-200,-479,-229,-432,-246,-382,-251,-333,-246,-285,-231,-240,-210,-195,-183,-154,-156,-113,-128,-85,-111,-70,-104", "-579,70,-592,39,-597,-11,-593,-61,-580,-110,-558,-155,-526,-194,-487,-224,-441,-244,-391,-251,-342,-247,-293,-234,-248,-214,-202,-188,-161,-161,-120,-133,-92,-116,-78,-108", "-576,78,-590,47,-597,-2,-594,-53,-583,-101,-562,-147,-533,-188,-494,-220,-449,-241,-400,-251,-351,-249,-301,-237,-256,-219,-210,-193,-169,-166,-128,-138,-100,-120,-85,-113", "-573,86,-588,56,-596,6,-595,-44,-586,-93,-567,-140,-538,-181,-502,-215,-457,-238,-409,-250,-359,-250,-309,-239,-264,-222,-218,-197,-176,-170,-135,-143,-107,-125,-92,-118", "-570,94,-585,65,-595,15,-596,-35,-588,-84,-571,-132,-544,-174,-509,-209,-466,-235,-418,-249,-368,-251,-318,-242,-272,-226,-226,-202,-183,-175,-142,-148,-115,-129,-100,-122", "-566,102,-583,73,-594,24,-597,-26,-590,-76,-574,-123,-550,-167,-516,-204,-474,-231,-427,-247,-376,-251,-327,-244,-280,-229,-235,-207,-190,-180,-149,-152,-122,-134,-107,-127", "-562,110,-580,81,-593,33,-597,-17,-592,-67,-578,-115,-555,-160,-522,-198,-482,-227,-435,-245,-385,-251,-336,-246,-288,-232,-243,-212,-198,-185,-157,-157,-129,-139,-114,-132", "-558,118,-576,90,-591,42,-597,-8,-594,-58,-581,-107,-560,-152,-529,-192,-490,-223,-444,-243,-394,-251,-345,-248,-296,-235,-251,-216,-205,-189,-164,-162,-137,-144,-122,-138", "-554,125,-573,98,-589,51,-596,1,-595,-49,-584,-98,-564,-144,-535,-185,-497,-218,-452,-240,-403,-250,-354,-249,-303,-238,-259,-220,-213,-194,-171,-167,-144,-149,-129,-143", "-549,133,-569,106,-587,59,-596,10,-596,-40,-587,-90,-568,-137,-541,-178,-504,-213,-460,-237,-412,-250,-363,-250,-312,-240,-267,-224,-221,-199,-179,-172,-151,-154,-136,-148", "-545,140,-565,114,-584,68,-595,19,-596,-31,-589,-81,-572,-129,-546,-171,-511,-207,-469,-234,-421,-248,-371,-251,-322,-243,-275,-227,-229,-204,-186,-177,-158,-159,-143,-153", "-540,147,-561,122,-581,76,-593,28,-597,-23,-591,-73,-576,-120,-552,-164,-518,-202,-477,-230,-430,-246,-379,-251,-331,-245,-283,-230,-238,-209,-193,-182,-166,-164,-150,-158", "-534,154,-557,130,-578,84,-592,36,-597,-14,-593,-64,-579,-112,-557,-157,-525,-196,-485,-226,-438,-244,-388,-251,-340,-247,-291,-233,-246,-213,-200,-186,-173,-169,-157,-163", "-529,162,-552,137,-575,93,-590,45,-597,-5,-594,-55,-582,-104,-561,-149,-531,-189,-492,-221,-447,-242,-397,-251,-348,-248,-299,-236,-254,-217,-208,-191,-180,-173,-164,-168", "-523,168,-547,144,-571,101,-588,54,-596,4,-595,-46,-585,-95,-566,-142,-537,-183,-500,-216,-455,-239,-407,-250,-357,-250,-307,-239,-262,-221,-216,-196,-188,-178,-171,-173"],
        "Swim Loop": ["-517,175,-542,151,-568,109,-586,62,-595,12,-596,-38,-587,-87,-569,-134,-542,-176,-506,-211,-463,-236,-415,-249,-365,-250,-315,-241,-269,-225,-223,-201,-194,-182,-178,-178", "-511,181,-537,158,-564,116,-584,70,-594,21,-597,-29,-589,-79,-573,-127,-548,-170,-513,-206,-471,-233,-423,-248,-373,-251,-324,-244,-277,-228,-231,-205,-201,-187,-185,-182", "-505,186,-532,165,-560,123,-581,78,-593,29,-597,-21,-591,-71,-576,-119,-553,-163,-519,-201,-478,-229,-432,-246,-381,-251,-332,-246,-285,-231,-239,-210,-208,-192,-192,-187", "-499,192,-526,172,-556,131,-578,86,-592,38,-597,-12,-593,-62,-580,-111,-557,-156,-526,-195,-486,-225,-440,-244,-390,-251,-341,-247,-292,-234,-247,-214,-216,-196,-200,-191", "-493,197,-520,178,-551,138,-575,94,-590,46,-597,-4,-594,-54,-583,-103,-562,-148,-532,-189,-493,-220,-448,-242,-398,-251,-349,-249,-299,-236,-255,-218,-224,-201,-208,-196", "-486,201,-514,184,-547,145,-571,102,-588,54,-596,5,-595,-46,-585,-95,-566,-141,-537,-182,-500,-216,-455,-239,-407,-250,-358,-250,-307,-239,-263,-222,-232,-206,-216,-201", "-479,206,-508,190,-542,152,-567,109,-586,62,-595,13,-596,-37,-588,-86,-570,-134,-543,-176,-507,-211,-464,-236,-416,-249,-366,-250,-316,-241,-270,-225,-240,-210,-224,-206", "-472,210,-501,196,-537,159,-564,117,-583,70,-594,22,-597,-28,-590,-78,-573,-126,-548,-169,-514,-206,-471,-232,-424,-248,-374,-251,-325,-244,-278,-228,-248,-214,-232,-210", "-465,213,-495,201,-531,166,-560,124,-581,79,-593,30,-597,-20,-591,-70,-577,-118,-553,-162,-520,-200,-479,-229,-432,-246,-382,-251,-333,-246,-285,-231,-255,-218,-239,-214", "-457,217,-488,205,-525,172,-555,131,-578,87,-592,39,-597,-11,-593,-62,-580,-110,-558,-155,-526,-194,-487,-224,-441,-244,-390,-251,-342,-247,-293,-234,-263,-222,-247,-218", "-449,220,-481,210,-519,179,-551,139,-574,95,-590,47,-597,-3,-594,-53,-583,-102,-562,-148,-532,-188,-494,-220,-448,-241,-399,-251,-350,-249,-300,-237,-271,-225,-255,-221", "-442,222,-473,214,-513,185,-546,146,-571,102,-588,55,-596,5,-595,-45,-585,-94,-566,-140,-538,-182,-501,-215,-456,-239,-408,-250,-359,-250,-308,-239,-278,-229,-262,-224", "-434,225,-466,217,-507,191,-541,153,-567,110,-586,63,-595,14,-596,-36,-588,-86,-570,-133,-543,-175,-508,-210,-464,-236,-417,-249,-367,-251,-317,-242,-286,-232,-270,-227", "-426,227,-458,221,-501,196,-536,159,-563,118,-583,71,-594,23,-597,-27,-590,-77,-574,-125,-549,-168,-514,-205,-472,-232,-425,-247,-375,-251,-326,-244,-293,-234,-277,-230", "-417,228,-450,224,-494,201,-530,166,-559,125,-580,79,-593,31,-597,-19,-592,-69,-577,-117,-554,-161,-521,-199,-480,-228,-433,-246,-383,-251,-334,-246,-301,-237,-285,-233", "-410,230,-442,227,-487,206,-525,173,-555,132,-577,87,-591,40,-597,-11,-593,-61,-580,-109,-558,-154,-527,-193,-487,-224,-441,-244,-391,-251,-343,-248,-309,-239,-293,-236", "-401,231,-434,229,-480,210,-519,179,-550,139,-574,95,-590,48,-597,-2,-594,-52,-583,-101,-563,-147,-533,-187,-495,-220,-449,-241,-400,-251,-351,-249,-317,-242,-302,-238", "-393,232,-426,231,-473,214,-513,186,-546,146,-570,103,-588,56,-596,6,-595,-44,-586,-93,-567,-140,-538,-181,-502,-215,-457,-238,-409,-250,-359,-250,-326,-244,-310,-241", "-385,232,-418,233,-465,218,-506,191,-541,153,-567,111,-585,64,-595,15,-596,-35,-588,-85,-571,-132,-544,-174,-508,-210,-465,-235,-418,-249,-368,-251,-335,-246,-319,-243", "-377,233,-410,234,-457,221,-500,197,-535,160,-563,119,-583,72,-594,23,-597,-27,-590,-77,-574,-124,-549,-168,-515,-204,-473,-232,-426,-247,-376,-251,-343,-248,-327,-245", "-368,233,-401,235,-450,224,-493,202,-530,167,-559,126,-580,80,-593,32,-597,-18,-592,-68,-578,-116,-554,-161,-521,-199,-481,-228,-434,-245,-384,-251,-352,-249,-336,-246", "-360,233,-393,236,-442,227,-486,206,-524,174,-554,133,-577,88,-591,40,-597,-10,-593,-60,-581,-108,-559,-153,-527,-193,-488,-224,-442,-243,-392,-251,-360,-250,-344,-247", "-352,233,-385,237,-433,229,-479,211,-518,180,-550,140,-574,96,-589,49,-596,-1,-595,-51,-583,-100,-563,-146,-533,-187,-495,-219,-450,-241,-401,-251,-368,-251,-352,-248", "-343,232,-376,237,-425,231,-472,215,-512,186,-545,147,-570,104,-587,57,-596,7,-595,-43,-586,-92,-567,-139,-539,-180,-502,-214,-458,-238,-410,-250,-376,-251,-360,-249", "-335,232,-368,237,-417,233,-464,218,-506,192,-540,154,-566,112,-585,65,-595,16,-596,-34,-588,-84,-571,-131,-544,-174,-509,-209,-466,-235,-418,-249,-384,-251,-368,-249", "-327,231,-359,237,-409,234,-457,221,-499,197,-535,161,-562,119,-582,73,-594,24,-597,-26,-590,-76,-575,-123,-550,-167,-516,-204,-474,-231,-427,-247,-393,-251,-377,-250", "-319,230,-351,237,-401,235,-449,224,-492,202,-529,168,-558,127,-580,81,-593,33,-597,-17,-592,-67,-578,-116,-555,-160,-522,-198,-481,-227,-435,-245,-402,-251,-385,-249", "-310,229,-342,237,-392,236,-441,227,-486,207,-524,174,-554,134,-577,89,-591,41,-597,-9,-593,-59,-581,-107,-559,-153,-528,-192,-489,-223,-443,-243,-410,-250,-394,-249", "-302,227,-334,236,-384,237,-433,229,-478,211,-518,181,-549,141,-573,97,-589,50,-596,0,-595,-50,-584,-99,-563,-145,-534,-186,-496,-219,-451,-241,-419,-249,-402,-248", "-293,226,-326,235,-375,237,-424,231,-471,215,-511,187,-545,148,-570,105,-587,58,-596,8,-596,-42,-586,-91,-567,-138,-540,-180,-503,-214,-459,-238,-427,-247,-411,-247", "-285,224,-317,234,-367,237,-416,233,-463,219,-505,192,-540,155,-566,113,-585,66,-595,17,-596,-33,-588,-83,-571,-130,-545,-173,-510,-209,-467,-234,-436,-245,-419,-246", "-277,222,-309,233,-358,237,-408,234,-456,222,-499,198,-534,162,-562,120,-582,74,-594,25,-597,-25,-590,-75,-575,-123,-550,-166,-516,-203,-475,-231,-444,-243,-427,-244", "-269,221,-300,231,-350,237,-400,236,-448,225,-492,203,-529,168,-558,127,-579,82,-592,34,-597,-16,-592,-67,-578,-115,-555,-159,-523,-198,-482,-227,-451,-240,-435,-242", "-261,219,-292,230,-342,236,-391,236,-440,227,-485,207,-523,175,-554,134,-576,90,-591,42,-597,-8,-594,-58,-581,-107,-560,-152,-529,-192,-490,-223,-459,-238,-443,-239", "-253,216,-284,228,-333,236,-383,237,-432,230,-478,211,-517,181,-549,142,-573,98,-589,50,-596,1,-595,-50,-584,-98,-564,-145,-535,-185,-497,-218,-467,-234,-451,-237", "-245,214,-276,227,-325,235,-374,237,-423,232,-470,215,-511,187,-544,149,-569,106,-587,58,-596,9,-596,-41,-586,-90,-568,-137,-540,-179,-504,-213,-475,-231,-458,-233", "-237,212,-268,225,-317,234,-366,237,-415,233,-463,219,-504,193,-539,155,-565,113,-585,67,-595,18,-596,-32,-589,-82,-572,-130,-546,-172,-510,-208,-483,-227,-466,-230", "-229,209,-260,223,-308,233,-357,237,-407,235,-455,222,-498,198,-534,162,-562,121,-582,75,-594,26,-597,-24,-591,-74,-575,-122,-551,-165,-517,-203,-490,-222,-473,-226", "-221,207,-251,220,-300,231,-349,237,-399,236,-447,225,-491,203,-528,169,-557,128,-579,83,-592,35,-597,-16,-592,-66,-579,-114,-556,-158,-523,-197,-497,-218,-481,-222", "-213,204,-243,218,-291,230,-341,236,-390,236,-439,228,-484,208,-522,176,-553,135,-576,91,-591,43,-597,-7,-594,-57,-582,-106,-560,-151,-529,-191,-504,-213,-488,-218", "-205,201,-235,216,-283,228,-332,236,-382,237,-431,230,-477,212,-516,182,-548,142,-573,99,-589,51,-596,1,-595,-49,-584,-98,-564,-144,-535,-185,-511,-208,-494,-213", "-197,198,-227,213,-275,226,-324,235,-373,237,-422,232,-469,216,-510,188,-544,149,-569,107,-587,59,-596,10,-596,-40,-587,-90,-568,-136,-541,-178,-517,-202,-501,-208", "-189,195,-219,211,-267,224,-316,234,-365,237,-414,233,-462,219,-504,194,-538,156,-565,114,-584,67,-595,18,-596,-32,-589,-81,-572,-129,-546,-172,-524,-197,-507,-203", "-182,192,-211,208,-259,222,-307,233,-356,237,-406,235,-454,222,-497,199,-533,163,-561,122,-582,76,-594,27,-597,-23,-591,-73,-576,-121,-551,-165,-530,-191,-514,-198", "-174,189,-203,205,-251,220,-299,231,-348,237,-398,236,-446,225,-490,204,-528,170,-557,129,-579,84,-592,35,-597,-15,-592,-65,-579,-113,-556,-158,-536,-184,-520,-192", "-166,186,-195,202,-242,218,-290,230,-340,236,-390,236,-438,228,-483,208,-522,176,-553,136,-576,92,-590,44,-597,-6,-594,-56,-582,-105,-560,-150,-541,-178,-525,-186", "-158,183,-187,199,-234,215,-282,228,-332,236,-381,237,-430,230,-476,212,-516,183,-548,143,-572,99,-589,52,-596,2,-595,-48,-585,-97,-565,-143,-546,-171,-531,-180", "-151,179,-179,196,-226,213,-274,226,-323,235,-373,237,-422,232,-469,216,-510,189,-543,150,-569,107,-586,60,-596,11,-596,-39,-587,-89,-569,-136,-552,-164,-536,-174", "-143,176,-172,193,-218,210,-266,224,-315,234,-364,237,-413,234,-461,220,-503,194,-538,157,-565,115,-584,68,-595,19,-596,-31,-589,-81,-572,-128,-556,-157,-542,-167", "-135,172,-164,190,-210,208,-258,222,-306,232,-355,237,-405,235,-453,223,-496,199,-533,164,-561,122,-581,76,-593,28,-597,-22,-591,-72,-576,-120,-561,-150,-546,-160", "-128,169,-156,186,-202,205,-250,220,-298,231,-347,237,-397,236,-445,226,-490,204,-527,170,-557,129,-578,84,-592,36,-597,-14,-593,-64,-579,-112,-565,-143,-551,-153", "-120,165,-148,183,-194,202,-242,218,-290,229,-339,236,-389,237,-437,228,-483,209,-521,177,-552,137,-575,92,-590,45,-597,-5,-594,-55,-582,-104,-569,-135,-555,-146", "-113,161,-141,180,-186,199,-233,215,-281,228,-331,236,-380,237,-429,230,-475,213,-515,183,-547,144,-572,100,-588,53,-596,3,-595,-47,-585,-96,-573,-127,-559,-139", "-105,158,-133,176,-179,196,-225,213,-273,226,-322,235,-372,237,-421,232,-468,217,-509,189,-543,151,-568,108,-586,61,-596,12,-596,-38,-587,-88,-576,-120,-563,-132", "-98,154,-125,172,-171,193,-217,210,-265,224,-314,234,-363,237,-413,234,-460,220,-502,195,-537,158,-564,116,-584,69,-595,20,-596,-30,-589,-80,-579,-112,-567,-124", "-91,150,-118,169,-163,189,-209,207,-257,222,-305,232,-355,237,-404,235,-453,223,-496,200,-532,164,-560,123,-581,77,-593,29,-597,-21,-591,-71,-582,-104,-570,-117", "-83,146,-110,165,-155,186,-201,205,-249,220,-297,231,-346,237,-396,236,-445,226,-489,205,-526,171,-556,130,-578,85,-592,37,-597,-13,-593,-63,-585,-95,-573,-109", "-76,141,-103,161,-147,183,-194,202,-241,217,-289,229,-338,236,-388,237,-436,228,-482,209,-520,178,-552,137,-575,93,-590,46,-597,-4,-594,-55,-587,-87,-576,-101", "-68,137,-95,157,-140,179,-186,199,-232,215,-281,228,-330,235,-379,237,-428,230,-475,213,-514,184,-547,144,-571,101,-588,54,-596,4,-595,-46,-589,-79,-579,-93", "-61,133,-88,153,-132,176,-178,196,-224,212,-272,226,-321,235,-371,237,-420,232,-467,217,-508,190,-542,151,-568,109,-586,62,-595,13,-596,-37,-591,-71,-581,-85", "-57,131,-84,151,-128,174,-174,194,-220,211,-268,225,-317,234,-366,237,-416,233,-463,219,-505,193,-539,155,-566,113,-585,66,-595,17,-596,-33,-592,-67,-582,-81", "-50,127,-77,147,-121,170,-166,191,-212,208,-260,223,-309,233,-358,237,-408,234,-456,222,-498,198,-534,162,-562,120,-582,74,-594,25,-597,-25,-594,-58,-584,-73", "-43,122,-69,143,-113,166,-158,187,-204,206,-252,221,-300,231,-350,237,-399,236,-448,225,-492,203,-529,169,-558,127,-579,82,-592,34,-597,-16,-595,-50,-586,-65", "-36,118,-62,139,-106,163,-150,184,-197,203,-244,218,-292,230,-341,236,-391,236,-440,227,-485,207,-523,175,-553,135,-576,90,-591,42,-597,-8,-596,-41,-587,-57", "-29,113,-55,134,-98,159,-143,181,-189,200,-236,216,-284,228,-333,236,-383,237,-431,230,-477,212,-517,182,-549,142,-573,98,-589,51,-596,1,-596,-32,-588,-48", "-22,109,-48,130,-91,155,-135,177,-181,197,-227,213,-276,226,-325,235,-374,237,-423,232,-470,215,-511,188,-544,149,-569,106,-587,59,-596,9,-597,-24,-589,-40", "-15,104,-40,126,-83,151,-127,173,-173,194,-219,211,-267,225,-316,234,-366,237,-415,233,-462,219,-504,193,-539,156,-565,114,-584,67,-595,18,-597,-16,-590,-32", "-8,99,-33,121,-76,147,-120,170,-165,190,-212,208,-259,223,-308,233,-357,237,-407,235,-455,222,-498,198,-534,162,-561,121,-582,75,-594,26,-597,-7,-590,-24", "-1,94,-26,117,-68,142,-112,166,-157,187,-204,205,-251,220,-299,231,-349,237,-399,236,-447,225,-491,203,-528,169,-557,128,-579,83,-592,35,-596,1,-590,-15", "6,89,-19,112,-61,138,-105,162,-150,184,-196,202,-243,218,-291,230,-341,236,-390,236,-439,228,-484,208,-522,176,-553,135,-576,91,-591,43,-596,10,-590,-7", "12,85,-12,107,-54,134,-97,158,-142,180,-188,200,-235,216,-283,228,-332,236,-382,237,-431,230,-477,212,-516,182,-548,142,-572,99,-589,51,-595,18,-590,1", "19,80,-5,102,-47,130,-90,154,-134,177,-180,196,-227,213,-275,226,-324,235,-373,237,-422,232,-469,216,-510,188,-543,149,-569,107,-587,60,-594,27,-589,10", "26,74,2,97,-40,125,-82,150,-127,173,-172,193,-219,211,-267,224,-315,234,-365,237,-414,233,-462,219,-504,194,-538,156,-565,114,-584,68,-592,35,-588,18", "32,69,9,93,-33,121,-75,146,-119,169,-164,190,-211,208,-258,222,-307,232,-356,237,-406,235,-454,223,-497,199,-533,163,-561,122,-582,76,-590,44,-587,26", "39,64,15,88,-25,116,-68,142,-112,166,-157,187,-203,205,-250,220,-298,231,-348,237,-398,236,-446,225,-490,204,-527,170,-557,129,-579,84,-589,52,-586,34", "46,58,22,83,-18,111,-60,138,-104,162,-149,183,-195,202,-242,218,-290,230,-340,236,-389,236,-438,228,-483,208,-522,177,-552,136,-576,92,-586,60,-584,43", "52,53,29,78,-11,107,-53,133,-97,158,-141,180,-187,199,-234,215,-282,228,-331,236,-381,237,-430,230,-476,212,-516,183,-548,143,-572,100,-584,68,-582,51", "58,48,36,72,-4,102,-46,129,-89,154,-133,176,-179,196,-226,213,-274,226,-323,235,-372,237,-421,232,-468,216,-509,189,-543,150,-568,108,-581,76,-580,59", "64,42,42,67,3,97,-39,125,-82,150,-126,173,-171,193,-218,210,-266,224,-315,234,-364,237,-413,234,-461,220,-503,194,-538,157,-565,115,-578,84,-578,67", "70,37,49,61,9,92,-32,120,-74,146,-118,169,-164,190,-210,208,-258,222,-306,232,-355,237,-405,235,-453,223,-496,199,-532,164,-561,122,-575,92,-575,75", "76,31,55,56,16,87,-25,116,-67,141,-111,165,-156,186,-202,205,-249,220,-298,231,-347,237,-397,236,-445,226,-489,204,-527,171,-556,130,-572,100,-572,82", "83,25,61,51,22,82,-18,111,-60,137,-103,161,-148,183,-194,202,-241,218,-289,229,-339,236,-388,237,-437,228,-482,209,-521,177,-552,137,-568,108,-569,90", "89,20,67,45,29,77,-10,106,-52,133,-96,158,-140,179,-186,199,-233,215,-281,228,-330,236,-380,237,-429,230,-475,213,-515,183,-547,144,-564,116,-566,98", "96,14,73,40,36,72,-3,101,-45,129,-88,154,-133,176,-178,196,-225,213,-273,226,-322,235,-371,237,-420,232,-468,217,-509,189,-542,151,-560,123,-562,105", "102,9,80,34,43,66,3,96,-38,124,-81,149,-125,172,-171,193,-217,210,-265,224,-314,233,-363,237,-412,234,-460,220,-502,195,-537,158,-556,130,-559,113", "109,4,86,28,50,61,10,92,-31,120,-74,145,-118,169,-163,189,-209,207,-257,222,-305,232,-354,237,-404,235,-452,223,-496,200,-532,165,-552,137,-555,120", "115,-1,92,23,56,55,17,87,-24,115,-66,141,-110,165,-155,186,-201,204,-249,220,-297,231,-346,237,-396,236,-444,226,-489,205,-526,171,-547,144,-550,127", "122,-7,99,17,62,50,23,82,-17,110,-59,137,-103,161,-147,183,-193,202,-240,217,-288,229,-338,236,-388,237,-436,228,-482,209,-520,178,-542,151,-546,134", "129,-12,105,12,68,45,30,76,-10,106,-52,133,-95,157,-140,179,-185,199,-232,215,-280,228,-330,235,-379,237,-428,231,-474,213,-514,184,-537,158,-541,141", "136,-17,112,7,74,39,37,71,-3,101,-45,128,-88,153,-132,176,-178,195,-224,212,-272,226,-321,234,-371,237,-420,232,-467,217,-508,190,-531,165,-536,148", "143,-22,118,2,80,33,44,66,4,96,-38,124,-80,149,-124,172,-170,192,-216,210,-264,224,-313,233,-362,237,-412,234,-459,220,-502,195,-526,172,-531,155", "150,-27,125,-4,87,28,50,60,11,91,-31,119,-73,145,-117,168,-162,189,-208,207,-256,222,-304,232,-354,237,-403,235,-451,223,-495,200,-520,178,-526,162", "157,-31,132,-9,93,22,56,55,17,86,-23,115,-65,141,-109,164,-154,186,-200,204,-248,219,-296,231,-345,237,-395,236,-444,226,-488,205,-514,185,-521,168", "164,-36,139,-14,99,17,62,49,24,81,-16,110,-58,136,-102,161,-146,182,-192,201,-240,217,-288,229,-337,236,-387,237,-435,229,-481,210,-508,190,-515,174", "171,-41,146,-19,106,11,68,44,31,76,-9,105,-51,132,-94,157,-139,179,-185,198,-231,215,-279,227,-329,235,-378,237,-427,231,-474,214,-501,196,-509,180", "178,-45,153,-23,112,6,75,38,38,70,-2,100,-44,128,-87,153,-131,175,-177,195,-223,212,-271,225,-320,234,-370,237,-419,233,-466,217,-494,201,-504,186", "185,-50,160,-28,119,1,81,33,44,65,5,95,-37,123,-79,149,-124,172,-169,192,-215,209,-263,224,-312,233,-361,237,-411,234,-458,221,-487,206,-497,191", "192,-54,166,-33,126,-4,87,27,51,60,11,91,-30,119,-72,144,-116,168,-161,189,-207,207,-255,221,-303,232,-353,237,-403,235,-451,224,-480,210,-491,196", "200,-58,173,-37,133,-9,94,22,57,54,18,86,-22,114,-65,140,-108,164,-153,185,-200,204,-247,219,-295,230,-344,237,-394,236,-443,226,-473,214,-484,200", "207,-62,180,-42,139,-14,100,16,63,49,25,81,-15,109,-57,136,-101,160,-146,182,-192,201,-239,217,-287,229,-336,236,-386,237,-435,229,-466,218,-477,204", "215,-66,188,-46,146,-19,107,11,69,43,32,75,-8,105,-50,132,-94,156,-138,178,-184,198,-231,214,-279,227,-328,235,-377,237,-426,231,-458,221,-470,208", "222,-70,195,-50,153,-24,113,6,75,38,38,70,-1,100,-43,127,-86,152,-130,175,-176,195,-222,212,-271,225,-319,234,-369,237,-418,233,-450,224,-463,212", "229,-74,203,-55,160,-29,120,1,82,32,45,64,6,95,-36,123,-79,148,-123,171,-168,192,-215,209,-262,223,-311,233,-360,237,-410,234,-442,227,-456,215", "237,-78,210,-59,167,-33,126,-5,88,27,52,59,12,90,-29,118,-71,144,-115,167,-160,188,-207,206,-254,221,-303,232,-352,237,-402,235,-434,229,-448,218", "245,-82,217,-63,174,-38,133,-10,94,21,58,54,19,85,-22,114,-64,140,-108,164,-153,185,-199,204,-246,219,-294,230,-344,237,-393,236,-426,231,-440,221", "253,-85,225,-67,181,-42,140,-15,101,16,64,48,25,80,-15,109,-57,135,-100,160,-145,182,-191,201,-238,217,-286,229,-335,236,-385,237,-417,233,-432,223", "260,-89,232,-71,189,-47,147,-20,107,10,70,43,32,75,-8,104,-49,131,-93,156,-137,178,-183,198,-230,214,-278,227,-327,235,-376,237,-409,234,-424,225", "268,-92,239,-74,196,-51,154,-24,114,5,76,37,39,69,-1,99,-42,127,-85,152,-130,174,-175,195,-222,212,-270,225,-319,234,-368,237,-401,235,-416,226", "276,-95,247,-78,203,-55,161,-29,120,0,82,31,46,64,6,94,-35,122,-78,148,-122,171,-167,191,-214,209,-262,223,-310,233,-359,237,-393,236,-408,228", "284,-98,255,-82,211,-59,168,-34,127,-5,89,26,52,58,13,90,-28,118,-70,144,-114,167,-159,188,-206,206,-253,221,-302,232,-351,237,-384,237,-400,229", "292,-101,263,-85,218,-63,175,-38,134,-10,95,20,58,53,19,85,-21,113,-63,139,-107,163,-152,185,-198,203,-245,219,-293,230,-343,237,-376,237,-392,230", "300,-104,270,-88,225,-67,182,-43,141,-15,101,15,64,48,26,80,-14,108,-56,135,-99,159,-144,181,-190,200,-237,216,-285,228,-334,236,-367,237,-384,231", "308,-107,278,-92,233,-71,189,-47,148,-20,108,10,70,42,33,74,-7,104,-49,131,-92,155,-136,178,-182,197,-229,214,-277,227,-326,235,-359,237,-375,231", "316,-110,286,-95,240,-75,197,-51,155,-25,115,5,77,37,40,69,0,99,-42,126,-85,151,-129,174,-174,194,-221,211,-269,225,-318,234,-350,237,-367,232", "324,-112,294,-98,248,-78,204,-56,162,-30,121,-1,83,31,46,63,7,94,-35,122,-77,147,-121,170,-166,191,-213,209,-261,223,-309,233,-342,237,-359,232", "332,-115,302,-100,256,-82,211,-60,169,-34,128,-6,89,25,53,58,14,89,-27,117,-70,143,-114,167,-159,188,-205,206,-253,221,-301,231,-334,236,-351,232", "340,-117,310,-103,264,-85,219,-64,176,-39,135,-11,96,20,59,53,20,84,-20,113,-62,139,-106,163,-151,184,-197,203,-244,218,-292,230,-326,235,-342,232", "348,-119,318,-106,271,-89,226,-68,183,-43,142,-16,102,15,65,47,27,79,-13,108,-55,135,-99,159,-143,181,-189,200,-236,216,-284,228,-317,234,-334,232", "357,-121,326,-108,279,-92,234,-71,190,-47,149,-21,109,9,71,42,34,74,-6,103,-48,130,-91,155,-136,177,-181,197,-228,214,-276,227,-309,233,-325,232", "365,-122,334,-111,287,-95,241,-75,197,-52,155,-25,115,4,77,36,41,68,1,98,-41,126,-84,151,-128,174,-173,194,-220,211,-268,225,-300,231,-317,231", "374,-124,342,-113,294,-98,249,-79,205,-56,162,-30,122,-1,84,30,47,63,8,93,-34,121,-76,147,-120,170,-166,191,-212,208,-260,223,-292,230,-308,231", "382,-125,350,-115,302,-101,257,-82,212,-60,169,-35,129,-6,90,25,53,57,14,89,-27,117,-69,143,-113,166,-158,187,-204,206,-252,221,-284,228,-300,230", "391,-126,358,-116,311,-103,264,-86,220,-64,176,-39,135,-11,96,19,60,52,21,84,-19,112,-62,138,-105,162,-150,184,-196,203,-243,218,-276,226,-292,229", "399,-127,367,-118,319,-106,272,-89,227,-68,184,-43,142,-16,103,14,66,47,28,78,-12,107,-54,134,-98,159,-142,180,-188,200,-235,216,-267,225,-283,228", "407,-128,375,-120,327,-108,280,-92,234,-72,191,-48,149,-21,109,9,72,41,35,73,-5,103,-47,130,-90,155,-135,177,-181,197,-227,213,-259,223,-275,227", "416,-128,384,-121,335,-111,288,-95,242,-75,198,-52,156,-26,116,4,78,35,41,68,2,98,-40,125,-83,151,-127,173,-173,194,-219,211,-251,220,-267,226", "425,-128,392,-122,343,-113,295,-98,250,-79,206,-56,163,-30,122,-2,84,30,48,62,8,93,-33,121,-76,146,-120,170,-165,190,-211,208,-243,218,-258,224", "433,-128,400,-123,351,-115,303,-101,257,-83,213,-61,170,-35,129,-7,91,24,54,57,15,88,-26,116,-68,142,-112,166,-157,187,-203,205,-235,216,-250,222", "442,-128,408,-123,359,-117,311,-104,265,-86,220,-65,177,-40,136,-12,97,19,60,51,21,83,-19,112,-61,138,-105,162,-149,184,-195,202,-227,213,-241,221", "450,-127,417,-124,368,-118,320,-106,273,-89,228,-68,184,-44,143,-17,104,13,66,46,28,78,-12,107,-54,134,-97,158,-142,180,-188,199,-219,211,-233,219", "459,-126,426,-124,376,-120,328,-109,281,-93,235,-72,192,-48,150,-22,110,8,72,40,35,72,-5,102,-46,129,-90,154,-134,177,-180,196,-211,208,-225,217", "467,-125,434,-124,384,-121,336,-111,288,-96,243,-76,199,-53,157,-26,117,3,79,35,42,67,2,97,-39,125,-82,150,-126,173,-172,193,-203,205,-217,215", "476,-123,442,-123,393,-122,344,-113,296,-98,250,-79,206,-57,164,-31,123,-2,85,29,48,62,9,92,-32,121,-75,146,-119,169,-164,190,-195,202,-208,213", "484,-121,450,-123,401,-123,352,-115,304,-101,258,-83,214,-61,171,-36,130,-7,91,24,55,56,16,88,-25,116,-67,142,-111,165,-156,187,-187,199,-200,210", "492,-118,459,-122,409,-123,360,-117,312,-104,266,-86,221,-65,178,-40,137,-12,98,18,61,51,22,83,-18,111,-60,138,-104,162,-149,183,-179,196,-192,208", "500,-115,467,-120,418,-124,369,-118,320,-107,274,-90,228,-69,185,-44,144,-17,104,13,67,46,29,77,-11,106,-53,133,-96,158,-141,180,-171,193,-184,205", "508,-112,476,-119,426,-124,377,-120,329,-109,281,-93,236,-72,192,-49,151,-22,111,8,73,40,36,72,-4,102,-46,129,-89,154,-133,176,-163,190,-176,202", "516,-108,484,-116,435,-124,385,-121,337,-111,289,-96,243,-76,200,-53,158,-27,117,2,79,34,43,66,3,97,-39,125,-81,150,-126,173,-156,186,-168,199", "524,-104,492,-114,443,-123,394,-122,345,-113,297,-99,251,-80,207,-57,165,-31,124,-3,86,29,49,61,10,92,-32,120,-74,146,-118,169,-148,183,-160,196", "531,-99,499,-111,451,-123,402,-123,353,-115,305,-102,259,-83,214,-61,172,-36,131,-8,92,23,55,56,16,87,-24,115,-67,141,-110,165,-140,179,-152,193", "538,-94,507,-108,460,-122,410,-123,361,-117,313,-104,267,-87,222,-65,179,-40,138,-13,98,18,61,50,23,82,-17,111,-59,137,-103,161,-133,176,-144,189", "544,-88,515,-104,468,-120,419,-124,369,-119,321,-107,275,-90,229,-69,186,-45,144,-18,105,12,67,45,30,77,-10,106,-52,133,-96,157,-125,172,-137,186", "550,-82,522,-100,476,-118,427,-124,378,-120,329,-109,282,-93,237,-73,193,-49,151,-23,111,7,74,39,37,71,-3,101,-45,128,-88,153,-117,169,-129,182", "556,-75,529,-95,485,-116,436,-124,386,-121,337,-111,290,-96,244,-77,201,-54,158,-27,118,2,80,34,43,66,4,96,-38,124,-81,149,-110,165,-121,178", "562,-68,536,-90,492,-114,444,-123,394,-122,345,-113,298,-99,252,-80,208,-58,165,-32,125,-3,86,28,50,60,10,91,-31,120,-73,145,-103,161,-114,175", "566,-61,542,-84,500,-111,452,-123,403,-123,353,-115,306,-102,260,-84,215,-62,172,-36,131,-8,93,23,56,55,17,87,-24,115,-66,141,-95,157,-106,171", "571,-53,548,-78,508,-107,460,-121,411,-124,362,-117,314,-105,268,-87,223,-66,179,-41,138,-13,99,17,62,50,23,82,-16,110,-59,137,-88,153,-99,167", "575,-45,553,-72,516,-104,469,-120,420,-124,370,-119,322,-107,275,-90,230,-70,187,-45,145,-18,106,12,68,44,30,76,-9,105,-51,132,-80,149,-91,163", "579,-38,558,-65,523,-99,477,-118,428,-124,379,-120,330,-109,283,-93,237,-73,194,-50,152,-23,112,7,74,39,37,71,-2,101,-44,128,-73,145,-83,159", "582,-30,563,-58,530,-95,485,-116,437,-124,387,-121,338,-112,291,-96,245,-77,201,-54,159,-28,119,1,81,33,44,65,4,96,-37,124,-65,141,-76,155", "585,-22,567,-50,536,-89,493,-113,445,-123,395,-122,346,-114,299,-99,253,-81,209,-58,166,-32,125,-4,87,27,50,60,11,91,-30,119,-58,136,-69,151", "587,-13,571,-43,542,-84,501,-111,453,-122,403,-123,354,-115,307,-102,261,-84,216,-62,173,-37,132,-9,93,22,57,55,18,86,-23,114,-51,132,-61,146", "589,-5,575,-35,548,-78,509,-107,461,-121,412,-124,363,-117,315,-105,268,-87,223,-66,180,-41,139,-14,100,17,63,49,24,81,-16,110,-44,128,-54,142", "591,3,578,-28,554,-71,516,-103,470,-120,421,-124,371,-119,323,-107,276,-91,231,-70,187,-46,146,-19,106,11,69,44,31,76,-9,105,-37,123,-47,138", "592,12,581,-20,559,-65,524,-99,478,-118,429,-124,380,-120,331,-110,284,-94,238,-74,195,-50,153,-24,113,6,75,38,38,70,-2,100,-30,119,-40,134", "593,20,583,-12,563,-57,530,-94,486,-116,437,-124,388,-121,339,-112,292,-97,246,-77,202,-54,160,-28,119,1,81,32,45,65,5,95,-22,114,-32,129", "594,29,585,-3,568,-50,537,-89,494,-113,446,-123,396,-122,347,-114,299,-100,254,-81,209,-59,167,-33,126,-4,88,27,51,59,12,90,-15,109,-25,124", "594,38,587,5,572,-42,543,-83,502,-110,454,-122,404,-123,355,-116,308,-102,261,-84,217,-63,174,-37,133,-9,94,21,57,54,18,86,-8,105,-18,120", "594,46,588,13,575,-34,549,-77,510,-107,462,-121,413,-124,364,-117,316,-105,269,-88,224,-67,181,-42,140,-14,100,16,63,49,25,80,-1,100,-11,115", "593,55,589,21,578,-27,554,-71,517,-103,471,-120,421,-124,372,-119,324,-108,277,-91,232,-70,188,-46,147,-19,107,11,69,43,32,75,6,95,-4,110", "592,63,590,30,581,-19,559,-64,524,-98,479,-118,430,-124,380,-120,332,-110,285,-94,239,-74,195,-51,154,-24,113,5,76,37,39,70,12,90,3,105", "591,72,590,38,583,-11,564,-56,531,-93,487,-116,438,-124,389,-122,340,-112,292,-97,247,-78,203,-55,161,-29,120,0,82,32,45,64,19,85,10,101", "589,80,589,47,585,-3,568,-49,538,-88,495,-113,447,-123,397,-122,348,-114,300,-100,254,-81,210,-59,167,-33,127,-5,88,26,52,59,25,80,17,96", "587,89,589,55,587,6,572,-41,544,-83,503,-110,455,-122,405,-123,356,-116,308,-103,262,-85,218,-63,174,-38,134,-10,95,21,58,53,32,75,24,90", "585,97,588,63,588,14,575,-34,549,-77,510,-106,463,-121,414,-124,365,-118,317,-105,270,-88,225,-67,182,-42,140,-15,101,15,64,48,39,69,31,85", "582,105,586,72,589,22,579,-26,555,-70,518,-102,472,-119,422,-124,373,-119,325,-108,278,-91,232,-71,189,-47,147,-20,108,10,70,43,46,64,38,80", "579,113,585,80,590,31,581,-18,560,-63,525,-98,480,-118,431,-124,381,-121,333,-110,285,-94,240,-74,196,-51,154,-25,114,5,76,37,52,58,44,74", "576,121,583,88,590,39,584,-10,564,-56,532,-93,488,-115,439,-124,390,-122,341,-112,293,-97,247,-78,204,-55,161,-29,121,0,82,31,58,53,51,69", "572,129,580,96,589,48,586,-2,569,-48,538,-88,496,-113,447,-123,398,-123,349,-114,301,-100,255,-82,211,-59,168,-34,127,-5,89,26,64,48,57,64", "568,137,578,104,589,56,587,7,572,-41,544,-82,503,-109,455,-122,406,-123,357,-116,309,-103,263,-85,218,-63,175,-38,134,-10,95,20,70,42,63,58", "564,144,575,112,588,64,588,15,576,-33,550,-76,511,-106,464,-121,415,-124,365,-118,317,-106,271,-89,226,-67,182,-43,141,-15,102,15,77,37,69,53", "560,151,571,120,586,73,589,23,579,-25,555,-69,519,-102,473,-119,423,-124,374,-119,326,-108,279,-92,233,-71,190,-47,148,-20,108,10,83,31,75,47", "555,159,568,127,585,81,590,32,582,-17,560,-62,526,-97,481,-117,432,-124,382,-121,334,-110,286,-95,241,-75,197,-52,155,-25,115,4,89,25,82,41", "550,166,564,135,582,89,590,40,584,-9,565,-55,532,-92,489,-115,440,-124,390,-122,342,-112,294,-98,248,-79,204,-56,162,-30,121,-1,96,20,88,36", "545,173,560,142,580,97,589,48,586,-1,569,-47,539,-87,496,-112,448,-123,399,-123,350,-114,302,-100,256,-82,212,-60,169,-34,128,-6,102,15,94,30", "540,179,556,150,577,105,589,57,587,7,573,-40,545,-81,504,-109,456,-122,407,-123,358,-116,310,-103,264,-86,219,-64,176,-39,135,-11,109,9,100,25", "535,186,551,157,574,113,588,65,589,16,576,-32,551,-75,512,-105,465,-121,415,-124,366,-118,318,-106,272,-89,226,-68,183,-43,142,-16,115,4,107,20", "529,192,546,164,571,121,586,73,589,24,579,-24,556,-69,519,-101,473,-119,424,-124,375,-119,326,-108,279,-92,234,-71,190,-48,149,-21,122,-1,113,14", "523,199,541,171,567,128,584,82,590,32,582,-16,561,-62,526,-97,482,-117,433,-124,383,-121,334,-111,287,-95,241,-75,198,-52,156,-26,129,-6,120,9", "517,205,536,177,564,136,582,90,590,41,584,-8,565,-54,533,-92,490,-115,441,-124,391,-122,342,-113,295,-98,249,-79,205,-56,163,-30,135,-11,126,4", "511,211,531,184,560,143,580,98,589,49,586,0,569,-47,540,-87,497,-112,449,-123,399,-123,350,-115,303,-101,257,-82,212,-60,170,-35,142,-16,133,-1", "505,217,525,190,555,150,577,106,588,58,587,8,573,-39,546,-81,505,-109,457,-122,408,-123,359,-116,311,-104,265,-86,220,-64,177,-39,149,-21,140,-6", "498,222,520,196,551,157,574,114,587,66,589,17,576,-31,551,-75,513,-105,466,-121,416,-124,367,-118,319,-106,272,-89,227,-68,184,-44,156,-26,147,-11", "492,228,514,202,546,164,571,121,586,74,589,25,579,-24,556,-68,520,-101,474,-119,425,-124,376,-120,327,-109,280,-92,235,-72,191,-48,163,-31,153,-16", "485,233,508,208,541,171,567,129,584,82,590,33,582,-16,561,-61,527,-96,482,-117,433,-124,384,-121,335,-111,288,-95,242,-76,199,-52,170,-35,160,-20", "478,238,502,214,536,178,563,137,582,91,590,42,584,-7,566,-53,534,-91,490,-114,442,-123,392,-122,343,-113,296,-98,250,-79,206,-57,177,-40,167,-25", "471,243,495,219,530,184,559,144,579,99,589,50,586,1,570,-46,540,-86,498,-112,450,-123,400,-123,351,-115,304,-101,258,-83,213,-61,184,-44,174,-29", "464,248,489,225,525,191,555,151,577,107,588,59,588,9,574,-38,546,-80,506,-108,458,-122,409,-123,360,-117,312,-104,265,-86,221,-65,192,-48,181,-34", "457,252,482,230,519,197,550,158,574,114,587,67,589,17,577,-30,552,-74,514,-105,467,-120,417,-124,368,-118,320,-106,273,-90,228,-69,199,-53,188,-38", "450,256,475,235,513,203,545,165,570,122,586,75,589,26,580,-23,557,-67,521,-100,475,-119,426,-124,376,-120,328,-109,281,-93,235,-72,206,-57,196,-43", "442,261,468,240,507,209,540,172,567,130,584,83,590,34,582,-15,562,-60,528,-96,483,-117,434,-124,385,-121,336,-111,289,-96,243,-76,214,-61,203,-47", "434,265,461,244,501,214,535,179,563,137,582,92,590,43,585,-7,566,-53,535,-91,491,-114,443,-123,393,-122,344,-113,296,-98,251,-80,221,-65,210,-51", "427,268,454,249,495,220,530,185,559,145,579,100,589,51,586,2,570,-45,541,-85,499,-111,451,-123,401,-123,352,-115,304,-101,259,-83,228,-69,217,-55", "419,272,447,253,488,225,524,191,554,152,576,107,588,59,588,10,574,-37,547,-79,507,-108,459,-122,409,-123,360,-117,313,-104,266,-87,236,-73,224,-59", "411,275,439,257,481,230,519,197,550,159,573,115,587,68,589,18,577,-30,552,-73,514,-104,468,-120,418,-124,369,-118,321,-107,274,-90,243,-76,232,-63", "403,278,432,261,474,235,513,203,545,166,570,123,586,76,589,27,580,-22,557,-66,522,-100,476,-119,427,-124,377,-120,329,-109,282,-93,251,-80,239,-67", "395,281,424,265,468,240,506,209,540,173,566,131,584,84,590,35,583,-14,562,-59,529,-95,484,-116,435,-124,386,-121,337,-111,289,-96,259,-83,247,-70", "387,284,417,268,461,245,500,215,535,179,562,138,581,92,590,44,585,-6,567,-52,535,-90,492,-114,443,-123,394,-122,345,-113,297,-99,267,-87,255,-74", "380,287,409,271,453,249,494,220,529,186,558,145,579,100,589,52,586,3,571,-44,541,-85,500,-111,452,-123,402,-123,353,-115,305,-102,275,-90,262,-77", "372,289,401,275,446,253,487,226,524,192,554,153,576,108,588,60,588,11,574,-37,547,-79,508,-108,460,-122,410,-124,361,-117,313,-104,282,-93,270,-81", "364,291,393,278,439,257,481,231,518,198,549,160,573,116,587,69,589,19,577,-29,553,-72,515,-104,468,-120,419,-124,370,-119,322,-107,290,-96,277,-84", "355,294,385,280,431,261,474,236,512,204,544,167,570,124,585,77,589,28,580,-21,558,-66,522,-100,477,-118,428,-124,378,-120,330,-109,298,-99,285,-87", "347,296,378,283,424,265,467,241,506,210,539,173,566,131,583,85,590,36,583,-13,563,-58,529,-95,485,-116,436,-124,387,-121,338,-111,306,-102,293,-90", "339,298,370,285,416,268,460,245,500,215,534,180,562,139,581,93,590,44,585,-5,567,-51,536,-90,493,-114,444,-123,395,-122,346,-114,314,-105,301,-93", "331,299,362,287,408,272,453,250,493,221,529,186,558,146,579,101,589,53,587,3,571,-43,542,-84,500,-111,452,-123,403,-123,354,-115,322,-107,309,-96", "322,301,354,290,400,275,445,254,487,226,523,193,553,153,576,109,588,61,588,12,575,-36,548,-78,508,-107,461,-121,411,-124,362,-117,330,-109,316,-98", "314,303,345,292,392,278,438,258,480,231,517,199,549,160,573,117,587,69,589,20,578,-28,553,-72,516,-103,469,-120,420,-124,371,-119,338,-112,324,-101", "306,304,337,293,385,281,430,262,473,236,511,205,544,167,569,125,585,78,590,28,581,-20,558,-65,523,-99,478,-118,429,-124,379,-120,346,-114,332,-103", "297,305,329,295,377,283,423,265,466,241,505,210,539,174,565,132,583,86,590,37,583,-12,563,-58,530,-94,486,-116,437,-124,387,-121,354,-116,340,-105", "289,307,321,297,369,285,415,269,459,246,499,216,534,181,562,140,581,94,589,45,585,-4,568,-50,537,-89,494,-113,445,-123,396,-122,363,-117,348,-107", "281,308,313,298,361,288,408,272,452,250,493,221,528,187,557,147,578,102,589,54,587,4,571,-43,543,-84,501,-110,453,-122,404,-123,371,-119,356,-109", "272,309,305,300,353,290,400,275,445,254,486,227,523,193,553,154,575,110,588,62,588,13,575,-35,549,-78,509,-107,462,-121,412,-124,380,-120,365,-111", "264,310,296,301,344,292,392,278,437,258,479,232,517,199,548,161,572,118,587,70,589,21,578,-27,554,-71,517,-103,470,-120,421,-124,388,-121,373,-112", "256,311,288,302,336,294,384,281,430,262,472,237,511,205,543,168,569,125,585,79,590,29,581,-19,559,-64,524,-99,479,-118,429,-124,396,-122,381,-114", "247,312,279,304,328,295,376,283,422,266,465,242,505,211,538,175,565,133,583,87,590,38,583,-11,564,-57,531,-94,487,-116,438,-124,404,-123,389,-115", "239,312,271,305,320,297,368,286,414,269,458,246,498,217,533,181,561,140,581,95,589,46,585,-3,568,-49,537,-89,494,-113,446,-123,413,-124,397,-116", "230,313,263,306,312,299,360,288,407,272,451,250,492,222,528,188,557,148,578,103,589,55,587,5,572,-42,543,-83,502,-110,454,-122,421,-124,405,-117", "222,314,255,307,304,300,352,290,399,276,444,255,485,227,522,194,552,155,575,111,588,63,588,13,575,-34,549,-77,510,-106,463,-121,430,-124,414,-117", "214,314,246,307,295,301,344,292,391,278,436,259,478,232,516,200,548,162,572,118,587,71,589,22,578,-26,554,-70,517,-103,471,-120,438,-124,422,-117", "205,314,238,308,287,303,335,294,383,281,429,263,472,237,510,206,543,169,568,126,585,79,590,30,581,-19,560,-63,525,-98,479,-118,447,-123,430,-117", "193,315,225,309,274,304,323,296,371,285,417,268,461,244,501,214,535,179,563,138,582,92,590,43,585,-6,566,-52,535,-91,491,-114,459,-122,442,-117", "184,315,217,310,266,305,315,298,363,287,410,271,454,249,494,220,530,185,559,145,579,100,589,51,586,2,570,-45,541,-85,499,-111,467,-120,450,-116", "176,315,209,310,258,306,307,299,355,289,402,274,447,253,488,225,524,191,554,152,576,108,588,60,588,10,574,-37,547,-79,507,-108,476,-119,458,-115", "167,315,200,310,250,307,299,301,347,291,394,277,439,257,481,230,518,198,550,159,573,115,587,68,589,18,577,-30,552,-73,514,-104,484,-116,466,-114", "159,315,192,311,241,308,290,302,338,293,386,280,432,261,474,235,512,204,545,166,570,123,586,76,589,27,580,-22,558,-66,522,-100,492,-114,474,-113", "151,315,184,311,233,308,282,303,331,295,378,283,424,265,467,240,506,209,540,173,566,131,584,84,590,35,583,-14,562,-59,529,-95,500,-111,482,-111", "142,315,175,311,224,309,274,304,323,297,371,285,417,268,460,245,500,215,535,179,562,138,581,93,590,44,585,-5,567,-52,535,-90,507,-108,490,-108", "134,315,167,311,216,310,265,305,314,298,363,287,409,272,453,249,494,220,529,186,558,146,579,101,589,52,587,3,571,-44,542,-85,515,-104,497,-106", "125,315,158,311,208,310,257,306,306,300,354,289,401,275,446,253,487,226,524,192,554,153,576,108,588,60,588,11,574,-36,547,-79,522,-100,505,-102", "117,314,150,311,199,310,249,307,298,301,346,291,393,278,439,258,480,231,518,198,549,160,573,116,587,69,589,19,577,-29,553,-72,529,-95,512,-99", "108,314,142,311,191,311,240,308,289,302,338,293,385,280,431,261,474,236,512,204,544,167,570,124,585,77,589,28,580,-21,558,-66,536,-90,519,-95", "100,313,133,310,183,311,232,309,281,303,330,295,378,283,424,265,467,241,506,210,539,174,566,132,583,85,590,36,583,-13,563,-58,542,-84,525,-91", "92,313,125,310,174,311,223,309,273,304,322,297,370,285,416,269,460,245,499,216,534,180,562,139,581,93,590,45,585,-5,567,-51,548,-78,532,-86", "83,312,117,310,166,311,215,310,265,305,313,298,362,287,408,272,453,250,493,221,529,186,558,146,579,101,589,53,587,4,571,-43,553,-72,538,-81", "75,311,108,309,157,311,207,310,256,306,305,300,353,290,400,275,445,254,486,226,523,193,553,153,576,109,588,61,588,12,575,-36,558,-65,544,-75", "67,311,100,309,149,311,199,310,248,307,297,301,345,292,392,278,438,258,480,231,517,199,549,160,573,117,587,70,589,20,578,-28,563,-58,549,-69", "58,310,91,308,141,311,190,311,239,308,288,302,337,294,384,281,430,262,473,236,511,205,544,167,569,125,585,78,590,29,581,-20,567,-50,554,-62", "50,309,83,308,132,310,182,311,231,309,280,304,329,295,377,283,423,265,466,241,505,211,539,174,565,132,583,86,590,37,583,-12,571,-43,559,-55", "41,308,75,307,124,310,173,311,223,309,272,305,321,297,369,285,415,269,459,246,499,216,533,181,561,140,581,94,589,45,585,-4,575,-35,563,-48", "33,307,66,306,116,310,165,311,214,310,264,306,313,298,361,288,407,272,452,250,492,222,528,187,557,147,578,102,589,54,587,4,578,-27,567,-41", "25,305,58,305,107,309,157,311,206,310,255,306,304,300,353,290,399,275,444,254,486,227,522,193,553,154,575,110,588,62,588,13,581,-20,571,-33", "16,304,50,304,99,309,148,311,198,310,247,307,296,301,344,292,391,278,437,258,479,232,517,199,548,161,572,118,587,70,589,21,583,-11,574,-26", "8,303,41,303,91,308,140,311,189,311,239,308,287,303,336,294,384,281,429,262,472,237,510,205,543,168,569,126,585,79,590,29,585,-3,577,-18", "0,302,33,302,82,308,132,310,181,311,230,309,279,304,328,295,376,283,422,266,465,242,504,211,538,175,565,133,583,87,590,38,587,5,580,-10", "-8,300,25,301,74,307,123,310,172,311,222,309,271,305,320,297,368,286,414,269,458,246,498,217,533,181,561,141,581,95,589,46,588,13,582,-2", "-17,299,17,300,66,306,115,310,164,311,213,310,263,306,312,299,360,288,407,273,451,251,492,222,527,188,557,148,578,103,589,55,589,22,584,6", "-25,297,8,299,57,305,106,309,156,311,205,310,255,307,303,300,352,290,399,276,444,255,485,227,522,194,552,155,575,111,588,63,590,30,585,14", "-33,295,0,297,49,304,98,309,147,311,197,310,246,307,295,301,343,292,391,278,436,259,478,233,516,200,548,162,572,119,586,71,590,38,587,22", "-41,294,-8,296,41,303,90,308,139,311,188,311,238,308,287,303,335,294,383,281,429,263,471,237,510,206,543,169,568,126,585,80,589,47,587,30", "-50,292,-16,294,32,302,81,307,131,310,180,311,229,309,278,304,327,296,375,284,421,266,465,242,504,212,538,176,565,134,583,88,589,55,588,39", "-58,290,-25,293,24,301,73,307,122,310,172,311,221,309,270,305,319,297,367,286,414,270,457,247,497,217,532,182,561,141,580,96,588,64,588,47", "-66,288,-33,291,16,300,65,306,114,310,163,311,213,310,262,306,311,299,359,288,406,273,450,251,491,223,527,188,556,149,578,104,586,72,587,55", "-74,286,-41,289,7,298,56,305,105,309,155,311,204,310,254,307,303,300,351,290,398,276,443,255,484,228,521,195,552,156,575,112,585,80,587,64", "-82,284,-49,287,-1,297,48,304,97,309,147,311,196,310,245,307,294,302,342,292,390,279,435,259,478,233,515,201,547,163,572,119,583,88,585,72", "-90,282,-57,286,-9,296,40,303,89,308,138,311,188,311,237,308,286,303,334,294,382,281,428,263,471,238,509,207,542,170,568,127,580,96,584,81", "-99,279,-66,284,-17,294,31,302,80,307,130,310,179,311,228,309,278,304,326,296,374,284,420,267,464,243,503,212,537,176,564,135,578,104,582,89", "-107,277,-74,282,-26,293,23,301,72,307,121,310,171,311,220,309,269,305,318,297,366,286,413,270,457,247,497,218,532,183,560,142,575,112,580,97", "-115,274,-82,279,-34,291,15,300,64,306,113,310,162,311,212,310,261,306,310,299,358,288,405,273,450,251,490,223,526,189,556,149,571,120,578,105", "-123,272,-90,277,-42,289,7,298,55,305,105,309,154,311,203,310,253,307,302,300,350,290,397,276,442,256,484,228,521,195,551,156,568,128,575,113", "-131,269,-98,275,-50,287,-2,297,47,304,96,309,146,311,195,310,244,308,293,302,342,292,389,279,435,260,477,234,515,201,547,163,564,135,572,121", "-139,266,-106,272,-58,285,-10,295,39,303,88,308,137,311,187,311,236,308,285,303,334,294,381,282,427,263,470,238,509,207,542,170,560,143,569,129", "-147,264,-114,270,-66,283,-18,294,30,302,80,307,129,310,178,311,227,309,277,304,326,296,374,284,420,267,463,243,502,213,537,177,556,150,565,136", "-154,261,-122,267,-75,281,-26,292,22,301,71,307,121,310,170,311,219,309,269,305,317,298,366,286,412,270,456,248,496,218,531,183,551,157,561,144", "-162,258,-130,265,-83,279,-35,291,14,299,63,306,112,310,161,311,211,310,260,306,309,299,357,289,404,273,449,252,490,224,526,190,546,164,557,151", "-170,254,-138,262,-91,277,-43,289,6,298,55,305,104,309,153,311,203,310,252,307,301,300,349,291,396,277,441,256,483,229,520,196,541,171,553,159", "-178,251,-146,259,-99,275,-51,287,-3,297,46,304,95,309,145,311,194,311,244,308,292,302,341,293,388,279,434,260,476,234,514,202,536,177,548,166", "-186,248,-153,256,-107,272,-59,285,-11,295,38,303,87,308,136,311,186,311,235,308,284,303,333,294,380,282,426,264,469,239,508,208,531,184,543,173", "-193,244,-161,253,-115,270,-67,283,-19,294,30,302,79,307,128,310,177,311,227,309,276,304,325,296,373,284,419,267,462,244,502,213,525,190,538,180", "-201,241,-169,250,-123,267,-75,281,-27,292,21,301,70,307,120,310,169,311,218,309,268,305,317,298,365,287,411,271,455,248,495,219,520,196,533,187", "-209,237,-177,247,-131,265,-83,279,-35,290,13,299,62,306,111,310,161,311,210,310,259,306,308,299,357,289,403,274,448,252,489,224,514,202,528,193", "-216,234,-185,244,-139,262,-92,277,-44,289,5,298,54,305,103,309,152,311,202,310,251,307,300,301,348,291,395,277,441,256,482,230,508,208,522,200", "-224,230,-192,240,-146,259,-100,274,-52,287,-3,297,45,304,95,309,144,311,193,311,243,308,292,302,340,293,387,280,433,260,475,235,501,214,516,206", "-231,226,-200,237,-154,256,-108,272,-60,285,-12,295,37,303,86,308,136,311,185,311,234,308,283,303,332,295,380,282,426,264,469,239,495,219,510,212", "-239,221,-207,233,-162,253,-116,269,-68,283,-20,294,29,302,78,307,127,310,177,311,226,309,275,304,324,296,372,284,418,268,462,244,489,225,504,218", "-246,217,-215,229,-170,250,-124,267,-76,281,-28,292,20,300,70,306,119,310,168,311,217,309,267,305,316,298,364,287,410,271,454,248,482,230,498,224", "-253,213,-222,225,-178,247,-132,264,-84,279,-36,290,12,299,61,306,110,310,160,311,209,310,259,306,307,299,356,289,402,274,447,253,475,235,491,230", "-260,209,-230,221,-185,243,-139,261,-92,276,-45,289,4,298,53,305,102,309,151,311,201,310,250,307,299,301,347,291,395,277,440,257,468,240,485,235", "-268,204,-237,217,-193,240,-147,259,-100,274,-53,287,-4,296,45,304,94,308,143,311,193,311,242,308,291,302,339,293,387,280,432,261,461,244,478,240", "-275,199,-245,213,-201,236,-155,256,-108,272,-61,285,-13,295,36,303,85,308,135,311,184,311,233,308,282,303,331,295,379,282,425,264,454,249,471,245", "-282,195,-252,209,-208,233,-163,253,-117,269,-69,283,-21,293,28,302,77,307,126,310,176,311,225,309,274,304,323,296,371,285,417,268,447,253,464,250", "-289,190,-259,205,-216,229,-171,250,-124,267,-77,281,-29,292,20,300,69,306,118,310,167,311,217,310,266,305,315,298,363,287,409,271,439,257,457,255", "-295,185,-266,200,-223,225,-179,246,-132,264,-85,278,-37,290,11,299,60,305,110,309,159,311,208,310,258,306,307,299,355,289,402,274,432,261,449,259", "-302,180,-273,195,-231,221,-186,243,-140,261,-93,276,-45,288,3,298,52,305,101,309,151,311,200,310,249,307,298,301,347,291,394,277,424,265,442,264", "-309,174,-280,191,-238,217,-194,239,-148,258,-101,274,-54,286,-5,296,44,304,93,308,142,311,192,311,241,308,290,302,338,293,386,280,417,268,434,268", "-315,169,-287,186,-245,213,-201,236,-156,255,-109,271,-62,285,-13,295,35,303,84,308,134,311,183,311,232,308,281,303,330,295,378,283,409,272,427,271", "-322,163,-293,181,-252,209,-209,232,-164,252,-117,269,-70,283,-22,293,27,301,76,307,125,310,175,311,224,309,273,304,322,297,370,285,401,275,419,275", "-328,158,-300,176,-259,204,-216,229,-172,249,-125,266,-78,280,-30,292,19,300,68,306,117,310,166,311,216,310,265,305,314,298,362,287,393,278,411,279", "-334,152,-306,171,-267,200,-224,225,-179,246,-133,264,-86,278,-38,290,10,299,59,305,109,309,158,311,207,310,257,306,306,300,354,289,385,280,403,282", "-340,146,-313,165,-274,195,-231,221,-187,243,-141,261,-94,276,-46,288,2,298,51,304,100,309,150,311,199,310,248,307,297,301,346,291,378,283,395,285", "-346,140,-319,160,-281,190,-239,217,-195,239,-149,258,-102,274,-54,286,-6,296,43,303,92,308,141,311,191,311,240,308,289,302,337,293,370,285,387,287", "-352,134,-326,154,-287,185,-246,212,-202,236,-157,255,-110,271,-63,284,-14,295,34,302,84,308,133,310,182,311,232,309,281,303,329,295,362,287,379,290", "-358,128,-332,149,-294,180,-253,208,-210,232,-165,252,-118,269,-71,282,-22,293,26,301,75,307,125,310,174,311,223,309,272,305,321,297,353,290,371,292", "-363,121,-338,143,-300,175,-260,204,-217,228,-172,249,-126,266,-79,280,-31,291,18,300,67,306,116,310,165,311,215,310,264,306,313,298,345,292,363,295", "-369,115,-344,137,-307,170,-267,199,-225,224,-180,246,-134,263,-87,278,-39,290,10,299,59,305,108,309,157,311,207,310,256,306,305,300,337,294,354,297", "-374,108,-349,131,-314,165,-274,194,-232,220,-188,242,-142,261,-95,276,-47,288,1,297,50,304,99,309,149,311,198,310,248,307,296,301,329,295,346,299", "-379,101,-355,124,-320,159,-281,190,-240,216,-195,239,-150,258,-103,273,-55,286,-7,296,42,303,91,308,140,311,190,311,239,308,288,302,321,297,338,300", "-384,95,-360,118,-326,154,-288,185,-247,212,-203,235,-158,255,-111,271,-63,284,-15,295,34,302,83,308,132,310,181,311,231,309,280,304,313,298,330,302", "-389,88,-366,112,-332,148,-295,180,-254,208,-210,232,-165,252,-119,268,-72,282,-23,293,25,301,74,307,124,310,173,311,222,309,272,305,304,300,321,304", "-393,80,-371,105,-338,142,-301,175,-261,203,-218,228,-173,249,-127,266,-80,280,-32,291,17,300,66,306,115,310,164,311,214,310,263,306,296,301,313,305", "-398,73,-376,98,-344,136,-308,169,-268,199,-226,224,-181,245,-135,263,-88,278,-40,290,9,299,58,305,107,309,156,311,206,310,255,306,287,303,304,307", "-402,66,-381,92,-350,130,-314,164,-275,194,-233,220,-189,242,-143,260,-96,276,-48,288,1,297,49,304,98,309,148,311,197,310,247,307,279,304,296,308", "-406,58,-385,85,-356,124,-321,159,-282,189,-240,216,-196,238,-151,257,-104,273,-56,286,-8,296,41,303,90,308,140,311,189,311,238,308,271,305,288,309", "-410,51,-390,78,-361,118,-327,153,-289,184,-247,211,-204,235,-158,254,-112,271,-64,284,-16,294,33,302,82,308,131,310,181,311,230,309,263,306,280,310", "-413,43,-394,70,-366,111,-333,147,-295,179,-254,207,-211,231,-166,251,-120,268,-72,282,-24,293,24,301,74,307,123,310,172,311,221,309,255,307,271,311", "-417,35,-399,63,-372,104,-339,141,-302,174,-262,203,-219,227,-174,248,-128,266,-80,280,-32,291,16,300,65,306,114,310,164,311,213,310,246,307,263,312", "-420,27,-402,56,-377,98,-345,135,-309,169,-269,198,-226,223,-182,245,-136,263,-88,278,-41,289,8,299,57,305,106,309,155,311,205,310,238,308,254,313", "-423,19,-406,48,-381,91,-351,129,-315,163,-276,193,-234,219,-189,242,-144,260,-97,275,-49,288,0,297,49,304,98,309,147,311,197,310,229,309,246,313", "-426,11,-410,41,-386,84,-356,123,-321,158,-283,189,-241,215,-197,238,-151,257,-105,273,-57,286,-9,296,40,303,89,308,139,311,188,311,221,309,237,314", "-428,3,-413,33,-391,77,-361,117,-327,152,-289,184,-248,211,-204,234,-159,254,-113,270,-65,284,-17,294,32,302,81,307,130,310,180,311,213,310,229,315", "-430,-5,-416,25,-395,70,-367,110,-333,147,-296,179,-255,207,-212,231,-167,251,-121,268,-73,282,-25,293,24,301,73,307,122,310,171,311,204,310,221,315", "-432,-13,-419,17,-399,62,-372,104,-340,141,-303,174,-262,202,-220,227,-175,248,-129,265,-81,280,-33,291,15,300,64,306,114,310,163,311,196,310,212,315", "-434,-22,-422,9,-403,55,-377,97,-345,135,-309,168,-269,198,-227,223,-183,245,-137,263,-89,277,-41,289,7,298,56,305,105,309,155,311,188,311,204,316", "-435,-30,-424,1,-407,47,-382,90,-351,129,-316,163,-277,193,-235,219,-190,241,-144,260,-97,275,-50,287,-1,297,48,304,97,309,146,311,179,311,196,316", "-436,-39,-426,-7,-410,40,-386,83,-357,122,-322,157,-283,188,-242,215,-198,238,-152,257,-105,273,-58,285,-9,296,39,303,88,308,138,311,171,311,187,316", "-437,-47,-428,-15,-413,32,-391,76,-362,116,-328,152,-290,183,-249,211,-205,234,-160,254,-114,270,-66,283,-18,294,31,302,80,307,130,310,162,311,178,316", "-438,-56,-430,-23,-416,24,-395,69,-367,110,-334,146,-297,178,-256,206,-213,230,-168,251,-121,268,-74,281,-26,292,23,301,72,307,121,310,154,311,170,316", "-438,-64,-431,-32,-419,17,-399,62,-373,103,-340,140,-303,173,-263,202,-220,227,-176,247,-129,265,-82,279,-34,291,14,300,63,306,113,310,146,311,162,316", "-438,-73,-432,-40,-422,8,-403,54,-378,96,-346,134,-310,168,-270,197,-228,223,-183,244,-137,262,-90,277,-42,289,6,298,55,305,104,309,137,311,153,316", "-438,-81,-433,-48,-424,0,-407,47,-382,89,-352,128,-316,162,-277,192,-235,218,-191,241,-145,259,-98,275,-51,287,-2,297,47,304,96,309,129,310,145,315", "-437,-91,-434,-57,-426,-8,-410,39,-387,83,-357,122,-323,157,-284,188,-243,214,-199,237,-153,257,-106,272,-59,285,-10,295,38,303,88,308,121,310,137,315", "-436,-100,-434,-65,-428,-16,-414,31,-391,75,-363,116,-329,151,-291,183,-250,210,-206,234,-161,254,-114,270,-67,283,-19,294,30,302,79,307,112,310,128,315", "-434,-109,-434,-73,-430,-24,-417,24,-396,68,-368,109,-335,146,-297,178,-257,206,-213,230,-169,250,-122,267,-75,281,-27,292,22,301,71,307,104,309,120,314", "-433,-118,-433,-82,-431,-32,-420,16,-400,61,-373,102,-341,140,-304,173,-264,201,-221,226,-176,247,-130,265,-83,279,-35,291,14,299,63,306,95,309,111,314", "-430,-127,-433,-91,-432,-41,-422,8,-404,53,-378,95,-347,133,-311,167,-271,197,-229,222,-184,244,-138,262,-91,277,-43,289,5,298,54,305,87,308,103,313", "-428,-135,-431,-100,-433,-49,-425,0,-407,46,-383,89,-352,127,-317,162,-278,192,-236,218,-192,240,-146,259,-99,275,-51,287,-3,297,46,304,79,307,95,312", "-425,-143,-430,-109,-434,-57,-427,-9,-411,38,-387,82,-358,121,-323,156,-285,187,-243,214,-199,237,-154,256,-107,272,-60,285,-11,295,38,303,70,307,86,311", "-422,-151,-428,-118,-434,-66,-428,-17,-414,30,-392,75,-363,115,-329,151,-291,182,-250,210,-207,233,-162,253,-115,270,-68,283,-19,294,29,302,62,306,78,311", "-418,-159,-426,-126,-434,-74,-430,-25,-417,23,-396,67,-368,108,-335,145,-298,177,-257,205,-214,230,-169,250,-123,267,-76,281,-28,292,21,301,54,305,70,310", "-415,-167,-424,-134,-433,-83,-431,-33,-420,15,-400,60,-374,102,-341,139,-305,172,-265,201,-222,226,-177,247,-131,264,-84,279,-36,290,13,299,45,304,61,309", "-410,-175,-421,-142,-433,-92,-432,-42,-422,7,-404,53,-379,95,-347,133,-311,167,-272,196,-229,222,-185,243,-139,262,-92,277,-44,289,4,298,37,303,53,308", "-406,-182,-418,-150,-431,-101,-433,-50,-425,-1,-408,45,-383,88,-353,127,-318,161,-279,191,-237,218,-193,240,-147,259,-100,274,-52,287,-4,297,29,302,44,307", "-401,-189,-414,-158,-430,-110,-434,-58,-427,-9,-411,37,-388,81,-358,121,-324,156,-285,187,-244,213,-200,237,-155,256,-108,272,-60,285,-12,295,20,300,36,305", "-396,-196,-410,-166,-428,-118,-434,-67,-429,-17,-414,30,-392,74,-364,114,-330,150,-292,182,-251,209,-208,233,-162,253,-116,269,-68,283,-20,294,12,299,28,304", "-391,-203,-406,-173,-426,-127,-434,-75,-430,-26,-417,22,-397,67,-369,108,-336,144,-299,177,-258,205,-215,229,-170,250,-124,267,-77,281,-28,292,4,298,20,303", "-385,-209,-402,-180,-423,-135,-433,-84,-431,-34,-420,14,-401,59,-374,101,-342,138,-305,172,-265,200,-223,225,-178,246,-132,264,-85,279,-37,290,-4,296,11,301", "-379,-216,-397,-187,-420,-143,-432,-93,-432,-42,-423,6,-404,52,-379,94,-348,132,-312,166,-272,196,-230,221,-186,243,-140,261,-93,276,-45,288,-13,295,3,300", "-373,-222,-392,-194,-417,-151,-431,-102,-433,-51,-425,-2,-408,44,-384,87,-353,126,-318,161,-279,191,-238,217,-193,240,-148,259,-101,274,-53,287,-21,293,-5,298", "-367,-228,-387,-201,-414,-159,-430,-111,-434,-59,-427,-10,-412,37,-388,80,-359,120,-325,155,-286,186,-245,213,-201,236,-155,256,-109,272,-61,285,-29,292,-13,297", "-360,-234,-382,-207,-410,-166,-428,-119,-434,-68,-429,-18,-415,29,-393,73,-364,113,-331,150,-293,181,-252,209,-208,233,-163,253,-117,269,-69,283,-37,290,-22,295", "-353,-240,-376,-213,-406,-174,-426,-128,-434,-76,-430,-27,-418,21,-397,66,-370,107,-337,144,-299,176,-259,205,-216,229,-171,249,-125,267,-77,281,-45,288,-30,293", "-346,-245,-370,-219,-401,-181,-423,-136,-433,-85,-432,-35,-420,13,-401,58,-375,100,-343,138,-306,171,-266,200,-224,225,-179,246,-133,264,-85,278,-54,286,-38,291", "-339,-250,-363,-225,-397,-188,-420,-144,-432,-94,-433,-43,-423,5,-405,51,-380,93,-348,132,-313,166,-273,195,-231,221,-187,243,-141,261,-93,276,-62,285,-46,289", "-331,-255,-357,-231,-392,-195,-417,-152,-431,-103,-433,-52,-425,-3,-408,43,-384,87,-354,125,-319,160,-280,190,-238,217,-194,239,-148,258,-102,274,-70,283,-54,287", "-324,-260,-350,-237,-387,-201,-413,-160,-429,-112,-434,-60,-427,-11,-412,36,-389,80,-359,119,-325,155,-287,186,-246,213,-202,236,-156,255,-110,271,-78,280,-62,285", "-317,-264,-343,-242,-381,-208,-410,-167,-428,-120,-434,-68,-429,-19,-415,28,-393,72,-365,113,-331,149,-293,181,-253,208,-209,232,-164,252,-118,269,-86,278,-70,283", "-309,-268,-336,-247,-375,-214,-405,-174,-425,-129,-434,-77,-430,-28,-418,20,-397,65,-370,106,-337,143,-300,176,-260,204,-217,228,-172,249,-126,266,-94,276,-78,281", "-302,-272,-328,-252,-369,-220,-401,-182,-423,-137,-433,-86,-432,-36,-421,12,-401,58,-375,99,-343,137,-307,170,-267,199,-224,224,-180,246,-134,264,-102,274,-87,279", "-294,-276,-321,-257,-363,-226,-396,-189,-420,-145,-432,-95,-433,-44,-423,4,-405,50,-380,93,-349,131,-313,165,-274,195,-232,220,-187,242,-141,261,-110,271,-95,276", "-287,-280,-314,-261,-356,-232,-391,-195,-417,-153,-431,-104,-433,-52,-425,-4,-409,43,-385,86,-355,125,-320,160,-281,190,-239,216,-195,239,-149,258,-118,269,-103,274", "-279,-283,-307,-265,-349,-237,-386,-202,-413,-160,-429,-113,-434,-61,-427,-12,-412,35,-389,79,-360,119,-326,154,-288,185,-246,212,-202,235,-157,255,-126,266,-111,271", "-271,-287,-299,-269,-342,-242,-380,-208,-409,-168,-427,-121,-434,-69,-429,-20,-415,27,-394,72,-365,112,-332,148,-294,180,-253,208,-210,232,-165,252,-134,263,-119,268", "-263,-290,-292,-273,-335,-248,-375,-215,-405,-175,-425,-130,-434,-78,-431,-28,-418,20,-398,64,-371,105,-338,142,-301,175,-260,204,-217,228,-173,249,-142,261,-126,266", "-254,-293,-284,-276,-328,-253,-368,-221,-401,-182,-422,-138,-433,-87,-432,-37,-421,11,-402,57,-376,99,-344,136,-307,170,-268,199,-225,224,-180,245,-150,258,-134,263", "-246,-296,-276,-280,-320,-257,-362,-226,-396,-189,-419,-146,-432,-96,-433,-45,-423,3,-406,50,-381,92,-350,130,-314,164,-275,194,-233,220,-188,242,-158,255,-142,260", "-237,-299,-268,-283,-313,-261,-356,-232,-391,-196,-416,-154,-431,-105,-433,-53,-426,-5,-409,42,-385,85,-355,124,-320,159,-282,189,-240,216,-196,239,-165,252,-150,257", "-229,-301,-260,-286,-306,-265,-349,-238,-385,-203,-413,-161,-429,-113,-434,-62,-428,-13,-413,34,-390,78,-361,118,-326,153,-288,185,-247,212,-203,235,-173,248,-158,254", "-220,-304,-252,-289,-299,-269,-342,-243,-380,-209,-409,-169,-427,-122,-434,-70,-429,-21,-416,26,-394,71,-366,111,-332,148,-295,180,-254,208,-211,231,-181,245,-165,251", "-211,-306,-244,-292,-291,-273,-334,-248,-374,-215,-405,-176,-425,-130,-434,-78,-431,-29,-419,19,-398,63,-371,105,-338,142,-301,175,-261,203,-218,228,-189,242,-173,247", "-203,-308,-235,-295,-283,-277,-327,-253,-368,-221,-400,-183,-422,-139,-433,-88,-432,-38,-421,11,-402,56,-376,98,-344,136,-308,169,-268,198,-226,224,-196,238,-181,244", "-195,-310,-227,-297,-276,-280,-319,-258,-361,-227,-395,-190,-419,-147,-432,-97,-433,-46,-424,3,-406,49,-381,91,-350,130,-315,164,-275,194,-233,220,-204,235,-188,240", "-187,-312,-218,-300,-268,-283,-312,-262,-355,-233,-390,-197,-416,-154,-431,-106,-433,-54,-426,-5,-410,41,-386,84,-356,124,-321,158,-282,189,-241,215,-211,231,-196,237", "-178,-314,-209,-302,-259,-286,-305,-266,-348,-238,-385,-203,-412,-162,-429,-114,-434,-63,-428,-14,-413,33,-390,77,-361,117,-327,153,-289,184,-248,211,-219,227,-203,233", "-170,-315,-201,-304,-251,-290,-298,-270,-341,-244,-379,-210,-408,-169,-427,-123,-434,-71,-429,-22,-416,26,-395,70,-367,111,-333,147,-296,179,-255,207,-226,223,-211,229", "-161,-317,-193,-306,-243,-292,-290,-273,-334,-249,-373,-216,-404,-177,-425,-131,-433,-79,-431,-30,-419,18,-399,63,-372,104,-339,141,-302,174,-262,203,-234,219,-218,225", "-153,-318,-185,-308,-234,-295,-283,-277,-326,-254,-367,-222,-400,-184,-422,-139,-433,-89,-432,-38,-422,10,-403,55,-377,97,-345,135,-309,169,-269,198,-241,215,-226,221", "-144,-320,-177,-310,-226,-298,-275,-280,-319,-258,-361,-228,-395,-191,-419,-147,-432,-98,-433,-47,-424,2,-406,48,-382,91,-351,129,-315,163,-276,193,-248,211,-233,217", "-136,-321,-168,-311,-217,-300,-267,-284,-312,-262,-354,-233,-390,-197,-415,-155,-430,-107,-433,-55,-426,-6,-410,40,-386,84,-356,123,-322,158,-283,188,-255,207,-240,213", "-127,-322,-160,-313,-209,-303,-259,-287,-304,-266,-347,-239,-384,-204,-412,-163,-429,-115,-434,-64,-428,-14,-413,33,-391,76,-362,117,-328,152,-290,184,-262,202,-247,209", "-118,-323,-152,-314,-200,-305,-250,-290,-297,-270,-340,-244,-379,-210,-408,-170,-427,-124,-434,-72,-430,-23,-416,25,-395,69,-367,110,-334,147,-296,179,-270,198,-254,204", "-109,-324,-143,-315,-192,-306,-242,-293,-289,-274,-333,-249,-373,-216,-404,-177,-424,-132,-433,-80,-431,-31,-419,17,-399,62,-372,103,-340,141,-303,174,-277,193,-261,199", "-100,-324,-134,-317,-184,-308,-234,-295,-282,-277,-325,-254,-367,-222,-399,-185,-422,-140,-433,-90,-432,-39,-422,9,-403,55,-377,97,-346,134,-310,168,-283,188,-268,195", "-92,-325,-126,-318,-176,-310,-225,-298,-274,-281,-318,-259,-360,-228,-394,-191,-418,-148,-432,-99,-433,-48,-424,1,-407,47,-382,90,-351,128,-316,163,-290,183,-275,190", "-83,-325,-117,-318,-168,-311,-216,-300,-266,-284,-311,-263,-353,-234,-389,-198,-415,-156,-430,-107,-434,-56,-426,-7,-410,39,-387,83,-357,122,-322,157,-297,178,-281,185", "-74,-326,-108,-319,-159,-313,-208,-303,-258,-287,-304,-267,-347,-239,-384,-205,-411,-164,-429,-116,-434,-64,-428,-15,-414,32,-391,76,-362,116,-328,152,-303,173,-288,180", "-65,-326,-99,-320,-151,-314,-200,-305,-250,-290,-296,-270,-339,-245,-378,-211,-407,-171,-426,-125,-434,-73,-430,-24,-417,24,-395,68,-368,109,-334,146,-310,168,-295,175", "-57,-326,-91,-321,-142,-315,-192,-307,-241,-293,-289,-274,-332,-250,-372,-217,-403,-178,-424,-133,-433,-81,-431,-32,-419,16,-400,61,-373,103,-340,140,-316,162,-301,170", "-48,-326,-82,-321,-133,-317,-183,-308,-233,-296,-281,-278,-324,-255,-366,-223,-399,-185,-421,-141,-433,-90,-432,-40,-422,8,-403,54,-378,96,-346,134,-323,157,-308,165", "-40,-326,-73,-321,-125,-318,-175,-310,-224,-298,-273,-281,-317,-259,-359,-229,-394,-192,-418,-149,-432,-100,-433,-48,-424,0,-407,46,-383,89,-352,128,-329,151,-314,159", "-31,-326,-65,-322,-116,-319,-167,-312,-215,-301,-265,-284,-310,-263,-353,-234,-389,-199,-415,-157,-430,-108,-434,-57,-427,-8,-411,39,-387,82,-357,122,-335,146,-320,154", "-22,-326,-56,-322,-107,-319,-158,-313,-207,-303,-257,-287,-303,-267,-346,-240,-383,-205,-411,-164,-428,-117,-434,-65,-428,-16,-414,31,-392,75,-363,115,-341,140,-326,148", "-14,-326,-48,-322,-99,-320,-150,-314,-199,-305,-249,-290,-295,-271,-339,-245,-377,-212,-407,-172,-426,-126,-434,-74,-430,-24,-417,23,-396,68,-368,109,-347,133,-332,142", "-5,-325,-39,-322,-90,-321,-141,-316,-191,-307,-240,-293,-288,-274,-331,-250,-371,-218,-403,-179,-424,-134,-433,-82,-431,-33,-420,15,-400,60,-373,102,-352,127,-338,136", "4,-325,-30,-322,-81,-321,-133,-317,-182,-309,-232,-296,-280,-278,-324,-255,-365,-224,-398,-186,-421,-142,-433,-91,-432,-41,-422,7,-404,53,-378,95,-358,121,-343,130", "12,-324,-22,-322,-72,-322,-124,-318,-174,-310,-223,-299,-272,-281,-317,-259,-359,-229,-393,-193,-418,-150,-431,-100,-433,-49,-425,-1,-407,46,-383,88,-363,115,-349,124", "21,-324,-13,-321,-64,-322,-115,-319,-166,-312,-214,-301,-264,-285,-309,-263,-352,-235,-388,-199,-414,-158,-430,-109,-434,-58,-427,-9,-411,38,-388,81,-369,108,-354,118", "30,-323,-5,-321,-55,-322,-106,-319,-157,-313,-206,-303,-256,-288,-302,-267,-345,-240,-383,-206,-411,-165,-428,-118,-434,-66,-429,-17,-414,30,-392,74,-374,101,-360,111", "38,-322,4,-321,-47,-322,-98,-320,-149,-315,-198,-305,-248,-291,-295,-271,-338,-246,-377,-212,-407,-173,-426,-126,-434,-74,-430,-25,-417,22,-396,67,-379,95,-365,105", "47,-321,13,-320,-38,-322,-89,-321,-140,-316,-190,-307,-239,-294,-287,-275,-330,-251,-371,-218,-402,-180,-423,-135,-433,-83,-431,-34,-420,14,-400,60,-383,88,-370,98", "56,-320,21,-319,-29,-322,-80,-321,-132,-317,-182,-309,-231,-296,-279,-278,-323,-256,-365,-224,-398,-187,-421,-143,-432,-92,-432,-42,-423,6,-404,52,-388,81,-374,92", "64,-319,30,-319,-21,-322,-71,-322,-123,-318,-173,-310,-222,-299,-271,-282,-316,-260,-358,-230,-393,-194,-417,-151,-431,-101,-433,-50,-425,-2,-408,45,-392,74,-379,85", "73,-318,39,-318,-12,-321,-63,-322,-114,-319,-165,-312,-213,-301,-263,-285,-309,-264,-351,-236,-387,-200,-414,-158,-430,-110,-434,-59,-427,-10,-411,37,-397,66,-383,78", "82,-316,47,-317,-4,-321,-54,-322,-106,-320,-156,-313,-205,-303,-255,-288,-301,-268,-344,-241,-382,-207,-410,-166,-428,-119,-434,-67,-429,-18,-415,29,-401,59,-388,71", "90,-315,56,-316,5,-321,-46,-322,-97,-320,-148,-315,-197,-305,-247,-291,-294,-272,-337,-246,-376,-213,-406,-173,-426,-127,-434,-75,-430,-26,-418,22,-404,52,-392,64", "99,-314,64,-315,14,-320,-37,-322,-88,-321,-139,-316,-189,-307,-238,-294,-286,-275,-330,-251,-370,-219,-402,-180,-423,-136,-433,-84,-432,-34,-420,14,-408,44,-396,56", "108,-312,73,-313,22,-319,-29,-322,-79,-321,-131,-317,-181,-309,-230,-297,-278,-279,-322,-256,-364,-225,-397,-187,-420,-144,-432,-93,-433,-43,-423,6,-412,36,-399,49", "116,-310,82,-312,31,-319,-20,-322,-70,-322,-122,-318,-172,-311,-221,-299,-271,-282,-315,-260,-357,-231,-392,-194,-417,-152,-431,-102,-433,-51,-425,-2,-415,29,-403,42", "125,-309,90,-311,39,-318,-11,-321,-62,-322,-113,-319,-164,-312,-213,-301,-263,-285,-308,-264,-351,-236,-387,-201,-414,-159,-430,-111,-434,-60,-427,-11,-418,21,-406,34", "133,-307,99,-309,48,-317,-3,-321,-53,-322,-105,-320,-156,-313,-204,-304,-254,-288,-301,-268,-344,-242,-381,-207,-410,-167,-428,-120,-434,-68,-429,-19,-420,13,-409,27", "142,-305,107,-308,57,-316,6,-320,-45,-322,-96,-320,-147,-315,-196,-306,-246,-291,-293,-272,-336,-247,-376,-214,-406,-174,-425,-128,-434,-76,-430,-27,-423,5,-412,19", "150,-303,116,-306,65,-315,15,-320,-36,-322,-87,-321,-139,-316,-188,-307,-238,-294,-285,-276,-329,-252,-369,-220,-401,-181,-423,-136,-433,-85,-432,-35,-425,-3,-415,11", "158,-300,124,-304,74,-313,23,-319,-28,-322,-78,-321,-130,-317,-180,-309,-229,-297,-278,-279,-321,-257,-363,-226,-397,-188,-420,-144,-432,-94,-433,-44,-427,-11,-417,3", "167,-298,133,-302,83,-312,32,-318,-19,-322,-70,-322,-121,-318,-172,-311,-220,-299,-270,-282,-314,-261,-357,-231,-392,-195,-417,-152,-431,-103,-433,-52,-429,-19,-419,-5", "175,-296,141,-300,91,-311,40,-318,-10,-321,-61,-322,-112,-319,-163,-312,-212,-302,-262,-286,-307,-265,-350,-237,-386,-202,-413,-160,-429,-112,-434,-60,-431,-28,-421,-13", "183,-293,150,-298,100,-309,49,-317,-2,-321,-53,-322,-104,-320,-155,-314,-204,-304,-253,-289,-300,-269,-343,-242,-381,-208,-409,-167,-427,-121,-434,-69,-432,-36,-423,-21", "191,-291,158,-296,108,-307,58,-316,7,-320,-44,-322,-95,-320,-146,-315,-195,-306,-245,-292,-292,-272,-336,-247,-375,-214,-405,-175,-425,-129,-434,-77,-433,-44,-424,-29", "199,-288,166,-294,117,-306,66,-314,15,-320,-35,-322,-86,-321,-138,-316,-187,-308,-237,-294,-285,-276,-328,-252,-369,-220,-401,-182,-423,-137,-433,-86,-433,-53,-425,-37", "208,-285,174,-292,125,-304,75,-313,24,-319,-27,-322,-77,-321,-129,-317,-179,-309,-228,-297,-277,-279,-321,-257,-363,-226,-396,-189,-420,-145,-432,-95,-434,-61,-426,-45", "216,-283,182,-289,134,-302,83,-312,33,-318,-18,-322,-69,-322,-120,-318,-171,-311,-220,-300,-269,-283,-314,-261,-356,-232,-391,-196,-416,-153,-431,-104,-434,-69,-427,-53", "225,-279,190,-287,142,-300,92,-310,41,-317,-10,-321,-60,-322,-112,-319,-162,-312,-211,-302,-261,-286,-306,-265,-349,-237,-386,-202,-413,-161,-429,-113,-434,-78,-427,-61", "233,-276,199,-284,150,-298,101,-309,50,-316,-1,-321,-52,-322,-103,-320,-154,-314,-203,-304,-253,-289,-299,-269,-342,-243,-380,-209,-409,-168,-427,-122,-433,-87,-428,-70", "241,-273,207,-281,159,-296,109,-307,58,-315,8,-320,-43,-322,-94,-320,-145,-315,-195,-306,-244,-292,-291,-273,-335,-248,-374,-215,-405,-176,-425,-130,-432,-96,-427,-79", "249,-270,215,-278,167,-294,118,-306,67,-314,16,-320,-35,-322,-85,-321,-137,-316,-186,-308,-236,-295,-284,-276,-327,-253,-368,-221,-400,-183,-422,-138,-431,-105,-427,-88", "257,-266,224,-275,175,-291,126,-304,76,-313,25,-319,-26,-322,-76,-321,-128,-317,-178,-309,-227,-297,-276,-280,-320,-257,-362,-227,-396,-190,-419,-146,-429,-114,-427,-96", "265,-263,232,-272,183,-289,135,-302,84,-312,34,-318,-17,-322,-68,-322,-119,-318,-170,-311,-219,-300,-268,-283,-313,-262,-355,-232,-390,-196,-416,-154,-427,-122,-426,-105", "273,-259,240,-269,191,-286,143,-300,93,-310,42,-317,-9,-321,-59,-322,-111,-319,-161,-313,-210,-302,-260,-286,-306,-266,-348,-238,-385,-203,-412,-162,-425,-130,-425,-113", "281,-255,248,-265,199,-284,151,-298,102,-309,51,-316,0,-321,-51,-322,-102,-320,-153,-314,-202,-304,-252,-289,-298,-269,-341,-243,-380,-209,-409,-169,-422,-139,-423,-122", "288,-251,256,-262,208,-281,160,-296,110,-307,59,-315,9,-320,-42,-322,-93,-320,-144,-315,-194,-306,-243,-292,-291,-273,-334,-248,-374,-215,-404,-176,-419,-147,-421,-130", "296,-247,264,-258,216,-278,168,-293,119,-305,68,-314,17,-320,-34,-322,-84,-321,-136,-316,-186,-308,-235,-295,-283,-277,-327,-253,-368,-221,-400,-183,-416,-154,-419,-138", "303,-243,272,-255,225,-275,176,-291,127,-304,77,-313,26,-319,-25,-322,-75,-321,-127,-317,-177,-310,-226,-298,-275,-280,-319,-258,-361,-227,-395,-190,-412,-162,-417,-146", "311,-239,279,-251,233,-272,184,-289,135,-302,85,-312,34,-318,-16,-322,-67,-322,-118,-318,-169,-311,-218,-300,-267,-283,-312,-262,-355,-233,-390,-197,-408,-170,-414,-154", "318,-235,287,-247,241,-268,192,-286,144,-300,94,-310,43,-317,-8,-321,-58,-322,-110,-319,-161,-313,-209,-302,-259,-287,-305,-266,-348,-238,-385,-204,-404,-177,-411,-162", "325,-230,294,-243,249,-265,200,-283,152,-298,102,-309,52,-316,1,-321,-50,-322,-101,-320,-152,-314,-201,-304,-251,-290,-297,-270,-341,-244,-379,-210,-400,-184,-408,-170", "333,-225,302,-239,257,-262,209,-281,160,-295,111,-307,60,-315,9,-320,-41,-322,-92,-321,-144,-315,-193,-306,-243,-293,-290,-274,-333,-249,-373,-216,-395,-191,-404,-177", "341,-220,309,-235,265,-258,217,-278,169,-293,119,-305,69,-314,18,-320,-33,-322,-83,-321,-135,-316,-185,-308,-234,-295,-282,-277,-326,-254,-367,-222,-390,-197,-400,-185", "348,-215,316,-231,273,-254,226,-274,177,-291,128,-303,78,-313,27,-319,-24,-322,-75,-321,-126,-317,-176,-310,-225,-298,-274,-280,-318,-258,-361,-228,-384,-204,-395,-192", "355,-209,324,-226,280,-251,234,-271,185,-288,136,-301,86,-311,35,-318,-16,-322,-66,-322,-118,-318,-168,-311,-217,-300,-266,-284,-311,-262,-354,-234,-379,-210,-391,-199", "362,-204,331,-221,288,-247,242,-268,193,-286,145,-299,95,-310,44,-317,-7,-321,-58,-322,-109,-319,-160,-313,-208,-303,-258,-287,-304,-266,-347,-239,-373,-217,-386,-206", "369,-198,339,-216,295,-243,250,-265,201,-283,153,-297,103,-308,53,-316,2,-321,-49,-322,-100,-320,-151,-314,-200,-305,-250,-290,-297,-270,-340,-244,-366,-222,-380,-213", "375,-192,346,-211,303,-239,258,-261,210,-280,161,-295,112,-307,61,-315,10,-320,-40,-322,-91,-321,-143,-315,-192,-307,-242,-293,-289,-274,-332,-249,-360,-228,-374,-220", "382,-187,353,-205,310,-234,266,-258,218,-277,169,-293,120,-305,70,-314,19,-320,-32,-322,-82,-321,-134,-317,-184,-308,-233,-296,-281,-277,-325,-254,-353,-234,-368,-227", "388,-181,360,-200,317,-230,273,-254,226,-274,178,-291,129,-303,78,-313,28,-319,-23,-322,-74,-321,-125,-318,-176,-310,-225,-298,-274,-281,-318,-259,-346,-239,-362,-233", "394,-175,366,-194,324,-225,281,-250,235,-271,186,-288,137,-301,87,-311,36,-318,-15,-321,-65,-322,-117,-319,-167,-312,-216,-301,-266,-284,-311,-263,-339,-245,-355,-239", "400,-168,373,-189,332,-220,289,-246,243,-268,194,-286,146,-299,96,-310,45,-317,-6,-321,-57,-322,-108,-319,-159,-313,-207,-303,-257,-287,-303,-267,-332,-250,-348,-245", "405,-162,379,-183,339,-215,296,-242,251,-264,202,-283,154,-297,104,-308,53,-316,3,-321,-48,-322,-99,-320,-150,-314,-199,-305,-249,-290,-296,-271,-324,-255,-341,-251", "410,-156,385,-177,347,-210,303,-238,259,-261,211,-280,162,-295,113,-307,62,-315,11,-320,-40,-322,-90,-321,-142,-316,-191,-307,-241,-293,-288,-274,-317,-259,-334,-256", "416,-148,391,-171,354,-205,310,-234,266,-257,219,-277,170,-293,121,-305,71,-314,20,-319,-31,-322,-81,-321,-133,-317,-183,-308,-232,-296,-281,-278,-310,-263,-327,-261", "421,-141,397,-165,360,-199,318,-230,274,-253,227,-274,179,-290,130,-303,79,-312,29,-319,-22,-322,-73,-321,-124,-318,-175,-310,-224,-298,-273,-281,-303,-267,-320,-265", "426,-134,402,-159,367,-194,325,-225,282,-250,235,-271,187,-288,138,-301,88,-311,37,-318,-14,-321,-64,-322,-116,-319,-166,-312,-215,-301,-265,-284,-295,-271,-313,-270", "431,-126,407,-152,374,-188,333,-220,289,-246,244,-267,195,-285,146,-299,97,-310,46,-317,-5,-321,-56,-322,-107,-319,-158,-313,-207,-303,-257,-288,-288,-275,-306,-274", "435,-119,413,-145,380,-182,340,-215,297,-242,252,-264,203,-283,155,-297,105,-308,54,-316,4,-321,-47,-322,-98,-320,-149,-314,-198,-305,-248,-291,-280,-278,-298,-278", "439,-111,418,-138,386,-177,347,-210,304,-238,259,-260,211,-280,163,-295,114,-306,63,-315,12,-320,-39,-322,-89,-321,-141,-316,-190,-307,-240,-293,-272,-281,-290,-282", "443,-103,423,-131,392,-171,354,-204,311,-234,267,-257,220,-277,171,-292,122,-305,72,-314,21,-319,-30,-322,-81,-321,-132,-317,-182,-309,-231,-296,-264,-285,-282,-285", "446,-95,427,-123,397,-164,361,-199,318,-229,275,-253,228,-273,179,-290,131,-303,80,-312,29,-319,-21,-322,-72,-322,-124,-318,-174,-310,-223,-299,-256,-288,-274,-288", "449,-86,432,-116,403,-158,368,-193,326,-224,283,-249,236,-270,187,-288,139,-301,89,-311,38,-318,-13,-321,-63,-322,-115,-319,-165,-312,-214,-301,-248,-291,-265,-292", "452,-78,436,-108,408,-152,374,-188,334,-219,290,-245,244,-267,196,-285,147,-299,97,-309,47,-317,-4,-321,-55,-322,-106,-319,-157,-313,-206,-303,-239,-294,-257,-295", "455,-70,439,-100,413,-145,380,-182,341,-214,298,-241,252,-264,204,-282,156,-297,106,-308,55,-316,4,-321,-46,-322,-97,-320,-149,-315,-198,-305,-231,-296,-248,-298", "457,-61,443,-92,418,-137,386,-176,348,-209,305,-237,260,-260,212,-279,164,-294,114,-306,64,-315,13,-320,-38,-322,-88,-321,-140,-316,-189,-307,-222,-299,-240,-301", "458,-53,446,-84,423,-130,392,-170,355,-204,312,-233,268,-256,221,-276,172,-292,123,-304,72,-313,22,-319,-29,-322,-80,-321,-131,-317,-181,-309,-213,-301,-231,-303", "460,-45,448,-76,428,-123,398,-164,362,-198,319,-229,276,-253,229,-273,180,-290,131,-303,81,-312,30,-319,-21,-322,-71,-322,-123,-318,-173,-310,-205,-303,-222,-306", "461,-36,451,-68,432,-115,403,-158,368,-193,327,-224,283,-249,237,-270,188,-287,140,-301,90,-311,39,-318,-12,-321,-63,-322,-114,-319,-165,-312,-197,-305,-214,-308", "461,-28,453,-59,436,-107,409,-151,375,-187,334,-219,291,-245,245,-267,196,-285,148,-299,98,-309,48,-317,-3,-321,-54,-322,-105,-320,-156,-313,-189,-307,-206,-310", "462,-19,454,-51,440,-100,414,-144,381,-181,342,-214,298,-241,253,-263,205,-282,156,-296,107,-308,56,-316,5,-321,-45,-322,-96,-320,-148,-315,-181,-309,-198,-311", "462,-11,455,-43,443,-92,419,-137,387,-175,349,-208,306,-237,261,-260,213,-279,165,-294,115,-306,65,-315,14,-320,-37,-322,-88,-321,-139,-316,-172,-311,-189,-313", "461,-2,456,-35,446,-84,424,-129,393,-169,356,-203,313,-233,269,-256,222,-276,173,-292,124,-304,73,-313,23,-319,-28,-322,-79,-321,-130,-317,-164,-312,-181,-315", "461,7,457,-27,448,-75,428,-122,398,-163,363,-198,320,-228,277,-252,230,-273,181,-290,132,-302,82,-312,31,-318,-20,-322,-70,-322,-122,-318,-156,-313,-173,-316", "460,16,457,-19,451,-67,432,-114,404,-157,369,-192,328,-223,284,-249,238,-270,189,-287,141,-300,91,-311,40,-318,-11,-321,-62,-322,-113,-319,-147,-315,-164,-318", "458,25,457,-10,453,-59,436,-107,409,-150,375,-186,335,-218,292,-245,246,-266,197,-284,149,-298,99,-309,48,-317,-2,-321,-53,-322,-104,-320,-138,-316,-155,-319", "456,34,457,-2,454,-51,440,-99,414,-143,382,-181,342,-213,299,-241,254,-263,206,-282,157,-296,108,-308,57,-316,6,-320,-45,-322,-95,-320,-130,-317,-147,-320", "454,43,456,7,455,-43,443,-91,420,-136,388,-175,350,-208,306,-236,262,-259,214,-279,166,-294,116,-306,66,-314,15,-320,-36,-322,-87,-321,-121,-318,-138,-321", "452,52,455,16,456,-34,446,-83,424,-129,393,-169,356,-203,313,-232,270,-256,222,-276,174,-292,125,-304,74,-313,23,-319,-27,-322,-78,-321,-112,-319,-129,-322", "449,61,454,24,457,-26,449,-75,429,-121,399,-162,363,-197,321,-228,277,-252,231,-272,182,-289,133,-302,83,-312,32,-318,-19,-322,-69,-322,-104,-320,-120,-323", "447,70,452,33,457,-18,451,-66,433,-114,404,-156,370,-192,328,-223,285,-248,239,-269,190,-287,142,-300,92,-310,41,-318,-10,-321,-61,-322,-95,-320,-111,-324", "444,78,450,42,457,-9,453,-58,437,-106,410,-149,376,-186,336,-218,292,-244,247,-266,198,-284,150,-298,100,-309,49,-317,-2,-321,-52,-322,-86,-321,-103,-324", "440,86,448,52,457,-1,454,-50,440,-98,415,-142,382,-180,343,-213,300,-240,255,-262,207,-281,158,-296,109,-307,58,-315,7,-320,-44,-322,-77,-321,-94,-325", "437,93,445,61,456,8,456,-42,443,-90,420,-135,388,-174,350,-207,307,-236,263,-259,215,-278,166,-294,117,-306,67,-314,16,-320,-35,-322,-69,-322,-85,-325", "433,101,442,69,455,17,456,-34,446,-82,425,-128,394,-168,357,-202,314,-232,271,-255,223,-275,175,-291,126,-304,75,-313,24,-319,-26,-322,-60,-322,-77,-325", "429,109,439,77,454,25,457,-25,449,-74,429,-120,400,-162,364,-197,322,-227,278,-252,231,-272,183,-289,134,-302,84,-312,33,-318,-18,-322,-52,-322,-68,-325", "425,116,436,85,452,34,457,-17,451,-65,433,-113,405,-156,370,-191,329,-222,286,-248,240,-269,191,-287,142,-300,92,-310,42,-317,-9,-321,-43,-322,-59,-325", "421,123,433,92,450,43,457,-9,453,-57,437,-105,410,-149,377,-185,337,-217,293,-244,248,-266,199,-284,151,-298,101,-309,50,-316,-1,-321,-34,-322,-51,-325", "416,131,429,100,447,53,457,0,455,-49,441,-97,416,-142,383,-179,344,-212,301,-240,256,-262,207,-281,159,-296,109,-307,59,-315,8,-320,-26,-322,-42,-325", "412,138,425,107,445,61,456,9,456,-41,444,-89,421,-134,389,-173,351,-207,308,-236,264,-259,216,-278,167,-294,118,-305,67,-314,17,-320,-17,-322,-33,-325", "407,145,421,114,442,70,455,17,456,-33,447,-81,425,-127,395,-167,358,-201,315,-231,271,-255,224,-275,175,-291,126,-304,76,-313,25,-319,-9,-321,-25,-324", "402,151,417,122,439,78,453,26,457,-24,449,-73,430,-120,400,-161,365,-196,322,-227,279,-251,232,-272,184,-289,135,-302,85,-312,34,-318,0,-321,-16,-324", "396,158,412,129,436,85,452,35,457,-16,451,-64,434,-112,405,-155,371,-190,330,-222,287,-247,240,-269,192,-286,143,-300,93,-310,43,-317,9,-320,-8,-323", "391,164,408,136,432,93,450,44,457,-8,453,-56,437,-104,411,-148,377,-185,337,-217,294,-243,249,-265,200,-284,152,-298,102,-309,51,-316,17,-320,1,-323", "385,171,403,142,429,101,447,53,457,1,455,-48,441,-96,416,-141,384,-179,345,-212,301,-239,257,-262,208,-281,160,-296,110,-307,60,-315,26,-319,10,-322", "379,177,398,149,425,108,444,62,456,10,456,-40,444,-88,421,-134,389,-173,352,-206,309,-235,264,-258,217,-278,168,-293,119,-305,68,-314,34,-318,18,-321", "373,183,392,156,421,115,442,70,455,18,457,-32,447,-80,426,-126,395,-167,359,-201,316,-231,272,-255,225,-275,176,-291,127,-303,77,-313,43,-317,27,-320", "367,189,387,162,417,122,439,78,453,27,457,-24,449,-72,430,-119,401,-161,365,-195,323,-226,280,-251,233,-271,184,-288,136,-302,86,-311,52,-316,36,-319", "361,194,381,168,412,129,435,86,451,36,457,-15,452,-64,434,-111,406,-154,372,-190,331,-221,287,-247,241,-268,192,-286,144,-300,94,-310,60,-315,44,-318", "354,200,376,174,407,136,432,94,449,45,457,-7,453,-55,438,-103,411,-147,378,-184,338,-216,295,-243,249,-265,201,-283,152,-297,103,-308,69,-314,53,-317", "348,205,370,180,402,143,428,101,447,54,457,2,455,-47,441,-95,417,-140,384,-178,345,-211,302,-239,257,-261,209,-280,161,-295,111,-307,78,-313,62,-316", "341,211,364,186,397,150,424,109,444,63,456,10,456,-39,444,-87,422,-133,390,-172,352,-206,309,-235,265,-258,218,-277,169,-293,120,-305,86,-311,70,-314", "334,216,357,192,392,156,420,116,441,71,455,19,457,-31,447,-79,426,-125,396,-166,359,-200,316,-230,273,-254,226,-274,177,-291,128,-303,95,-310,79,-313", "327,221,351,197,386,163,416,123,438,79,453,28,457,-23,450,-71,430,-118,401,-160,366,-195,324,-226,281,-250,234,-271,185,-288,137,-301,103,-308,87,-311", "320,225,344,202,381,169,412,130,435,87,451,37,457,-14,452,-63,435,-110,407,-153,372,-189,332,-221,288,-246,242,-268,193,-286,145,-299,112,-307,96,-309", "313,230,338,208,375,175,407,137,432,95,449,46,457,-6,454,-54,438,-103,412,-146,379,-183,339,-216,296,-243,250,-264,202,-283,153,-297,120,-305,104,-308", "306,235,331,213,369,181,402,144,428,102,447,55,456,3,455,-46,442,-95,417,-139,385,-178,346,-210,303,-238,258,-261,210,-280,162,-295,129,-303,113,-306", "299,239,324,217,363,187,397,151,424,109,444,64,456,11,456,-38,445,-87,422,-132,391,-172,353,-205,310,-234,266,-257,218,-277,170,-293,137,-301,121,-304", "291,243,317,222,357,192,391,157,420,117,441,72,454,20,457,-30,447,-78,427,-125,396,-165,360,-200,317,-230,274,-254,227,-274,178,-290,146,-299,129,-302", "284,247,310,227,350,198,386,163,416,124,438,80,453,29,457,-22,450,-70,431,-117,402,-159,367,-194,325,-225,281,-250,235,-271,186,-288,154,-297,138,-300", "276,251,303,231,344,203,380,170,411,131,435,88,451,38,457,-14,452,-62,435,-110,407,-153,373,-189,332,-220,289,-246,243,-268,194,-285,162,-295,146,-298", "269,255,296,235,337,208,374,176,406,138,431,95,449,47,457,-5,454,-54,439,-102,413,-146,379,-183,340,-215,296,-242,251,-264,202,-283,170,-293,154,-295", "261,259,289,240,330,213,368,181,401,145,428,103,446,56,456,4,455,-46,442,-94,418,-139,385,-177,347,-210,304,-238,259,-261,211,-280,179,-290,162,-293", "253,262,281,244,323,218,362,187,396,151,424,110,444,65,456,12,456,-38,445,-86,423,-131,391,-171,354,-205,311,-234,267,-257,219,-277,187,-288,170,-290", "246,266,274,248,316,223,356,193,391,158,420,117,441,73,454,21,457,-29,448,-78,427,-124,397,-165,361,-199,318,-230,275,-253,228,-274,195,-285,178,-288", "238,269,266,251,309,227,350,198,385,164,415,125,438,81,453,30,457,-21,450,-69,431,-116,402,-159,367,-194,326,-225,282,-250,236,-270,203,-283,187,-285", "230,272,259,255,302,232,343,203,379,170,411,132,434,89,451,39,457,-13,452,-61,435,-109,408,-152,374,-188,333,-220,290,-246,244,-267,211,-280,195,-282", "222,275,251,259,295,236,336,209,374,176,406,139,431,96,449,48,457,-4,454,-53,439,-101,413,-145,380,-182,340,-215,297,-242,252,-264,220,-277,203,-279", "214,278,243,262,288,240,329,214,368,182,401,145,427,104,446,57,456,4,455,-45,442,-93,418,-138,386,-176,348,-209,304,-238,260,-260,228,-273,212,-276", "206,281,236,265,280,244,323,218,362,188,396,152,423,111,443,66,455,13,456,-37,445,-85,423,-131,392,-170,355,-204,311,-233,268,-257,236,-270,220,-273", "198,284,228,269,273,248,316,223,355,193,390,158,419,118,440,74,454,22,457,-28,448,-77,428,-123,397,-164,361,-199,319,-229,275,-253,244,-267,228,-270", "190,287,220,272,265,252,309,228,349,199,385,165,415,125,437,82,453,31,457,-20,450,-68,432,-116,403,-158,368,-193,326,-224,283,-249,252,-264,236,-266", "182,289,212,275,258,255,302,232,342,204,379,171,410,132,434,89,451,40,457,-12,452,-60,436,-108,408,-151,374,-187,334,-219,290,-245,260,-260,244,-263", "174,292,204,277,250,259,294,236,336,209,373,177,405,139,430,97,448,49,457,-3,454,-52,439,-100,414,-144,381,-182,341,-214,298,-241,268,-256,252,-260", "166,294,196,280,243,262,287,241,329,214,367,183,400,146,427,104,446,58,456,5,455,-44,443,-92,419,-137,387,-176,348,-209,305,-237,276,-253,259,-256", "158,296,188,283,235,266,280,245,322,219,361,188,395,153,423,112,443,67,455,14,456,-36,446,-84,423,-130,392,-170,355,-203,312,-233,283,-249,267,-252", "150,298,180,285,227,269,272,248,315,224,355,194,390,159,419,119,440,75,454,23,457,-28,448,-76,428,-122,398,-164,362,-198,320,-229,291,-245,274,-248", "141,301,172,288,219,272,265,252,308,228,348,199,384,165,414,126,437,82,452,32,457,-19,451,-68,432,-115,403,-157,369,-192,327,-224,298,-241,282,-245", "133,302,164,290,211,275,257,256,301,233,342,205,378,171,410,133,434,90,450,41,457,-11,453,-59,436,-107,409,-151,375,-187,335,-219,306,-237,289,-241", "125,304,156,292,203,278,249,259,294,237,335,210,372,177,405,140,430,98,448,50,457,-2,454,-51,440,-99,414,-144,381,-181,342,-214,313,-233,296,-237", "117,306,148,294,195,280,242,263,286,241,328,215,366,183,400,147,426,105,445,59,456,6,455,-43,443,-91,419,-136,387,-175,349,-208,320,-228,303,-232", "108,308,140,296,187,283,234,266,279,245,321,219,360,189,394,153,422,112,443,67,455,15,456,-35,446,-83,424,-129,393,-169,356,-203,328,-223,311,-228", "100,309,132,298,179,286,226,269,271,249,314,224,354,194,389,160,418,120,440,75,454,24,457,-27,449,-75,428,-122,399,-163,363,-197,335,-218,318,-223", "92,311,123,300,171,288,218,272,264,253,307,229,347,200,383,166,414,127,437,83,452,33,457,-18,451,-67,433,-114,404,-157,369,-192,342,-213,326,-218", "83,312,115,302,163,290,210,275,256,256,300,233,341,205,378,172,409,134,433,91,450,42,457,-10,453,-58,436,-106,409,-150,376,-186,350,-208,333,-213", "75,313,107,304,155,293,203,278,249,260,293,237,334,210,372,178,404,141,430,99,448,51,457,-1,454,-50,440,-98,415,-143,382,-180,356,-203,340,-208", "67,315,99,305,147,295,195,281,241,263,285,241,327,215,366,184,399,147,426,106,445,60,456,7,455,-42,443,-90,420,-136,388,-174,363,-197,347,-203", "58,316,90,307,139,297,187,283,233,266,278,245,321,220,360,189,394,154,422,113,442,68,455,16,456,-34,446,-82,424,-128,394,-168,370,-191,353,-197", "50,317,82,308,131,299,179,286,225,270,271,249,314,225,353,195,388,160,418,120,439,76,454,25,457,-26,449,-74,429,-121,399,-162,376,-186,360,-192", "41,318,74,309,122,300,171,288,217,273,263,253,307,229,347,200,383,167,413,128,436,84,452,34,457,-18,451,-66,433,-113,405,-156,382,-180,366,-187", "33,319,65,310,114,302,162,291,210,275,256,257,299,233,340,206,377,173,409,135,433,92,450,43,457,-9,453,-57,437,-105,410,-149,388,-174,372,-181", "25,319,57,312,106,304,154,293,202,278,248,260,292,238,333,211,371,179,404,141,429,99,448,52,457,-1,454,-49,440,-98,415,-142,394,-168,378,-175", "16,320,49,313,98,305,146,295,194,281,240,263,285,242,327,216,365,184,399,148,426,107,445,61,456,8,456,-41,444,-90,420,-135,400,-162,384,-170", "8,321,40,313,89,307,138,297,186,284,232,267,277,246,320,220,359,190,393,155,422,114,442,69,455,17,456,-33,446,-82,425,-127,405,-156,389,-164", "-1,321,32,314,81,308,130,299,178,286,225,270,270,250,313,225,353,196,388,161,417,121,439,77,454,26,457,-25,449,-73,429,-120,410,-149,395,-157", "-9,321,24,315,73,309,122,301,170,288,217,273,262,253,306,229,346,201,382,167,413,128,436,85,452,35,457,-17,451,-65,433,-112,416,-142,400,-151", "-18,322,15,316,64,311,113,302,162,291,209,276,255,257,299,234,339,206,376,173,408,135,433,93,450,44,457,-8,453,-57,437,-105,421,-134,406,-144", "-26,322,7,316,56,312,105,304,153,293,201,279,247,260,291,238,333,211,371,179,403,142,429,100,447,53,457,0,455,-49,441,-97,425,-127,411,-137", "-35,322,-2,317,48,313,97,305,145,295,193,281,239,264,284,242,326,216,365,185,398,149,425,107,445,62,456,9,456,-41,444,-89,430,-119,416,-130", "-43,322,-10,317,39,314,89,307,137,297,185,284,232,267,276,246,319,221,358,191,393,155,421,115,442,70,455,18,457,-32,447,-81,434,-112,420,-123", "-51,322,-19,317,31,314,80,308,129,299,177,286,224,270,269,250,312,225,352,196,387,162,417,122,439,78,453,27,457,-24,449,-72,437,-104,424,-116", "-60,322,-27,318,23,315,72,310,121,301,169,289,216,273,262,254,305,230,345,201,382,168,412,129,436,86,452,36,457,-16,451,-64,441,-96,428,-109", "-69,321,-35,318,15,316,64,311,113,302,161,291,208,276,254,257,298,234,339,207,376,174,408,136,432,93,449,45,457,-7,453,-56,444,-88,432,-101", "-77,321,-43,318,6,316,55,312,104,304,153,293,200,279,246,261,291,239,332,212,370,180,403,143,429,101,447,54,457,1,455,-48,447,-80,436,-94", "-86,321,-52,318,-3,317,47,313,96,306,144,295,192,282,239,264,283,243,325,217,364,186,398,149,425,108,444,63,456,10,456,-40,449,-72,439,-86", "-94,320,-60,317,-11,317,39,314,88,307,136,297,184,284,231,267,276,247,318,221,358,191,392,156,421,115,442,71,455,19,457,-32,452,-63,442,-78", "-102,319,-69,317,-19,317,30,314,79,308,128,299,176,287,223,270,268,250,311,226,351,197,387,162,416,123,439,79,453,28,457,-23,453,-55,444,-70", "-110,318,-78,317,-28,318,22,315,71,310,120,301,168,289,215,273,261,254,304,230,345,202,381,169,412,130,435,86,451,37,457,-15,455,-47,446,-62", "-119,317,-86,316,-36,318,14,316,63,311,112,303,160,291,207,276,253,258,297,235,338,207,375,175,407,137,432,94,449,46,457,-6,456,-39,448,-55", "-127,316,-94,316,-44,318,5,316,54,312,103,304,152,293,199,279,245,261,290,239,331,212,369,180,402,143,428,102,447,55,457,2,457,-31,449,-47", "-135,314,-102,315,-53,318,-3,317,46,313,95,306,144,295,191,282,238,264,282,243,325,217,363,186,397,150,424,109,444,63,456,11,457,-23,451,-39", "-144,313,-110,314,-61,317,-12,317,38,314,87,307,135,297,183,284,230,268,275,247,318,222,357,192,392,157,420,116,441,72,455,20,457,-14,451,-31", "-152,311,-119,313,-70,317,-20,317,29,315,79,309,127,299,175,287,222,271,267,251,311,226,351,197,386,163,416,123,438,79,453,29,457,-6,452,-22", "-160,308,-127,312,-78,317,-29,318,21,315,70,310,119,301,167,289,214,274,260,254,304,231,344,203,380,169,411,130,435,87,451,37,456,3,452,-14", "-169,306,-135,310,-87,316,-37,318,13,316,62,311,111,303,159,291,206,277,252,258,296,235,337,208,375,175,407,137,431,95,449,47,456,11,452,-5", "-177,303,-143,308,-95,315,-45,318,4,316,53,312,103,304,151,294,198,279,245,261,289,239,331,213,369,181,402,144,428,102,446,56,454,20,452,3", "-185,301,-152,306,-103,315,-54,318,-4,317,45,313,94,306,143,296,190,282,237,265,282,243,324,218,363,187,396,151,424,110,444,64,453,29,451,12", "-193,297,-160,304,-111,314,-62,317,-13,317,37,314,86,307,135,298,182,285,229,268,274,247,317,222,356,192,391,157,420,117,441,72,451,38,450,21", "-201,294,-168,302,-119,313,-71,317,-21,317,28,315,78,309,126,300,174,287,221,271,267,251,310,227,350,198,386,164,415,124,438,80,449,47,448,30", "-209,291,-176,299,-128,311,-79,317,-30,318,20,315,69,310,118,301,166,289,213,274,259,255,303,231,343,203,380,170,411,131,435,88,446,56,447,40", "-217,287,-184,296,-136,310,-88,316,-38,318,12,316,61,311,110,303,158,292,206,277,252,258,296,236,337,208,374,176,406,138,431,96,444,65,445,48", "-224,284,-192,293,-144,308,-96,315,-46,318,3,316,53,312,102,305,150,294,198,280,244,262,288,240,330,213,368,182,401,145,427,103,441,73,442,56", "-232,280,-200,290,-153,306,-104,315,-55,318,-5,317,44,313,93,306,142,296,190,282,236,265,281,244,323,218,362,187,396,151,423,111,438,81,440,64", "-239,275,-208,287,-161,304,-112,314,-63,317,-14,317,36,314,85,307,134,298,182,285,228,268,273,248,316,223,356,193,391,158,419,118,434,89,437,72", "-247,271,-215,283,-169,301,-120,313,-72,317,-22,317,28,315,77,309,126,300,174,287,220,271,266,252,309,227,349,198,385,164,415,125,431,96,435,80", "-254,267,-223,279,-177,299,-129,311,-80,316,-30,318,19,315,68,310,117,301,166,290,213,274,258,255,302,232,343,204,379,170,410,132,427,104,432,88", "-261,262,-230,275,-185,296,-137,310,-88,316,-39,318,11,316,60,311,109,303,157,292,205,277,251,259,295,236,336,209,373,176,406,139,423,111,428,95", "-268,257,-238,271,-193,293,-145,308,-97,315,-47,318,2,317,52,312,101,305,149,294,197,280,243,262,287,240,329,214,367,182,401,146,419,118,425,103", "-275,252,-245,267,-201,290,-154,306,-105,315,-55,318,-6,317,43,313,93,306,141,296,189,283,235,265,280,244,322,219,361,188,395,152,415,125,421,110", "-282,247,-252,263,-208,286,-162,304,-113,314,-64,317,-15,317,35,314,84,308,133,298,181,285,228,269,273,248,315,223,355,193,390,159,410,132,417,117", "-289,241,-259,258,-216,283,-170,301,-121,313,-73,317,-23,318,27,315,76,309,125,300,173,288,220,272,265,252,308,228,349,199,384,165,405,139,413,125", "-295,236,-266,253,-224,279,-178,298,-129,311,-81,316,-31,318,19,315,68,310,116,302,165,290,212,275,258,256,301,232,342,204,379,171,400,146,408,132", "-302,230,-273,248,-231,275,-186,296,-138,310,-89,316,-40,318,10,316,59,311,108,303,157,292,204,278,250,259,294,237,335,209,373,177,395,153,404,139", "-308,224,-280,243,-238,271,-194,293,-146,308,-98,315,-48,318,2,317,51,312,100,305,148,294,196,280,242,263,287,241,329,214,367,183,390,159,399,146", "-314,218,-286,238,-246,267,-201,289,-154,306,-106,314,-56,317,-7,317,43,313,92,306,140,296,188,283,235,266,279,245,322,219,361,189,384,165,394,152", "-319,211,-293,232,-253,262,-209,286,-162,303,-114,314,-65,317,-15,317,34,314,84,308,132,298,180,285,227,269,272,249,315,224,354,194,378,171,389,159", "-325,205,-299,226,-260,258,-217,282,-170,301,-122,312,-73,317,-24,318,26,315,75,309,124,300,172,288,219,272,264,252,308,228,348,199,372,177,383,165", "-330,198,-305,221,-267,253,-224,279,-178,298,-130,311,-82,316,-32,318,18,316,67,310,116,302,164,290,211,275,257,256,301,233,341,205,366,183,378,171", "-335,191,-311,214,-274,248,-232,275,-186,295,-139,309,-90,316,-40,318,9,316,58,311,107,304,156,292,203,278,249,259,293,237,335,210,360,189,372,177", "-340,184,-317,208,-281,243,-239,271,-194,292,-147,307,-98,315,-49,318,1,317,50,312,99,305,148,295,195,281,241,263,286,241,328,215,354,194,366,183", "-344,176,-322,202,-287,237,-247,266,-202,289,-155,305,-106,314,-57,317,-8,317,42,313,91,307,139,297,187,283,234,266,278,245,321,220,347,200,360,189", "-348,168,-327,195,-293,232,-254,262,-210,286,-163,303,-115,313,-66,317,-16,317,33,314,83,308,131,298,179,286,226,269,271,249,314,224,341,205,354,195", "-351,160,-332,188,-300,226,-261,257,-218,282,-171,301,-123,312,-74,317,-25,318,25,315,74,309,123,300,171,288,218,272,264,253,307,229,334,210,347,201", "-355,152,-336,181,-306,220,-268,252,-225,278,-179,298,-131,311,-83,316,-33,318,17,316,66,310,115,302,163,290,210,275,256,256,300,233,327,215,341,206", "-357,144,-340,173,-311,214,-274,247,-233,274,-187,295,-139,309,-91,316,-41,318,8,316,57,312,107,304,155,293,202,278,248,260,293,237,321,220,334,211", "-359,136,-344,166,-317,207,-281,242,-240,270,-195,292,-148,307,-99,315,-49,318,0,317,49,313,98,305,147,295,194,281,241,263,285,242,314,225,328,216", "-361,127,-348,158,-322,201,-288,237,-247,266,-203,289,-156,305,-107,314,-58,317,-9,317,41,313,90,307,139,297,186,283,233,266,278,246,306,229,321,221", "-362,118,-351,150,-327,194,-294,231,-255,261,-211,285,-164,303,-115,313,-67,317,-17,317,32,314,82,308,130,299,178,286,225,270,270,249,299,233,314,226", "-362,110,-353,142,-332,187,-300,225,-262,257,-218,282,-172,300,-124,312,-75,317,-26,318,24,315,73,309,122,300,170,288,217,273,263,253,292,238,307,231", "-362,101,-355,134,-337,180,-306,219,-268,252,-226,278,-180,298,-132,311,-84,316,-34,318,16,316,65,311,114,302,162,291,209,276,255,257,285,242,300,235", "-361,92,-357,126,-341,173,-312,213,-275,247,-233,274,-188,295,-140,309,-92,316,-42,318,7,316,57,312,106,304,154,293,201,278,248,260,277,246,292,240", "-360,84,-358,117,-345,165,-318,207,-282,241,-241,270,-196,292,-149,307,-100,315,-50,318,-1,317,48,313,97,305,146,295,193,281,240,264,270,250,285,244", "-358,75,-358,109,-348,157,-323,200,-288,236,-248,265,-204,288,-157,305,-108,314,-59,317,-10,317,40,314,89,307,138,297,185,284,232,267,262,253,278,248", "-356,67,-358,101,-351,150,-328,193,-295,230,-255,261,-212,285,-165,303,-116,313,-68,317,-18,317,32,314,81,308,129,299,177,286,224,270,255,257,270,252", "-353,59,-357,92,-353,141,-333,187,-301,225,-262,256,-219,281,-173,300,-125,312,-76,317,-26,318,23,315,73,309,121,301,169,289,216,273,247,260,263,256", "-350,51,-356,84,-355,133,-337,179,-307,219,-269,251,-227,277,-181,297,-133,311,-85,316,-35,318,15,316,64,311,113,302,161,291,208,276,239,264,255,260", "-346,43,-354,75,-357,125,-341,172,-313,213,-276,246,-234,273,-189,294,-141,309,-93,316,-43,318,6,316,56,312,105,304,153,293,201,279,232,267,248,264", "-342,35,-351,67,-358,116,-345,164,-318,206,-283,241,-242,269,-197,291,-150,307,-101,315,-51,318,-2,317,47,313,97,306,145,295,193,281,224,270,240,267", "-337,27,-349,60,-358,108,-348,157,-324,199,-289,235,-249,265,-205,288,-158,305,-109,314,-60,317,-11,317,39,314,88,307,137,297,185,284,216,273,232,271", "-331,19,-345,52,-358,100,-351,149,-328,193,-295,230,-256,260,-212,284,-166,302,-117,313,-69,317,-19,317,31,314,80,308,129,299,177,286,208,276,224,274", "-325,12,-342,45,-357,91,-354,141,-333,186,-302,224,-263,256,-220,281,-174,300,-125,312,-77,317,-27,318,22,315,72,310,120,301,169,289,200,279,217,277", "-319,5,-337,37,-356,83,-355,132,-338,179,-307,218,-270,251,-227,277,-182,297,-134,310,-85,316,-36,318,14,316,63,311,112,303,160,291,192,282,209,280", "-313,-2,-333,29,-354,75,-357,124,-342,171,-313,212,-277,246,-235,273,-190,294,-142,309,-94,316,-44,318,6,316,55,312,104,304,152,293,184,284,201,283", "-307,-8,-327,21,-351,67,-358,116,-345,163,-319,205,-283,240,-242,269,-198,291,-150,307,-102,315,-52,318,-3,317,47,313,96,306,144,295,176,287,193,286", "-300,-13,-321,14,-348,59,-358,107,-349,156,-324,199,-290,235,-250,264,-205,288,-159,304,-110,314,-61,317,-11,317,38,314,87,307,136,297,168,289,185,289", "-293,-18,-316,7,-345,51,-358,99,-351,148,-329,192,-296,229,-257,260,-213,284,-167,302,-118,313,-69,317,-20,317,30,315,79,308,128,299,160,291,177,291", "-286,-23,-310,1,-341,44,-357,91,-354,140,-334,185,-302,223,-264,255,-221,280,-175,299,-126,312,-78,317,-28,318,22,315,71,310,120,301,152,293,169,294", "-278,-27,-303,-5,-337,36,-355,82,-356,131,-338,178,-308,218,-271,250,-228,277,-183,297,-135,310,-86,316,-36,318,13,316,62,311,111,303,144,296,161,296", "-271,-31,-297,-10,-332,28,-353,74,-357,123,-342,170,-314,211,-277,245,-236,273,-191,294,-143,308,-94,315,-45,318,5,316,54,312,103,304,135,297,152,299", "-263,-34,-290,-15,-327,20,-351,66,-358,115,-346,163,-319,205,-284,240,-243,268,-198,291,-151,306,-103,315,-53,318,-4,317,46,313,95,306,127,299,144,301", "-255,-37,-283,-19,-321,13,-348,58,-358,106,-349,155,-325,198,-290,234,-250,264,-206,287,-159,304,-111,314,-62,317,-12,317,37,314,87,307,119,301,136,303", "-246,-40,-276,-23,-315,7,-345,51,-358,98,-352,147,-329,191,-297,229,-257,259,-214,284,-167,302,-119,313,-70,317,-21,317,29,315,78,309,111,303,128,305", "-238,-42,-268,-27,-309,0,-341,43,-357,90,-354,139,-334,184,-303,223,-264,255,-222,280,-175,299,-127,312,-79,317,-29,318,21,315,70,310,103,304,120,307", "-229,-43,-261,-30,-303,-5,-336,35,-355,81,-356,131,-339,177,-309,217,-271,250,-229,276,-183,296,-135,310,-87,316,-37,318,12,316,62,311,94,306,111,309", "-220,-45,-253,-33,-296,-11,-331,27,-353,73,-357,122,-343,169,-314,211,-278,245,-236,272,-191,293,-144,308,-95,315,-46,318,4,316,53,312,86,307,103,311", "-211,-46,-245,-36,-289,-16,-326,20,-351,65,-358,114,-346,162,-320,204,-285,239,-244,268,-199,290,-152,306,-103,315,-54,318,-5,317,45,313,78,309,95,312", "-202,-46,-236,-38,-282,-20,-320,13,-348,57,-358,105,-349,154,-325,197,-291,234,-251,263,-207,287,-160,304,-112,314,-63,317,-13,317,36,314,69,310,86,314", "-193,-46,-228,-39,-275,-24,-314,6,-344,50,-358,97,-352,146,-330,191,-297,228,-258,259,-215,283,-168,302,-120,313,-71,317,-22,317,28,315,61,311,78,315", "-185,-46,-219,-40,-268,-27,-308,0,-340,42,-357,89,-354,138,-335,184,-303,222,-265,254,-222,280,-176,299,-128,311,-80,317,-30,318,20,315,53,312,70,317", "-177,-46,-210,-41,-260,-31,-302,-6,-336,34,-355,80,-356,130,-339,176,-309,216,-272,249,-230,276,-184,296,-136,310,-88,316,-38,318,11,316,44,313,61,318", "-168,-45,-201,-42,-252,-33,-295,-11,-331,26,-353,72,-357,121,-343,169,-315,210,-279,244,-237,272,-192,293,-145,308,-96,315,-46,318,3,316,36,314,53,319", "-160,-45,-192,-42,-244,-36,-288,-16,-325,19,-350,64,-358,113,-346,161,-320,203,-285,239,-245,267,-200,290,-153,306,-104,315,-55,318,-6,317,28,315,44,320", "-151,-44,-184,-42,-235,-38,-281,-20,-320,12,-347,57,-358,105,-350,153,-326,197,-292,233,-252,263,-208,287,-161,304,-112,314,-64,317,-14,317,19,315,36,321", "-143,-42,-176,-42,-227,-39,-274,-24,-314,5,-344,49,-357,96,-352,145,-330,190,-298,227,-259,258,-216,283,-169,301,-121,313,-72,317,-22,317,11,316,28,322", "-134,-41,-168,-41,-218,-40,-267,-28,-308,-1,-340,41,-356,88,-354,137,-335,183,-304,222,-266,254,-223,279,-177,299,-129,311,-80,316,-31,318,2,317,19,323", "-125,-39,-160,-40,-209,-41,-259,-31,-301,-7,-336,34,-355,79,-356,129,-339,175,-310,216,-273,249,-231,275,-185,296,-137,310,-89,316,-39,318,-6,317,10,323", "-116,-38,-151,-39,-200,-42,-251,-34,-295,-12,-330,26,-353,71,-357,120,-343,168,-316,209,-279,243,-238,271,-193,293,-146,308,-97,315,-47,318,-15,317,2,324", "-107,-36,-143,-38,-192,-42,-243,-36,-288,-16,-325,18,-350,64,-358,112,-347,160,-321,203,-286,238,-245,267,-201,290,-154,306,-105,315,-56,317,-23,318,-7,324", "-98,-34,-134,-37,-183,-42,-235,-38,-281,-21,-319,11,-347,56,-358,104,-350,152,-326,196,-292,233,-253,262,-209,286,-162,303,-113,314,-64,317,-31,318,-15,324", "-90,-32,-125,-35,-175,-42,-226,-39,-273,-25,-313,5,-344,48,-357,95,-352,144,-331,189,-299,227,-260,258,-216,283,-170,301,-121,313,-73,317,-40,318,-23,325", "-82,-30,-117,-33,-167,-41,-217,-41,-266,-28,-307,-2,-340,41,-356,87,-355,136,-336,182,-305,221,-267,253,-224,279,-178,298,-130,311,-81,316,-48,318,-32,325", "-74,-27,-108,-31,-159,-40,-209,-41,-258,-31,-300,-7,-335,33,-355,79,-356,128,-340,175,-310,215,-273,248,-231,275,-186,295,-138,309,-90,316,-56,317,-40,325", "-66,-25,-99,-29,-150,-39,-200,-42,-250,-34,-294,-12,-330,25,-352,70,-357,120,-344,167,-316,208,-280,243,-239,271,-194,292,-146,308,-98,315,-65,317,-49,325", "-58,-22,-91,-27,-142,-38,-191,-42,-242,-36,-287,-17,-324,17,-350,63,-358,111,-347,159,-322,202,-287,238,-246,266,-202,289,-155,305,-106,314,-74,317,-58,324", "-50,-20,-83,-25,-133,-37,-183,-42,-234,-38,-280,-21,-318,10,-347,55,-358,103,-350,152,-327,195,-293,232,-253,262,-209,286,-163,303,-114,314,-82,316,-66,324", "-42,-17,-75,-23,-124,-35,-175,-41,-225,-40,-273,-25,-312,4,-343,47,-357,95,-353,144,-331,188,-299,226,-260,257,-217,282,-171,301,-122,312,-90,316,-74,324", "-33,-15,-67,-21,-116,-33,-166,-41,-216,-41,-265,-28,-306,-2,-339,40,-356,86,-355,135,-336,181,-305,220,-267,253,-225,278,-179,298,-131,311,-98,315,-83,323", "-25,-12,-59,-18,-107,-31,-158,-40,-208,-41,-257,-32,-300,-8,-335,32,-354,78,-356,127,-340,174,-311,214,-274,248,-232,274,-187,295,-139,309,-107,314,-91,322", "-17,-9,-51,-16,-98,-29,-149,-39,-199,-42,-249,-34,-293,-13,-329,24,-352,70,-357,119,-344,166,-317,208,-281,242,-240,270,-195,292,-147,307,-115,313,-99,322", "-8,-6,-42,-13,-90,-27,-141,-38,-190,-42,-241,-36,-286,-17,-324,17,-350,62,-358,110,-347,159,-322,201,-287,237,-247,266,-203,289,-156,305,-123,312,-108,321", "0,-3,-34,-10,-82,-25,-132,-36,-182,-42,-233,-38,-279,-22,-318,10,-346,54,-358,102,-350,151,-327,195,-294,231,-254,262,-210,285,-164,303,-131,311,-116,320", "8,0,-26,-7,-74,-23,-124,-35,-174,-41,-224,-40,-272,-25,-312,3,-343,47,-357,94,-353,143,-332,188,-300,226,-261,257,-218,282,-172,300,-140,309,-125,318", "16,3,-17,-4,-66,-20,-115,-33,-165,-41,-216,-41,-264,-29,-306,-3,-339,39,-356,85,-355,135,-336,181,-306,220,-268,252,-225,278,-180,298,-148,307,-133,317", "24,6,-9,-2,-58,-18,-106,-31,-157,-40,-207,-42,-257,-32,-299,-8,-334,31,-354,77,-357,126,-341,173,-312,214,-275,247,-233,274,-188,295,-156,305,-142,315", "32,9,-1,2,-50,-15,-97,-29,-149,-39,-198,-42,-248,-34,-292,-13,-329,23,-352,69,-358,118,-344,166,-317,207,-281,242,-240,270,-196,292,-164,303,-150,313", "40,12,7,4,-41,-13,-89,-27,-140,-38,-189,-42,-240,-37,-286,-18,-323,16,-349,61,-358,109,-348,158,-323,201,-288,236,-248,266,-203,288,-172,300,-158,310", "48,15,15,7,-33,-10,-81,-25,-131,-36,-181,-42,-232,-38,-278,-22,-317,9,-346,53,-358,101,-351,150,-328,194,-294,231,-255,261,-211,285,-180,298,-166,308", "56,19,23,10,-25,-7,-73,-22,-123,-35,-173,-41,-223,-40,-271,-26,-311,3,-342,46,-357,93,-353,142,-332,187,-301,225,-262,256,-219,281,-188,295,-175,305", "64,22,31,14,-17,-4,-65,-20,-114,-33,-165,-41,-215,-41,-264,-29,-305,-3,-338,38,-356,84,-355,134,-337,180,-306,219,-269,252,-226,278,-196,292,-183,302", "72,25,39,17,-8,-1,-57,-18,-105,-31,-156,-40,-206,-42,-256,-32,-298,-9,-333,30,-354,76,-357,125,-341,172,-312,213,-275,247,-234,274,-204,288,-191,299", "80,28,47,20,0,2,-49,-15,-96,-29,-148,-39,-197,-42,-248,-35,-292,-14,-328,22,-352,68,-358,117,-345,165,-318,206,-282,241,-241,269,-212,285,-199,296", "88,31,55,23,8,5,-41,-12,-88,-27,-139,-38,-188,-42,-239,-37,-285,-18,-322,15,-349,60,-358,109,-348,157,-323,200,-289,236,-248,265,-219,281,-206,292", "96,35,63,26,16,8,-32,-10,-80,-24,-130,-36,-180,-42,-231,-39,-278,-22,-317,8,-346,53,-358,100,-351,149,-328,193,-295,230,-256,261,-227,277,-214,288", "104,38,71,29,24,11,-24,-7,-72,-22,-122,-34,-172,-41,-222,-40,-270,-26,-311,2,-342,45,-357,92,-353,141,-333,186,-301,224,-263,256,-234,273,-222,285", "112,41,79,32,32,14,-16,-4,-64,-20,-113,-33,-164,-41,-214,-41,-263,-29,-304,-4,-338,37,-356,84,-355,133,-337,179,-307,219,-269,251,-242,269,-229,280", "120,44,87,36,40,17,-7,-1,-56,-17,-104,-30,-155,-40,-205,-42,-255,-32,-298,-9,-333,29,-354,75,-357,125,-341,172,-313,212,-276,246,-249,265,-237,276", "128,48,95,39,48,20,1,2,-48,-15,-96,-28,-147,-39,-196,-42,-247,-35,-291,-14,-327,22,-351,67,-358,116,-345,164,-318,206,-283,241,-256,260,-244,272", "136,51,103,42,56,23,9,5,-40,-12,-88,-26,-138,-37,-187,-42,-239,-37,-284,-19,-322,14,-349,60,-358,108,-348,156,-324,199,-289,235,-263,256,-251,267", "140,53,107,44,60,25,13,7,-36,-11,-84,-25,-134,-37,-183,-42,-234,-38,-281,-21,-319,11,-347,56,-358,104,-350,152,-326,196,-293,232,-266,253,-255,265", "148,56,115,47,68,28,21,10,-27,-8,-76,-23,-125,-35,-175,-42,-226,-39,-273,-25,-313,4,-344,48,-357,95,-353,144,-331,189,-299,227,-273,248,-262,260", "165,62,131,54,84,34,37,16,-11,-2,-59,-18,-108,-31,-159,-40,-208,-41,-258,-31,-300,-7,-335,33,-355,78,-356,128,-340,174,-311,215,-287,238,-276,250", "173,65,139,57,92,38,45,19,-2,1,-51,-16,-99,-29,-150,-39,-199,-42,-250,-34,-294,-12,-330,25,-352,70,-357,119,-344,167,-316,208,-293,232,-282,244", "176,67,143,58,96,39,49,20,2,2,-47,-14,-95,-28,-146,-39,-195,-42,-246,-35,-290,-15,-327,21,-351,66,-358,115,-346,163,-319,205,-296,229,-285,242", "184,70,152,62,104,43,57,24,10,5,-39,-12,-87,-26,-137,-37,-187,-42,-238,-37,-283,-19,-321,14,-348,59,-358,107,-349,155,-324,198,-302,223,-292,236", "192,73,160,65,112,46,65,27,18,8,-31,-9,-79,-24,-129,-36,-178,-42,-229,-39,-276,-23,-315,7,-345,51,-358,99,-352,148,-329,192,-308,217,-298,230", "200,76,168,68,120,49,73,30,26,11,-22,-6,-71,-22,-120,-34,-170,-41,-221,-40,-269,-27,-309,1,-341,43,-357,90,-354,139,-334,185,-314,211,-304,224", "208,79,176,71,128,52,81,33,34,14,-14,-3,-63,-19,-111,-32,-162,-40,-212,-41,-261,-30,-303,-5,-337,36,-355,82,-356,131,-338,177,-319,205,-310,218", "216,82,183,74,136,56,89,36,42,18,-6,0,-54,-17,-102,-30,-154,-40,-203,-42,-253,-33,-296,-10,-332,28,-353,73,-357,123,-342,170,-325,198,-316,212", "224,85,191,77,144,59,97,40,50,21,3,3,-46,-14,-94,-28,-145,-38,-194,-42,-245,-35,-290,-15,-326,20,-351,66,-358,114,-346,162,-330,191,-321,205", "233,88,199,80,152,62,105,43,58,24,11,6,-38,-12,-86,-26,-136,-37,-186,-42,-237,-37,-283,-20,-321,13,-348,58,-358,106,-349,155,-334,184,-326,198", "241,91,207,83,160,65,113,46,66,27,19,9,-30,-9,-78,-24,-128,-36,-178,-42,-228,-39,-275,-24,-315,6,-345,50,-358,98,-352,147,-339,177,-331,191", "249,93,215,86,168,68,121,49,74,30,27,12,-21,-6,-70,-21,-119,-34,-169,-41,-220,-40,-268,-27,-309,0,-341,43,-357,89,-354,139,-343,169,-335,184", "258,96,224,89,176,71,129,53,82,33,34,15,-13,-3,-62,-19,-110,-32,-161,-40,-211,-41,-260,-30,-302,-6,-336,35,-355,81,-356,130,-346,162,-340,177", "266,99,232,92,184,74,137,56,90,37,42,18,-5,0,-54,-17,-101,-30,-153,-39,-202,-42,-252,-33,-296,-11,-331,27,-353,72,-357,122,-349,154,-343,169", "274,101,240,95,192,78,145,59,98,40,50,21,4,3,-45,-14,-93,-28,-144,-38,-193,-42,-244,-36,-289,-16,-326,19,-351,65,-358,113,-352,146,-347,162", "282,104,249,98,200,81,153,62,106,43,58,24,11,6,-37,-11,-85,-26,-136,-37,-185,-42,-236,-38,-282,-20,-320,12,-348,57,-358,105,-354,138,-350,154", "290,106,257,100,208,83,161,65,114,46,66,27,19,9,-29,-8,-77,-24,-127,-35,-177,-42,-227,-39,-275,-24,-314,6,-344,49,-357,97,-356,130,-352,146", "298,108,265,103,216,86,169,69,122,50,74,31,27,12,-21,-6,-69,-21,-118,-34,-169,-41,-219,-40,-267,-28,-308,-1,-340,42,-356,88,-357,121,-354,137", "306,110,273,106,224,89,177,72,130,53,82,34,35,15,-12,-3,-61,-19,-109,-32,-160,-40,-210,-41,-259,-31,-302,-6,-336,34,-355,80,-358,113,-356,129", "314,112,282,108,233,92,185,75,138,56,90,37,43,18,-4,0,-53,-16,-100,-30,-152,-39,-201,-42,-252,-33,-295,-11,-331,26,-353,72,-358,105,-357,121", "323,114,290,110,241,95,193,78,146,59,99,40,51,21,4,3,-45,-14,-92,-28,-143,-38,-192,-42,-243,-36,-288,-16,-325,19,-350,64,-357,96,-357,113", "332,116,298,112,250,98,201,81,154,63,107,44,59,25,12,6,-36,-11,-84,-25,-135,-37,-184,-42,-235,-38,-281,-20,-319,12,-347,56,-356,88,-357,104", "340,117,306,114,258,101,209,84,162,66,115,47,67,28,20,9,-28,-8,-76,-23,-126,-35,-176,-42,-227,-39,-274,-24,-313,5,-344,49,-355,79,-356,96", "349,119,314,116,266,103,217,87,170,69,123,50,75,31,28,12,-20,-5,-68,-21,-117,-33,-168,-41,-218,-41,-266,-28,-307,-1,-340,41,-353,71,-355,87", "358,120,322,118,274,106,225,90,178,72,131,53,83,34,36,15,-11,-2,-60,-19,-108,-31,-159,-40,-209,-41,-259,-31,-301,-7,-335,33,-350,63,-353,80", "366,121,331,120,282,108,234,93,186,75,139,57,91,37,44,19,-3,1,-52,-16,-99,-29,-151,-39,-200,-42,-251,-34,-294,-12,-330,25,-347,56,-351,72", "374,122,340,122,291,110,242,96,194,78,147,60,99,41,52,22,5,4,-44,-13,-91,-27,-142,-38,-191,-42,-243,-36,-287,-17,-325,18,-344,48,-348,64", "382,122,349,123,299,113,250,98,202,81,155,63,107,44,60,25,13,7,-35,-11,-83,-25,-134,-37,-183,-42,-234,-38,-280,-21,-319,11,-340,40,-345,56", "390,122,358,124,306,115,259,101,210,84,163,66,115,47,68,28,21,10,-27,-8,-75,-23,-125,-35,-175,-42,-226,-39,-273,-25,-313,4,-335,33,-341,48", "398,122,366,125,314,116,267,104,218,87,171,69,123,50,76,31,29,13,-19,-5,-67,-21,-116,-33,-167,-41,-217,-41,-266,-28,-307,-2,-330,25,-336,40", "407,122,375,126,323,118,275,106,226,90,179,72,132,54,84,34,37,16,-11,-2,-59,-18,-107,-31,-158,-40,-208,-41,-258,-31,-300,-7,-324,17,-331,32", "415,121,383,126,332,120,283,108,235,93,187,75,140,57,92,38,45,19,-2,1,-51,-16,-99,-29,-150,-39,-199,-42,-250,-34,-294,-12,-318,10,-326,25", "424,120,391,127,341,122,291,111,243,96,195,78,148,60,100,41,53,22,6,4,-43,-13,-91,-27,-141,-38,-190,-42,-242,-36,-287,-17,-312,4,-321,18", "432,118,399,127,350,123,299,113,251,99,203,81,156,63,108,44,61,25,14,7,-35,-10,-83,-25,-133,-36,-182,-42,-233,-38,-280,-21,-306,-2,-315,12", "441,117,408,126,359,124,307,115,260,101,210,84,164,66,116,47,69,28,22,10,-26,-8,-75,-23,-124,-35,-174,-41,-225,-40,-272,-25,-300,-8,-310,6", "449,114,417,125,367,125,315,117,268,104,219,87,172,70,124,51,77,32,30,13,-18,-5,-67,-20,-115,-33,-166,-41,-216,-41,-265,-29,-293,-13,-304,0", "456,111,425,124,375,126,324,119,276,106,227,90,180,73,132,54,85,35,38,16,-10,-2,-58,-18,-106,-31,-158,-40,-207,-41,-257,-32,-286,-17,-297,-5", "464,108,434,123,384,126,333,120,284,109,235,93,188,76,140,57,93,38,46,19,-1,1,-50,-15,-98,-29,-149,-39,-198,-42,-249,-34,-279,-22,-291,-9", "471,104,442,121,392,127,342,122,292,111,244,96,196,79,148,60,101,41,54,22,7,4,-42,-13,-90,-27,-141,-38,-190,-42,-241,-36,-272,-25,-284,-14", "478,100,451,118,400,126,351,123,300,113,252,99,203,82,157,64,109,45,62,26,15,7,-34,-10,-82,-25,-132,-36,-181,-42,-232,-38,-264,-29,-277,-18", "484,96,459,115,408,126,359,124,308,115,260,102,211,85,165,67,117,48,70,29,23,10,-25,-7,-74,-23,-123,-35,-173,-41,-224,-40,-256,-32,-270,-21", "490,91,466,112,417,125,368,125,316,117,269,104,220,88,173,70,125,51,78,32,31,13,-17,-4,-66,-20,-114,-33,-165,-41,-215,-41,-248,-34,-262,-24", "496,86,474,108,426,124,376,126,325,119,277,107,228,91,180,73,133,54,86,35,39,16,-9,-1,-58,-18,-106,-31,-157,-40,-206,-42,-240,-37,-255,-27", "502,80,481,104,435,122,385,126,334,121,285,109,236,94,188,76,141,58,94,38,47,20,0,2,-49,-15,-97,-29,-148,-39,-197,-42,-232,-38,-247,-30", "508,74,487,99,443,120,393,127,343,122,293,111,245,96,196,79,149,61,102,42,55,23,8,5,-41,-13,-89,-27,-140,-38,-189,-42,-223,-40,-239,-32", "513,67,494,94,451,118,401,126,352,123,301,113,253,99,204,82,157,64,110,45,63,26,16,8,-33,-10,-81,-25,-131,-36,-181,-42,-215,-41,-230,-33", "518,60,500,89,459,115,409,126,360,125,309,115,261,102,212,85,165,67,118,48,71,29,24,11,-25,-7,-73,-22,-122,-34,-172,-41,-206,-42,-222,-34", "523,52,506,83,467,111,418,125,369,125,317,117,270,104,220,88,173,70,126,51,79,32,31,14,-16,-4,-65,-20,-113,-33,-164,-41,-197,-42,-213,-35", "527,44,511,76,474,108,427,124,377,126,326,119,278,107,229,91,181,73,134,55,87,36,39,17,-8,-1,-57,-17,-105,-31,-156,-40,-188,-42,-205,-36", "531,36,517,69,481,103,436,122,385,126,335,121,286,109,237,94,189,76,142,58,95,39,47,20,0,2,-49,-15,-96,-29,-147,-39,-180,-42,-197,-36", "535,28,522,62,488,99,444,120,394,127,344,122,294,111,246,97,197,79,150,61,103,42,55,23,9,5,-40,-12,-88,-27,-139,-37,-172,-41,-189,-36", "538,20,527,54,494,94,452,118,402,126,353,124,302,113,254,99,205,82,158,64,111,45,63,26,16,8,-32,-10,-80,-24,-130,-36,-164,-41,-180,-35", "540,12,532,45,501,88,460,115,410,126,361,125,310,115,262,102,213,85,166,67,119,49,71,29,24,11,-24,-7,-72,-22,-121,-34,-155,-40,-172,-35", "542,4,535,37,506,82,468,111,419,125,370,126,318,117,270,105,221,88,174,71,127,52,79,33,32,14,-15,-4,-64,-20,-113,-32,-147,-39,-164,-34", "543,-3,539,29,512,75,475,107,428,124,378,126,327,119,279,107,230,91,182,74,135,55,87,36,40,17,-7,-1,-56,-17,-104,-30,-138,-37,-155,-33", "545,-12,542,21,517,68,482,103,437,122,386,126,336,121,287,109,238,94,190,77,143,58,95,39,48,20,1,2,-48,-15,-95,-28,-130,-36,-147,-32", "545,-20,544,13,523,61,489,98,445,120,394,127,345,122,295,112,246,97,198,80,151,61,104,42,56,23,9,5,-39,-12,-87,-26,-121,-34,-138,-31", "545,-28,546,5,527,53,495,93,453,117,402,126,354,124,303,114,255,100,206,83,159,65,112,46,64,27,17,8,-31,-9,-79,-24,-112,-32,-129,-29", "544,-36,548,-3,532,44,501,87,461,114,411,126,362,125,311,116,263,102,214,86,167,68,120,49,72,30,25,11,-23,-6,-71,-22,-103,-30,-121,-27", "543,-44,549,-12,536,36,507,81,469,111,420,125,371,126,319,117,271,105,222,89,175,71,128,52,80,33,33,14,-15,-3,-63,-19,-95,-28,-112,-25", "542,-52,549,-21,539,28,513,75,476,107,429,124,379,126,328,119,279,107,231,92,183,74,136,55,88,36,41,17,-6,0,-55,-17,-87,-26,-104,-24", "539,-60,549,-29,542,20,518,68,483,102,437,122,387,127,337,121,287,110,239,94,191,77,144,59,96,39,49,21,2,3,-47,-14,-79,-24,-96,-22", "536,-68,549,-37,545,12,523,60,489,98,446,120,395,127,346,123,296,112,247,97,199,80,152,62,104,43,57,24,10,6,-39,-12,-71,-22,-88,-19", "533,-75,547,-46,546,4,528,52,496,92,454,117,403,126,354,124,303,114,256,100,207,83,160,65,112,46,65,27,18,9,-30,-9,-63,-19,-80,-17", "529,-82,546,-54,548,-4,532,43,502,87,462,114,412,126,363,125,311,116,264,103,215,86,168,68,120,49,73,30,26,12,-22,-6,-54,-17,-72,-15", "524,-89,543,-62,549,-13,536,35,508,81,469,110,421,125,371,126,320,118,272,105,223,89,176,71,129,52,81,33,34,15,-14,-3,-46,-14,-64,-12", "519,-95,540,-70,549,-22,540,27,513,74,477,106,430,123,380,126,329,120,280,108,231,92,184,74,137,56,89,37,42,18,-5,0,-38,-12,-56,-10", "514,-101,536,-78,549,-30,542,19,518,67,484,102,438,122,388,127,338,121,288,110,240,95,192,77,145,59,97,40,50,21,3,3,-30,-9,-47,-7", "508,-107,532,-85,549,-38,545,11,524,59,490,97,447,119,396,127,347,123,296,112,248,98,200,80,153,62,105,43,58,24,11,6,-21,-6,-39,-5", "502,-112,527,-92,547,-46,547,3,528,51,496,92,455,117,404,126,355,124,304,114,256,100,208,83,161,65,113,46,66,27,19,9,-13,-3,-31,-2", "495,-117,522,-98,545,-55,548,-5,533,42,502,86,463,114,413,126,364,125,312,116,265,103,215,86,169,68,121,50,74,30,27,12,-5,0,-22,1", "488,-122,516,-105,543,-63,549,-14,537,34,508,80,470,110,422,125,372,126,321,118,273,105,224,89,177,72,129,53,82,34,35,15,4,3,-14,4", "481,-127,510,-111,540,-71,549,-22,540,26,514,73,478,106,431,123,381,126,330,120,281,108,232,92,185,75,137,56,90,37,43,18,12,6,-6,7", "474,-131,504,-116,536,-78,549,-31,543,18,519,66,484,101,439,121,389,127,339,121,289,110,241,95,193,78,145,59,98,40,51,21,19,9,2,10", "467,-134,497,-121,532,-86,549,-39,545,10,524,58,491,97,447,119,397,127,348,123,297,112,249,98,200,81,153,62,106,43,59,24,27,12,10,13", "459,-137,490,-126,527,-92,547,-47,547,2,529,50,497,91,456,116,405,126,356,124,305,114,257,101,208,84,162,66,114,47,67,28,35,15,18,16", "451,-140,483,-131,522,-99,545,-56,548,-6,533,42,503,86,463,113,414,126,365,125,313,116,266,103,216,86,170,69,122,50,75,31,43,18,26,19", "443,-143,475,-135,516,-105,542,-64,549,-15,537,33,509,79,471,109,423,125,373,126,322,118,274,106,225,89,177,72,130,53,83,34,51,21,34,22", "435,-145,468,-138,510,-111,539,-72,549,-23,540,25,514,73,478,105,432,123,381,126,331,120,282,108,233,92,185,75,138,56,91,37,59,25,42,25", "427,-147,460,-142,503,-117,535,-79,549,-32,543,17,520,65,485,101,440,121,390,127,340,122,290,110,242,95,193,78,146,60,99,40,67,28,50,28", "419,-149,452,-145,497,-122,531,-86,548,-40,545,9,525,58,491,96,448,119,398,127,348,123,298,112,250,98,201,81,154,63,107,44,75,31,58,31", "411,-151,444,-147,490,-127,526,-93,547,-48,547,2,529,49,498,91,456,116,406,126,357,124,306,114,258,101,209,84,162,66,115,47,83,34,66,35", "403,-152,436,-150,482,-131,521,-100,545,-56,548,-7,534,41,504,85,464,113,415,126,366,125,314,116,266,103,217,87,170,69,123,50,91,37,74,38", "395,-153,428,-152,475,-135,515,-106,542,-65,549,-16,537,33,509,79,472,109,424,124,374,126,323,118,275,106,226,90,178,72,131,53,99,41,82,41", "386,-153,420,-154,467,-139,509,-112,539,-72,549,-24,541,24,515,72,479,105,433,123,382,126,332,120,283,108,234,93,186,75,139,57,107,44,90,44", "378,-154,411,-155,460,-142,503,-117,535,-80,549,-33,543,16,520,65,486,100,441,121,391,127,341,122,291,110,242,96,194,78,147,60,115,47,98,48", "370,-154,403,-156,452,-145,496,-122,531,-87,548,-41,545,9,525,57,492,96,449,119,399,127,349,123,299,113,251,98,202,81,155,63,124,50,106,51", "361,-154,394,-157,443,-148,489,-127,526,-94,547,-49,547,1,530,48,498,90,457,116,407,126,358,124,307,115,259,101,210,84,163,66,132,54,114,54", "353,-153,385,-158,435,-150,481,-132,520,-100,545,-57,548,-8,534,40,504,84,465,112,416,125,367,125,315,117,267,104,218,87,171,69,140,57,122,57", "345,-153,377,-158,427,-152,474,-136,514,-107,542,-65,549,-17,538,32,510,78,472,109,425,124,375,126,324,118,275,106,227,90,179,73,148,60,130,61", "336,-152,369,-158,419,-154,466,-139,508,-113,538,-73,549,-25,541,24,515,71,480,104,433,123,383,126,333,120,284,108,235,93,187,76,156,63,138,64", "328,-151,361,-158,410,-155,459,-142,502,-118,535,-81,549,-33,543,16,521,64,486,100,442,121,391,127,342,122,292,111,243,96,195,79,164,66,146,67", "320,-150,352,-158,402,-156,451,-145,495,-123,530,-88,548,-41,546,8,526,56,493,95,450,118,399,127,350,123,300,113,252,99,203,82,172,70,154,70", "312,-148,344,-157,393,-157,442,-148,488,-128,525,-95,547,-50,547,0,530,47,499,90,458,115,408,126,359,124,308,115,260,101,211,84,180,73,162,73", "303,-147,335,-156,385,-158,434,-150,481,-132,520,-101,544,-58,549,-9,534,39,505,84,466,112,417,125,367,125,316,117,268,104,219,87,188,76,170,77", "295,-145,326,-155,376,-158,426,-152,473,-136,514,-107,541,-66,549,-17,538,31,511,77,473,108,426,124,376,126,325,119,276,106,227,90,196,79,178,80", "287,-143,318,-154,368,-158,418,-154,466,-139,508,-113,538,-74,549,-26,541,23,516,70,480,104,434,123,384,126,334,120,284,109,236,93,203,82,186,83", "279,-140,310,-152,360,-158,410,-155,458,-143,501,-118,534,-81,549,-34,544,15,521,63,487,99,443,121,392,127,342,122,292,111,244,96,211,85,194,86", "270,-138,302,-151,351,-158,401,-156,450,-146,494,-123,530,-88,548,-42,546,7,526,55,493,94,451,118,400,126,351,123,300,113,253,99,220,88,202,89", "263,-135,294,-149,343,-157,392,-157,442,-148,487,-128,525,-95,546,-51,547,-1,531,47,499,89,459,115,409,126,360,125,308,115,261,102,228,91,210,92", "255,-133,285,-147,334,-156,384,-158,433,-150,480,-132,519,-102,544,-59,549,-10,535,38,505,83,467,112,418,125,368,125,317,117,269,104,236,94,219,95", "247,-130,277,-144,326,-155,376,-158,425,-152,472,-136,513,-108,541,-67,549,-18,538,30,511,77,474,108,427,124,377,126,326,119,277,107,245,96,227,98", "240,-127,269,-142,317,-154,367,-158,417,-154,465,-140,507,-114,538,-75,549,-27,541,22,517,70,481,104,435,122,385,126,335,121,285,109,253,99,235,101", "232,-123,261,-139,309,-152,359,-158,409,-155,457,-143,501,-119,534,-82,549,-35,544,14,522,62,488,99,444,120,393,127,343,122,293,111,261,102,244,104", "224,-120,253,-137,301,-150,350,-157,400,-156,449,-146,494,-124,529,-89,548,-43,546,6,527,54,494,94,452,118,401,126,352,124,301,113,270,104,252,106", "216,-116,245,-134,293,-149,342,-157,392,-157,441,-148,487,-129,524,-96,546,-52,548,-2,531,46,500,88,460,115,410,126,361,125,309,115,278,107,260,109", "208,-112,237,-130,284,-146,333,-156,383,-158,432,-151,479,-133,519,-102,544,-60,549,-11,535,37,506,82,467,111,419,125,369,125,318,117,286,109,268,111", "200,-108,229,-127,276,-144,325,-155,375,-158,424,-153,472,-137,513,-109,541,-68,549,-19,539,29,512,76,475,107,427,124,378,126,327,119,294,111,276,114", "192,-104,222,-124,268,-142,317,-153,366,-158,416,-154,464,-140,506,-114,537,-75,549,-28,542,21,517,69,482,103,436,122,386,126,335,121,302,113,284,116", "184,-101,214,-120,260,-139,308,-152,358,-158,408,-155,456,-143,500,-119,533,-83,549,-36,544,13,522,61,488,98,444,120,394,127,344,122,310,115,292,118", "176,-98,206,-116,252,-136,300,-150,350,-157,399,-157,448,-146,493,-124,529,-90,548,-44,546,5,527,53,495,93,453,117,402,126,353,124,318,117,301,121", "169,-94,198,-112,244,-133,292,-148,341,-157,391,-157,440,-149,486,-129,524,-97,546,-53,548,-3,532,45,501,88,460,114,411,126,362,125,327,119,310,123", "161,-91,190,-108,236,-130,283,-146,332,-156,382,-158,432,-151,478,-133,518,-103,544,-61,549,-12,536,36,507,82,468,111,420,125,370,126,336,121,319,125", "154,-89,182,-105,229,-127,275,-144,324,-155,374,-158,424,-153,471,-137,512,-109,540,-69,549,-20,539,28,512,75,476,107,428,124,378,126,345,122,328,127", "146,-86,174,-101,221,-123,267,-141,316,-153,366,-158,415,-154,463,-140,506,-115,537,-76,549,-29,542,20,518,68,482,103,437,122,387,126,354,124,336,128", "137,-83,167,-98,213,-119,259,-139,308,-152,357,-158,407,-156,455,-144,499,-120,533,-84,549,-37,544,12,523,61,489,98,445,120,395,127,362,125,345,130", "129,-80,159,-95,205,-115,251,-136,299,-150,349,-157,398,-157,447,-146,492,-125,528,-91,548,-45,546,4,528,52,495,93,453,117,403,126,371,126,354,131", "121,-78,152,-92,197,-112,244,-133,291,-148,340,-157,390,-157,439,-149,485,-129,523,-97,546,-53,548,-4,532,44,501,87,461,114,412,126,379,126,362,132", "113,-76,144,-89,189,-108,236,-130,283,-146,331,-156,381,-158,431,-151,477,-134,517,-104,543,-62,549,-12,536,36,507,81,469,111,421,125,387,127,371,133", "105,-74,135,-87,181,-104,228,-126,274,-144,323,-155,373,-158,423,-153,470,-137,511,-110,540,-69,549,-21,539,27,513,75,476,106,429,124,395,127,379,134", "97,-72,127,-84,173,-101,220,-123,266,-141,315,-153,365,-158,414,-154,462,-141,505,-115,536,-77,549,-29,542,19,518,67,483,102,438,122,403,126,387,134", "88,-70,119,-82,166,-98,212,-119,258,-138,307,-152,356,-158,406,-156,455,-144,498,-120,532,-84,549,-38,545,11,523,60,490,97,446,120,412,126,397,134", "80,-69,111,-80,158,-95,204,-115,251,-136,298,-150,348,-157,398,-157,446,-147,492,-125,528,-91,547,-46,547,4,528,52,496,92,454,117,421,125,406,133", "71,-68,104,-78,151,-92,196,-111,243,-133,290,-148,339,-157,389,-157,438,-149,484,-130,522,-98,545,-54,548,-5,533,43,502,87,462,114,430,123,415,133", "63,-67,95,-76,143,-89,188,-107,235,-129,282,-146,330,-156,380,-158,430,-151,477,-134,517,-104,543,-62,549,-13,536,35,508,80,470,110,438,122,424,131", "55,-67,87,-75,135,-86,180,-104,227,-126,273,-143,322,-154,372,-158,422,-153,469,-138,511,-110,540,-70,549,-22,540,27,513,74,477,106,447,119,433,130", "46,-67,78,-73,126,-84,173,-101,219,-122,265,-141,314,-153,364,-158,414,-155,462,-141,504,-116,536,-78,549,-30,543,19,519,67,484,102,455,117,441,128", "37,-67,70,-72,118,-82,165,-98,211,-119,258,-138,306,-151,355,-158,405,-156,454,-144,498,-121,532,-85,549,-38,545,11,524,59,490,97,463,114,450,125", "29,-67,62,-72,110,-79,158,-95,203,-115,250,-135,298,-150,347,-157,397,-157,446,-147,491,-126,527,-92,547,-47,547,3,529,51,497,92,470,110,458,122", "20,-68,54,-71,103,-78,150,-92,195,-111,242,-132,289,-148,338,-156,388,-158,437,-149,483,-130,522,-99,545,-55,548,-5,533,42,503,86,478,106,466,119", "12,-69,45,-71,95,-76,142,-89,187,-107,234,-129,281,-145,329,-155,380,-158,429,-151,476,-135,516,-105,543,-63,549,-14,537,34,508,80,484,101,474,115", "4,-71,37,-71,86,-74,134,-86,179,-104,226,-126,272,-143,321,-154,371,-158,421,-153,468,-138,510,-111,539,-71,549,-23,540,26,514,73,491,97,481,110", "-5,-73,29,-72,78,-73,126,-84,172,-100,218,-122,264,-140,313,-153,363,-158,413,-155,461,-141,504,-116,536,-79,549,-31,543,18,519,66,497,91,488,105", "-13,-75,20,-73,69,-72,118,-81,164,-97,210,-118,257,-138,305,-151,354,-158,404,-156,453,-144,497,-122,531,-86,548,-39,545,10,524,58,503,86,494,100", "-21,-77,12,-74,61,-72,110,-79,157,-94,202,-114,249,-135,297,-149,346,-157,396,-157,445,-147,490,-126,527,-93,547,-48,547,2,529,50,509,79,501,94", "-29,-80,4,-75,53,-71,102,-77,150,-92,194,-110,241,-132,288,-147,337,-156,387,-158,436,-150,483,-131,521,-99,545,-56,548,-6,533,41,514,73,507,88", "-37,-83,-4,-77,45,-71,94,-76,141,-89,186,-107,233,-129,280,-145,329,-155,379,-158,428,-152,475,-135,515,-106,542,-64,549,-15,537,33,520,65,513,81", "-45,-86,-12,-79,36,-71,85,-74,133,-86,179,-103,225,-125,272,-143,321,-154,370,-158,420,-153,468,-138,509,-112,539,-72,549,-24,540,25,525,58,519,73", "-53,-90,-20,-82,28,-72,77,-73,125,-83,171,-100,217,-122,264,-140,312,-153,362,-158,412,-155,460,-142,503,-117,535,-79,549,-32,543,17,529,49,524,65", "-61,-93,-28,-84,19,-73,68,-72,117,-81,163,-97,209,-118,256,-138,304,-151,354,-158,403,-156,452,-145,496,-122,531,-87,548,-40,545,9,534,41,529,56", "-68,-97,-36,-87,11,-74,60,-72,109,-79,156,-94,201,-114,248,-135,296,-149,345,-157,395,-157,444,-147,489,-127,526,-93,547,-49,547,1,537,33,533,48", "-75,-101,-44,-90,3,-76,52,-71,101,-77,149,-91,193,-110,240,-132,288,-147,336,-156,386,-158,435,-150,482,-131,521,-100,545,-57,548,-7,541,24,537,40", "-83,-105,-52,-94,-5,-77,44,-71,93,-76,140,-88,186,-106,232,-128,279,-145,328,-155,378,-158,427,-152,474,-135,515,-106,542,-65,549,-16,543,16,540,32", "-90,-109,-59,-97,-13,-80,35,-71,84,-74,132,-86,178,-103,225,-125,271,-142,320,-154,370,-158,419,-154,467,-139,509,-112,539,-73,549,-25,545,8,543,25", "-98,-114,-67,-101,-21,-82,27,-72,76,-73,124,-83,170,-100,217,-121,263,-140,312,-153,361,-158,411,-155,459,-142,502,-117,535,-80,549,-33,547,1,545,17", "-105,-118,-74,-105,-29,-85,19,-73,68,-72,116,-81,163,-97,209,-117,255,-137,303,-151,353,-158,403,-156,451,-145,496,-123,530,-87,548,-41,548,-8,547,8", "-112,-122,-81,-109,-37,-88,10,-74,59,-72,108,-79,155,-94,201,-113,247,-134,295,-149,344,-157,394,-157,443,-148,489,-127,526,-94,547,-49,549,-17,549,0", "-119,-127,-89,-113,-45,-91,2,-76,51,-71,100,-77,148,-91,193,-110,239,-131,287,-147,335,-156,385,-158,434,-150,481,-132,520,-101,544,-58,549,-25,550,-9", "-126,-132,-96,-118,-52,-94,-6,-78,43,-71,92,-75,139,-88,185,-106,232,-128,278,-145,327,-155,377,-158,427,-152,474,-136,514,-107,542,-66,549,-33,550,-17", "-133,-136,-103,-122,-60,-98,-14,-80,34,-71,83,-74,131,-85,177,-103,224,-125,270,-142,319,-154,369,-158,418,-154,466,-139,508,-113,538,-73,548,-42,550,-25", "-140,-141,-110,-126,-67,-102,-22,-82,26,-72,75,-73,123,-83,169,-99,216,-121,262,-140,311,-152,360,-158,410,-155,458,-142,502,-118,534,-81,547,-50,549,-34", "-147,-146,-117,-131,-75,-105,-30,-85,18,-73,67,-72,115,-81,162,-96,208,-117,254,-137,302,-151,352,-158,402,-156,450,-145,495,-123,530,-88,544,-58,548,-42", "-154,-150,-124,-136,-82,-110,-38,-88,10,-74,59,-71,107,-79,155,-93,200,-113,246,-134,294,-149,343,-157,393,-157,442,-148,488,-128,525,-95,541,-66,546,-50", "-161,-155,-131,-140,-89,-114,-45,-91,1,-76,50,-71,100,-77,147,-91,192,-109,239,-131,286,-147,335,-156,384,-158,434,-150,480,-132,520,-101,538,-74,543,-58", "-168,-160,-138,-145,-97,-118,-53,-95,-7,-78,42,-71,91,-75,138,-88,184,-106,231,-128,277,-144,326,-155,376,-158,426,-152,473,-136,514,-108,534,-81,540,-66", "-175,-164,-145,-149,-104,-122,-61,-98,-15,-80,33,-72,82,-74,130,-85,176,-102,223,-124,269,-142,318,-154,368,-158,418,-154,465,-140,507,-113,530,-88,537,-74", "-182,-169,-152,-154,-111,-127,-68,-102,-23,-82,25,-72,74,-73,122,-83,169,-99,215,-120,261,-139,310,-152,359,-158,409,-155,458,-143,501,-119,525,-95,532,-81", "-188,-173,-159,-159,-118,-131,-75,-106,-31,-85,17,-73,66,-72,114,-80,161,-96,207,-117,253,-137,302,-151,351,-158,401,-156,450,-146,494,-124,519,-102,528,-88", "-195,-178,-166,-164,-125,-136,-83,-110,-39,-88,9,-74,58,-71,106,-78,154,-93,199,-113,246,-134,293,-149,342,-157,392,-157,441,-148,487,-128,513,-108,522,-94", "-202,-183,-173,-168,-132,-141,-90,-114,-46,-91,0,-76,50,-71,99,-77,146,-90,191,-109,238,-131,285,-147,334,-156,383,-158,433,-151,479,-133,507,-114,517,-100", "-210,-187,-180,-173,-139,-145,-97,-119,-54,-95,-8,-78,41,-71,90,-75,138,-87,183,-105,230,-127,276,-144,325,-155,375,-158,425,-152,472,-136,501,-119,511,-106", "-217,-192,-187,-177,-146,-150,-104,-123,-62,-99,-16,-80,33,-72,82,-74,129,-85,175,-102,222,-124,268,-142,317,-154,367,-158,417,-154,465,-140,494,-124,505,-111", "-225,-196,-194,-182,-152,-155,-111,-127,-69,-102,-24,-83,24,-72,73,-73,121,-82,168,-99,214,-120,260,-139,309,-152,359,-158,408,-155,457,-143,486,-129,498,-116", "-233,-201,-201,-187,-159,-159,-118,-132,-76,-106,-32,-85,16,-73,65,-72,113,-80,160,-96,206,-116,253,-136,301,-150,350,-157,400,-156,449,-146,479,-133,491,-121", "-240,-206,-208,-191,-166,-164,-125,-137,-83,-110,-39,-89,8,-75,57,-71,106,-78,153,-93,198,-112,245,-133,292,-148,341,-157,391,-157,440,-149,472,-137,484,-125", "-248,-210,-215,-196,-174,-169,-133,-141,-91,-115,-47,-92,0,-76,49,-71,98,-77,145,-90,190,-108,237,-130,284,-146,333,-156,383,-158,432,-151,464,-140,477,-129", "-256,-214,-223,-201,-180,-173,-139,-146,-98,-119,-55,-95,-9,-78,40,-71,89,-75,137,-87,182,-105,229,-127,276,-144,324,-155,374,-158,424,-153,456,-143,469,-132", "-264,-217,-231,-205,-187,-178,-146,-150,-105,-123,-62,-99,-17,-80,32,-72,81,-74,129,-84,175,-102,221,-123,267,-141,316,-153,366,-158,416,-154,448,-146,462,-136", "-271,-221,-239,-210,-194,-182,-153,-155,-112,-128,-70,-103,-25,-83,23,-72,72,-73,120,-82,167,-98,213,-120,260,-139,308,-152,358,-158,408,-156,440,-149,454,-139", "-279,-224,-247,-214,-201,-187,-160,-160,-119,-132,-77,-107,-32,-86,15,-73,64,-72,113,-80,160,-95,205,-116,252,-136,300,-150,349,-157,399,-157,431,-151,446,-141", "-286,-227,-255,-218,-209,-192,-167,-165,-126,-137,-84,-111,-40,-89,7,-75,56,-71,105,-78,152,-93,197,-112,244,-133,292,-148,341,-157,390,-157,423,-153,438,-143", "-294,-230,-262,-222,-216,-196,-174,-169,-133,-142,-92,-115,-48,-92,-1,-76,48,-71,97,-76,144,-90,189,-108,236,-130,283,-146,332,-156,382,-158,415,-154,430,-145", "-301,-232,-270,-225,-224,-201,-181,-174,-140,-146,-99,-120,-56,-96,-9,-78,39,-71,88,-75,136,-87,181,-105,228,-127,275,-144,324,-155,374,-158,407,-156,422,-147", "-308,-235,-278,-228,-232,-206,-188,-178,-147,-151,-106,-124,-63,-99,-17,-81,31,-72,80,-73,128,-84,174,-101,220,-123,267,-141,315,-153,365,-158,398,-157,414,-148", "-317,-237,-285,-231,-240,-210,-195,-183,-154,-156,-113,-128,-70,-103,-25,-83,23,-72,71,-72,120,-82,166,-98,212,-119,259,-139,307,-152,357,-158,390,-157,405,-149", "-326,-240,-293,-234,-248,-214,-202,-188,-161,-160,-120,-133,-78,-107,-33,-86,14,-74,63,-72,112,-80,159,-95,204,-115,251,-136,299,-150,348,-157,381,-158,397,-150", "-334,-241,-300,-237,-255,-218,-209,-192,-168,-165,-127,-137,-85,-111,-41,-89,6,-75,55,-71,104,-78,152,-92,196,-111,243,-133,291,-148,340,-157,373,-158,389,-151", "-343,-243,-308,-239,-263,-222,-217,-197,-175,-170,-134,-142,-92,-116,-49,-92,-2,-77,47,-71,96,-76,143,-89,188,-108,235,-130,282,-146,331,-156,365,-158,381,-151", "-351,-244,-317,-242,-271,-225,-225,-202,-182,-174,-141,-147,-100,-120,-56,-96,-10,-79,38,-71,87,-75,135,-87,181,-104,227,-126,274,-143,323,-154,356,-158,373,-152", "-359,-245,-325,-244,-278,-229,-233,-206,-189,-179,-148,-151,-107,-124,-64,-100,-18,-81,30,-72,79,-73,127,-84,173,-101,220,-123,266,-141,315,-153,348,-157,364,-152", "-367,-246,-334,-246,-286,-232,-241,-211,-196,-183,-155,-156,-114,-129,-71,-104,-26,-84,22,-73,71,-72,119,-82,166,-98,212,-119,258,-138,306,-152,339,-157,356,-151", "-375,-247,-342,-247,-293,-234,-248,-215,-203,-188,-162,-161,-121,-133,-78,-108,-34,-86,14,-74,63,-72,111,-80,158,-95,204,-115,250,-135,298,-150,330,-156,347,-151", "-383,-247,-351,-249,-301,-237,-256,-219,-210,-193,-169,-166,-128,-138,-86,-112,-42,-90,5,-75,55,-71,103,-78,151,-92,196,-111,242,-132,290,-148,322,-154,339,-150", "-391,-247,-359,-250,-309,-239,-264,-222,-218,-197,-176,-170,-135,-143,-93,-116,-49,-93,-3,-77,46,-71,95,-76,143,-89,188,-107,235,-129,281,-146,314,-153,331,-150", "-400,-246,-367,-251,-318,-242,-272,-226,-226,-202,-183,-175,-142,-147,-100,-120,-57,-96,-11,-79,37,-71,87,-75,134,-86,180,-104,227,-126,273,-143,306,-151,323,-149", "-409,-246,-375,-251,-326,-244,-279,-229,-233,-207,-189,-179,-148,-152,-107,-125,-65,-100,-19,-81,29,-72,78,-73,126,-84,172,-100,219,-122,265,-141,298,-150,315,-147", "-417,-244,-383,-251,-335,-246,-287,-232,-241,-211,-196,-184,-155,-157,-114,-129,-72,-104,-27,-84,21,-73,70,-72,118,-81,165,-97,211,-118,257,-138,289,-148,306,-146", "-425,-243,-392,-251,-343,-248,-294,-235,-249,-215,-204,-188,-162,-161,-121,-134,-79,-108,-35,-87,13,-74,62,-72,110,-79,157,-94,203,-114,249,-135,281,-145,298,-144", "-433,-241,-401,-251,-352,-249,-302,-237,-257,-219,-211,-193,-169,-166,-128,-138,-87,-112,-43,-90,4,-75,54,-71,102,-78,150,-92,195,-111,242,-132,272,-143,290,-143", "-441,-239,-410,-250,-360,-250,-310,-240,-265,-223,-218,-198,-176,-171,-136,-143,-94,-116,-50,-93,-4,-77,45,-71,94,-76,142,-89,187,-107,234,-129,264,-140,282,-141", "-449,-237,-418,-249,-368,-251,-318,-242,-272,-226,-226,-203,-183,-175,-142,-148,-101,-121,-58,-97,-12,-79,37,-71,86,-74,133,-86,179,-103,226,-126,257,-138,274,-139", "-456,-234,-427,-247,-376,-251,-327,-244,-280,-229,-234,-207,-190,-180,-149,-152,-108,-125,-65,-101,-20,-81,28,-72,77,-73,125,-83,171,-100,218,-122,249,-135,266,-136", "-464,-231,-435,-245,-384,-251,-336,-246,-287,-232,-242,-211,-197,-184,-156,-157,-115,-130,-73,-104,-28,-84,20,-73,69,-72,117,-81,164,-97,210,-118,241,-132,258,-134", "-472,-227,-443,-243,-393,-251,-344,-248,-295,-235,-250,-216,-204,-189,-163,-162,-122,-134,-80,-108,-36,-87,12,-74,61,-72,109,-79,157,-94,202,-114,233,-129,250,-131", "-479,-223,-451,-241,-402,-251,-353,-249,-302,-237,-258,-219,-212,-194,-170,-167,-129,-139,-87,-113,-43,-90,4,-75,53,-71,102,-77,149,-91,194,-110,225,-125,242,-128", "-487,-219,-459,-238,-411,-250,-361,-250,-311,-240,-265,-223,-219,-198,-177,-171,-136,-144,-95,-117,-51,-94,-5,-77,44,-71,93,-76,141,-88,186,-107,217,-122,234,-125", "-494,-215,-467,-235,-419,-249,-369,-251,-319,-242,-273,-226,-227,-203,-184,-176,-143,-148,-102,-121,-59,-97,-13,-79,36,-71,85,-74,132,-86,178,-103,209,-118,225,-122", "-500,-210,-474,-231,-427,-247,-377,-251,-328,-245,-281,-230,-235,-208,-191,-180,-150,-153,-109,-126,-66,-101,-21,-82,27,-72,76,-73,124,-83,171,-100,201,-114,217,-118", "-507,-205,-482,-227,-436,-245,-385,-251,-337,-246,-288,-232,-243,-212,-198,-185,-157,-158,-116,-130,-73,-105,-29,-84,19,-73,68,-72,116,-81,163,-97,193,-110,209,-114", "-513,-200,-489,-223,-444,-243,-394,-251,-345,-248,-296,-235,-251,-216,-205,-189,-164,-162,-123,-135,-81,-109,-36,-87,11,-74,60,-72,109,-79,156,-94,185,-106,201,-111", "-520,-194,-497,-218,-451,-240,-403,-251,-353,-249,-303,-238,-259,-220,-212,-194,-171,-167,-130,-139,-88,-113,-44,-91,3,-76,52,-71,101,-77,148,-91,178,-103,194,-108", "-526,-189,-504,-213,-459,-238,-411,-250,-362,-250,-311,-240,-266,-223,-220,-199,-178,-172,-137,-144,-95,-117,-52,-94,-5,-77,43,-71,92,-76,140,-88,170,-100,186,-104", "-531,-182,-510,-208,-467,-234,-420,-248,-370,-251,-320,-243,-274,-227,-228,-204,-185,-176,-144,-149,-102,-122,-59,-98,-14,-80,35,-71,84,-74,132,-85,163,-97,178,-101", "-537,-176,-517,-203,-475,-231,-428,-247,-378,-251,-329,-245,-282,-230,-236,-208,-192,-181,-151,-153,-109,-126,-67,-101,-22,-82,26,-72,75,-73,124,-83,155,-94,171,-98", "-542,-170,-523,-197,-483,-227,-436,-245,-386,-251,-337,-247,-289,-233,-244,-212,-199,-185,-158,-158,-116,-131,-74,-105,-29,-85,18,-73,67,-72,116,-81,148,-91,163,-96", "-547,-163,-529,-191,-490,-222,-444,-243,-395,-251,-346,-248,-296,-235,-252,-216,-206,-190,-165,-163,-123,-135,-82,-109,-37,-88,10,-74,59,-71,108,-79,139,-88,155,-93", "-552,-156,-535,-185,-497,-218,-452,-240,-404,-250,-354,-249,-304,-238,-259,-220,-213,-194,-172,-168,-131,-140,-89,-113,-45,-91,2,-76,51,-71,100,-77,131,-85,147,-90", "-556,-149,-541,-178,-504,-213,-460,-237,-412,-250,-363,-250,-312,-240,-267,-224,-221,-199,-179,-172,-138,-145,-96,-118,-53,-94,-6,-78,42,-71,92,-75,123,-83,139,-87", "-560,-142,-546,-172,-511,-208,-468,-234,-421,-248,-371,-251,-321,-243,-275,-227,-229,-204,-185,-177,-144,-149,-103,-122,-60,-98,-14,-80,34,-72,83,-74,115,-81,131,-85", "-564,-134,-551,-165,-517,-202,-476,-230,-429,-247,-379,-251,-330,-245,-282,-230,-237,-208,-192,-181,-151,-154,-110,-127,-68,-102,-22,-82,26,-72,75,-73,107,-79,123,-83", "-568,-127,-556,-158,-524,-196,-484,-226,-437,-245,-387,-251,-338,-247,-290,-233,-245,-213,-199,-186,-158,-159,-117,-131,-75,-106,-30,-85,17,-73,66,-72,100,-77,115,-81", "-572,-119,-560,-151,-530,-190,-491,-222,-445,-242,-396,-251,-347,-248,-297,-236,-252,-217,-207,-190,-165,-163,-124,-136,-82,-110,-38,-88,9,-74,58,-71,91,-75,107,-79", "-575,-111,-565,-143,-536,-184,-498,-217,-453,-240,-405,-250,-355,-249,-305,-238,-260,-221,-214,-195,-172,-168,-131,-140,-90,-114,-46,-91,1,-76,50,-71,82,-74,98,-78", "-578,-103,-569,-136,-541,-178,-505,-212,-461,-237,-413,-249,-363,-250,-313,-241,-268,-224,-222,-200,-179,-173,-138,-145,-97,-118,-53,-95,-7,-78,41,-71,74,-73,90,-77", "-580,-95,-572,-128,-546,-171,-512,-207,-469,-233,-422,-248,-372,-251,-322,-243,-276,-227,-230,-204,-186,-177,-145,-150,-104,-123,-61,-98,-15,-80,33,-72,66,-72,82,-76", "-583,-88,-576,-120,-552,-164,-518,-202,-477,-230,-430,-246,-380,-251,-331,-245,-283,-230,-238,-209,-193,-182,-152,-154,-111,-127,-68,-102,-23,-83,25,-72,58,-71,74,-75", "-585,-79,-579,-112,-556,-157,-524,-196,-484,-226,-438,-244,-388,-251,-339,-247,-291,-233,-245,-213,-200,-186,-159,-159,-118,-132,-76,-106,-31,-85,17,-73,50,-71,66,-74", "-587,-71,-582,-104,-561,-150,-530,-190,-492,-221,-446,-242,-397,-251,-348,-248,-298,-236,-253,-217,-207,-191,-166,-164,-125,-136,-83,-110,-39,-88,8,-74,41,-71,57,-74", "-588,-63,-585,-96,-565,-143,-536,-184,-499,-217,-454,-240,-405,-250,-356,-250,-305,-238,-261,-221,-215,-195,-173,-169,-132,-141,-90,-114,-47,-92,0,-76,32,-72,49,-74", "-590,-55,-587,-88,-569,-135,-542,-177,-506,-212,-462,-237,-414,-249,-364,-250,-314,-241,-269,-224,-223,-200,-180,-173,-139,-146,-98,-119,-54,-95,-8,-78,24,-72,41,-74", "-591,-46,-589,-80,-573,-127,-547,-170,-512,-207,-470,-233,-423,-248,-372,-251,-323,-243,-276,-228,-230,-205,-187,-178,-146,-150,-105,-123,-62,-99,-16,-80,16,-73,33,-75", "-592,-38,-591,-72,-576,-120,-552,-163,-519,-201,-478,-229,-431,-246,-380,-251,-332,-245,-284,-231,-238,-209,-194,-182,-153,-155,-112,-128,-69,-102,-24,-83,8,-75,25,-76", "-592,-29,-593,-63,-579,-112,-557,-156,-525,-195,-485,-225,-439,-244,-389,-251,-340,-247,-291,-234,-246,-214,-201,-187,-160,-160,-119,-132,-76,-106,-32,-86,0,-76,16,-77", "-592,-21,-594,-55,-582,-103,-561,-149,-531,-189,-492,-221,-447,-242,-398,-251,-349,-248,-299,-236,-254,-218,-208,-191,-167,-164,-126,-137,-84,-111,-40,-89,-9,-78,8,-79", "-592,-13,-595,-46,-585,-95,-565,-142,-537,-183,-499,-216,-455,-239,-406,-250,-357,-250,-306,-239,-262,-221,-215,-196,-174,-169,-133,-141,-91,-115,-47,-92,-17,-80,0,-81", "-592,-5,-596,-38,-587,-87,-569,-134,-542,-176,-506,-211,-463,-236,-415,-249,-365,-250,-315,-241,-269,-225,-223,-201,-181,-174,-140,-146,-98,-119,-55,-95,-25,-83,-7,-83", "-592,4,-597,-29,-589,-79,-573,-127,-548,-170,-513,-206,-471,-233,-423,-248,-373,-251,-324,-244,-277,-228,-231,-205,-188,-178,-147,-151,-105,-124,-63,-99,-32,-86,-15,-85", "-591,12,-597,-21,-591,-71,-577,-119,-553,-163,-519,-200,-478,-229,-432,-246,-381,-251,-332,-246,-285,-231,-239,-210,-195,-183,-153,-155,-112,-128,-70,-103,-40,-89,-23,-88", "-590,21,-597,-12,-593,-62,-580,-111,-557,-156,-526,-195,-486,-225,-440,-244,-390,-251,-341,-247,-292,-234,-247,-214,-202,-187,-160,-160,-119,-133,-77,-107,-48,-92,-31,-91", "-589,29,-597,-4,-594,-54,-583,-103,-562,-148,-532,-189,-493,-220,-448,-242,-399,-251,-349,-249,-300,-236,-255,-218,-209,-192,-168,-165,-126,-137,-85,-111,-56,-96,-38,-94", "-587,37,-596,5,-595,-45,-585,-94,-566,-141,-537,-182,-500,-216,-456,-239,-407,-250,-358,-250,-307,-239,-263,-222,-216,-196,-175,-170,-134,-142,-92,-115,-63,-99,-46,-98", "-586,45,-595,13,-596,-37,-588,-86,-570,-133,-543,-176,-507,-211,-464,-236,-416,-249,-366,-251,-316,-242,-270,-225,-224,-201,-181,-174,-140,-147,-99,-120,-70,-103,-53,-101", "-584,54,-594,22,-597,-28,-590,-78,-573,-126,-548,-169,-514,-205,-472,-232,-424,-248,-374,-251,-325,-244,-278,-228,-232,-206,-188,-179,-147,-151,-106,-124,-78,-107,-60,-105", "-581,61,-593,30,-597,-20,-591,-70,-577,-118,-553,-162,-520,-200,-479,-229,-433,-246,-382,-251,-333,-246,-285,-231,-240,-210,-195,-183,-154,-156,-113,-128,-85,-111,-68,-109", "-579,69,-592,39,-597,-11,-593,-62,-580,-110,-558,-155,-526,-194,-487,-224,-441,-244,-391,-251,-342,-247,-293,-234,-248,-214,-202,-188,-161,-160,-120,-133,-92,-116,-75,-113", "-576,77,-590,47,-597,-3,-594,-53,-583,-102,-562,-148,-532,-188,-494,-220,-449,-241,-399,-251,-350,-249,-300,-237,-256,-218,-210,-192,-168,-165,-127,-138,-100,-120,-82,-117", "-573,85,-588,55,-596,6,-595,-45,-585,-94,-566,-140,-538,-182,-501,-215,-456,-239,-408,-250,-359,-250,-308,-239,-263,-222,-217,-197,-175,-170,-134,-142,-107,-124,-89,-122", "-570,93,-586,63,-595,14,-596,-36,-588,-86,-570,-133,-543,-175,-508,-210,-464,-236,-417,-249,-367,-251,-317,-242,-271,-225,-225,-202,-182,-175,-141,-147,-114,-129,-96,-126", "-567,101,-583,71,-594,23,-597,-27,-590,-77,-574,-125,-549,-168,-514,-205,-472,-232,-425,-247,-375,-251,-326,-244,-279,-229,-233,-206,-189,-179,-148,-152,-121,-133,-103,-130", "-563,109,-580,79,-593,31,-597,-19,-592,-69,-577,-117,-554,-161,-521,-199,-480,-228,-433,-246,-383,-251,-334,-246,-286,-232,-241,-211,-196,-184,-155,-156,-128,-138,-110,-135", "-559,116,-577,87,-591,40,-597,-10,-593,-61,-580,-109,-558,-154,-527,-193,-487,-224,-441,-244,-392,-251,-343,-248,-294,-234,-249,-215,-203,-188,-162,-161,-135,-143,-117,-139", "-555,123,-574,95,-590,48,-597,-2,-594,-52,-583,-101,-563,-147,-533,-187,-495,-219,-449,-241,-400,-251,-351,-249,-301,-237,-256,-219,-210,-193,-169,-166,-142,-147,-124,-144", "-551,130,-570,103,-588,56,-596,6,-595,-44,-586,-93,-567,-139,-539,-181,-502,-215,-457,-238,-409,-250,-359,-250,-309,-240,-264,-222,-218,-197,-176,-170,-148,-152,-131,-148", "-547,137,-567,111,-585,64,-595,15,-596,-35,-588,-85,-571,-132,-544,-174,-508,-210,-465,-235,-418,-249,-368,-251,-318,-242,-272,-226,-226,-202,-183,-175,-155,-157,-138,-153", "-542,144,-563,119,-583,72,-594,24,-597,-26,-590,-76,-574,-124,-549,-168,-515,-204,-473,-232,-426,-247,-376,-251,-327,-244,-279,-229,-234,-207,-190,-180,-162,-161,-145,-157", "-537,151,-559,126,-580,80,-593,32,-597,-18,-592,-68,-578,-116,-554,-160,-521,-199,-481,-228,-434,-245,-384,-251,-335,-246,-287,-232,-242,-211,-197,-184,-169,-166,-153,-162", "-532,158,-554,133,-577,88,-591,41,-597,-10,-593,-60,-581,-108,-559,-153,-528,-193,-488,-223,-442,-243,-392,-251,-344,-248,-294,-235,-250,-215,-204,-189,-177,-171,-160,-167", "-526,164,-550,140,-574,96,-589,49,-596,-1,-595,-51,-583,-100,-563,-146,-533,-187,-495,-219,-450,-241,-401,-251,-352,-249,-302,-237,-257,-219,-211,-193,-183,-175,-167,-171", "-521,171,-545,147,-570,104,-587,57,-596,7,-596,-43,-586,-92,-567,-139,-539,-180,-502,-214,-458,-238,-410,-250,-360,-250,-310,-240,-265,-223,-219,-198,-190,-180,-174,-175", "-520,172,-544,148,-569,105,-587,58,-596,9,-596,-41,-586,-91,-568,-138,-540,-179,-503,-213,-459,-238,-411,-250,-362,-250,-311,-240,-266,-223,-220,-199,-191,-180,-175,-176"],
        "Swim Out": ["-517,175,-542,151,-568,109,-586,62,-595,12,-596,-38,-587,-87,-569,-134,-542,-176,-506,-211,-463,-236,-415,-249,-365,-250,-315,-241,-269,-225,-223,-201,-194,-182,-178,-178", "-510,182,-536,160,-563,118,-583,72,-594,23,-597,-27,-590,-77,-574,-125,-549,-168,-515,-205,-473,-232,-425,-247,-375,-251,-326,-244,-279,-229,-233,-207,-203,-188,-187,-184", "-502,189,-529,168,-558,127,-579,82,-592,34,-597,-16,-592,-67,-578,-115,-555,-159,-523,-198,-482,-227,-436,-245,-385,-251,-337,-246,-288,-233,-243,-212,-212,-194,-196,-189", "-494,196,-521,177,-552,136,-575,92,-590,44,-597,-6,-594,-56,-582,-105,-561,-150,-530,-190,-491,-222,-446,-242,-396,-251,-347,-248,-298,-236,-253,-217,-222,-200,-206,-195", "-486,202,-514,184,-547,145,-571,102,-588,54,-596,5,-595,-45,-585,-94,-566,-141,-537,-182,-500,-216,-456,-239,-407,-250,-358,-250,-307,-239,-263,-222,-232,-206,-216,-201", "-477,208,-506,192,-540,154,-566,112,-585,65,-595,15,-596,-34,-588,-84,-571,-131,-544,-174,-509,-209,-466,-235,-418,-249,-368,-251,-318,-242,-272,-226,-242,-211,-226,-207", "-468,213,-498,199,-534,162,-562,121,-582,75,-594,26,-597,-24,-591,-74,-575,-122,-551,-165,-517,-203,-476,-230,-429,-247,-378,-251,-329,-245,-282,-230,-252,-216,-236,-212", "-459,218,-490,205,-527,171,-556,130,-578,85,-592,37,-597,-13,-593,-63,-579,-112,-557,-156,-525,-195,-485,-225,-439,-244,-389,-251,-340,-247,-291,-234,-261,-221,-245,-217", "-450,222,-481,211,-519,179,-551,139,-574,95,-590,47,-597,-3,-594,-53,-583,-101,-562,-147,-532,-188,-494,-220,-449,-241,-400,-251,-351,-249,-301,-237,-271,-225,-255,-222", "-440,226,-472,216,-512,187,-545,148,-570,105,-587,58,-596,8,-596,-42,-586,-91,-567,-138,-540,-180,-503,-214,-459,-238,-411,-250,-361,-250,-311,-240,-281,-229,-264,-226", "-430,230,-462,221,-504,194,-538,156,-565,115,-584,68,-595,19,-596,-31,-589,-81,-572,-128,-546,-171,-511,-207,-469,-234,-421,-248,-371,-251,-322,-243,-290,-233,-274,-230", "-420,233,-453,226,-496,200,-532,165,-560,124,-581,78,-593,29,-597,-21,-591,-71,-577,-119,-553,-163,-520,-200,-479,-229,-432,-246,-381,-251,-333,-246,-299,-236,-283,-233", "-410,236,-443,230,-487,207,-524,173,-555,133,-577,88,-591,40,-597,-10,-593,-60,-581,-109,-559,-154,-527,-193,-488,-224,-442,-243,-392,-251,-343,-248,-309,-240,-293,-237", "-400,238,-433,234,-478,213,-517,181,-549,142,-573,98,-589,50,-596,1,-595,-49,-584,-98,-564,-145,-535,-185,-497,-218,-452,-240,-403,-250,-354,-249,-320,-243,-304,-240", "-390,240,-423,237,-469,218,-509,189,-543,150,-568,108,-586,61,-596,11,-596,-39,-587,-88,-569,-135,-542,-177,-506,-212,-462,-237,-414,-249,-364,-250,-331,-245,-315,-243", "-380,242,-413,240,-460,223,-501,196,-536,159,-563,117,-583,71,-594,22,-597,-28,-590,-78,-574,-125,-548,-169,-514,-205,-472,-232,-425,-248,-374,-251,-342,-247,-326,-246", "-369,243,-402,242,-450,227,-493,202,-529,168,-558,126,-580,81,-593,33,-597,-17,-592,-67,-578,-116,-555,-160,-522,-198,-481,-227,-435,-245,-384,-251,-352,-249,-336,-248", "-359,243,-392,244,-440,231,-484,209,-522,176,-553,135,-576,91,-591,43,-597,-7,-594,-57,-582,-105,-560,-151,-530,-191,-491,-222,-445,-243,-395,-251,-363,-250,-347,-249", "-348,244,-382,246,-430,235,-475,214,-515,184,-547,144,-572,101,-588,54,-596,4,-595,-46,-585,-95,-566,-142,-537,-183,-500,-216,-455,-239,-407,-250,-373,-251,-357,-250", "-338,244,-371,247,-420,238,-466,219,-507,191,-541,153,-567,111,-585,64,-595,15,-596,-35,-588,-85,-570,-132,-544,-175,-508,-210,-465,-235,-417,-249,-383,-251,-367,-251", "-327,244,-360,248,-410,240,-457,224,-499,198,-534,162,-562,120,-582,74,-594,25,-597,-25,-590,-75,-575,-122,-550,-166,-516,-203,-475,-231,-428,-247,-394,-251,-378,-251", "-317,243,-350,248,-399,243,-447,228,-490,204,-527,170,-557,129,-579,84,-592,36,-597,-14,-593,-64,-579,-113,-556,-157,-524,-196,-484,-226,-438,-245,-405,-250,-389,-251", "-306,242,-339,248,-389,245,-437,232,-482,210,-520,178,-551,138,-575,94,-590,47,-597,-3,-594,-54,-583,-102,-562,-148,-532,-188,-493,-220,-448,-242,-416,-249,-400,-250", "-296,241,-329,248,-378,246,-427,236,-472,216,-512,186,-545,147,-570,104,-587,57,-596,7,-595,-43,-586,-92,-567,-139,-539,-180,-502,-214,-458,-238,-426,-247,-410,-249", "-286,240,-318,248,-368,247,-417,239,-463,221,-504,193,-539,156,-565,114,-584,67,-595,18,-596,-32,-589,-82,-572,-129,-546,-172,-511,-208,-468,-234,-437,-245,-420,-247", "-275,238,-307,247,-357,248,-406,241,-454,225,-496,200,-532,164,-560,123,-581,77,-593,29,-597,-21,-591,-72,-576,-119,-552,-163,-519,-201,-478,-229,-447,-242,-431,-245", "-265,236,-297,246,-346,248,-396,243,-444,230,-488,206,-525,173,-555,132,-577,87,-591,39,-597,-11,-593,-61,-580,-109,-558,-154,-527,-194,-487,-224,-457,-239,-440,-242", "-255,233,-286,244,-336,248,-386,245,-434,233,-479,212,-518,181,-549,141,-573,97,-589,50,-596,0,-595,-50,-584,-99,-563,-145,-534,-186,-496,-218,-467,-235,-451,-239", "-245,231,-276,242,-325,248,-375,246,-424,237,-470,217,-510,188,-543,150,-569,107,-587,60,-596,10,-596,-40,-587,-89,-569,-136,-541,-178,-505,-212,-476,-230,-461,-235", "-234,228,-265,240,-315,247,-364,247,-414,239,-460,222,-502,195,-537,158,-564,117,-583,70,-594,21,-597,-29,-589,-79,-573,-126,-548,-169,-513,-206,-486,-225,-470,-230", "-224,224,-255,238,-304,246,-354,248,-403,242,-451,227,-494,202,-530,167,-559,126,-580,80,-593,32,-597,-18,-592,-68,-577,-116,-554,-161,-521,-199,-495,-219,-479,-225", "-215,221,-245,235,-293,245,-343,248,-393,244,-441,231,-485,208,-523,175,-553,135,-576,90,-591,43,-597,-8,-594,-58,-581,-106,-560,-152,-529,-191,-504,-213,-488,-220", "-205,217,-234,232,-283,244,-333,248,-382,246,-431,234,-476,214,-515,183,-548,144,-572,100,-588,53,-596,3,-595,-47,-585,-96,-565,-142,-536,-184,-512,-207,-497,-214", "-195,213,-224,229,-273,242,-322,248,-372,247,-421,238,-467,219,-508,190,-541,152,-567,110,-586,63,-595,14,-596,-36,-588,-86,-570,-133,-543,-175,-520,-200,-505,-207", "-186,209,-214,225,-262,239,-311,247,-361,248,-410,240,-457,224,-499,197,-535,161,-562,119,-582,73,-594,24,-597,-26,-590,-76,-575,-123,-550,-167,-528,-192,-513,-201", "-176,204,-204,222,-252,237,-301,246,-351,248,-400,243,-448,228,-491,204,-528,169,-557,128,-579,83,-592,35,-597,-15,-592,-65,-579,-113,-556,-158,-535,-185,-521,-193", "-167,199,-195,218,-242,234,-290,245,-340,248,-390,244,-438,232,-482,210,-520,178,-552,137,-575,93,-590,46,-597,-4,-594,-55,-582,-103,-561,-149,-542,-176,-528,-186", "-158,194,-185,213,-231,231,-280,243,-329,248,-379,246,-428,235,-473,215,-513,185,-546,146,-570,103,-588,56,-596,6,-595,-44,-586,-93,-567,-140,-549,-168,-535,-178", "-148,189,-175,209,-221,228,-269,241,-319,248,-369,247,-417,238,-464,220,-505,193,-539,155,-566,113,-585,66,-595,17,-596,-33,-589,-83,-571,-130,-555,-159,-541,-169", "-140,183,-166,204,-211,224,-259,239,-308,247,-358,248,-407,241,-455,225,-497,199,-533,164,-561,122,-581,76,-593,28,-597,-22,-591,-72,-576,-120,-561,-150,-547,-161", "-131,178,-156,199,-201,220,-249,236,-298,246,-347,248,-397,243,-445,229,-488,206,-526,172,-556,131,-578,86,-592,38,-597,-12,-593,-62,-580,-110,-566,-141,-553,-152", "-122,171,-147,193,-192,216,-238,233,-287,244,-337,248,-387,245,-435,233,-480,212,-518,180,-550,140,-574,96,-589,49,-596,-1,-595,-51,-583,-100,-571,-131,-558,-143", "-114,165,-138,188,-182,212,-228,230,-277,242,-326,248,-376,246,-425,236,-470,217,-511,188,-544,149,-569,106,-587,59,-596,10,-596,-40,-587,-90,-575,-122,-563,-134", "-106,159,-129,182,-172,207,-218,227,-266,240,-316,247,-365,247,-414,239,-461,222,-503,195,-537,158,-564,116,-584,69,-595,20,-596,-30,-589,-80,-579,-112,-567,-124", "-98,152,-121,176,-163,202,-208,223,-256,238,-305,247,-355,248,-404,242,-452,226,-494,201,-531,166,-559,125,-580,79,-593,31,-597,-19,-592,-69,-583,-101,-571,-115", "-90,145,-112,169,-154,197,-198,219,-246,235,-294,245,-344,248,-394,244,-442,230,-486,208,-523,175,-554,134,-576,89,-591,42,-597,-8,-593,-59,-586,-91,-575,-105", "-82,137,-104,163,-145,192,-189,215,-235,232,-284,244,-334,248,-383,245,-432,234,-477,213,-516,182,-548,143,-572,99,-589,52,-596,2,-595,-48,-589,-81,-578,-95", "-75,130,-96,156,-136,186,-179,210,-225,229,-273,242,-323,248,-373,247,-421,237,-468,219,-508,190,-542,152,-568,109,-586,62,-595,13,-596,-37,-591,-71,-581,-85", "-68,122,-88,149,-127,180,-169,206,-215,226,-263,240,-312,247,-362,248,-411,240,-458,223,-500,197,-535,160,-563,119,-583,72,-594,24,-597,-26,-593,-60,-584,-75", "-61,114,-80,141,-118,174,-160,201,-205,222,-253,237,-302,246,-351,248,-401,242,-449,228,-492,203,-528,169,-558,128,-579,82,-592,34,-597,-16,-595,-49,-586,-65", "-55,106,-73,134,-110,167,-151,195,-195,218,-242,234,-291,245,-341,248,-391,244,-439,232,-483,209,-521,177,-552,137,-575,92,-590,45,-597,-5,-596,-39,-588,-54", "-48,98,-66,126,-101,161,-142,190,-186,214,-232,231,-281,243,-330,248,-380,246,-429,235,-474,215,-514,185,-546,146,-571,102,-588,55,-596,5,-597,-28,-589,-44", "-43,89,-59,118,-93,154,-133,184,-176,209,-222,228,-270,241,-320,248,-369,247,-418,238,-465,220,-506,192,-540,154,-566,112,-585,65,-595,16,-597,-17,-590,-33", "-37,80,-52,110,-86,147,-124,178,-167,204,-212,225,-260,239,-309,247,-359,248,-408,241,-455,225,-498,199,-533,163,-561,121,-582,75,-594,27,-597,-7,-590,-23", "-31,71,-46,101,-78,139,-116,172,-157,199,-202,221,-250,236,-298,246,-348,248,-398,243,-446,229,-489,205,-526,171,-556,130,-578,85,-592,38,-596,4,-590,-13", "-26,62,-40,93,-71,132,-107,165,-148,194,-192,217,-239,234,-288,244,-338,248,-387,245,-436,233,-480,211,-519,179,-550,139,-574,95,-590,48,-595,15,-590,-2", "-22,53,-34,84,-64,124,-99,159,-139,188,-183,212,-229,230,-277,243,-327,248,-377,246,-425,236,-471,217,-511,187,-544,148,-569,105,-587,58,-594,25,-589,8", "-17,43,-28,75,-57,116,-91,152,-130,182,-173,208,-219,227,-267,241,-316,248,-366,247,-415,239,-462,222,-503,194,-538,157,-565,115,-584,68,-592,36,-588,19", "-13,34,-23,65,-50,107,-83,144,-121,176,-164,203,-209,223,-257,238,-306,247,-355,248,-405,242,-452,226,-495,201,-531,165,-560,124,-581,78,-590,47,-587,29", "-10,24,-18,56,-44,99,-76,137,-113,170,-154,198,-199,220,-246,236,-295,245,-345,248,-395,244,-443,230,-486,207,-524,174,-554,133,-577,89,-587,57,-585,39", "-7,14,-14,46,-38,90,-68,129,-105,163,-145,192,-189,215,-236,233,-285,244,-334,248,-384,245,-433,234,-478,213,-517,182,-549,142,-573,99,-584,67,-582,49", "-4,4,-10,37,-32,81,-61,121,-97,156,-136,186,-180,211,-226,229,-274,242,-324,248,-374,247,-422,237,-468,218,-509,189,-542,151,-568,108,-581,77,-580,59", "-1,-6,-6,27,-27,72,-55,113,-89,149,-128,181,-170,206,-216,226,-264,240,-313,247,-363,248,-412,240,-459,223,-501,196,-536,160,-563,118,-577,87,-577,69", "0,-11,-4,22,-24,67,-51,109,-85,146,-123,177,-165,204,-211,224,-259,239,-308,247,-357,248,-407,241,-454,225,-497,200,-532,164,-561,122,-575,92,-575,75", "2,-20,-1,11,-19,58,-45,100,-77,138,-115,171,-156,199,-201,220,-248,236,-297,246,-347,248,-397,243,-444,229,-488,206,-525,172,-555,132,-571,102,-571,85", "4,-30,2,1,-15,48,-39,92,-70,131,-106,165,-147,193,-191,216,-238,233,-287,244,-336,248,-386,245,-434,233,-479,212,-518,180,-550,140,-566,112,-567,94", "5,-40,4,-9,-11,38,-33,83,-63,123,-98,158,-138,188,-182,212,-228,230,-276,242,-326,248,-376,246,-424,237,-470,217,-510,188,-544,149,-561,121,-563,104", "7,-49,6,-18,-7,29,-28,73,-56,115,-90,151,-129,182,-172,207,-218,227,-266,240,-315,247,-365,247,-414,239,-461,222,-502,195,-537,158,-556,130,-558,113", "8,-59,8,-28,-3,18,-23,64,-49,106,-82,143,-120,176,-163,202,-208,223,-256,238,-305,246,-354,248,-404,242,-451,227,-494,202,-530,166,-550,139,-553,122", "9,-70,10,-38,0,8,-18,55,-43,98,-75,136,-112,169,-153,197,-198,219,-245,235,-294,245,-344,248,-393,244,-441,231,-485,208,-523,175,-544,148,-548,131", "10,-80,11,-48,2,-2,-14,45,-37,89,-68,128,-104,163,-144,191,-188,215,-235,232,-283,244,-333,248,-383,245,-431,234,-476,214,-516,183,-538,157,-542,140", "11,-90,12,-58,5,-12,-9,35,-31,80,-61,120,-96,156,-135,186,-179,210,-225,229,-273,242,-323,248,-372,247,-421,237,-467,219,-508,190,-531,165,-536,148", "11,-101,13,-68,7,-21,-6,26,-26,71,-54,112,-88,149,-126,180,-169,206,-215,226,-263,240,-312,247,-362,248,-411,240,-458,224,-500,197,-524,174,-530,157", "12,-111,14,-78,8,-31,-2,15,-21,61,-47,104,-80,141,-118,174,-160,201,-205,222,-252,237,-301,246,-351,248,-401,242,-448,228,-491,204,-517,182,-523,165", "12,-122,15,-89,10,-41,1,5,-17,52,-41,95,-73,134,-109,167,-151,195,-195,218,-242,234,-291,245,-341,248,-390,244,-438,232,-483,210,-509,189,-516,173", "12,-133,16,-99,11,-51,3,-5,-12,42,-35,86,-65,126,-101,160,-141,190,-185,213,-232,231,-280,243,-330,248,-380,246,-428,235,-474,215,-501,196,-509,180", "12,-144,16,-110,13,-61,5,-15,-8,32,-30,77,-58,118,-93,154,-133,184,-176,209,-222,228,-270,241,-319,248,-369,247,-418,238,-464,220,-493,203,-501,187", "12,-156,16,-121,14,-71,7,-24,-5,22,-25,68,-52,109,-85,146,-124,178,-166,204,-212,224,-260,239,-309,247,-358,248,-408,241,-455,225,-484,209,-494,194", "11,-167,17,-132,15,-81,9,-34,-1,12,-20,58,-46,101,-78,139,-115,172,-157,199,-202,221,-249,236,-298,246,-348,248,-398,243,-445,229,-475,214,-485,200", "11,-178,16,-143,15,-92,10,-44,1,2,-15,49,-39,92,-70,131,-107,165,-148,194,-192,216,-239,233,-287,244,-337,248,-387,245,-435,233,-466,220,-477,206", "10,-190,16,-154,16,-103,12,-54,4,-8,-11,39,-34,83,-63,123,-99,158,-139,188,-182,212,-229,230,-277,243,-327,248,-376,246,-425,236,-456,224,-468,211", "9,-200,16,-166,16,-113,13,-64,6,-18,-7,29,-28,74,-56,115,-91,151,-130,182,-173,207,-219,227,-267,240,-316,247,-366,247,-415,239,-447,229,-459,216", "8,-210,15,-177,17,-124,14,-74,8,-27,-4,19,-23,65,-50,107,-83,144,-121,176,-163,202,-209,223,-256,238,-305,247,-355,248,-405,242,-437,232,-450,220", "7,-220,14,-189,17,-135,15,-85,9,-37,-1,9,-18,56,-44,98,-75,137,-113,170,-154,197,-199,219,-246,235,-295,245,-345,248,-394,244,-426,236,-440,224", "6,-230,14,-200,16,-146,16,-95,11,-47,2,-1,-14,46,-38,90,-68,129,-104,163,-145,192,-189,215,-236,233,-284,244,-334,248,-384,245,-416,239,-430,228", "5,-240,13,-209,16,-158,16,-106,12,-57,5,-11,-10,36,-32,81,-61,121,-96,156,-136,186,-179,211,-226,229,-274,242,-323,248,-373,247,-406,241,-420,231", "4,-250,12,-219,16,-169,16,-117,13,-67,6,-20,-6,26,-27,71,-54,113,-88,149,-127,180,-170,206,-216,226,-264,240,-313,247,-362,248,-396,243,-410,234", "2,-260,11,-229,15,-181,17,-128,14,-77,8,-30,-3,16,-21,62,-48,104,-81,142,-119,174,-161,201,-206,222,-253,237,-302,246,-352,248,-385,245,-400,236", "1,-270,9,-239,14,-192,17,-139,15,-88,10,-40,0,6,-17,53,-42,96,-73,134,-110,168,-151,196,-196,218,-243,235,-292,245,-341,248,-375,247,-390,238", "-1,-280,8,-249,13,-203,16,-150,16,-98,11,-50,3,-5,-13,43,-36,87,-66,126,-102,161,-142,190,-186,214,-233,232,-281,243,-331,248,-364,248,-380,239", "-3,-290,7,-259,12,-212,16,-161,16,-109,13,-60,5,-14,-9,33,-30,78,-59,118,-94,154,-133,184,-177,209,-223,228,-271,241,-320,248,-353,248,-369,240", "-5,-301,5,-269,11,-222,15,-173,16,-120,14,-70,7,-23,-5,23,-25,69,-52,110,-86,147,-125,178,-167,204,-213,225,-260,239,-310,247,-343,248,-359,241", "-7,-311,3,-280,10,-232,15,-184,17,-131,15,-80,9,-33,-2,13,-20,59,-46,102,-78,140,-116,172,-158,199,-203,221,-250,237,-299,246,-332,248,-349,242", "-9,-322,2,-290,9,-242,14,-196,16,-142,15,-91,10,-43,1,3,-16,50,-40,93,-71,132,-108,166,-149,194,-193,217,-240,234,-288,244,-322,248,-338,242", "-11,-332,0,-300,8,-252,13,-206,16,-153,16,-102,12,-53,4,-7,-11,40,-34,84,-64,124,-99,159,-139,188,-183,212,-229,231,-278,243,-311,247,-328,241", "-13,-343,-2,-311,6,-262,12,-215,16,-165,16,-112,13,-63,6,-17,-7,30,-29,75,-57,116,-91,152,-131,183,-174,208,-219,227,-268,241,-300,246,-317,241", "-16,-353,-4,-321,5,-273,11,-225,15,-176,17,-123,14,-73,8,-26,-4,20,-23,66,-50,108,-84,145,-122,177,-164,203,-210,224,-257,238,-290,245,-307,240", "-18,-364,-6,-332,3,-283,10,-235,14,-188,17,-134,15,-84,9,-36,-1,10,-19,56,-44,99,-76,137,-113,170,-155,198,-200,220,-247,236,-279,243,-297,239", "-21,-375,-9,-342,1,-293,9,-245,14,-199,16,-146,16,-94,11,-46,2,-1,-14,47,-38,90,-69,129,-105,164,-146,192,-190,216,-237,233,-269,241,-286,237", "-24,-386,-11,-353,-1,-304,7,-255,13,-208,16,-157,16,-105,12,-56,4,-10,-10,37,-32,81,-62,122,-97,157,-137,187,-180,211,-226,230,-259,239,-276,236", "-26,-397,-14,-364,-3,-314,6,-265,12,-218,16,-168,16,-116,13,-66,6,-20,-6,27,-27,72,-55,113,-89,150,-128,181,-171,206,-216,226,-248,236,-266,233", "-29,-408,-16,-375,-5,-324,4,-276,11,-228,15,-180,17,-127,14,-76,8,-29,-3,17,-22,63,-48,105,-81,142,-119,175,-161,201,-207,222,-238,233,-256,231", "-32,-418,-19,-385,-7,-335,2,-286,9,-238,14,-191,17,-138,15,-87,10,-39,0,7,-17,53,-42,96,-74,135,-111,168,-152,196,-197,218,-228,230,-245,228", "-35,-428,-22,-396,-10,-346,1,-296,8,-248,13,-202,16,-149,16,-97,11,-49,3,-4,-13,44,-36,88,-67,127,-103,162,-143,191,-187,214,-218,227,-235,225", "-38,-438,-25,-407,-12,-356,-1,-307,7,-258,12,-211,16,-160,16,-108,13,-59,5,-13,-9,34,-31,79,-60,119,-94,155,-134,185,-177,210,-208,223,-226,222", "-41,-448,-28,-418,-14,-367,-3,-317,5,-269,11,-221,15,-172,16,-119,14,-69,7,-23,-5,24,-25,69,-53,111,-87,148,-125,179,-168,205,-198,219,-216,219", "-44,-457,-31,-428,-17,-378,-6,-328,4,-279,10,-231,15,-183,17,-130,15,-80,9,-32,-2,14,-20,60,-47,102,-79,140,-117,173,-158,200,-188,215,-206,215", "-47,-467,-34,-438,-20,-389,-8,-338,2,-289,9,-241,14,-195,16,-141,15,-90,10,-42,1,4,-16,51,-40,94,-72,133,-108,166,-149,195,-179,210,-196,211", "-50,-477,-36,-448,-23,-400,-10,-349,0,-299,8,-251,13,-205,16,-152,16,-101,12,-52,4,-7,-12,41,-35,85,-64,125,-100,159,-140,189,-169,205,-187,207", "-53,-487,-39,-457,-26,-411,-13,-360,-2,-310,6,-261,12,-214,16,-164,16,-112,13,-62,6,-16,-8,31,-29,76,-58,117,-92,153,-131,183,-160,200,-177,202", "-57,-496,-42,-467,-29,-422,-15,-370,-4,-320,5,-272,11,-224,15,-175,16,-122,14,-72,7,-26,-4,21,-24,66,-51,108,-84,145,-123,177,-150,195,-168,198", "-60,-506,-46,-477,-32,-431,-18,-381,-6,-331,3,-282,10,-234,15,-187,17,-133,15,-83,9,-35,-1,11,-19,57,-45,100,-77,138,-114,171,-141,190,-159,193", "-63,-516,-49,-487,-34,-441,-21,-392,-9,-342,1,-292,9,-244,14,-198,16,-145,15,-93,11,-45,2,0,-15,48,-39,91,-69,130,-106,164,-132,184,-149,188", "-67,-526,-52,-497,-37,-451,-24,-403,-11,-352,-1,-303,7,-254,13,-208,16,-156,16,-104,12,-55,4,-9,-10,38,-33,82,-62,122,-98,157,-124,178,-140,183", "-70,-536,-55,-506,-40,-460,-27,-414,-13,-363,-3,-313,6,-265,12,-218,16,-167,16,-115,13,-65,6,-19,-7,28,-27,73,-55,114,-90,150,-115,172,-131,177", "-74,-546,-59,-516,-43,-470,-30,-425,-16,-374,-5,-324,4,-275,11,-227,15,-179,17,-126,14,-76,8,-28,-3,18,-22,64,-49,106,-82,143,-107,165,-123,171", "-78,-556,-62,-526,-47,-480,-32,-434,-19,-385,-7,-334,3,-285,10,-237,14,-190,17,-137,15,-86,10,-38,0,8,-18,54,-43,97,-74,136,-99,158,-114,166", "-82,-566,-66,-536,-50,-490,-35,-444,-22,-395,-9,-345,1,-295,8,-247,13,-201,16,-148,16,-97,11,-48,3,-3,-13,45,-37,88,-67,128,-91,151,-105,159", "-86,-576,-70,-546,-53,-500,-38,-454,-25,-406,-12,-356,-1,-306,7,-258,13,-211,16,-159,16,-107,12,-58,5,-12,-9,35,-31,79,-60,120,-83,144,-97,153", "-89,-586,-73,-556,-56,-509,-41,-463,-28,-417,-14,-366,-3,-316,5,-268,12,-221,16,-171,16,-118,14,-68,7,-22,-6,25,-26,70,-53,112,-75,137,-89,146", "-93,-596,-77,-566,-60,-519,-44,-473,-31,-428,-17,-377,-5,-327,4,-278,10,-230,15,-182,17,-129,14,-79,9,-31,-2,15,-21,61,-47,103,-68,129,-81,139", "-98,-606,-81,-576,-63,-529,-48,-483,-33,-437,-20,-388,-8,-337,2,-288,9,-240,14,-194,17,-140,15,-89,10,-41,1,4,-16,51,-41,95,-61,121,-73,132", "-102,-616,-85,-586,-67,-539,-51,-493,-36,-447,-23,-399,-10,-348,0,-299,8,-250,13,-204,16,-151,16,-100,12,-51,3,-6,-12,42,-35,86,-54,113,-65,125", "-106,-626,-89,-596,-71,-549,-54,-503,-39,-457,-25,-410,-13,-359,-2,-309,6,-261,12,-214,16,-163,16,-111,13,-61,5,-15,-8,32,-30,77,-48,104,-58,117", "-110,-636,-93,-606,-74,-559,-58,-512,-42,-466,-29,-421,-15,-370,-4,-320,5,-271,11,-224,15,-174,16,-122,14,-72,7,-25,-4,22,-24,67,-42,96,-51,109", "-115,-646,-97,-616,-78,-569,-61,-522,-45,-476,-31,-431,-18,-380,-6,-330,3,-281,10,-233,15,-186,17,-133,15,-82,9,-34,-1,12,-19,58,-36,87,-44,101", "-119,-656,-101,-626,-82,-579,-65,-532,-49,-486,-34,-440,-21,-391,-8,-341,1,-291,9,-243,14,-197,16,-144,15,-92,11,-44,2,1,-15,48,-30,78,-37,93", "-124,-666,-106,-637,-86,-589,-68,-542,-52,-496,-37,-450,-23,-402,-11,-351,0,-302,7,-254,13,-207,16,-155,16,-103,12,-54,4,-9,-11,39,-25,68,-31,84", "-128,-676,-110,-647,-90,-599,-72,-552,-55,-506,-40,-460,-26,-413,-13,-362,-2,-312,6,-264,12,-217,16,-166,16,-114,13,-64,6,-18,-7,29,-20,59,-25,75", "-132,-685,-115,-657,-94,-609,-76,-562,-59,-516,-43,-469,-29,-424,-16,-373,-5,-323,4,-274,11,-227,15,-178,17,-125,14,-75,8,-28,-3,19,-15,50,-19,66", "-137,-695,-119,-667,-98,-619,-79,-572,-62,-525,-46,-479,-32,-434,-19,-384,-7,-333,3,-284,10,-237,14,-189,17,-136,15,-85,10,-37,0,8,-11,40,-14,57", "-141,-704,-123,-677,-103,-630,-83,-582,-66,-535,-50,-489,-35,-443,-21,-395,-9,-344,1,-295,8,-247,14,-200,16,-147,16,-96,11,-47,2,-2,-7,30,-9,47", "-145,-713,-128,-686,-107,-640,-87,-592,-69,-545,-53,-499,-38,-453,-24,-405,-12,-355,-1,-305,7,-257,13,-210,16,-158,16,-106,12,-57,5,-12,-4,20,-4,37", "-150,-723,-132,-695,-111,-650,-91,-602,-73,-555,-56,-509,-41,-463,-27,-416,-14,-365,-3,-315,5,-267,12,-220,16,-170,16,-117,13,-68,7,-21,-1,10,0,27", "-154,-732,-136,-705,-116,-660,-96,-612,-77,-565,-60,-519,-44,-472,-30,-427,-17,-376,-5,-326,4,-277,11,-230,15,-181,17,-128,14,-78,8,-31,2,-1,4,17", "-159,-741,-141,-714,-120,-670,-100,-623,-81,-575,-63,-528,-47,-482,-33,-436,-19,-387,-7,-337,2,-287,9,-240,14,-193,17,-139,15,-88,10,-40,4,-10,7,7", "-164,-751,-145,-723,-125,-680,-104,-633,-85,-585,-67,-538,-51,-492,-36,-446,-22,-398,-10,-347,0,-298,8,-250,13,-203,16,-151,16,-99,11,-50,6,-20,10,-2", "-168,-760,-150,-733,-129,-689,-108,-643,-89,-595,-70,-548,-54,-502,-39,-456,-25,-409,-12,-358,-2,-308,7,-260,12,-213,16,-162,16,-110,13,-60,8,-29,12,-12", "-173,-769,-155,-742,-133,-698,-113,-653,-93,-605,-74,-558,-57,-512,-42,-466,-28,-420,-15,-369,-4,-319,5,-270,11,-223,15,-173,16,-121,14,-71,10,-39,14,-22", "-178,-779,-159,-752,-138,-708,-117,-663,-97,-615,-78,-568,-61,-522,-45,-475,-31,-430,-18,-379,-6,-329,3,-280,10,-233,15,-185,17,-132,15,-81,11,-49,16,-32", "-183,-788,-164,-761,-142,-717,-122,-673,-101,-626,-82,-578,-64,-531,-48,-485,-34,-439,-20,-390,-8,-340,2,-291,9,-243,14,-196,16,-143,15,-92,13,-59,18,-42", "-188,-798,-169,-770,-147,-726,-126,-682,-105,-636,-86,-588,-68,-541,-52,-495,-37,-449,-23,-401,-11,-350,0,-301,8,-253,13,-206,16,-154,16,-102,14,-69,19,-52", "-193,-807,-174,-780,-151,-736,-130,-692,-110,-646,-90,-598,-72,-551,-55,-505,-40,-459,-26,-412,-13,-361,-2,-311,6,-263,12,-216,16,-165,16,-113,15,-80,20,-63", "-198,-816,-179,-789,-156,-745,-135,-701,-114,-656,-94,-608,-75,-561,-58,-515,-43,-469,-29,-423,-16,-372,-4,-322,4,-273,11,-226,15,-177,17,-124,15,-90,21,-74", "-203,-826,-184,-798,-161,-754,-139,-710,-119,-666,-98,-619,-79,-571,-62,-525,-46,-478,-32,-433,-18,-383,-7,-332,3,-283,10,-236,14,-189,17,-135,16,-101,22,-84", "-208,-835,-189,-808,-165,-764,-144,-720,-123,-676,-102,-629,-83,-581,-65,-535,-49,-488,-35,-442,-21,-394,-9,-343,1,-294,9,-246,14,-199,16,-146,16,-112,23,-95", "-214,-844,-194,-817,-170,-773,-148,-729,-127,-685,-107,-639,-87,-591,-69,-544,-53,-498,-38,-452,-24,-405,-11,-354,-1,-304,7,-256,13,-209,16,-157,16,-123,23,-106", "-219,-854,-199,-826,-175,-783,-153,-739,-132,-695,-111,-649,-91,-602,-73,-554,-56,-508,-41,-462,-27,-416,-14,-364,-3,-315,6,-266,12,-219,16,-169,17,-134,24,-117", "-224,-863,-204,-836,-180,-792,-157,-748,-136,-704,-116,-659,-95,-612,-76,-564,-59,-518,-44,-472,-30,-426,-16,-375,-5,-325,4,-276,11,-229,15,-180,16,-145,24,-129", "-230,-872,-209,-845,-185,-801,-162,-757,-141,-713,-120,-669,-99,-622,-80,-574,-63,-528,-47,-481,-33,-436,-19,-386,-7,-336,2,-287,9,-239,14,-192,16,-156,24,-140", "-235,-881,-214,-855,-190,-811,-167,-767,-145,-723,-124,-679,-104,-632,-84,-584,-66,-538,-50,-491,-36,-445,-22,-397,-10,-346,0,-297,8,-249,13,-202,16,-167,23,-151", "-241,-891,-220,-864,-195,-820,-172,-776,-150,-732,-129,-688,-108,-642,-88,-595,-70,-548,-54,-501,-39,-455,-25,-408,-12,-357,-2,-307,7,-259,12,-212,15,-179,23,-163", "-246,-900,-225,-873,-200,-829,-177,-785,-154,-741,-133,-697,-112,-652,-92,-605,-74,-557,-57,-511,-42,-465,-28,-419,-15,-368,-4,-318,5,-269,11,-222,14,-191,23,-175", "-252,-909,-231,-883,-205,-839,-182,-795,-159,-751,-137,-707,-117,-662,-96,-615,-78,-567,-60,-521,-45,-475,-31,-429,-17,-379,-6,-328,3,-279,10,-232,13,-201,22,-185", "-257,-919,-236,-892,-211,-848,-187,-804,-164,-760,-142,-716,-121,-672,-101,-625,-82,-578,-64,-531,-48,-484,-34,-439,-20,-389,-8,-339,2,-290,9,-242,13,-211,21,-195", "-263,-928,-242,-901,-216,-857,-192,-813,-168,-770,-146,-726,-126,-682,-105,-635,-85,-588,-68,-541,-51,-494,-37,-448,-23,-400,-10,-350,0,-300,8,-252,12,-221,20,-205", "-269,-937,-247,-910,-221,-867,-197,-823,-173,-779,-151,-735,-130,-691,-109,-645,-89,-598,-71,-551,-55,-504,-40,-458,-26,-411,-13,-360,-2,-311,6,-262,10,-231,19,-215", "-274,-945,-253,-920,-227,-876,-202,-832,-178,-788,-156,-744,-134,-700,-114,-655,-94,-608,-75,-561,-58,-514,-43,-468,-29,-422,-15,-371,-4,-321,5,-272,9,-241,18,-225", "-280,-954,-259,-929,-232,-885,-207,-842,-183,-798,-160,-754,-139,-710,-118,-665,-98,-618,-79,-571,-61,-524,-46,-478,-32,-432,-18,-382,-6,-332,3,-283,8,-251,17,-235", "-285,-963,-264,-938,-238,-895,-212,-851,-188,-807,-165,-763,-143,-719,-123,-675,-102,-628,-83,-581,-65,-534,-49,-487,-35,-442,-21,-393,-9,-342,1,-293,6,-261,16,-246", "-291,-972,-270,-947,-243,-904,-218,-860,-193,-816,-170,-772,-148,-728,-127,-685,-106,-638,-87,-591,-69,-544,-52,-497,-38,-451,-24,-404,-11,-353,-1,-303,5,-271,14,-256", "-297,-981,-275,-956,-249,-913,-223,-870,-198,-826,-175,-782,-152,-738,-131,-694,-111,-648,-91,-601,-72,-554,-56,-507,-41,-461,-27,-415,-14,-364,-3,-314,3,-281,13,-266", "-303,-989,-281,-964,-255,-923,-229,-879,-203,-835,-180,-791,-157,-747,-136,-703,-115,-658,-95,-611,-76,-564,-59,-517,-44,-471,-30,-425,-16,-374,-5,-324,1,-292,11,-277", "-309,-998,-287,-973,-260,-932,-234,-888,-209,-844,-185,-800,-162,-756,-140,-713,-120,-668,-99,-621,-80,-574,-63,-527,-47,-481,-33,-435,-19,-385,-7,-335,-1,-302,9,-287", "-314,-1007,-293,-982,-266,-941,-240,-898,-214,-854,-190,-810,-167,-766,-145,-722,-124,-678,-103,-631,-84,-584,-66,-537,-50,-490,-35,-445,-22,-396,-9,-345,-3,-312,8,-298", "-320,-1016,-298,-991,-271,-949,-245,-907,-219,-863,-195,-819,-171,-775,-149,-731,-128,-687,-108,-641,-88,-594,-70,-547,-53,-500,-38,-454,-25,-407,-12,-356,-5,-323,6,-308", "-326,-1024,-304,-1000,-277,-958,-251,-916,-225,-872,-200,-829,-176,-785,-154,-741,-133,-697,-112,-651,-92,-604,-74,-557,-57,-510,-41,-464,-28,-418,-14,-367,-7,-333,3,-319", "-332,-1033,-310,-1008,-283,-967,-256,-925,-230,-882,-205,-838,-181,-794,-158,-750,-137,-706,-117,-661,-96,-614,-77,-567,-60,-520,-45,-474,-31,-428,-17,-378,-9,-344,1,-330", "-338,-1042,-316,-1017,-289,-976,-262,-934,-236,-891,-210,-847,-186,-803,-163,-759,-142,-715,-121,-671,-100,-624,-81,-577,-64,-530,-48,-484,-33,-438,-20,-389,-12,-355,-1,-340", "-345,-1050,-322,-1026,-294,-985,-268,-943,-241,-900,-216,-857,-191,-813,-168,-769,-146,-725,-125,-681,-105,-634,-85,-587,-67,-540,-51,-493,-36,-448,-23,-399,-14,-365,-3,-351", "-351,-1059,-328,-1034,-300,-993,-273,-952,-247,-910,-221,-866,-196,-822,-173,-778,-151,-734,-130,-690,-109,-644,-89,-597,-71,-550,-54,-503,-39,-457,-26,-410,-17,-376,-6,-362", "-357,-1068,-334,-1043,-306,-1002,-279,-961,-253,-919,-226,-875,-201,-831,-178,-787,-155,-743,-134,-700,-113,-654,-93,-607,-75,-560,-58,-513,-42,-467,-29,-421,-19,-387,-9,-373", "-363,-1076,-340,-1052,-312,-1011,-285,-970,-258,-928,-232,-885,-207,-841,-183,-797,-160,-753,-138,-709,-118,-664,-97,-617,-78,-570,-61,-523,-46,-477,-32,-431,-22,-398,-11,-384", "-370,-1085,-346,-1060,-318,-1020,-290,-979,-264,-937,-237,-894,-212,-850,-188,-806,-165,-762,-143,-718,-122,-674,-102,-627,-82,-580,-65,-533,-49,-487,-34,-441,-25,-409,-14,-395", "-376,-1093,-353,-1069,-324,-1028,-296,-987,-269,-946,-243,-903,-217,-859,-193,-816,-169,-772,-147,-728,-127,-684,-106,-637,-86,-590,-68,-543,-52,-496,-37,-450,-28,-420,-17,-406", "-382,-1102,-359,-1078,-330,-1037,-302,-996,-275,-955,-249,-913,-223,-869,-198,-825,-174,-781,-152,-737,-131,-693,-110,-647,-90,-600,-72,-553,-55,-506,-40,-460,-31,-430,-20,-416", "-389,-1110,-365,-1086,-336,-1046,-308,-1005,-281,-964,-254,-922,-228,-878,-203,-834,-179,-790,-157,-746,-135,-702,-115,-657,-95,-610,-76,-563,-59,-516,-43,-470,-34,-440,-23,-426", "-395,-1119,-372,-1095,-342,-1054,-314,-1014,-286,-972,-260,-931,-234,-887,-208,-844,-184,-800,-161,-756,-140,-712,-119,-668,-99,-620,-80,-573,-62,-526,-46,-480,-37,-449,-25,-436", "-402,-1127,-378,-1103,-348,-1063,-320,-1022,-292,-981,-265,-940,-239,-897,-214,-853,-189,-809,-166,-765,-144,-721,-124,-677,-103,-630,-84,-583,-66,-536,-50,-490,-40,-459,-28,-445", "-408,-1136,-384,-1112,-355,-1072,-326,-1031,-298,-990,-271,-949,-245,-906,-219,-862,-194,-818,-171,-774,-149,-730,-128,-687,-107,-640,-88,-593,-69,-546,-53,-499,-43,-469,-31,-455", "-415,-1144,-391,-1120,-361,-1080,-332,-1040,-304,-999,-277,-958,-250,-915,-224,-872,-199,-828,-176,-784,-153,-740,-132,-696,-112,-650,-92,-603,-73,-556,-56,-509,-46,-478,-34,-465"]
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfDropSpecialGunFX.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, tween, Animation, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      tween = module.tween;
      Animation = module.Animation;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "ec4b7D1XmhJ3IKUOgO33A2p", "gfDropSpecialGunFX", undefined);

      var ccclass = _decorator.ccclass;
      var gfDropSpecialGunFX = exports('gfDropSpecialGunFX', (_dec = ccclass('gfDropSpecialGunFX'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfDropSpecialGunFX, _Component);

        function gfDropSpecialGunFX() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.endPosition = void 0;
          _this.callBack = void 0;
          _this.deskStation = void 0;
          _this.listAction = void 0;
          return _this;
        }

        var _proto = gfDropSpecialGunFX.prototype;

        _proto.playEffect = function playEffect(data, callBack) {
          var startPos = data.startPos,
              endPos = data.endPos,
              angle = data.angle,
              deskStation = data.deskStation;
          this.endPosition = endPos;
          this.callBack = callBack;
          this.deskStation = deskStation;
          this.node.setPosition(startPos);
          this.node.angle = angle;
          this.listAction = tween(this.node);
          this.listAction.then(this.onDrop());
          this.listAction.then(this.onFly());
          this.listAction.then(this.onFinish());
          this.listAction.then(this.onAutoDestroy());
          this.listAction.start();
        };

        _proto.onDrop = function onDrop() {
          var _this2 = this;

          return tween().call(function () {
            var anim = _this2.node.getComponent(Animation);

            anim.play('AnimShowDrop');
          }).delay(.98);
        };

        _proto.onFly = function onFly() {
          return tween().to(1, {
            position: this.endPosition
          }).delay(.58);
        };

        _proto.onFinish = function onFinish() {
          var _this3 = this;

          return tween().call(function () {
            _this3.node.parent.removeChild(_this3.node);

            typeof _this3.callBack === 'function' && _this3.callBack(_this3);
          });
        };

        _proto.onAutoDestroy = function onAutoDestroy() {
          var _this4 = this;

          return tween().call(function () {
            _this4.node.removeFromParent();

            _this4.node.destroy();
          });
        };

        return gfDropSpecialGunFX;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfEffectDragon.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfUtilities.ts', './gfBaseEvents.ts', './gfPoolManager.ts', './gfBaseConfig.ts', './gfReferenceManager.ts', './gfEventEmitter.ts', './utils.ts', './gfDataStore.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, UITransform, instantiate, isValid, Component, registerEvent, SetZIndex, removeEvents, gfBaseEvents, gfPoolManager, gfBaseConfig, gfReferenceManager, gfEventEmitter, getPostionInOtherNode, gfDataStore;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      UITransform = module.UITransform;
      instantiate = module.instantiate;
      isValid = module.isValid;
      Component = module.Component;
    }, function (module) {
      registerEvent = module.registerEvent;
      SetZIndex = module.SetZIndex;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfPoolManager = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      getPostionInOtherNode = module.getPostionInOtherNode;
    }, function (module) {
      gfDataStore = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "93b13lotKtOj6+NH+FDVxEc", "gfEffectDragon", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfEffectDragon = exports('GfEffectDragon', (_dec = ccclass('GfEffectDragon'), _dec2 = property(Prefab), _dec3 = property(Prefab), _dec4 = property(Prefab), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfEffectDragon, _Component);

        function GfEffectDragon() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "dragonDieSmallExplosionPrefab", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "jackpotStarPrefab", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "jackpotWinAmountPopup", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "cutSceneName", _descriptor4, _assertThisInitialized(_this));

          _this.effectLayer = void 0;
          _this.endData = void 0;
          _this.jackpotStarFX = void 0;
          _this.JPWinPopup = void 0;
          _this.needUpdateWallet = void 0;
          _this._ballList = [];
          _this._ballDropping = void 0;
          _this._bigWinPlaying = void 0;
          return _this;
        }

        var _proto = GfEffectDragon.prototype;

        _proto.onLoad = function onLoad() {
          this.initEvents();
          this.effectLayer = this.node.getComponent('gfEffectLayer');

          for (var i = 0; i < 4; ++i) {
            this._ballList[i] = [];
          }
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.GAME_LAYER.ON_ENTER_GAME_ROOM, this.onRefresh, this);
          registerEvent(gfBaseEvents.DRAGON.BIG_EXPLOSION, this.dragonDieBigExplosion, this);
          registerEvent(gfBaseEvents.DRAGON.SMALL_EXPLOSION, this.dragonDieSmallExplosion, this);
          registerEvent(gfBaseEvents.DRAGON.DROP_BALL, this.dragonDropBall, this);
          registerEvent(gfBaseEvents.DRAGON.PLAY_DRAGON_BALL_JACKPOT, this.playDragonBallJackpot, this);
          registerEvent(gfBaseEvents.DRAGON.DONE_BALL_DROP, this.onBallDropDone, this);
          registerEvent(gfBaseEvents.DRAGON.ON_END, this.onDragonEnd, this);
          registerEvent(gfBaseEvents.DRAGON.DONE_JACKPOT_STAR, this.playDragonBallBigWin, this);
          registerEvent(gfBaseEvents.DRAGON.ADD_BALL_TO_PLAYER, this.addBallToPlayer, this);
          registerEvent(gfBaseEvents.DRAGON.DONE_PLAYER_BIGWIN, this.onDonePlayerBigWin, this);
          registerEvent(gfBaseEvents.DRAGON.SHOW_JACKPOT_WINAMOUNT, this.onJackpotStarDone, this);
          registerEvent(gfBaseEvents.DRAGON.JACKPOT_WINAMOUNT_POPUP_CLOSE, this.updatePlayerWallet, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.REMOVE_BALL, this.removeAllBallsUser, this);
          registerEvent(gfBaseEvents.DRAGON.WARNING, this.onDragonWarning, this);
        } //
        ;

        _proto.dragonDieBigExplosion = function dragonDieBigExplosion(position) {
          var JPExplostion = gfPoolManager.instance.createBigExplosion({
            position: this.node.getComponent(UITransform).convertToNodeSpaceAR(position)
          });
          SetZIndex(JPExplostion, gfBaseConfig.instance.Z_INDEX.POPUP + 10);
        };

        _proto.dragonDieSmallExplosion = function dragonDieSmallExplosion(positions) {
          var _this2 = this;

          positions.forEach(function (pos, i) {
            _this2.scheduleOnce(function () {
              var explosion = instantiate(_this2.dragonDieSmallExplosionPrefab);
              explosion.parent = _this2.node;
              explosion.position = _this2.node.getComponent(UITransform).convertToNodeSpaceAR(pos);
            }, i * 0.15);
          });
        };

        _proto.dragonDropBall = function dragonDropBall(data) {
          var _this3 = this;

          var dragonPosition = this.node.getComponent(UITransform).convertToNodeSpaceAR(data.position);
          data.forEach(function (d) {
            var player = gfReferenceManager.instance.getPlayerByDeskStation(d.DeskStation);
            var playerIndex = player.index;
            var playerBallCount = _this3._ballList[playerIndex].length;

            for (var i = playerBallCount; i < d.Balls; ++i) {
              var ball = gfPoolManager.instance.getDragonBall(i);
              ball.node.parent = _this3.node;
              ball.dropToPlayer(dragonPosition, player.getBallHolder(i), d.DeskStation);

              _this3._ballList[playerIndex].push(ball);

              ++_this3._ballDropping;
            }
          });
        };

        _proto.addBallToPlayer = function addBallToPlayer(_ref) {
          var ballCount = _ref.ballCount,
              playerIndex = _ref.playerIndex;
          var player = gfReferenceManager.instance.getPlayerByIndex(playerIndex);

          for (var i = this._ballList[playerIndex].length; i < ballCount; ++i) {
            var ball = gfPoolManager.instance.getDragonBall(i);
            ball.addToPlayer(player.getBallHolder(i));

            this._ballList[playerIndex].push(ball);
          }
        };

        _proto.onDragonEnd = function onDragonEnd(data) {
          var _this4 = this;

          this.endData = data;

          if (data.wonJackpot) {
            this.endData.jackpotAmount = this.getJackpotWinAmount();
          }

          data.Result.forEach(function (result) {
            var player = gfReferenceManager.instance.getPlayerByDeskStation(result.DeskStation);

            if (player.isMe) {
              player.addGoldReward(result.WinAmount);

              if (result.DeskStation === _this4.endData.DeskStation) {
                _this4.needUpdateWallet = true;
              }
            }
          });

          if (data.Result && this._ballDropping === 0) {
            this.playDragonEndEffect();
          }
        };

        _proto.onBallDropDone = function onBallDropDone() {
          --this._ballDropping;

          if (this._ballDropping === 0) {
            if (this.endData) {
              this.playDragonEndEffect();
            }
          }
        };

        _proto.playDragonEndEffect = function playDragonEndEffect() {
          if (this.endData.wonJackpot) {
            var player = gfReferenceManager.instance.getPlayerByDeskStation(this.endData.DeskStation);

            if (player && player.isMe) {
              gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.ADD_ANIM_TO_QUEUE_ANIM, "JACKPOT", this.endData);
            } else {
              this.playDragonBallJackpot();
            }
          } else {
            this.playDragonBallBigWin();
          }
        };

        _proto.playDragonBallJackpot = function playDragonBallJackpot() {
          var player = gfReferenceManager.instance.getPlayerByDeskStation(this.endData.DeskStation);

          if (player.isActive()) {
            this.jackpotStarFX = instantiate(this.jackpotStarPrefab);
            this.jackpotStarFX.parent = this.node;
            var ballList = this._ballList[player.index];
            this.jackpotStarFX.getComponent('gfJackpotStarFX').playAnimation(ballList);
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.COLLECT_BALL);
          } else {
            this.playDragonBallBigWin();
          }
        };

        _proto.playWheelDragonBallsJackpot = function playWheelDragonBallsJackpot(deskStation, winAmount) {
          var playerIndex = gfReferenceManager.instance.getPlayerByDeskStation(deskStation).index;

          var wheel = this.effectLayer._getWheel(playerIndex);

          wheel.showDragonBallsJackpot({
            winValue: winAmount
          });
        };

        _proto.playDragonBallBigWin = function playDragonBallBigWin() {
          var _this5 = this;

          this.endData.Result.forEach(function (result) {
            var player = gfReferenceManager.instance.getPlayerByDeskStation(result.DeskStation);

            if (player.isActive()) {
              if (result.DeskStation === _this5.endData.DeskStation) {
                if (!player.isMe) {
                  _this5.playWheelDragonBallsJackpot(result.DeskStation, result.WinAmount);
                }
              } else if (result.WinAmount) {
                _this5.playWheelDragonBallsWin(result.DeskStation, result.WinAmount);
              }
            }
          });
          this.onFinishState();
        };

        _proto.playWheelDragonBallsWin = function playWheelDragonBallsWin(deskStation, winValue) {
          var playerIndex = gfReferenceManager.instance.getPlayerByDeskStation(deskStation).index;
          var ballList = this._ballList[playerIndex];
          if (!ballList || ballList.length <= 0) return;
          ++this._bigWinPlaying;
          var isValidBall = true;

          var wheel = this.effectLayer._getWheel(playerIndex);

          for (var i = 0; i < ballList.length; i++) {
            var ball = ballList[i];
            var pos = getPostionInOtherNode(this.node, ball.node);

            if (!ball.node.parent) {
              isValidBall = false;
              break;
            }

            ball.node.setParent(this.node);
            ball.node.active = true;
            ball.node.position = pos;
            var destination = getPostionInOtherNode(this.node, wheel.node);
            ball.moveToBigWinEffect({
              ballIndex: i,
              position: destination,
              playerIndex: playerIndex
            });
          }

          if (isValidBall) {
            wheel.showDragonBalls({
              winValue: winValue,
              ballCount: ballList.length
            });
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.DRAGON_BALL_REWARD);
          }

          ballList.length = 0;
        };

        _proto.onJackpotStarDone = function onJackpotStarDone() {
          var player = gfReferenceManager.instance.getPlayerByDeskStation(this.endData.DeskStation);

          if (player.isMe) {
            this.showJPBoss();
          }
        };

        _proto.getJackpotWinAmount = function getJackpotWinAmount() {
          for (var i = 0; i < this.endData.Result.length; ++i) {
            var result = this.endData.Result[i];

            if (result.DeskStation === this.endData.DeskStation) {
              return result.WinAmount;
            }
          }

          return 0;
        };

        _proto.showJPBoss = function showJPBoss() {
          if (this.cutSceneName !== '') {
            gfEventEmitter.instance.emit(gfBaseEvents.CUT_SCENE.SHOW_CUT_SCENE, this.cutSceneName, this.endData);
          } else {
            this.JPWinPopup = instantiate(this.jackpotWinAmountPopup);
            this.JPWinPopup.getComponent('gfJackpotWinPopup').setWinValue(this.endData.jackpotAmount);
            this.JPWinPopup.parent = this.node;
            this.JPWinPopup.zIndex = gfBaseConfig.instance.Z_INDEX.POPUP + 11;
          }
        };

        _proto.updatePlayerWallet = function updatePlayerWallet() {
          if (this.endData) {
            var player = gfReferenceManager.instance.getPlayerByDeskStation(this.endData.DeskStation);

            if (player && player.isMe) {
              player.addToDisplayWallet(this.endData.jackpotAmount);
            }
          }

          this.needUpdateWallet = false;
          this.onFinishState();
        };

        _proto.onDonePlayerBigWin = function onDonePlayerBigWin() {
          --this._bigWinPlaying;
          this.onFinishState();
        };

        _proto.onFinishState = function onFinishState() {
          if (this._bigWinPlaying > 0 || this.needUpdateWallet) return;
          this.onRefresh();
          gfEventEmitter.instance.emit(gfBaseEvents.DRAGON.DONE_ALL_BIGWIN);
        };

        _proto.removeAllBalls = function removeAllBalls() {
          this._ballList.forEach(function (arr) {
            arr.forEach(function (ball) {
              ball.returnPool();
            });
            arr.length = 0;
          });

          this._ballDropping = 0;
        };

        _proto.removeAllBallsUser = function removeAllBallsUser(data) {
          var _this6 = this;

          var player = gfReferenceManager.instance.getPlayerByDeskStation(data.DeskStation);
          var ballList = this._ballList[player.index];
          this._ballList[player.index] = [];
          ballList.forEach(function (ball) {
            if (ball.isDropping()) {
              _this6.onBallDropDone();
            }

            if (!ball.isInJackpotStar()) {
              ball.returnPool();
            }
          });
        };

        _proto.onDragonWarning = function onDragonWarning() {
          gfEventEmitter.instance.emit(gfBaseEvents.CUT_SCENE.HIDE_CUT_SCENE, this.cutSceneName);
        };

        _proto.removeAllEffects = function removeAllEffects() {
          if (this.jackpotStarFX) {
            if (isValid(this.jackpotStarFX)) {
              this.jackpotStarFX.destroy();
            }

            this.jackpotStarFX = null;
          }

          if (this.cutSceneName !== '') {
            gfEventEmitter.instance.emit(gfBaseEvents.CUT_SCENE.HIDE_CUT_SCENE, this.cutSceneName);
          } else if (this.JPWinPopup) {
            if (isValid(this.JPWinPopup)) {
              this.JPWinPopup.destroy();
            }

            this.JPWinPopup = null;
          }
        };

        _proto.onRefresh = function onRefresh() {
          this.removeAllBalls();
          this.removeAllEffects();
          this.endData = null;
          this.unscheduleAllCallbacks();
        };

        _proto.getMyTotalBall = function getMyTotalBall() {
          return this.getTotalBallOfUser(gfDataStore.instance.getSelfDeskStation());
        };

        _proto.getTotalBallOfUser = function getTotalBallOfUser(deskStation) {
          var player = gfReferenceManager.instance.getPlayerByDeskStation(deskStation);

          if (player) {
            return this._ballList[player.index].length;
          }

          return 0;
        };

        _proto.onDestroy = function onDestroy() {
          this.unscheduleAllCallbacks();
          removeEvents(this);
        };

        return GfEffectDragon;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "dragonDieSmallExplosionPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "jackpotStarPrefab", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "jackpotWinAmountPopup", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "cutSceneName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfEffectEvent.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfReferenceManager.ts', './gfEventEmitter.ts', './gfUtilities.ts', './gfBaseEvents.ts', './gfFishManager.ts', './gfDataStore.ts', './gfEventWinWheel.ts', './gfActionHelper.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, instantiate, UITransform, isValid, Component, gfReferenceManager, gfEventEmitter, registerEvent, removeEvents, gfBaseEvents, gfFishManager, gfDataStore, gfEventWinWheel, stopAllActions;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      instantiate = module.instantiate;
      UITransform = module.UITransform;
      isValid = module.isValid;
      Component = module.Component;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfFishManager = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfEventWinWheel = module.gfEventWinWheel;
    }, function (module) {
      stopAllActions = module.stopAllActions;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "893a9lAa8lEsL6iurnP47ur", "gfEffectEvent", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfEffectEvent = exports('gfEffectEvent', (_dec = ccclass('gfEffectEvent'), _dec2 = property(gfEventWinWheel), _dec3 = property(Prefab), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfEffectEvent, _Component);

        function gfEffectEvent() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "eventWinWheels", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "eventItemFX", _descriptor2, _assertThisInitialized(_this));

          _this._listFXItem = [];
          _this.effectLayer = null;
          return _this;
        }

        var _proto = gfEffectEvent.prototype;

        _proto.onLoad = function onLoad() {
          this.initEvents();
          this.effectLayer = this.node.getComponent('gfEffectLayer');

          for (var i = 0; i < 4; ++i) {
            this._listFXItem[i] = [];
          }
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.EFFECT_LAYER.PLAY_EFFECT_EVENT_WIN, this.playEffectEventWin, this);
          registerEvent(gfBaseEvents.EFFECT_LAYER.REMOVE_EVENT_EFFECT_PLAYER, this.removeEventEffectOfPlayer, this);
          registerEvent(gfBaseEvents.GAME_LAYER.UPDATE_EVENT_TRAY, this.playEventTrayFX, this);
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.resetOnExit, this);
          registerEvent(gfBaseEvents.GAME_LAYER.ON_ENTER_GAME_ROOM, this.resetOnExit, this);
          registerEvent(gfBaseEvents.EVENT.UPDATE_EVENT_STATUS, this.onUpdateStatusEvent, this);
        };

        _proto.onUpdateStatusEvent = function onUpdateStatusEvent(data) {
          var EventStartTime = data.EventStartTime,
              EventEndTime = data.EventEndTime;

          if (gfDataStore.instance.getTime() < EventStartTime || gfDataStore.instance.getTime() > EventEndTime) {
            this.resetOnExit();
          }
        };

        _proto.playEventTrayFX = function playEventTrayFX(data) {
          var _this2 = this;

          if (data.ItemID == 0) return;
          var fish = gfFishManager.instance.getFishById(data.FishID);
          var player = gfReferenceManager.instance.getPlayerByDeskStation(data.DeskStation);
          var eventTray = gfReferenceManager.instance.getEventTrayByDeskStation(data.DeskStation);

          if (fish && player && eventTray) {
            if (player.isMe && data.GoldReward > 0) {
              player.addGoldReward(data.GoldReward);
            }

            var eventItem = instantiate(this.eventItemFX);
            if (!eventItem) return;
            var startPos = fish.getLockPositionByNodeSpace(this.node);
            var endPos = this.node.getComponent(UITransform).convertToNodeSpaceAR(eventTray.getPositionByWorldSpace(data.ItemID));
            var dataInfo = {
              startPos: startPos,
              endPos: endPos,
              data: data
            };
            this.node.addChild(eventItem);

            this._listFXItem[player.index].push(eventItem);

            eventItem.playAnimation(dataInfo, function () {
              eventTray.updateTray(data.listItem);

              if (data.GoldReward > 0) {
                if (player.isMe) {
                  gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.ADD_ANIM_TO_QUEUE_ANIM, "EVENT", data);
                } else {
                  _this2.playEffectEventWin(data);
                }
              }
            });
          }
        };

        _proto.playEffectEventWin = function playEffectEventWin(data) {
          var player = gfReferenceManager.instance.getPlayerByDeskStation(data.DeskStation);
          var eventTray = gfReferenceManager.instance.getEventTrayByDeskStation(data.DeskStation);

          if (player && eventTray) {
            if (player.isMe) {
              eventTray.reset();
              gfEventEmitter.instance.emit(gfBaseEvents.CUT_SCENE.SHOW_CUT_SCENE, "CutSceneWinEvent", data, function () {
                gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.CHECK_QUEUE_ANIM);
                player.addToDisplayWallet(data.GoldReward);
              });
            } else {
              eventTray.reset();
              this.eventWinWheels[player.index].playAnimation(data, function () {});
            }
          }
        };

        _proto.removeEventEffectOfPlayer = function removeEventEffectOfPlayer(data) {
          var player = gfReferenceManager.instance.getPlayerByDeskStation(data.DeskStation);
          var listFXItem = this._listFXItem[player.index];
          listFXItem.forEach(function (item) {
            stopAllActions(item);

            if (isValid(item)) {
              item.destroy();
            }
          });
          listFXItem.length = 0;
        };

        _proto.resetOnExit = function resetOnExit() {
          this.unscheduleAllCallbacks();

          this._listFXItem.forEach(function (arr) {
            arr.forEach(function (item) {
              stopAllActions(item);

              if (isValid(item)) {
                item.destroy();
              }
            });
            arr.length = 0;
          });
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return gfEffectEvent;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "eventWinWheels", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "eventItemFX", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfEffectLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfEventEmitter.ts', './gfBaseEvents.ts', './gfBaseConfig.ts', './gfReferenceManager.ts', './gfUtilities.ts', './gfActionHelper.ts', './utils.ts', './gfBigWinWheel.ts', './gfPoolManager.ts', './gf3DParticle.ts', './gfDropSpecialGunFX.ts', './gfDataStore.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, instantiate, v3, tween, UITransform, misc, v2, Vec3, Tween, isValid, Component, gfEventEmitter, gfBaseEvents, gfBaseConfig, gfReferenceManager, SetZIndex, registerEvent, randomBetween, formatCoin, removeEvents, fadeOut, stopAllActions, v3f, fadeIn, moveTo, bezierTo, getPostionInOtherNode, getRandomInt, gfBigWinWheel, gfPoolManager, gf3DParticle, gfDropSpecialGunFX, gfDataStore;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      instantiate = module.instantiate;
      v3 = module.v3;
      tween = module.tween;
      UITransform = module.UITransform;
      misc = module.misc;
      v2 = module.v2;
      Vec3 = module.Vec3;
      Tween = module.Tween;
      isValid = module.isValid;
      Component = module.Component;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      SetZIndex = module.SetZIndex;
      registerEvent = module.registerEvent;
      randomBetween = module.randomBetween;
      formatCoin = module.formatCoin;
      removeEvents = module.removeEvents;
    }, function (module) {
      fadeOut = module.fadeOut;
      stopAllActions = module.stopAllActions;
      v3f = module.v3f;
      fadeIn = module.fadeIn;
      moveTo = module.moveTo;
      bezierTo = module.bezierTo;
    }, function (module) {
      getPostionInOtherNode = module.getPostionInOtherNode;
      getRandomInt = module.getRandomInt;
    }, function (module) {
      gfBigWinWheel = module.gfBigWinWheel;
    }, function (module) {
      gfPoolManager = module.default;
    }, function (module) {
      gf3DParticle = module.gf3DParticle;
    }, function (module) {
      gfDropSpecialGunFX = module.gfDropSpecialGunFX;
    }, function (module) {
      gfDataStore = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "13172rHP5NI1ZQsel6vXYj6", "gfEffectLayer", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfEffectLayer = exports('gfEffectLayer', (_dec = ccclass('gfEffectLayer'), _dec2 = property(Prefab), _dec3 = property(gfBigWinWheel), _dec4 = property(Prefab), _dec5 = property(Prefab), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfEffectLayer, _Component);

        function gfEffectLayer() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "particle3D", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bigWinWheels", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "itemLaser", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "itemBomb", _descriptor4, _assertThisInitialized(_this));

          _this._listSkillItem = [];
          _this._lisParticle = [];
          _this._queueAnim = [];
          _this._playingQueueAnim = false;
          _this._flyingSkill = 0;
          return _this;
        }

        var _proto = gfEffectLayer.prototype;

        _proto.onLoad = function onLoad() {
          gfReferenceManager.instance.setData({
            EffectLayer: this.node
          });
          this.initEvents();

          for (var i = 0; i < this.bigWinWheels.length; i++) {
            var itemComp = this.bigWinWheels[i];
            itemComp.node.active = false;
            SetZIndex(itemComp.node.parent, gfBaseConfig.instance.Z_INDEX.BIGWIN);
            itemComp.index = i;
          }

          this._lisParticle.length = 0;
          this._listSkillItem.length = 0;
          this.getTotalFlyingItems = this.getTotalFlyingItems.bind(this);
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.PLAYER_LAYER.PLAYER_LEAVE_BOARD, this.userExitBoard, this);
          registerEvent(gfBaseEvents.GAME_LAYER.BULLET_COLLIDE_FISH, this.playNetFX, this);
          registerEvent(gfBaseEvents.GAME_LAYER.ON_PLAY_NETFX, this.playNetFX, this);
          registerEvent(gfBaseEvents.EFFECT_LAYER.PLAY_REWARD_EFFECT, this.playCoinReward, this);
          registerEvent(gfBaseEvents.EFFECT_LAYER.DROP_GUN_LASER, this.playDropGunLaser, this);
          registerEvent(gfBaseEvents.EFFECT_LAYER.CLEAR_DROP_GUN_LASER, this.clearDropGunLaserByDeskStation, this);
          registerEvent(gfBaseEvents.EFFECT_LAYER.PLAY_BIG_WIN_EFFECT, this.onPlayEffectWinInCatchFish, this);
          registerEvent(gfBaseEvents.EFFECT_LAYER.TRIGGER_BOMB, this.triggerBombFX, this);
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.resetOnExit, this);
          registerEvent(gfBaseEvents.GAME_LAYER.ON_ENTER_GAME_ROOM, this.resetOnExit, this);
          registerEvent(gfBaseEvents.GAME_LAYER.CATCH_FISH_BY_SKILL, this.playEffectFishSpecial, this);
          registerEvent(gfBaseEvents.EFFECT_LAYER.ADD_ANIM_TO_QUEUE_ANIM, this.addAnimToQueueAnim, this);
          registerEvent(gfBaseEvents.EFFECT_LAYER.CHECK_QUEUE_ANIM, this.checkQueueAnim, this);
          registerEvent(gfBaseEvents.DRAGON.BALL_ENTER_BIGWIN_WHEEL, this.onBallEnter, this);
          registerEvent(gfBaseEvents.GAME_LAYER.FREEZE_EFFECT_ITEM, this.effectItemFreeze, this);
        };

        _proto.playNetFX = function playNetFX(data) {
          var netFX = gfPoolManager.instance.getNetFX(data);

          if (netFX) {
            netFX.node.setParent(this.node);
            netFX.node.position = getPostionInOtherNode(this.node, data.bullet.node);
          }
        };

        _proto._playBigWinEffect = function _playBigWinEffect(data) {
          var _this2 = this;

          var deskStation = data.deskStation,
              beganPos = data.beganPos,
              gold = data.gold,
              bet = data.bet,
              isSkill = data.isSkill,
              fishKind = data.fishKind;

          if (gold === 0) {
            return;
          }

          var player = gfReferenceManager.instance.getPlayerByDeskStation(deskStation);
          var endPos = getPostionInOtherNode(this.node, player.avatar.node);
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.EFFECT_BOMB);
          var particle = instantiate(this.particle3D).getComponent(gf3DParticle);
          particle.node.parent = this.node;
          SetZIndex(particle.node, gfBaseConfig.instance.Z_INDEX.COIN);

          this._lisParticle.push(particle.node);

          particle.node.position = v3(beganPos.x, beganPos.y, 0);
          particle.setIsMe(player.isMe);
          particle.setLifetime(0.22);
          particle.setSpawnRate(8);
          particle.setItemSpeed(450, 650);
          particle.setGravity(-200);
          particle.setSpawnInterval(0.2);
          particle.setDuration(0.25);
          particle.startAnimation();
          tween(particle.node).delay(0.65).then(fadeOut(0.4)).removeSelf().call(function () {
            particle.stopAnimation();
            stopAllActions(particle.node);
            particle.node.destroy();

            var index = _this2._lisParticle.indexOf(particle.node);

            if (index >= 0) {
              _this2._lisParticle.splice(index, 1);
            }
          }).start();
          gfPoolManager.instance.createBigExplosion({
            position: beganPos
          }); // eslint-disable-next-line prefer-object-spread

          var labelPosition = Object.assign({}, beganPos);
          var playBigWin = !this._getWheel(player.index).isShowingDragonBall();

          this._playCoinLabelEffect({
            goldReward: gold,
            bulletMultiple: bet,
            labelPosition: labelPosition,
            beganPos: beganPos,
            endPos: endPos,
            isSkill: isSkill,
            isMe: player.isMe,
            deskStation: deskStation,
            playBigWin: playBigWin,
            skipUpdateWallet: playBigWin
          });

          this.onPlayEffectWinInCatchFish({
            player: player,
            gold: gold,
            bet: bet,
            fishKind: fishKind
          });
        };

        _proto.onBallEnter = function onBallEnter(playerIndex) {
          var wheel = this._getWheel(playerIndex);

          var player = gfReferenceManager.instance.getPlayerByIndex(playerIndex);

          if (wheel && player.isActive()) {
            wheel.onBallEnter();
          }
        };

        _proto.onPlayEffectWinInCatchFish = function onPlayEffectWinInCatchFish(data) {
          var player = data.player,
              gold = data.gold,
              bet = data.bet,
              fishKind = data.fishKind;
          if (!player.isActive()) return;

          var wheel = this._getWheel(player.index);

          if (wheel && !wheel.isShowingDragonBall()) {
            wheel.showAnimation({
              gold: gold,
              bet: bet,
              isMe: player.isMe,
              fishKind: fishKind
            });
          }
        };

        _proto._getWheel = function _getWheel(idx) {
          if (this.bigWinWheels[idx]) {
            return this.bigWinWheels[idx];
          }

          return null;
        };

        _proto.getRandomPositionOutScreen = function getRandomPositionOutScreen() {
          var SceneBox = gfBaseConfig.instance.SceneBox;
          var x = [SceneBox.Left, SceneBox.Right][randomBetween(0, 1)];
          var y = randomBetween(SceneBox.Bottom + 100, SceneBox.Top - 100);
          return this.node.getComponent(UITransform).convertToNodeSpaceAR(gfReferenceManager.instance.getNodeFishLayer().getComponent(UITransform).convertToWorldSpaceAR(v3(x, y, 0)));
        };

        _proto.getRandomPositionOutScreenByLaser = function getRandomPositionOutScreenByLaser(data) {
          var player = gfReferenceManager.instance.getPlayerByDeskStation(data.DeskStation);
          var rad = misc.degreesToRadians(player.getGunAngle());
          var x = Math.cos(rad) * 2060 + player.node.position.x;
          var y = Math.sin(rad) * 2060 + player.node.position.y;
          return this.node.getComponent(UITransform).convertToNodeSpaceAR(gfReferenceManager.instance.getNodeFishLayer().getComponent(UITransform).convertToWorldSpaceAR(v2(x, y)));
        };

        _proto.playCoinReward = function playCoinReward(rewardData) {
          var data = rewardData.data,
              fishPos = rewardData.fishPos,
              fishKind = rewardData.fishKind;

          if (fishPos) {
            fishPos = this.node.getComponent(UITransform).convertToNodeSpaceAR(fishPos);
          } else if (data.skillID === gfBaseConfig.instance.SkillConfig.LASER) {
            fishPos = this.getRandomPositionOutScreenByLaser(data);
          } else {
            fishPos = this.getRandomPositionOutScreen();
          }

          var isBigwin = data.GoldReward >= data.BulletMultiple * gfBaseConfig.instance.BIG_WIN_RATIO.BIG_WIN_VALUE;

          if (isBigwin && !data.isSkill && !data.skipUpdateWallet) {
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHAKE_SCREEN, {
              timeOneStep: 0.05,
              amplitude: 10
            });

            this._playBigWinEffect({
              deskStation: data.DeskStation,
              beganPos: fishPos,
              gold: data.GoldReward,
              bet: data.BulletMultiple,
              isSkill: data.isSkill,
              fishKind: fishKind
            });
          } else {
            var skipUpdateWallet = data.skipUpdateWallet;

            if (!skipUpdateWallet && data.isSkill) {
              var player = gfReferenceManager.instance.getPlayerByDeskStation(data.DeskStation);
              skipUpdateWallet = !this._getWheel(player.index).isShowingDragonBall();
            }

            this._playCoinEffect({
              deskStation: data.DeskStation,
              fishKind: fishKind,
              beganPos: fishPos,
              goldReward: data.GoldReward,
              isSkill: data.isSkill,
              bulletMultiple: data.BulletMultiple,
              skipUpdateWallet: skipUpdateWallet
            });
          }
        };

        _proto._playCoinLabelEffect = function _playCoinLabelEffect(data) {
          var _this3 = this;

          var goldReward = data.goldReward,
              labelPosition = data.labelPosition,
              isMe = data.isMe;
          var label = gfPoolManager.instance.getLabelCoin(isMe);
          this.node.addChild(label.node);
          label.setString("+" + formatCoin(goldReward));
          label.node.setPosition(labelPosition.x, labelPosition.y, gfBaseConfig.instance.Z_INDEX.COIN_LABEL);
          SetZIndex(label.node, gfBaseConfig.instance.Z_INDEX.COIN_LABEL);
          label.node.scale = v3f(1.5);
          tween(label.node).to(0.2, {
            scale: v3f(1)
          }).to(0.1, {
            scale: v3f(1.5)
          }).to(0.1, {
            scale: v3f(1)
          }).delay(0.5).call(function () {
            _this3._playCoinAnim(data);
          }).to(0.25, {
            scale: v3f(0)
          }).call(function () {
            label.returnPool();
          }).start();
        };

        _proto._playCoinEffect = function _playCoinEffect(data) {
          var _this4 = this;

          var deskStation = data.deskStation,
              fishKind = data.fishKind,
              beganPos = data.beganPos,
              goldReward = data.goldReward,
              isSkill = data.isSkill,
              bulletMultiple = data.bulletMultiple,
              skipUpdateWallet = data.skipUpdateWallet;

          if (goldReward === 0) {
            return;
          }

          var player = gfReferenceManager.instance.getPlayerByDeskStation(deskStation);
          var endPos = getPostionInOtherNode(this.node, player.avatar.node);

          if (fishKind === gfBaseConfig.instance.FISH_KIND.MINIBOSS) {
            beganPos.y -= 65;
          }

          if (isSkill) {
            gfPoolManager.instance.createSmallExplosion({
              position: beganPos
            });
            this.scheduleOnce(function () {
              _this4.playEffectCoin({
                beganPos: beganPos,
                goldReward: goldReward,
                bulletMultiple: bulletMultiple,
                endPos: endPos,
                isSkill: isSkill,
                player: player,
                deskStation: deskStation,
                skipUpdateWallet: skipUpdateWallet
              });
            }, 0.8);
          } else {
            this.playEffectCoin({
              beganPos: beganPos,
              goldReward: goldReward,
              bulletMultiple: bulletMultiple,
              endPos: endPos,
              isSkill: isSkill,
              player: player,
              deskStation: deskStation,
              skipUpdateWallet: skipUpdateWallet
            });
          }
        };

        _proto.playEffectCoin = function playEffectCoin(data) {
          var beganPos = data.beganPos,
              goldReward = data.goldReward,
              bulletMultiple = data.bulletMultiple,
              endPos = data.endPos,
              isSkill = data.isSkill,
              player = data.player,
              deskStation = data.deskStation,
              skipUpdateWallet = data.skipUpdateWallet;
          var LABEL_WIDTH = 150;
          var LABEL_HEIGHT = 25;
          var _BaseConfig$instance$ = gfBaseConfig.instance.realSize,
              Width = _BaseConfig$instance$.Width,
              Height = _BaseConfig$instance$.Height;
          var x = Math.min(Math.max(beganPos.x, -Width / 2 - LABEL_WIDTH / 2), Width / 2 - LABEL_WIDTH / 2);
          var y = Math.min(Math.max(beganPos.y, -Height / 2 - LABEL_HEIGHT / 2), Height / 2 - LABEL_HEIGHT / 2);
          var labelPosition = new Vec3(x, y, 1);

          this._playCoinLabelEffect({
            goldReward: goldReward,
            bulletMultiple: bulletMultiple,
            labelPosition: labelPosition,
            beganPos: beganPos,
            endPos: endPos,
            isSkill: isSkill,
            isMe: player.isMe,
            deskStation: deskStation,
            skipUpdateWallet: skipUpdateWallet
          });
        };

        _proto._playCoinAnim = function _playCoinAnim(data) {
          var _this5 = this;

          var goldReward = data.goldReward,
              bulletMultiple = data.bulletMultiple,
              beganPos = data.beganPos,
              endPos = data.endPos,
              isSkill = data.isSkill,
              deskStation = data.deskStation,
              playBigWin = data.playBigWin,
              skipUpdateWallet = data.skipUpdateWallet;
          var coinCount = this.calculateCoin(goldReward, bulletMultiple);

          if (!isSkill && !playBigWin) {
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.EFFECT_CATCH);
          }

          var player = gfReferenceManager.instance.getPlayerByDeskStation(deskStation);

          var _loop = function _loop(i) {
            var coinFx = player.isMe ? gfPoolManager.instance.getCoin(gfBaseConfig.instance.COIN_TYPE.MY_COIN) : gfPoolManager.instance.getCoin(gfBaseConfig.instance.COIN_TYPE.OTHER_COIN);

            _this5.node.addChild(coinFx.node);

            coinFx.node.setPosition(beganPos.x, beganPos.y, 0);
            coinFx.index = i;
            SetZIndex(coinFx.node, gfBaseConfig.instance.Z_INDEX.COIN);
            coinFx.startAnimation(0);
            coinFx.node.setScale(v3f(0.4));
            coinFx.setOpacity(0);
            var xRandom = i % 2 === 0 ? 15 + Math.random() * 5 : -(5 + Math.random() * 15);
            xRandom *= i;
            var yRandom = getRandomInt(-5, 5) * 7.5 - 50;
            var configPoint1 = v2(beganPos.x + (beganPos.x - endPos.x) * 0.3, beganPos.y);
            var configPoint2 = v2(endPos.x, beganPos.y + (beganPos.y - endPos.y) * 0.3);

            if (player.index < 2 && beganPos.y < endPos.y) {
              configPoint2.y = endPos.y + endPos.y - beganPos.y;
            }

            var bezierConfig = [configPoint1, configPoint2, endPos];
            var action = tween(coinFx.node);
            action.then(fadeIn(0.01));
            action.then(moveTo(0.175, beganPos.x + xRandom / 2, beganPos.y + 100, coinFx.node.position.z));
            action.call(function () {
              if (data.isMe && coinFx.index === 0 && !isSkill) {
                gfEventEmitter.instance.emit(gfBaseEvents.SOUND.EFFECT_GOLD);
              }
            });
            action.then(moveTo(0.5, beganPos.x + xRandom, beganPos.y + yRandom, coinFx.node.position.z, 'bounceOut'));
            action.delay(0.15 + 0.05 * i);
            action.then(bezierTo(1, bezierConfig, 'sineIn'));
            action.call(function () {
              if (!skipUpdateWallet && i === 0 && data.isMe) {
                player.addToDisplayWallet(goldReward);
              }

              coinFx.stopAnimation();
            });
            action.start();
          };

          for (var i = 0; i < coinCount; ++i) {
            _loop(i);
          }
        };

        _proto.calculateCoin = function calculateCoin(goldReward, bullet) {
          var totalMultiply = goldReward / bullet;
          var coinCount = 0;

          if (totalMultiply < 10) {
            coinCount = 1;
          } else if (totalMultiply < 80) {
            coinCount = 3;
          } else if (totalMultiply < 150) {
            coinCount = 5;
          } else if (totalMultiply < 300) {
            coinCount = 6;
          } else {
            coinCount = 7;
          }

          return coinCount;
        };

        _proto.userExitBoard = function userExitBoard(data) {
          var player = gfReferenceManager.instance.getPlayerByDeskStation(data.DeskStation);

          var wheel = this._getWheel(player.index);

          if (wheel) {
            wheel.onUserExitBoard();
            wheel.hideAnimation(false);
          }
        };

        _proto.playDropGunLaser = function playDropGunLaser(_ref) {
          var _this6 = this;

          var fishPos = _ref.fishPos,
              deskStation = _ref.deskStation,
              skillInfo = _ref.skillInfo;
          var player = gfReferenceManager.instance.getPlayerByDeskStation(deskStation);
          if (!player) return;
          var itemLaserNode = instantiate(this.itemLaser);
          var itemLaserCompo = itemLaserNode.getComponent(gfDropSpecialGunFX);
          this.node.addChild(itemLaserNode);

          this._listSkillItem.push(itemLaserNode);

          var dataInfo = {
            angle: player.gun.angle,
            endPos: getPostionInOtherNode(this.node, player.gun),
            startPos: this.node.getComponent(UITransform).convertToNodeSpaceAR(fishPos),
            deskStation: deskStation
          };
          itemLaserCompo.playEffect(dataInfo, function (itemDrop) {
            gfEventEmitter.instance.emit(gfBaseEvents.PLAYER_LAYER.CHANGE_GUN_LASER, {
              DeskStation: itemDrop.deskStation,
              skillInfo: skillInfo
            });

            _this6.clearDropGunLaserByDeskStation(itemDrop.deskStation);
          });
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.EFFECT_GET_ITEM_LASER);
        };

        _proto.clearDropGunLaserByDeskStation = function clearDropGunLaserByDeskStation(deskStation) {
          if (!this._listSkillItem) return;
          var skillItem;

          for (var i = 0; i < this._listSkillItem.length; i++) {
            skillItem = this._listSkillItem[i];
            if (!skillItem.components || !skillItem.getComponent(gfDropSpecialGunFX)) continue;

            if (skillItem.getComponent(gfDropSpecialGunFX).deskStation === deskStation) {
              Tween.stopAllByTarget(skillItem);

              if (isValid(skillItem)) {
                skillItem.removeFromParent();
                skillItem.destroy();
              }

              this._listSkillItem.splice(i, 1);

              break;
            }
          }
        };

        _proto.triggerBombFX = function triggerBombFX(posNode) {
          var itemBomb = instantiate(this.itemBomb);
          var startPos = this.node.getComponent(UITransform).convertToNodeSpaceAR(posNode);
          this.node.addChild(itemBomb);

          this._listSkillItem.push(itemBomb);

          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHAKE_SCREEN, {
            timeOneStep: 0.03,
            amplitude: 5
          });
          itemBomb.setPosition(startPos);
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.EFFECT_BOMB);
        };

        _proto.playEffectFishSpecial = function playEffectFishSpecial(rewardData) {
          //rewardData : { Angle, BulletMultiple, DeskStation, ListFish, SkillID, TotalReward, Wallet }
          var player = gfReferenceManager.instance.getPlayerByDeskStation(rewardData.DeskStation);
          this.onPlayEffectWinInCatchFish({
            player: player,
            gold: rewardData.TotalReward,
            bet: rewardData.BulletMultiple,
            fishKind: rewardData.fishKind
          });

          if (player.isMe) {
            var numberPlaySound = Math.round(rewardData.TotalReward / (rewardData.BulletMultiple * 120));
            tween(this.node).delay(0.15).repeat(numberPlaySound, tween().call(function () {
              gfEventEmitter.instance.emit(gfBaseEvents.SOUND.EFFECT_GOLD);
            }).delay(0.15)).start();
          }
        };

        _proto.effectItemFreeze = function effectItemFreeze(data) {
          var _this7 = this;

          var player = gfReferenceManager.instance.getPlayerByDeskStation(data.deskStation);
          var endNode = player.isMe ? gfReferenceManager.instance.getBtnFreeze() : player.node;
          var fromPosition = data.Fish ? this.node.getComponent(UITransform).convertToNodeSpaceAR(data.Fish.getLockPositionByWorldSpace()) : this.getRandomPositionOutScreen();
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.EFFECT_GET_ITEM_FREEZE);
          var destination = this.node.getComponent(UITransform).convertToNodeSpaceAR(endNode.worldPosition);
          var freezeItem = gfPoolManager.instance.getFreezeFX();
          freezeItem.node.setParent(this.node);
          freezeItem.node.setPosition(fromPosition);
          var jumpHigh = 60;
          if (player.isMe) this._flyingSkill++;
          tween(freezeItem.node).to(0.175, {
            position: v3(fromPosition.x, fromPosition.y + jumpHigh, 0)
          }).to(0.5, {
            position: v3(fromPosition.x, fromPosition.y, 0)
          }, {
            easing: 'bounceOut'
          }).delay(0.7).to(0.4, {
            position: destination
          }).delay(0.235).call(function () {
            if (gfDataStore.instance.getSelfDeskStation() === data.deskStation) {
              if (_this7._flyingSkill > 0) _this7._flyingSkill--;
              gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.FREEZE_ADD_ITEM);
            }

            freezeItem.value = 0;
            freezeItem.returnPool();
          }).start();
        };

        _proto.getTotalFlyingItems = function getTotalFlyingItems() {
          return this._flyingSkill;
        };

        _proto.resetOnExit = function resetOnExit() {
          this.unscheduleAllCallbacks();

          this._listSkillItem.forEach(function (item) {
            Tween.stopAllByTarget(item);

            if (isValid(item)) {
              item.removeFromParent();
              item.destroy();
            }
          });

          this._listSkillItem.length = 0;

          this._lisParticle.forEach(function (item) {
            Tween.stopAllByTarget(item);

            if (isValid(item)) {
              item.removeFromParent();
              item.destroy();
            }
          });

          this._lisParticle.length = 0;
          this._flyingSkill = 0;
          this.bigWinWheels.forEach(function (wheel) {
            wheel.onFinish();
          });
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.STOP_BIG_WIN);
          this._queueAnim.length = 0;
          this._playingQueueAnim = false;
        };

        _proto.addAnimToQueueAnim = function addAnimToQueueAnim(name, data) {
          var animData = {
            name: name,
            dataInfo: data
          };

          if (this._queueAnim.length == 0 && !this._playingQueueAnim) {
            this.playQueueAnim(animData);
          } else {
            this._queueAnim.push(animData);
          }
        };

        _proto.checkQueueAnim = function checkQueueAnim() {
          if (this._queueAnim.length > 0) {
            var data = this._queueAnim.shift();

            this.playQueueAnim(data);
          } else {
            this._playingQueueAnim = false;
          }
        };

        _proto.playQueueAnim = function playQueueAnim(data) {
          this._playingQueueAnim = true;

          switch (data.name) {
            case "EVENT":
              gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.PLAY_EFFECT_EVENT_WIN, data.dataInfo);
              break;

            case "JACKPOT":
              gfEventEmitter.instance.emit(gfBaseEvents.DRAGON.PLAY_DRAGON_BALL_JACKPOT);
              break;
          }
        };

        _proto.onDestroy = function onDestroy() {
          this.unscheduleAllCallbacks();
          removeEvents(this);
        };

        return gfEffectLayer;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "particle3D", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "bigWinWheels", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "itemLaser", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "itemBomb", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfEffectLockFish.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfUtilities.ts', './utils.ts', './gfBaseEvents.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Sprite, sp, UITransform, Component, registerEvent, v2Distance, getRotation, removeEvents, getPostionInOtherNode, gfBaseEvents;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Sprite = module.Sprite;
      sp = module.sp;
      UITransform = module.UITransform;
      Component = module.Component;
    }, function (module) {
      registerEvent = module.registerEvent;
      v2Distance = module.v2Distance;
      getRotation = module.getRotation;
      removeEvents = module.removeEvents;
    }, function (module) {
      getPostionInOtherNode = module.getPostionInOtherNode;
    }, function (module) {
      gfBaseEvents = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "92b8e7acB5GVobQJX1aITvv", "gfEffectLockFish", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfEffectLockFish = exports('gfEffectLockFish', (_dec = ccclass('gfEffectLockFish'), _dec2 = property(Node), _dec3 = property(Sprite), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfEffectLockFish, _Component);

        function gfEffectLockFish() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "iconTarget", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "iconDot", _descriptor2, _assertThisInitialized(_this));

          _this._isFollowTarget = false;
          _this._animAimName = "aim";
          _this._targetFish = void 0;
          _this._canPlayEffect = true;
          _this._startPos = void 0;
          return _this;
        }

        var _proto = gfEffectLockFish.prototype; // LIFE-CYCLE CALLBACKS:

        _proto.onLoad = function onLoad() {
          this._targetFish = null;
          this.initEvents();
          this.node.active = false;
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.PLAYER_LAYER.STOP_LOCK_FISH, this.stopFollow, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.START_LOCK_FISH, this.startFollow, this);
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.resetOnExit, this);
        };

        _proto.stopFollow = function stopFollow() {
          this._isFollowTarget = false;
        };

        _proto.startFollow = function startFollow(fish, nodeGun) {
          this._targetFish = fish;
          this._startPos = getPostionInOtherNode(this.node, nodeGun);

          this._calculatorInfo();

          if (this._isFollowTarget) return;

          if (this._canPlayEffect) {
            this._canPlayEffect = false;
            this.playChangeTargetAnim();
          }

          this.node.active = true;
          this._isFollowTarget = true;
        };

        _proto.playChangeTargetAnim = function playChangeTargetAnim() {
          if (this.iconTarget && this.iconTarget.getComponent(sp.Skeleton)) {
            this.iconTarget.getComponent(sp.Skeleton).setAnimation(0, this._animAimName, false);
          }
        };

        _proto._calculatorInfo = function _calculatorInfo() {
          var endPos = this._targetFish.getLockPositionByNodeSpace(this.node);

          if (!endPos) return;
          this.updateDotLine(endPos);
          this.iconTarget.setPosition(endPos);
        };

        _proto.updateDotLine = function updateDotLine(endPos) {
          var distance = v2Distance(this._startPos, endPos);
          this.iconDot.node.setPosition(this._startPos);
          this.iconDot.node.angle = getRotation(endPos, this._startPos);
          this.iconDot.node.getComponent(UITransform).width = distance;
        };

        _proto.resetOnExit = function resetOnExit() {
          this._isFollowTarget = false;
          this._targetFish = null;
          this.node.active = false;
        };

        _proto.update = function update() {
          if (!this._isFollowTarget) {
            this.node.active = false;
            this._canPlayEffect = true;
          } else if (this._targetFish && !this._targetFish._isOutScreen && !this._targetFish.checkDie()) {
            this._calculatorInfo();
          }
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return gfEffectLockFish;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "iconTarget", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "iconDot", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfEventButton.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfUtilities.ts', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfLocalize.ts', './gfDataStore.ts', './gfBaseConfig.ts', './gfReferenceManager.ts', './gfEventTray.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Button, Component, registerEvent, convertSecondToTimeDay, addTimePrefix, removeEvents, gfBaseEvents, gfEventEmitter, gfLocalize, gfDataStore, gfBaseConfig, gfReferenceManager, gfEventTray;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Button = module.Button;
      Component = module.Component;
    }, function (module) {
      registerEvent = module.registerEvent;
      convertSecondToTimeDay = module.convertSecondToTimeDay;
      addTimePrefix = module.addTimePrefix;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfLocalize = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfEventTray = module.gfEventTray;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "885ffKHysdKpIaMQHZpbpFW", "gfEventButton", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfEventButton = exports('gfEventButton', (_dec = ccclass('gfEventButton'), _dec2 = property(Label), _dec3 = property(gfEventTray), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfEventButton, _Component);

        function gfEventButton() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "txtEventTime", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tray", _descriptor2, _assertThisInitialized(_this));

          _this._timeRemain = 0;
          _this.PREFIX_TIME = [];
          return _this;
        }

        var _proto = gfEventButton.prototype;

        _proto.onLoad = function onLoad() {
          this.PREFIX_TIME = ["D:", "H:", "M:", "S"];
          this.node.active = false;
          this.initEvents();
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.resetOnExitGameRoom, this);
          registerEvent(gfBaseEvents.EVENT.EVENT_COMING, this.onComing, this);
          registerEvent(gfBaseEvents.EVENT.EVENT_PLAYING, this.onPlaying, this);
          registerEvent(gfBaseEvents.EVENT.EVENT_END, this.onEnd, this);
          registerEvent(gfBaseEvents.EVENT.EVENT_IDLE, this.onIdle, this);
          registerEvent(gfBaseEvents.GAME_LAYER.ON_AFTER_INIT_PLAYER_LIST, this.updatePosition, this);
          registerEvent(gfBaseEvents.COMMON.REFRESH_PAGE, this.resetButton, this);
        };

        _proto.onIdle = function onIdle() {
          this.setInteractableButton(false);
        };

        _proto.onComing = function onComing() {
          this.resetButton();
          this.node.active = true;
          this.setInteractableButton(true);
          gfEventEmitter.instance.emit(gfBaseEvents.EVENT_TRAY_LAYER.RESET_EVENT_TRAY);
          this.txtEventTime.string = gfLocalize.instance.TXT_EVENT.COMING;
          this.tray && this.tray.hide();
        };

        _proto.onPlaying = function onPlaying(data) {
          this.resetButton();
          this.node.active = true;
          this.setInteractableButton(true);
          var timeRemain = Math.floor((data.EventEndTime - gfDataStore.instance.getTime()) / 1000);
          this.updateTimer(timeRemain);

          if (data.EventDetail) {
            this.updateTray(data.EventDetail);
          }
        };

        _proto.onEnd = function onEnd() {
          this.resetButton();
          this.node.active = true;
          this.setInteractableButton(true);
          gfEventEmitter.instance.emit(gfBaseEvents.EVENT_TRAY_LAYER.RESET_EVENT_TRAY);
          this.txtEventTime.string = gfLocalize.instance.TXT_EVENT.END;
          this.tray && this.tray.hide();
        };

        _proto.updateTimer = function updateTimer(timeRemain) {
          this._timeRemain = Math.floor(timeRemain);
          var formatTime = convertSecondToTimeDay(this._timeRemain);
          this.txtEventTime.string = addTimePrefix(formatTime, this.PREFIX_TIME);
          this._timeRemain--;
          this.schedule(this.startCountDown, 1);
        };

        _proto.startCountDown = function startCountDown() {
          if (this._timeRemain < 0) {
            return;
          }

          var formatTime = convertSecondToTimeDay(this._timeRemain);
          this.txtEventTime.string = addTimePrefix(formatTime, this.PREFIX_TIME);
          this._timeRemain--;
        };

        _proto.onEventClick = function onEventClick() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_EVENT_INFO);
        };

        _proto.updateTray = function updateTray(EventDetail) {
          if (!Array.isArray(EventDetail) || !this.tray) return;
          this.tray && this.tray.updateTray(EventDetail);
        };

        _proto.updatePosition = function updatePosition() {
          var player = gfReferenceManager.instance.getPlayerByDeskStation(gfDataStore.instance.getSelfInfo().DeskStation);

          if (player) {
            var pos = player.index === 0 ? gfBaseConfig.instance.POS_EVENT.LEFT : gfBaseConfig.instance.POS_EVENT.RIGHT;
            this.node.setPosition(pos);
          }
        };

        _proto.setInteractableButton = function setInteractableButton(interactable) {
          this.node.getComponent(Button).interactable = interactable;
        };

        _proto.resetButton = function resetButton() {
          this.unscheduleAllCallbacks();
          this.txtEventTime.string = '';
          this.tray && this.tray.reset();
        };

        _proto.resetOnExitGameRoom = function resetOnExitGameRoom() {
          this.resetButton();
          this.node.active = false;
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return gfEventButton;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "txtEventTime", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "tray", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfEventController.ts", ['cc', './state-machine.min.mjs_cjs=&original=.js', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfDataStore.ts', './gfBaseConfig.ts', './gfUtilities.ts', './gfReferenceManager.ts', './state-machine.min.js'], function (exports) {
  'use strict';

  var cclegacy, _decorator, gfBaseEvents, gfEventEmitter, gfDataStore, gfBaseConfig, registerEvent, removeEvents, gfReferenceManager, _cjsExports;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, null, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "76b5aC7An9IlI1dm1VFd4+8", "gfEventController", undefined);

      var STATE = {
        IDLE: 'idle',
        COMING: 'coming',
        PLAYING: 'playing',
        END: 'end'
      };
      var TRANSITION = {
        GO_IDLE: 'goIdle',
        GO_COMING: 'goComing',
        GO_PLAYING: 'goPlaying',
        GO_END: 'goEnd'
      };
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfEventController = exports('gfEventController', (_dec = ccclass('gfEventController'), _dec(_class = (_class2 = /*#__PURE__*/function () {
        function gfEventController() {
          this._fsm = void 0;
          this.eventData = null;
          this.isGameShow = true;
          gfEventController.instance = this;
          this._fsm = null;
          this.initFSM();
          this.initEvents();
        }

        var _proto = gfEventController.prototype;

        _proto.initFSM = function initFSM() {
          this._fsm = new _cjsExports({
            init: STATE.IDLE,
            observeUnchangedState: true,
            transitions: [{
              name: TRANSITION.GO_IDLE,
              from: "*",
              to: STATE.IDLE
            }, {
              name: TRANSITION.GO_COMING,
              from: "*",
              to: STATE.COMING
            }, {
              name: TRANSITION.GO_PLAYING,
              from: "*",
              to: STATE.PLAYING
            }, {
              name: TRANSITION.GO_END,
              from: "*",
              to: STATE.END
            }],
            data: {},
            methods: {
              onComing: this.onComing.bind(this),
              onPlaying: this.onPlaying.bind(this),
              onEnd: this.onEnd.bind(this),
              onIdle: this.onIdle.bind(this),
              onInvalidTransition: function onInvalidTransition() {//cc.warn("EVENT: Transition", transition, "from", from, "is not allowed");
              },
              onTransition: function onTransition() {//cc.warn("EVENT: From ", lifecycle.from, " to ", lifecycle.to);
              }
            }
          });
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.EVENT.UPDATE_EVENT_STATUS, this.onEventStatus, this);
          registerEvent(gfBaseEvents.COMMON.GAME_HIDE, this.gameHide, this);
          registerEvent(gfBaseEvents.COMMON.GAME_SHOW, this.gameShow, this);
          registerEvent(gfBaseEvents.COMMON.CLOSE_SCENE, this.goIdle, this);
          registerEvent(gfBaseEvents.COMMON.REFRESH_PAGE, this.refreshPage, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.UPDATE_LIST_PLAYER, this.updateListPlayer, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.PLAYER_JOIN_BOARD, this.playerJoinBoard, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.PLAYER_LEAVE_BOARD, this.playerLeaveBoard, this);
        };

        _proto.goIdle = function goIdle() {
          this._fsm.goIdle();
        };

        _proto.gameHide = function gameHide() {
          this.isGameShow = false;
          this.goIdle();
        };

        _proto.gameShow = function gameShow() {
          this.isGameShow = true;

          if (gfDataStore.instance.getCurrentSceneName() === gfBaseConfig.instance.SceneName.Lobby) {
            gfEventEmitter.instance.emit(gfBaseEvents.EVENT.SEND_GET_EVENT_INFO);
          }
        };

        _proto.onComing = function onComing() {
          gfEventEmitter.instance.emit(gfBaseEvents.EVENT.EVENT_COMING, this.eventData);
        };

        _proto.onPlaying = function onPlaying() {
          gfEventEmitter.instance.emit(gfBaseEvents.EVENT.EVENT_PLAYING, this.eventData);
        };

        _proto.onEnd = function onEnd() {
          gfEventEmitter.instance.emit(gfBaseEvents.EVENT.EVENT_END, this.eventData);
        };

        _proto.onIdle = function onIdle() {
          this.setEventData(null);
          gfEventEmitter.instance.emit(gfBaseEvents.EVENT.EVENT_IDLE);
        };

        _proto.onEventStatus = function onEventStatus(data) {
          //if(!this.isGameShow) return;
          // cc.warn('onEventStatus', data);
          this.setEventData(data ? data : null);

          if (!this.eventData) {
            console.warn('Event not started'); // this.goIdle();

            return;
          }

          gfDataStore.instance.setSelfInfo({
            EventInfo: this.eventData
          });
          var _this$eventData = this.eventData,
              EventStartTime = _this$eventData.EventStartTime,
              EventEndTime = _this$eventData.EventEndTime;

          if (gfDataStore.instance.getTime() < EventStartTime) {
            this._fsm.goComing();
          } else if (gfDataStore.instance.getTime() > EventEndTime) {
            this._fsm.goEnd();
          } else {
            this._fsm.goPlaying();
          }
        };

        _proto.setEventData = function setEventData(data) {
          this.eventData = data;
        };

        _proto.getEventData = function getEventData() {
          return this.eventData;
        };

        _proto.updateListPlayer = function updateListPlayer(data) {
          if (!this.isEventPlaying()) return;

          for (var i = 0; i < data.length; i++) {
            var userInfo = data[i];
            var eventTray = gfReferenceManager.instance.getEventTrayByDeskStation(userInfo.DeskStation);

            if (eventTray && userInfo.EventDetail) {
              eventTray.updateTray(userInfo.EventDetail);
            }
          }
        };

        _proto.playerJoinBoard = function playerJoinBoard(userInfo) {
          if (userInfo === void 0) {
            userInfo = null;
          }

          if (!this.isEventPlaying()) return;
          var eventTray = gfReferenceManager.instance.getEventTrayByDeskStation(userInfo.DeskStation);

          if (eventTray) {
            eventTray.updateTray(userInfo.EventDetail);
          }
        };

        _proto.playerLeaveBoard = function playerLeaveBoard(data) {
          if (data === void 0) {
            data = null;
          }

          var eventTray = gfReferenceManager.instance.getEventTrayByDeskStation(data.DeskStation);

          if (eventTray) {
            eventTray.hide();

            if (data.DeskStation != gfDataStore.instance.getSelfDeskStation()) {
              gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.REMOVE_EVENT_EFFECT_PLAYER, data);
            }
          }
        };

        _proto.isEventPlaying = function isEventPlaying() {
          return this._fsm.is(STATE.PLAYING);
        };

        _proto.isEventComing = function isEventComing() {
          return this._fsm.is(STATE.COMING);
        };

        _proto.refreshPage = function refreshPage() {
          this.destroy();
        };

        _proto.destroy = function destroy() {
          removeEvents(this);
          this._fsm = null;
        };

        return gfEventController;
      }(), _class2.instance = void 0, _class2)) || _class));
      gfEventController.instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfEventEmitter.ts", ['cc', './events.mjs_cjs=&original=.js', './events.js'], function (exports) {
  'use strict';

  var cclegacy, _cjsExports;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, null, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "2f583X/Zc5F2JpcA+eFNRHo", "gfEventEmitter", undefined);

      var gfEventEmitter = exports('default', /*#__PURE__*/function () {
        function gfEventEmitter() {
          this._emiter = void 0;
          gfEventEmitter.instance = this;
          this._emiter = new _cjsExports();

          this._emiter.setMaxListeners(100);
        }

        var _proto = gfEventEmitter.prototype;

        _proto.emit = function emit() {
          var _this$_emiter;

          (_this$_emiter = this._emiter).emit.apply(_this$_emiter, arguments);
        };

        _proto.registerEvent = function registerEvent(event, listener) {
          this._emiter.on(event, listener);
        };

        _proto.removeEvent = function removeEvent(event, listener) {
          this._emiter.removeListener(event, listener);
        };

        _proto.destroy = function destroy() {
          this._emiter.removeAllListeners();

          this._emiter = null;
          gfEventEmitter.instance = null;
        };

        return gfEventEmitter;
      }()); // gfEventEmitter.instance = null;

      gfEventEmitter.instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfEventHistory.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseHistory.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Button, Label, GfBaseHistory;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Button = module.Button;
      Label = module.Label;
    }, function (module) {
      GfBaseHistory = module.GfBaseHistory;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "d2ed1OKpCNCA6KvmugSfjqW", "gfEventHistory", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfEventHistory = exports('gfEventHistory', (_dec = ccclass('gfEventHistory'), _dec(_class = /*#__PURE__*/function (_GfBaseHistory) {
        _inheritsLoose(gfEventHistory, _GfBaseHistory);

        function gfEventHistory() {
          return _GfBaseHistory.apply(this, arguments) || this;
        }

        var _proto = gfEventHistory.prototype;

        _proto.initData = function initData(data) {
          var gameId = data.gameId,
              url = data.url;
          this.jpPrefix = "";
          this.gameId = gameId;
          this.url = url;
        };

        _proto.requestDataPage = function requestDataPage(page, quantity, callback, callbackErr) {
          var from = (page - 1) * quantity;
          var requestParams = {
            serviceId: this.jpPrefix + this.gameId,
            from: from,
            size: quantity
          };
          if (this.errorMessage) this.errorMessage.active = false;
          this.requestHistory(requestParams, callback, callbackErr);
        };

        _proto.onRequestResponse = function onRequestResponse(res) {
          this.noHistoryText.active = !!(res.error || Object.keys(res).length <= 0 || !res.data || !res.data.items || res.data.items.length <= 0);

          if (res.total) {
            this.totalPage = Math.ceil(res.total / this.itemPerPage);
          }

          this.stopLoading();

          if (!res.error) {
            if (Object.keys(res).length > 0 && res.data && res.data.items && res.data.items.length > 0) {
              this.btnBack.getComponent(Button).interactable = true;
              this.btnNext.getComponent(Button).interactable = true;
              this.pageIndexView.getComponent(Label).string = this.pagePrefix + this.currentPage.toString();
              this.updateTableData(res.data.items);

              if (this.currentPage == 1) {
                this.btnBack.getComponent(Button).interactable = false;
              }

              if (res.total <= this.currentPage * this.itemPerPage || res.data.items.length < this.itemPerPage) {
                this.btnNext.getComponent(Button).interactable = false;
                return;
              }
            } else {
              // Clear old history items if use tool
              this.btnNext.getComponent(Button).interactable = false;
              this.btnBack.getComponent(Button).interactable = false;
              this.pageIndexView.getComponent(Label).string = this.pagePrefix + "1";
              this.currentPage = 1;
              this.totalPage = 0;
              this.updateTableData(res.data.items);
            }
          }
        };

        return gfEventHistory;
      }(GfBaseHistory)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfEventItemEffect.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfActionHelper.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, tween, Component, scaleTo, moveTo;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      tween = module.tween;
      Component = module.Component;
    }, function (module) {
      scaleTo = module.scaleTo;
      moveTo = module.moveTo;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "bfc11zHkl5DBaDj4j/zg+DD", "gfEventItemEffect", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfEventItemEffect = exports('gfEventItemEffect', (_dec = ccclass('gfEventItemEffect'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfEventItemEffect, _Component);

        function gfEventItemEffect() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.callbackFunc = void 0;
          _this.listAction = void 0;
          return _this;
        }

        var _proto = gfEventItemEffect.prototype;

        _proto.onLoad = function onLoad() {
          this.playAnimation = this.playAnimation.bind(this);
        };

        _proto.playAnimation = function playAnimation(dataInfo, callback) {
          var startPos = dataInfo.startPos;
          this.callbackFunc = callback;
          this.node.setPosition(startPos);
          this.listAction = tween(this.node).then(this.onStart(dataInfo)).then(this.onFly(dataInfo)).then(this.onFinish(dataInfo)).start();
        };

        _proto.onStart = function onStart(dataInfo) {
          return tween().then(scaleTo(0.5, 3)).delay(0.5);
        };

        _proto.onFly = function onFly(dataInfo) {
          var endPos = dataInfo.endPos;
          return tween().parallel(tween().then(scaleTo(0.8, 1)), tween().then(moveTo(1, endPos))).delay(0.5);
        };

        _proto.onFinish = function onFinish(dataInfo) {
          var _this2 = this;

          return tween().call(function () {
            if (_this2.callbackFunc && typeof _this2.callbackFunc === 'function') {
              _this2.callbackFunc();
            }

            _this2.node.destroy();
          });
        };

        return gfEventItemEffect;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfEventTray.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, SpriteFrame, Sprite, instantiate, UITransform, Component, convertAssetArrayToObject;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      SpriteFrame = module.SpriteFrame;
      Sprite = module.Sprite;
      instantiate = module.instantiate;
      UITransform = module.UITransform;
      Component = module.Component;
    }, function (module) {
      convertAssetArrayToObject = module.convertAssetArrayToObject;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "4a884517WZGQ7yo8DY9f/pi", "gfEventTray", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfEventTray = exports('gfEventTray', (_dec = ccclass('gfEventTray'), _dec2 = property(Node), _dec3 = property(SpriteFrame), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfEventTray, _Component);

        function gfEventTray() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "listItem", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listIcon", _descriptor2, _assertThisInitialized(_this));

          _this.assetIcon = void 0;
          return _this;
        }

        var _proto = gfEventTray.prototype;

        _proto.onLoad = function onLoad() {
          this.node.active = false;
          this.assetIcon = convertAssetArrayToObject(this.listIcon);
        };

        _proto.updateTray = function updateTray(listItem) {
          var _this2 = this;

          if (listItem === void 0) {
            listItem = [];
          }

          if (!Array.isArray(listItem)) return;
          this.reset();
          listItem.forEach(function (itemId) {
            _this2.listItem[itemId - 1].getComponent(Sprite).spriteFrame = _this2.assetIcon[itemId - 1 + "_pick"];
          });
        };

        _proto.hide = function hide() {
          this.node.active = false;
        };

        _proto.reset = function reset() {
          var _this3 = this;

          this.node.active = true;
          this.listItem.forEach(function (item, index) {
            item.getComponent(Sprite).spriteFrame = _this3.assetIcon[index + "_normal"];
          });
        };

        _proto.cloneListItem = function cloneListItem() {
          var listItemClone = [];
          this.listItem.forEach(function (item) {
            listItemClone.push(instantiate(item));
          });
          return listItemClone;
        };

        _proto.getPositionByWorldSpace = function getPositionByWorldSpace(itemID) {
          return this.node.getComponent(UITransform).convertToWorldSpaceAR(this.listItem[itemID - 1].position);
        };

        return gfEventTray;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "listItem", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "listIcon", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfEventTrayController.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfDataStore.ts', './gfUtilities.ts', './gfReferenceManager.ts', './gfBaseEvents.ts', './gfEventTray.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Component, gfDataStore, registerEvent, removeEvents, gfReferenceManager, gfBaseEvents, gfEventTray;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventTray = module.gfEventTray;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "67264raaYBFSbBVl0wcfbxQ", "gfEventTrayController", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfEventTrayController = exports('gfEventTrayController', (_dec = ccclass('gfEventTrayController'), _dec2 = property(gfEventTray), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfEventTrayController, _Component);

        function gfEventTrayController() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "listEventTray", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = gfEventTrayController.prototype;

        _proto.onLoad = function onLoad() {
          gfReferenceManager.instance.setData({
            EventTrayLayer: this.node
          });
          this.node['getEventTrayByDeskStation'] = this.getEventTrayByDeskStation.bind(this);
          this.initEvents();
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.EVENT_TRAY_LAYER.RESET_EVENT_TRAY, this.resetAllEventTray, this);
          registerEvent(gfBaseEvents.EVENT.EVENT_COMING, this.onEventComing, this);
          registerEvent(gfBaseEvents.EVENT.EVENT_PLAYING, this.onEventPlaying, this);
          registerEvent(gfBaseEvents.EVENT.EVENT_END, this.onEventEnd, this);
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.hideAllEventTray, this);
        };

        _proto.onEventComing = function onEventComing() {
          this.listEventTray.forEach(function (eventTray, index) {
            var player = gfReferenceManager.instance.getPlayerByIndex(index);

            if (player && player.isActive()) {
              eventTray.hide();
            }
          });
        };

        _proto.onEventEnd = function onEventEnd() {
          this.listEventTray.forEach(function (eventTray, index) {
            var player = gfReferenceManager.instance.getPlayerByIndex(index);

            if (player && player.isActive()) {
              eventTray.hide();
            }
          });
        };

        _proto.onEventPlaying = function onEventPlaying() {
          this.listEventTray.forEach(function (eventTray, index) {
            var player = gfReferenceManager.instance.getPlayerByIndex(index);

            if (player) {
              eventTray.reset();
            }
          });
        };

        _proto.getEventTrayByDeskStation = function getEventTrayByDeskStation(deskStation) {
          if (!this.listEventTray) return null;
          var index = deskStation;

          if (gfDataStore.instance.getSelfDeskStation() >= 2) {
            index = [2, 3, 0, 1][deskStation];
          }

          return this.listEventTray[index];
        };

        _proto.hideEventTray = function hideEventTray(DeskStation) {
          var eventTray = this.getEventTrayByDeskStation(DeskStation);

          if (eventTray) {
            eventTray.hide();
          }
        };

        _proto.resetEventTray = function resetEventTray(DeskStation) {
          var eventTray = this.getEventTrayByDeskStation(DeskStation);

          if (eventTray) {
            eventTray.reset();
          }
        };

        _proto.hideAllEventTray = function hideAllEventTray() {
          this.listEventTray.forEach(function (eventTray) {
            eventTray.hide();
          });
        };

        _proto.resetAllEventTray = function resetAllEventTray() {
          this.listEventTray.forEach(function (eventTray) {
            eventTray.reset();
          });
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return gfEventTrayController;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "listEventTray", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfEventWinWheel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfUtilities.ts', './gfBaseEvents.ts', './gfActionHelper.ts', './animateNumberLabel.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, tween, Component, registerEvent, removeEvents, gfBaseEvents, stopAllActions, AnimateNumberLabel;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      tween = module.tween;
      Component = module.Component;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      stopAllActions = module.stopAllActions;
    }, function (module) {
      AnimateNumberLabel = module.AnimateNumberLabel;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "d5ff4RiX5REGYOZpdr6u4vw", "gfEventWinWheel", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfEventWinWheel = exports('gfEventWinWheel', (_dec = ccclass('gfEventWinWheel'), _dec2 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfEventWinWheel, _Component);

        function gfEventWinWheel() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "txtCoin", _descriptor, _assertThisInitialized(_this));

          _this.CONFIG_TIME = null;
          _this.winValue = 0;
          _this.callbackFunc = null;
          return _this;
        }

        var _proto = gfEventWinWheel.prototype;

        _proto.onLoad = function onLoad() {
          this.initEvents();
          this.CONFIG_TIME = {
            START: 0.2,
            IDLE: 4,
            END: 0.2
          };
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.resetOnExit, this);
          registerEvent(gfBaseEvents.COMMON.GAME_SHOW, this.resetOnExit, this);
        };

        _proto.playAnimation = function playAnimation(content, callback) {
          var _this2 = this;

          this.node.active = true;
          this.resetWheel();
          this.callbackFunc = callback;
          this.winValue = content.GoldReward;
          tween(this.node).call(function () {
            _this2.animStart();
          }).delay(this.CONFIG_TIME.START).call(function () {
            _this2.animIdle();
          }).delay(this.CONFIG_TIME.IDLE).call(function () {
            _this2.animEnd();
          }).start();
        };

        _proto.animStart = function animStart() {};

        _proto.animIdle = function animIdle() {
          this.txtCoin.active = true;
          this.txtCoin.getComponent(AnimateNumberLabel).onUpdateValue(this.winValue, (this.CONFIG_TIME.IDLE - 1) * 1000);
        };

        _proto.animEnd = function animEnd() {
          var _this3 = this;

          this.txtCoin.active = false;
          stopAllActions(this.node);
          tween(this.node).delay(this.CONFIG_TIME.END).call(function () {
            if (_this3.callbackFunc && typeof _this3.callbackFunc === 'function') {
              _this3.callbackFunc();
            }

            _this3.resetOnExit();
          }).start();
        };

        _proto.resetWheel = function resetWheel() {
          if (this.txtCoin.getComponent(AnimateNumberLabel).resetValue) {
            this.txtCoin.getComponent(AnimateNumberLabel).resetValue();
          }

          this.txtCoin.active = false;
          stopAllActions(this.node);
        };

        _proto.resetOnExit = function resetOnExit() {
          this.resetWheel();
          this.node.active = false;
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return gfEventWinWheel;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "txtCoin", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfExplosionAnimationClip.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfNode.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Animation, gfNode;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Animation = module.Animation;
    }, function (module) {
      gfNode = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "d40a0zIbJ9HuYHRHJ9tAM4K", "gfExplosionAnimationClip", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfExplosionAnimationClip = exports('gfExplosionAnimationClip', (_dec = ccclass('gfExplosionAnimationClip'), _dec(_class = /*#__PURE__*/function (_gfNode) {
        _inheritsLoose(gfExplosionAnimationClip, _gfNode);

        function gfExplosionAnimationClip() {
          return _gfNode.apply(this, arguments) || this;
        }

        var _proto = gfExplosionAnimationClip.prototype;

        _proto.onEnable = function onEnable() {
          var animation = this.node.getComponent(Animation);

          if (animation) {
            animation.play();
          }
        };

        _proto.onFinished = function onFinished() {
          this.returnPool();
        };

        return gfExplosionAnimationClip;
      }(gfNode)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfExplosionSpine.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfNode.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, sp, gfNode;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
    }, function (module) {
      gfNode = module.default;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "e09b0R5llpCqJtPjP0RA4as", "gfExplosionSpine", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfExplosionSpine = exports('gfExplosionSpine', (_dec = ccclass('gfExplosionSpine'), _dec(_class = (_class2 = /*#__PURE__*/function (_gfNode) {
        _inheritsLoose(gfExplosionSpine, _gfNode);

        function gfExplosionSpine() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfNode.call.apply(_gfNode, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "animationName", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = gfExplosionSpine.prototype;

        _proto.onEnable = function onEnable() {
          var _this2 = this;

          this.scheduleOnce(function () {
            var spine = _this2.node.getComponent(sp.Skeleton);

            spine.setAnimation(0, _this2.animationName, false);
            spine.setCompleteListener(function () {
              _this2.returnPool();
            });
          }, 0);
        };

        _proto.returnPool = function returnPool() {
          this.unscheduleAllCallbacks();

          _gfNode.prototype.returnPool.call(this);
        };

        return gfExplosionSpine;
      }(gfNode), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "animationName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "animation";
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishFreezeEffect.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseFish.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Vec3, UITransform, Color, Component, gfBaseFish;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      UITransform = module.UITransform;
      Color = module.Color;
      Component = module.Component;
    }, function (module) {
      gfBaseFish = module.gfBaseFish;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "282dc7SenBOBpeOflfOHsd6", "gfFishFreezeEffect", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfFishFreezeEffect = exports('gfFishFreezeEffect', (_dec = ccclass('gfFishFreezeEffect'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfFishFreezeEffect, _Component);

        function gfFishFreezeEffect() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.ICE_COLOR = new Color(0, 175, 255, 255);
          _this.baseFish = null;
          _this.freezeTime = void 0;
          _this._isFreezed = false;
          return _this;
        }

        var _proto = gfFishFreezeEffect.prototype;

        _proto.initIceEffect = function initIceEffect(TimeRemainFreeze) {
          this.baseFish = this.node.parent.getComponent(gfBaseFish);
          var targetPoint = this.baseFish.getTargetPoint();
          this.node.active = !!TimeRemainFreeze;

          if (this.node.active) {
            this.onFreezeFish(TimeRemainFreeze);
          }

          if (targetPoint) this.node.setPosition(new Vec3(targetPoint.x, targetPoint.y, 1));
          this.updateScale();
        };

        _proto.updateScale = function updateScale() {
          var fishSize = Math.min(this.baseFish.getVisibleSize().x, this.baseFish.getVisibleSize().y);
          var scale = Math.min(1.5, fishSize / this.node.getComponent(UITransform).width);
          this.node.setScale(scale, scale, 1);
        };

        _proto.onFreezeFish = function onFreezeFish(TimeRemainFreeze) {
          if (TimeRemainFreeze === void 0) {
            TimeRemainFreeze = 3000;
          }

          this.freezeTime = TimeRemainFreeze / 1000;

          if (!this._isFreezed) {
            this._isFreezed = true;

            if (this.baseFish.moveAction) {
              this.baseFish.moveAction.setSpeed(0.5);
            }

            this.node.active = true;
            this.baseFish.changeAnimationSpeed(0.5);
            this.baseFish.setColor(this.ICE_COLOR);
          }
        };

        _proto.update = function update(dt) {
          if (this.baseFish.checkDie()) {
            return;
          }

          if (this._isFreezed) {
            this.freezeTime -= dt;

            if (this.freezeTime <= 0) {
              this.onFreezeStop();
            }
          }
        };

        _proto.onFreezeStop = function onFreezeStop() {
          this._isFreezed = false;
          this.node.active = false;

          if (this.baseFish.moveAction) {
            this.baseFish.moveAction.setSpeed(1);
          }

          this.baseFish.changeAnimationSpeed(2);
          this.baseFish.resetColor();
        };

        _proto.isFreezed = function isFreezed() {
          return this._isFreezed;
        };

        _proto.reset = function reset() {
          this._isFreezed = false;
        };

        return gfFishFreezeEffect;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishGroup01.ts", ['cc', './gfFishGroupData.ts', './gfBaseConfig.ts', './gfFishGroupHelper.ts', './gfUtilities.ts', './utils.ts', './gfFishMoveActions.ts'], function (exports) {
  'use strict';

  var cclegacy, v2, gfFishGroupData, gfBaseConfig, FishGroupHelper, v2Distance, randRange, FishMoveActions, FISH_ACTION;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      v2 = module.v2;
    }, function (module) {
      gfFishGroupData = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      FishGroupHelper = module.default;
    }, function (module) {
      v2Distance = module.v2Distance;
    }, function (module) {
      randRange = module.randRange;
    }, function (module) {
      FishMoveActions = module.FishMoveActions;
      FISH_ACTION = module.FISH_ACTION;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f8d43uWmLJH05vXLjLAHB1z", "gfFishGroup01", undefined);

      var gfFishGroup1 = exports('default', /*#__PURE__*/function () {
        function gfFishGroup1() {}

        gfFishGroup1.create = function create() {
          var COUNT_FISH = {
            TOP_TOP: 17,
            BOTTOM_BOTTOM: 17,
            TOP_BOTTOM: 36,
            BOTTOM_TOP: 36
          };
          var Speed = 41;
          var TotalTime = 63;
          var AppSize = gfBaseConfig.instance.AppSize;
          var flip = !gfFishGroupData.isFlipped();
          var CONFIG_LINE_FISH = [{
            posYStart: !flip ? -100 : AppSize.Height + 100,
            posYEnd: !flip ? 100 : AppSize.Height - 100,
            totalFish: COUNT_FISH.TOP_TOP,
            totalTime: TotalTime,
            angle: !flip ? 90 : -90
          }, {
            posYStart: !flip ? AppSize.Height + 100 : -100,
            posYEnd: !flip ? AppSize.Height - 100 : 100,
            totalFish: COUNT_FISH.BOTTOM_BOTTOM,
            totalTime: TotalTime,
            angle: !flip ? -90 : 90
          }, {
            posYStart: !flip ? -100 : AppSize.Height + 100,
            posYEnd: !flip ? 150 : AppSize.Height - 150,
            totalFish: COUNT_FISH.TOP_BOTTOM,
            totalTime: TotalTime,
            angle: !flip ? 90 : -90
          }, {
            posYStart: !flip ? AppSize.Height + 100 : -100,
            posYEnd: !flip ? AppSize.Height - 150 : 150,
            totalFish: COUNT_FISH.BOTTOM_TOP,
            totalTime: TotalTime,
            angle: !flip ? -90 : 90
          }]; // Formation Fish

          for (var i = 0; i < 18; ++i) {
            var data = gfFishGroupData.getNextFishData();
            if (!data) continue;

            var _this$calculatePosByP = this.calculatePosByPlayerIndexGroup1(i),
                posStart = _this$calculatePosByP.posStart,
                posEnd = _this$calculatePosByP.posEnd;

            var distance = v2Distance(posEnd, posStart);
            var baseMoveTime = distance / Speed;
            data.moveAction = new FishMoveActions(posStart);
            data.moveAction.appendAction(FISH_ACTION.MoveTo, {
              time: baseMoveTime,
              x: posEnd.x,
              y: posEnd.y
            });
            FishGroupHelper.createFishWithDelay(data);
          } // Line fish


          for (var _i = 0; _i < 4; _i++) {
            var config = CONFIG_LINE_FISH[_i];
            var offsetX = AppSize.Width / config.totalFish;
            var moveInTime = 2;
            var stayTime = Math.max(0, config.totalTime - Math.max(0, gfFishGroupData.timeSkipped - 2));
            var moveOutTime = Math.max(0, 3 - Math.max(0, gfFishGroupData.timeSkipped - config.totalTime));

            for (var _i2 = 0; _i2 < config.totalFish; ++_i2) {
              var fishData = gfFishGroupData.getNextFishData();
              if (!fishData) continue;
              var random = randRange(500, -500);
              var endPos = config.angle === 90 ? v2(random, 720) : v2(random, -720);
              var posX = flip ? (config.totalFish - _i2) * offsetX - offsetX / 2 : _i2 * offsetX + offsetX / 2;
              fishData.moveAction = new FishMoveActions(v2(posX, config.posYStart), config.angle);
              fishData.moveAction.appendAction(FISH_ACTION.MoveTo, {
                time: moveInTime,
                x: posX,
                y: config.posYEnd
              });
              fishData.moveAction.appendAction(FISH_ACTION.Delay, {
                time: stayTime
              });
              fishData.moveAction.appendAction(FISH_ACTION.MoveBy, {
                time: randRange(moveOutTime * 10 - 5, moveOutTime * 10) / 10,
                x: endPos.x,
                y: endPos.y,
                motion: 'quartOut'
              }); // fishData.moveOutAction = moveBy(randRange(25, 35) / 10, endPos).easing(easeOut(0.4));

              FishGroupHelper.createFishWithDelay(fishData);
            }
          }
        };

        gfFishGroup1.calculatePosByPlayerIndexGroup1 = function calculatePosByPlayerIndexGroup1(indexFish) {
          var flip = !gfFishGroupData.isFlipped();
          var MaxSceneSize = 1560;
          var MaxSizeGroup = 1200;
          var FixDeltaX = 140;
          var OffsetX = [874, 1355, 1110, 1175, 1110, 550, 650, 650, 570, 570, 490, 490, 410, 410, 330, 330, 250, 250];
          var OffsetY = [385, 360, 443, 360, 266, 370, 510, 210, 510, 210, 510, 210, 510, 210, 510, 210, 510, 210];
          var FlipY = [0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
          var posStartX = flip ? OffsetX[indexFish] - MaxSceneSize : 2 * (MaxSceneSize - FixDeltaX) - OffsetX[indexFish];
          var posStartY = flip ? OffsetY[indexFish] : FlipY[indexFish] ? gfBaseConfig.instance.AppSize.Height - OffsetY[indexFish] : OffsetY[indexFish];
          var posStart = v2(posStartX, posStartY);
          var posEnd = flip ? v2(posStartX + MaxSceneSize + MaxSizeGroup, posStartY) : v2(posStartX - MaxSceneSize - MaxSizeGroup, posStartY);
          return {
            posStart: posStart,
            posEnd: posEnd
          };
        };

        return gfFishGroup1;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishGroup02.ts", ['cc', './gfFishGroupData.ts', './gfBaseConfig.ts', './gfFishGroupHelper.ts', './gfFishMoveActions.ts'], function (exports) {
  'use strict';

  var cclegacy, v2, gfFishGroupData, gfBaseConfig, FishGroupHelper, FishMoveActions, FISH_ACTION;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      v2 = module.v2;
    }, function (module) {
      gfFishGroupData = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      FishGroupHelper = module.default;
    }, function (module) {
      FishMoveActions = module.FishMoveActions;
      FISH_ACTION = module.FISH_ACTION;
    }],
    execute: function () {
      cclegacy._RF.push({}, "1da7c0SU4tOao1KO+bAFaFN", "gfFishGroup02", undefined);

      var gfFishGroup2 = exports('default', /*#__PURE__*/function () {
        function gfFishGroup2() {}

        gfFishGroup2.createGroup2SmallFish = function createGroup2SmallFish(_ref) {
          var count = _ref.count,
              moveUp = _ref.moveUp;
          var distantsBorder = 185;
          var flip = gfFishGroupData.isFlipped();
          var offsetX = gfBaseConfig.instance.realSize.Width / count;
          var height = gfBaseConfig.instance.AppSize.Height;
          moveUp = flip ? moveUp : !moveUp;
          var stopY = moveUp ? height - distantsBorder : distantsBorder;
          var endY = moveUp ? -distantsBorder : height + distantsBorder;

          for (var i = 0; i < count; ++i) {
            var fishInfo = gfFishGroupData.getNextFishData();
            if (!fishInfo) continue;
            var fishOffset = flip ? count - i : i;
            var startX = 10 + gfBaseConfig.instance.SceneBox.Left + fishOffset * offsetX;
            var startY = moveUp ? height + Math.random() * 100 : Math.random() * 100 * -1;
            var moveInTime = 2;
            var stayTime = 40;
            var moveOutTime = 4;
            fishInfo.moveAction = new FishMoveActions(v2(startX, startY), endY > startY ? 90 : -90);
            fishInfo.moveAction.appendAction(FISH_ACTION.MoveTo, {
              time: moveInTime,
              x: startX,
              y: stopY
            });
            fishInfo.moveAction.appendAction(FISH_ACTION.Delay, {
              time: stayTime
            });
            fishInfo.moveAction.appendAction(FISH_ACTION.MoveTo, {
              time: moveOutTime,
              x: startX,
              y: endY
            });
            FishGroupHelper.createFishWithDelay(fishInfo);
          }
        };

        gfFishGroup2.createGroup2BigFish = function createGroup2BigFish(_ref2) {
          var count = _ref2.count,
              upperLine = _ref2.upperLine,
              startX = _ref2.startX,
              endX = _ref2.endX;
          var distantsBorderMore = 255;
          upperLine = gfFishGroupData.isFlipped() ? !upperLine : upperLine;
          var startY = upperLine ? distantsBorderMore : gfBaseConfig.instance.AppSize.Height - distantsBorderMore;

          for (var i = 0; i < count; ++i) {
            var fishInfo = gfFishGroupData.getNextFishData();
            if (!fishInfo) continue;
            var delay = i * 5;
            var defaultMoveTime = 17;
            var moveAction = new FishMoveActions(v2(startX, startY));
            moveAction.appendAction(FISH_ACTION.Delay, {
              time: delay
            });
            moveAction.appendAction(FISH_ACTION.MoveTo, {
              time: defaultMoveTime,
              x: endX,
              y: startY
            });
            fishInfo.moveAction = moveAction;
            FishGroupHelper.createFishWithDelay(fishInfo);
          }
        };

        gfFishGroup2.create = function create() {
          // Two queues move in and wait
          var left = gfBaseConfig.instance.SceneBox.Left - 300;
          var right = gfBaseConfig.instance.SceneBox.Right + 300;
          this.createGroup2SmallFish({
            count: 60,
            moveUp: false
          });
          this.createGroup2SmallFish({
            count: 60,
            moveUp: true
          });
          this.createGroup2BigFish({
            count: 7,
            upperLine: false,
            startX: right,
            endX: left
          });
          this.createGroup2BigFish({
            count: 7,
            upperLine: true,
            startX: left,
            endX: right
          });
        };

        return gfFishGroup2;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishGroup03.ts", ['cc', './gfFishGroupData.ts', './gfBaseConfig.ts', './gfFishGroupHelper.ts', './gfFishMoveActions.ts'], function (exports) {
  'use strict';

  var cclegacy, v2, gfFishGroupData, gfBaseConfig, FishGroupHelper, FishMoveActions, FISH_ACTION;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      v2 = module.v2;
    }, function (module) {
      gfFishGroupData = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      FishGroupHelper = module.default;
    }, function (module) {
      FishMoveActions = module.FishMoveActions;
      FISH_ACTION = module.FISH_ACTION;
    }],
    execute: function () {
      cclegacy._RF.push({}, "9d2f9LT2YNENpQixPEYQg9c", "gfFishGroup03", undefined);

      var gfFishGroup3 = exports('default', /*#__PURE__*/function () {
        function gfFishGroup3() {}

        gfFishGroup3.createCircleFishGroup = function createCircleFishGroup(_ref) {
          var moveTime = _ref.moveTime,
              moveScale = _ref.moveScale,
              count = _ref.count,
              startPos = _ref.startPos,
              radius = _ref.radius,
              _ref$isMoveRight = _ref.isMoveRight,
              isMoveRight = _ref$isMoveRight === void 0 ? false : _ref$isMoveRight;
          var flip = isMoveRight ? gfFishGroupData.flipCoord : -gfFishGroupData.flipCoord;
          var moveOffset = flip * moveScale * (gfBaseConfig.instance.AppSize.Width + 150);
          var angleStep = 360 / count;

          for (var i = 0; i < count; ++i) {
            var fishInfo = gfFishGroupData.getNextFishData();
            if (!fishInfo) continue;
            var fishPos = v2(startPos.x + Math.cos(i * angleStep * Math.PI / 180) * radius * gfFishGroupData.flipCoord, startPos.y + Math.sin(i * angleStep * Math.PI / 180) * radius * gfFishGroupData.flipCoord);
            fishInfo.moveAction = new FishMoveActions(fishPos);
            fishInfo.moveAction.appendAction(FISH_ACTION.MoveBy, {
              time: moveTime,
              x: moveOffset,
              y: 0
            });
            FishGroupHelper.createFishWithDelay(fishInfo);
          }
        };

        gfFishGroup3.create = function create() {
          // Two circle group go facing each other
          var ypos = gfBaseConfig.instance.AppSize.Height / 2;
          var left = -280;
          var right = gfBaseConfig.instance.AppSize.Width - left;

          if (gfFishGroupData.isFlipped()) {
            var _ref2 = [right, left];
            left = _ref2[0];
            right = _ref2[1];
          }

          this.createCircleFishGroup({
            moveTime: 47,
            moveScale: 2,
            count: 40,
            startPos: v2(right, ypos),
            radius: 235
          });
          this.createCircleFishGroup({
            moveTime: 47,
            moveScale: 2,
            count: 30,
            startPos: v2(right, ypos),
            radius: 180
          });
          this.createCircleFishGroup({
            moveTime: 47,
            moveScale: 2,
            count: 20,
            startPos: v2(right, ypos),
            radius: 135
          });
          this.createCircleFishGroup({
            moveTime: 47,
            moveScale: 2,
            count: 1,
            startPos: v2(right, ypos),
            radius: 0
          });
          this.createCircleFishGroup({
            moveTime: 47,
            moveScale: 2,
            count: 40,
            startPos: v2(left, ypos),
            radius: 235,
            isMoveRight: true
          });
          this.createCircleFishGroup({
            moveTime: 47,
            moveScale: 2,
            count: 30,
            startPos: v2(left, ypos),
            radius: 180,
            isMoveRight: true
          });
          this.createCircleFishGroup({
            moveTime: 47,
            moveScale: 2,
            count: 20,
            startPos: v2(left, ypos),
            radius: 135,
            isMoveRight: true
          });
          this.createCircleFishGroup({
            moveTime: 47,
            moveScale: 2,
            count: 1,
            startPos: v2(left, ypos),
            radius: 0,
            isMoveRight: true
          });
        };

        return gfFishGroup3;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishGroup04.ts", ['cc', './gfFishGroupData.ts', './gfBaseConfig.ts', './gfFishGroupHelper.ts', './gfFishMoveActions.ts'], function (exports) {
  'use strict';

  var cclegacy, v2, gfFishGroupData, gfBaseConfig, FishGroupHelper, FishMoveActions, FISH_ACTION;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      v2 = module.v2;
    }, function (module) {
      gfFishGroupData = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      FishGroupHelper = module.default;
    }, function (module) {
      FishMoveActions = module.FishMoveActions;
      FISH_ACTION = module.FISH_ACTION;
    }],
    execute: function () {
      cclegacy._RF.push({}, "a3deaCIfdVLFLAgA/WBmFmJ", "gfFishGroup04", undefined);

      var gfFishGroup4 = exports('default', /*#__PURE__*/function () {
        function gfFishGroup4() {}

        gfFishGroup4.create = function create() {
          //  Two group make a cross.
          var width = gfBaseConfig.instance.AppSize.Width;
          var height = gfBaseConfig.instance.AppSize.Height;
          var offset = 150;
          var line1 = [v2(0 - offset * 2, 0 - offset), v2(width, height + offset)]; // [0,0] => [1,1]

          var line2 = [v2(0, 0 - offset), v2(width + offset * 2, height + offset)]; // [0,0] => [1,1]

          var line3 = [v2(width, 0 - offset), v2(0 - offset * 2, height + offset)]; // [1,0] => [0,1]

          var line4 = [v2(width + offset * 2, 0 - offset), v2(0, height + offset)]; // [1,0] => [0,1]

          var idx0 = gfFishGroupData.isFlipped() ? 1 : 0;
          var idx1 = gfFishGroupData.isFlipped() ? 0 : 1;
          var roadMap = [[line1[idx0], line1[idx1]], [line2[idx0], line2[idx1]], [line3[idx0], line3[idx1]], [line4[idx0], line4[idx1]], [line2[idx1], line2[idx0]], [line1[idx1], line1[idx0]], [line4[idx1], line4[idx0]], [line3[idx1], line3[idx0]]];
          var delayEach = 2.5;

          for (var i = 0; i < 8; i++) {
            for (var j = 0; j < 8; ++j) {
              var fishInfo = gfFishGroupData.getNextFishData();
              if (!fishInfo) continue;
              fishInfo.moveAction = new FishMoveActions(v2(roadMap[i][0].x, roadMap[i][0].y));
              fishInfo.moveAction.appendAction(FISH_ACTION.Delay, {
                time: j * delayEach
              });
              fishInfo.moveAction.appendAction(FISH_ACTION.MoveTo, {
                time: 20,
                x: roadMap[i][1].x,
                y: roadMap[i][1].y
              });
              FishGroupHelper.createFishWithDelay(fishInfo);
            }
          }
        };

        return gfFishGroup4;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishGroup05.ts", ['cc', './gfFishGroupData.ts', './gfBaseConfig.ts', './gfFishGroupHelper.ts', './gfFishMoveActions.ts'], function (exports) {
  'use strict';

  var cclegacy, v2, misc, gfFishGroupData, gfBaseConfig, FishGroupHelper, FishMoveActions, FISH_ACTION;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      v2 = module.v2;
      misc = module.misc;
    }, function (module) {
      gfFishGroupData = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      FishGroupHelper = module.default;
    }, function (module) {
      FishMoveActions = module.FishMoveActions;
      FISH_ACTION = module.FISH_ACTION;
    }],
    execute: function () {
      cclegacy._RF.push({}, "5595fy2gOdBJYy082YR5U9W", "gfFishGroup05", undefined);

      var gfFishGroup5 = exports('default', /*#__PURE__*/function () {
        function gfFishGroup5() {}

        gfFishGroup5.create = function create() {
          // Two cirle rotating then spread out
          var width = gfBaseConfig.instance.AppSize.Width / 2;
          var height = gfBaseConfig.instance.AppSize.Height / 2;
          var offsetX = 480 * 0.67 * gfFishGroupData.flipCoord;
          var radismain = 360 * 0.67;
          this.circleCallback(30, v2(width - offsetX, height), radismain, 16, 720);
          this.circleCallback(30, v2(width + offsetX, height), radismain, 18, 720 + 90);
          this.circleCallback(30, v2(width - offsetX, height), radismain - 34.5, 20, 720 + 180);
          this.circleCallback(30, v2(width + offsetX, height), radismain - 36, 21, 720 + 180 + 45);
          this.circleCallback(18, v2(width - offsetX, height), radismain - 36 - 56, 22, 720 + 180 + 90);
          this.circleCallback(18, v2(width + offsetX, height), radismain - 34.5 - 58.5, 22.66, 720 + 180 + 90 + 30);
          this.circleCallback(8, v2(width - offsetX, height), radismain - 58 - 65 - 34.5, 23.33, 720 + 180 + 90 + 60);
          this.circleCallback(8, v2(width + offsetX, height), radismain - 36 - 56 - 68, 24, 720 + 180 + 90 + 60 + 30);
          this.circleCallback(1, v2(width - offsetX, height), 0, 24.66, -90);
          this.circleCallback(1, v2(width + offsetX, height), 0, 25.33, -90);
        };

        gfFishGroup5.circleCallback = function circleCallback(index, center, radius, fishDuration, angle) {
          var AppSize = gfBaseConfig.instance.AppSize;
          var angleStep = 360 / index;
          var angleOffset = gfFishGroupData.isFlipped() ? 180 : 0;

          for (var i = 0; i < index; ++i) {
            var data = gfFishGroupData.getNextFishData();
            if (!data) continue;
            var startAngle = (i * angleStep + angleOffset) * Math.PI / 180;
            var x = center.x + Math.cos(startAngle) * radius;
            var y = center.y + Math.sin(startAngle) * radius;
            var timeSpent = gfFishGroupData.timeSkipped - data.TimeFreeze;
            var speed = 180;
            data.moveAction = new FishMoveActions(v2(x, y), misc.radiansToDegrees(Math.atan2(y - center.y, x - center.x)), timeSpent);
            data.moveAction.appendAction(FISH_ACTION.CircleBy, {
              time: fishDuration,
              center: center,
              radius: radius,
              angle: angle
            });
            data.moveAction.appendAction(FISH_ACTION.MoveByDistance, {
              time: AppSize.Width / speed,
              distance: AppSize.Width
            });
            data.skipFlipY = true;
            FishGroupHelper.createFishWithDelay(data);
          }
        };

        return gfFishGroup5;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishGroup06.ts", ['cc', './gfBaseConfig.ts', './gfFishGroupHelper.ts'], function (exports) {
  'use strict';

  var cclegacy, gfBaseConfig, FishGroupHelper;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      FishGroupHelper = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "b5638IHvwJP9bQ9P7xCxok9", "gfFishGroup06", undefined);

      var gfFishGroup6 = exports('default', /*#__PURE__*/function () {
        function gfFishGroup6() {}

        gfFishGroup6.create = function create() {
          var fishCount = [30, 30, 30, 24, 24, 12, 1, 1, 1, 1]; // const fishKind = [13, 3, 4, 15, 3, 5, 22, 27, 23, 25];

          var Height = gfBaseConfig.instance.AppSize.Height;
          var Y1 = 150;
          var Y2 = Y1 + 20;
          var Y3 = Y2 + 20;
          var Y4 = Y3 + 50;
          var Y5 = Y4 + 50;
          var Y6 = 360;
          var outerSpace = 210;
          var space = 100;
          var speed = 100; //2 side line

          FishGroupHelper.createFishLine(fishCount[0] / 2, Y1, outerSpace, speed);
          FishGroupHelper.createFishLine(fishCount[0] / 2, Height - Y1, outerSpace, speed);
          FishGroupHelper.createFishLine(fishCount[1] / 2, Y2, outerSpace, speed, -outerSpace / 2);
          FishGroupHelper.createFishLine(fishCount[1] / 2, Height - Y2, outerSpace, speed, -outerSpace / 2);
          FishGroupHelper.createFishLine(fishCount[2] / 2, Y3, outerSpace, speed);
          FishGroupHelper.createFishLine(fishCount[2] / 2, Height - Y3, outerSpace, speed); //3 group in middle

          for (var i = 0; i < 3; ++i) {
            var count = fishCount[3] / 6;
            var xOffset = -i * 2 * space * count;
            FishGroupHelper.createFishLine(count, Y4, space, speed, xOffset);
            FishGroupHelper.createFishLine(count, Height - Y4, space, speed, xOffset);
          }

          for (var _i = 0; _i < 3; ++_i) {
            var _count = fishCount[4] / 6;

            var _xOffset = -_i * 2 * space * _count;

            FishGroupHelper.createFishLine(_count, Y5, space, speed, _xOffset);
            FishGroupHelper.createFishLine(_count, Height - Y5, space, speed, _xOffset);
          }

          for (var _i2 = 0; _i2 < 3; ++_i2) {
            var _count2 = fishCount[5] / 3;

            var _xOffset2 = -_i2 * 2 * space * _count2;

            FishGroupHelper.createFishLine(_count2, Y6, space, speed, _xOffset2);
          } //big fishes


          var bigSpace = space * fishCount[3] / 6;
          FishGroupHelper.createFishLine(1, Y6, 0, speed, -bigSpace * 1.5);
          FishGroupHelper.createFishLine(1, Y6, 0, speed, -bigSpace * 3.5);
          FishGroupHelper.createFishLine(1, Y6, 0, speed, -bigSpace * 5.5);
          FishGroupHelper.createFishLine(1, Y6, 0, speed, -bigSpace * 7);
        };

        return gfFishGroup6;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishGroup06Lite.ts", ['cc', './gfBaseConfig.ts', './gfFishGroupHelper.ts'], function (exports) {
  'use strict';

  var cclegacy, gfBaseConfig, FishGroupHelper;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      FishGroupHelper = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "089c2U6WkpJ7Ymir2ne02co", "gfFishGroup06Lite", undefined);

      var gfFishGroup6 = exports('default', /*#__PURE__*/function () {
        function gfFishGroup6() {}

        gfFishGroup6.create = function create() {
          var fishCount = [20, 20, 20, 12, 12, 6, 1, 1]; //const fishKind = [13, 3, 4, 15, 3, 5, 25, 43];
          //Duration : 59

          var Height = gfBaseConfig.instance.AppSize.Height;
          var Y1 = 150;
          var Y2 = Y1 + 20;
          var Y3 = Y2 + 20;
          var Y4 = Y3 + 50;
          var Y5 = Y4 + 50;
          var Y6 = 360;
          var outerSpace = 210;
          var space = 150;
          var speed = 83; //2 side line

          FishGroupHelper.createFishLine(fishCount[0] / 2, Y1, outerSpace, speed);
          FishGroupHelper.createFishLine(fishCount[0] / 2, Height - Y1, outerSpace, speed);
          FishGroupHelper.createFishLine(fishCount[1] / 2, Y2, outerSpace, speed, -outerSpace / 2);
          FishGroupHelper.createFishLine(fishCount[1] / 2, Height - Y2, outerSpace, speed, -outerSpace / 2);
          FishGroupHelper.createFishLine(fishCount[2] / 2, Y3, outerSpace, speed);
          FishGroupHelper.createFishLine(fishCount[2] / 2, Height - Y3, outerSpace, speed); //3 group in middle

          for (var i = 0; i < 2; ++i) {
            var count = fishCount[3] / 4;
            var xOffset = -i * 2 * space * count;
            FishGroupHelper.createFishLine(count, Y4, space, speed, xOffset);
            FishGroupHelper.createFishLine(count, Height - Y4, space, speed, xOffset);
          }

          for (var _i = 0; _i < 2; ++_i) {
            var _count = fishCount[4] / 4;

            var _xOffset = -_i * 2 * space * _count;

            FishGroupHelper.createFishLine(_count, Y5, space, speed, _xOffset);
            FishGroupHelper.createFishLine(_count, Height - Y5, space, speed, _xOffset);
          }

          for (var _i2 = 0; _i2 < 2; ++_i2) {
            var _count2 = fishCount[5] / 2;

            var _xOffset2 = -_i2 * 2 * space * _count2;

            FishGroupHelper.createFishLine(_count2, Y6, space, speed, _xOffset2);
          } //big fishes


          var bigSpace = space * fishCount[3] / 4;
          FishGroupHelper.createFishLine(1, Y6, 0, speed, -bigSpace * 1.5);
          FishGroupHelper.createFishLine(1, Y6, 0, speed, -bigSpace * 3.5);
        };

        return gfFishGroup6;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishGroup07.ts", ['cc', './gfFishGroupData.ts', './gfBaseConfig.ts', './gfFishGroupHelper.ts', './gfFishMoveActions.ts'], function (exports) {
  'use strict';

  var cclegacy, v2, gfFishGroupData, gfBaseConfig, FishGroupHelper, FishMoveActions, FISH_ACTION;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      v2 = module.v2;
    }, function (module) {
      gfFishGroupData = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      FishGroupHelper = module.default;
    }, function (module) {
      FishMoveActions = module.FishMoveActions;
      FISH_ACTION = module.FISH_ACTION;
    }],
    execute: function () {
      cclegacy._RF.push({}, "7424fix9kFNka51UE3O3zM5", "gfFishGroup07", undefined);

      var gfFishGroup7 = exports('default', /*#__PURE__*/function () {
        function gfFishGroup7() {}

        gfFishGroup7.create = function create() {
          var AppSize = gfBaseConfig.instance.AppSize;
          var fishCount = [50, 50, 50, 2, 1, 3, 1]; // const fishKind = [13, 3, 4, 25, 43, 25, 30];

          var Y1 = 140;
          var space = 175;
          var speed = 150;
          FishGroupHelper.createFishLine(fishCount[0] / 2, Y1, space, speed);
          FishGroupHelper.createFishLine(fishCount[0] / 2, AppSize.Height - Y1, space, speed);
          var offsetX = 80;
          var timeEach = 5;
          this.makeBezierLine(fishCount[1] / 2, v2(-100, -100), offsetX, 3, timeEach);
          this.makeBezierLine(fishCount[1] / 2, v2(-100, AppSize.Height + 100), offsetX, 3, timeEach);
          this.makeBezierLine(fishCount[2] / 2, v2(-300, 100), offsetX, 6, timeEach, timeEach / 2);
          this.makeBezierLine(fishCount[2] / 2, v2(-300, AppSize.Height - 100), offsetX, 6, timeEach, timeEach / 2);
          gfFishGroupData.updateCustomZIndex(555);
          var bigSpace = 400;
          var midY = 360;
          var bigOffset = -1000;
          var bigSpeed = 120;
          FishGroupHelper.createFishLine(fishCount[3], midY, bigSpace, bigSpeed, bigOffset);
          FishGroupHelper.createFishLine(fishCount[4], midY, bigSpace, bigSpeed, bigOffset - fishCount[3] * bigSpace);
          FishGroupHelper.createFishLine(fishCount[5], midY, bigSpace, bigSpeed, bigOffset - (fishCount[3] + fishCount[4]) * bigSpace);
          FishGroupHelper.createFishLine(fishCount[6], midY, bigSpace, bigSpeed, bigOffset - (fishCount[3] + fishCount[4] + fishCount[5]) * bigSpace);
        };

        gfFishGroup7.makeBezierLine = function makeBezierLine(fishCount, startPos, offsetX, circleCount, moveInTime, circleTime) {
          if (circleTime === void 0) {
            circleTime = moveInTime;
          }

          var AppSize = gfBaseConfig.instance.AppSize;
          var width = (AppSize.Width - offsetX * 2) / circleCount;
          var height = width * 0.7;
          var x = offsetX - startPos.x;

          if (gfFishGroupData.isFlipped()) {
            startPos.x = AppSize.Width - startPos.x;
            startPos.y = AppSize.Height - startPos.y;
          }

          var y = 360 - startPos.y;

          for (var i = 0; i < fishCount; ++i) {
            var data = gfFishGroupData.getNextFishData();
            if (!data) continue;
            var delay = i * 1.0;
            var flip = y > 0 ? 1 : -1;
            data.moveAction = new FishMoveActions(startPos);
            data.moveAction.appendAction(FISH_ACTION.Delay, {
              time: delay
            });
            data.moveAction.appendAction(FISH_ACTION.gfBezierBy, {
              time: moveInTime,
              points: [v2(gfFishGroupData.flipCoord * x * 0.65, 0), v2(gfFishGroupData.flipCoord * x, y / 3), v2(gfFishGroupData.flipCoord * x, y)]
            });

            for (var j = 0; j < circleCount; ++j) {
              data.moveAction.appendAction(FISH_ACTION.gfBezierBy, {
                time: circleTime,
                points: [v2(0, flip * height), v2(gfFishGroupData.flipCoord * width, flip * height), v2(gfFishGroupData.flipCoord * width, 0)]
              });
              flip *= -1;
            }

            data.moveAction.appendAction(FISH_ACTION.gfBezierBy, {
              time: moveInTime,
              points: [v2(0, -y / 3), v2(gfFishGroupData.flipCoord * x * 0.35, -y), v2(gfFishGroupData.flipCoord * x, -y)]
            });
            FishGroupHelper.createFishWithDelay(data);
          }
        };

        return gfFishGroup7;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishGroup07Lite.ts", ['cc', './gfFishGroupData.ts', './gfBaseConfig.ts', './gfFishGroupHelper.ts', './gfFishMoveActions.ts'], function (exports) {
  'use strict';

  var cclegacy, v2, gfFishGroupData, gfBaseConfig, FishGroupHelper, FishMoveActions, FISH_ACTION;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      v2 = module.v2;
    }, function (module) {
      gfFishGroupData = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      FishGroupHelper = module.default;
    }, function (module) {
      FishMoveActions = module.FishMoveActions;
      FISH_ACTION = module.FISH_ACTION;
    }],
    execute: function () {
      cclegacy._RF.push({}, "d548cUXyApJ653H3E5Rkq64", "gfFishGroup07Lite", undefined);

      var gfFishGroup7Lite = exports('default', /*#__PURE__*/function () {
        function gfFishGroup7Lite() {}

        gfFishGroup7Lite.create = function create() {
          var AppSize = gfBaseConfig.instance.AppSize;
          var fishCount = [24, 24, 24, 1, 1, 1, 1]; // const fishKind = [13, 3, 4, 25, 43, 25];
          //Duration : 40

          var Y1 = 140;
          var space = 175;
          var speed = 150;
          FishGroupHelper.createFishLine(fishCount[0] / 2, Y1, space, speed);
          FishGroupHelper.createFishLine(fishCount[0] / 2, AppSize.Height - Y1, space, speed);
          var offsetX = 80;
          var timeEach = 5;
          this.makeBezierLine(fishCount[1] / 2, v2(-100, -100), offsetX + 150, 3, timeEach);
          this.makeBezierLine(fishCount[1] / 2, v2(-100, AppSize.Height + 100), offsetX + 150, 3, timeEach);
          this.makeBezierLine(fishCount[2] / 2, v2(-300, 100), offsetX, 6, timeEach, timeEach / 2);
          this.makeBezierLine(fishCount[2] / 2, v2(-300, AppSize.Height - 100), offsetX, 6, timeEach, timeEach / 2);
          gfFishGroupData.updateCustomZIndex(555);
          var bigSpace = 400;
          var midY = 360;
          var bigOffset = -1000;
          var bigSpeed = 120;
          FishGroupHelper.createFishLine(fishCount[3], midY, bigSpace, bigSpeed, bigOffset);
          FishGroupHelper.createFishLine(fishCount[4], midY, bigSpace, bigSpeed, bigOffset - fishCount[3] * bigSpace);
          FishGroupHelper.createFishLine(fishCount[5], midY, bigSpace, bigSpeed, bigOffset - (fishCount[3] + fishCount[4]) * bigSpace);
          FishGroupHelper.createFishLine(fishCount[6], midY, bigSpace, bigSpeed, bigOffset - (fishCount[3] + fishCount[4] + fishCount[5]) * bigSpace);
        };

        gfFishGroup7Lite.makeBezierLine = function makeBezierLine(fishCount, startPos, offsetX, circleCount, moveInTime, circleTime) {
          if (circleTime === void 0) {
            circleTime = moveInTime;
          }

          var AppSize = gfBaseConfig.instance.AppSize;
          var width = (AppSize.Width - offsetX * 2) / circleCount;
          var height = width * 0.7;
          var x = offsetX - startPos.x;

          if (gfFishGroupData.isFlipped()) {
            startPos.x = AppSize.Width - startPos.x;
            startPos.y = AppSize.Height - startPos.y;
          }

          var y = 360 - startPos.y;

          for (var i = 0; i < fishCount; ++i) {
            var data = gfFishGroupData.getNextFishData();
            if (!data) continue;
            var delay = +i;
            var flip = y > 0 ? 1 : -1;
            data.moveAction = new FishMoveActions(startPos);
            data.moveAction.appendAction(FISH_ACTION.Delay, {
              time: delay
            });
            data.moveAction.appendAction(FISH_ACTION.gfBezierBy, {
              time: moveInTime,
              points: [v2(gfFishGroupData.flipCoord * x * 0.65, 0), v2(gfFishGroupData.flipCoord * x, y / 3), v2(gfFishGroupData.flipCoord * x, y)]
            });

            for (var j = 0; j < circleCount; ++j) {
              data.moveAction.appendAction(FISH_ACTION.gfBezierBy, {
                time: circleTime,
                points: [v2(0, flip * height), v2(gfFishGroupData.flipCoord * width, flip * height), v2(gfFishGroupData.flipCoord * width, 0)]
              });
              flip *= -1;
            }

            var flipRate = circleCount % 2 ? -1 : 1;
            data.moveAction.appendAction(FISH_ACTION.gfBezierBy, {
              time: moveInTime,
              points: [v2(0, flipRate * y / 3), v2(gfFishGroupData.flipCoord * x * 0.35, flipRate * y), v2(gfFishGroupData.flipCoord * x, flipRate * y)]
            });
            FishGroupHelper.createFishWithDelay(data);
          }
        };

        return gfFishGroup7Lite;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishGroup08.ts", ['cc', './gfFishGroupData.ts', './gfBaseConfig.ts', './gfFishGroupHelper.ts', './gfFishMoveActions.ts'], function (exports) {
  'use strict';

  var cclegacy, v2, gfFishGroupData, gfBaseConfig, FishGroupHelper, FishMoveActions, FISH_ACTION;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      v2 = module.v2;
    }, function (module) {
      gfFishGroupData = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      FishGroupHelper = module.default;
    }, function (module) {
      FishMoveActions = module.FishMoveActions;
      FISH_ACTION = module.FISH_ACTION;
    }],
    execute: function () {
      cclegacy._RF.push({}, "fa5c1asIh5GBqK2Mxd4pFUP", "gfFishGroup08", undefined);

      var gfFishGroup8 = exports('default', /*#__PURE__*/function () {
        function gfFishGroup8() {}

        gfFishGroup8.makeBezierLine8 = function makeBezierLine8(fishCount, circleCount, customHeight, circleTime) {
          var AppSize = gfBaseConfig.instance.AppSize;
          var width = (AppSize.Width + 100) / (circleCount + 1);
          var height = customHeight ? customHeight : width * 0.7;
          var startPos = v2(-width / 2 - 100, AppSize.Height / 2);

          if (gfFishGroupData.isFlipped()) {
            startPos.x = AppSize.Width - startPos.x;
            startPos.y = AppSize.Height - startPos.y;
          }

          var y = 360 - startPos.y;

          for (var i = 0; i < fishCount; ++i) {
            var data = gfFishGroupData.getNextFishData();
            if (!data) continue;
            var delay = i * 1.0;
            var flip = y > 0 ? 1 : -1;
            data.moveAction = new FishMoveActions(startPos);
            data.moveAction.appendAction(FISH_ACTION.Delay, {
              time: delay
            });

            for (var j = 0; j < circleCount + 2; ++j) {
              data.moveAction.appendAction(FISH_ACTION.gfBezierBy, {
                time: circleTime,
                points: [v2(0, flip * height), v2(gfFishGroupData.flipCoord * width, flip * height), v2(gfFishGroupData.flipCoord * width, 0)]
              });
              flip *= -1;
            }

            FishGroupHelper.createFishWithDelay(data);
          }
        };

        gfFishGroup8.create = function create() {
          var fishCount = [50, 50, 1, 1, 1, 1, 1, 1, 1]; // const fishKind = [13, 3, 22, 20, 22, 43, 20, 22, 20];

          var timeEach = 5;
          var circleCount = 2;
          var AppSize = gfBaseConfig.instance.AppSize;
          var width = AppSize.Width / (circleCount + 1);
          var height = width * 0.7;
          this.makeBezierLine8(fishCount[0] / 2, circleCount, height, timeEach);
          this.makeBezierLine8(fishCount[0] / 2, circleCount, -height, timeEach);
          this.makeBezierLine8(fishCount[1] / 2, circleCount, 100, timeEach);
          this.makeBezierLine8(fishCount[1] / 2, circleCount, -100, timeEach);
          gfFishGroupData.updateCustomZIndex(555);
          var bigSpace = 400;
          var midY = 360;
          var bigSpeed = 95;

          for (var i = 0; i < fishCount.length - 2; ++i) {
            FishGroupHelper.createFishLine(fishCount[i + 2], midY, 0, bigSpeed, -bigSpace * i);
          }
        };

        return gfFishGroup8;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishGroup09.ts", ['cc', './gfFishGroupData.ts', './gfBaseConfig.ts', './gfFishGroupHelper.ts', './gfFishMoveActions.ts'], function (exports) {
  'use strict';

  var cclegacy, v2, gfFishGroupData, gfBaseConfig, FishGroupHelper, FishMoveActions, FISH_ACTION;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      v2 = module.v2;
    }, function (module) {
      gfFishGroupData = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      FishGroupHelper = module.default;
    }, function (module) {
      FishMoveActions = module.FishMoveActions;
      FISH_ACTION = module.FISH_ACTION;
    }],
    execute: function () {
      cclegacy._RF.push({}, "29ebfOKP2tFapzOl76NmwDa", "gfFishGroup09", undefined);

      var gfFishGroup9 = exports('default', /*#__PURE__*/function () {
        function gfFishGroup9() {}

        gfFishGroup9.create = function create() {
          var fishCount = [30, 16, 1, 1];
          var AppSize = gfBaseConfig.instance.AppSize;
          var midY = AppSize.Height / 2;
          var offsetX = 200;
          var offsetX2 = 250;
          var radius1 = 250;
          var radius2 = 170;
          var center1 = v2(AppSize.Width * 0.75, midY);
          var center2 = v2(AppSize.Width * 0.25, midY);
          this.createFish9Line(fishCount[0] / 2, v2(-offsetX, midY + radius1), center1, 0.65);
          this.createFish9Line(fishCount[0] / 2, v2(AppSize.Width + offsetX, midY - radius1), center2, 0.65);
          this.createFish9Line(fishCount[1] / 2, v2(-offsetX2, midY + radius2), center1, 1.2);
          this.createFish9Line(fishCount[1] / 2, v2(AppSize.Width + offsetX2, midY - radius2), center2, 1.2);
          this.createBigFish9(v2(-offsetX, midY), center2, v2(AppSize.Width + offsetX, midY));
          this.createBigFish9(v2(AppSize.Width + offsetX, midY), center1, v2(-offsetX, midY));
        };

        gfFishGroup9.createFish9Line = function createFish9Line(fishCount, startPos, center, delay) {
          startPos = FishGroupHelper.convertFlipCoordinate(startPos);
          center = FishGroupHelper.convertFlipCoordinate(center);
          var fishSpeed = 120;
          var radius = Math.abs(center.y - startPos.y);
          var circleTime = 9.75; //2 * Math.PI * radius / fishSpeed;

          var circleCount = 3;
          var moveInTime = Math.abs(center.x - startPos.x) / fishSpeed;
          var delayEach = delay;
          var dir = center.x > startPos.x ? 1 : -1;

          for (var i = 0; i < fishCount; ++i) {
            var data = gfFishGroupData.getNextFishData();
            if (!data) continue;

            var _delay = i * delayEach;

            data.moveAction = new FishMoveActions(startPos);
            data.moveAction.appendAction(FISH_ACTION.Delay, {
              time: _delay
            });
            data.moveAction.appendAction(FISH_ACTION.MoveBy, {
              time: moveInTime,
              x: center.x - startPos.x,
              y: 0
            });
            data.moveAction.appendAction(FISH_ACTION.CircleBy, {
              time: circleTime * circleCount,
              center: center,
              radius: radius,
              angle: -360 * circleCount
            });
            data.moveAction.appendAction(FISH_ACTION.MoveBy, {
              time: moveInTime,
              x: dir * moveInTime * fishSpeed,
              y: 0
            });
            FishGroupHelper.createFishWithDelay(data);
          }
        };

        gfFishGroup9.createBigFish9 = function createBigFish9(startPos, standPos, endPos) {
          var data = gfFishGroupData.getNextFishData();
          if (!data) return;
          startPos = FishGroupHelper.convertFlipCoordinate(startPos);
          standPos = FishGroupHelper.convertFlipCoordinate(standPos);
          endPos = FishGroupHelper.convertFlipCoordinate(endPos);
          var fishSpeed = 120;
          var moveInTime = Math.abs(standPos.x - startPos.x) / fishSpeed;
          var moveOutTime = Math.abs(endPos.x - standPos.x) / fishSpeed;
          data.moveAction = new FishMoveActions(startPos, standPos.x - startPos.x > 0 ? 0 : 180);
          data.moveAction.appendAction(FISH_ACTION.MoveBy, {
            time: moveInTime,
            x: standPos.x - startPos.x,
            y: 0
          });
          data.moveAction.appendAction(FISH_ACTION.Delay, {
            time: 40
          });
          data.moveAction.appendAction(FISH_ACTION.MoveBy, {
            time: moveOutTime,
            x: endPos.x - standPos.x,
            y: 0
          });
          FishGroupHelper.createFishWithDelay(data);
        };

        return gfFishGroup9;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishGroup10.ts", ['cc', './gfFishGroupData.ts', './gfBaseConfig.ts', './gfFishGroupHelper.ts', './gfFishMoveActions.ts'], function (exports) {
  'use strict';

  var cclegacy, v2, gfFishGroupData, gfBaseConfig, FishGroupHelper, FishMoveActions, FISH_ACTION;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      v2 = module.v2;
    }, function (module) {
      gfFishGroupData = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      FishGroupHelper = module.default;
    }, function (module) {
      FishMoveActions = module.FishMoveActions;
      FISH_ACTION = module.FISH_ACTION;
    }],
    execute: function () {
      cclegacy._RF.push({}, "c33ecRkarROK4NscyvGAC/1", "gfFishGroup10", undefined);

      var gfFishGroup10 = exports('default', /*#__PURE__*/function () {
        function gfFishGroup10() {}

        gfFishGroup10.create = function create() {
          var fishCount = [30, 20, 20, 20, 20, 20, 20];
          var delayEach = 3;
          var i = 0;
          this.createFish10Wave(fishCount[i], delayEach * i++);
          this.createFish10Wave(fishCount[i], delayEach * i++);
          this.createFish10Wave(fishCount[i], delayEach * i++);
          this.createFish10Wave(fishCount[i], delayEach * i++);
          this.createFish10Wave(fishCount[i], delayEach * i++);
          this.createFish10Wave(fishCount[i], delayEach * i++);
          this.createFish10Wave(fishCount[i], delayEach * i++);
        };

        gfFishGroup10.createFish10Wave = function createFish10Wave(fishCount, baseDelay) {
          var totalRotateTime = 0.5;

          for (var i = 1; i <= fishCount / 2; ++i) {
            var angle = gfFishGroupData.flipCoord * 90 - i / fishCount * 360;
            var rotateTime = totalRotateTime * i / fishCount;
            this.createSingleFish10(baseDelay, angle, rotateTime);
          }

          for (var _i = fishCount / 2 - 1; _i >= 0; --_i) {
            var _angle = gfFishGroupData.flipCoord * 90 + _i / fishCount * 360;

            var _rotateTime = totalRotateTime * _i / fishCount;

            this.createSingleFish10(baseDelay, _angle, _rotateTime);
          }
        };

        gfFishGroup10.createSingleFish10 = function createSingleFish10(baseDelay, angle, rotateTime) {
          var data = gfFishGroupData.getNextFishData();
          if (!data) return;
          var AppSize = gfBaseConfig.instance.AppSize;
          var startPos = FishGroupHelper.convertFlipCoordinate(v2(AppSize.Width / 2, -100));
          var center = v2(AppSize.Width / 2, AppSize.Height / 2);
          var fishSpeed = 80;
          var moveInTime = Math.abs(center.y - startPos.y) / fishSpeed;
          var moveAction = new FishMoveActions(startPos);
          moveAction.appendAction(FISH_ACTION.Delay, {
            time: baseDelay
          });
          moveAction.appendAction(FISH_ACTION.MoveBy, {
            time: moveInTime,
            x: 0,
            y: center.y - startPos.y
          });
          moveAction.appendAction(FISH_ACTION.RotateTo, {
            time: rotateTime,
            angle: angle
          }); // moveAction.appendAction(FISH_ACTION.Delay, { time: standTime });

          var moveOutTime = AppSize.Width / fishSpeed;
          moveAction.appendAction(FISH_ACTION.MoveByDistance, {
            time: moveOutTime,
            angle: angle * Math.PI / 180,
            distance: AppSize.Width
          });
          data.moveAction = moveAction;
          FishGroupHelper.createFishWithDelay(data);
        };

        return gfFishGroup10;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishGroup11.ts", ['cc', './gfFishGroupData.ts', './gfBaseConfig.ts', './gfFishGroupHelper.ts', './gfFishMoveActions.ts'], function (exports) {
  'use strict';

  var cclegacy, v2, gfFishGroupData, gfBaseConfig, FishGroupHelper, FishMoveActions, FISH_ACTION;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      v2 = module.v2;
    }, function (module) {
      gfFishGroupData = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      FishGroupHelper = module.default;
    }, function (module) {
      FishMoveActions = module.FishMoveActions;
      FISH_ACTION = module.FISH_ACTION;
    }],
    execute: function () {
      cclegacy._RF.push({}, "9dc94Ev3bpM4pWEykAtrhA9", "gfFishGroup11", undefined);

      var gfFishGroup11 = exports('default', /*#__PURE__*/function () {
        function gfFishGroup11() {}

        gfFishGroup11.create = function create() {
          var fishCount = [20, 20, 16, 16, 14, 14, 8];
          var delayEach = 3;
          var i = 0;
          this.createFish11Wave(fishCount[i], delayEach * i++);
          this.createFish11Wave(fishCount[i], delayEach * i++);
          this.createFish11Wave(fishCount[i], delayEach * i++);
          this.createFish11Wave(fishCount[i], delayEach * i++);
          this.createFish11Wave(fishCount[i], delayEach * i++);
          this.createFish11Wave(fishCount[i], delayEach * i++);
          this.createFish11Wave(fishCount[i], delayEach * i++);
        };

        gfFishGroup11.createFish11Wave = function createFish11Wave(fishCount, baseDelay) {
          for (var i = 1; i <= fishCount / 2; ++i) {
            var angle = gfFishGroupData.flipCoord * 90 - i / fishCount * 360;
            this.createSingleFish11(baseDelay, angle);
          }

          for (var _i = fishCount / 2 - 1; _i >= 0; --_i) {
            var _angle = gfFishGroupData.flipCoord * 90 + _i / fishCount * 360;

            this.createSingleFish11(baseDelay, _angle);
          }
        };

        gfFishGroup11.createSingleFish11 = function createSingleFish11(baseDelay, angle) {
          var data = gfFishGroupData.getNextFishData();
          if (!data) return;
          var AppSize = gfBaseConfig.instance.AppSize;
          var startPos = FishGroupHelper.convertFlipCoordinate(v2(AppSize.Width / 2, -100));
          var center = v2(AppSize.Width / 2, AppSize.Height / 2);
          var fishSpeed = 80;
          var moveInTime = Math.abs(center.y - startPos.y) / fishSpeed;
          var moveAction = new FishMoveActions(startPos);
          moveAction.appendAction(FISH_ACTION.Delay, {
            time: baseDelay
          });
          moveAction.appendAction(FISH_ACTION.MoveBy, {
            time: moveInTime,
            x: 0,
            y: center.y - startPos.y
          });
          var moveOutTime = AppSize.Width / fishSpeed;
          var radius = 400;
          this.makeBezierLine(angle, moveAction, moveInTime, radius);
          moveAction.appendAction(FISH_ACTION.MoveByDistance, {
            time: moveOutTime,
            angle: (angle - 135) * Math.PI / 180,
            distance: AppSize.Width
          });
          data.moveAction = moveAction;
          FishGroupHelper.createFishWithDelay(data);
        };

        gfFishGroup11.makeBezierLine = function makeBezierLine(angle, moveAction, moveOutTime, radius) {
          if (radius === void 0) {
            radius = 400;
          }

          var pos1 = v2(radius * Math.cos(angle * Math.PI / 180), radius * Math.sin(angle * Math.PI / 180));
          var pos2 = v2(radius * Math.cos((angle + 45) * Math.PI / 180), radius * Math.sin((angle + 45) * Math.PI / 180));
          var pos3 = v2(0, 0);
          moveAction.appendAction(FISH_ACTION.gfBezierBy, {
            time: moveOutTime,
            points: [pos1, pos2, pos3]
          });
        };

        return gfFishGroup11;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishGroup12.ts", ['cc', './gfFishGroupData.ts', './gfBaseConfig.ts', './gfFishGroupHelper.ts', './gfFishMoveActions.ts'], function (exports) {
  'use strict';

  var cclegacy, v2, bezier, gfFishGroupData, gfBaseConfig, FishGroupHelper, FishMoveActions, FISH_ACTION;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      v2 = module.v2;
      bezier = module.bezier;
    }, function (module) {
      gfFishGroupData = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      FishGroupHelper = module.default;
    }, function (module) {
      FishMoveActions = module.FishMoveActions;
      FISH_ACTION = module.FISH_ACTION;
    }],
    execute: function () {
      cclegacy._RF.push({}, "bcd346mb2xEy4n+H6KcqbI7", "gfFishGroup12", undefined);

      var gfFishGroup12 = exports('default', /*#__PURE__*/function () {
        function gfFishGroup12() {}

        gfFishGroup12.create = function create() {
          // const fishCount = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,  1, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 2];
          // const fishKind =  [21, 15, 21, 15, 12, 6, 12, 6, 1, 5, 30, 47, 17, 14, 18, 14, 18, 8, 11, 8, 11, 2, 4, 30, 27, 23];
          var width = gfBaseConfig.instance.AppSize.Width;
          var height = gfBaseConfig.instance.AppSize.Height;
          var offset = 200;
          var botLeftToTopRight = [[v2(0 - offset * 2, 0 + offset), v2(width + offset * 1.5, height + offset)], [v2(0 + offset, 0 - offset / 2), v2(width - offset * 1.25, height + offset)], [v2(0 - offset * 1.75, 0 + offset / 4), v2(width + offset * 1.25, height + offset)], [v2(0 - offset * 1.75, 0 - offset / 4), v2(width + offset * 1.25, height + offset)], [v2(0 - offset * 1.75, 0), v2(width + offset * 1.25, height + offset)]];
          botLeftToTopRight['fish30'] = [v2(0 - offset * 1.75, 0), v2(width + offset * 1.25, height + offset)];
          botLeftToTopRight['outLine'] = [v2(0 - offset * 2, 0 + offset * 1.75), v2(width + offset, height + offset)];
          var topRightToBotLeft = [[v2(width + offset * 2, height - offset), v2(-(width + offset * 1.5), -(height + offset))], [v2(width - offset, height + offset / 2), v2(-(width - offset * 1.25), -(height + offset))], [v2(width + offset * 1.75, height - offset / 4), v2(-(width + offset * 1.25), -(height + offset))], [v2(width + offset * 1.75, height + offset / 4), v2(-(width + offset * 1.25), -(height + offset))], [v2(width + offset * 1.75, height), v2(-(width + offset * 1.25), -(height + offset))] //mid lane
          ];
          topRightToBotLeft['fish30'] = [v2(width + offset * 1.75, height), v2(-(width + offset * 1.25), -(height + offset))];
          topRightToBotLeft['outLine'] = [v2(width + offset * 2, height - offset * 1.75), v2(-(width + offset), -(height + offset))];
          var botRightToTopLeft = [[v2(width + offset * 2, 0 + offset), v2(-(width + offset * 1.5), height + offset)], [v2(width - offset, 0 - offset / 2), v2(-(width - offset * 1.25), height + offset)], [v2(width + offset * 1.75, 0 + offset / 4), v2(-(width + offset * 1.25), height + offset)], [v2(width + offset * 1.75, 0 - offset / 4), v2(-(width + offset * 1.25), height + offset)], [v2(width + offset * 1.75, 0), v2(-(width + offset * 1.25), height + offset)]];
          botRightToTopLeft['fish30'] = [v2(width + offset * 1.75, 0), v2(-(width + offset * 1.25), height + offset)];
          botRightToTopLeft['outLine'] = [v2(width + offset * 2, 0 + offset * 1.75), v2(-(width + offset), height + offset)];
          var topLeftToBotRight = [[v2(0 - offset * 2, height - offset), v2(width + offset * 1.5, -(height + offset))], [v2(0 + offset, height + offset / 2), v2(width - offset * 1.25, -(height + offset))], [v2(0 - offset * 1.75, height + offset / 4), v2(width + offset * 1.25, -(height + offset))], [v2(0 - offset * 1.75, height - offset / 4), v2(width + offset * 1.25, -(height + offset))], [v2(0 - offset * 1.75, height), v2(width + offset * 1.25, -(height + offset))] //mid lane
          ];
          topLeftToBotRight['fish30'] = [v2(0 - offset * 1.75, height), v2(width + offset * 1.25, -(height + offset))];
          topLeftToBotRight['outLine'] = [v2(0 - offset * 2, height - offset * 1.75), v2(width + offset, -(height + offset))];

          if (gfFishGroupData.isFlipped()) {
            this._flow(botRightToTopLeft, 0);

            this._flow(botLeftToTopRight, 20);
          } else {
            this._flow(topLeftToBotRight, 0);

            this._flow(topRightToBotLeft, 20);
          }
        };

        gfFishGroup12._flow = function _flow(config, timeFlow) {
          for (var i = 0; i < config.length; i++) {
            this._runFlow(config[i], timeFlow, i);
          }

          this._runFish30(config['fish30'], timeFlow);

          this._runFish43(config['fish30'], timeFlow);

          this._runFishOutLine(config['outLine'], timeFlow);
        };

        gfFishGroup12._runFishOutLine = function _runFishOutLine(flow, timeFlow) {
          for (var i = 0; i < 2; i++) {
            var data = gfFishGroupData.getNextFishData();
            if (!data) continue;
            var moveAction = new FishMoveActions(flow[0]);
            var timeLeft = Math.max(0, 20);
            var delay = i * 6 + timeFlow;
            var config = this.randomBezierFish(flow[0], flow[1], 0.1);
            moveAction.appendAction(FISH_ACTION.Delay, {
              time: delay
            });
            moveAction.appendAction(FISH_ACTION.gfBezierBy, {
              time: timeLeft,
              points: config
            });
            data.moveAction = moveAction;
            FishGroupHelper.createFishWithDelay(data);
          }
        };

        gfFishGroup12._runFish30 = function _runFish30(flow, timeFlow) {
          var data = gfFishGroupData.getNextFishData();
          if (!data) return;
          var moveAction = new FishMoveActions(flow[0]);
          var timeLeft = Math.max(0, 15);
          var config = this.randomBezierFish(flow[0], flow[1], 0.1);
          moveAction.appendAction(FISH_ACTION.Delay, {
            time: 0 + timeFlow + 7.5
          });
          moveAction.appendAction(FISH_ACTION.gfBezierBy, {
            time: timeLeft,
            points: config
          });
          data.moveAction = moveAction;
          FishGroupHelper.createFishWithDelay(data);
        };

        gfFishGroup12._runFish43 = function _runFish43(flow, timeFlow) {
          var data = gfFishGroupData.getNextFishData();
          var config = this.randomBezierFish(flow[0], flow[1], 0.1);

          if (timeFlow == 0) {
            this.FlowerMoveData = [flow[0]];

            for (var i = 0; i < config.length; ++i) {
              this.FlowerMoveData[i + 1] = v2(this.FlowerMoveData[0].x + config[i].x, this.FlowerMoveData[0].y + config[i].y);
            }
          }

          if (!data) return;
          var moveAction = new FishMoveActions(flow[0]);
          var timeLeft = Math.max(0, 15);
          moveAction.appendAction(FISH_ACTION.Delay, {
            time: 0 + timeFlow + 6
          });
          moveAction.appendAction(FISH_ACTION.gfBezierBy, {
            time: timeLeft,
            points: config
          });
          data.moveAction = moveAction;
          FishGroupHelper.createFishWithDelay(data);
        };

        gfFishGroup12._runFlow = function _runFlow(flow, timeFlow, index) {
          var totalFish = index > 1 ? 8 : 8;

          if (index < 2) {
            var delayEach = 3;

            for (var i = 0; i < 4; i++) {
              var data = gfFishGroupData.getNextFishData();
              if (!data) continue;
              var moveAction = new FishMoveActions(flow[0]);
              var delay = i * delayEach + timeFlow;
              var timeLeft = Math.max(0, 15);
              var config = this.randomBezierFish(flow[0], flow[1], 0.1);
              moveAction.appendAction(FISH_ACTION.Delay, {
                time: delay
              });
              moveAction.appendAction(FISH_ACTION.gfBezierBy, {
                time: timeLeft,
                points: config
              });
              data.moveAction = moveAction;
              FishGroupHelper.createFishWithDelay(data);
            }

            for (var _i = 0; _i < 4; _i++) {
              var _data = gfFishGroupData.getNextFishData();

              if (!_data) continue;

              var _moveAction = new FishMoveActions(flow[0]);

              var _delay = (_i + 0.5) * delayEach + timeFlow;

              var _timeLeft = Math.max(0, 15);

              var _config = this.randomBezierFish(flow[0], flow[1], 0.1);

              _moveAction.appendAction(FISH_ACTION.Delay, {
                time: _delay
              });

              _moveAction.appendAction(FISH_ACTION.gfBezierBy, {
                time: _timeLeft,
                points: _config
              });

              _data.moveAction = _moveAction;
              FishGroupHelper.createFishWithDelay(_data);
            }
          } else {
            var _delayEach = 1.5;

            for (var _i2 = 0; _i2 < totalFish; _i2++) {
              var _data2 = gfFishGroupData.getNextFishData();

              if (!_data2) continue;

              var _moveAction2 = new FishMoveActions(flow[0]);

              var _delay2 = _i2 * _delayEach + timeFlow;

              var _timeLeft2 = Math.max(0, 15);

              var _config2 = this.randomBezierFish(flow[0], flow[1], 0.1);

              if (_i2 > 3) {
                _delay2 += 3;
              }

              if (index == 4) {
                _delay2 += _delayEach * 0.5;
              }

              _moveAction2.appendAction(FISH_ACTION.Delay, {
                time: _delay2
              });

              _moveAction2.appendAction(FISH_ACTION.gfBezierBy, {
                time: _timeLeft2,
                points: _config2
              });

              _data2.moveAction = _moveAction2;
              FishGroupHelper.createFishWithDelay(_data2);
            }
          }
        };

        gfFishGroup12.randomBezierFish = function randomBezierFish(beganPos, endPos, radio) {
          var midPos = v2(endPos.x, 0 + (0 - endPos.y) * (radio / 10));
          var bezierConfig = [v2(0, 0), midPos, endPos];
          return bezierConfig;
        };

        gfFishGroup12.calculateFlowerDiePosition = function calculateFlowerDiePosition(time) {
          if (!this.FlowerMoveData) return v2(780, 320);
          var delayTime = 6;
          var moveTime = 15;
          time -= FishGroupHelper.FISH_START_DELAY;
          if (time <= delayTime) return this.FlowerMoveData[0];
          time -= delayTime;
          if (time >= moveTime) return this.FlowerMoveData[3];
          var ratio = time / moveTime;
          var x = bezier(this.FlowerMoveData[0].x, this.FlowerMoveData[1].x, this.FlowerMoveData[2].x, this.FlowerMoveData[3].x, ratio);
          var y = bezier(this.FlowerMoveData[0].y, this.FlowerMoveData[1].y, this.FlowerMoveData[2].y, this.FlowerMoveData[3].y, ratio);
          return v2(x, y);
        };

        return gfFishGroup12;
      }());
      gfFishGroup12.FlowerMoveData = void 0;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishGroup13.ts", ['cc', './gfFishGroupData.ts', './gfBaseConfig.ts', './gfFishGroupHelper.ts', './gfFishMoveActions.ts'], function (exports) {
  'use strict';

  var cclegacy, v2, gfFishGroupData, gfBaseConfig, FishGroupHelper, FishMoveActions, FISH_ACTION;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      v2 = module.v2;
    }, function (module) {
      gfFishGroupData = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      FishGroupHelper = module.default;
    }, function (module) {
      FishMoveActions = module.FishMoveActions;
      FISH_ACTION = module.FISH_ACTION;
    }],
    execute: function () {
      cclegacy._RF.push({}, "17e4av0KPlAh4b0/tbqShZw", "gfFishGroup13", undefined);

      var gfFishGroup13 = exports('default', /*#__PURE__*/function () {
        function gfFishGroup13() {}

        gfFishGroup13.create = function create() {
          var yPos = gfBaseConfig.instance.AppSize.Height / 2;
          var left = -375;
          var right = gfBaseConfig.instance.AppSize.Width - left;
          var isFlipScreen = false;

          if (gfFishGroupData.isFlipped()) {
            var _ref = [right, left];
            left = _ref[0];
            right = _ref[1];
            isFlipScreen = true;
          }

          var fishSpeed = 70;
          var radius = 200;
          var numberStep = 5;
          var numberFishPerLine = 15; //appear in right

          this.createSinFishGroup({
            count: numberFishPerLine,
            startPos: v2(right, yPos),
            numberStep: numberStep,
            isMoveRight: isFlipScreen,
            distanceX: gfBaseConfig.instance.AppSize.Width + 200,
            fishSpeed: fishSpeed,
            radius: radius,
            isMoveUp: isFlipScreen
          });
          this.createSinFishGroup({
            count: numberFishPerLine,
            startPos: v2(right, yPos),
            numberStep: numberStep,
            isMoveRight: isFlipScreen,
            distanceX: gfBaseConfig.instance.AppSize.Width + 200,
            fishSpeed: fishSpeed,
            radius: radius,
            isMoveUp: !isFlipScreen
          }); //appear in left

          this.createSinFishGroup({
            count: numberFishPerLine,
            startPos: v2(left, yPos),
            numberStep: numberStep,
            isMoveRight: !isFlipScreen,
            distanceX: gfBaseConfig.instance.AppSize.Width + 200,
            fishSpeed: fishSpeed,
            radius: radius,
            isMoveUp: isFlipScreen
          });
          this.createSinFishGroup({
            count: numberFishPerLine,
            startPos: v2(left, yPos),
            numberStep: numberStep,
            isMoveRight: !isFlipScreen,
            distanceX: gfBaseConfig.instance.AppSize.Width + 200,
            fishSpeed: fishSpeed,
            radius: radius,
            isMoveUp: !isFlipScreen
          });
        };

        gfFishGroup13.createSinFishGroup = function createSinFishGroup(_ref2) {
          var count = _ref2.count,
              startPos = _ref2.startPos,
              numberStep = _ref2.numberStep,
              isMoveRight = _ref2.isMoveRight,
              distanceX = _ref2.distanceX,
              isMoveUp = _ref2.isMoveUp,
              radius = _ref2.radius,
              fishSpeed = _ref2.fishSpeed;
          var dir = isMoveRight ? 1 : -1;
          var sub = isMoveUp ? 0 : 1;
          var distanceMini = distanceX * 1.25 / numberStep;
          var moveInTime = distanceX / fishSpeed / numberStep;
          var delayEach = 1.25;

          for (var i = 0; i < count; ++i) {
            var data = gfFishGroupData.getNextFishData();
            if (!data) continue;
            var delay = i * delayEach;
            var moveAction = new FishMoveActions(startPos);
            moveAction.appendAction(FISH_ACTION.Delay, {
              time: delay
            });

            for (var j = 0; j <= numberStep; j++) {
              var y = radius * Math.pow(-1, j + sub);
              moveAction.appendAction(FISH_ACTION.gfBezierBy, {
                time: moveInTime,
                points: [v2(dir * distanceMini * 0.25, y), v2(dir * distanceMini * 0.75, y), v2(dir * distanceMini, 0)]
              });
            }

            data.moveAction = moveAction;
            FishGroupHelper.createFishWithDelay(data);
          }
        };

        return gfFishGroup13;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishGroup15.ts", ['cc', './gfFishGroupData.ts', './gfBaseConfig.ts', './gfFishGroupHelper.ts', './gfFishMoveActions.ts'], function (exports) {
  'use strict';

  var cclegacy, v2, gfFishGroupData, gfBaseConfig, FishGroupHelper, FishMoveActions, FISH_ACTION;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      v2 = module.v2;
    }, function (module) {
      gfFishGroupData = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      FishGroupHelper = module.default;
    }, function (module) {
      FishMoveActions = module.FishMoveActions;
      FISH_ACTION = module.FISH_ACTION;
    }],
    execute: function () {
      cclegacy._RF.push({}, "c2773FhAKhCk7pJLUckRIZI", "gfFishGroup15", undefined);

      var gfFishGroup15 = exports('default', /*#__PURE__*/function () {
        function gfFishGroup15() {}

        gfFishGroup15.create = function create() {
          var fishCount = [14, 14, 14, 14, 2, 2, 1, 1];
          var delayEach = 3.5;
          var i = 0;
          this.createFish15Arc(fishCount[i++], delayEach, 100, false);
          this.createFish15Arc(fishCount[i++], delayEach, 100, true);
          this.createFish15Arc(fishCount[i++], delayEach, 200, false);
          this.createFish15Arc(fishCount[i++], delayEach, 200, true);
          this.createFish15Direct(fishCount[i++], 8, 400, 40);
          this.createFish15Direct(fishCount[i++], 10, 550, 40);
          this.createSingleFish15Direct(10, 0, 40, false);
          this.createSingleFish15Direct(0, 0, 40, false);
        };

        gfFishGroup15.createFish15Arc = function createFish15Arc(fishCount, baseDelay, range, haveFirstDelay) {
          for (var i = 1; i <= fishCount / 2; ++i) {
            var delay = haveFirstDelay ? baseDelay * i + baseDelay / 2 : baseDelay * i;
            this.createSingleFish15Art(delay, range, false);
          }

          for (var _i = 1; _i <= fishCount / 2; ++_i) {
            var _delay = haveFirstDelay ? baseDelay * _i + baseDelay / 2 : baseDelay * _i;

            this.createSingleFish15Art(_delay, range, true);
          }
        };

        gfFishGroup15.createFish15Direct = function createFish15Direct(fishCount, baseDelay, range, speed) {
          for (var i = 1; i <= fishCount / 2; i++) {
            this.createSingleFish15Direct(baseDelay, range, speed, false);
          }

          for (var _i2 = 1; _i2 <= fishCount / 2; _i2++) {
            this.createSingleFish15Direct(baseDelay, range, speed, true);
          }
        };

        gfFishGroup15.createSingleFish15Art = function createSingleFish15Art(baseDelay, range, isRight) {
          if (isRight === void 0) {
            isRight = false;
          }

          var data = gfFishGroupData.getNextFishData();
          if (!data) return;
          var AppSize = gfBaseConfig.instance.AppSize;
          var firstPos = {
            x: isRight ? AppSize.Width / 2 + range : AppSize.Width / 2 - range,
            y: -100
          };
          var fishSpeed = 80;
          var startPos = FishGroupHelper.convertFlipCoordinate(v2(firstPos.x, firstPos.y));
          var moveAction = new FishMoveActions(startPos);
          var moveOutTime = AppSize.Width / fishSpeed;
          moveAction.appendAction(FISH_ACTION.Delay, {
            time: baseDelay
          });
          this.makeBezierLine(moveAction, moveOutTime, range, isRight, startPos);
          data.moveAction = moveAction;
          FishGroupHelper.createFishWithDelay(data);
        };

        gfFishGroup15.makeBezierLine = function makeBezierLine(moveAction, moveOutTime, range, isRight, startPos) {
          var AppSize = gfBaseConfig.instance.AppSize;
          var center = v2(AppSize.Width / 2, AppSize.Height / 2);
          var dir = center.y > startPos.y ? 1 : -1;
          var pos1 = v2(0, 0);
          var pos2 = v2(pos1.x, (AppSize.Height + 200 - range / 2) * dir);
          var pos3 = v2(isRight ? (AppSize.Width / 2 + range) * dir : (-AppSize.Width / 2 - range) * dir, (AppSize.Height + 200 - range) * dir);
          moveAction.appendAction(FISH_ACTION.gfBezierBy, {
            time: moveOutTime,
            points: [pos1, pos2, pos3]
          });
        };

        gfFishGroup15.createSingleFish15Direct = function createSingleFish15Direct(baseDelay, range, speed, isRight) {
          if (isRight === void 0) {
            isRight = false;
          }

          var data = gfFishGroupData.getNextFishData();
          if (!data) return;
          var AppSize = gfBaseConfig.instance.AppSize;
          var firstPos = {
            x: isRight ? AppSize.Width / 2 + range : AppSize.Width / 2 - range,
            y: -300
          };
          var center = v2(AppSize.Width / 2, AppSize.Height / 2);
          var fishSpeed = speed;
          var startPos = FishGroupHelper.convertFlipCoordinate(v2(firstPos.x, firstPos.y));
          var dir = center.y > startPos.y ? 1 : -1;
          var angle = 90 * dir;
          var moveAction = new FishMoveActions(startPos, angle);
          var moveOutTime = (AppSize.Height + 600) / fishSpeed;
          moveAction.appendAction(FISH_ACTION.Delay, {
            time: baseDelay
          });
          moveAction.appendAction(FISH_ACTION.MoveBy, {
            time: moveOutTime,
            x: 0,
            y: (AppSize.Height + 600) * dir
          });
          data.moveAction = moveAction;
          FishGroupHelper.createFishWithDelay(data);
        };

        return gfFishGroup15;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishGroup16.ts", ['cc', './gfFishGroupData.ts', './gfBaseConfig.ts', './gfFishGroupHelper.ts', './gfFishMoveActions.ts', './utils.ts'], function (exports) {
  'use strict';

  var cclegacy, v2, gfFishGroupData, gfBaseConfig, FishGroupHelper, FishMoveActions, FISH_ACTION, randRange;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      v2 = module.v2;
    }, function (module) {
      gfFishGroupData = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      FishGroupHelper = module.default;
    }, function (module) {
      FishMoveActions = module.FishMoveActions;
      FISH_ACTION = module.FISH_ACTION;
    }, function (module) {
      randRange = module.randRange;
    }],
    execute: function () {
      cclegacy._RF.push({}, "7b8e7KUSfRLaY7u1Cklhkf6", "gfFishGroup16", undefined);

      var gfFishGroup16 = exports('default', /*#__PURE__*/function () {
        function gfFishGroup16() {}

        gfFishGroup16.create = function create() {
          var COUNT_FISH = {
            TOP_BOTTOM: 10,
            TOP_TOP: 5,
            TOP_TOP_SUB: 8,
            BOTTOM_BOTTOM_SUB: 8,
            BOTTOM_BOTTOM: 5,
            BOTTOM_TOP: 10
          };
          var TotalTime = 35;
          var AppSize = gfBaseConfig.instance.AppSize;
          var flip = !gfFishGroupData.isFlipped();
          var CONFIG_LINE_FISH = [{
            posYStart: !flip ? -120 : AppSize.Height + 120,
            posYEnd: !flip ? 150 : AppSize.Height - 150,
            totalFish: COUNT_FISH.TOP_BOTTOM,
            totalTime: TotalTime,
            angle: !flip ? 90 : -90
          }, {
            posYStart: !flip ? AppSize.Height + 120 : -120,
            posYEnd: !flip ? AppSize.Height - 150 : 150,
            totalFish: COUNT_FISH.BOTTOM_TOP,
            totalTime: TotalTime,
            angle: !flip ? -90 : 90
          }, {
            posYStart: !flip ? -120 : AppSize.Height + 120,
            posYEnd: !flip ? 100 : AppSize.Height - 100,
            totalFish: COUNT_FISH.TOP_TOP,
            totalTime: TotalTime,
            angle: !flip ? 90 : -90
          }, {
            posYStart: !flip ? AppSize.Height + 120 : -120,
            posYEnd: !flip ? AppSize.Height - 100 : 100,
            totalFish: COUNT_FISH.BOTTOM_BOTTOM,
            totalTime: TotalTime,
            angle: !flip ? -90 : 90
          }, {
            posYStart: !flip ? -120 : AppSize.Height + 120,
            posYEnd: !flip ? 100 : AppSize.Height - 100,
            totalFish: COUNT_FISH.TOP_TOP_SUB,
            totalTime: TotalTime,
            angle: !flip ? 90 : -90
          }, {
            posYStart: !flip ? AppSize.Height + 120 : -120,
            posYEnd: !flip ? AppSize.Height - 100 : 100,
            totalFish: COUNT_FISH.BOTTOM_BOTTOM_SUB,
            totalTime: TotalTime,
            angle: !flip ? -90 : 90
          }];
          var yPos = gfBaseConfig.instance.AppSize.Height / 2;
          var left = -500;
          var right = gfBaseConfig.instance.AppSize.Width - left;

          if (gfFishGroupData.isFlipped()) {
            var _ref = [right, -right];
            left = _ref[0];
            right = _ref[1];
          }

          var fishSpeed = 90; //Leader

          this.createLineFishGroup({
            count: 1,
            startPos: v2(left, yPos),
            distanceTime: 0,
            distanceX: right,
            fishSpeed: fishSpeed,
            delayTime: 0.0
          });
          this.createLineFishGroup({
            count: 1,
            startPos: v2(left, yPos + 100),
            distanceTime: 0,
            distanceX: right,
            fishSpeed: fishSpeed,
            delayTime: 4.3
          });
          this.createLineFishGroup({
            count: 1,
            startPos: v2(left, yPos),
            distanceTime: 0,
            distanceX: right,
            fishSpeed: fishSpeed,
            delayTime: 2.9
          });
          this.createLineFishGroup({
            count: 1,
            startPos: v2(left, yPos - 100),
            distanceTime: 0,
            distanceX: right,
            fishSpeed: fishSpeed,
            delayTime: 4.3
          }); //Selena

          this.createLineFishGroup({
            count: 1,
            startPos: v2(left, yPos),
            distanceTime: 0,
            distanceX: right,
            fishSpeed: fishSpeed,
            delayTime: 6.1
          }); //Khoan  

          this.createLineFishGroup({
            count: 1,
            startPos: v2(left, yPos + 98),
            distanceX: right,
            fishSpeed: fishSpeed,
            delayTime: 9.1,
            distanceTime: 1.9
          }); //Gian

          this.createLineFishGroup({
            count: 1,
            startPos: v2(left, yPos - 98),
            distanceX: right,
            fishSpeed: fishSpeed,
            delayTime: 9.1,
            distanceTime: 1.9
          });
          this.createLineFishGroup({
            count: 1,
            startPos: v2(left, yPos),
            distanceTime: 0,
            distanceX: right,
            fishSpeed: fishSpeed,
            delayTime: 11.2
          });
          this.createLineFishGroup({
            count: 5,
            startPos: v2(left, yPos + 120),
            distanceX: right,
            fishSpeed: fishSpeed,
            delayTime: 12.9,
            distanceTime: 1.0
          });
          this.createLineFishGroup({
            count: 5,
            startPos: v2(left, yPos),
            distanceX: right,
            fishSpeed: fishSpeed,
            delayTime: 12.9,
            distanceTime: 1.0
          });
          this.createLineFishGroup({
            count: 5,
            startPos: v2(left, yPos - 120),
            distanceX: right,
            fishSpeed: fishSpeed,
            delayTime: 12.9,
            distanceTime: 1.0
          }); //Line fish

          for (var i = 0; i < 4; i++) {
            var config = CONFIG_LINE_FISH[i];
            this.createMiniLineFishGroup(AppSize, flip, config);
          }
        };

        gfFishGroup16.createMiniLineFishGroup = function createMiniLineFishGroup(AppSize, flip, config) {
          var offsetX = AppSize.Width / config.totalFish;
          var moveInTime = 2.0;
          var stayTime = config.totalTime;
          var moveOutTime = 3.0;

          for (var i = 0; i < config.totalFish; ++i) {
            var data = gfFishGroupData.getNextFishData();
            if (!data) continue;
            var random = randRange(500, -500);
            var endPos = config.angle === 90 ? v2(random, 720) : v2(random, -720);
            var posX = flip ? (config.totalFish - i) * offsetX - offsetX / 2 : i * offsetX + offsetX / 2;
            var startPos = v2(posX, config.posYStart);
            var moveAction = new FishMoveActions(startPos, config.angle);
            var distanceY = config.posYEnd - startPos.y;
            moveAction.appendAction(FISH_ACTION.MoveBy, {
              time: moveInTime,
              x: 0,
              y: distanceY
            });
            moveAction.appendAction(FISH_ACTION.Delay, {
              time: stayTime
            });
            var timeMove = randRange(moveOutTime * 10 - 5, moveOutTime * 10) / 10;
            moveAction.appendAction(FISH_ACTION.MoveBy, {
              time: timeMove,
              x: 0,
              y: endPos.y,
              motion: 'quartOut'
            });
            data.moveAction = moveAction;
            FishGroupHelper.createFishWithDelay(data);
          }
        };

        gfFishGroup16.createLineFishGroup = function createLineFishGroup(_ref2) {
          var count = _ref2.count,
              startPos = _ref2.startPos,
              distanceX = _ref2.distanceX,
              fishSpeed = _ref2.fishSpeed,
              delayTime = _ref2.delayTime,
              distanceTime = _ref2.distanceTime;

          if (!distanceTime) {
            distanceTime = 0;
          }

          var AppSize = gfBaseConfig.instance.AppSize;
          var center = v2(AppSize.Width / 2, AppSize.Height / 2);
          var dir = center.x > startPos.x ? 1 : -1;
          var moveInTime = Math.abs(distanceX) / fishSpeed;

          for (var i = 0; i < count; ++i) {
            var data = gfFishGroupData.getNextFishData();
            if (!data) continue;
            var delay = i * distanceTime + delayTime;
            var moveAction = new FishMoveActions(startPos);
            moveAction.appendAction(FISH_ACTION.Delay, {
              time: delay
            });
            moveAction.appendAction(FISH_ACTION.MoveBy, {
              time: moveInTime,
              x: distanceX + 200 * dir,
              y: 0
            });
            data.moveAction = moveAction;
            FishGroupHelper.createFishWithDelay(data);
          }
        };

        return gfFishGroup16;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishGroup17.ts", ['cc', './gfFishGroupData.ts', './gfBaseConfig.ts', './gfFishGroupHelper.ts', './gfFishMoveActions.ts'], function (exports) {
  'use strict';

  var cclegacy, v2, gfFishGroupData, gfBaseConfig, FishGroupHelper, FishMoveActions, FISH_ACTION;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      v2 = module.v2;
    }, function (module) {
      gfFishGroupData = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      FishGroupHelper = module.default;
    }, function (module) {
      FishMoveActions = module.FishMoveActions;
      FISH_ACTION = module.FISH_ACTION;
    }],
    execute: function () {
      cclegacy._RF.push({}, "94f2antKEdIdIb9aGxYo4Py", "gfFishGroup17", undefined);

      var gfFishGroup17 = exports('default', /*#__PURE__*/function () {
        function gfFishGroup17() {}

        gfFishGroup17.create = function create() {
          var yPos = gfBaseConfig.instance.AppSize.Height / 2;
          var left = -600;
          var deltaX = 410;
          var right = gfBaseConfig.instance.AppSize.Width - left;

          if (gfFishGroupData.isFlipped()) {
            var _ref = [right, left];
            left = _ref[0];
            right = _ref[1];
            deltaX = -deltaX;
          }

          this.createCircleFishGroup({
            moveTime: 61,
            moveScale: 2,
            count: 80,
            startPos: v2(right, yPos),
            radius: 250
          });
          this.createCircleFishGroup({
            moveTime: 61,
            moveScale: 2,
            count: 30,
            startPos: v2(right, yPos),
            radius: 180
          });
          this.createCircleFishGroup({
            moveTime: 61,
            moveScale: 2,
            count: 16,
            startPos: v2(right - deltaX, yPos),
            radius: 100
          });
          this.createCircleFishGroup({
            moveTime: 61,
            moveScale: 2,
            count: 16,
            startPos: v2(right + deltaX, yPos),
            radius: 100
          });
          this.createCircleFishGroup({
            moveTime: 61,
            moveScale: 2,
            count: 1,
            startPos: v2(right, yPos),
            radius: 0
          });
        };

        gfFishGroup17.createCircleFishGroup = function createCircleFishGroup(_ref2) {
          var moveTime = _ref2.moveTime,
              moveScale = _ref2.moveScale,
              count = _ref2.count,
              startPos = _ref2.startPos,
              radius = _ref2.radius;
          var flip = -gfFishGroupData.flipCoord;
          var moveOffset = flip * moveScale * (gfBaseConfig.instance.AppSize.Width + 150);
          var angleStep = 360 / count;

          for (var i = 0; i < count; ++i) {
            var fishInfo = gfFishGroupData.getNextFishData();
            if (!fishInfo) continue;
            var fishPos = v2(startPos.x + Math.cos(i * angleStep * Math.PI / 180) * radius * gfFishGroupData.flipCoord, startPos.y + Math.sin(i * angleStep * Math.PI / 180) * radius * gfFishGroupData.flipCoord);
            fishInfo.moveAction = new FishMoveActions(fishPos);
            fishInfo.moveAction.appendAction(FISH_ACTION.MoveBy, {
              time: moveTime,
              x: moveOffset,
              y: 0
            });
            FishGroupHelper.createFishWithDelay(fishInfo);
          }
        };

        return gfFishGroup17;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishGroup18.ts", ['cc', './gfFishGroupData.ts', './gfBaseConfig.ts', './gfFishGroupHelper.ts', './gfFishMoveActions.ts', './gfUtilities.ts'], function (exports) {
  'use strict';

  var cclegacy, v2, gfFishGroupData, gfBaseConfig, FishGroupHelper, FishMoveActions, FISH_ACTION, v2Distance;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      v2 = module.v2;
    }, function (module) {
      gfFishGroupData = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      FishGroupHelper = module.default;
    }, function (module) {
      FishMoveActions = module.FishMoveActions;
      FISH_ACTION = module.FISH_ACTION;
    }, function (module) {
      v2Distance = module.v2Distance;
    }],
    execute: function () {
      cclegacy._RF.push({}, "caec82L6whO6KmmpMTGAmAm", "gfFishGroup18", undefined);

      var gfFishGroup18 = exports('default', /*#__PURE__*/function () {
        function gfFishGroup18() {}

        gfFishGroup18.create = function create() {
          this.createFishLine({
            count: 23,
            moveUp: false
          });
          this.createFishLine({
            count: 23,
            moveUp: true
          });
          this.createFormationFish({
            count: 23
          });
          this.createSpringsFish({
            count: 6
          });
        };

        gfFishGroup18.createFishLine = function createFishLine(_ref) {
          var count = _ref.count,
              moveUp = _ref.moveUp;
          var distantBorder = 100;
          var flip = gfFishGroupData.isFlipped();
          var offsetX = gfBaseConfig.instance.realSize.Width / count;
          var height = gfBaseConfig.instance.AppSize.Height;
          moveUp = flip ? moveUp : !moveUp;
          var stopY = moveUp ? height - distantBorder : distantBorder;
          var endY = moveUp ? -distantBorder : height + distantBorder;

          for (var i = 0; i < count; ++i) {
            var fishInfo = gfFishGroupData.getNextFishData();
            if (!fishInfo) continue;
            var startX = 25 + gfBaseConfig.instance.SceneBox.Left + i * offsetX;
            var startY = moveUp ? height + Math.random() * 100 : Math.random() * 100 * -1;
            var moveInTime = 3;
            var stayTime = 35;
            var moveOutTime = 3;
            var startPos = v2(startX, startY);

            if (moveInTime <= 0) {
              startPos = v2(startX, stopY);
            }

            var angle = endY > startY ? 90 : -90;
            var moveAction = new FishMoveActions(startPos, angle);
            moveAction.appendAction(FISH_ACTION.MoveTo, {
              time: moveInTime,
              x: startX,
              y: stopY
            });
            moveAction.appendAction(FISH_ACTION.Delay, {
              time: stayTime
            });
            moveAction.appendAction(FISH_ACTION.MoveTo, {
              time: moveOutTime,
              x: startX,
              y: endY
            });
            fishInfo.moveAction = moveAction;
            FishGroupHelper.createFishWithDelay(fishInfo);
          }
        };

        gfFishGroup18.createFormationFish = function createFormationFish(_ref2) {
          var count = _ref2.count;

          for (var i = 0; i < count; ++i) {
            var fishInfo = gfFishGroupData.getNextFishData();
            if (!fishInfo) continue;

            var _this$calculatePosByP = this.calculatePosByPlayerIndexGroup(i),
                posStart = _this$calculatePosByP.posStart,
                posEnd = _this$calculatePosByP.posEnd;

            var speed = 90; // const timeSpent = FishGroupData.timeSkipped - fishInfo.TimeFreeze;

            var distance = v2Distance(posEnd, posStart);
            var baseMoveTime = distance / speed;
            var startPos = v2(posStart.x, posStart.y);
            var moveTime = 34;
            var moveAction = new FishMoveActions(startPos, moveTime);
            moveAction.appendAction(FISH_ACTION.MoveTo, {
              time: baseMoveTime,
              x: posEnd.x,
              y: posEnd.y
            });
            fishInfo.moveAction = moveAction;
            FishGroupHelper.createFishWithDelay(fishInfo);
          }
        };

        gfFishGroup18.createSpringsFish = function createSpringsFish(_ref3) {
          var count = _ref3.count;
          var angle = [0, 60, 120, 180, 240, 300];
          var duration = 50,
              cycleIntensity = 1.45,
              speed = 1,
              radius = 130;
          var flip = !gfFishGroupData.isFlipped();

          for (var i = 0; i < count; i++) {
            var fishInfo = gfFishGroupData.getNextFishData();
            if (!fishInfo) continue;

            var _this$calculatePosByP2 = this.calculatePosByPlayerIndexGroup(16),
                posStart = _this$calculatePosByP2.posStart;

            var timeSpent = gfFishGroupData.timeSkipped - fishInfo.TimeFreeze; // let startPos = v2(posStart.x, posStart.y);

            fishInfo.skipFlipY = true;
            var config = {
              duration: duration,
              cycleIntensity: cycleIntensity,
              speed: speed,
              radius: radius,
              timeSpent: timeSpent,
              pos: v2(posStart.x + 5 * (flip ? 1 : -1), posStart.y + 10 * (flip ? 1 : -1)),
              flip: flip,
              angle: angle[i],
              time: timeSpent
            };
            var moveAction = new FishMoveActions(posStart, duration);
            moveAction.appendAction(FISH_ACTION.MoveSpring, config);
            fishInfo.moveAction = moveAction;
            FishGroupHelper.createFishWithDelay(fishInfo);
          }
        };

        gfFishGroup18.calculatePosByPlayerIndexGroup = function calculatePosByPlayerIndexGroup(indexFish) {
          var flip = !gfFishGroupData.isFlipped();
          var MaxSceneSize = 1560;
          var MaxSizeGroup = 2000;
          var FixDeltaX = 140;
          var OffsetX = [-350, -350, -200, -200, -50, -50, 100, 100, 250, 250, -300, -300, -200, -100, -100, 80, 480, 700, 800, 800, 900, 900, 950];
          var OffsetY = [190, 530, 190, 530, 190, 530, 190, 530, 190, 530, 410, 310, 360, 430, 290, 360, 360, 360, 530, 190, 480, 240, 360];
          var posStartX = flip ? OffsetX[indexFish] - MaxSceneSize : 2 * (MaxSceneSize - FixDeltaX) - OffsetX[indexFish];
          var posStartY = flip ? OffsetY[indexFish] : gfBaseConfig.instance.AppSize.Height - OffsetY[indexFish];
          var posStart = v2(posStartX, posStartY);
          var posEnd = flip ? v2(posStartX + MaxSceneSize + MaxSizeGroup, posStartY) : v2(posStartX - MaxSceneSize - MaxSizeGroup, posStartY);
          return {
            posStart: posStart,
            posEnd: posEnd
          };
        };

        return gfFishGroup18;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishGroup19.ts", ['cc', './gfFishGroupData.ts', './gfBaseConfig.ts', './gfFishGroupHelper.ts', './gfFishMoveActions.ts'], function (exports) {
  'use strict';

  var cclegacy, v2, gfFishGroupData, gfBaseConfig, FishGroupHelper, FishMoveActions, FISH_ACTION;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      v2 = module.v2;
    }, function (module) {
      gfFishGroupData = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      FishGroupHelper = module.default;
    }, function (module) {
      FishMoveActions = module.FishMoveActions;
      FISH_ACTION = module.FISH_ACTION;
    }],
    execute: function () {
      cclegacy._RF.push({}, "0c4546OjT9KZYKTYU2f6W2I", "gfFishGroup19", undefined);

      var TIME_WAVE_1 = 5;
      var SPEED_WAVE_1 = 200;
      var SPEED_LINE_FISH = 70;
      var SPEED_MIDDLE_FISH = 58;
      var PAD_X = 50;
      var PAD_Y = 25;
      var PAD_LINE = 100;
      var OFFSET_X_WAVE_2 = -200;
      var gfFishGroup19 = exports('default', /*#__PURE__*/function () {
        function gfFishGroup19() {}

        gfFishGroup19.create = function create() {
          var AppSize = gfBaseConfig.instance.AppSize;
          var startPosWave = v2(AppSize.Width / 2, -100);
          var startPosWaveFlip = v2(AppSize.Width / 2, AppSize.Height + 100);
          var distanceWave = TIME_WAVE_1 * SPEED_WAVE_1 + AppSize.Height / 2;
          var flip = gfFishGroupData.isFlipped();
          this.createFishVFormation(23, false, startPosWave, distanceWave, PAD_X, PAD_Y);
          this.createFishVFormation(23, true, startPosWaveFlip, distanceWave, PAD_X, PAD_Y); // Create 2 line fish 0 and fish 1

          this.multiLine({
            amountLine: 2,
            fishPerLine: 16,
            spaceFish: 150,
            spaceLine: -(AppSize.Height - PAD_LINE * 2),
            startY: AppSize.Height - PAD_LINE,
            xOffset: flip ? OFFSET_X_WAVE_2 : OFFSET_X_WAVE_2,
            speed: SPEED_LINE_FISH
          });
          this.multiLine({
            amountLine: 2,
            fishPerLine: 16,
            spaceFish: 150,
            spaceLine: -(AppSize.Height - PAD_LINE * 2),
            startY: AppSize.Height - PAD_LINE,
            xOffset: flip ? OFFSET_X_WAVE_2 - 75 : OFFSET_X_WAVE_2 - 75,
            speed: SPEED_LINE_FISH
          });
          this.createMiddleFish();
        };

        gfFishGroup19.createFishVFormation = function createFishVFormation(fishCount, isFlip, startPos, distanceWave, spaceX, spaceY) {
          var alignCor = 7;

          for (var i = 0; i < fishCount; ++i) {
            var fishInfo = gfFishGroupData.getNextFishData();
            if (!fishInfo) continue;
            var pos = void 0;

            if (i === 0) {
              pos = startPos;
            } else if (i % 2 != 0) {
              var posX = startPos.x - spaceX * Math.round(i / 2);
              var posY = isFlip ? startPos.y + spaceY * Math.round(i / 2) : startPos.y - spaceY * Math.round(i / 2);
              pos = v2(posX, posY);
            } else if (i % 2 === 0) {
              var _posX = startPos.x + spaceX * Math.round(i / 2);

              var _posY = isFlip ? startPos.y + spaceY * Math.round(i / 2) : startPos.y - spaceY * Math.round(i / 2);

              pos = v2(_posX, _posY);
            }

            var angle = isFlip ? -90 : 90;
            pos.x -= isFlip ? alignCor : 0;
            var moveAction = new FishMoveActions(pos, angle);
            moveAction.startAngle = angle;
            moveAction.appendAction(FISH_ACTION.MoveByDistance, {
              time: TIME_WAVE_1 + 1,
              angle: angle * Math.PI / 180,
              distance: distanceWave
            });
            fishInfo.moveAction = moveAction; // fishInfo.fishPosition = moveAction.getStartPosition();
            // fishInfo.isFishParade = true;

            FishGroupHelper.createFishWithDelay(fishInfo);
          }
        };

        gfFishGroup19.createMiddleFish = function createMiddleFish() {
          var flip = gfFishGroupData.isFlipped();
          var config = 50;
          var AppSize = gfBaseConfig.instance.AppSize;
          var OFFSET_X_WAVE_2_FLIP = Math.abs(OFFSET_X_WAVE_2) + AppSize.Width;
          var startPosMainFish = flip ? OFFSET_X_WAVE_2_FLIP + 400 : OFFSET_X_WAVE_2 - 400;
          var posStart2 = flip ? v2(startPosMainFish, AppSize.Height / 2) : v2(startPosMainFish, AppSize.Height / 2);
          var posStart1 = flip ? v2(startPosMainFish + 400, AppSize.Height / 2) : v2(startPosMainFish - 400, AppSize.Height / 2);
          var posStart3 = flip ? v2(startPosMainFish + 600, AppSize.Height / 2) : v2(startPosMainFish - 600, AppSize.Height / 2);
          var posStart4 = flip ? v2(startPosMainFish + 1100 + config, AppSize.Height / 2) : v2(startPosMainFish - 1100 - config, AppSize.Height / 2);
          var posEnd = flip ? v2(-250, AppSize.Height / 2) : v2(AppSize.Width + 250, AppSize.Height / 2); // Create 11 fish 11

          this.multiLine({
            amountLine: 2,
            fishPerLine: 1,
            spaceLine: -200,
            startY: AppSize.Height / 2 + 100,
            xOffset: flip ? OFFSET_X_WAVE_2 - 650 : startPosMainFish - 250,
            speed: SPEED_MIDDLE_FISH
          });
          FishGroupHelper.createSimpleMovingFish(posStart1, posEnd, 0, SPEED_MIDDLE_FISH);
          this.multiLine({
            amountLine: 2,
            fishPerLine: 1,
            spaceLine: -300,
            // spaceFish: 125,
            startY: AppSize.Height / 2 + 150,
            xOffset: flip ? OFFSET_X_WAVE_2 - 1000 - config : startPosMainFish - 600 - config,
            speed: SPEED_MIDDLE_FISH
          });
          this.multiLine({
            amountLine: 3,
            fishPerLine: 1,
            spaceLine: -100,
            // spaceFish: 125,
            startY: AppSize.Height / 2 + 100,
            xOffset: flip ? OFFSET_X_WAVE_2 - 1100 - config : startPosMainFish - 700 - config,
            speed: SPEED_MIDDLE_FISH
          });
          this.multiLine({
            amountLine: 2,
            fishPerLine: 1,
            spaceLine: -100,
            spaceFish: 125,
            startY: AppSize.Height / 2 + 50,
            xOffset: flip ? OFFSET_X_WAVE_2 - 1200 - config : startPosMainFish - 800 - config,
            speed: SPEED_MIDDLE_FISH
          });
          FishGroupHelper.createSimpleMovingFish(posStart4, posEnd, 0, SPEED_MIDDLE_FISH); // Create 2 fish 17

          this.multiLine({
            amountLine: 2,
            fishPerLine: 1,
            spaceLine: -200,
            startY: AppSize.Height / 2 + 100,
            xOffset: flip ? OFFSET_X_WAVE_2 - 400 : startPosMainFish,
            speed: SPEED_MIDDLE_FISH
          }); // Create 2 last fish 22

          this.multiLine({
            amountLine: 2,
            fishPerLine: 1,
            spaceLine: -200,
            startY: AppSize.Height / 2 + 100,
            xOffset: flip ? OFFSET_X_WAVE_2 - 1525 : startPosMainFish - 1125,
            speed: SPEED_MIDDLE_FISH
          }); // Create first fish 24

          FishGroupHelper.createSimpleMovingFish(posStart2, posEnd, 0, SPEED_MIDDLE_FISH); // Create main fish

          FishGroupHelper.createSimpleMovingFish(posStart3, posEnd, 0, SPEED_MIDDLE_FISH);
        };

        gfFishGroup19.multiLine = function multiLine(FishInfo) {
          var amountLine = FishInfo.amountLine,
              fishPerLine = FishInfo.fishPerLine,
              spaceLine = FishInfo.spaceLine,
              startY = FishInfo.startY,
              xOffset = FishInfo.xOffset,
              speed = FishInfo.speed;
          var spaceFish = FishInfo.spaceFish;

          if (!spaceFish) {
            spaceFish = 0;
          }

          for (var i = 0; i < amountLine; ++i) {
            var posY = startY + spaceLine * i;
            FishGroupHelper.createFishLine(fishPerLine, posY, spaceFish, speed, xOffset);
          }
        };

        return gfFishGroup19;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishGroupData.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfDataStore.ts'], function (exports) {
  'use strict';

  var _createClass, cclegacy, gfDataStore;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      gfDataStore = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "acc16eEHr9LFqics3/l2pIb", "gfFishGroupData", undefined);

      var gfFishGroupData = exports('default', /*#__PURE__*/function () {
        function gfFishGroupData() {
          this.buildTick = void 0;
          this.fishIndex = void 0;
          this.listFish = void 0;
          this.ParadeKind = void 0;
          this.customZIndex = -1;
          this.timeSkipped = 0;
          this.flipCoord = 1;
        }

        var _proto = gfFishGroupData.prototype;

        _proto.destroy = function destroy() {
          gfFishGroupData.instance = null;
        };

        _proto._initData = function _initData(data) {
          this.buildTick = data.buildTick;
          this.timeSkipped = data.timeSkipped || 0;
          this.flipCoord = gfDataStore.instance.getSelfDeskStation() > 1 ? -1 : 1;
          this.fishIndex = 0;
          this.listFish = data.ListFish;
          this.ParadeKind = data.ParadeKind;
          this.customZIndex = -1;
        };

        _proto._makeFishData = function _makeFishData(data) {
          if (!data || data.FishKind < 0) return null;
          data.TimeFreeze = (data.TimeFreeze || 0) / 1000 / 2;
          data.isFishGroup = true;
          data.buildTick = this.buildTick;
          data.isResume = this.timeSkipped != 0;

          if (this.customZIndex > -1) {
            data.zIndex = this.customZIndex;
          }

          return data;
        };

        _proto._getFishData = function _getFishData() {
          return this._makeFishData(this.listFish[this.fishIndex]);
        };

        _proto._updateCustomZIndex = function _updateCustomZIndex(zIndex) {
          this.customZIndex = zIndex;
        };

        gfFishGroupData.initData = function initData(data) {
          if (!gfFishGroupData.instance) {
            gfFishGroupData.instance = new gfFishGroupData();
          }

          gfFishGroupData.instance._initData(data);
        };

        gfFishGroupData.getFishData = function getFishData() {
          return gfFishGroupData.instance._getFishData();
        };

        gfFishGroupData.getNextFishData = function getNextFishData() {
          var data = this.getFishData();
          this.incIndex();
          return data;
        };

        gfFishGroupData.incIndex = function incIndex() {
          ++gfFishGroupData.instance.fishIndex;
        };

        gfFishGroupData.isFlipped = function isFlipped() {
          return gfFishGroupData.instance.flipCoord < 0;
        };

        gfFishGroupData.updateCustomZIndex = function updateCustomZIndex(zIndex) {
          gfFishGroupData.instance._updateCustomZIndex(zIndex);
        };

        _createClass(gfFishGroupData, null, [{
          key: "flipCoord",
          get: function get() {
            return gfFishGroupData.instance.flipCoord;
          }
        }, {
          key: "timeSkipped",
          get: function get() {
            return gfFishGroupData.instance.timeSkipped;
          }
        }]);

        return gfFishGroupData;
      }());
      gfFishGroupData.instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishGroupHelper.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfFishManager.ts', './gfGameScheduler.ts', './gfFishGroupData.ts', './gfBaseConfig.ts', './gfUtilities.ts', './gfFishMoveActions.ts', './gfDataStore.ts'], function (exports) {
  'use strict';

  var _createClass, cclegacy, v2, _decorator, tween, Vec2, gfFishManager, gfGameScheduler, gfFishGroupData, gfBaseConfig, v2Distance, FishMoveActions, FISH_ACTION, gfDataStore;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      v2 = module.v2;
      _decorator = module._decorator;
      tween = module.tween;
      Vec2 = module.Vec2;
    }, function (module) {
      gfFishManager = module.default;
    }, function (module) {
      gfGameScheduler = module.default;
    }, function (module) {
      gfFishGroupData = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      v2Distance = module.v2Distance;
    }, function (module) {
      FishMoveActions = module.FishMoveActions;
      FISH_ACTION = module.FISH_ACTION;
    }, function (module) {
      gfDataStore = module.default;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "5ed8cyl4MlMQagcLlHz1XTa", "gfFishGroupHelper", undefined);

      var OutScreenPos = v2(-1000, -1000);
      var ccclass = _decorator.ccclass;
      var FishGroupHelper = exports('default', (_dec = ccclass('FishGroupHelper'), _dec(_class = (_class2 = /*#__PURE__*/function () {
        function FishGroupHelper() {
          this.fishDelay = 0;
          this.fishDelay = 0;
        }

        var _proto = FishGroupHelper.prototype;

        _proto.resetDelayCounting = function resetDelayCounting() {
          this.fishDelay = 0;
        };

        _proto._getDelayTime = function _getDelayTime() {
          return ++this.fishDelay / 100;
        };

        FishGroupHelper.initFishGroupData = function initFishGroupData(data) {
          FishGroupHelper.instance.resetDelayCounting();
          data.timeSkipped = (gfDataStore.instance.getTime() - data.buildTick) / 1000 - this.FISH_START_DELAY;
          gfFishGroupData.initData(data);
        };

        FishGroupHelper.createFishWithDelay = function createFishWithDelay(data) {
          var _this = this;

          var delay = this.getDelayTime();

          if (!data.isResume) {
            gfGameScheduler.scheduleOnce(function () {
              _this.createAndRunFish(data, delay);
            }, delay);
          } else {
            this.createAndRunFish(data);
          }
        };

        FishGroupHelper.getDelayTime = function getDelayTime() {
          return FishGroupHelper.instance._getDelayTime();
        };

        FishGroupHelper.createAndRunFish = function createAndRunFish(data, delay) {
          if (delay === void 0) {
            delay = -1;
          }

          var fish = gfFishManager.instance.createFishWithData(data);
          if (!fish) return;
          fish.moveAction = tween(fish.node);
          var moveAction = data.moveAction.getActions();
          var position = data.moveAction.getStartPositionV3();
          fish.node.angle = data.moveAction.getStartAngle();

          if (delay > -1) {
            fish.node.setPosition(OutScreenPos.x, OutScreenPos.y, position.z);
            fish.setDie(true);
            fish.moveAction.delay(this.FISH_START_DELAY - delay).call(function () {
              fish.node.setPosition(position);
              fish.setDie(false);
            }).then(moveAction).call(function () {
              fish.onDie();
            }).start();
          } else {
            fish.node.setPosition(position);
            fish.moveAction.then(moveAction).call(function () {
              fish.onDie();
            }).start();
          }
        };

        FishGroupHelper.createFishLine = function createFishLine(fishCount, yCoord, space, speed, xOffset) {
          if (xOffset === void 0) {
            xOffset = 0;
          }

          var AppSize = gfBaseConfig.instance.AppSize;
          var LEFT = -200;
          var RIGHT = AppSize.Width + 200;

          if (gfFishGroupData.isFlipped()) {
            var _ref = [RIGHT, LEFT];
            LEFT = _ref[0];
            RIGHT = _ref[1];
            yCoord = AppSize.Height - yCoord;
          }

          var distance = Math.abs(RIGHT - LEFT) + fishCount * space - xOffset;

          for (var i = 0; i < fishCount; ++i) {
            var startX = LEFT - (i * space - xOffset) * gfFishGroupData.flipCoord;
            this.createSimpleMovingFish(v2(startX, yCoord), v2(startX + distance * gfFishGroupData.flipCoord, yCoord), 0, speed);
          }
        };

        FishGroupHelper.createSimpleMovingFish = function createSimpleMovingFish(startPos, destPos, baseDelay, speed) {
          var timeSkipped = gfFishGroupData.timeSkipped;
          var data = gfFishGroupData.getNextFishData();
          if (!data) return;
          var distance = v2Distance(destPos, startPos);
          var baseMoveTime = distance / speed;
          var distanceHaveMove = gfFishGroupData.isFlipped() ? -speed * timeSkipped : speed * timeSkipped;
          startPos = new Vec2(startPos.x + distanceHaveMove, startPos.y);
          data.moveAction = new FishMoveActions(startPos);
          data.moveAction.appendAction(FISH_ACTION.Delay, baseDelay);
          data.moveAction.appendAction(FISH_ACTION.MoveTo, {
            time: baseMoveTime - timeSkipped,
            x: destPos.x,
            y: destPos.y
          });
          FishGroupHelper.createFishWithDelay(data);
        };

        FishGroupHelper.convertFlipCoordinate = function convertFlipCoordinate(point) {
          if (gfFishGroupData.isFlipped()) {
            var AppSize = gfBaseConfig.instance.AppSize;
            return v2(AppSize.Width - point.x, AppSize.Height - point.y);
          }

          return point;
        };

        _createClass(FishGroupHelper, null, [{
          key: "instance",
          get: function get() {
            if (!this._instance) {
              this._instance = new FishGroupHelper();
            }

            return this._instance;
          }
        }]);

        return FishGroupHelper;
      }(), _class2.FISH_START_DELAY = 4, _class2._instance = null, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishGroupMgr.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfUtilities.ts', './gfBaseEvents.ts', './gfFishGroupHelper.ts', './gfFishGroup01.ts', './gfFishGroup02.ts', './gfFishGroup03.ts', './gfFishGroup04.ts', './gfFishGroup05.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, error, Component, registerEvent, removeEvents, gfBaseEvents, FishGroupHelper, gfFishGroup1, gfFishGroup2, gfFishGroup3, gfFishGroup4, gfFishGroup5;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      error = module.error;
      Component = module.Component;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      FishGroupHelper = module.default;
    }, function (module) {
      gfFishGroup1 = module.default;
    }, function (module) {
      gfFishGroup2 = module.default;
    }, function (module) {
      gfFishGroup3 = module.default;
    }, function (module) {
      gfFishGroup4 = module.default;
    }, function (module) {
      gfFishGroup5 = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "a5c64eKpjJFHLQ7FVr7G13D", "gfFishGroupMgr", undefined);

      var ccclass = _decorator.ccclass;
      var gfFishGroupMgr = exports('default', (_dec = ccclass('gfFishGroupMgr'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfFishGroupMgr, _Component);

        function gfFishGroupMgr() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = gfFishGroupMgr.prototype;

        _proto.onLoad = function onLoad() {
          this.initEvents();
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.GAME_LAYER.CREATE_FISH_GROUP, this.createFishGroup, this);
          registerEvent(gfBaseEvents.GAME_LAYER.RESUME_FISH_GROUP, this.resumeFishGroup, this);
        };

        _proto.resumeFishGroup = function resumeFishGroup(data) {
          if (data.ParadeKind >= 0) {
            this.createFishGroup({
              ListFish: data.ListParadeFish,
              ParadeKind: data.ParadeKind,
              buildTick: data.TimeBuildFishParade
            });
          }
        };

        _proto.createFishGroup = function createFishGroup(data) {
          FishGroupHelper.initFishGroupData(data);

          switch (data.ParadeKind) {
            case 0:
              this.createFishGroup1();
              break;

            case 1:
              this.createFishGroup2();
              break;

            case 2:
              this.createFishGroup3();
              break;

            case 3:
              this.createFishGroup4();
              break;

            case 4:
              this.createFishGroup5();
              break;

            default:
              error("WRONG PARADE KIND: " + data.ParadeKind);
          }
        };

        _proto.createFishGroup1 = function createFishGroup1() {
          gfFishGroup1.create();
        };

        _proto.createFishGroup2 = function createFishGroup2() {
          gfFishGroup2.create();
        };

        _proto.createFishGroup3 = function createFishGroup3() {
          // Two circle group go facing each other
          gfFishGroup3.create();
        };

        _proto.createFishGroup4 = function createFishGroup4() {
          //  Two group make a cross.
          gfFishGroup4.create();
        };

        _proto.createFishGroup5 = function createFishGroup5() {
          // Two cirle rotating then spread out
          gfFishGroup5.create();
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return gfFishGroupMgr;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfReferenceManager.ts', './utils.ts', './gfEventEmitter.ts', './gfBaseEvents.ts', './CustomTypeShare.ts', './gfUtilities.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, Component, gfReferenceManager, convertAssetArrayToObject, gfEventEmitter, gfBaseEvents, CustomEvent, registerEvent, removeEvents;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Component = module.Component;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      convertAssetArrayToObject = module.convertAssetArrayToObject;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      CustomEvent = module.CustomEvent;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "fe4e8FoSmVLkbx8Xyl0v6et", "gfFishLayer", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfFishLayer = exports('default', (_dec = ccclass('gfFishLayer'), _dec2 = property(Prefab), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfFishLayer, _Component);

        function gfFishLayer() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "listPrefabFish", _descriptor, _assertThisInitialized(_this));

          _this.fishObjects = {};
          return _this;
        }

        var _proto = gfFishLayer.prototype;

        _proto.onLoad = function onLoad() {
          gfReferenceManager.instance.setData({
            FishLayer: this.node
          });

          if (this.listPrefabFish) {
            this.fishObjects = convertAssetArrayToObject(this.listPrefabFish);
          }

          this.node['getPrefabFishByKind'] = this.getPrefabFishByKind.bind(this); // turn on debug physic
          // PhysicsSystem2D.instance.enable = true;
          // PhysicsSystem2D.instance.debugDrawFlags = EPhysics2DDrawFlags.All;
          // this.scheduleOnce(this.createFishGroupTest, 2); 
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.COMMON.FISH_LOG, this.fishLog, this);
        };

        _proto.createFishGroupTest = function createFishGroupTest() {
          var fishCount = [270];
          var fishKind = [2];
          var ParadeKind = 0;
          var ListFish = [];
          var index = 0;

          for (var i = 0; i < fishCount.length; ++i) {
            for (var j = 0; j < fishCount[i]; ++j) {
              ListFish.push({
                FishID: ++index,
                FishKind: fishKind[i]
              });
            }
          }

          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.CREATE_FISH_GROUP, {
            ParadeKind: ParadeKind,
            ListFish: ListFish
          });
        };

        _proto.getPrefabFishByKind = function getPrefabFishByKind(fishKind) {
          return this.fishObjects[fishKind];
        };

        _proto.fishLog = function fishLog(meta) {
          if (meta === void 0) {
            meta = 'fishLog';
          }

          var fishLogEvent = new CustomEvent('FISH_LOG', true);
          fishLogEvent.setUserData({
            meta: meta
          });
          this.node.dispatchEvent(fishLogEvent);
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return gfFishLayer;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "listPrefabFish", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishManager.ts", ['cc', './gfEventEmitter.ts', './gfBaseEvents.ts', './gfUtilities.ts', './gfBaseConfig.ts', './gfDataStore.ts', './gfPoolManager.ts', './gfReferenceManager.ts', './gfNodePoolConfig.ts', './gfGameScheduler.ts'], function (exports) {
  'use strict';

  var cclegacy, warn, UITransform, v3, BoxCollider2D, Intersection2D, instantiate, gfEventEmitter, gfBaseEvents, registerEvent, v2Distance, randomBetween, removeEvents, gfBaseConfig, gfDataStore, gfPoolManager, gfReferenceManager, gfNodePoolConfig, gfGameScheduler;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      warn = module.warn;
      UITransform = module.UITransform;
      v3 = module.v3;
      BoxCollider2D = module.BoxCollider2D;
      Intersection2D = module.Intersection2D;
      instantiate = module.instantiate;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      v2Distance = module.v2Distance;
      randomBetween = module.randomBetween;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfPoolManager = module.default;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfNodePoolConfig = module.default;
    }, function (module) {
      gfGameScheduler = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f3b21c8WzdJmK92C9W5kija", "gfFishManager", undefined);

      var gfFishManager = exports('default', /*#__PURE__*/function () {
        function gfFishManager() {
          this.listFish = void 0;
          this._lockFishId = void 0;
          this.currentFishBoomPosition = void 0;
          gfFishManager.instance = this;
          this.listFish = [];
          this._lockFishId = null;
          this.currentFishBoomPosition = null;
          this.initEvent();
        }

        var _proto = gfFishManager.prototype;

        _proto.initEvent = function initEvent() {
          registerEvent(gfBaseEvents.GAME_LAYER.CREATE_FISH, this.createListFish, this);
          registerEvent(gfBaseEvents.GAME_LAYER.CATCH_FISH, this.catchFish, this);
          registerEvent(gfBaseEvents.FISH_LAYER.CATCH_FISH_BY_SKILL, this.catchFishSkill, this);
          registerEvent(gfBaseEvents.GAME_LAYER.UPDATE_ROOM_DATA, this.updateRoomData, this);
          registerEvent(gfBaseEvents.GAME_LAYER.REMOVE_FISH, this.removeFish, this);
          registerEvent(gfBaseEvents.GAME_LAYER.CREATE_FISH_GROUP, this.moveOutAllFishes, this);
          registerEvent(gfBaseEvents.GAME_LAYER.MOVE_OUT_ALL_FISHES, this.moveOutAllFishes, this);
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.removeAll, this);
          registerEvent(gfBaseEvents.GAME_LAYER.ON_ENTER_GAME_ROOM, this.removeAll, this);
          registerEvent(gfBaseEvents.DRAGON.ON_END, this.endDragon, this);
          registerEvent(gfBaseEvents.DRAGON.ON_BALL_DROPPED, this.dragonDropBall, this);
        };

        _proto.createListFish = function createListFish(data) {
          for (var i = 0; i < data.length; ++i) {
            data[i].isResume = data.isResume;
            this.createFishWithData(data[i]);
          }
        };

        _proto.catchFishSkill = function catchFishSkill(data) {
          var _this = this;

          var DeskStation = data.DeskStation,
              BulletMultiple = data.BulletMultiple,
              SkillID = data.SkillID,
              ListFish = data.ListFish;
          var explosionPosition = this.getExplosionPosition(data);

          if (!explosionPosition) {
            warn('catchFishSkill explosionPosition null', data);
            return;
          }

          var listArrayFish = this.splitListFish(explosionPosition, ListFish, SkillID);

          if (!listArrayFish) {
            return;
          }

          var player = gfReferenceManager.instance.getPlayerByDeskStation(DeskStation);

          if (player && player.isMe) {
            player.addGoldReward(data.TotalReward);
          }

          var _loop = function _loop(i) {
            gfGameScheduler.scheduleOnce(function () {
              var dataInput = {
                DeskStation: DeskStation,
                BulletMultiple: BulletMultiple,
                ListFish: listArrayFish[i].listFish
              };

              _this.catchListFish(dataInput);
            }, listArrayFish[i].duration);
          };

          for (var i = 0; i < listArrayFish.length; i++) {
            _loop(i);
          }
        };

        _proto.getExplosionPosition = function getExplosionPosition(data) {
          var DeskStation = data.DeskStation,
              SkillID = data.SkillID;
          var result = null;
          var SkillConfig = gfBaseConfig.instance.SkillConfig;
          var player = gfReferenceManager.instance.getPlayerByDeskStation(DeskStation);

          switch (SkillID) {
            case SkillConfig.FISH_BOMB:
              {
                if (this.currentFishBoomPosition) {
                  result = this.currentFishBoomPosition;
                  this.currentFishBoomPosition = null;
                } else {
                  warn('currentFishBoomPosition null');
                }
              }
              break;

            default:
              if (player) {
                result = player.node.getComponent(UITransform).convertToWorldSpaceAR(v3(0, 0, 1));
              }

          }

          return result;
        };

        _proto.splitListFish = function splitListFish(explosionPosition, listDataFish, SkillID) {
          var _this2 = this;

          var result = [];
          var vfxSkillDelay = gfBaseConfig.instance.vfxSkillDelay;
          var vfxSkill = vfxSkillDelay[SkillID] ? vfxSkillDelay[SkillID] : vfxSkillDelay[0];
          listDataFish.forEach(function (data) {
            var fish = _this2.getFishById(data.FishID);

            if (fish) {
              data.distance = v2Distance(explosionPosition, fish.node.position);
            } else {
              data.distance = vfxSkillDelay.MAX_DISTANCE;
            }
          });
          listDataFish = listDataFish.sort(function (a, b) {
            return a.distance - b.distance;
          });
          var distances = vfxSkill.distances,
              velocity = vfxSkill.velocity;

          var _loop2 = function _loop2(i) {
            var fishArr = listDataFish.filter(function (fish) {
              return fish.distance <= distances[i];
            });

            if (fishArr.length > 0) {
              result.push({
                listFish: fishArr,
                duration: fishArr[0].distance / velocity
              });
              listDataFish.splice(0, fishArr.length);
            }
          };

          for (var i = 0; i < distances.length; i++) {
            _loop2(i);
          }

          if (listDataFish.length > 0) {
            result.push({
              listFish: listDataFish,
              duration: vfxSkillDelay.MAX_DISTANCE / velocity
            });
          }

          return result;
        };

        _proto.catchListFish = function catchListFish(data) {
          var listFish = data.ListFish;

          for (var i = 0; i < listFish.length; i++) {
            var fish = listFish[i];
            var infoDetail = {
              DeskStation: data.DeskStation,
              FishID: fish.FishID,
              GoldReward: fish.GoldReward,
              BulletMultiple: data.BulletMultiple,
              listItem: fish.listItem,
              isSkill: true,
              skillID: data.SkillID
            };
            this.catchFish(infoDetail);
          }
        };

        _proto.catchFish = function catchFish(data) {
          if (data.FishID === 0) return;
          var player = gfReferenceManager.instance.getPlayerByDeskStation(data.DeskStation);

          if (player && player.isMe && !data.isSkill) {
            player.addGoldReward(data.GoldReward);
          }

          var fish = this.getFishById(data.FishID);

          if (fish) {
            if (fish.getKind() === gfBaseConfig.instance.FISH_KIND.BOMB) {
              this.currentFishBoomPosition = fish.node.position.clone();
            }

            fish.onCatch(data);
          } else if (player && player.isMe) {
            gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.PLAY_REWARD_EFFECT, {
              data: data
            });
          }

          if (player && data.listItem) {
            var dataCatch = {
              listItem: data.listItem,
              DeskStation: data.DeskStation,
              isMe: player.isMe,
              Fish: fish
            };
            this.processItemSkill(dataCatch);
          }
        };

        _proto.processItemSkill = function processItemSkill(data) {
          var freezeSkill = data.listItem.find(function (e) {
            return e.ID === gfBaseConfig.instance.SKILL_ITEM.FREEZE;
          });

          if (freezeSkill) {
            if (data.isMe) gfDataStore.instance.setListItemSkillByData(freezeSkill);
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.FREEZE_EFFECT_ITEM, {
              deskStation: data.DeskStation,
              Fish: data.Fish
            });
          }
        };

        _proto.updateRoomData = function updateRoomData(data) {
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.RESUME_FISH_GROUP, data);

          if (data.ListFish && data.ListFish.length > 0) {
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.RESUME_SOUND_BACKGROUND, {
              listFishNormal: data.ListFish,
              listFishGroup: data.ListParadeFish
            });
            data.ListFish.isResume = true;
            this.createListFish(data.ListFish);
          }

          if (this._lockFishId != null) {
            this.resumeLockFish(this._lockFishId);
          }

          if (gfDataStore.instance.isAutoPaused()) {
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.RESUME_AUTO_FIRE);
          }
        };

        _proto.resumeLockFish = function resumeLockFish(fishId) {
          var lockFish = this.getFishById(fishId);
          var lockFishID = lockFish ? lockFish.getId() : null;
          gfDataStore.instance.setSelfInfo({
            LockFish: lockFish,
            LockFishID: lockFishID
          });
        };

        _proto.getListFish = function getListFish() {
          return this.listFish;
        };

        _proto.getFishById = function getFishById(id) {
          for (var i = 0; i < this.listFish.length; ++i) {
            if (this.listFish[i].getId() === id) {
              return this.listFish[i];
            }
          }

          return null;
        };

        _proto.moveOutAllFishes = function moveOutAllFishes() {
          for (var i = this.listFish.length - 1; i >= 0; --i) {
            this.listFish[i].moveOut();
          }
        };

        _proto.getFishByType = function getFishByType(type, ignoreFishID) {
          if (ignoreFishID === void 0) {
            ignoreFishID = null;
          }

          var listFish = [];

          for (var i = 0; i < this.listFish.length; ++i) {
            var fish = this.listFish[i];

            if (fish.getKind() === type && fish.isAvailable() && fish.getId() !== ignoreFishID) {
              listFish.push(this.listFish[i]);
            }
          }

          if (listFish.length > 0) {
            return listFish[randomBetween(0, listFish.length - 1)];
          }

          return null;
        };

        _proto.isBossKind = function isBossKind(fishKind) {
          return fishKind == gfBaseConfig.instance.FISH_KIND.MINIBOSS || fishKind === gfBaseConfig.instance.FISH_KIND.DRAGON;
        };

        _proto.isSpecialFish = function isSpecialFish(fishKind) {
          // return GameConfig.instance.LIST_SPECIAL_FISH_KIND.includes(fishKind);
          return gfBaseConfig.instance.LIST_SPECIAL_FISH_KIND.indexOf(fishKind) != -1;
        };

        _proto.getMinimumFishKind = function getMinimumFishKind(ignoreKind) {
          var minFishKind = 9999;

          for (var i = 0; i < this.listFish.length; ++i) {
            var fish = this.listFish[i];

            if (fish.isAvailable() // && fish.checkMultiplier() === 1
            && !this.isSpecialFish(fish.getKind()) && fish.getKind() !== ignoreKind && fish.getKind() < minFishKind) {
              minFishKind = fish.getKind();
            }
          }

          return minFishKind;
        };

        _proto.GetFishForTargetAll = function GetFishForTargetAll() {
          var selfInfo = gfDataStore.instance.getSelfInfo();

          if (selfInfo.isPriorityTargetBoss) {
            for (var i = 0; i < this.listFish.length; ++i) {
              var fish = this.listFish[i];

              if (fish.isAvailable() && this.isBossKind(fish.getKind())) {
                selfInfo.LockFishKind = fish.getKind();
                return fish;
              }
            }
          }

          if (selfInfo.LockFishKind > -1) {
            var oldFishId = selfInfo.LockFish ? selfInfo.LockFish.getId() : null;

            var _fish = this.getFishByType(selfInfo.LockFishKind, oldFishId);

            if (_fish) {
              return _fish;
            }
          }

          selfInfo.LockFishKind = this.getMinimumFishKind(selfInfo.LockFishKind);
          return this.getFishByType(selfInfo.LockFishKind);
        };

        _proto.GetFishByPoint = function GetFishByPoint(point) {
          var fishResult = null;
          var selfInfo = gfDataStore.instance.getSelfInfo();

          for (var i = 0; i < this.listFish.length; ++i) {
            var fish = this.listFish[i];

            if (fish && fish.isAvailable() && (!selfInfo.LockFish || selfInfo.LockFish && selfInfo.LockFish.getId() !== fish.getId())) {
              if (this.isBossKind(fish.getKind())) {
                fishResult = fish;
              } else {
                var boxList = fish.getComponents(BoxCollider2D);

                if (boxList) {
                  for (var j = 0; j < boxList.length; ++j) {
                    if (boxList[j].worldPoints && Intersection2D.pointInPolygon(point, boxList[j].worldPoints)) {
                      if (!fishResult || fishResult && fish.getZIndex() > fishResult.getZIndex()) {
                        fishResult = fish;
                      }
                    }
                  }
                }
              }
            }
          }

          return fishResult;
        };

        _proto.createFishWithData = function createFishWithData(data) {
          var fish = null;
          var prefabFish = gfReferenceManager.instance.getPrefabFishByKind(parseInt(data.FishKind));

          if (data.FishKind === gfBaseConfig.instance.FISH_KIND.DRAGON) {
            fish = this.createBoss(data, gfBaseConfig.instance.BOSS_PREFAB_NAME.DRAGON);

            if (fish) {
              gfEventEmitter.instance.emit(gfBaseEvents.DRAGON.CREATE);
            }

            if (!data.isResume) {
              gfEventEmitter.instance.emit(gfBaseEvents.COMMON.FISH_LOG, gfBaseConfig.instance.FISH_LOG_CONFIG.DRAGON);
            }
          } else if (prefabFish) {
            // Create by prefab
            fish = instantiate(prefabFish);
            fish.setParent(gfReferenceManager.instance.getNodeFishLayer());
            fish = fish.getComponent("gfBaseFish");
            fish.initFishData(data);
          } else {
            // Create by pool
            fish = gfPoolManager.instance.getFishWithData(data);
          }

          if (fish) {
            this.listFish.push(fish);
            return fish;
          }

          return null;
        };

        _proto.createBoss = function createBoss(data, bossName) {
          var boss = gfPoolManager.instance.getBossWithData(data, bossName);
          return boss;
        }
        /*
        ****** findFishForAutoBot ******
        ** Độ ưu tiên cá được sắp xếp theo thứ tự Rồng -> Miniboss -> cá may mắn -> cá thường
        ** Config giữa độ ưu tiên của rồng và miniboss được lưu ở GameConfig.instance.PRIORITY_FISH
        */
        ;

        _proto.findFishForAutoBot = function findFishForAutoBot() {
          if (gfDataStore.instance.getSelfInfo().LockFish || gfDataStore.instance.getSelfInfo().isLockGun) {
            return null;
          }

          var fish = null;
          /** *** kiểm tra xem boss có trên màn hình và cắm máy có đang bật nó không để ưu tiên target boss **** */

          fish = this.getSpecialFishForAutoBot();

          if (!fish) {
            fish = this.getLuckyFishInScreen();
          }

          if (!fish) {
            fish = this.getRandomFishForAutoBot();
          }

          return fish;
        };

        _proto.getSpecialFishForAutoBot = function getSpecialFishForAutoBot() {
          var fish = null;

          for (var index = 0; index < gfBaseConfig.instance.PRIORITY_FISH.length; index++) {
            var fishKind = gfBaseConfig.instance.PRIORITY_FISH[index.toString()];

            if (gfDataStore.instance.getBotSetting().fishKindArr.indexOf(fishKind) >= 0) {
              fish = this.getFishByType(fishKind);
              if (fish) return fish;
            }
          }

          return null;
        };

        _proto.getRandomFishForAutoBot = function getRandomFishForAutoBot() {
          var arrayFish = gfDataStore.instance.getBotSetting().fishKindArr;
          var fish;
          var currFish = null;
          this.listFish = this.listFish.sort(function () {
            return Math.random() - 0.5;
          });

          for (var i = 0; i < this.listFish.length; i++) {
            fish = this.listFish[i];

            if (fish.isAvailable() && arrayFish.indexOf(fish.getKind()) >= 0) {
              currFish = fish;
              break;
            }
          }

          return currFish;
        };

        _proto.getLuckyFishInScreen = function getLuckyFishInScreen() {
          // const arrayFish = DataStore.instance.getBotSetting().fishKindArr;
          // for (let i = 0; i < this.listFish.length; i++) {
          //     const fish = this.listFish[i];
          //     if (fish._multiplier > 1) {
          //         if (!fish.isAvailable() || arrayFish.indexOf(fish.getKind()) < 0) {
          //             return null;
          //         }
          //         return fish;
          //     }
          // }
          return null;
        };

        _proto.isDragonInGame = function isDragonInGame() {
          return this.getBossByKind(gfBaseConfig.instance.FISH_KIND.DRAGON) != null;
        };

        _proto.endDragon = function endDragon(data) {
          var dragon = this.getBossByKind(gfBaseConfig.instance.FISH_KIND.DRAGON);
          if (!dragon) return;

          if (data.wonJackpot) {
            dragon.onCatch(null);
          } else {
            dragon.onDie();
          }
        };

        _proto.dragonDropBall = function dragonDropBall(data) {
          var dragon = this.getBossByKind(gfBaseConfig.instance.FISH_KIND.DRAGON);
          if (!dragon) return;
          data.position = dragon.getBallDropPosition();
          gfEventEmitter.instance.emit(gfBaseEvents.DRAGON.DROP_BALL, data);
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.DRAGON_HIT_BALL);
        };

        _proto.getBossByKind = function getBossByKind(kind) {
          return this.listFish.find(function (boss) {
            return boss.getKind() === kind;
          });
        };

        _proto.removeFish = function removeFish(id) {
          for (var i = 0; i < this.listFish.length; ++i) {
            if (this.listFish[i].getId() === id) {
              this.listFish.splice(i, 1);
              return true;
            }
          }

          warn("FISH NOT FOUND!!! " + id);
          return false;
        };

        _proto.removeAll = function removeAll() {
          var _DataStore$instance$g = gfDataStore.instance.getSelfInfo(),
              LockFish = _DataStore$instance$g.LockFish;

          this._lockFishId = LockFish ? LockFish.getId() : null;

          for (var i = 0; i < this.listFish.length; ++i) {
            var fish = this.listFish[i];

            if (fish.getKind() === gfBaseConfig.instance.FISH_KIND.DRAGON) {
              fish.onDie();
            } else if (!gfNodePoolConfig.instance.checkFishPoolByKind(fish.getKind())) {
              fish.onDie();
            }
          }

          this.listFish.length = 0;
          this.currentFishBoomPosition = null;
        };

        _proto.destroy = function destroy() {
          removeEvents(this);
          this.removeAll();
          gfFishManager.instance = null;
        };

        return gfFishManager;
      }());
      gfFishManager.instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishMoveActions.ts", ['cc', './gfActionHelper.ts', './gfFishGroupData.ts'], function (exports) {
  'use strict';

  var cclegacy, tween, v3, error, v2, misc, gfBezierBy, gfCircleBy, gfMoveByDistance, gfMoveBy, gfMoveTo, rotateTo, moveBySpring, scaleTo, gfFishGroupData;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      tween = module.tween;
      v3 = module.v3;
      error = module.error;
      v2 = module.v2;
      misc = module.misc;
    }, function (module) {
      gfBezierBy = module.gfBezierBy;
      gfCircleBy = module.gfCircleBy;
      gfMoveByDistance = module.gfMoveByDistance;
      gfMoveBy = module.gfMoveBy;
      gfMoveTo = module.gfMoveTo;
      rotateTo = module.rotateTo;
      moveBySpring = module.moveBySpring;
      scaleTo = module.scaleTo;
    }, function (module) {
      gfFishGroupData = module.default;
    }],
    execute: function () {
      exports('FISH_ACTION', void 0);

      cclegacy._RF.push({}, "4259czfmdNJr5sMWVhHKYwG", "gfFishMoveActions", undefined);

      var FISH_ACTION;

      (function (FISH_ACTION) {
        FISH_ACTION[FISH_ACTION["Delay"] = 0] = "Delay";
        FISH_ACTION[FISH_ACTION["gfBezierBy"] = 1] = "gfBezierBy";
        FISH_ACTION[FISH_ACTION["MoveBy"] = 2] = "MoveBy";
        FISH_ACTION[FISH_ACTION["CircleBy"] = 3] = "CircleBy";
        FISH_ACTION[FISH_ACTION["MoveByDistance"] = 4] = "MoveByDistance";
        FISH_ACTION[FISH_ACTION["RotateTo"] = 5] = "RotateTo";
        FISH_ACTION[FISH_ACTION["MoveTo"] = 6] = "MoveTo";
        FISH_ACTION[FISH_ACTION["MoveSpring"] = 7] = "MoveSpring";
        FISH_ACTION[FISH_ACTION["ScaleTo"] = 8] = "ScaleTo";
      })(FISH_ACTION || (FISH_ACTION = exports('FISH_ACTION', {})));

      var FishMoveActions = exports('FishMoveActions', /*#__PURE__*/function () {
        function FishMoveActions(startPosition, angle, timeSkipped) {
          if (angle === void 0) {
            angle = 0;
          }

          if (timeSkipped === void 0) {
            timeSkipped = 0;
          }

          this.timeSkipped = void 0;
          this.moveAction = void 0;
          this.startPosition = void 0;
          this.startAngle = void 0;
          this.timeSkipped = timeSkipped ? timeSkipped : gfFishGroupData.timeSkipped;
          this.moveAction = [];
          this.startPosition = v2(startPosition);

          if (this.timeSkipped < 0) {
            var time = -this.timeSkipped;
            this.timeSkipped = 0;
            this.appendDelay({
              time: time
            });
          }

          this.startAngle = angle;
        }

        var _proto = FishMoveActions.prototype;

        _proto.getActions = function getActions() {
          var actionChain = tween();

          if (this.moveAction.length > 0) {
            for (var i = 0; i < this.moveAction.length; ++i) {
              actionChain.then(this.moveAction[i]);
            }

            return actionChain;
          }

          return actionChain.delay(0);
        };

        _proto.getStartPosition = function getStartPosition() {
          return this.startPosition;
        };

        _proto.getStartPositionV3 = function getStartPositionV3() {
          return v3(this.startPosition.x, this.startPosition.y, 0);
        };

        _proto.getStartAngle = function getStartAngle() {
          return this.startAngle;
        };

        _proto.appendAction = function appendAction(name, prop) {
          switch (name) {
            case FISH_ACTION.Delay:
              this.appendDelay(prop);
              break;

            case FISH_ACTION.gfBezierBy:
              this.appendGfBezierBy(prop);
              break;

            case FISH_ACTION.CircleBy:
              this.appendCircleBy(prop);
              break;

            case FISH_ACTION.MoveByDistance:
              this.appendMoveByDistance(prop);
              break;

            case FISH_ACTION.MoveBy:
              this.appendMoveBy(prop);
              break;

            case FISH_ACTION.MoveTo:
              this.appendMoveTo(prop);
              break;

            case FISH_ACTION.RotateTo:
              this.appendRotateTo(prop);
              break;

            case FISH_ACTION.MoveSpring:
              this.appendMoveSprings(prop);
              break;

            case FISH_ACTION.ScaleTo:
              this.appendScaleTo(prop);

            default:
              error('Invalid action');
          }
        };

        _proto.appendDelay = function appendDelay(prop) {
          var time = prop.time;

          if (this.timeSkipped >= time) {
            this.timeSkipped -= time;
          } else {
            this.moveAction.push(tween().delay(time - this.timeSkipped));
            this.timeSkipped = 0;
          }
        };

        _proto.appendGfBezierBy = function appendGfBezierBy(prop) {
          var time = prop.time,
              points = prop.points;

          if (this.timeSkipped && this.timeSkipped >= time) {
            this.timeSkipped -= time;
            this.startPosition = this.startPosition.add(points.pop());
          } else {
            this.moveAction.push(gfBezierBy(time - this.timeSkipped, points, this.timeSkipped));
            this.timeSkipped = 0;
          }
        };

        _proto.appendCircleBy = function appendCircleBy(prop) {
          var time = prop.time,
              center = prop.center,
              radius = prop.radius,
              angle = prop.angle;

          if (this.timeSkipped && this.timeSkipped >= time) {
            this.timeSkipped -= time;
            var baseAngle = Math.atan2(this.startPosition.y - center.y, this.startPosition.x - center.x);
            var radian = baseAngle + angle * Math.PI / 180;
            var x = radius * Math.cos(radian);
            var y = radius * Math.sin(radian);
            this.startPosition = v2(x + center.x, y + center.y);
            this.startAngle += misc.radiansToDegrees(radian);
          } else {
            this.moveAction.push(gfCircleBy(time - this.timeSkipped, center, radius, angle, this.timeSkipped));
            this.timeSkipped = 0;
          }
        };

        _proto.appendMoveByDistance = function appendMoveByDistance(prop) {
          var time = prop.time,
              distance = prop.distance;
          var angle = misc.degreesToRadians(this.startAngle);

          if (this.timeSkipped && this.timeSkipped >= time) {
            this.timeSkipped -= time;
            var vDelta = v2(distance * Math.cos(angle), distance * Math.sin(angle));
            this.startPosition = this.startPosition.add(vDelta);
          } else {
            this.moveAction.push(gfMoveByDistance(time - this.timeSkipped, distance, this.timeSkipped));
            this.timeSkipped = 0;
          }
        };

        _proto.appendMoveBy = function appendMoveBy(prop) {
          var time = prop.time,
              x = prop.x,
              y = prop.y,
              motion = prop.motion;

          if (this.timeSkipped && this.timeSkipped >= time) {
            this.timeSkipped -= time;
            this.startPosition = this.startPosition.add(v2(x, y));
          } else {
            var action = gfMoveBy(time - this.timeSkipped, x, y, this.timeSkipped, motion);
            this.moveAction.push(action);
            this.timeSkipped = 0;
          }
        };

        _proto.appendMoveTo = function appendMoveTo(prop) {
          var time = prop.time,
              x = prop.x,
              y = prop.y,
              motion = prop.motion;

          if (this.timeSkipped && this.timeSkipped >= time) {
            this.timeSkipped -= time;
            this.startPosition = this.startPosition.set(x, y);
          } else {
            var action = gfMoveTo(time - this.timeSkipped, x, y, this.timeSkipped, motion);
            this.moveAction.push(action);
            this.timeSkipped = 0;
          }
        };

        _proto.appendRotateTo = function appendRotateTo(prop) {
          var time = prop.time,
              angle = prop.angle;

          if (this.timeSkipped && this.timeSkipped >= time) {
            this.timeSkipped -= time;
            this.moveAction.push(rotateTo(0, angle));
            this.startAngle = angle;
          } else {
            this.moveAction.push(rotateTo(time - this.timeSkipped, angle));
            this.timeSkipped = 0;
          }
        };

        _proto.appendMoveSprings = function appendMoveSprings(prop) {
          var time = prop.time,
              x = prop.x,
              y = prop.y;

          if (this.timeSkipped && this.timeSkipped >= time) {
            this.timeSkipped -= time;
            this.moveAction.push(moveBySpring(prop));
            this.startPosition = this.startPosition.add(v2(x, y));
          } else {
            this.moveAction.push(moveBySpring(prop));
            this.timeSkipped = 0;
          }
        };

        _proto.appendScaleTo = function appendScaleTo(prop) {
          var time = prop.time,
              scaleX = prop.scaleX,
              scaleY = prop.scaleY;

          if (this.timeSkipped && this.timeSkipped >= time) {
            this.timeSkipped -= time;
            this.moveAction.push(scaleTo(0, scaleX, scaleY));
          } else {
            this.moveAction.push(scaleTo(time - this.timeSkipped, scaleX, scaleY));
            this.timeSkipped = 0;
          }
        };

        return FishMoveActions;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFreezeGunFX.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, sp, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "9d1acQMwhZEGb+TDxd9EmQU", "gfFreezeGunFX", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfFreezeGunFX = exports('GfFreezeGunFX', (_dec = ccclass('GfFreezeGunFX'), _dec2 = property(sp.Skeleton), _dec3 = property(sp.Skeleton), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfFreezeGunFX, _Component);

        function GfFreezeGunFX() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "freezeGunFX", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "freezeTextFX", _descriptor2, _assertThisInitialized(_this));

          _this.aniFreeze = {
            animGunAppear: "IdleSungBang",
            animGunIdle: "",
            animText: "animation"
          };
          return _this;
        }

        var _proto = GfFreezeGunFX.prototype;

        _proto.onLoad = function onLoad() {
          this.freezeGunFX.node.active = false;
          this.freezeTextFX.node.active = false;
        }
        /**
         * Active effect freeze on gun and show text freeze when active freeze skill
         * */
        ;

        _proto.activeFreezeEffect = function activeFreezeEffect() {
          var _this2 = this;

          this.freezeGunFX.node.active = true;
          var isHaveIdle = !!this.freezeGunFX.findAnimation(this.aniFreeze.animGunIdle);
          this.freezeGunFX.setAnimation(0, this.aniFreeze.animGunAppear, !isHaveIdle);

          if (isHaveIdle) {
            this.freezeGunFX.addAnimation(0, this.aniFreeze.animGunIdle, true);
          }

          this.freezeTextFX.node.active = true;
          this.freezeTextFX.setAnimation(0, this.aniFreeze.animText, false);
          this.freezeTextFX.setCompleteListener(function () {
            _this2.freezeTextFX.node.active = false;
          });
        }
        /**
         * Return freeze gun is active or not
         * @return boolean
         * */
        ;

        _proto.isFreezeGunActive = function isFreezeGunActive() {
          return this.freezeGunFX.node.active;
        }
        /**
         * Stop and reset freezeGunFx to default
         * */
        ;

        _proto.stopFreezeGunEffect = function stopFreezeGunEffect() {
          this.freezeGunFX.node.active = false;
          this.freezeGunFX.setToSetupPose();
        };

        return GfFreezeGunFX;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "freezeGunFX", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "freezeTextFX", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFreezeSkill.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfDataStore.ts', './gfEventEmitter.ts', './gfFishManager.ts', './gfReferenceManager.ts', './gfBaseConfig.ts', './gfBaseEvents.ts', './gfUtilities.ts', './gfEffectLayer.ts', './gfFishFreezeEffect.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Sprite, Button, Component, gfDataStore, gfEventEmitter, gfFishManager, gfReferenceManager, gfBaseConfig, gfBaseEvents, registerEvent, isEmpty, removeEvents, gfEffectLayer, gfFishFreezeEffect;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Sprite = module.Sprite;
      Button = module.Button;
      Component = module.Component;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfFishManager = module.default;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      isEmpty = module.isEmpty;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfEffectLayer = module.gfEffectLayer;
    }, function (module) {
      gfFishFreezeEffect = module.gfFishFreezeEffect;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "fb43b69MjRAtYPviLKUH01p", "gfFreezeSkill", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfFreezeSkill = exports('gfFreezeSkill', (_dec = ccclass('gfFreezeSkill'), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property(Sprite), _dec5 = property(Button), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfFreezeSkill, _Component);

        function gfFreezeSkill() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "labelSkillCount", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labelCoolDown", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "frzCDPrgss", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnFreeze", _descriptor4, _assertThisInitialized(_this));

          _this.skillCount = 0;
          _this.freezeTime = 0;
          _this.isLockByLaser = false;
          _this.isLockByFishParade = false;
          _this.realSkillCount = 0;
          return _this;
        }

        var _proto = gfFreezeSkill.prototype;

        _proto.onLoad = function onLoad() {
          this.skillCount = 0;
          this.initEvents();
          gfReferenceManager.instance.setData({
            'BtnFreeze': this.btnFreeze.node
          });
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.GAME_LAYER.FREEZE_ADD_ITEM, this.addFreezeItem, this);
          registerEvent(gfBaseEvents.GAME_LAYER.ON_ACTIVE_FREEZE_GUN, this.activeFreezeGun, this);
          registerEvent(gfBaseEvents.GAME_LAYER.ON_STOP_FREEZE_GUN, this.stopFreezeGun, this);
          registerEvent(gfBaseEvents.GAME_LAYER.UPDATE_LIST_ITEM, this.updateTotalFreeze, this);
          registerEvent(gfBaseEvents.GAME_LAYER.RECEIVE_LASER_GUN, this.onPlayerHaveGunLaser, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.UPDATE_LIST_PLAYER, this.onUpdatePlayers, this);
          registerEvent(gfBaseEvents.GAME_LAYER.CATCH_FISH, this.catchFish, this);
          registerEvent(gfBaseEvents.FISH_LAYER.CATCH_FISH_BY_SKILL, this.catchFishSkill, this);
          registerEvent(gfBaseEvents.GAME_LAYER.FREEZE_FISH, this.freezeFish, this);
          registerEvent(gfBaseEvents.GAME_LAYER.GAME_CHANGE_ROUND, this.onChangeRound, this);
          registerEvent(gfBaseEvents.GAME_LAYER.UPDATE_ROOM_DATA, this.onUpdateRoomData, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.PLAYER_JOIN_BOARD, this.onUpdatePlayers, this);
          registerEvent(gfBaseEvents.GAME_LAYER.INTERACTABLE_HUD, this.updateFreezeButtonStatus, this);
        };

        _proto.update = function update(dt) {
          this.updateFreezeCooldown(dt);
        };

        _proto.updateFreezeCooldown = function updateFreezeCooldown(dt) {
          if (this.freezeTime == 0) return;
          this.freezeTime -= dt;
          if (this.freezeTime < 0) this.freezeTime = 0;
          this.updateCooldownProgress();
        };

        _proto.addFreezeItem = function addFreezeItem() {
          var numSkill = gfDataStore.instance.getItemSkillById(gfBaseConfig.instance.SKILL_ITEM.FREEZE).amount;
          var effectLayer = gfReferenceManager.instance.getEffectLayer().getComponent(gfEffectLayer);
          var flyingItem = effectLayer.getTotalFlyingItems();
          this.skillCount = numSkill - flyingItem;
          this.updateFreezeCountLabel();
          this.updateFreezeButtonStatus();
        };

        _proto.updateTotalFreeze = function updateTotalFreeze() {
          this.skillCount = gfDataStore.instance.getItemSkillById(gfBaseConfig.instance.SKILL_ITEM.FREEZE).amount;
          this.realSkillCount = this.skillCount;
          this.updateFreezeCountLabel();
          this.updateFreezeButtonStatus();
          this.updateCooldownProgress();
        };

        _proto.updateCooldownProgress = function updateCooldownProgress() {
          this.frzCDPrgss.fillRange = this.freezeTime / gfBaseConfig.instance.TIME_COUNTDOWN_ITEM_FREEZE;
          this.labelCoolDown.string = Math.ceil(this.freezeTime).toString();
          this.labelCoolDown.node.active = this.freezeTime > 0;
        };

        _proto.updateFreezeCountLabel = function updateFreezeCountLabel() {
          this.labelSkillCount.string = this.skillCount + "/9";
        };

        _proto.updateFreezeButtonStatus = function updateFreezeButtonStatus() {
          var isLockByLaser = gfDataStore.instance.getSelfInfo().skillLock;
          this.btnFreeze.interactable = !this.isLockByFishParade && !isLockByLaser && this.skillCount > 0 && this.freezeTime == 0;
        };

        _proto.activeFreezeGun = function activeFreezeGun(data) {
          var player = gfReferenceManager.instance.getPlayerByDeskStation(data.DeskStation);
          player.activeFreezeEffect();

          if (data.DeskStation === gfDataStore.instance.getSelfDeskStation()) {
            this.freezeTime = gfBaseConfig.instance.TIME_COUNTDOWN_ITEM_FREEZE;
            this.updateFreezeCountLabel();
            this.updateFreezeButtonStatus();
            this.updateCooldownProgress();
          }
        };

        _proto.stopFreezeGun = function stopFreezeGun(data) {
          var player = gfReferenceManager.instance.getPlayerByDeskStation(data.DeskStation);
          player.stopFreezeEffect();

          if (data.DeskStation === gfDataStore.instance.getSelfDeskStation()) {
            this.freezeTime = 0;
            this.updateCooldownProgress();
            this.updateFreezeButtonStatus();
          }
        };

        _proto.onPlayerHaveGunLaser = function onPlayerHaveGunLaser(DeskStation) {
          var player = gfReferenceManager.instance.getPlayerByDeskStation(DeskStation);

          if (player.isMe) {
            this.updateFreezeButtonStatus();
          }
        };

        _proto.toggleButton = function toggleButton() {
          this.updateFreezeButtonStatus();
        };

        _proto.onClickFreezeBtn = function onClickFreezeBtn() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.SEND_ACTIVE_FREEZE_GUN);
        };

        _proto.onUpdatePlayers = function onUpdatePlayers(data) {
          var _this2 = this;

          var callback = function callback(i) {
            if (i === void 0) {
              i = null;
            }

            var userInfo = i != null ? data[i] : data;
            var player = gfReferenceManager.instance.getPlayerByDeskStation(userInfo.DeskStation);

            if (player.isMe) {
              if (userInfo.IceTimeRemain) {
                player.activeFreezeEffect();
                _this2.freezeTime = userInfo.IceTimeRemain / 1000;
              } else {
                _this2.freezeTime = 0;
                player.stopFreezeEffect();
              }

              _this2.updateCooldownProgress();

              _this2.updateFreezeCountLabel();

              _this2.updateFreezeButtonStatus();
            } else {
              userInfo.IceTimeRemain ? player.activeFreezeEffect() : player.stopFreezeEffect();
            }
          };

          if (data.length) {
            for (var i = 0; i < data.length; i++) {
              callback(i);
            }
          } else {
            callback();
          }
        };

        _proto.catchFishSkill = function catchFishSkill(data) {
          var listFish = data.ListFish;

          for (var i = 0; i < listFish.length; i++) {
            var fish = listFish[i];
            this.catchFish(fish);
          }
        };

        _proto.catchFish = function catchFish(data) {
          var player = gfReferenceManager.instance.getPlayerByDeskStation(data.DeskStation);

          if (player && player.isMe && data.itemInfo) {
            if (data.itemInfo.amount) {
              this.realSkillCount = data.itemInfo.amount;
            } else {
              this.realSkillCount += 1;
            }
          }
        };

        _proto.freezeFish = function freezeFish(data) {
          var fish = gfFishManager.instance.getFishById(data.fishId);

          if (fish) {
            fish.getComponentInChildren(gfFishFreezeEffect).onFreezeFish();
          }
        };

        _proto.onUpdateRoomData = function onUpdateRoomData(data) {
          this.updateFreezeCountLabel();
          this.updateFreezeButtonStatus();
          this.onChangeRound(data);
        };

        _proto.onChangeRound = function onChangeRound(data) {
          data.isFishGroupToNormal = !(!isEmpty(data.ParadeKind) && data.ParadeKind >= 0);
          this.isLockByFishParade = !isEmpty(data.isFishGroupToNormal) && !data.isFishGroupToNormal;
          this.updateFreezeCountLabel();
          this.updateFreezeButtonStatus();
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return gfFreezeSkill;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "labelSkillCount", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "labelCoolDown", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "frzCDPrgss", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "btnFreeze", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfGameLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfEventEmitter.ts', './gfBaseEvents.ts', './gfBaseConfig.ts', './gfDataStore.ts', './gfReferenceManager.ts', './gfUtilities.ts', './utils.ts', './gfFishManager.ts', './gfMainFSM.ts', './gfActionHelper.ts', './gfGameScheduler.ts', './gfLayerComponent.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, tween, Tween, gfEventEmitter, gfBaseEvents, gfBaseConfig, gfDataStore, gfReferenceManager, registerEvent, getRotation, removeEvents, getPostionInOtherNode, gfFishManager, gfMainFSM, stopAllActions, moveTo, gfGameScheduler, gfLayerComponent;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      tween = module.tween;
      Tween = module.Tween;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      getRotation = module.getRotation;
      removeEvents = module.removeEvents;
    }, function (module) {
      getPostionInOtherNode = module.getPostionInOtherNode;
    }, function (module) {
      gfFishManager = module.default;
    }, function (module) {
      gfMainFSM = module.default;
    }, function (module) {
      stopAllActions = module.stopAllActions;
      moveTo = module.moveTo;
    }, function (module) {
      gfGameScheduler = module.default;
    }, function (module) {
      gfLayerComponent = module.gfLayerComponent;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "2a83a9h2WJEPJCdDX+zBaLY", "gfGameLayer", undefined);

      var ccclass = _decorator.ccclass;
      var GfGameLayer = exports('GfGameLayer', (_dec = ccclass('GfGameLayer'), _dec(_class = /*#__PURE__*/function (_gfLayerComponent) {
        _inheritsLoose(GfGameLayer, _gfLayerComponent);

        function GfGameLayer() {
          var _this;

          _this = _gfLayerComponent.call(this) || this;
          _this.startCallback = void 0;
          _this.isLobbyLayer = false;
          return _this;
        }

        var _proto = GfGameLayer.prototype;

        _proto.onLoad = function onLoad() {
          gfDataStore.instance.setDataStore({
            currentSceneName: gfBaseConfig.instance.SceneName.Game
          });
          gfReferenceManager.instance.setData({
            GameLayer: this.node
          });
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.ON_SHOW_GAME_LAYER, false);
          gfGameScheduler.initInstance();

          _gfLayerComponent.prototype.onLoad.call(this);
        };

        _proto.setStartCallback = function setStartCallback(callback) {
          this.startCallback = callback;
        };

        _proto.start = function start() {
          if (!gfMainFSM.instance.isStateExit()) {
            _gfLayerComponent.prototype.start.call(this);

            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.ON_SHOW_GAME_LAYER, true);
            gfDataStore.instance.setDataStore({
              timeHide: null
            });
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_SOUND_BACKGROUND, gfBaseConfig.instance.SOUND_BACKGROUND_CONFIG.IN_GAME, true);
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.EVENT_JOIN_GAME);
          }

          if (Number(gfDataStore.instance.getCurrentRoom()) === Number(gfBaseConfig.instance.RoomKind.VIP)) {
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.SHOW_JACKPOT_INFO, {
              isShow: true,
              amount: gfDataStore.instance.getJackpotValue()
            });
          } else {
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.SHOW_JACKPOT_INFO, {
              isShow: false
            });
            return;
          }
        };

        _proto.initEvents = function initEvents() {
          _gfLayerComponent.prototype.initEvents.call(this);

          registerEvent(gfBaseEvents.GAME_LAYER.ON_SEND_FIRE, this.sendDataPlayerFire, this);
          registerEvent(gfBaseEvents.GAME_LAYER.ON_OTHER_PLAYER_FIRE, this.onOtherPlayerFire, this);
          registerEvent(gfBaseEvents.COMMON.SHAKE_SCREEN, this.shakeScreen, this);
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.resetOnExit, this);
          registerEvent(gfBaseEvents.GAME_LAYER.ON_ENTER_GAME_ROOM, this.resetOnExit, this);
        };

        _proto.onOtherPlayerFire = function onOtherPlayerFire(data) {
          var player = gfReferenceManager.instance.getPlayerByDeskStation(data.DeskStation);
          if (player && player.index > 1) data.Angle += 180;
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.ON_PLAYER_FIRE, data);
        };

        _proto._updateAngle = function _updateAngle(angle) {
          if (angle < 0 && angle > -90) {
            return 0;
          }

          if (angle < -90 && angle > -180) {
            return -180;
          }

          return angle;
        };

        _proto.sendDataPlayerFire = function sendDataPlayerFire(data) {
          var player = gfReferenceManager.instance.getPlayerByDeskStation(gfDataStore.instance.getSelfDeskStation());

          if (player && player.checkUpdateGunByWallet()) {
            var outData = this.calculateDataPlayerFire(data);

            if (!gfDataStore.instance.isReachMaxNumBullet()) {
              gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.SEND_GUN_FIRE, outData);
            }

            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.ON_PLAYER_FIRE, outData);
          }
        };

        _proto.calculateDataPlayerFire = function calculateDataPlayerFire(data) {
          var point = data.point,
              lockFishID = data.lockFishID;
          var player = gfReferenceManager.instance.getPlayerByDeskStation(gfDataStore.instance.getSelfDeskStation());
          var fish = gfFishManager.instance.getFishById(lockFishID);
          var startPos = getPostionInOtherNode(this.node, player.gun);
          var angle = 0;

          if (fish) {
            var endPos = fish.getLockPositionByNodeSpace(this.node);
            angle = getRotation(endPos, startPos);
          } else {
            angle = getRotation(point, player.gun.worldPosition);
          }

          angle = this._updateAngle(angle);
          var outData = {
            BulletMultiple: player._gunValue,
            BulletID: Date.now(),
            Angle: angle,
            DeskStation: gfDataStore.instance.getSelfDeskStation(),
            isMe: true,
            LockedFishID: lockFishID
          };
          return outData;
        };

        _proto.shakeScreen = function shakeScreen(_ref) {
          var timeOneStep = _ref.timeOneStep,
              amplitude = _ref.amplitude,
              _ref$countStep = _ref.countStep,
              countStep = _ref$countStep === void 0 ? 4 : _ref$countStep,
              _ref$shakeStyle = _ref.shakeStyle,
              shakeStyle = _ref$shakeStyle === void 0 ? gfBaseConfig.instance.SHAKE_SCREEN_STYLE.VERTICAL : _ref$shakeStyle;
          this.node.setPosition(0, 0, 0);
          stopAllActions(this.node);
          var action = tween(this.node);

          for (var i = 0; i < countStep; i++) {
            this.setupAnimShake(action, timeOneStep, amplitude, shakeStyle);
          }

          action.then(moveTo(timeOneStep, 0, 0, 0));
          action.start();
        };

        _proto.setupAnimShake = function setupAnimShake(arrAnim, timeOneStep, amplitude, shakeStyle) {
          var SHAKE_SCREEN_STYLE = gfBaseConfig.instance.SHAKE_SCREEN_STYLE;

          switch (shakeStyle) {
            case SHAKE_SCREEN_STYLE.VERTICAL:
              arrAnim.then(moveTo(timeOneStep, 0, amplitude));
              arrAnim.then(moveTo(timeOneStep, 0, 0));
              arrAnim.then(moveTo(timeOneStep, 0, -amplitude));
              break;

            case SHAKE_SCREEN_STYLE.HORIZONTAL:
              arrAnim.then(moveTo(timeOneStep, amplitude, 0));
              arrAnim.then(moveTo(timeOneStep, 0, 0));
              arrAnim.then(moveTo(timeOneStep, -amplitude, 0));
              break;

            case SHAKE_SCREEN_STYLE.CROSS_1:
              arrAnim.then(moveTo(timeOneStep / 2, amplitude, 0));
              arrAnim.then(moveTo(timeOneStep / 2, 0, 0));
              arrAnim.then(moveTo(timeOneStep / 2, -amplitude, 0));
              arrAnim.then(moveTo(timeOneStep / 2, 0, 0));
              arrAnim.then(moveTo(timeOneStep / 2, 0, amplitude));
              arrAnim.then(moveTo(timeOneStep / 2, 0, 0));
              arrAnim.then(moveTo(timeOneStep / 2, 0, -amplitude));
              break;

            case SHAKE_SCREEN_STYLE.CROSS_2:
              arrAnim.then(moveTo(timeOneStep / 2, amplitude, amplitude));
              arrAnim.then(moveTo(timeOneStep / 2, 0, 0));
              arrAnim.then(moveTo(timeOneStep / 2, -amplitude, -amplitude));
              arrAnim.then(moveTo(timeOneStep / 2, 0, 0));
              arrAnim.then(moveTo(timeOneStep / 2, -amplitude, amplitude));
              arrAnim.then(moveTo(timeOneStep / 2, 0, 0));
              arrAnim.then(moveTo(timeOneStep / 2, amplitude, -amplitude));
              break;

            case SHAKE_SCREEN_STYLE.FULL:
              arrAnim.then(moveTo(timeOneStep / 4, amplitude, amplitude));
              arrAnim.then(moveTo(timeOneStep / 4, 0, 0));
              arrAnim.then(moveTo(timeOneStep / 4, -amplitude, -amplitude));
              arrAnim.then(moveTo(timeOneStep / 4, 0, 0));
              arrAnim.then(moveTo(timeOneStep / 4, -amplitude, amplitude));
              arrAnim.then(moveTo(timeOneStep / 4, 0, 0));
              arrAnim.then(moveTo(timeOneStep / 4, amplitude, -amplitude));
              arrAnim.then(moveTo(timeOneStep / 4, amplitude, 0));
              arrAnim.then(moveTo(timeOneStep / 4, 0, 0));
              arrAnim.then(moveTo(timeOneStep / 4, -amplitude, 0));
              arrAnim.then(moveTo(timeOneStep / 4, 0, 0));
              arrAnim.then(moveTo(timeOneStep / 4, 0, amplitude));
              arrAnim.then(moveTo(timeOneStep / 4, 0, 0));
              arrAnim.then(moveTo(timeOneStep / 4, 0, -amplitude));
              break;
          }
        };

        _proto.resetOnExit = function resetOnExit() {
          Tween.stopAllByTarget(this.node);
        };

        _proto.onDestroy = function onDestroy() {
          this.resetOnExit();
          gfGameScheduler.destroy();
          removeEvents(this);

          if (this.isLoadByPrefab) {
            if (!gfMainFSM.instance.isStateExit() && !gfMainFSM.instance.isStateLobby()) {
              gfEventEmitter.instance.emit(gfBaseEvents.COMMON.REFRESH_PAGE);
            }
          } else if (!gfMainFSM.instance.isStateLoginLobby() && gfEventEmitter.instance) {
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.REFRESH_PAGE);
          }
        };

        _proto.onBtnExitClicked = function onBtnExitClicked(evt) {
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHOW_WAITING, true);
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          this.unscheduleAllCallbacks();
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SEND_EXIT_GAME_SERVER);
        };

        return GfGameLayer;
      }(gfLayerComponent)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfGameScheduler.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfUtilities.ts', './gfBaseEvents.ts'], function (exports) {
  'use strict';

  var _createClass, cclegacy, director, Scheduler, error, registerEvent, removeEvents, gfBaseEvents;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      director = module.director;
      Scheduler = module.Scheduler;
      error = module.error;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfBaseEvents = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "06790qDH8VFEI905Hc7qs9a", "gfGameScheduler", undefined);

      var gfGameScheduler = exports('default', /*#__PURE__*/function () {
        gfGameScheduler.initInstance = function initInstance() {
          this._instance = new gfGameScheduler();
        };

        function gfGameScheduler() {
          this.id = void 0;
          this.uuid = void 0;
          this._scheduler = void 0;
          this.id = this.uuid = 'CCFactory';
          this._scheduler = director.getScheduler();
          Scheduler.enableForTarget(this);
          this.initEvents();
        }

        var _proto = gfGameScheduler.prototype;

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.GAME_LAYER.ON_ENTER_GAME_ROOM, this._unScheduleAll, this);
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this._unScheduleAll, this);
          registerEvent(gfBaseEvents.COMMON.GAME_HIDE, this._unScheduleAll, this);
        };

        _proto._schedule = function _schedule(callback, interval, repeat, delay, paused) {
          if (paused === void 0) {
            paused = false;
          }

          this._scheduler.schedule(callback, this, interval, repeat, delay, paused);
        };

        _proto._scheduleOnce = function _scheduleOnce(callback, delay) {
          this._scheduler.schedule(callback, this, 0, 0, delay, false);
        };

        _proto._unScheduleAll = function _unScheduleAll() {
          this._scheduler.unscheduleAllForTarget(this);
        };

        _proto._unschedule = function _unschedule(callback) {
          this._scheduler.unschedule(callback, this);
        };

        _proto._destroy = function _destroy() {
          removeEvents(this);

          this._unScheduleAll();

          this._scheduler = null;
        };

        gfGameScheduler.schedule = function schedule(callback, interval, repeat, delay, paused) {
          if (paused === void 0) {
            paused = false;
          }

          gfGameScheduler.instance._schedule(callback, interval, repeat, delay, paused);
        };

        gfGameScheduler.scheduleOnce = function scheduleOnce(callback, delay) {
          gfGameScheduler.instance._scheduleOnce(callback, delay);
        };

        gfGameScheduler.unschedule = function unschedule(callback) {
          gfGameScheduler.instance._unschedule(callback);
        };

        gfGameScheduler.unscheduleAllCallbacks = function unscheduleAllCallbacks() {
          gfGameScheduler.instance._unScheduleAll();
        };

        gfGameScheduler.destroy = function destroy() {
          gfGameScheduler.instance._destroy();

          gfGameScheduler._instance = null;
        };

        _createClass(gfGameScheduler, null, [{
          key: "instance",
          get: function get() {
            if (!this._instance) {
              error('GameScheduler is destroyed');
              return null;
            }

            return this._instance;
          }
        }]);

        return gfGameScheduler;
      }());
      gfGameScheduler._instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfGeneralInitialization.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfEventEmitter.ts', './gfNetworkParser.ts', './gfBaseConfig.ts', './gfDataStore.ts', './gfMainFSM.ts', './gfMainController.ts', './gfReferenceManager.ts', './gfLocalize.ts', './gfFishManager.ts', './gfPoolManager.ts', './gfNodePoolConfig.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, JsonAsset, Prefab, Component, gfEventEmitter, gfNetworkParser, gfBaseConfig, gfDataStore, gfMainFSM, gfMainController, gfReferenceManager, gfLocalize, gfFishManager, gfPoolManager, gfNodePoolConfig;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      JsonAsset = module.JsonAsset;
      Prefab = module.Prefab;
      Component = module.Component;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfNetworkParser = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfMainFSM = module.default;
    }, function (module) {
      gfMainController = module.default;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfLocalize = module.default;
    }, function (module) {
      gfFishManager = module.default;
    }, function (module) {
      gfPoolManager = module.default;
    }, function (module) {
      gfNodePoolConfig = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "9afa670LGtOabO/XrL9kVuZ", "gfGeneralInitialization", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfGeneralInitialization = exports('gfGeneralInitialization', (_dec = ccclass('gfGeneralInitialization'), _dec2 = property(JsonAsset), _dec3 = property(Prefab), _dec4 = property(Prefab), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfGeneralInitialization, _Component);

        function gfGeneralInitialization() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "jsonLocalize", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "gameObjectPrefabs", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodePoolAssetPrefab", _descriptor3, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = gfGeneralInitialization.prototype;

        _proto.onLoad = function onLoad() {
          this.initInstances();
        };

        _proto.initInstances = function initInstances() {
          //Init Localize
          new gfLocalize();
          gfLocalize.instance.initLocalizeConfig(this.jsonLocalize.json); //Init Event Emitter

          new gfEventEmitter(); //Init NetworkParser

          new gfNetworkParser(); //Init GameConfig

          if (!gfBaseConfig.instance) {
            new gfBaseConfig();
          } //Init Datastore


          new gfDataStore(); //Init ReferenceManager

          new gfReferenceManager(); //Init Main FSM

          new gfMainFSM(); //Init Main Controller

          new gfMainController(); //Init Popup Controller
          //new PopupController();
          //Init Notify Controller
          //new NotifyController();

          new gfFishManager();
          new gfPoolManager(this.gameObjectPrefabs);
          new gfNodePoolConfig(this.nodePoolAssetPrefab); // new gfEventController();
        };

        _proto.loginGame = function loginGame() {
          gfMainController.instance.initToken();
          gfDataStore.instance.setDataStore({
            "currentSceneName": gfBaseConfig.instance.SceneName.Lobby
          });
        };

        return gfGeneralInitialization;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "jsonLocalize", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "gameObjectPrefabs", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "nodePoolAssetPrefab", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfGunSkill.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfDataStore.ts', './gfEventEmitter.ts', './gfBaseEvents.ts', './gfBaseConfig.ts', './gfReferenceManager.ts', './gfUtilities.ts', './gfActionHelper.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, sp, Animation, tween, Tween, Label, log, Component, gfDataStore, gfEventEmitter, gfBaseEvents, gfBaseConfig, gfReferenceManager, SetZIndex, stopAllActions;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      sp = module.sp;
      Animation = module.Animation;
      tween = module.tween;
      Tween = module.Tween;
      Label = module.Label;
      log = module.log;
      Component = module.Component;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      SetZIndex = module.SetZIndex;
    }, function (module) {
      stopAllActions = module.stopAllActions;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "c3ee5XzUohDtJD6drvQKNZ3", "gfGunSkill", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfGunSkill = exports('gfGunSkill', (_dec = ccclass('gfGunSkill'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfGunSkill, _Component);

        function gfGunSkill() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "gun", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "skillEffect", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "skillCountDown", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "skillTitle", _descriptor4, _assertThisInitialized(_this));

          _this.isMe = false;
          _this.effectIsMe = null;
          _this.index = -1;
          _this._SkillID = 0;
          _this._nodeParent = null;
          _this._DeskStation = 0;
          return _this;
        }

        var _proto = gfGunSkill.prototype;

        _proto.onLoad = function onLoad() {
          this._nodeParent = this.node.parent;
          this.node.active = false;
        };

        _proto.showGunSkill = function showGunSkill(data) {
          this.node.active = true;
          this._DeskStation = data.DeskStation; // this.node.zIndex = -1;

          this.setSkillID(data.SkillID);
          this.isMe = data.DeskStation === gfDataStore.instance.getSelfDeskStation();
          var player = gfReferenceManager.instance.getPlayerByDeskStation(data.DeskStation);

          if (player) {
            if (this.isMe) {
              gfDataStore.instance.setSelfInfo({
                isLockGun: false,
                skillLock: this._SkillID
              });
              gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.INTERACTABLE_HUD, false);
              this.skillEffect.active = true;
              this.playAnimChangeGunSkill();
              this.showSkillTitle();
              this.showSkillCountDown();
              player.lockBet(true);
            } else {
              this.skillEffect.active = false;
            }

            this.playAnimationGunFire();
          }
        };

        _proto.playAnimChangeGunSkill = function playAnimChangeGunSkill() {
          switch (this._SkillID) {
            case gfBaseConfig.instance.SkillConfig.LASER:
              this.playAnimChangeGunLaser();
              break;
          }
        };

        _proto.playAnimChangeGunLaser = function playAnimChangeGunLaser() {
          var spine = this.skillEffect.getComponent(sp.Skeleton);
          spine.setAnimation(0, 'Aim', false);
          spine.setCompleteListener(function () {});
        };

        _proto.playAnimationGunFire = function playAnimationGunFire() {
          //Override this for spine gun
          this.gun.getComponent(Animation).play();
        };

        _proto.sendFireSkill = function sendFireSkill() {
          if (this.isMe) {
            var listCatchLaser = gfDataStore.instance.getListCatchLaser();
            var data = {
              Angle: this._nodeParent.angle,
              ListFish: listCatchLaser.length > 0 ? listCatchLaser : [-1],
              SkillID: this.getSkillID()
            };
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.SEND_FIRE_LASER, data);
            gfDataStore.instance.setSelfInfo({
              isLockGun: true
            });
            this.hideCountDown();
          }
        };

        _proto._updateAngle = function _updateAngle(angle) {
          if (angle < 0 && angle > -90) {
            return 0;
          }

          if (angle < -90 && angle > -180) {
            return -180;
          }

          return angle;
        };

        _proto.onFireSkill = function onFireSkill(data) {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.FIRE_LASER);
          gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.CLEAR_DROP_GUN_LASER, data.DeskStation);
          this.playAnimationGunFire();

          if (this.isMe) {
            gfDataStore.instance.setSelfInfo({
              isLockGun: true,
              skillLock: 0
            });
            this.hideCountDown();
          } else {
            this._nodeParent.angle = data.Angle;
          }

          this.playAnimFireLaser(data);
          gfEventEmitter.instance.emit(gfBaseEvents.FISH_LAYER.CATCH_FISH_BY_SKILL, data);
        };

        _proto.playAnimFireLaser = function playAnimFireLaser(data) {
          var _this2 = this;

          this.skillEffect.active = true;
          stopAllActions(this.skillEffect);
          var spine = this.skillEffect.getComponent(sp.Skeleton);
          spine.timeScale = 2;
          spine.setAnimation(0, 'Shoot', false);
          var duration = spine.findAnimation('Shoot').duration / spine.timeScale;
          tween(spine).delay(duration).call(function () {
            _this2.completedFireSkill(data);
          }).start();
        };

        _proto.changeSpecialGun = function changeSpecialGun(data) {
          var SkillID = data.SkillID;

          switch (SkillID) {
            case gfBaseConfig.instance.SkillConfig.LASER:
              this.showGunSkill(data);
              break;
          }
        };

        _proto.completedFireSkill = function completedFireSkill(data) {
          var player = gfReferenceManager.instance.getPlayerByDeskStation(data.DeskStation);
          this.skillEffect.active = false;

          if (this.isMe) {
            gfDataStore.instance.setDataStore({
              listCatchLaser: []
            });
            gfDataStore.instance.setSelfInfo({
              isLockGun: false
            });
            gfDataStore.instance.setDataStore({
              targetState: gfBaseConfig.instance.TARGET_LOCK.NONE,
              currentTargetState: gfBaseConfig.instance.TARGET_LOCK.NONE
            });
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.INTERACTABLE_HUD, true);
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.RESUME_OLD_TARGET);
          }

          gfEventEmitter.instance.emit(gfBaseEvents.PLAYER_LAYER.CHECK_NEXT_GUN_SKILL, this._DeskStation);
        };

        _proto.showSkillTitle = function showSkillTitle() {
          this.skillTitle.active = true;
          this.skillTitle.parent = this.node.parent.parent;
          SetZIndex(this.skillTitle, 100);
          Tween.stopAllByTarget(this.skillTitle);
        };

        _proto.showSkillCountDown = function showSkillCountDown() {
          var _this3 = this;

          this.skillCountDown.parent = this.node.parent.parent;
          SetZIndex(this.skillCountDown, 101);
          var countDown = gfBaseConfig.instance.SkillConfig.TIMEOUT;
          this.skillCountDown.active = true;
          Tween.stopAllByTarget(this.skillCountDown);
          this.skillCountDown.getComponent(Label).string = countDown.toString();
          tween(this.skillCountDown).delay(1).call(function () {
            countDown--;

            if (countDown <= 0) {
              _this3.hideCountDown();

              log('30s auto fire skill');

              _this3.sendFireSkill();
            } else {
              _this3.skillCountDown.getComponent(Label).string = countDown.toString();
            }
          }).union().repeat(gfBaseConfig.instance.SkillConfig.TIMEOUT).start();
        };

        _proto.hideCountDown = function hideCountDown() {
          if (this.skillTitle) {
            Tween.stopAllByTarget(this.skillTitle);
            this.skillTitle.active = false;
          }

          if (this.skillCountDown) {
            Tween.stopAllByTarget(this.skillCountDown);
            this.skillCountDown.active = false;
            this.skillCountDown.getComponent(Label).string = "0";
          }
        };

        _proto.getSkillID = function getSkillID() {
          return this._SkillID;
        };

        _proto.setSkillID = function setSkillID(SkillID) {
          this._SkillID = SkillID;
        };

        _proto.hideGunSkill = function hideGunSkill() {
          this.skillEffect.getComponent(sp.Skeleton).setCompleteListener(function () {});
          this.hideCountDown();
          this.skillEffect && (this.skillEffect.active = false);
          this.resetChildNodeParent();
          var player = gfReferenceManager.instance.getPlayerByDeskStation(this._DeskStation);
          player && player.removeGunSkill();
          this.node.active = false;
          this.node.destroy();
        };

        _proto.resetChildNodeParent = function resetChildNodeParent() {
          if (this.skillTitle) {
            this.skillTitle.parent = this.node;
          }

          if (this.skillCountDown) {
            this.skillCountDown.parent = this.node;
          }
        };

        return gfGunSkill;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "gun", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "skillEffect", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "skillCountDown", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "skillTitle", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfGunSkillController.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfEventEmitter.ts', './gfBaseEvents.ts', './gfUtilities.ts', './gfReferenceManager.ts', './gfGunSkill.ts', './gfBaseConfig.ts', './utils.ts', './gfDataStore.ts', './gfActionHelper.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Prefab, isValid, instantiate, Component, gfEventEmitter, gfBaseEvents, registerEvent, removeEvents, gfReferenceManager, gfGunSkill, gfBaseConfig, convertAssetArrayToObject, gfDataStore, stopAllActions;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Prefab = module.Prefab;
      isValid = module.isValid;
      instantiate = module.instantiate;
      Component = module.Component;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfGunSkill = module.gfGunSkill;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      convertAssetArrayToObject = module.convertAssetArrayToObject;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      stopAllActions = module.stopAllActions;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "cf7b6/NqZFLR7A8yyH+aUu+", "gfGunSkillController", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfGunSkillController = exports('gfGunSkillController', (_dec = ccclass('gfGunSkillController'), _dec2 = property(Node), _dec3 = property(Prefab), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfGunSkillController, _Component);

        function gfGunSkillController() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "effectIsMe", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "gunSkillPrefab", _descriptor2, _assertThisInitialized(_this));

          _this._listGunSkillNode = [];
          _this._listSkillData = [];
          _this.gunSkillAssets = null;
          return _this;
        }

        var _proto = gfGunSkillController.prototype;

        _proto.onLoad = function onLoad() {
          for (var i = 0; i < 4; i++) {
            this._listSkillData[i] = [];
          }

          this.initEvents();
          this.initMapAssets();
        };

        _proto.initMapAssets = function initMapAssets() {
          this.gunSkillAssets = convertAssetArrayToObject(this.gunSkillPrefab);
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.PLAYER_LAYER.UPDATE_LIST_PLAYER, this.updateListPlayer, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.PLAYER_JOIN_BOARD, this.playerJoinBoard, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.PLAYER_LEAVE_BOARD, this.playerLeaveBoard, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.CHANGE_GUN_LASER, this.playerChangeGunLaser, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.CHANGE_GUN_SKILL, this.playerChangeGunSkill, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.HIDE_GUN_SKILL, this.playerHideGunSkill, this);
          registerEvent(gfBaseEvents.GAME_LAYER.DROP_GUN_SKILL, this.onDropGunSkill, this);
          registerEvent(gfBaseEvents.GAME_LAYER.ON_SEND_FIRE_SKILL, this.onSendFireSkill, this);
          registerEvent(gfBaseEvents.GAME_LAYER.CATCH_FISH_BY_SKILL, this.catchFishBySkill, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.CHECK_NEXT_GUN_SKILL, this.checkNextGunSkill, this);
        };

        _proto.playerLeaveBoard = function playerLeaveBoard(data) {
          if (data === void 0) {
            data = null;
          }

          var selfDeskStation = gfDataStore.instance.getSelfDeskStation();
          data.DeskStation == selfDeskStation ? this.resetAllGunSkill() : this.resetGunSkill(data.DeskStation);
        };

        _proto.updateListPlayer = function updateListPlayer(data) {
          this.resetAllGunSkill();

          for (var i = 0; i < data.length; i++) {
            var userInfo = data[i];
            var player = gfReferenceManager.instance.getPlayerByDeskStation(userInfo.DeskStation);

            if (player) {
              this.initSkillData(userInfo.DeskStation, userInfo.skillInfo);
              var SkillID = this.getNextGunSkill(userInfo.DeskStation);

              if (SkillID) {
                this.playerChangeGunSkill({
                  DeskStation: userInfo.DeskStation,
                  SkillID: SkillID,
                  isResume: true
                });
              } else if (player.isMe) {
                gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.RESUME_OLD_TARGET);
              }
            }
          }
        };

        _proto.playerJoinBoard = function playerJoinBoard(userInfo) {
          if (userInfo === void 0) {
            userInfo = null;
          }

          if (!userInfo) return;
          var _userInfo = userInfo,
              DeskStation = _userInfo.DeskStation,
              skillInfo = _userInfo.skillInfo;
          this.resetGunSkill(DeskStation);
          this.initSkillData(DeskStation, skillInfo);
          var SkillID = this.getNextGunSkill(DeskStation);

          if (SkillID) {
            this.playerChangeGunSkill({
              DeskStation: DeskStation,
              SkillID: SkillID,
              isResume: true
            });
          } else {
            this.playerHideGunSkill(DeskStation);
          }
        };

        _proto.onSendFireSkill = function onSendFireSkill() {
          var myDeskStation = gfDataStore.instance.getSelfDeskStation();
          var player = gfReferenceManager.instance.getPlayerByDeskStation(myDeskStation);

          if (player) {
            player.rotateGun(gfDataStore.instance.getMousePos());
            var gunSkillNode = this.getGunSkillNodeByDeskStation(myDeskStation);

            if (gunSkillNode) {
              var compGunSkill = this.getComponentGunSkillNode(gunSkillNode);
              compGunSkill.sendFireSkill();
            }
          }
        };

        _proto.onDropGunSkill = function onDropGunSkill(data) {
          var DeskStation = data.DeskStation;
          var player = gfReferenceManager.instance.getPlayerByDeskStation(DeskStation);

          if (player && player.isMe) {
            player.lockBet(true);
            gfDataStore.instance.saveCurrentTarget();
            gfDataStore.instance.setSelfInfo({
              isLockGun: true,
              skillLock: true
            });
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.INTERACTABLE_HUD, false);
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.RESET_TOUCH_LISTENER);
          }
        };

        _proto.playerChangeGunLaser = function playerChangeGunLaser(data) {
          var DeskStation = data.DeskStation,
              skillInfo = data.skillInfo;
          this.addSkillData(DeskStation, skillInfo);
          var dataGun = {
            DeskStation: DeskStation,
            SkillID: gfBaseConfig.instance.SkillConfig.LASER,
            isResume: false
          };
          this.playerChangeGunSkill(dataGun);
        };

        _proto.catchFishBySkill = function catchFishBySkill(data) {
          var player = gfReferenceManager.instance.getPlayerByDeskStation(data.DeskStation);

          if (player) {
            switch (data.SkillID) {
              case gfBaseConfig.instance.SkillConfig.LASER:
                {
                  if (player.index > 1) {
                    data.Angle += 180;
                  }

                  var gunSkillNode = this.getGunSkillNodeByDeskStation(data.DeskStation, data.SkillID);

                  if (!data.skillInfo) {
                    data.skillInfo = {
                      SkillID: data.SkillID
                    };
                  }

                  this.reduceSkillData(data);

                  if (gunSkillNode) {
                    var compGunSkill = this.getComponentGunSkillNode(gunSkillNode);
                    compGunSkill.onFireSkill(data);
                  }
                }
                break;
            }
          }
        };

        _proto.checkNextGunSkill = function checkNextGunSkill(DeskStation) {
          var SkillID = this.getNextGunSkill(DeskStation);

          if (SkillID) {
            var gunSkillNode = this.getGunSkillNodeByDeskStation(DeskStation, SkillID);

            if (!gunSkillNode) {
              var dataGun = {
                DeskStation: DeskStation,
                SkillID: SkillID,
                isResume: true
              };
              this.playerChangeGunSkill(dataGun);
            }
          } else {
            this.playerHideGunSkill(DeskStation);
          }
        } // GUN SKILL DATA
        ;

        _proto.initSkillData = function initSkillData(deskStation, skillData) {
          var _this2 = this;

          if (!skillData) {
            this._listSkillData[deskStation] = [];
            return;
          }

          if (Array.isArray(skillData)) {
            skillData.forEach(function (item) {
              if (item.SkillID > 0) {
                var indexSkillData = _this2.findIndexSkillDataByID(deskStation, item.SkillID);

                var objData = {
                  SkillID: item.SkillID,
                  BulletRemain: item.BulletRemain ? item.BulletRemain : 1
                };

                if (indexSkillData < 0) {
                  _this2._listSkillData[deskStation].push(objData);
                } else {
                  _this2._listSkillData[deskStation][indexSkillData] = objData;
                }
              }
            });
          } else {
            if (skillData.SkillID > 0) {
              var indexSkillData = this.findIndexSkillDataByID(deskStation, skillData.SkillID);
              var objData = {
                SkillID: skillData.SkillID,
                BulletRemain: skillData.BulletRemain ? skillData.BulletRemain : 1
              };

              if (indexSkillData < 0) {
                this._listSkillData[deskStation].push(objData);
              } else {
                this._listSkillData[deskStation][indexSkillData] = objData;
              }
            }
          } //cc.warn("initSkillData", this._listSkillData, deskStation)


          return this._listSkillData[deskStation];
        };

        _proto.findSkillDataByID = function findSkillDataByID(deskStation, ID) {
          return this._listSkillData[deskStation].find(function (_ref) {
            var SkillID = _ref.SkillID;
            return SkillID === ID;
          });
        };

        _proto.findIndexSkillDataByID = function findIndexSkillDataByID(deskStation, ID) {
          return this._listSkillData[deskStation].findIndex(function (_ref2) {
            var SkillID = _ref2.SkillID;
            return SkillID === ID;
          });
        };

        _proto.getNextGunSkill = function getNextGunSkill(deskStation) {
          var PRIORITY_SKILL = gfBaseConfig.instance.Skill.PRIORITY_SKILL;
          var skillData = this._listSkillData[deskStation];
          if (!skillData || !skillData.length) return null;

          for (var i = 0; i < PRIORITY_SKILL.length; i++) {
            var SkillID = PRIORITY_SKILL[i];
            var skillItem = this.findSkillDataByID(deskStation, SkillID);
            if (skillItem) return skillItem.SkillID;
          }
        };

        _proto.getComponentGunSkillNode = function getComponentGunSkillNode(gunSkillNode) {
          return gunSkillNode.getComponent(gfGunSkill);
        };

        _proto.reduceSkillData = function reduceSkillData(data) {
          var DeskStation = data.DeskStation;
          var _data$skillInfo = data.skillInfo,
              SkillID = _data$skillInfo.SkillID,
              BulletRemain = _data$skillInfo.BulletRemain;
          var indexSkill = this.findIndexSkillDataByID(DeskStation, SkillID);

          if (indexSkill >= 0) {
            var skillItem = this._listSkillData[DeskStation][indexSkill];
            BulletRemain = BulletRemain && BulletRemain >= 0 ? BulletRemain : skillItem.BulletRemain - 1;
            skillItem.BulletRemain = BulletRemain;

            if (skillItem.BulletRemain <= 0) {
              this._listSkillData[DeskStation].splice(indexSkill, 1);
            } else {
              this._listSkillData[DeskStation][indexSkill] = skillItem;
            }
          }
        };

        _proto.clearSkillData = function clearSkillData(deskStation, SkillID) {
          var indexSkill = this.findIndexSkillDataByID(deskStation, SkillID);

          if (indexSkill >= 0) {
            this._listSkillData[deskStation].splice(indexSkill, 1);
          }
        };

        _proto.addSkillData = function addSkillData(deskStation, skillData) {
          var indexSkill = this.findIndexSkillDataByID(deskStation, skillData.SkillID);

          if (indexSkill >= 0) {
            var skillItem = this._listSkillData[deskStation][indexSkill];
            skillItem.BulletRemain = skillData.BulletRemain ? skillData.BulletRemain : 1;
            this._listSkillData[deskStation][indexSkill] = skillItem;
          } else {
            var objData = {
              SkillID: skillData.SkillID,
              BulletRemain: skillData.BulletRemain ? skillData.BulletRemain : 1
            };

            this._listSkillData[deskStation].push(objData);
          } //cc.warn("addSkillData", this._listSkillData);

        };

        _proto.addGunSkillNodeByDeskStation = function addGunSkillNodeByDeskStation(DeskStation, gunSkillNode) {
          if (!isValid(this._listGunSkillNode[DeskStation])) {
            this._listGunSkillNode[DeskStation] = gunSkillNode;
          } else {
            this._listGunSkillNode[DeskStation].hideGunSkill();

            this._listGunSkillNode[DeskStation] = gunSkillNode;
          }
        };

        _proto.getGunSkillNodeByDeskStation = function getGunSkillNodeByDeskStation(DeskStation, SkillID) {
          if (SkillID === void 0) {
            SkillID = null;
          }

          var gunSkillNode = this._listGunSkillNode[DeskStation];

          if (SkillID) {
            if (isValid(gunSkillNode) && gunSkillNode.name === "GunSkill" + SkillID) {
              return gunSkillNode;
            }
          } else {
            if (isValid(gunSkillNode)) {
              return gunSkillNode;
            }
          }

          return;
        };

        _proto.playerChangeGunSkill = function playerChangeGunSkill(data) {
          var DeskStation = data.DeskStation,
              SkillID = data.SkillID,
              isResume = data.isResume;
          var player = gfReferenceManager.instance.getPlayerByDeskStation(DeskStation);

          if (player) {
            var gunSkillNode = this.getGunSkillNodeByDeskStation(DeskStation, SkillID);
            var gunData = {
              GunSkillNode: gunSkillNode,
              DeskStation: DeskStation,
              SkillID: SkillID,
              isResume: isResume
            };

            if (gunSkillNode) {
              player.addGunSkill(gunData);
            } else {
              gunSkillNode = instantiate(this.gunSkillAssets["GunSkill" + SkillID]);
              this.addGunSkillNodeByDeskStation(DeskStation, gunSkillNode);
              gunData.GunSkillNode = gunSkillNode;
              player.addGunSkill(gunData);
            }
          }
        };

        _proto.playerHideGunSkill = function playerHideGunSkill(DeskStation) {
          var gunSkillNode = this._listGunSkillNode[DeskStation];

          if (isValid(gunSkillNode)) {
            var compGunSkill = this.getComponentGunSkillNode(gunSkillNode);
            compGunSkill.hideGunSkill();
            this._listGunSkillNode[DeskStation] = null;
          }
        };

        _proto.resetAllGunSkill = function resetAllGunSkill() {
          var _this3 = this;

          this._listGunSkillNode.forEach(function (gunSkillNode, DeskStation) {
            _this3.resetGunSkill(DeskStation);
          });
        };

        _proto.resetGunSkill = function resetGunSkill(DeskStation) {
          var gunSkillNode = this.getGunSkillNodeByDeskStation(DeskStation);

          if (isValid(gunSkillNode)) {
            stopAllActions(gunSkillNode);
            var compGunSkill = this.getComponentGunSkillNode(gunSkillNode);
            compGunSkill.resetChildNodeParent();
            gunSkillNode.destroy();
          }

          var player = gfReferenceManager.instance.getPlayerByDeskStation(DeskStation);
          player && player.removeGunSkill();
          this._listSkillData[DeskStation] = [];
          this._listGunSkillNode[DeskStation] = null;
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return gfGunSkillController;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "effectIsMe", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "gunSkillPrefab", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfHUDController.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfBaseConfig.ts', './gfBaseEvents.ts', './gfUtilities.ts', './gfDataStore.ts', './gfEventEmitter.ts', './gfReferenceManager.ts', './gfFishManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, SpriteFrame, Vec3, tween, Tween, Sprite, Button, Component, convertAssetArrayToObject, gfBaseConfig, gfBaseEvents, registerEvent, removeEvents, gfDataStore, gfEventEmitter, gfReferenceManager, gfFishManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      SpriteFrame = module.SpriteFrame;
      Vec3 = module.Vec3;
      tween = module.tween;
      Tween = module.Tween;
      Sprite = module.Sprite;
      Button = module.Button;
      Component = module.Component;
    }, function (module) {
      convertAssetArrayToObject = module.convertAssetArrayToObject;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfFishManager = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "3ff23aTV/5GFp1JKx+v1hhp", "gfHUDController", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfHUDController = exports('GfHUDController', (_dec = ccclass('GfHUDController'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(SpriteFrame), _dec7 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfHUDController, _Component);

        function GfHUDController() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "fxBtnBelow", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "fxBtnAbove", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listTextBtn", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "fishNotifyImg", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listFishNotify", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listButton", _descriptor6, _assertThisInitialized(_this));

          _this._posButton = [];
          _this._scaleFactor = 0.6;
          _this._targetLockTime = 0;
          return _this;
        }

        var _proto = GfHUDController.prototype;

        _proto.onLoad = function onLoad() {
          this.targetButtonsOff(); //this.node.getBtnFreeze = this.getBtnFreeze.bind(this);

          gfDataStore.instance.setDataStore({
            "": gfBaseConfig.instance.TARGET_LOCK.NONE
          });
          gfReferenceManager.instance.setData({
            HUDLayer: this.node
          });
          this.initEvents();
          this._posButton = [new Vec3(-114, -316, 1), new Vec3(37, -316, 1), new Vec3(-37, -316, 1)];
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.resetOnExit, this);
          registerEvent(gfBaseEvents.GAME_LAYER.UPDATE_LOCK_FISH_IMAGE, this.updateLockFishImg, this);
          registerEvent(gfBaseEvents.GAME_LAYER.CHOOSE_FISH_BY_POINT, this.chooseFishByPoint, this);
          registerEvent(gfBaseEvents.GAME_LAYER.OFF_ALL_TARGET, this.resetOnExit, this);
          registerEvent(gfBaseEvents.GAME_LAYER.INTERACTABLE_HUD, this.interactableHUD, this);
          registerEvent(gfBaseEvents.GAME_LAYER.PAUSE_AUTO_FIRE, this.pauseAutoFire, this);
          registerEvent(gfBaseEvents.GAME_LAYER.RESUME_AUTO_FIRE, this.resumeAutoFire, this);
          registerEvent(gfBaseEvents.FISH_LAYER.BOSS_ON_GAME, this.changeTargetToBoss, this);
          registerEvent(gfBaseEvents.GAME_LAYER.RESUME_OLD_TARGET, this.resumeOldTarget, this);
        };

        _proto.resumeOldTarget = function resumeOldTarget() {
          var oldTarget = gfDataStore.instance.getOldTarget();
          if (!oldTarget.targetState) return;

          if (oldTarget.targetState === gfBaseConfig.instance.TARGET_LOCK.TARGET_ONE) {
            if (oldTarget.LockFishKind >= 0) {
              this.updateLockFishImg(oldTarget.LockFishKind);
            } else {
              gfDataStore.instance.clearOldTarget();
              return;
            }
          }

          if (oldTarget.LockFishID) {
            var lockFish = gfFishManager.instance.getFishById(oldTarget.LockFishID);
            var lockFishID = lockFish ? lockFish.getId() : null;
            gfDataStore.instance.setSelfInfo({
              LockFish: lockFish,
              LockFishID: lockFishID
            });
          }

          if (oldTarget.LockFishKind >= 0) {
            gfDataStore.instance.setSelfInfo({
              LockFishKind: oldTarget.LockFishKind
            });
          }

          this.changeStatusGroupButton(oldTarget.targetState);
          gfDataStore.instance.clearOldTarget();
        };

        _proto.pauseAutoFire = function pauseAutoFire() {
          var TARGET_TYPE = gfBaseConfig.instance.TARGET_LOCK;

          if (!gfDataStore.instance.isAutoPaused() && gfDataStore.instance.getTargetState() !== TARGET_TYPE.NONE) {
            gfDataStore.instance.setDataStore({
              targetState: TARGET_TYPE.PAUSE
            });
          }

          gfEventEmitter.instance.emit(gfBaseEvents.PLAYER_LAYER.STOP_LOCK_FISH);
        };

        _proto.resumeAutoFire = function resumeAutoFire() {
          if (gfDataStore.instance.getSelfInfo().skillLock) return;
          var TARGET_TYPE = gfBaseConfig.instance.TARGET_LOCK;
          var currentTargetState = gfDataStore.instance.getCurrentTargetStage();

          if (currentTargetState !== TARGET_TYPE.NONE && gfDataStore.instance.isAutoPaused()) {
            this.changeStatusGroupButton(currentTargetState);
          }
        };

        _proto.onClickTargetBtn = function onClickTargetBtn(event, data) {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          var player = gfReferenceManager.instance.getPlayerByDeskStation(gfDataStore.instance.getSelfDeskStation());
          var currentTargetState = gfDataStore.instance.getCurrentTargetStage();

          if (player) {
            if (currentTargetState === parseInt(data) || !player.checkUpdateGunByWallet()) {
              this.changeStatusGroupButton(gfBaseConfig.instance.TARGET_LOCK.NONE);
            } else {
              this.changeStatusGroupButton(parseInt(data));
            }
          }
        };

        _proto.changeStatusGroupButton = function changeStatusGroupButton(type) {
          if (type === void 0) {
            type = gfBaseConfig.instance.TARGET_LOCK.NONE;
          }

          var selfInfo = gfDataStore.instance.getSelfInfo();
          var TARGET_TYPE = gfBaseConfig.instance.TARGET_LOCK;
          this.unschedule(this.onAutoFire);
          this.unschedule(this.onAutoFireTargetAll);
          this.unschedule(this.onAutoTargetOne);
          this.targetButtonsOff();

          if (gfDataStore.instance.getTargetState() == type) {
            type = TARGET_TYPE.NONE;
          }

          gfDataStore.instance.setDataStore({
            targetState: type,
            currentTargetState: type
          });

          switch (type) {
            case TARGET_TYPE.NONE:
              this.resetLockFish();
              break;

            case TARGET_TYPE.AUTO_FIRE:
              this.targetButtonOn(TARGET_TYPE.AUTO_FIRE);
              this.schedule(this.onAutoFire, gfDataStore.instance.FireSpeed.TURBO);
              this.resetLockFish();
              break;

            case TARGET_TYPE.TARGET_ONE:
              this.targetButtonOn(TARGET_TYPE.TARGET_ONE);
              this.schedule(this.onAutoTargetOne, gfDataStore.instance.FireSpeed.TURBO);

              if (!selfInfo.LockFish && selfInfo.LockFishKind < 0) {
                gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.SHOW_NOTIFY_LOCK_FISH);
              } else {
                this.updateLockFishImg(selfInfo.LockFishKind);
              }

              break;

            case TARGET_TYPE.TARGET_ALL:
              gfDataStore.instance.setSelfInfo({
                isPriorityTargetBoss: true
              });

              if (selfInfo.TargetTime == null) {
                selfInfo.TargetTime = gfDataStore.instance.ChangeTarget;
              }

              this._targetLockTime = selfInfo.TargetTime;
              this.targetButtonOn(TARGET_TYPE.TARGET_ALL);
              this.schedule(this.onAutoFireTargetAll, gfDataStore.instance.FireSpeed.TURBO);
              break;
          }
        };

        _proto.changeTargetToBoss = function changeTargetToBoss() {
          gfDataStore.instance.setSelfInfo({
            isPriorityTargetBoss: true
          });
          this._targetLockTime = 0;
        };

        _proto.isBossKind = function isBossKind(fishKind) {
          return gfFishManager.instance.isBossKind(fishKind);
        };

        _proto.onAutoFire = function onAutoFire() {
          if (gfDataStore.instance.isAutoPaused()) {
            return;
          }

          var point = new Vec3(gfBaseConfig.instance.realSize.Width / 2, gfBaseConfig.instance.realSize.Height / 2, 1);
          var mousePos = gfDataStore.instance.getMousePos();

          if (mousePos) {
            point = mousePos;
          }

          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.ON_SEND_FIRE, {
            point: point,
            lockFishID: -1
          });
        };

        _proto.checkChangeTargetCondition = function checkChangeTargetCondition() {
          var _gfDataStore$instance = gfDataStore.instance.getSelfInfo(),
              LockFish = _gfDataStore$instance.LockFish,
              LockFishKind = _gfDataStore$instance.LockFishKind;

          return !LockFish || !LockFish.isAvailable() || !this.isBossKind(LockFishKind) && this._targetLockTime <= 0;
        };

        _proto.onAutoFireTargetAll = function onAutoFireTargetAll() {
          if (gfDataStore.instance.isAutoPaused()) {
            return;
          }

          var selfInfo = gfDataStore.instance.getSelfInfo();
          this._targetLockTime -= gfDataStore.instance.FireSpeed.TURBO;

          if (this.checkChangeTargetCondition()) {
            var lockFish = gfFishManager.instance.GetFishForTargetAll();
            var lockFishID = lockFish ? lockFish.getId() : null;
            gfDataStore.instance.setSelfInfo({
              LockFish: lockFish,
              LockFishID: lockFishID
            });
            this._targetLockTime = selfInfo.TargetTime;
          }

          if (selfInfo.LockFish && selfInfo.LockFish.isAvailable()) {
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.ON_SEND_FIRE, {
              point: selfInfo.LockFish.node.position,
              lockFishID: selfInfo.LockFish.getId()
            });
          } else {
            this.resetLockFish();
          }
        };

        _proto.onAutoTargetOne = function onAutoTargetOne() {
          if (gfDataStore.instance.isAutoPaused()) {
            return;
          }

          var selfInfo = gfDataStore.instance.getSelfInfo();

          if (selfInfo.LockFishKind > -1) {
            if (!selfInfo.LockFish || !selfInfo.LockFish.isAvailable()) {
              var lockFish = gfFishManager.instance.getFishByType(selfInfo.LockFishKind);
              var lockFishID = lockFish ? lockFish.getId() : null;
              gfDataStore.instance.setSelfInfo({
                LockFish: lockFish,
                LockFishID: lockFishID
              });
            }

            if (selfInfo.LockFish && selfInfo.LockFish.isAvailable()) {
              gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.ON_SEND_FIRE, {
                point: selfInfo.LockFish.node.position,
                lockFishID: selfInfo.LockFish._FishID
              });
            } else {
              this.changeStatusGroupButton(gfBaseConfig.instance.TARGET_LOCK.NONE);
              this.resetLockFish();
            }
          }
        };

        _proto.chooseFishByPoint = function chooseFishByPoint(point) {
          var selfInfo = gfDataStore.instance.getSelfInfo();
          var fish = gfFishManager.instance.GetFishByPoint(point);
          if (!fish) return;
          gfDataStore.instance.setSelfInfo({
            LockFish: fish,
            LockFishKind: fish.getKind(),
            LockFishID: fish.getId()
          });

          if (gfDataStore.instance.getTargetState() === gfBaseConfig.instance.TARGET_LOCK.TARGET_ONE) {
            gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.HIDE_NOTIFY_LOCK_FISH);
            this.updateLockFishImg(fish.getKind());
          } else if (gfDataStore.instance.getTargetState() === gfBaseConfig.instance.TARGET_LOCK.TARGET_ALL) {
            this._targetLockTime = selfInfo.TargetTime;
            gfDataStore.instance.setSelfInfo({
              isPriorityTargetBoss: this.isBossKind(fish.getKind())
            });
          }
        };

        _proto.resetLockFish = function resetLockFish() {
          gfDataStore.instance.setSelfInfo({
            LockFish: null,
            LockFishKind: -1,
            LockFishID: null
          });
          gfEventEmitter.instance.emit(gfBaseEvents.PLAYER_LAYER.STOP_LOCK_FISH);
        };

        _proto.targetButtonOn = function targetButtonOn(type) {
          if (this.fxBtnBelow) {
            this.fxBtnBelow.active = true;
            this.fxBtnBelow.setPosition(this._posButton[type - 1]);
          }

          if (this.fxBtnAbove) {
            this.fxBtnAbove.active = true;
            tween(this.fxBtnAbove).by(1, {
              angle: -360
            }).repeatForever().start();
            this.fxBtnAbove.setPosition(this._posButton[type - 1]);
          }

          this.listTextBtn[type - 1].active = false;
        };

        _proto.targetButtonsOff = function targetButtonsOff() {
          gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.HIDE_NOTIFY_LOCK_FISH);
          this.fishNotifyImg.active = false;

          if (this.fxBtnBelow) {
            this.fxBtnBelow.active = false;
          }

          if (this.fxBtnAbove) {
            Tween.stopAllByTarget(this.fxBtnAbove);
            this.fxBtnAbove.active = false;
          }

          this.listTextBtn.forEach(function (item) {
            item.active = true;
          });
          this.interactableHUD();
        };

        _proto.updateLockFishImg = function updateLockFishImg(fishKind) {
          if (fishKind === void 0) {
            fishKind = 0;
          }

          var assetFishes = convertAssetArrayToObject(this.listFishNotify);

          if (assetFishes[fishKind]) {
            this.fishNotifyImg.active = true;
            this.fishNotifyImg.getComponent(Sprite).spriteFrame = assetFishes[fishKind];
            Tween.stopAllByTarget(this.fishNotifyImg);
            tween(this.fishNotifyImg).to(0, {
              scale: new Vec3(this._scaleFactor, this._scaleFactor, this._scaleFactor)
            }).to(0.1, {
              scale: new Vec3(this._scaleFactor + 0.5, this._scaleFactor + 0.5, this._scaleFactor + 0.5)
            }).to(0, {
              scale: new Vec3(this._scaleFactor, this._scaleFactor, this._scaleFactor)
            }).start();
          }
        };

        _proto.interactableHUD = function interactableHUD(interactable) {
          if (interactable === void 0) {
            interactable = true;
          }

          if (!interactable) this.resetOnExit();
          this.listButton.forEach(function (button) {
            button.getComponent(Button).interactable = interactable;
          });
        } // getBtnFreeze() {
        //     return this.btnFreeze.node;
        // },
        ;

        _proto.stopTarget = function stopTarget() {
          this.unschedule(this.onAutoFire);
          this.unschedule(this.onAutoFireTargetAll);
          this.unschedule(this.onAutoTargetOne);
          gfDataStore.instance.setDataStore({
            targetState: gfBaseConfig.instance.TARGET_LOCK.NONE,
            currentTargetState: gfBaseConfig.instance.TARGET_LOCK.NONE
          });
          gfDataStore.instance.setSelfInfo({
            LockFish: null,
            LockFishKind: -1,
            LockFishID: null
          });
          this.targetButtonsOff();
          gfEventEmitter.instance.emit(gfBaseEvents.PLAYER_LAYER.STOP_LOCK_FISH);
          this.unscheduleAllCallbacks();
        };

        _proto.resetOnExit = function resetOnExit() {
          gfDataStore.instance.setDataStore({
            currentTargetState: 0
          });
          gfDataStore.instance.setSelfInfo({
            LockFish: null,
            LockFishKind: -1,
            LockFishID: null,
            targetState: 0
          });
          this.stopTarget();
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return GfHUDController;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "fxBtnBelow", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "fxBtnAbove", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "listTextBtn", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "fishNotifyImg", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "listFishNotify", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "listButton", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfItemFreeze.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfNode.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Animation, gfNode;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Animation = module.Animation;
    }, function (module) {
      gfNode = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "35053uwVEVKa4x7D5jHJAt5", "gfItemFreeze", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfItemFreeze = exports('gfItemFreeze', (_dec = ccclass('gfItemFreeze'), _dec2 = property(Animation), _dec(_class = (_class2 = /*#__PURE__*/function (_gfNode) {
        _inheritsLoose(gfItemFreeze, _gfNode);

        function gfItemFreeze() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfNode.call.apply(_gfNode, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "anim", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = gfItemFreeze.prototype;

        _proto.initAssets = function initAssets() {
          this.anim.play(this.anim.clips[0].name);
        };

        return gfItemFreeze;
      }(gfNode), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "anim", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfJackpotInfo.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './animateNumberLabel.ts', './gfBaseEvents.ts', './gfActionHelper.ts', './gfUtilities.ts', './gfEventEmitter.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, sp, Node, Tween, tween, Component, AnimateNumberLabel, gfBaseEvents, fadeOut, fadeIn, registerEvent, removeEvents, gfEventEmitter;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
      Node = module.Node;
      Tween = module.Tween;
      tween = module.tween;
      Component = module.Component;
    }, function (module) {
      AnimateNumberLabel = module.AnimateNumberLabel;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      fadeOut = module.fadeOut;
      fadeIn = module.fadeIn;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfEventEmitter = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "6d1d2Z7MzRN4pmdE/lytPTx", "gfJackpotInfo", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfJackpotInfo = exports('GfJackpotInfo', (_dec = ccclass('GfJackpotInfo'), _dec2 = property(sp.Skeleton), _dec3 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfJackpotInfo, _Component);

        function GfJackpotInfo() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "jackpotAnim", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "txtValue", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = GfJackpotInfo.prototype;

        _proto.onLoad = function onLoad() {
          this.initEvents();
          this.onShowJackpotInfo({
            isShow: false,
            amount: 0
          });
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.resetOnExit, this);
          registerEvent(gfBaseEvents.COMMON.UPDATE_JACKPOT, this.onUpdateRoomJackpot, this);
          registerEvent(gfBaseEvents.GAME_LAYER.SHOW_JACKPOT_INFO, this.onShowJackpotInfo, this);
          registerEvent(gfBaseEvents.DRAGON.WARNING, this.onDragonWarning, this);
        };

        _proto.onShowJackpotInfo = function onShowJackpotInfo(_ref) {
          var isShow = _ref.isShow,
              amount = _ref.amount;
          this.node.active = isShow;

          if (isShow && amount) {
            if (this.txtValue.getComponent(AnimateNumberLabel).currentValue === undefined) {
              this.txtValue.getComponent(AnimateNumberLabel).currentValue = amount;
            }

            this.onUpdateRoomJackpot(amount);
          }
        };

        _proto.onDragonWarning = function onDragonWarning() {
          var _this2 = this;

          Tween.stopAllByTarget(this.txtValue);
          tween(this.txtValue).then(fadeOut(0.25)).call(function () {
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.DRAGON_APPEAR);
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHAKE_SCREEN, {
              timeOneStep: 0.1,
              amplitude: 10
            });

            _this2.jackpotAnim.setAnimation(0, "animation", false);

            _this2.jackpotAnim.setCompleteListener(function () {
              tween(_this2.txtValue).then(fadeIn(0.25)).start();
              gfEventEmitter.instance.emit(gfBaseEvents.SOUND.RESET_VOLUME);

              _this2.jackpotAnim.setAnimation(0, "idel", true);

              _this2.jackpotAnim.setCompleteListener(function () {});
            });
          }).start();
        };

        _proto.onJPHistoryClick = function onJPHistoryClick() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_JACKPOT_HISTORY);
        };

        _proto.onUpdateRoomJackpot = function onUpdateRoomJackpot(amount, time) {
          if (time === void 0) {
            time = 3000;
          }

          if (amount && this.node.active) {
            var newJP = parseInt(amount);
            this.txtValue.getComponent(AnimateNumberLabel).onUpdateValue(newJP, time);
          }
        };

        _proto.resetOnExit = function resetOnExit() {
          if (this.node.active) {
            Tween.stopAllByTarget(this.txtValue);
          }
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return GfJackpotInfo;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "jackpotAnim", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "txtValue", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfJackpotStarFX.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfUtilities.ts', './gfBaseConfig.ts', './utils.ts', './gfActionHelper.ts', './gfEventEmitter.ts', './gfBaseEvents.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, v3, Node, tween, UITransform, Component, SetZIndex, gfBaseConfig, setOpacity, getPostionInOtherNode, rotateBy, fadeIn, scaleTo, fadeOut, gfEventEmitter, gfBaseEvents;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      v3 = module.v3;
      Node = module.Node;
      tween = module.tween;
      UITransform = module.UITransform;
      Component = module.Component;
    }, function (module) {
      SetZIndex = module.SetZIndex;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      setOpacity = module.setOpacity;
      getPostionInOtherNode = module.getPostionInOtherNode;
    }, function (module) {
      rotateBy = module.rotateBy;
      fadeIn = module.fadeIn;
      scaleTo = module.scaleTo;
      fadeOut = module.fadeOut;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "f935b1BFJJNPYQSvK9UgTCj", "gfJackpotStarFX", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BallStarPos = [v3(0, 193), v3(153, 120), v3(189, -43), v3(85, -174), v3(-83, -174), v3(-187, -43), v3(-151, 120)];
      var gfJackpotStarFX = exports('gfJackpotStarFX', (_dec = ccclass('gfJackpotStarFX'), _dec2 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfJackpotStarFX, _Component);

        function gfJackpotStarFX() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "image", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = gfJackpotStarFX.prototype;

        _proto.onLoad = function onLoad() {
          SetZIndex(this.node, gfBaseConfig.instance.Z_INDEX.POPUP);
        };

        _proto.playAnimation = function playAnimation(ballListArr) {
          var _this2 = this;

          var ballList = [].concat(ballListArr);
          var scaleTime = 1.25;
          var fadeDelay = 0.5;
          var glowDelay = 1.65;
          var scaleDelay = 0.15;
          var rotateTime = scaleTime + fadeDelay + glowDelay + scaleDelay;
          var ballFlyTime = 0.15; // fly to star

          var flyAwayTime = 0.2; // fly out of screen

          setOpacity(this.image, 0);
          ballList.forEach(function (ball, i) {
            ball.node.position = getPostionInOtherNode(_this2.node, ball.node);
            ball.node.parent = _this2.node;
            ball.moveToJackpotStar({
              delay: ballFlyTime * i,
              position: BallStarPos[i]
            });
          });
          tween(this.node).delay(1 + ballFlyTime * 7).parallel(rotateBy(rotateTime, 720), tween().then(tween().delay(fadeDelay).call(function () {
            tween(_this2.image).then(fadeIn(0.5)).start();
          }).delay(glowDelay).parallel(scaleTo(scaleTime, 0.4), tween().delay(1).call(function () {
            gfEventEmitter.instance.emit(gfBaseEvents.DRAGON.BIG_EXPLOSION, _this2.node.getComponent(UITransform).convertToWorldSpaceAR(v3(0, 0)));
          }).delay(0.3)).call(function () {
            ballList.forEach(function (ball) {
              ball.flyAway(flyAwayTime);
            });
            tween(_this2.image).then(fadeOut(0.5)).start();
          }).delay(scaleDelay).call(function () {
            gfEventEmitter.instance.emit(gfBaseEvents.DRAGON.SHOW_JACKPOT_WINAMOUNT);
          }).delay(0.75).call(function () {
            gfEventEmitter.instance.emit(gfBaseEvents.DRAGON.DONE_JACKPOT_STAR);
          }).removeSelf())).start();
        };

        return gfJackpotStarFX;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "image", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfJackpotWinPopup.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseConfig.ts', './gfUtilities.ts', './gfEventEmitter.ts', './gfBaseEvents.ts', './gf3DParticle.ts', './gfDataStore.ts', './gfActionHelper.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Component, Label, Node, isValid, v3, tween, Button, gfBaseConfig, SetZIndex, registerEvent, formatCoin, removeEvents, gfEventEmitter, gfBaseEvents, gf3DParticle, gfDataStore, fadeOut, stopAllActions;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
      Label = module.Label;
      Node = module.Node;
      isValid = module.isValid;
      v3 = module.v3;
      tween = module.tween;
      Button = module.Button;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      SetZIndex = module.SetZIndex;
      registerEvent = module.registerEvent;
      formatCoin = module.formatCoin;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gf3DParticle = module.gf3DParticle;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      fadeOut = module.fadeOut;
      stopAllActions = module.stopAllActions;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "1209cTvFSNE5rzeau2KFyBh", "gfJackpotWinPopup", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfJackpotWinPopup = exports('gfJackpotWinPopup', (_dec = ccclass('gfJackpotWinPopup'), _dec2 = property(Component), _dec3 = property(Label), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfJackpotWinPopup, _Component);

        function gfJackpotWinPopup() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "blackLayer", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "txtCoin", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "particleCoin", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "animNode", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "winFrame", _descriptor5, _assertThisInitialized(_this));

          _this.tweenCoin = void 0;
          _this._coinValue = 0;
          _this.winValue = 0;
          _this._duration = 9;
          return _this;
        }

        var _proto = gfJackpotWinPopup.prototype;

        _proto.onLoad = function onLoad() {
          SetZIndex(this.node, gfBaseConfig.instance.Z_INDEX.POPUP);
          registerEvent(gfBaseEvents.DRAGON.WARNING, this.onDragonWarning, this);
        };

        _proto.onDragonWarning = function onDragonWarning() {
          if (isValid(this.node)) {
            this.hideFn();
          }
        };

        _proto.setWinValue = function setWinValue(value) {
          this.winValue = value;
        };

        _proto._updateCoinWin = function _updateCoinWin() {
          this.txtCoin.string = formatCoin(this._coinValue);
        };

        _proto.start = function start() {
          var _this2 = this;

          this.txtCoin.string = "0";
          this.winFrame.active = false;
          this.animNode.scale.set(v3(0, 0, 1));
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.STOP_ALL_AUDIO);
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.DRAGON_BIG_WIN);
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_EFFECT_JACKPOT_COIN);
          this.particleCoin.active = true;
          this.particleCoin.getComponent(gf3DParticle).startAnimation();
          this.winFrame.active = true;
          this.winFrame.scale.set(1, 0.2);
          tween(this.winFrame).to(0.1, {
            scale: v3(1, 1, 1)
          }).start();
          tween(this.animNode).to(0.25, {
            scale: v3(1, 1, 1)
          }).start();
          this.scheduleOnce(function () {
            _this2.blackLayer.getComponent(Button).interactable = true;
          }, 0.65);

          this._tweenCoin();
        };

        _proto._tweenCoin = function _tweenCoin() {
          var _this3 = this;

          var superValue = this.winValue * 0.75;
          var megaValue = this.winValue * 0.5;
          this.tweenCoin = tween(this).to(this._duration / 3, null, {
            onUpdate: function onUpdate(target, ratio) {
              _this3.coinValue = ratio * megaValue;
            }
          }).to(this._duration / 3, null, {
            onUpdate: function onUpdate(target, ratio) {
              _this3.coinValue = _this3.coinValue + ratio * (superValue - _this3.coinValue);
            }
          }).to(this._duration / 3, null, {
            onUpdate: function onUpdate(target, ratio) {
              _this3.coinValue = _this3.coinValue + (_this3.winValue - _this3.coinValue) * ratio;
            }
          }).call(function () {
            _this3.hideFn();
          });
          this.tweenCoin.start();
        };

        _proto.quickShow = function quickShow() {
          var _this4 = this;

          if (this.coinValue === this.winValue) {
            return;
          }

          this.blackLayer.getComponent(Button).interactable = false;
          this.tweenCoin.stop();
          this.tweenCoin = tween(this).to(1, null, {
            onUpdate: function onUpdate(target, ratio) {
              _this4.coinValue = _this4.coinValue + (_this4.winValue - _this4.coinValue) * ratio;
            }
          }).delay(1).call(function () {
            _this4.hideFn();
          }).start();
        };

        _proto.hideFn = function hideFn() {
          var _this5 = this;

          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.STOP_EFFECT_JACKPOT_COIN);
          gfDataStore.instance.curBGMusic = null;
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_SOUND_BACKGROUND, gfBaseConfig.instance.SOUND_BACKGROUND_CONFIG.IN_GAME);
          tween(this.node).delay(.5).then(fadeOut(0.5)).call(function () {
            _this5.particleCoin.getComponent(gf3DParticle).stopAnimation();

            gfEventEmitter.instance.emit(gfBaseEvents.DRAGON.JACKPOT_WINAMOUNT_POPUP_CLOSE);
            gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.CHECK_QUEUE_ANIM);
          }).removeSelf().start();
        };

        _proto.onDestroy = function onDestroy() {
          stopAllActions(this.node);

          if (!gfDataStore.instance || !gfEventEmitter.instance) {
            //game destroyed
            return;
          }

          if (this.tweenCoin) {
            gfDataStore.instance.curBGMusic = null;
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.STOP_EFFECT_JACKPOT_COIN);
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_SOUND_BACKGROUND, gfBaseConfig.instance.SOUND_BACKGROUND_CONFIG.IN_GAME);
            this.tweenCoin.stop();
          }

          removeEvents(this);
        };

        _createClass(gfJackpotWinPopup, [{
          key: "coinValue",
          get: function get() {
            return this._coinValue;
          },
          set: function set(value) {
            this._coinValue = value;

            this._updateCoinWin();
          }
        }]);

        return gfJackpotWinPopup;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "blackLayer", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "txtCoin", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "particleCoin", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "animNode", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "winFrame", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfLaserBox.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfDataStore.ts', './gfBaseFish.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Collider2D, Contact2DType, BoxCollider2D, Intersection2D, Component, gfDataStore, gfBaseFish;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Collider2D = module.Collider2D;
      Contact2DType = module.Contact2DType;
      BoxCollider2D = module.BoxCollider2D;
      Intersection2D = module.Intersection2D;
      Component = module.Component;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfBaseFish = module.gfBaseFish;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "aa2f0CyUTFG/6Q7yGad+K5y", "gfLaserBox", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfLaserBox = exports('gfLaserBox', (_dec = ccclass('gfLaserBox'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfLaserBox, _Component);

        function gfLaserBox() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = gfLaserBox.prototype;

        _proto.onLoad = function onLoad() {
          this.getComponent(Collider2D).on(Contact2DType.BEGIN_CONTACT, this.onCollisionEnter, this);
          this.getComponent(Collider2D).on(Contact2DType.END_CONTACT, this.onCollisionExit, this);
        };

        _proto.onCollisionEnter = function onCollisionEnter(self, other, contact) {
          var listCatchLaser = gfDataStore.instance.getListCatchLaser();
          var fish = other.getComponent(gfBaseFish);

          if (fish) {
            var index = this.getIndexInList(fish.getId());

            if (index === -1) {
              listCatchLaser.push(fish.getId());
            }
          }
        };

        _proto.onCollisionExit = function onCollisionExit(self, other, contact) {
          var listCatchLaser = gfDataStore.instance.getListCatchLaser();
          var fish = other.getComponent(gfBaseFish);

          if (fish) {
            var index = this.getIndexInList(fish.getId());

            if (index > -1) {
              if (this.isAllOtherBoxesOut(other, self)) {
                listCatchLaser.splice(index, 1);
              }
            }
          }
        };

        _proto.isAllOtherBoxesOut = function isAllOtherBoxesOut(other, self) {
          if (!self.world) return true;
          var boxes = other.getComponents(BoxCollider2D);

          for (var i = 0; i < boxes.length; ++i) {
            if (boxes[i].world && boxes[i] != other) {
              if (Intersection2D.polygonPolygon(boxes[i].world.points, self.world.points)) {
                return false;
              }
            }
          }

          return true;
        };

        _proto.getIndexInList = function getIndexInList(fishID) {
          var listCatchLaser = gfDataStore.instance.getListCatchLaser();

          for (var i = 0; i < listCatchLaser.length; i++) {
            if (listCatchLaser[i] === fishID) return i;
          }

          return -1;
        };

        return gfLaserBox;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfLayerComponent.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfReferenceManager.ts', './gfBaseConfig.ts', './gfEventEmitter.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Component, gfBaseEvents, gfReferenceManager, gfBaseConfig, gfEventEmitter;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "2baefi6XKhKSZIzyov49Qds", "gfLayerComponent", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfLayerComponent = exports('gfLayerComponent', (_dec = ccclass('gfLayerComponent'), _dec2 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfLayerComponent, _Component);

        function gfLayerComponent() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "txtVersion", _descriptor, _assertThisInitialized(_this));

          _this.startCallback = void 0;
          _this.isLobbyLayer = false;
          _this.isLoadByPrefab = false;
          return _this;
        }

        var _proto = gfLayerComponent.prototype;

        _proto.onLoad = function onLoad() {
          gfReferenceManager.instance.setData({
            CurrentScene: this.node
          });
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.INIT_SCENE, this.node);
          this.isLoadByPrefab = gfBaseConfig.instance.LoadGameByPrefab;
          this.initEvents();

          if (this.txtVersion) {
            this.txtVersion.string = gfBaseConfig.instance.GameVersion;
          }
        };

        _proto.start = function start() {
          if (this.startCallback) {
            this.startCallback();
            this.startCallback = null;
          }

          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.CHECK_SHOW_POPUP_EVENT);
        };

        _proto.initEvents = function initEvents() {//** init Events here */
        };

        _proto.setStartCallback = function setStartCallback(callback) {
          this.startCallback = callback;
        };

        return gfLayerComponent;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "txtVersion", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfLoadAllInOne.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfAssetBundle.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component, gfAssetBundle;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      gfAssetBundle = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "b0efdkL4uZFUJJxjiy3YE3X", "gfLoadAllInOne", undefined);

      var ccclass = _decorator.ccclass;
      var GfLoadAllInOne = exports('GfLoadAllInOne', (_dec = ccclass('GfLoadAllInOne'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfLoadAllInOne, _Component);

        function GfLoadAllInOne() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = GfLoadAllInOne.prototype;

        _proto.onLoad = function onLoad() {};

        _proto.releaseAllAssets = function releaseAllAssets() {
          //this.node.removeAllChildren();
          gfAssetBundle.instance.destroy();
        };

        _proto.onDestroy = function onDestroy() {
          this.releaseAllAssets();
        };

        return GfLoadAllInOne;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfLoadGameByPrefabs.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfLoadingScene.ts', './gameCommonUtils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, instantiate, Component, gfLoadingScene, gameCommonUtils;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      instantiate = module.instantiate;
      Component = module.Component;
    }, function (module) {
      gfLoadingScene = module.gfLoadingScene;
    }, function (module) {
      gameCommonUtils = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "7a48ekGgQRHo4B2Q39iQQjS", "gfLoadGameByPrefabs", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfLoadGameByPrefab = exports('GfLoadGameByPrefab', (_dec = ccclass('GfLoadGameByPrefab'), _dec2 = property(Prefab), _dec3 = property(Prefab), _dec4 = property(Prefab), _dec5 = property(Prefab), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfLoadGameByPrefab, _Component);

        function GfLoadGameByPrefab() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "persistNodeContainer", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Loading", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Game", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Lobby", _descriptor4, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = GfLoadGameByPrefab.prototype;

        _proto.onLoad = function onLoad() {
          var loadingNode = instantiate(this.Loading);
          loadingNode.getComponent(gfLoadingScene).setGameAndLobbyPrefab(this.Game, this.Lobby, this.persistNodeContainer);
          this.node.addChild(loadingNode);
          gameCommonUtils.handleReleaseBundle();
        };

        return GfLoadGameByPrefab;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "persistNodeContainer", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "Loading", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "Game", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "Lobby", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfLoadingScene.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './loadConfigAsync.ts', './gfMainFSM.ts', './gfBaseConfig.ts', './gfMainController.ts', './gfReferenceManager.ts', './gameCommonUtils.ts', './gfAssetBundle.ts', './utils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, ProgressBar, Node, instantiate, tween, assetManager, sys, director, Prefab, error, UITransform, Component, loadConfigAsync, gfMainFSM, gfBaseConfig, gfMainController, gfReferenceManager, gameCommonUtils, gfAssetBundle, registerLoadHowl, unregisterLoadHowl;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      ProgressBar = module.ProgressBar;
      Node = module.Node;
      instantiate = module.instantiate;
      tween = module.tween;
      assetManager = module.assetManager;
      sys = module.sys;
      director = module.director;
      Prefab = module.Prefab;
      error = module.error;
      UITransform = module.UITransform;
      Component = module.Component;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      gfMainFSM = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfMainController = module.default;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gameCommonUtils = module.default;
    }, function (module) {
      gfAssetBundle = module.default;
    }, function (module) {
      registerLoadHowl = module.registerLoadHowl;
      unregisterLoadHowl = module.unregisterLoadHowl;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "10321Y4ew9IiqXDfRUMG3rZ", "gfLoadingScene", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfLoadingScene = exports('gfLoadingScene', (_dec = ccclass('gfLoadingScene'), _dec2 = property(ProgressBar), _dec3 = property(Node), _dec4 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfLoadingScene, _Component);

        function gfLoadingScene() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "isLoadByBundle", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "processBar", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "loadingGlow", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "homeBtn", _descriptor4, _assertThisInitialized(_this));

          _this.persistNodeName = 'PersisNodeContainer';
          _this.MaxStep = 3;
          _this.listSceneName = void 0;
          _this.persistNodePrefab = null;
          _this.isLoadByPrefab = false;
          _this._targetPercent = 0;
          _this._speed = 0;
          _this._currentProgress = 0;
          _this.usingLoadHowl = false;
          _this._isLoadingDone = false;
          _this._isSwitchScene = false;
          return _this;
        }

        var _proto = gfLoadingScene.prototype;

        _proto.onLoad = function onLoad() {
          var _this2 = this;

          var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
              LOGIN_IFRAME = _loadConfigAsync$getC.LOGIN_IFRAME;

          this.initGameConfig();
          this.initAssetBundle();

          if (this.isLoadByPrefab) {
            gfBaseConfig.instance.MainGameNode = this.node.parent;
            gfBaseConfig.instance.LoadGameByPrefab = true;
            var persistNode = instantiate(this.persistNodePrefab);
            this.node.parent.addChild(persistNode);
            this.MaxStep = 1;
            tween(this.node).to(1, null, {
              onUpdate: function onUpdate(target, ratio) {
                _this2.updateLoadingProgress(0, ratio);
              }
            }).call(function () {
              _this2._isLoadingDone = true;
            }).start();
          } else if (this.isLoadByBundle) {
            gfBaseConfig.instance.MainGameNode = this.node.parent;
            gfBaseConfig.instance.LoadGameByPrefab = true;
            gfAssetBundle.instance.GameBundle = assetManager.getBundle(gfBaseConfig.instance.BundleName);

            if (!gfAssetBundle.instance.GameBundle) {
              assetManager.loadBundle(gfBaseConfig.instance.BundleName, function (err, bundle) {
                if (err) ;else {
                  gfAssetBundle.instance.GameBundle = bundle;

                  _this2.loadAssetsData();
                }
              });
            } else {
              this.loadAssetsData();
            }
          } else {
            this.preloadScene(0);
          }

          if (this.homeBtn) {
            this.homeBtn.active = false;

            if (!LOGIN_IFRAME) {
              this.homeBtn.off('click');
              this.homeBtn.on('click', function () {
                _this2.ExitGame();
              });
              this.scheduleOnce(function () {
                _this2.homeBtn.active = true;
              }, 10);
            }
          }

          if (sys.isBrowser) {
            if (LOGIN_IFRAME && globalThis.Howler) {
              registerLoadHowl();
              this.usingLoadHowl = true;
            }
          }
        };

        _proto.ExitGame = function ExitGame() {
          var _MainFSM$instance;

          (_MainFSM$instance = gfMainFSM.instance) == null ? void 0 : _MainFSM$instance._fsm.goExitGame();
          gameCommonUtils.handleFlowOutGame();
        };

        _proto.initGameConfig = function initGameConfig() {
          if (!gfBaseConfig.instance) {
            new gfBaseConfig();
          }
        };

        _proto.initAssetBundle = function initAssetBundle() {
          if (!gfAssetBundle.instance) {
            new gfAssetBundle();
          }
        };

        _proto.setGameAndLobbyPrefab = function setGameAndLobbyPrefab(gamePrefab, lobbyPrefab, persistNodePrefab) {
          this.initGameConfig();
          gfBaseConfig.instance.ScenePrefabs[gfBaseConfig.instance.SceneName.Game] = gamePrefab;
          gfBaseConfig.instance.ScenePrefabs[gfBaseConfig.instance.SceneName.Lobby] = lobbyPrefab;
          this.persistNodePrefab = persistNodePrefab;
          this.isLoadByPrefab = true;
        };

        _proto.preloadScene = function preloadScene(indexScene) {
          var _this3 = this;

          if (indexScene === void 0) {
            indexScene = 0;
          }

          var listSceneName = Object.keys(gfBaseConfig.instance.SceneName);
          var sceneName = gfBaseConfig.instance.SceneName[listSceneName[indexScene]];
          var totalScene = listSceneName.length;
          director.preloadScene(sceneName, function (completedCount, totalCount, item) {
            _this3.updateLoadingProgress(indexScene + 1, completedCount / totalCount);
          }, function (error) {
            if (error) {
              _this3.ExitGame();
            } else {
              if (gfMainFSM.instance.isStateExit()) return;
              indexScene++;

              if (indexScene != totalScene) {
                _this3.preloadScene(indexScene);
              } else {
                _this3._isLoadingDone = true;
              }
            }
          });
        };

        _proto.loadAssetsData = function loadAssetsData() {
          var _this4 = this;

          if (!gfAssetBundle.instance.GameBundle) return;
          this.listSceneName = Object.keys(gfBaseConfig.instance.SceneName);
          var totalScene = this.listSceneName.length;
          this.MaxStep = totalScene + 1; // add 1 step load prefab persist node

          gfAssetBundle.instance.GameBundle.load(this.persistNodeName, Prefab, function (finished, total, item) {
            var percent = finished / total;

            _this4.updateLoadingProgress(0, percent);
          }, function (error, assets) {
            if (error) {
              _this4.ExitGame();

              return;
            }

            var persistNode = instantiate(assets);

            _this4.node.parent.addChild(persistNode);

            if (_this4.homeBtn) _this4.homeBtn.active = false;

            _this4.unscheduleAllCallbacks();

            _this4.loadSceneBundle(0); // this.preloadScene(0);

          });
        };

        _proto.loadSceneBundle = function loadSceneBundle(sceneIndex) {
          var _this5 = this;

          gfAssetBundle.instance.GameBundle.load('./Scenes/' + gfBaseConfig.instance.SceneName[this.listSceneName[sceneIndex]], Prefab, function (finished, total, item) {
            var percent = finished / total;

            _this5.updateLoadingProgress(sceneIndex + 1, percent);
          }, function (err, prefab) {
            if (err) {
              error(err);

              _this5.ExitGame();

              return;
            }

            gfBaseConfig.instance.ScenePrefabs[gfBaseConfig.instance.SceneName[_this5.listSceneName[sceneIndex]]] = prefab;

            if (sceneIndex < _this5.listSceneName.length - 1) {
              _this5.loadSceneBundle(sceneIndex + 1);
            } else {
              _this5._isLoadingDone = true;
            }
          });
        };

        _proto.updateLoadingProgress = function updateLoadingProgress(step, currentPercent) {
          var percent = (step + currentPercent) / this.MaxStep;
          if (percent <= this._currentProgress) return;
          this._targetPercent = percent;
          this._speed = (percent - this._currentProgress) / ((1.0 - percent) * 3 + 0.1);
        };

        _proto.update = function update(dt) {
          this._currentProgress += this._speed * dt;
          this.updateLoadingProgressDisplay();

          if (this._isLoadingDone && !this._isSwitchScene) {
            var _ReferenceManager$ins;

            (_ReferenceManager$ins = gfReferenceManager.instance) == null ? void 0 : _ReferenceManager$ins.setData({
              CurrentScene: this.node
            });
            gfMainController.instance.initToken();
            this._isSwitchScene = true;
          }
        };

        _proto.updateLoadingProgressDisplay = function updateLoadingProgressDisplay() {
          this.processBar.progress = Number(this._currentProgress.toFixed(3));
          if (this.processBar.progress > 1.0) this.processBar.progress = 1.0;

          if (this.loadingGlow) {
            var currentPosGlow = this.loadingGlow.getPosition();
            var newPosX = Math.max(currentPosGlow.x, this.processBar.getComponent(UITransform).width * this.processBar.progress);
            this.loadingGlow.setPosition(newPosX, currentPosGlow.y, 0);
          }
        };

        _proto.onDestroy = function onDestroy() {
          if (this.usingLoadHowl) {
            unregisterLoadHowl();
          }
        };

        return gfLoadingScene;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "isLoadByBundle", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "processBar", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "loadingGlow", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "homeBtn", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfLoadingTransition.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfBaseEvents.ts', './gfActionHelper.ts', './gfUtilities.ts', './gfDataStore.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, tween, Component, setOpacity, gfBaseEvents, delay, fadeOut, call, registerEvent, removeEvents, gfDataStore;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      tween = module.tween;
      Component = module.Component;
    }, function (module) {
      setOpacity = module.setOpacity;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      delay = module.delay;
      fadeOut = module.fadeOut;
      call = module.call;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfDataStore = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "64cbaM1vRdJnq2EqYQ2YxOz", "gfLoadingTransition", undefined);

      var ccclass = _decorator.ccclass;
      var GfLoadingTransition = exports('GfLoadingTransition', (_dec = ccclass('GfLoadingTransition'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfLoadingTransition, _Component);

        function GfLoadingTransition() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.startTime = null;
          return _this;
        }

        var _proto = GfLoadingTransition.prototype;

        _proto.onLoad = function onLoad() {
          setOpacity(this.node, 0);
          this.startTime = Date.now();
          registerEvent(gfBaseEvents.COMMON.LOADING_TRANSITION, this.transition, this);
          registerEvent(gfBaseEvents.COMMON.REMOVE_PERSIST_NODE, this.refreshPage, this);
        };

        _proto.transition = function transition() {
          var _this2 = this;

          gfDataStore.instance.setDataStore({
            "isPlayingLoadingTransition": true
          });
          setOpacity(this.node, 255);
          var delayTime = Date.now() - this.startTime > 1 ? 0.25 : 1;
          var tweenTransition = tween(this.node);
          tweenTransition.then(delay(delayTime));
          tweenTransition.then(fadeOut(0.5));
          tweenTransition.then(call(function () {
            gfDataStore.instance.setDataStore({
              "isPlayingLoadingTransition": false
            });
            removeEvents(_this2);

            _this2.node.destroy();
          }));
          tweenTransition.start();
        };

        _proto.refreshPage = function refreshPage() {
          removeEvents(this);
        };

        return GfLoadingTransition;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfLobbyLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfDataStore.ts', './gfEventEmitter.ts', './gfMainFSM.ts', './gfBaseConfig.ts', './gfBaseEvents.ts', './gfNetworkParser.ts', './gameCommonUtils.ts', './loadConfigAsync.ts', './utils.ts', './gfUtilities.ts', './animateNumberLabel.ts', './gfLayerComponent.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Label, Sprite, SpriteAtlas, log, warn, gfDataStore, gfEventEmitter, gfMainFSM, gfBaseConfig, gfBaseEvents, gfNetworkParser, gameCommonUtils, loadConfigAsync, formatMoney, registerEvent, removeEvents, formatUserName, AnimateNumberLabel, gfLayerComponent;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
      Sprite = module.Sprite;
      SpriteAtlas = module.SpriteAtlas;
      log = module.log;
      warn = module.warn;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfMainFSM = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfNetworkParser = module.default;
    }, function (module) {
      gameCommonUtils = module.default;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      formatMoney = module.formatMoney;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
      formatUserName = module.formatUserName;
    }, function (module) {
      AnimateNumberLabel = module.AnimateNumberLabel;
    }, function (module) {
      gfLayerComponent = module.gfLayerComponent;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "24e87bN5TRKIZg3pbMUlK0r", "gfLobbyLayer", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfLobbyLayer = exports('gfLobbyLayer', (_dec = ccclass('gfLobbyLayer'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Label), _dec5 = property(Label), _dec6 = property(Sprite), _dec7 = property(SpriteAtlas), _dec(_class = (_class2 = /*#__PURE__*/function (_gfLayerComponent) {
        _inheritsLoose(gfLobbyLayer, _gfLayerComponent);

        function gfLobbyLayer() {
          var _this;

          _this = _gfLayerComponent.call(this) || this;

          _initializerDefineProperty(_this, "txtJackpot", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnBack", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "txtUserName", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "txtWallet", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "avatarSprite", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "avatarAtlas", _descriptor6, _assertThisInitialized(_this));

          _this.isLobbyLayer = true;
          return _this;
        }

        var _proto = gfLobbyLayer.prototype;

        _proto.onLoad = function onLoad() {
          gfDataStore.instance.setDataStore({
            currentSceneName: gfBaseConfig.instance.SceneName.Lobby
          });

          var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
              LOGIN_IFRAME = _loadConfigAsync$getC.LOGIN_IFRAME;

          if (LOGIN_IFRAME) {
            this.btnBack.active = gameCommonUtils.checkConditionCloseGameIframe();
          } else {
            this.btnBack.active = true;
          }

          _gfLayerComponent.prototype.onLoad.call(this);
        };

        _proto.setStartCallback = function setStartCallback(callback) {
          this.startCallback = callback;
        };

        _proto.start = function start() {
          _gfLayerComponent.prototype.start.call(this);

          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_SOUND_BACKGROUND, gfBaseConfig.instance.SOUND_BACKGROUND_CONFIG.LOBBY, true);
          this.updateJackpotInfo();
        };

        _proto.initEvents = function initEvents() {
          _gfLayerComponent.prototype.initEvents.call(this);

          registerEvent(gfBaseEvents.LOBBY_LAYER.UPDATE_LOBBY_INFO, this.onUpdateInfo, this);
          registerEvent(gfBaseEvents.LOBBY_LAYER.UPDATE_LOBBY_WALLET, this.onUpdateLobbyWallet, this);
          registerEvent(gfBaseEvents.COMMON.UPDATE_JACKPOT, this.updateJackpotInfo, this);
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
          if (this.isLoadByPrefab) ;else if (!gfMainFSM.instance.isStateLoadGame() && !!gfEventEmitter.instance && !gfMainFSM.instance.isStateWaitExit()) {
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.REFRESH_PAGE);
          }
        };

        _proto.onBtnJPHistoryClick = function onBtnJPHistoryClick() {
          log("::LobbyLayer:: onBtnJPHistoryClick");
          if (!gfEventEmitter || !gfEventEmitter.instance) return;
          this.scheduleOnce(function () {
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          }, 0);
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_JACKPOT_HISTORY);
        };

        _proto.onBtnInfoClick = function onBtnInfoClick() {
          log("::LobbyLayer:: onBtnInfoClick");
          if (!gfEventEmitter || !gfEventEmitter.instance) return;
          this.scheduleOnce(function () {
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          }, 0);
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_INFO);
        };

        _proto.onBtnSettingClick = function onBtnSettingClick() {
          log("::LobbyLayer:: onBtnSettingClick");
          if (!gfEventEmitter || !gfEventEmitter.instance) return;
          this.scheduleOnce(function () {
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          }, 0);
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_SETTING);
        };

        _proto.onBtnBackClick = function onBtnBackClick() {
          log("::LobbyLayer:: onBtnBackClick");
          if (!gfEventEmitter || !gfEventEmitter.instance) return;
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHOW_WAITING);
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.REFRESH_PAGE); // gameCommonUtils.handleCloseGameIframe();
        };

        _proto.onRoomNormalClick = function onRoomNormalClick() {
          log("::LobbyLayer:: onRoomNormalClick");
          if (!gfEventEmitter || !gfEventEmitter.instance) return;

          if (!gfNetworkParser.instance.isAvailable()) {
            warn('Network socket closed');
            return;
          }

          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHOW_WAITING, true);
          gfDataStore.instance.setDataStore({
            currentRoom: gfBaseConfig.instance.RoomKind.Normal
          });
          gfEventEmitter.instance.emit(gfBaseEvents.LOBBY_LAYER.LOBBY_GET_ROOM_INFO, gfBaseConfig.instance.RoomKind.Normal);
        };

        _proto.onRoomVipClick = function onRoomVipClick() {
          log("::LobbyLayer:: onRoomVipClick");
          if (!gfEventEmitter || !gfEventEmitter.instance) return;

          if (!gfNetworkParser.instance.isAvailable()) {
            warn('Network socket closed');
            return;
          }

          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHOW_WAITING, true);
          gfDataStore.instance.setDataStore({
            currentRoom: gfBaseConfig.instance.RoomKind.VIP
          });
          gfEventEmitter.instance.emit(gfBaseEvents.LOBBY_LAYER.LOBBY_GET_ROOM_INFO, gfBaseConfig.instance.RoomKind.VIP);
        };

        _proto.onUpdateInfo = function onUpdateInfo() {
          var selfInfo = gfDataStore.instance.getSelfInfo();
          this.txtUserName.string = formatUserName(selfInfo.Username);
          this.txtWallet.string = formatMoney(selfInfo.Wallet);

          if (this.avatarAtlas) {
            var frameAvatar = this.avatarAtlas.getSpriteFrame(selfInfo.Avatar);

            if (!frameAvatar) {
              frameAvatar = this.avatarAtlas.getSpriteFrame(gfBaseConfig.instance.DEFAULT_AVATAR);
            }

            this.avatarSprite.spriteFrame = frameAvatar;
          }

          if (selfInfo && selfInfo.EventInfo) {
            gfEventEmitter.instance.emit(gfBaseEvents.EVENT.UPDATE_EVENT_STATUS, selfInfo.EventInfo);
          }
        };

        _proto.onUpdateLobbyWallet = function onUpdateLobbyWallet(data) {
          this.txtWallet.string = formatMoney(data);
          this.txtWallet.updateRenderData(true);
        };

        _proto.updateJackpotInfo = function updateJackpotInfo(amount) {
          if (!amount) {
            amount = gfDataStore.instance.getJackpotValue();
          }

          if (!this.txtJackpot) {
            warn('Cant find node txtJackpot');
            return;
          }

          if (!this.txtJackpot.active) {
            return;
          }

          var newJP = parseInt(amount);

          if (this.txtJackpot.getComponent(AnimateNumberLabel).currentValue === undefined) {
            this.txtJackpot.getComponent(AnimateNumberLabel).currentValue = amount;
          }

          this.txtJackpot.getComponent(AnimateNumberLabel).onUpdateValue(newJP, 3000);
          this.txtJackpot.getComponent(Label).updateRenderData(true);
        };

        return gfLobbyLayer;
      }(gfLayerComponent), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "txtJackpot", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btnBack", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "txtUserName", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "txtWallet", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "avatarSprite", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "avatarAtlas", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfLocalize.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, warn, log;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      warn = module.warn;
      log = module.log;
    }],
    execute: function () {
      cclegacy._RF.push({}, "30f18qQbtpKMLZJevACOyOw", "gfLocalize", undefined);

      var gfLocalize = exports('default', /*#__PURE__*/function () {
        function gfLocalize() {
          gfLocalize.instance = this;
          log('::Init Localization::');
        }

        var _proto = gfLocalize.prototype;

        _proto.initLocalizeConfig = function initLocalizeConfig(jsonLocalize) {
          var localize = jsonLocalize;

          if (!localize) {
            warn('Localize file failed');
            return;
          } // this._localize = {};


          for (var key in localize) {
            gfLocalize.instance[key] = localize[key];
          }
        };

        _proto.destroy = function destroy() {
          gfLocalize.instance = null;
        };

        return gfLocalize;
      }());
      gfLocalize.instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfLuckyEffect.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfEventEmitter.ts', './utils.ts', './gfActionHelper.ts', './gfNode.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, tween, v3, Tween, gfBaseEvents, gfEventEmitter, setOpacity, rotateBy, fadeIn, stopAllActions, gfNode;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      tween = module.tween;
      v3 = module.v3;
      Tween = module.Tween;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      setOpacity = module.setOpacity;
    }, function (module) {
      rotateBy = module.rotateBy;
      fadeIn = module.fadeIn;
      stopAllActions = module.stopAllActions;
    }, function (module) {
      gfNode = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "0b23deizqlFKZkw3Wpjbkmk", "gfLuckyEffect", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfLuckyEffect = exports('default', (_dec = ccclass('gfLuckyEffect'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_gfNode) {
        _inheritsLoose(gfLuckyEffect, _gfNode);

        function gfLuckyEffect() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfNode.call.apply(_gfNode, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "circle1Node", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "numberNode", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "multiNode", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "iconGlow", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "pinNode", _descriptor5, _assertThisInitialized(_this));

          _this.rotateTime = 3;
          return _this;
        }

        var _proto = gfLuckyEffect.prototype;

        _proto.initData = function initData(data) {
          for (var i = 0; i < this.multiNode.length; ++i) {
            this.multiNode[i].setScale(1, 1, 1);
          }

          tween(this.circle1Node).by(this.rotateTime, {
            angle: 360 * 4
          }).repeatForever().start();
          this.playEffect(data);
        };

        _proto.playEffect = function playEffect(data) {
          var _this2 = this;

          var multiplier = data.Multiplier;
          var result = multiplier - 2;
          var showTime = 0.5;
          var fadeTime = 0.2;
          this.iconGlow.active = true;
          setOpacity(this.iconGlow, 0);
          this.numberNode.angle = result * 90;
          tween(this.numberNode).parallel(tween().then(rotateBy(this.rotateTime, -360 * 3, "cubicOut")), tween().then(fadeIn(this.rotateTime, "cubicOut"))).start();
          tween(this.pinNode).then(fadeIn(0.5)).start();
          tween(this.node).to(showTime, {
            scale: v3(1, 1, 1)
          }).delay(this.rotateTime - showTime).call(function () {
            tween(_this2.multiNode[result]).delay(fadeTime).to(showTime, {
              scale: v3(1.5, 1.5, 1)
            }).call(function () {
              tween(_this2.node).to(showTime + fadeTime, {
                scale: v3(0, 0, 1)
              }).call(function () {
                gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.PLAY_LUCKY_EFFECT_DONE, data);

                _this2.returnPool();
              }).start();
            }).start();
          }).start();
        };

        _proto.update = function update() {
          var _this3 = this;

          this.multiNode.forEach(function (element) {
            element.angle = -_this3.numberNode.angle;
          });
        };

        _proto.reuse = function reuse(poolMng) {
          _gfNode.prototype.reuse.call(this, poolMng);
        };

        _proto.unuse = function unuse() {
          this.unscheduleAllCallbacks();
          setOpacity(this.numberNode, 0);
          Tween.stopAllByTarget(this.circle1Node);
          this.circle1Node.setScale(1, 1, 1);
          this.circle1Node.setPosition(0, 0, 0);
          setOpacity(this.circle1Node, 255);
          setOpacity(this.pinNode, 255);
          stopAllActions(this.node);

          for (var i = 0; i < this.multiNode.length; ++i) {
            stopAllActions(this.multiNode[i]);
          }

          _gfNode.prototype.unuse.call(this);
        };

        return gfLuckyEffect;
      }(gfNode), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "circle1Node", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "numberNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "multiNode", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "iconGlow", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "pinNode", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfLuckyFish.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfEventEmitter.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, BoxCollider2D, Vec3, Component, gfBaseEvents, gfEventEmitter;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      BoxCollider2D = module.BoxCollider2D;
      Vec3 = module.Vec3;
      Component = module.Component;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "305ddiA5gZAI7Kz+hXQuWzN", "gfLuckyFish", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfLuckyFish = exports('GfLuckyFish', (_dec = ccclass('GfLuckyFish'), _dec2 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfLuckyFish, _Component);

        function GfLuckyFish() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "luckyEffect", _descriptor, _assertThisInitialized(_this));

          _this._multiplier = 1;
          return _this;
        }

        var _proto = GfLuckyFish.prototype;

        _proto.initLuckyEffect = function initLuckyEffect(data) {
          var multiplier = data.multiplier;
          this._multiplier = multiplier;

          if (this.luckyEffect) {
            this.luckyEffect.active = this._multiplier > 1;
            var scaleSize = Math.min(2, this.node.getComponent(BoxCollider2D).size.width * this.node.scale.x / 50);
            this.luckyEffect.setScale(new Vec3(scaleSize, scaleSize, 1));
          }
        };

        _proto.onPlayEffectWinLuckfyFishInCatchFish = function onPlayEffectWinLuckfyFishInCatchFish(data) {
          if (this._multiplier > 1) {
            this.luckyEffect.active = false;
            gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.LUCKY_EFFECT_FISH, {
              data: data,
              fishKind: data.fishKind,
              fishPos: data.fishPos,
              Multiplier: this._multiplier
            });
          }
        };

        _proto.getMultiplier = function getMultiplier() {
          return this._multiplier;
        };

        return GfLuckyFish;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "luckyEffect", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfMainController.ts", ['cc', './gfEventEmitter.ts', './gfBaseEvents.ts', './gfNetworkGameEvent.ts', './gfNetworkParser.ts', './gfUtilities.ts', './gfBaseConfig.ts', './gfMainFSM.ts', './gfDataStore.ts', './mock.ts', './loadConfigAsync.ts', './serviceRest.ts', './gameCommonUtils.ts', './gfLocalize.ts', './gfAssetBundle.ts', './gfLayerComponent.ts', './gfOverrideEngine.ts'], function (exports) {
  'use strict';

  var cclegacy, sys, game, Game, director, warn, log, instantiate, gfEventEmitter, gfBaseEvents, gfNetworkGameEvent, gfNetworkParser, addHtmlCursor, registerEvent, removeEvents, removeCursorInHtml, gfBaseConfig, gfMainFSM, gfDataStore, mock, loadConfigAsync, apiObject, gameCommonUtils, gfLocalize, gfAssetBundle, gfLayerComponent, gfOverrideEngine;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      sys = module.sys;
      game = module.game;
      Game = module.Game;
      director = module.director;
      warn = module.warn;
      log = module.log;
      instantiate = module.instantiate;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfNetworkGameEvent = module.default;
    }, function (module) {
      gfNetworkParser = module.default;
    }, function (module) {
      addHtmlCursor = module.addHtmlCursor;
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
      removeCursorInHtml = module.removeCursorInHtml;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfMainFSM = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      mock = module.mock;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      apiObject = module.default;
    }, function (module) {
      gameCommonUtils = module.default;
    }, function (module) {
      gfLocalize = module.default;
    }, function (module) {
      gfAssetBundle = module.default;
    }, function (module) {
      gfLayerComponent = module.gfLayerComponent;
    }, function (module) {
      gfOverrideEngine = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "2615edDXbRNUYD1XT4g99wj", "gfMainController", undefined);

      var getUrlParam = gameCommonUtils.getUrlParam,
          handleCloseGameIframe = gameCommonUtils.handleCloseGameIframe,
          handleFlowOutGame = gameCommonUtils.handleFlowOutGame;
      var gfMainController = exports('default', /*#__PURE__*/function () {
        function gfMainController() {
          this._onHideGameBinding = void 0;
          this._onShowGameBinding = void 0;
          this.isLoadingLobbyScene = void 0;
          this.needLoadGameScene = void 0;
          this._isGameHide = void 0;
          this._timeHide = null;
          this._timeOutDupLogin = void 0;
          gfMainController.instance = this; // EMIT FUNC

          this._onHideGameBinding = this.onHideGame.bind(this);
          this._onShowGameBinding = this.onShowGame.bind(this);
          this.initEvents();
          this.initGame();
          this.initSentry();
          new gfOverrideEngine();
        }

        var _proto = gfMainController.prototype;

        _proto.initSentry = function initSentry() {
          loadConfigAsync.setUpSentry();

          if (typeof globalThis.Sentry !== 'undefined') {
            globalThis.Sentry.configureScope(function (scope) {
              scope.setExtra("gameVersion", gfBaseConfig.instance.GameVersion);
            });
          }
        };

        _proto.initToken = function initToken() {
          var _this = this;

          var CONFIG = loadConfigAsync.getConfig();
          var LOGIN_IFRAME = CONFIG.LOGIN_IFRAME,
              URL_TOKEN = CONFIG.URL_TOKEN,
              USER_TOKEN = CONFIG.USER_TOKEN,
              DEV_ENV = CONFIG.DEV_ENV,
              TOKEN_VALUE = CONFIG.TOKEN_VALUE,
              FISH_CLIENT_TYPE = CONFIG.FISH_CLIENT_TYPE,
              IS_FINISHED_REMOTE = CONFIG.IS_FINISHED_REMOTE,
              TOKEN = CONFIG.TOKEN,
              API_URL = CONFIG.API_URL,
              IS_PRODUCTION = CONFIG.IS_PRODUCTION;

          if (!IS_FINISHED_REMOTE) {
            setTimeout(function () {
              _this.initToken();
            }, 100);
            return;
          }

          gfBaseConfig.instance.IsDevMode = DEV_ENV != null && DEV_ENV == true;
          gfBaseConfig.instance.IPMaster = CONFIG[gfBaseConfig.instance.IPMasterName];
          var token = '';
          var clientType = '|1';
          var environmentType = '';

          if (LOGIN_IFRAME) {
            gfBaseConfig.instance.GameId = getUrlParam('gameId') ? getUrlParam('gameId') : gfBaseConfig.instance.GameId;
            gfBaseConfig.instance.ClientType = gfBaseConfig.instance.ClientType ? gfBaseConfig.instance.ClientType : '';
            environmentType = "|" + gfBaseConfig.instance.ENVIRONMENT_CONFIG.IFRAME;
          } else {
            if (sys.isNative) {
              environmentType = "|" + gfBaseConfig.instance.ENVIRONMENT_CONFIG.NATIVE_APP;
            } else {
              environmentType = "|" + gfBaseConfig.instance.ENVIRONMENT_CONFIG.WEB_APP;
            }
          }

          if (LOGIN_IFRAME && getUrlParam('version')) {
            gfBaseConfig.instance.RoomVersion = "|" + getUrlParam('version');
          } else if (IS_PRODUCTION) {
            gfBaseConfig.instance.RoomVersion = gfBaseConfig.instance.ProdVersion ? gfBaseConfig.instance.ProdVersion : gfBaseConfig.instance.RoomVersion;
          }

          if (LOGIN_IFRAME && getUrlParam('clientType')) {
            clientType = "|" + getUrlParam('clientType');
          } else if (FISH_CLIENT_TYPE) {
            clientType = "|" + FISH_CLIENT_TYPE;
          } else {
            clientType = gfBaseConfig.instance.ClientType ? gfBaseConfig.instance.ClientType : clientType;
          }

          if (!gfBaseConfig.instance.IsDevMode) {
            if (TOKEN) {
              token = TOKEN;
            } else if (!sys.isNative && LOGIN_IFRAME) {
              if (URL_TOKEN) token = getUrlParam(URL_TOKEN);
            } else {
              token = sys.localStorage.getItem(USER_TOKEN);
              if (!token && TOKEN_VALUE) token = TOKEN_VALUE;
            }

            gfBaseConfig.instance.userToken = token;
            token += gfBaseConfig.instance.RoomVersion + clientType + environmentType;
            gfBaseConfig.instance.token4Master = token;

            gfMainFSM.instance._fsm.goLoginLobby();
          } else {
            // const { userText, pwText } = require('mock');
            var dataPost = {
              userName: mock.userText,
              password: mock.pwText,
              fingerPrint: 'test'
            }; // const serviceRest = require('serviceRest');

            apiObject.post({
              url: 'auth/login',
              apiUrl: API_URL,
              data: dataPost,
              callback: function callback(_ref) {
                var data = _ref.data;
                gfBaseConfig.instance.token4Master = data.data.token + gfBaseConfig.instance.RoomVersion + environmentType;

                gfMainFSM.instance._fsm.goLoginLobby();
              }
            });
          }
        };

        _proto.initGame = function initGame() {
          this._isGameHide = true; // Trick to handle bug from hideGame on LoadingScene

          addHtmlCursor();
        };

        _proto.initEvents = function initEvents() {
          // NETWORK EVENT
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.NETWORK_EVENT, this.onNetworkState.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.LOBBY_LOGIN, this.onLoginLobby.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.LOBBY_MESSAGE, this.onSystemMessage.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.LOBBY_GET_ROOM_INFO, this.onJoinGame.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_LOGIN, this.onLoginGame.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.LOBBY_JACKPOT, this.onUpdateJackpot.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.LOBBY_UPDATE_MY_GOLD, this.onUpdateLobbyWallet.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_GET_BOT_SETTING, this.onGetBotSetting.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_USER_FIRE, this.onUserFire.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_CREATE_FISH, this.onCreateListFish.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_CATCH_FISH, this.onCatchFish.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_CATCH_FISH_SKILL, this.onCatchFishSkill.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_FISH_FREEZE, this.onFishFreeze.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_CREATE_FISH_GROUP_NEW, this.onCreateFishGroup.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_ROOM_DATA, this.onDataJoinRoom.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_LISTUSER_BOARD, this.onListUserOnBoard.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_UPDATE_JACKPOT, this.onUpdateJackpot.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_PLAYER_ENTER_BOARD, this.onPlayerEnterBoard.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_KICK, this.onGameKick.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_MESSAGE, this.onSystemMessage.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_USER_EXIT, this.onPlayerExitBoard.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_UPDATE_WALLET, this.onPlayerUpdateWallet.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_CHANGE_ROUND, this.onGameChangeRound.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.LOBBY_NOTIFY, this.onNotify.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_NOTIFY, this.onNotify.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_LIST_ITEM, this.onUpdateListItem.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_ACTIVE_FREEZE_GUN, this.onActiveFreezeGun.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_STOP_FREEZE_GUN, this.onStopFreezeGun.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_DRAGON_END, this.onDragonStateEnd.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_DRAGON_BALL_DROPPED, this.onDragonBallDropped.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_DRAGON_WARNING, this.onDragonWarning.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.LOBBY_UPDATE_EVENT_STATUS, this.onUpdateEventStatus.bind(this)); // EMIT EVENT

          registerEvent(gfBaseEvents.COMMON.GO_LOBBY, this.goLobby, this);
          registerEvent(gfBaseEvents.GAME_LAYER.BULLET_COLLIDE_FISH, this.bulletCollideFish, this);
          registerEvent(gfBaseEvents.GAME_LAYER.SEND_GUN_FIRE, this.sendGunFire, this);
          registerEvent(gfBaseEvents.GAME_LAYER.SEND_ACTIVE_FREEZE_GUN, this.sendActiveFreezeGun, this);
          registerEvent(gfBaseEvents.GAME_LAYER.SEND_FIRE_LASER, this.sendFireLaser, this);
          registerEvent(gfBaseEvents.GAME_LAYER.SEND_FIRE_DRILL, this.sendFireDrill, this);
          registerEvent(gfBaseEvents.COMMON.REFRESH_PAGE, this.refreshPage, this);
          registerEvent(gfBaseEvents.POPUP.GET_BOT_SETTING, this.sendGetBotSetting, this);
          registerEvent(gfBaseEvents.POPUP.SET_BOT_SETTING, this.sendSetBotSetting, this);
          registerEvent(gfBaseEvents.EVENT.SEND_GET_EVENT_INFO, this.sendGetEventInfo, this);
          registerEvent(gfBaseEvents.COMMON.ON_SHOW_GAME_LAYER, this.onShowGameLayer, this);
          registerEvent(gfBaseEvents.COMMON.SEND_EXIT_GAME_SERVER, this.sendExitGameServer, this);
          registerEvent(gfBaseEvents.LOBBY_LAYER.LOBBY_GET_ROOM_INFO, this.sendGetRoomInfo, this);
          registerEvent(gfBaseEvents.COMMON.CONNECT_MASTER, this.connectMaster, this);
          registerEvent(gfBaseEvents.COMMON.CONNECT_GAME, this.connectGame, this);
          game.on(Game.EVENT_HIDE, this._onHideGameBinding);
          game.on(Game.EVENT_SHOW, this._onShowGameBinding);
          director.on('LOGGED_IN_OTHER_DEVICE', this.handleDuplicatedLogin, this);

          if (!sys.isNative) {
            window.addEventListener('beforeunload', this.onCloseTab.bind(this));
          }
        };

        _proto.handleDuplicatedLogin = function handleDuplicatedLogin() {
          var _this2 = this;

          this._timeOutDupLogin = setTimeout(function () {
            clearTimeout(_this2._timeOutDupLogin);
            gfEventEmitter.instance.emit(gfBaseEvents.POPUP.CLOSE_ALL);
            handleCloseGameIframe();
          }, 500);
          var callback = {
            confirmCallback: function confirmCallback() {
              clearTimeout(_this2._timeOutDupLogin);
              handleCloseGameIframe();
            }
          };
          var data = {
            customMsg: gfLocalize.instance.MessagesSystem[gfNetworkGameEvent.MSG_CODE.DUPLICATE_LOGIN],
            customCallbacks: callback
          };
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_PROMPT, data);
        };

        _proto.onCloseTab = function onCloseTab() {
          if (gfDataStore.instance && gfBaseConfig.instance) {
            if (gfDataStore.instance.getCurrentSceneName() == gfBaseConfig.instance.SceneName.Game) {
              this.sendRegisterExit();
            }
          }
        };

        _proto.sendRegisterExit = function sendRegisterExit() {
          gfNetworkParser.instance.sendRegisterExit();
        } // NETWORK FUNCTION
        ;

        _proto.onNetworkState = function onNetworkState(data) {
          if (!gfDataStore.instance || !gfEventEmitter.instance) {
            warn('game already destroyed or either not initialized');
          }

          var selfInfo = gfDataStore.instance.getSelfInfo();
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.NETWORK_STATUS_INFO, data);

          switch (data.EventID) {
            case gfNetworkGameEvent.PINGPONG:
              gfEventEmitter.instance.emit(gfBaseEvents.COMMON.UPDATE_PING, data.EventData.data);
              break;

            case gfNetworkGameEvent.NETWORK_CONNECT:
              if (gfMainFSM.instance.isStateLoginGameRoom() || gfMainFSM.instance.isStateGameRoom()) {
                // Emitter.instance.emit(EventCode.POPUP.CLOSE_ALL);
                gfNetworkParser.instance.sendJoinDesk(selfInfo.DeskId);
              }

              break;

            case gfNetworkGameEvent.NETWORK_WAITING:
              gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHOW_WAITING);
              break;

            case gfNetworkGameEvent.NETWORK_ERROR:
              /** Show popup network poor* */
              gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_PROMPT, gfNetworkGameEvent.NETWORK_ERROR);
              break;

            case gfNetworkGameEvent.NETWORK_CLOSE:
              /** Show close socket hay làm gì đó* */
              break;

            case gfNetworkGameEvent.NETWORK_POOR:
              /** Show popup network poor* */
              gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_PROMPT, gfNetworkGameEvent.NETWORK_POOR);
              break;

            case gfNetworkGameEvent.NETWORK_DIE:
              /** Show popup refesh* */
              gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_PROMPT, gfNetworkGameEvent.NETWORK_DIE);
              break;

            case gfNetworkGameEvent.AUTHEN_FAIL:
              if (gfDataStore.instance.getCurrentSceneName() == gfBaseConfig.instance.SceneName.Game) {
                this.goLobby();
              } else {
                gfEventEmitter.instance.emit(gfBaseEvents.COMMON.HIDE_WAITING);
                /** Show popup login fail* */

                gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_PROMPT, gfNetworkGameEvent.AUTHEN_FAIL);
              }

              break;

            case gfNetworkGameEvent.LOGIN_IN_OTHER_DEVICE:
              /** Show popup thiết bị khác* */
              gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_PROMPT, gfNetworkGameEvent.LOGIN_IN_OTHER_DEVICE);
              break;

            case gfNetworkGameEvent.NETWORK_RECONNECT:
              this.onReconnect();
              break;
          }
        };

        _proto.onReconnect = function onReconnect() {
          var selfInfo = gfDataStore.instance.getSelfInfo();
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.CLOSE_ALL);
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.HIDE_WAITING);
          if (gfDataStore.instance.getCurrentSceneName() == gfBaseConfig.instance.SceneName.Lobby) ;else {
            gfNetworkParser.instance.sendJoinDesk(selfInfo.DeskId);
          }
        };

        _proto.goLobby = function goLobby() {
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.EXIT_GAME_ROOM);

          gfMainFSM.instance._fsm.goLoginLobby();
        };

        _proto.onLoginLobby = function onLoginLobby(data) {
          data.DeskId = null;
          gfDataStore.instance.setSelfInfo(data);
          gfDataStore.instance.clearOldTarget();
          gfDataStore.instance.updateDeltaTime(data.ServerTime);

          if (data.BetConfig) {
            gfDataStore.instance.listJackpotBet = globalThis._(data.BetConfig).values().join('-');
          }

          if (!data.isUserInGame) {
            if (gfDataStore.instance.getCurrentSceneName() !== gfBaseConfig.instance.SceneName.Lobby) {
              this.loadScene(gfBaseConfig.instance.SceneName.Lobby, function () {
                var _Emitter$instance, _MainFSM$instance;

                (_Emitter$instance = gfEventEmitter.instance) == null ? void 0 : _Emitter$instance.emit(gfBaseEvents.COMMON.LOADING_TRANSITION);
                (_MainFSM$instance = gfMainFSM.instance) == null ? void 0 : _MainFSM$instance._fsm.goLobby();
              });
            } else {
              var _MainFSM$instance2;

              if ((_MainFSM$instance2 = gfMainFSM.instance) != null && _MainFSM$instance2._fsm.can('goLobby')) {
                var _MainFSM$instance3;

                (_MainFSM$instance3 = gfMainFSM.instance) == null ? void 0 : _MainFSM$instance3._fsm.goLobby();
              } else {
                var _Emitter$instance2, _Emitter$instance3;

                (_Emitter$instance2 = gfEventEmitter.instance) == null ? void 0 : _Emitter$instance2.emit(gfBaseEvents.LOBBY_LAYER.UPDATE_LOBBY_INFO);
                (_Emitter$instance3 = gfEventEmitter.instance) == null ? void 0 : _Emitter$instance3.emit(gfBaseEvents.COMMON.UPDATE_JACKPOT, gfDataStore.instance.getJackpotValue());
              }
            }
          }
        };

        _proto.onJoinGame = function onJoinGame(data) {
          gfBaseConfig.instance.parseJoinGame(data);

          if (data.KindID) {
            gfDataStore.instance.setCurrentRoom(data.KindID);
          }

          this.loadGameScene();
        };

        _proto.loadGameScene = function loadGameScene() {
          var _this3 = this;

          if (!this.isGameScene()) {
            gfMainFSM.instance._fsm.goLoadGame();

            var sceneName = this.getGameSceneName();
            var currentScene = gfDataStore.instance.getCurrentSceneName();

            if (currentScene === gfBaseConfig.instance.SceneName.Lobby) {
              gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHOW_WAITING, false, true);
            }

            this.loadScene(sceneName, function () {
              log('::LOAD GAME SCENE SUCCESSFULLY::');

              if (gfMainFSM.instance.isStateWaitExit()) {
                gfEventEmitter.instance.emit(gfBaseEvents.COMMON.REFRESH_PAGE);
              } else if (_this3.checkNeedRefresh()) {
                handleFlowOutGame();
              } else {
                gfEventEmitter.instance.emit(gfBaseEvents.COMMON.LOADING_TRANSITION);

                gfMainFSM.instance._fsm.goLoginGameRoom();
              }
            });
          } else {
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.GAME_SHOW);

            gfMainFSM.instance._fsm.goLoginGameRoom();
          }
        };

        _proto.isGameScene = function isGameScene() {
          if (gfDataStore.instance) {
            var currentScene = gfDataStore.instance.getCurrentSceneName();
            var strCompare = "Game";
            if (currentScene) return currentScene.includes(strCompare);
          }

          return false;
        };

        _proto.checkNeedRefresh = function checkNeedRefresh() {
          return !gfEventEmitter || !gfEventEmitter.instance;
        };

        _proto.onLoginGame = function onLoginGame(data) {
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.HIDE_WAITING);
          gfDataStore.instance.parseLoginGame(data);

          gfMainFSM.instance._fsm.goGameRoom();
        };

        _proto.onSystemMessage = function onSystemMessage(data) {
          var Code = data.Code,
              message = data.message;

          if (Code == gfNetworkGameEvent.MSG_CODE.NO_MONEY_LOBBY) {
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.HIDE_WAITING, true);
            gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_PROMPT, gfNetworkGameEvent.MSG_CODE.NO_MONEY_LOBBY);
          } else if (Code == gfNetworkGameEvent.MSG_CODE.NO_MONEY_IN_GAME) {
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.HIDE_WAITING);
            gfEventEmitter.instance.emit(gfBaseEvents.PLAYER_LAYER.SHOW_POPUP_NO_MONEY);
          } else if (Code == gfNetworkGameEvent.MSG_CODE.SERVER_MAINTAIN) {
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.HIDE_WAITING);
            gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_PROMPT, gfNetworkGameEvent.MSG_CODE.SERVER_MAINTAIN);
          } else if (Code > 0) {
            if (Code == gfNetworkGameEvent.MSG_CODE.CANT_FIND_ROOM) {
              gfEventEmitter.instance.emit(gfBaseEvents.COMMON.HIDE_WAITING);
            }

            gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_PROMPT, data);
          } else if (message) {
            gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_PROMPT, message);
          }
        };

        _proto.onUpdateLobbyWallet = function onUpdateLobbyWallet(data) {
          var newWallet = parseInt(data.Wallet);
          gfDataStore.instance.setSelfInfo({
            Wallet: newWallet
          });
          gfEventEmitter.instance.emit(gfBaseEvents.LOBBY_LAYER.UPDATE_LOBBY_WALLET, newWallet);
        };

        _proto.onGetBotSetting = function onGetBotSetting(data) {
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.UPDATE_BOT_SETTING, data);
        };

        _proto.sendGetBotSetting = function sendGetBotSetting(roomKind) {
          gfNetworkParser.instance.getBotSetting(roomKind);
        };

        _proto.sendSetBotSetting = function sendSetBotSetting(data) {
          var arrFkd = data.arrFkd,
              duration = data.duration,
              roomKind = data.roomKind;
          gfNetworkParser.instance.setBotSetting(arrFkd, duration, roomKind);
        } // sendStopBot() {
        //     NetworkParser.instance.stopBot();
        // }
        // {"DeskStation":0,"Angle":29.43551555743798,"BulletMultiple":1000,"LockedFishID":0}
        ;

        _proto.onUserFire = function onUserFire(data) {
          if (data.DeskStation == gfDataStore.instance.getSelfDeskStation()) return;
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.ON_OTHER_PLAYER_FIRE, data);
        };

        _proto.onActiveFreezeGun = function onActiveFreezeGun(data) {
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.ON_ACTIVE_FREEZE_GUN, data);
        };

        _proto.onStopFreezeGun = function onStopFreezeGun(data) {
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.ON_STOP_FREEZE_GUN, data);
        };

        _proto.onUpdateListItem = function onUpdateListItem(data) {
          for (var i = 0; i < data.listItem.length; i++) {
            gfDataStore.instance.setListItemSkillByData(data.listItem[i]);
          }

          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.UPDATE_LIST_ITEM);
        };

        _proto.onCreateListFish = function onCreateListFish(data) {
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.CREATE_FISH, data);
        };

        _proto.onCatchFish = function onCatchFish(data) {
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.CATCH_FISH, data);
        };

        _proto.onCatchFishSkill = function onCatchFishSkill(data) {
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.CATCH_FISH_BY_SKILL, data);
        };

        _proto.onFishFreeze = function onFishFreeze(data) {
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.FREEZE_FISH, data);
        };

        _proto.onCreateFishGroup = function onCreateFishGroup(data) {
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.CREATE_FISH_GROUP, data);
          data.isFishGroupToNormal = false;
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.GAME_CHANGE_ROUND, data);
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.FISH_LOG, gfBaseConfig.instance.FISH_LOG_CONFIG.FISH_GROUP + " - " + data.ParadeKind);
        };

        _proto.onDataJoinRoom = function onDataJoinRoom(data) {
          log("onDataJoinRoom", data);
        };

        _proto.onListUserOnBoard = function onListUserOnBoard(data) {
          if (this._isGameHide) {
            this.onHideGame();
            return;
          }

          gfDataStore.instance.updateDeltaTime(data.ServerTime);

          if (gfDataStore.instance && !gfDataStore.instance.isAutoPaused()) {
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.PAUSE_AUTO_FIRE);
          }

          if (data.EventInfo) {
            console.log('Game Event!');
            gfEventEmitter.instance.emit(gfBaseEvents.EVENT.UPDATE_EVENT_STATUS, data.EventInfo);
          }

          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.ON_ENTER_GAME_ROOM);

          if (data.RoomData) {
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.UPDATE_ROOM_DATA, data.RoomData); // PopupController.instance.onJoinGame();
          }

          if (data.ListUser) {
            gfDataStore.instance.setSelfInfo({
              isReadyToPlay: true
            });
            gfEventEmitter.instance.emit(gfBaseEvents.PLAYER_LAYER.UPDATE_LIST_PLAYER, data.ListUser);
          }
        };

        _proto.onUpdateJackpot = function onUpdateJackpot(data) {
          gfDataStore.instance.setDataStore({
            jackpotValue: data.amount
          });
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.UPDATE_JACKPOT, data.amount);
        };

        _proto.onPlayerEnterBoard = function onPlayerEnterBoard(data) {
          gfEventEmitter.instance.emit(gfBaseEvents.PLAYER_LAYER.PLAYER_JOIN_BOARD, data);
        };

        _proto.onPlayerExitBoard = function onPlayerExitBoard(data) {
          gfEventEmitter.instance.emit(gfBaseEvents.PLAYER_LAYER.PLAYER_LEAVE_BOARD, data);

          if (data.DeskStation === gfDataStore.instance.getSelfDeskStation()) {
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.EXIT_GAME_ROOM);
            gfDataStore.instance.setSelfInfo({
              DeskId: null
            });

            gfMainFSM.instance._fsm.goLoginLobby();
          }
        };

        _proto.onPlayerUpdateWallet = function onPlayerUpdateWallet(data) {
          gfEventEmitter.instance.emit(gfBaseEvents.PLAYER_LAYER.GAME_UPDATE_WALLET, data);
        };

        _proto.onNotify = function onNotify(data) {
          if (!gfDataStore.instance.getCurrentSceneName()) return;
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHOW_NOTIFY, data);
        };

        _proto.sendActiveFreezeGun = function sendActiveFreezeGun() {
          gfNetworkParser.instance.sendActiveFreezeGun();
        };

        _proto.onGameChangeRound = function onGameChangeRound(data) {
          data.isFishGroupToNormal = true;
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.GAME_CHANGE_ROUND, data);
        } // EMIT FUNCTION
        //= ===============================
        ;

        _proto.onShowGameLayer = function onShowGameLayer(isShow) {
          if (isShow === void 0) {
            isShow = false;
          }

          if (isShow) {
            this.onShowGame();
          } else {
            this.onHideGame();
          }
        };

        _proto.onShowGame = function onShowGame() {
          if (gfEventEmitter.instance) {
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.GAME_SHOW);
          }

          this._isGameHide = false;

          if (gfDataStore.instance) {
            gfDataStore.instance.setDataStore({
              timeHide: Date.now() - this._timeHide
            });
          }

          if (gfNetworkParser.instance) {
            log("GAME SHOW");
            gfNetworkParser.instance.notifyShowGame();
          }

          director.emit("EVENT_CLIENT2_RECONNECT");
        };

        _proto.onHideGame = function onHideGame() {
          if (gfDataStore.instance) {
            gfDataStore.instance.setSelfInfo({
              isReadyToPlay: false
            });
          }

          this._isGameHide = true;
          this._timeHide = Date.now();

          if (gfEventEmitter.instance) {
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.GAME_HIDE);
          }

          if (gfDataStore.instance && !gfDataStore.instance.isAutoPaused()) {
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.PAUSE_AUTO_FIRE);
          }

          if (gfNetworkParser.instance) {
            log("GAME HIDE");
            gfNetworkParser.instance.sendIdleMessage();
          }
        };

        _proto.removeCurrentScene = function removeCurrentScene() {
          var currentNode = gfBaseConfig.instance.MainGameNode.children[1];
          currentNode.removeFromParent();
          var isLoadingScene = !currentNode.getComponent(gfLayerComponent);
          log('destroy: ' + currentNode.name);
          currentNode.destroy();

          if (isLoadingScene) {
            gfAssetBundle.instance.releaseLoadingAssets();
          }
        };

        _proto.loadScene = function loadScene(sceneName, callback) {
          var _this4 = this;

          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.CLOSE_SCENE);

          if (gfBaseConfig.instance.LoadGameByPrefab) {
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.BEFORE_LOAD_SCENE);
            var newNode = instantiate(gfBaseConfig.instance.ScenePrefabs[sceneName]);

            if (newNode) {
              var mainComponent = newNode.getComponent(gfLayerComponent);

              var createSceneCallback = function createSceneCallback() {
                mainComponent.setStartCallback(callback);
                newNode.parent = gfBaseConfig.instance.MainGameNode;
                newNode.setSiblingIndex(0);

                _this4.removeCurrentScene();
              };

              if (!mainComponent.isLobbyLayer) {
                if (gfDataStore.instance.getCurrentRoom() === gfBaseConfig.instance.RoomKind.VIP) {
                  gfAssetBundle.instance.loadVipRoomAssets(createSceneCallback);
                } else {
                  gfAssetBundle.instance.releaseVipRoomAssets();
                }
              }

              if (mainComponent.isLobbyLayer || gfDataStore.instance.getCurrentRoom() === gfBaseConfig.instance.RoomKind.Normal) {
                createSceneCallback();
              }
            } else {
              warn('Fail to run scene ' + sceneName);
              handleFlowOutGame();
            }
          } else {
            director.loadScene(sceneName, function (err) {
              if (err) {
                warn(err.message, err.stack);
                handleFlowOutGame();
              } else {
                _this4._isGameHide = false;

                if (callback && typeof callback === 'function') {
                  var _Emitter$instance4;

                  (_Emitter$instance4 = gfEventEmitter.instance) == null ? void 0 : _Emitter$instance4.emit(gfBaseEvents.COMMON.SCENE_LOAD_DONE);
                  callback();
                }
              }
            });
          }
        };

        _proto.refreshPage = function refreshPage() {
          if (gfMainFSM.instance.isStateLoadGame()) {
            gfMainFSM.instance._fsm.goWaitExit();

            return;
          }

          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHOW_WAITING);
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.STOP_ALL_AUDIO);
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.BLOCK_ALL_BUTTON_WHEN_REFRESH);

          if (gfDataStore.instance.getCurrentSceneName() === gfBaseConfig.instance.SceneName.Game) {
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.EXIT_GAME_ROOM);
          }

          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.EXIT_GAME);
          gfNetworkParser.instance.cleanup(); // Todo: Stop all sound

          gfMainFSM.instance._fsm.goExitGame();

          this.destroy();
        };

        _proto.destroy = function destroy() {
          gfOverrideEngine.instance.restoreToDefaults();
          removeEvents(this);
          removeCursorInHtml();
          game.off(Game.EVENT_HIDE, this._onHideGameBinding);
          game.off(Game.EVENT_SHOW, this._onShowGameBinding);
          director.off('LOGGED_IN_OTHER_DEVICE', this.handleDuplicatedLogin, this);
          handleCloseGameIframe();
        };

        _proto.sendExitGameServer = function sendExitGameServer() {
          gfNetworkParser.instance.sendExitGameServer();
        };

        _proto.connectMaster = function connectMaster() {
          gfNetworkParser.instance.connectMaster(gfBaseConfig.instance.IPMaster, gfBaseConfig.instance.token4Master);
        };

        _proto.connectGame = function connectGame() {
          gfNetworkParser.instance.connectGame(gfBaseConfig.instance.IPGame, gfBaseConfig.instance.token4Game);
        };

        _proto.sendGetRoomInfo = function sendGetRoomInfo(roomKind) {
          gfNetworkParser.instance.sendGetInfoGameRoom(roomKind);
        };

        _proto.sendGunFire = function sendGunFire(data) {
          gfNetworkParser.instance.sendGunFire(data);
        };

        _proto.sendFireLaser = function sendFireLaser(data) {
          if (gfDataStore.instance.getIsReadyToPlay()) {
            gfNetworkParser.instance.sendCatchFishSkill(data);
          }
        };

        _proto.sendFireDrill = function sendFireDrill(data) {
          gfNetworkParser.instance.sendCatchFishSkill(data);
        };

        _proto.bulletCollideFish = function bulletCollideFish(data) {
          if (data.isMe) {
            gfNetworkParser.instance.sendCatchFish(data.FishID, data.BulletMultiple, data.BulletID, data.FireType);
          }
        };

        _proto.onDragonStateEnd = function onDragonStateEnd(data) {
          gfEventEmitter.instance.emit(gfBaseEvents.DRAGON.ON_END, data);
        };

        _proto.onDragonBallDropped = function onDragonBallDropped(data) {
          gfEventEmitter.instance.emit(gfBaseEvents.DRAGON.ON_BALL_DROPPED, data);
        };

        _proto.onDragonWarning = function onDragonWarning() {
          gfEventEmitter.instance.emit(gfBaseEvents.DRAGON.WARNING);
        };

        _proto.onDestroy = function onDestroy() {
          director.off('LOGGED_IN_OTHER_DEVICE', this.handleDuplicatedLogin, this);
          this.refreshPage();
        };

        _proto.onGameKick = function onGameKick() {
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_PROMPT, gfNetworkGameEvent.MSG_CODE.NO_ACTION); // Emitter.instance.emit(EventCode.COMMON.GO_LOBBY);
        };

        _proto.sendGetEventInfo = function sendGetEventInfo() {
          if (gfDataStore.instance.getCurrentSceneName() === gfBaseConfig.instance.SceneName.Lobby) {
            gfNetworkParser.instance.sendGetLobbyEventInfo();
          } else {
            console.warn('Invalid scene');
          }
        };

        _proto.onUpdateEventStatus = function onUpdateEventStatus(data) {
          gfEventEmitter.instance.emit(gfBaseEvents.EVENT.UPDATE_EVENT_STATUS, data);
        };

        _proto.onUpdateEventTray = function onUpdateEventTray(data) {
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.UPDATE_EVENT_TRAY, data);
        };

        _proto.getGameSceneName = function getGameSceneName() {
          if (gfDataStore.instance && gfBaseConfig.instance) {
            if (gfBaseConfig.instance.LOAD_DYNAMIC_ASSET) {
              var prefix = "Game";
              var currentRoom = gfDataStore.instance.getCurrentRoom();
              var prefixCurrentRoom = prefix + currentRoom.toString();
              return gfBaseConfig.instance.SceneName[prefixCurrentRoom];
            } else {
              return gfBaseConfig.instance.SceneName.Game;
            }
          }

          return null;
        };

        return gfMainController;
      }());
      gfMainController.instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfMainFSM.ts", ['cc', './gfUtilities.ts', './gfBaseEvents.ts', './gfNetworkParser.ts', './gfEventEmitter.ts', './gfBaseConfig.ts', './gfDataStore.ts', './gfFishManager.ts', './gfLocalize.ts', './gfPoolManager.ts', './state-machine.min.mjs_cjs=&original=.js', './gfReferenceManager.ts', './state-machine.min.js'], function (exports) {
  'use strict';

  var cclegacy, warn, showFullScreenButton, gfBaseEvents, gfNetworkParser, gfEventEmitter, gfBaseConfig, gfDataStore, gfFishManager, gfLocalize, gfPoolManager, gfReferenceManager, _cjsExports;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      warn = module.warn;
    }, function (module) {
      showFullScreenButton = module.showFullScreenButton;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfNetworkParser = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfFishManager = module.default;
    }, function (module) {
      gfLocalize = module.default;
    }, function (module) {
      gfPoolManager = module.default;
    }, null, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f16aegHwhlABYtKLVhZWvKi", "gfMainFSM", undefined);

      var TRANSITION = {
        GO_LOGIN_LOBBY: 'goLoginLobby',
        GO_LOBBY: 'goLobby',
        GO_LOGIN_GAME_ROOM: 'goLoginGameRoom',
        GO_GAME_ROOM: 'goGameRoom',
        GO_EXIT_GAME: 'goExitGame',
        GO_LOAD_GAME: 'goLoadGame',
        GO_WAIT_EXIT: "goWaitExit"
      };
      var STATE = {
        START: 'start',
        LOGIN_LOBBY: 'loginLobby',
        LOBBY: 'lobby',
        LOAD_GAME: 'loadGame',
        LOGIN_GAME_ROOM: 'loginGameRoom',
        GAME_ROOM: 'gameRoom',
        WAIT_EXIT: 'waitExit',
        EXIT_GAME: 'exitGame'
      };
      var gfMainFSM = exports('default', /*#__PURE__*/function () {
        function gfMainFSM() {
          this._fsm = void 0;
          gfMainFSM.instance = this;
          this._fsm = null;
          this.initStateMachine();
          this.initEvents();
        }

        var _proto = gfMainFSM.prototype;

        _proto.initEvents = function initEvents() {};

        _proto.initStateMachine = function initStateMachine() {
          this._fsm = new _cjsExports({
            init: STATE.START,
            transitions: [{
              name: TRANSITION.GO_LOGIN_LOBBY,
              from: STATE.START,
              to: STATE.LOGIN_LOBBY
            }, {
              name: TRANSITION.GO_LOGIN_LOBBY,
              from: STATE.GAME_ROOM,
              to: STATE.LOGIN_LOBBY
            }, {
              name: TRANSITION.GO_LOGIN_LOBBY,
              from: STATE.LOGIN_GAME_ROOM,
              to: STATE.LOGIN_LOBBY
            }, {
              name: TRANSITION.GO_LOGIN_LOBBY,
              from: STATE.LOBBY,
              to: STATE.LOGIN_LOBBY
            }, {
              name: TRANSITION.GO_LOBBY,
              from: STATE.LOGIN_LOBBY,
              to: STATE.LOBBY
            }, {
              name: TRANSITION.GO_LOAD_GAME,
              from: STATE.LOBBY,
              to: STATE.LOAD_GAME
            }, {
              name: TRANSITION.GO_LOAD_GAME,
              from: STATE.LOGIN_LOBBY,
              to: STATE.LOAD_GAME
            }, {
              name: TRANSITION.GO_LOGIN_GAME_ROOM,
              from: STATE.LOAD_GAME,
              to: STATE.LOGIN_GAME_ROOM
            }, {
              name: TRANSITION.GO_LOGIN_GAME_ROOM,
              from: STATE.LOGIN_LOBBY,
              to: STATE.LOGIN_GAME_ROOM
            }, {
              name: TRANSITION.GO_GAME_ROOM,
              from: STATE.LOGIN_GAME_ROOM,
              to: STATE.GAME_ROOM
            }, {
              name: TRANSITION.GO_GAME_ROOM,
              from: STATE.GAME_ROOM,
              to: STATE.GAME_ROOM
            }, {
              name: TRANSITION.GO_EXIT_GAME,
              from: "*",
              to: STATE.EXIT_GAME
            }, {
              name: TRANSITION.GO_WAIT_EXIT,
              from: STATE.LOAD_GAME,
              to: STATE.WAIT_EXIT
            }],
            methods: {
              onLoginLobby: this.onLoginLobby.bind(this),
              onLobby: this.onLobby.bind(this),
              onLoginGameRoom: this.onLoginGameRoom.bind(this),
              onGameRoom: this.onGameRoom.bind(this),
              onLeaveGameRoom: this.onLeaveGameRoom.bind(this),
              onExitGame: this.onExitGame.bind(this),
              onInvalidTransition: function onInvalidTransition(transition, from) {
                warn("Transition", transition, "from", from, "is not allowed");
              },
              onTransition: function onTransition() {// cc.warn("From ", lifecycle.from, " to ", lifecycle.to);
              }
            }
          });
        };

        _proto.onLoginLobby = function onLoginLobby() {
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.CONNECT_MASTER);
        };

        _proto.onLobby = function onLobby() {
          gfDataStore.instance.clearSelfInfo();
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.HIDE_WAITING);
          gfEventEmitter.instance.emit(gfBaseEvents.LOBBY_LAYER.UPDATE_LOBBY_INFO); // Emitter.instance.emit(EventCode.COMMON.UPDATE_JACKPOT, DataStore.instance.getJackpotValue());

          showFullScreenButton(true);
        };

        _proto.onLoginGameRoom = function onLoginGameRoom() {
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.CONNECT_GAME);
        };

        _proto.onGameRoom = function onGameRoom() {
          showFullScreenButton(false);
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.UPDATE_LIST_ITEM);
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.UPDATE_TABLE_ID); // Emitter.instance.emit(EventCode.GAME_LAYER.UPDATE_JACKPOT_INFO);
        };

        _proto.onLeaveGameRoom = function onLeaveGameRoom() {// GameInfo.instance.clearGameInfo();
          // if (!GameInfo.instance.listZombieOutRoom)
          //     Emitter.instance.emit(EventCode.COMMON.EXIT_GAME_ROOM);
        } // Exit Game to Portal
        ;

        _proto.onExitGame = function onExitGame() {
          var _Emitter$instance, _Emitter$instance2, _FishManager$instance, _Localize$instance, _NetworkParser$instan, _GameConfig$instance, _DataStore$instance, _gfReferenceManager$i, _PoolManager$instance;

          (_Emitter$instance = gfEventEmitter.instance) == null ? void 0 : _Emitter$instance.emit(gfBaseEvents.COMMON.REMOVE_PERSIST_NODE);
          (_Emitter$instance2 = gfEventEmitter.instance) == null ? void 0 : _Emitter$instance2.destroy();
          (_FishManager$instance = gfFishManager.instance) == null ? void 0 : _FishManager$instance.destroy();
          (_Localize$instance = gfLocalize.instance) == null ? void 0 : _Localize$instance.destroy();
          (_NetworkParser$instan = gfNetworkParser.instance) == null ? void 0 : _NetworkParser$instan.destroy();
          (_GameConfig$instance = gfBaseConfig.instance) == null ? void 0 : _GameConfig$instance.destroy();
          (_DataStore$instance = gfDataStore.instance) == null ? void 0 : _DataStore$instance.destroy();
          (_gfReferenceManager$i = gfReferenceManager.instance) == null ? void 0 : _gfReferenceManager$i.destroy();
          (_PoolManager$instance = gfPoolManager.instance) == null ? void 0 : _PoolManager$instance.destroy();
        };

        _proto.destroy = function destroy() {
          gfMainFSM.instance = null;
        };

        _proto.isStateLobby = function isStateLobby() {
          return this._fsm.state === STATE.LOBBY;
        };

        _proto.isStateLoadGame = function isStateLoadGame() {
          return this._fsm.state === STATE.LOAD_GAME;
        };

        _proto.isStateLoginGameRoom = function isStateLoginGameRoom() {
          return this._fsm.state === STATE.LOGIN_GAME_ROOM;
        };

        _proto.isStateLoginLobby = function isStateLoginLobby() {
          return this._fsm.state === STATE.LOGIN_LOBBY;
        };

        _proto.isStateWaitExit = function isStateWaitExit() {
          return this._fsm.state === STATE.WAIT_EXIT;
        };

        _proto.isStateExit = function isStateExit() {
          return this._fsm.state === STATE.EXIT_GAME;
        };

        _proto.isStateGameRoom = function isStateGameRoom() {
          return this._fsm.state === STATE.GAME_ROOM;
        };

        return gfMainFSM;
      }());
      gfMainFSM.instance = void 0;
      gfMainFSM.instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfMiniBossGuardFish.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfSpineFish.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, gfSpineFish;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfSpineFish = module.gfSpineFish;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "2f4d6Q+KhhGpY9QpH/JDGe3", "gfMiniBossGuardFish", undefined);

      var ccclass = _decorator.ccclass;
      var gfMiniBossGuardFish = exports('gfMiniBossGuardFish', (_dec = ccclass('gfMiniBossGuardFish'), _dec(_class = /*#__PURE__*/function (_gfSpineFish) {
        _inheritsLoose(gfMiniBossGuardFish, _gfSpineFish);

        function gfMiniBossGuardFish() {
          return _gfSpineFish.apply(this, arguments) || this;
        }

        return gfMiniBossGuardFish;
      }(gfSpineFish)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfMoveByThreePoints.ts", ['cc', './gfUtilities.ts'], function (exports) {
  'use strict';

  var tween, cclegacy, v2, log, v2Distance;
  return {
    setters: [function (module) {
      tween = module.tween;
      cclegacy = module.cclegacy;
      v2 = module.v2;
      log = module.log;
    }, function (module) {
      v2Distance = module.v2Distance;
    }],
    execute: function () {
      exports('default', gfMoveByThreePoints);

      cclegacy._RF.push({}, "e57323vYdNGf6/kEdRSt6UO", "gfMoveByThreePoints", undefined);

      var _gfMoveByThreePoints = /*#__PURE__*/function () {
        function _gfMoveByThreePoints(data) {
          this.totalPoints = void 0;
          this._configPoints = void 0;
          this._duration = void 0;
          this.arcLengths = void 0;
          this._timeSpent = void 0;
          this.realDuration = void 0;
          var speed = data.speed,
              points = data.points,
              timeSpent = data.timeSpent,
              isResume = data.isResume;
          this.totalPoints = 100;
          var durationPerUnit = 1 / this.totalPoints;
          this._configPoints = points;
          this._duration = 0;
          this.arcLengths = new Array(this.totalPoints + 1);
          this.arcLengths[0] = 0;
          var lastPoint = v2(this.x(0), this.y(0));

          for (var i = 1; i <= this.totalPoints; i += 1) {
            var currentPoint = v2(this.x(i * durationPerUnit), this.y(i * durationPerUnit));
            var distance = v2Distance(lastPoint, currentPoint);
            this._duration += distance / speed;
            this.arcLengths[i] = this.arcLengths[i - 1] + distance;
            lastPoint = currentPoint;
          }

          this._timeSpent = isResume ? timeSpent : 0;
          var speedScale = isResume ? 1 : this._duration / (this._duration - timeSpent);
          this.realDuration = Math.max(0, this._duration - timeSpent);

          if (speedScale > 3) {
            log("skip create fish: speedScale-" + speedScale, speed, points, timeSpent, isResume);
            this.realDuration = 0;
          }
        }

        var _proto = _gfMoveByThreePoints.prototype;

        _proto.map = function map(u) {
          var targetLength = u * this.arcLengths[this.totalPoints];
          var low = 0,
              high = this.totalPoints,
              index = 0;

          while (low < high) {
            index = low + ((high - low) / 2 | 0);

            if (this.arcLengths[index] < targetLength) {
              low = index + 1;
            } else {
              high = index;
            }
          }

          if (this.arcLengths[index] > targetLength) {
            index--;
          }

          var lengthBefore = this.arcLengths[index];

          if (lengthBefore === targetLength) {
            return index / this.totalPoints;
          } else {
            return (index + (targetLength - lengthBefore) / (this.arcLengths[index + 1] - lengthBefore)) / this.totalPoints;
          }
        };

        _proto.x = function x(t) {
          return (1 - t) * (1 - t) * this._configPoints[0].x + 2 * (1 - t) * t * this._configPoints[1].x + t * t * this._configPoints[2].x;
        };

        _proto.y = function y(t) {
          return (1 - t) * (1 - t) * this._configPoints[0].y + 2 * (1 - t) * t * this._configPoints[1].y + t * t * this._configPoints[2].y;
        };

        _proto.mx = function mx(u) {
          return this.x(this.map(u));
        };

        _proto.my = function my(u) {
          return this.y(this.map(u));
        };

        _proto.update = function update(target, dt) {
          dt = (dt * this.realDuration + this._timeSpent) / this._duration; // dt = this._computeEaseTime(dt);

          if (target) {
            target.setPosition(this.mx(dt), this.my(dt), target.position.z);
          }
        };

        return _gfMoveByThreePoints;
      }();

      function gfMoveByThreePoints(data) {
        var action = new _gfMoveByThreePoints(data);

        if (action.realDuration == 0) {
          return tween().delay(0);
        }

        return tween().to(action.realDuration, null, {
          onUpdate: function onUpdate(target, ratio) {
            action.update(target, ratio);
          }
        });
      }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfNativeSoundPlayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './NativeSoundPlayer.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, tween, AudioSource, NativeSoundPlayer;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      tween = module.tween;
      AudioSource = module.AudioSource;
    }, function (module) {
      NativeSoundPlayer = module.NativeSoundPlayer;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "c480cwSwrFBiL1YqHGxbJPK", "gfNativeSoundPlayer", undefined);

      var ccclass = _decorator.ccclass;
      var gfNativeSoundPlayer = exports('gfNativeSoundPlayer', (_dec = ccclass('gfNativeSoundPlayer'), _dec(_class = /*#__PURE__*/function (_NativeSoundPlayer) {
        _inheritsLoose(gfNativeSoundPlayer, _NativeSoundPlayer);

        function gfNativeSoundPlayer() {
          return _NativeSoundPlayer.apply(this, arguments) || this;
        }

        var _proto = gfNativeSoundPlayer.prototype;

        _proto.playMusic = function playMusic(id, loop, volume) {
          var _this = this;

          if (loop === void 0) {
            loop = true;
          }

          _NativeSoundPlayer.prototype.playMusic.call(this, id, loop, volume);

          tween(this).delay(0).call(function () {
            if (typeof AudioSource.getAudioManager == 'function' && AudioSource.getAudioManager()) {
              var audioManager = AudioSource.getAudioManager();

              var audioInfo = audioManager._audioPlayerInfoList.find(function (audioInfo) {
                return audioInfo.audio == _this.musicAudioSource._player;
              });

              audioInfo && (audioInfo.playTime = Number.MAX_SAFE_INTEGER);
            }
          }).start();
        };

        return gfNativeSoundPlayer;
      }(NativeSoundPlayer)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfNetFX.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseConfig.ts', './gfNode.ts', './utils.ts', './gfUtilities.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, sp, gfBaseConfig, gfNode, setOpacity, SetZIndex;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfNode = module.default;
    }, function (module) {
      setOpacity = module.setOpacity;
    }, function (module) {
      SetZIndex = module.SetZIndex;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "46da2apzGJKgZIuAjhoYrDv", "gfNetFX", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfNetFX = exports('gfNetFX', (_dec = ccclass('gfNetFX'), _dec2 = property(sp.Skeleton), _dec(_class = (_class2 = /*#__PURE__*/function (_gfNode) {
        _inheritsLoose(gfNetFX, _gfNode);

        function gfNetFX() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfNode.call.apply(_gfNode, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "spine", _descriptor, _assertThisInitialized(_this));

          _this._animationName = 'player';
          _this.zIndex = void 0;
          return _this;
        }

        var _proto = gfNetFX.prototype;

        _proto.onLoad = function onLoad() {
          this.spine.setAnimation(0, this._animationName, false);
        };

        _proto.initAssets = function initAssets(config) {
          var _this2 = this;

          this.spine.skeletonData = config.asset;

          if (config.kind == gfBaseConfig.instance.NetFx.IceNet) {
            this._animationName = 'NoBang';
            this.zIndex = gfBaseConfig.instance.Z_INDEX.NETFX_ICE;

            if (!config.isMe) {
              setOpacity(this.node, 255 * 0.8);
              this.node.setScale(0.7, 0.7, 0.7);
            }
          } else if (config.kind == gfBaseConfig.instance.NetFx.ExplostionNet) {
            this._animationName = 'animation';
            this.zIndex = gfBaseConfig.instance.Z_INDEX.NETFX_MINIBOSS;
          } else {
            this._animationName = config.isMe ? 'player' : 'user';
            this.zIndex = gfBaseConfig.instance.Z_INDEX.NETFX;
          }

          SetZIndex(this.node, this.zIndex);
          this.spine.setAnimation(0, this._animationName, false);
          this.spine.setCompleteListener(function () {
            _this2.returnPool();
          });
        };

        return gfNetFX;
      }(gfNode), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "spine", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfNetworkEvent.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "07553cK4r1DWor7xIE5zQx7", "gfNetworkEvent", undefined); //Contain only network event for NetworkParser and Network Socket


      var gfNetworkEvent = exports('default', {
        EVENT_NETWORK_RECONNECTED: 'network-reconnected',
        EVENT_NETWORK_CONNECTED: 'network-connected',
        EVENT_NETWORK_POOR: 'network-poor',
        EVENT_NETWORK_DIE: 'network-die',
        EVENT_AUTHEN_FAIL: 'authen-fail',
        EVENT_LOGIN_IN_OTHER_DEVICE: 'login-in-other-device',
        EVENT_NO_ACTION_LONG_TIME: 'no-action-long-time',
        EVENT_NEW_MESSAGE: 'new-message',
        EVENT_NETWORK_PINGPONG: 'ping-pong',
        LIST_EVENT_QUEUE: [2014]
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfNetworkGameEvent.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "d0a92F3NhZP05vMk5t3JiSN", "gfNetworkGameEvent", undefined);

      var gfNetworkGameEvent = exports('default', {
        LOBBY_LOGIN: 1001,
        LOBBY_MESSAGE: 1002,
        LOBBY_UPDATE_MY_GOLD: 1003,
        LOBBY_KICK: 1004,
        LOBBY_UPDATE_VIP_LEVEL: 1005,
        LOBBY_GET_ROOM_INFO: 1006,
        LOBBY_JACKPOT: 1007,
        LOBBY_NOTIFY: 1008,
        LOBBY_AUTO_JOIN_GAME: 1009,
        LOBBY_JOIN_ROOM_BY_INVITE: 1998,
        LOBBY_PING_PONG: 1999,
        LOBBY_UPDATE_EVENT_STATUS: 1010,
        LOBBY_EVENT_UPDATE_INFO: 1071,
        LOBBY_EVENT_SESSION_CHANGED: 1070,
        GAME_LOGIN: 2001,
        GAME_LISTUSER_BOARD: 2002,
        GAME_PLAYER_ENTER_BOARD: 2003,
        GAME_MESSAGE: 2029,
        GAME_USER_FIRE: 2005,
        GAME_CREATE_FISH: 2006,
        GAME_CATCH_FISH: 2007,
        GAME_USER_EXIT: 2008,
        GAME_CREATE_FISH_GROUP: 2009,
        GAME_FIRE_SKILL: 2011,
        GAME_UPDATE_SKILL: 2012,
        GAME_UPDATE_CLEAR_FISH: 2013,
        GAME_CATCH_FISH_SKILL: 2014,
        GAME_CREATE_FISH_BOSS: 2015,
        GAME_CREATE_FISH_CROW: 2016,
        GAME_CATCH_RED_FISH: 2017,
        GAME_UPDATE_HP_FISH_BOSS: 2018,
        GAME_KICK: 2019,
        GAME_UPDATE_BOSS_DIE: 2020,
        GAME_CREATE_ENV_OBJECT: 2021,
        GAME_CREATE_FISH_GROUP_NEW: 2022,
        GAME_DROP_ITEM: 2023,
        GAME_PLAY_GLOBAL_FX: 2024,
        GAME_STOP_GLOBAL_FX: 2025,
        GAME_CHAT_EMOTICON: 2027,
        GAME_LIST_ITEM: 2030,
        //@TODO Freezeskill - should not in base
        // GAME_SELECT_ITEM: 2031,
        GAME_UPDATE_JACKPOT: 2033,
        GAME_WIN_JACKPOT: 2034,
        GAME_ROOM_DATA: 2035,
        GAME_NOTIFY: 2036,
        GAME_UPDATE_WALLET: 2037,
        GAME_CHANGE_ROUND: 2028,
        GAME_LIST_FISH_ON_SHOW: 2038,
        GAME_UPDATE_VIP_LEVEL: 2039,
        GAME_PING_PONG: 2999,
        // GAME_DRAGON_SWIM_OUT: 2041,
        GAME_DRAGON_BALL_DROPPED: 2042,
        GAME_DRAGON_END: 2043,
        GAME_DRAGON_WARNING: 2044,
        GAME_ACTIVE_FREEZE_GUN: 2045,
        GAME_STOP_FREEZE_GUN: 2046,
        GAME_FISH_FREEZE: 2047,
        GAME_GET_BOT_SETTING: 2048,
        GAME_SET_BOT_SETTING: 2049,
        GAME_STOP_BOT: 2050,
        GAME_FREEZE_GUN_STATE: 2051,
        GAME_IDLE_MESSAGE: 2052,
        GAME_END_FIRE_STORM: 2053,
        GAME_FIRE_STORM_CATCH_FISH: 2054,
        GAME_FIRE_STORM_DROP_ITEM: 2055,
        GAME_FIRE_STORM_ADD_BULLET: 2056,
        //missing bullet firestorm => re-add
        GAME_EVENT_SESSION_CHANGED: 2070,
        GAME_GET_EVENT_STATUS: 2071,
        GAME_JOIN_DESK: 3001,
        GAME_JOIN_DESK_BUT_WALLET_ERROR: 2500,
        GAME_ON_CLOSE_TAB: 2800,
        GAME_PLAYER_UPDATE_POSITION: 2056,
        GAME_WARNING_DOWN_STREAK_INFO: 2061,
        GAME_ENEMY_FIRE_BULLET: 2060,
        GAME_PLAYER_DIE: 2058,
        GAME_PLAYER_UPDATE_SHIELD: 2057,
        GAME_PLAYER_SEND_PIECE_ENERGY: 2059,
        GAME_PLAYER_IDLE_STATE: 2062,
        GAME_UPDATE_STREAK_INFO: 2063,
        SEND_EVENT: {
          SEND_GET_INFO_GAME_ROOM: "SEND_GET_INFO_GAME_ROOM",
          SEND_EXIT_GAME_SERVER: "SEND_EXIT_GAME_SERVER",
          SEND_IDLE_MESSAGE: "SEND_IDLE_MESSAGE",
          SEND_GET_LIST_LIST_FISH_ON_SHOW: "SEND_GET_LIST_LIST_FISH_ON_SHOW",
          SEND_GUN_FIRE: "SEND_GUN_FIRE",
          SEND_CATCH_FISH: "SEND_CATCH_FISH"
        },
        NETWORK_EVENT: 'NETWORK_EVENT',
        NETWORK_WAITING: 'NETWORK_WAITING',
        NETWORK_CONNECT: 'NETWORK_CONNECT',
        NETWORK_ERROR: 'NETWORK_ERROR',
        NETWORK_CLOSE: 'NETWORK_CLOSE',
        NETWORK_POOR: 'NETWORK_POOR',
        NETWORK_DIE: 'NETWORK_DIE',
        AUTHEN_FAIL: 'AUTHEN_FAIL',
        LOGIN_IN_OTHER_DEVICE: 'LOGIN_IN_OTHER_DEVICE',
        NETWORK_RECONNECT: 'OUT_GAME',
        PINGPONG: 'PINGPONG',
        MSG_CODE: {
          USER_LOGGED: 101,
          NOT_ENOUGH_MONEY: 102,
          CANT_FIND_ROOM: 103,
          DUPLICATE_LOGIN: 104,
          NETWORK_ERROR: 105,
          NO_MONEY_LOBBY: 106,
          NO_PROMOTION_MONEY_LOBBY: 107,
          IG_CANT_FIND_ROOM: 201,
          IN_OTHER_GAME: 202,
          ROOM_FULL: 203,
          NO_MONEY2: 204,
          NO_MONEY_IN_GAME: 205,
          IG_DUPLICATE_LOGIN: 206,
          NO_ACTION: 207,
          CHARGE_MONEY: 208,
          OWN_LASER: 209,
          NO_MONEY_IN_GAME_ONE_WALLET: 210,
          NO_MONEY_IN_LOBBY_MULTI_WALLET: 211,
          WALLET_ERROR: 300,
          OWN_DRILL: 301,
          OWN_FIRESTORM: 302,
          ACCOUNT_OUT_OF_MONEY_PROMOTION: 303,
          SERVER_MAINTAIN: 503,
          WAITING_TIMEOUT: -1
        }
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfNetworkKeyMap.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "d9ab0PXya5JDbkwJ9rRO9JX", "gfNetworkKeyMap", undefined);

      var gfNetworkKeyMap = exports('default', {
        iuig: "isUserInGame",
        uid: "UserID",
        nn: "Username",
        wl: "Wallet",
        lvl: "Level",
        bc: "BetConfig",
        av: "Avatar",
        code: "Code",
        aPar: "ArrayParam",
        fs: "FireSpeed",
        tgt: "TargetTime",
        isErr: "IsError",
        kind: "KindID",
        wlLim: "GoldLimit",
        url: "Server",
        tok: "Token",
        am: "amount",
        typ: "type",
        msg: "message",
        n: "Username",
        staId: "DeskStation",
        dId: "DeskId",
        bmul: "BulletMultiple",
        iInf: "itemInfo",
        pc: "percentGetItem",
        lItm: "listItem",
        id: "ID",
        skInf: "skillInfo",
        sid: "SkillID",
        x: "PosX",
        y: "PosY",
        dgbtyp: "Balls",
        ag: "Angle",
        lfid: "LockedFishID",
        fid: "FishID",
        grw: "GoldReward",
        fkd: "FishKind",
        lf: "ListFish",
        lpf: "ListParadeFish",
        pkd: "ParadeKind",
        pttl: "TimeBuildFishParade",
        eid: "EffectID",
        ttr: "TotalReward",
        inc: "InitCount",
        ttl: "timeToExpire",
        pos: "Position",
        mulier: "multiplier",
        isf: "IsForce",
        stt: "State",
        cid: "ChatID",
        r: "Result",
        w: "wonJackpot",
        wam: "WinAmount",
        idx: "IndexInGroup",
        rcode: "roomCode",
        data: "data",
        dgbTy: "Balls",
        bid: "BulletID",
        mult: "Multiple",
        skd: "SceneKind",
        isa: "IsActive",
        bt: "BuildTick",
        tr: "TimeRemain",
        tf: "TimeFreeze",
        lu: "ListUser",
        rd: "RoomData",
        trf: "IceTimeRemain",
        etf: "TimeRemainFreeze",
        rk: "RoomKind",
        ip: "PathID",
        "if": "FormationID",
        prin: "ParenInfo",
        sam: "LaserMultiple",
        mnbi: "MiniBossInfo",
        iid: "ItemID",
        lbtr: "ListBuildTickRecover",
        st: "ServerTime",
        bf: "BonusFish",
        idB: "BulletID",
        tarf: "TargetFish",
        //event
        evi: "EventInfo",
        evtd: "EventDetail",
        eet: "EventEndTime",
        evst: "EventStartTime",
        lv: "ItemLevel",
        itc: "itemCount",
        bn: "bonus",
        gss: "GhostShipState",
        sput: "GhostShipSpeedUpBuildtick",
        //Godzilla
        gzls: "GodzillaState",
        tw: "TypeWin",
        //3D
        bti: "BulletType",
        cf: "ClearFish",
        lg: "ListGroup",
        cg: "CountGroup",
        tgr: "TypeGroup",
        gid: "GroupID",
        sp: "StartPos",
        idp: "PathID",
        pid: "PathID",
        ifs: "IDStart",
        cfr: "CountFish",
        tdl: "DelayTimeStart",
        dtf: "DelayTimeNextFish",
        sc: "Scale",
        as: "AngleStart",
        cl: "CountLine",
        abu: "BulletAmount",
        tef: "SkillDuration",
        tad: "BonusTime",
        fwfs: "RewardMultiple",
        ipf: "FishGroup",
        ldf: "ListFishDead",
        clp: "CountLoop",
        dlt: "DelayLoopTime",
        dsi: "DrillResumeInfo",
        ifot: "ListNormalFish",
        flf: "ListFishFreeze",
        lfk: "ListFishKind",
        scf: "ScaleFish",
        ph: "BossPhase",
        lsg: "ListGiftBoss",
        tcp: "TimeChangePhase",
        clo: "Color",
        //poison flower
        ilp: "isLastPhase",
        //Drill
        psks: "performingSkills",
        //chips
        cps: "chips",
        itn: "itemChipID",
        dmgl: "damageLevel",
        mitd: "maxItemID",
        ipm: "IsPromotionMoney",
        pwl: "PromotionWallet",
        fty: "FireType",
        mbl: "MissingBullet",
        sfid: "SpecialFishID",
        hpw: "HasPromotionWallet",
        po: "PayOut",
        vip: "VipLevel",
        strInf: "StreakInfo",
        buc: "BulletCount",
        bk: "BulletKind",
        lp: "ListPosition",
        ssi: "SkillSpecialInfo",
        per: "Percent",
        tar: "Targets",
        tif: "TimeFires",
        eoid: "EnvObjectID",
        eokd: "EnvObjectKind",
        pp: "PlayerPosition",
        lenv: "ListEnvObject",
        crn: "Corner",
        si: "SkillInfo",
        shi: "Shield",
        pts: "Points",
        ssms: "SkillSpecialMilestone",
        env: "environment",
        sst: "SessionTime",
        ct: "CurrentTime",
        mt: "MaxTime",
        sdr: "StreakDrainDuration",
        bdr: "BonusDrainDuration",
        strt: "StartDrainTime",
        rmt: "RemainTime",
        prs: "Process",
        tt: "Total",
        sindx: "SessionIndex",
        srtm: "SessionRemainTime",
        sttrm: "StepRemainTime",
        tts: "TotalStep",
        stindx: "StepIndex",
        ms: "MissionStatus",
        rwd: "RewardData",
        ckd: "ChestKind",
        ife: "IsFishEvent",
        evd: "EventData",
        binf: "BoomInfo",
        mb: "MinBet",
        bp: "BonusPercent",
        ite: "ItemEnergy"
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfNetworkParser.ts", ['cc', './gfNetworkEvent.ts', './gfNetworkKeyMap.ts', './gfNetworkGameEvent.ts', './gfNetworkSocket.ts'], function (exports) {
  'use strict';

  var cclegacy, gfNetworkEvent, gfNetworkKeyMap, gfNetworkGameEvent, gfNetworkSocket;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      gfNetworkEvent = module.default;
    }, function (module) {
      gfNetworkKeyMap = module.default;
    }, function (module) {
      gfNetworkGameEvent = module.default;
    }, function (module) {
      gfNetworkSocket = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "009ce5Y0f9PDIyDMIJdXxSo", "gfNetworkParser", undefined);

      var gfNetworkParser = exports('default', /*#__PURE__*/function () {
        function gfNetworkParser() {
          this.logtag = void 0;
          this._emitter = void 0;
          this.socket = void 0;
          gfNetworkParser.instance = this;
          this.logtag = "::gfNetworkParser::";
          this._emitter = new globalThis.EventEmitter();
          this.socket = new gfNetworkSocket({
            pingInterval: 2000,
            pingTimeout: 3000,
            reconnectionAttempts: 999999,
            reconnectionAttemptsWarning: 1,
            reconnectionAttemptsDie: 5,
            reconnectionDelay: 2000
          });

          this._handleSocketEvent();
        }
        /* Common function. */


        var _proto = gfNetworkParser.prototype;

        _proto.executeCommand = function executeCommand(commandPayload) {
          if (this.socket == null) {
            return;
          }

          this.socket.send(commandPayload);
        }
        /* End Common function. */
        ;

        _proto.onEnterGame = function onEnterGame() {};

        _proto.onLeaveGame = function onLeaveGame() {};

        _proto.onEnterDie = function onEnterDie(reason) {
          this.close(reason);
          this.cleanup();
        };

        _proto.registerEvent = function registerEvent(event, listener) {
          this._emitter.on(event, listener);
        };

        _proto.removeEvent = function removeEvent(event, listener) {
          this._emitter.removeListener(event, listener);
        };

        _proto.connectMaster = function connectMaster(ip, token) {
          var _this = this;

          this.socket.close('connectMaster', false, function () {
            _this.socket.init(ip, encodeURIComponent(token));
          });
        };

        _proto.connectGame = function connectGame(ip, token) {
          var _this2 = this;

          this.socket.close('connectGame', false, function () {
            _this2.socket.init(ip, token);
          });
        };

        _proto.close = function close(reason) {
          this.socket.close(reason);
        };

        _proto.cleanup = function cleanup() {
          if (!this._emitter || !this.socket) return;
          this.close('QUIT GAME!!!');
          this.socket.cleanUp();
          this.socket = null;

          this._emitter.removeAllListeners();

          this._emitter = null;
        };

        _proto.parseContent = function parseContent(content, requestId) {
          var _this3 = this;

          var tmpContent;

          if (content && Array.isArray(content)) {
            tmpContent = [];

            for (var i = 0; i < content.length; ++i) {
              tmpContent[i] = this.parseContent(content[i], requestId);
            }
          } else if (content && typeof content === 'object') {
            tmpContent = {};
            Object.keys(content).forEach(function (key) {
              var newKey = gfNetworkKeyMap[key] || key;
              var newValue = content[key];

              if (Array.isArray(newValue)) {
                for (var _i = 0; _i < newValue.length; ++_i) {
                  newValue[_i] = _this3.parseContent(newValue[_i], requestId);
                }
              } else if (typeof newValue === 'object') newValue = _this3.parseContent(newValue, requestId);

              tmpContent[newKey] = newValue;
            });
          } else tmpContent = content;

          return tmpContent;
        };

        _proto._handleSocketEvent = function _handleSocketEvent() {
          var _this4 = this;

          this.socket.registerEvent(gfNetworkEvent.EVENT_NEW_MESSAGE, function (_ref) {
            var requestId = _ref.requestId,
                content = _ref.content;
            content = _this4.parseContent(content, requestId);

            _this4._emitter.emit(requestId, content);
          });
          this.socket.registerEvent(gfNetworkEvent.EVENT_NETWORK_CONNECTED, function () {
            _this4._emitter.emit(gfNetworkGameEvent.NETWORK_EVENT, {
              EventID: gfNetworkGameEvent.NETWORK_CONNECT,
              EventData: {}
            });
          });
          this.socket.registerEvent(gfNetworkEvent.EVENT_NETWORK_POOR, function () {
            _this4._emitter.emit(gfNetworkGameEvent.NETWORK_EVENT, {
              EventID: gfNetworkGameEvent.NETWORK_POOR,
              EventData: {}
            });
          });
          this.socket.registerEvent(gfNetworkEvent.EVENT_NETWORK_DIE, function () {
            _this4._emitter.emit(gfNetworkGameEvent.NETWORK_EVENT, {
              EventID: gfNetworkGameEvent.NETWORK_DIE,
              EventData: {}
            });
          });
          this.socket.registerEvent(gfNetworkEvent.EVENT_NETWORK_RECONNECTED, function () {
            _this4._emitter.emit(gfNetworkGameEvent.NETWORK_EVENT, {
              EventID: gfNetworkGameEvent.NETWORK_RECONNECT,
              EventData: {}
            });
          });
          this.socket.registerEvent(gfNetworkEvent.EVENT_AUTHEN_FAIL, function () {
            _this4._emitter.emit(gfNetworkGameEvent.NETWORK_EVENT, {
              EventID: gfNetworkGameEvent.AUTHEN_FAIL,
              EventData: {}
            });
          });
          this.socket.registerEvent(gfNetworkEvent.EVENT_NETWORK_PINGPONG, function (data) {
            _this4._emitter.emit(gfNetworkGameEvent.NETWORK_EVENT, {
              EventID: gfNetworkGameEvent.PINGPONG,
              EventData: {
                data: data
              }
            });
          });
          this.socket.registerEvent(gfNetworkEvent.EVENT_LOGIN_IN_OTHER_DEVICE, function () {
            _this4._emitter.emit(gfNetworkGameEvent.NETWORK_EVENT, {
              EventID: gfNetworkGameEvent.LOGIN_IN_OTHER_DEVICE,
              EventData: {}
            });
          });
          this.socket.registerEvent(gfNetworkEvent.EVENT_NO_ACTION_LONG_TIME, function () {
            _this4.socket.close("EVENT_NO_ACTION_LONG_TIME");

            _this4._emitter.emit(gfNetworkGameEvent.GAME_KICK);
          });
        };

        _proto.optimizeContent = function optimizeContent(content, requestId) {
          var _this5 = this;

          var tmpContent;

          if (content && Array.isArray(content)) {
            tmpContent = [];

            for (var i = 0; i < content.length; ++i) {
              tmpContent[i] = this.optimizeContent(content[i], requestId);
            }
          } else if (content && typeof content === 'object') {
            tmpContent = {};
            Object.keys(content).forEach(function (key) {
              var newKey;

              if (!Object.keys(gfNetworkKeyMap).find(function (mapkey) {
                return gfNetworkKeyMap[mapkey] === key;
              })) {
                newKey = key;
              } else newKey = Object.keys(gfNetworkKeyMap).find(function (mapkey) {
                return gfNetworkKeyMap[mapkey] === key;
              });

              var newValue = content[key];

              if (Array.isArray(newValue)) {
                for (var _i2 = 0; _i2 < newValue.length; ++_i2) {
                  newValue[_i2] = _this5.optimizeContent(newValue[_i2], requestId);
                }
              } else if (typeof newValue === 'object') newValue = _this5.optimizeContent(newValue, requestId);

              tmpContent[newKey] = newValue;
            });
          } else tmpContent = content;

          return tmpContent;
        };

        _proto._buildMessage = function _buildMessage(requestId, data) {
          if (data === void 0) {
            data = undefined;
          }

          data = this.optimizeContent(data, requestId);
          return {
            requestId: requestId,
            content: data
          };
        };

        _proto.isAvailable = function isAvailable() {
          return this.socket.isAvailable();
        } // ***************** LOBBY *****************************
        ;

        _proto.sendGetInfoGameRoom = function sendGetInfoGameRoom(roomKind) {
          var data = {
            KindID: roomKind
          };

          var message = this._buildMessage(gfNetworkGameEvent.LOBBY_GET_ROOM_INFO, data);

          this.executeCommand(message);
        } /// ********  GAME *************
        ;

        _proto.sendJoinDesk = function sendJoinDesk(deskId) {
          var data = {
            DeskId: deskId
          };

          var message = this._buildMessage(gfNetworkGameEvent.GAME_JOIN_DESK, data);

          this.executeCommand(message);
        };

        _proto.sendGunFire = function sendGunFire(data) {
          var message = this._buildMessage(gfNetworkGameEvent.GAME_USER_FIRE, data);

          this.executeCommand(message);
        };

        _proto.sendActiveFreezeGun = function sendActiveFreezeGun() {
          var message = this._buildMessage(gfNetworkGameEvent.GAME_ACTIVE_FREEZE_GUN);

          this.executeCommand(message);
        };

        _proto.sendCatchFishSkill = function sendCatchFishSkill(data) {
          var message = this._buildMessage(gfNetworkGameEvent.GAME_CATCH_FISH_SKILL, data);

          this.executeCommand(message);
        };

        _proto.sendFireSkill = function sendFireSkill(Angle, Pos) {
          var data = {};
          data.Angle = Angle;
          data.x = Pos.x;
          data.y = Pos.y;

          var message = this._buildMessage(gfNetworkGameEvent.GAME_FIRE_SKILL, data);

          this.executeCommand(message);
        };

        _proto.sendCatchFish = function sendCatchFish(FishID, Multiple, BulletID, FireType) {
          if (FireType === void 0) {
            FireType = undefined;
          }

          var data = {};
          data.FishID = FishID;
          data.Multiple = Multiple;
          data.BulletID = BulletID;
          data.FireType = FireType;

          var message = this._buildMessage(gfNetworkGameEvent.GAME_CATCH_FISH, data);

          this.executeCommand(message);
        };

        _proto.sendExitGameServer = function sendExitGameServer() {
          var message = this._buildMessage(gfNetworkGameEvent.GAME_USER_EXIT, {});

          this.executeCommand(message);
        };

        _proto.sendRegisterExit = function sendRegisterExit() {
          var message = this._buildMessage(gfNetworkGameEvent.GAME_ON_CLOSE_TAB, {});

          this.executeCommand(message);
        };

        _proto.notifyShowGame = function notifyShowGame() {
          var message = this._buildMessage(gfNetworkGameEvent.GAME_LIST_FISH_ON_SHOW, {});

          this.executeCommand(message);
        };

        _proto.sendIdleMessage = function sendIdleMessage() {
          var message = this._buildMessage(gfNetworkGameEvent.GAME_IDLE_MESSAGE, {});

          this.executeCommand(message);
        };

        _proto.getBotSetting = function getBotSetting(roomKind) {
          // cc.log('getBotSetting');
          var message = this._buildMessage(gfNetworkGameEvent.GAME_GET_BOT_SETTING, {
            RoomKind: roomKind
          });

          this.executeCommand(message);
        };

        _proto.setBotSetting = function setBotSetting(arrFkd, duration, roomKind) {
          // cc.log('setBotSetting');
          var data = {
            FishKind: arrFkd,
            timeToExpire: duration,
            RoomKind: roomKind
          };

          var message = this._buildMessage(gfNetworkGameEvent.GAME_SET_BOT_SETTING, data);

          this.executeCommand(message);
        };

        _proto.sendGetLobbyEventInfo = function sendGetLobbyEventInfo() {
          var message = this._buildMessage(gfNetworkGameEvent.LOBBY_UPDATE_EVENT_STATUS);

          this.executeCommand(message);
        };

        _proto.stopBot = function stopBot() {
          var message = this._buildMessage(gfNetworkGameEvent.GAME_STOP_BOT, {});

          this.executeCommand(message);
        };

        _proto.destroy = function destroy() {
          this.cleanup();
          gfNetworkParser.instance = null;
        };

        return gfNetworkParser;
      }()); // gfNetworkParser.instance = null;

      gfNetworkParser.instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfNetworkSocket.ts", ['cc', './gfNetworkEvent.ts', './gfDataStore.ts', './XOCypher.ts', './hashKey.ts'], function (exports) {
  'use strict';

  var cclegacy, log, error, gfNetworkEvent, gfDataStore, xorCipher, hash;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      log = module.log;
      error = module.error;
    }, function (module) {
      gfNetworkEvent = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      xorCipher = module.default;
    }, function (module) {
      hash = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "531a6Z/e2BI1bTqNgIF5Cs0", "gfNetworkSocket", undefined);

      var STATUS_INIT = 'INIT';
      var STATUS_CONNECTED = 'CONNECTED';
      var STATUS_DISCONNECTED = 'DISCONNECTED';
      var LIVE_STATUS_INIT = 'INIT';
      var LIVE_STATUS_CONNECT = 'CONNECT';
      var LIVE_STATUS_CLOSED = 'CLOSED';
      var gfNetworkSocket = exports('default', /*#__PURE__*/function () {
        // private _emitter: EventEmitter;

        /**
         *
         * @param { } opt : {
         *      pingInterval,
         *      pingTimeout,
         *      reconnectionAttempts,
         *      reconnectionDelay
         *      reconnectionAttemptsWarning,
         * }
         */
        function gfNetworkSocket(opt) {
          this._msgQueue = void 0;
          this._socket = void 0;
          this._status = void 0;
          this._liveStatus = void 0;
          this._pingInfo = void 0;
          this._reconnectInfo = void 0;
          this._hostName = void 0;
          this._token = void 0;
          this._emitter = void 0;
          this._hashKey = void 0;
          opt = opt || {};
          this._socket = null;
          this._status = STATUS_INIT;
          this._liveStatus = LIVE_STATUS_INIT;
          this._pingInfo = {
            pingInterval: opt.pingInterval || 5000,
            pingTimeout: opt.pingTimeout || 3000,
            pingIntervalId: 0,
            pongIntervalId: 0,
            lastPingTime: 0,
            delay: 0,
            isSendingPing: false
          };
          this._reconnectInfo = {
            reconnectionCount: 0,
            reconnectionAttempts: opt.reconnectionAttempts || 100,
            reconnectionDelay: opt.reconnectionDelay || 500,
            reconnectionAttemptsWarning: opt.reconnectionAttemptsWarning || 10,
            reconnectionAttemptsDie: opt.reconnectionAttemptsDie || 25,
            reconnectIntervalId: 0
          };
          this._msgQueue = [];
          this._hashKey = undefined;
          this._emitter = new globalThis.EventEmitter();
        }

        var _proto = gfNetworkSocket.prototype;

        _proto.echo = function echo(str) {
          log(str + " " + gfNetworkEvent.EVENT_NETWORK_CONNECTED);
        };

        _proto.init = function init(hostName, token) {
          this._hostName = hostName;
          this._token = token;
          this.connect();
        };

        _proto.connect = function connect() {
          this._socket = new WebSocket(this._hostName, this._token);
          this._socket.binaryType = "arraybuffer";

          this._handleConnectionEvent();

          this._liveStatus = LIVE_STATUS_CONNECT;
        };

        _proto.close = function close(reason, isReconnect, callback) {
          if (isReconnect === void 0) {
            isReconnect = false;
          }

          if (callback === void 0) {
            callback = null;
          }

          if (typeof isReconnect === 'function') {
            callback = isReconnect;
            isReconnect = false;
          }

          this._changeStatus(STATUS_DISCONNECTED);

          if (this._socket) {
            this._socket.close();

            this._removeHandleConnectionEvent();

            this._socket = null;
          }

          this._cleanupTimer();

          if (!isReconnect) {
            this._liveStatus = LIVE_STATUS_CLOSED;
          }

          if (callback) {
            callback();
          }
        };

        _proto.cleanUp = function cleanUp() {
          this._emitter.removeAllListeners();
        };

        _proto.reconnect = function reconnect(reason) {
          if (this._liveStatus !== LIVE_STATUS_CLOSED) {
            //Reset queue message
            this._msgQueue.length = 0;

            if (this._reconnectInfo.reconnectionCount < this._reconnectInfo.reconnectionAttempts) {
              if (this._reconnectInfo.reconnectionCount == this._reconnectInfo.reconnectionAttemptsWarning) {
                this._emitter.emit(gfNetworkEvent.EVENT_NETWORK_POOR);
              }

              if (this._reconnectInfo.reconnectionCount == this._reconnectInfo.reconnectionAttemptsDie) {
                this._emitter.emit(gfNetworkEvent.EVENT_NETWORK_DIE);

                this._onClose("NETWORK_DIE");
              }

              this._reconnectInfo.reconnectionCount++;
            } else {
              this._emitter.emit(gfNetworkEvent.EVENT_NETWORK_DIE);
            }

            this.connect();
          } else {
            this._cleanupTimer();
          }
        };

        _proto.send = function send(data) {
          if (~gfNetworkEvent.LIST_EVENT_QUEUE.indexOf(data.requestId) && this._liveStatus == LIVE_STATUS_CONNECT) {
            //send fire laser
            this._ping(true);

            this._msgQueue.push(data);

            return true;
          } else if (this._status == STATUS_CONNECTED && this._socket && this._socket.readyState == WebSocket.OPEN) {
            if (data.requestId === 3001) {
              //clear queue on reconnect event
              this._msgQueue.length = 0;
            }

            this._socket.send(this._encode(data));

            return true;
          }

          return false;
        };

        _proto.registerEvent = function registerEvent(event, listener) {
          this._emitter.on(event, listener);
        };

        _proto.removeEvent = function removeEvent(event, listener) {
          this._emitter.removeListener(event, listener);
        };

        _proto._handleConnectionEvent = function _handleConnectionEvent() {
          if (this._socket) {
            this._socket.onopen = this._onOpen.bind(this);
            this._socket.onerror = this._onError.bind(this);
            this._socket.onmessage = this._onMessage.bind(this);
            this._socket.onclose = this._onClose.bind(this);
          }
        };

        _proto._removeHandleConnectionEvent = function _removeHandleConnectionEvent() {
          if (this._socket) {
            this._socket.onopen = null;
            this._socket.onerror = null;
            this._socket.onmessage = null;
            this._socket.onclose = null;
          }
        };

        _proto._onOpen = function _onOpen() {
          this._changeStatus(STATUS_CONNECTED);

          this._cleanupTimer();

          if (this._reconnectInfo.reconnectionCount > 0) {
            this._emitter.emit(gfNetworkEvent.EVENT_NETWORK_RECONNECTED);
          } else {
            this._emitter.emit(gfNetworkEvent.EVENT_NETWORK_CONNECTED);
          }

          this._reconnectInfo.reconnectionCount = 0;

          this._ping();
        };

        _proto._onError = function _onError(error) {
          this._changeStatus(STATUS_DISCONNECTED);

          this.reconnect('_onError');
        };

        _proto._onMessage = function _onMessage(message) {
          var messageDecode = this._decode(message.data);

          var isEncrypted = this._onCheckMessageEncrypted(messageDecode);

          if (isEncrypted) {
            var strMessageDecode = undefined;

            try {
              strMessageDecode = xorCipher.decode_new(this._hashKey, messageDecode);
            } catch (error) {
              var dataLog = {
                userID: gfDataStore.instance.getSelfInfo().UserID,
                method: gfDataStore.instance.getSelfInfo().pek,
                key: gfDataStore.instance.getSelfInfo().cpm,
                hashKey: this._hashKey,
                messageDecode: messageDecode,
                message: message,
                error: error
              };
            }

            try {
              messageDecode = JSON.parse(strMessageDecode);
            } catch (error) {
              var _dataLog = {
                userID: gfDataStore.instance.getSelfInfo().UserID,
                method: gfDataStore.instance.getSelfInfo().pek,
                key: gfDataStore.instance.getSelfInfo().cpm,
                hashKey: this._hashKey,
                messageDecode: messageDecode,
                strMessageDecode: strMessageDecode,
                message: message,
                error: error
              };
            }
          }

          log(JSON.stringify(messageDecode));

          if (messageDecode.requestId == 2001) {
            var _messageDecode$conten = messageDecode.content,
                cpm = _messageDecode$conten.cpm,
                pek = _messageDecode$conten.pek;

            this._setHashKeyDecode(cpm, pek);
          }

          if (messageDecode.requestId === 3999) {
            this._pong();
          }

          if (messageDecode.requestId === 3000) {
            this._handleNetworkPacketResponse(messageDecode);
          }

          if (messageDecode.requestId === 2019) {
            //NO ACTION
            this._handleNoActionLongTime();
          } else {
            this._emitter.emit(gfNetworkEvent.EVENT_NEW_MESSAGE, messageDecode);
          }
        };

        _proto._onCheckMessageEncrypted = function _onCheckMessageEncrypted(message) {
          if (typeof message == "object") {
            return false;
          }

          return true;
        };

        _proto._setHashKeyDecode = function _setHashKeyDecode(method, key) {
          if (!method || !key) {
            return;
          }

          this._hashKey = hash(method, key);
        };

        _proto._onClose = function _onClose(event) {
          var _this = this;

          this._changeStatus(STATUS_DISCONNECTED);

          this._cleanupTimer();

          this._removeHandleConnectionEvent();

          this._socket = null;

          if (this._liveStatus == LIVE_STATUS_CONNECT) {
            this._reconnectInfo.reconnectIntervalId = setTimeout(function () {
              _this.connect();
            }, this._reconnectInfo.reconnectionDelay);
          }
        };

        _proto._cleanupTimer = function _cleanupTimer() {
          clearTimeout(this._pingInfo.pingIntervalId);
          clearTimeout(this._pingInfo.pongIntervalId);
          clearTimeout(this._reconnectInfo.reconnectIntervalId);
          this._pingInfo.isSendingPing = false;
        };

        _proto._ping = function _ping(isPingImmediately) {
          var _this2 = this;

          if (isPingImmediately === void 0) {
            isPingImmediately = false;
          }

          if (this._liveStatus !== LIVE_STATUS_CLOSED) {
            var delayPing = isPingImmediately ? 0 : this._pingInfo.pingInterval;
            this._pingInfo.pingIntervalId = setTimeout(function () {
              if (!_this2._pingInfo.isSendingPing) {
                _this2._pingInfo.lastPingTime = Date.now();

                var isSendSuccess = _this2.send({
                  requestId: 3999,
                  content: {}
                });

                if (isSendSuccess) {
                  _this2._pingInfo.isSendingPing = true;
                }
              }

              clearTimeout(_this2._pingInfo.pongIntervalId);
              _this2._pingInfo.pongIntervalId = setTimeout(function () {
                if (_this2._status == STATUS_CONNECTED) {
                  _this2._changeStatus(STATUS_DISCONNECTED);
                }

                _this2._ping(true);

                if (_this2._socket) {
                  _this2.close('PONG TIMEOUT', true);
                }

                _this2.reconnect('pong timeout');
              }, _this2._pingInfo.pingTimeout);
            }, delayPing);
          } else {
            this._cleanupTimer();
          }
        };

        _proto._pong = function _pong() {
          clearTimeout(this._pingInfo.pongIntervalId);
          this._pingInfo.delay = Date.now() - this._pingInfo.lastPingTime;
          this._pingInfo.isSendingPing = false;

          this._ping();

          if (this._status != STATUS_CONNECTED) {
            this._changeStatus(STATUS_CONNECTED);

            if (this._reconnectInfo.reconnectionCount > 0) {
              this._emitter.emit(gfNetworkEvent.EVENT_NETWORK_RECONNECTED);

              this._reconnectInfo.reconnectionCount = 0;
            }
          }

          for (var i = 0; i < this._msgQueue.length; ++i) {
            if (this._status === STATUS_CONNECTED) {
              this._socket.send(this._encode(this._msgQueue[i]));
            }
          }

          this._msgQueue.length = 0;

          this._emitter.emit(gfNetworkEvent.EVENT_NETWORK_PINGPONG, this._pingInfo.delay);
        };

        _proto._handleNetworkPacketResponse = function _handleNetworkPacketResponse(_ref) {
          var content = _ref.content;

          switch (content.code) {
            case 1:
              // Login in other device.
              this.close('EVENT_LOGIN_IN_OTHER_DEVICE', false);

              this._emitter.emit(gfNetworkEvent.EVENT_LOGIN_IN_OTHER_DEVICE);

              break;

            case 2:
              // Authen fail
              this.close('EVENT_AUTHEN_FAIL', false);

              this._emitter.emit(gfNetworkEvent.EVENT_AUTHEN_FAIL);

              break;

            default:
              error(content);
              break;
          }
        };

        _proto.isAvailable = function isAvailable() {
          return this._liveStatus !== LIVE_STATUS_CLOSED;
        };

        _proto._changeStatus = function _changeStatus(status) {
          this._status = status;
        };

        _proto._encode = function _encode(message) {
          return globalThis.msgpack.encode(message); // return undefined;
        };

        _proto._decode = function _decode(byteData) {
          var arr = new Uint8Array(byteData);
          var buf = arr.buffer;
          return globalThis.msgpack.decode(new Uint8Array(buf)); // return undefined;
        };

        _proto._handleNoActionLongTime = function _handleNoActionLongTime() {
          this.close('EVENT_NO_ACTION_LONG_TIME');

          this._emitter.emit(gfNetworkEvent.EVENT_NO_ACTION_LONG_TIME);
        };

        return gfNetworkSocket;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfNode.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Tween, v3, isValid, warn, Component, setOpacity;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Tween = module.Tween;
      v3 = module.v3;
      isValid = module.isValid;
      warn = module.warn;
      Component = module.Component;
    }, function (module) {
      setOpacity = module.setOpacity;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "4488ceONJNEpowcEHtUHDRb", "gfNode", undefined);

      var ccclass = _decorator.ccclass;
      var gfNode = exports('default', (_dec = ccclass('gfNode'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfNode, _Component);

        function gfNode() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.poolManager = void 0;
          return _this;
        }

        var _proto = gfNode.prototype;

        _proto.initAssets = function initAssets(config) {} //Called whenever object is get from Object Pool
        ;

        _proto.reuse = function reuse(args) {
          this.poolManager = args[0];
          this.node.active = true;
          this.enabled = true;
        };

        _proto.setPoolManager = function setPoolManager(poolMng) {
          this.poolManager = poolMng;
        } //Called whenever object is returned to Object Pool
        ;

        _proto.unuse = function unuse() {
          Tween.stopAllByTarget(this.node);
          this.node.active = false;
          this.setOpacity(255);
          this.node.scale = v3(1, 1, 1);
          this.node.angle = 0;
        };

        _proto.returnPool = function returnPool() {
          if (this.poolManager) {
            this.poolManager.putObj(this.node);
          } else {
            if (isValid(this.node)) {
              this.node.destroy();
            } else {
              warn('non valid obj');
            }
          }
        };

        _proto.setOpacity = function setOpacity$1(value) {
          setOpacity(this.node, value);
        };

        return gfNode;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfNodePool.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, instantiate, isValid, log, NodePool;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      instantiate = module.instantiate;
      isValid = module.isValid;
      log = module.log;
      NodePool = module.NodePool;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e3e2eRswGZIYZRgK/R5u/0m", "gfNodePool", undefined);

      var LOG = log;
      var gfNodePool = exports('default', /*#__PURE__*/function (_NodePool) {
        _inheritsLoose(gfNodePool, _NodePool);

        function gfNodePool() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _NodePool.call.apply(_NodePool, [this].concat(args)) || this;
          _this.objPrefab = void 0;
          _this.usingNodes = void 0;
          _this.maximum = 1000;
          return _this;
        }

        var _proto = gfNodePool.prototype;

        _proto.init = function init(prefab, initCount, maximum) {
          if (initCount === void 0) {
            initCount = 5;
          }

          if (maximum === void 0) {
            maximum = 1000;
          }

          if (!this.objPrefab) {
            this.objPrefab = instantiate(prefab);
            this.usingNodes = [];
          }

          for (var i = 0; i < initCount; i++) {
            var item = instantiate(this.objPrefab);
            this.put(item);
          }

          this.maximum = maximum;
        };

        _proto.getSize = function getSize() {
          return this.size();
        };

        _proto.getObj = function getObj() {
          if (this.size() == 0) {
            this.put(instantiate(this.objPrefab));
          }

          var obj = this.get(this);
          this.usingNodes.push(obj);
          return obj;
        };

        _proto.clearPool = function clearPool() {
          this.clear();
        };

        _proto.reinit = function reinit() {
          this.clear();
          this.init(this.objPrefab);
        };

        _proto.putObj = function putObj(node) {
          for (var i = 0; i < this.usingNodes.length; ++i) {
            if (this.usingNodes[i].uuid == node.uuid) {
              this.usingNodes.splice(i, 1);
              break;
            }
          }

          if (this.getSize() < this.maximum) {
            this.put(node);
          } else {
            node.removeFromParent();
            node.destroy();
          }
        };

        _proto.getUsingNodeList = function getUsingNodeList() {
          return this.usingNodes;
        };

        _proto.returnAllToPool = function returnAllToPool() {
          while (this.usingNodes.length > 0) {
            var obj = this.usingNodes.pop();

            if (isValid(obj)) {
              if (this.getSize() < this.maximum) {
                this.put(obj);
              } else {
                obj.removeFromParent();
                obj.destroy();
              }
            } else {
              LOG("return invalid object to pool!");
            }
          }
        };

        _proto.destroy = function destroy() {
          this.returnAllToPool();
          this.clear();
          this.objPrefab.destroy();
          this.objPrefab = null;
        };

        return gfNodePool;
      }(NodePool));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfNodePoolAssets.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfCustomDataType.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Component, convertAssetArrayToObject, gfBulletAsset, gfCoinAsset, gfFreezeItemFXAsset, gfNetFXAsset, gfSpriteFishAsset, gfSpineFishAsset, gfDragonBallAsset, gfLabelCoinAsset;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      convertAssetArrayToObject = module.convertAssetArrayToObject;
    }, function (module) {
      gfBulletAsset = module.gfBulletAsset;
      gfCoinAsset = module.gfCoinAsset;
      gfFreezeItemFXAsset = module.gfFreezeItemFXAsset;
      gfNetFXAsset = module.gfNetFXAsset;
      gfSpriteFishAsset = module.gfSpriteFishAsset;
      gfSpineFishAsset = module.gfSpineFishAsset;
      gfDragonBallAsset = module.gfDragonBallAsset;
      gfLabelCoinAsset = module.gfLabelCoinAsset;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;

      cclegacy._RF.push({}, "99f8cyzQ0RHupu2CP3p0znO", "gfNodePoolAssets", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfNodePoolAssets = exports('gfNodePoolAssets', (_dec = ccclass('gfNodePoolAssets'), _dec2 = property(gfBulletAsset), _dec3 = property(gfCoinAsset), _dec4 = property(gfFreezeItemFXAsset), _dec5 = property(gfNetFXAsset), _dec6 = property(gfSpriteFishAsset), _dec7 = property(gfSpineFishAsset), _dec8 = property(gfDragonBallAsset), _dec9 = property(gfLabelCoinAsset), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfNodePoolAssets, _Component);

        function gfNodePoolAssets() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "bulletSprite", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "coin", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "freezeItemFXAsset", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "netFX", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "fishAnimationClip", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "fishSkeletonData", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "dragonBall", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labelCoin", _descriptor8, _assertThisInitialized(_this));

          _this.bulletAssets = {};
          _this.freezeItemFX = {};
          _this.netFXAssets = {};
          _this.fishAnimationAssets = {};
          _this.fishSkeletonAssets = {};
          _this.coinAssets = {};
          _this.dragonBallAssets = {};
          _this.labelCoinAssets = {};
          return _this;
        }

        var _proto = gfNodePoolAssets.prototype;

        _proto.initMapAssets = function initMapAssets() {
          this.bulletAssets = convertAssetArrayToObject(this.bulletSprite);
          this.freezeItemFX = convertAssetArrayToObject(this.freezeItemFXAsset);
          this.netFXAssets = convertAssetArrayToObject(this.netFX);
          this.fishAnimationAssets = convertAssetArrayToObject(this.fishAnimationClip);
          this.fishSkeletonAssets = convertAssetArrayToObject(this.fishSkeletonData);
          this.coinAssets = convertAssetArrayToObject(this.coin);
          this.dragonBallAssets = convertAssetArrayToObject(this.dragonBall);
          this.labelCoinAssets = convertAssetArrayToObject(this.labelCoin);
        };

        _proto.getBulletSprite = function getBulletSprite(kind) {
          if (this.bulletAssets[kind] && this.bulletAssets[kind].sprite) {
            return this.bulletAssets[kind].sprite;
          }

          return null;
        };

        _proto.getCoinAsset = function getCoinAsset(kind) {
          if (this.coinAssets[kind] && this.coinAssets[kind].animation) {
            return this.coinAssets[kind].animation;
          }

          return null;
        };

        _proto.getLabelCoinAsset = function getLabelCoinAsset(kind) {
          if (this.labelCoinAssets[kind] && this.labelCoinAssets[kind].font) {
            return this.labelCoinAssets[kind].font;
          }

          return null;
        };

        _proto.getFreezeItemFXAsset = function getFreezeItemFXAsset(kind) {
          if (this.freezeItemFX[kind] && this.freezeItemFX[kind].animation) {
            return this.freezeItemFX[kind].animation;
          }

          return null;
        } // fish normal default: 0, fish special : 1 , ice gun :2 
        ;

        _proto.getNetFXAsset = function getNetFXAsset(kind) {
          if (this.netFXAssets[kind] && this.netFXAssets[kind].animation) {
            return this.netFXAssets[kind].animation;
          }

          return null;
        };

        _proto.getFishAnimationClip = function getFishAnimationClip(kind) {
          if (this.fishAnimationAssets[kind] && this.fishAnimationAssets[kind].animation) {
            return this.fishAnimationAssets[kind].animation;
          }

          return null;
        };

        _proto.getFishSkeletonData = function getFishSkeletonData(kind) {
          if (this.fishSkeletonAssets[kind] && this.fishSkeletonAssets[kind].animation) {
            return this.fishSkeletonAssets[kind].animation;
          }

          return null;
        };

        _proto.getDragonBallAssets = function getDragonBallAssets(kind) {
          if (this.dragonBallAssets[kind] && this.dragonBallAssets[kind].sprite) {
            return this.dragonBallAssets[kind].sprite;
          }

          return null;
        };

        return gfNodePoolAssets;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "bulletSprite", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "coin", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "freezeItemFXAsset", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "netFX", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "fishAnimationClip", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "fishSkeletonData", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "dragonBall", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "labelCoin", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfNodePoolConfig.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, instantiate, warn, v2, Rect;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      instantiate = module.instantiate;
      warn = module.warn;
      v2 = module.v2;
      Rect = module.Rect;
    }],
    execute: function () {
      cclegacy._RF.push({}, "086502tsbxDJZAcKPwxZxWQ", "gfNodePoolConfig", undefined);

      var gfNodePoolConfig = exports('default', /*#__PURE__*/function () {
        function gfNodePoolConfig(listAssets) {
          this.SPRITE_FISH_KIND = [];
          this.FISH_CONFIG = {};
          this.BULLET_CONFIG = {};
          this.BULLET_ICE_VALUE = void 0;
          this.NET_FX_CONFIG = {};
          this.COIN_CONFIG = {};
          this.DRAGON_BALL_CONFIG = {};
          this.assetHolder = void 0;
          gfNodePoolConfig.instance = this;
          this.FISH_CONFIG = {
            "0": {
              speed: 100,
              FishMultiple: -1,
              zIndex: 499,
              AnimationName: ['animation'],
              targetPoint: v2(5, 0),
              BoxCollider: new Rect(5, 0, 22.9, 10.5)
            },
            "1": {
              speed: 100,
              FishMultiple: -1,
              zIndex: 498,
              AnimationName: ['animation'],
              targetPoint: v2(5, 0),
              BoxCollider: new Rect(5, 0, 54.2, 13.8)
            },
            "2": {
              speed: 80,
              FishMultiple: -1,
              zIndex: 497,
              AnimationName: ['animation'],
              BoxCollider: new Rect(-2, 2.2, 36, 19.5)
            },
            "3": {
              speed: 80,
              FishMultiple: -1,
              zIndex: 496,
              AnimationName: ['animation'],
              targetPoint: v2(3, 2),
              BoxCollider: new Rect(5, 2.2, 35.7, 28.5)
            },
            "4": {
              speed: 80,
              FishMultiple: -1,
              zIndex: 495,
              AnimationName: ['animation'],
              targetPoint: v2(18, 0),
              BoxCollider: new Rect(15, 2.2, 54.5, 29)
            },
            "5": {
              speed: 80,
              FishMultiple: -1,
              zIndex: 494,
              AnimationName: ['animation'],
              targetPoint: v2(10, 2),
              BoxCollider: new Rect(10, 2.2, 67.9, 18.6)
            },
            "6": {
              speed: 40,
              FishMultiple: -1,
              zIndex: 1,
              AnimationName: ['animation'],
              targetPoint: v2(10, 0),
              BoxCollider: new Rect(-10, 2.2, 59, 20)
            },
            "7": {
              speed: 60,
              FishMultiple: -1,
              zIndex: 493,
              AnimationName: ['animation'],
              targetPoint: v2(7, 0),
              BoxCollider: new Rect(13, 2.2, 66.4, 25.6)
            },
            "8": {
              speed: 60,
              FishMultiple: -1,
              zIndex: 100,
              AnimationName: ['animation'],
              targetPoint: v2(10, 0),
              BoxCollider: new Rect(15, 2.2, 52.6, 40.2)
            },
            "9": {
              speed: 60,
              FishMultiple: -1,
              zIndex: 109,
              AnimationName: ['animation'],
              targetPoint: v2(7, 0),
              BoxCollider: new Rect(8, 1.2, 66.4, 27.2)
            },
            "10": {
              speed: 60,
              FishMultiple: -1,
              zIndex: 108,
              AnimationName: ['animation'],
              targetPoint: v2(5, 0),
              BoxCollider: new Rect(10, 2.2, 66.6, 32.4)
            },
            "11": {
              speed: 60,
              FishMultiple: -1,
              zIndex: 107,
              AnimationName: ['animation'],
              targetPoint: v2(8, 0),
              BoxCollider: new Rect(15, 2.2, 66.6, 32.4)
            },
            "12": {
              speed: 60,
              FishMultiple: -1,
              zIndex: 106,
              AnimationName: ['animation'],
              BoxCollider: new Rect(0.1, -0.2, 71.1, 51.6)
            },
            "13": {
              speed: 40,
              FishMultiple: -1,
              zIndex: 492,
              AnimationName: ['animation'],
              BoxCollider: new Rect(-0.1, -0.2, 139.4, 20.2)
            },
            "14": {
              speed: 40,
              FishMultiple: -1,
              zIndex: 200,
              AnimationName: ['animation'],
              targetPoint: v2(35, 0),
              BoxCollider: new Rect(20, -0.2, 81.5, 43.4)
            },
            "15": {
              speed: 40,
              FishMultiple: -1,
              zIndex: 201,
              AnimationName: ['animation'],
              targetPoint: v2(5, 0),
              BoxCollider: [new Rect(5, -1.8, 41.5, 37.7), new Rect(4, -0.6, 17.6, 120)]
            },
            "16": {
              speed: 20,
              FishMultiple: -1,
              zIndex: 202,
              AnimationName: ['animation'],
              targetPoint: v2(-5, 0),
              BoxCollider: [new Rect(-4.1, 1.6, 84.9, 24.4), new Rect(-17.3, 1.6, 58.3, 53.1)]
            },
            "17": {
              speed: 40,
              FishMultiple: -1,
              zIndex: 203,
              AnimationName: ['animation'],
              targetPoint: v2(-10, 0),
              BoxCollider: new Rect(-10, 1, 65, 77.3)
            },
            "18": {
              speed: 40,
              FishMultiple: -1,
              zIndex: 204,
              AnimationName: ['animation'],
              targetPoint: v2(10, 0),
              BoxCollider: [new Rect(11.5, 0.8, 97.1, 49.7), new Rect(0, -1.5, 36.8, 123.1)]
            },
            "19": {
              speed: 40,
              FishMultiple: -1,
              zIndex: 205,
              AnimationName: ['animation'],
              targetPoint: v2(0, 0),
              BoxCollider: [new Rect(26.5, 1.2, 232.3, 10.8), new Rect(-7.8, 0.2, 110, 30.7)]
            },
            "20": {
              speed: 40,
              FishMultiple: -1,
              zIndex: 206,
              AnimationName: ['animation'],
              BoxCollider: new Rect(0, 0, 133.5, 41.2)
            },
            "21": {
              speed: 40,
              FishMultiple: -1,
              zIndex: 207,
              AnimationName: ['animation'],
              BoxCollider: new Rect(-1.2, -2.3, 76.3, 72.1)
            },
            "22": {
              speed: 20,
              FishMultiple: -1,
              zIndex: 208,
              AnimationName: ['animation'],
              targetPoint: v2(10, 10),
              BoxCollider: new Rect(7, 9, 161.3, 64.5)
            },
            "23": {
              speed: 20,
              FishMultiple: -1,
              zIndex: 209,
              AnimationName: ['animation'],
              targetPoint: v2(17, 0),
              BoxCollider: new Rect(20, 0, 159.3, 67)
            },
            "24": {
              speed: 20,
              FishMultiple: -1,
              zIndex: 210,
              AnimationName: ['animation'],
              targetPoint: v2(-30, 0),
              BoxCollider: new Rect(27, 0, 167, 35)
            },
            "25": {
              speed: 20,
              FishMultiple: -1,
              zIndex: 211,
              AnimationName: ['animation'],
              targetPoint: v2(-30, 0),
              BoxCollider: new Rect(-24, -3, 169, 68)
            },
            "27": {
              speed: 20,
              FishMultiple: -1,
              zIndex: 2,
              AnimationName: ['animation'],
              customAnimProp: {
                angle: 90
              },
              BoxCollider: new Rect(-4, -7, 94, 73)
            },
            "30": {
              speed: 20,
              FishMultiple: -1,
              zIndex: 491,
              AnimationName: ['animation'],
              customAnimProp: {
                scaleX: 0.469,
                scaleY: 0.469
              },
              targetPoint: v2(17, 0),
              BoxCollider: new Rect(-41, -3, 290, 50)
            },
            "31": {
              speed: 20,
              FishMultiple: -1,
              zIndex: 490,
              AnimationName: ['thantaiphai'],
              BoxCollider: new Rect(2, 58, 73, 159),
              skipRotate: true
            },
            "34": {
              speed: 20,
              FishMultiple: -1,
              zIndex: 490,
              AnimationName: ['walk'],
              customAnimProp: {
                scaleX: -1
              },
              customComponent: 'gfMiniBossGuardFish',
              targetPoint: v2(15, 0),
              BoxCollider: new Rect(0, 0, 180, 100)
            },
            "35": {
              speed: 20,
              FishMultiple: -1,
              zIndex: 490,
              AnimationName: ['walk'],
              customAnimProp: {
                scaleX: -1
              },
              customComponent: 'gfMiniBossGuardFish',
              targetPoint: v2(0, 10),
              BoxCollider: new Rect(0, 15, 60, 100)
            },
            "36": {
              speed: 20,
              FishMultiple: -1,
              zIndex: 490,
              AnimationName: ['walk'],
              customAnimProp: {
                scaleX: -1
              },
              customComponent: 'gfMiniBossGuardFish',
              BoxCollider: new Rect(0, 0, 50, 50)
            },
            "37": {
              speed: 20,
              FishMultiple: -1,
              zIndex: 490,
              AnimationName: ['walk'],
              customAnimProp: {
                scaleX: -1
              },
              customComponent: 'gfMiniBossGuardFish',
              targetPoint: v2(0, -5),
              BoxCollider: new Rect(8, -5, 95, 70)
            },
            "43": {
              speed: 20,
              FishMultiple: -1,
              zIndex: 105,
              AnimationName: ['animation'],
              targetPoint: v2(10, 0),
              BoxCollider: new Rect(10, 3, 110, 88),
              skipRotate: true
            }
          }; // this.SPRITE_FISH_KIND = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];

          this.BULLET_CONFIG = {
            "0": {
              BoxCollider: new Rect(5, 0, 20, 20)
            },
            "1": {
              BoxCollider: new Rect(5, 0, 20, 22)
            },
            "2": {
              BoxCollider: new Rect(5, 0, 20, 20)
            },
            "3": {
              BoxCollider: new Rect(5, 0, 20, 27)
            },
            "4": {
              BoxCollider: new Rect(5, 0, 20, 67)
            },
            "5": {
              BoxCollider: new Rect(0, 0, 20, 67)
            },
            "6": {
              BoxCollider: new Rect(0, 0, 20, 91)
            },
            "7": {
              BoxCollider: new Rect(0, 0, 20, 36)
            },
            "8": {
              BoxCollider: new Rect(0, 0, 20, 77)
            },
            "9": {
              BoxCollider: new Rect(0, 0, 20, 101)
            }
          };
          this.BULLET_ICE_VALUE = [7, 7, 7, 7, 8, 8, 9];
          this.DRAGON_BALL_CONFIG = {
            "0": {
              scale: 0.3
            },
            "1": {
              scale: 0.3
            },
            "2": {
              scale: 0.3
            },
            "3": {
              scale: 0.3
            },
            "4": {
              scale: 0.3
            },
            "5": {
              scale: 0.3
            },
            "6": {
              scale: 0.4
            }
          };
          this.initNodePoolAssets(listAssets);
        }

        var _proto = gfNodePoolConfig.prototype;

        _proto.initNodePoolAssets = function initNodePoolAssets(listAssets) {
          this.assetHolder = instantiate(listAssets).getComponent("gfNodePoolAssets");
          this.assetHolder.initMapAssets();
        };

        _proto.isSpriteFish = function isSpriteFish(kind) {
          return this.SPRITE_FISH_KIND.includes(kind);
        };

        _proto.checkFishPoolByKind = function checkFishPoolByKind(kind) {
          return this.FISH_CONFIG[kind] ? true : false;
        };

        _proto.getBulletConfig = function getBulletConfig(data) {
          var kind;

          if (data.isFreezed) {
            kind = this.BULLET_ICE_VALUE[data.BulletIndex];
          } else {
            kind = data.BulletIndex;
          }

          var config = this.BULLET_CONFIG[kind];

          if (!config) {
            warn("Bullet kind config not found: " + kind);

            if (kind != 0) {
              return this.getBulletConfig(0);
            }

            return null;
          }

          if (!config.asset) {
            config.asset = this.assetHolder.getBulletSprite(kind);
          }

          return config;
        };

        _proto.getFishConfig = function getFishConfig(kind) {
          var config = this.FISH_CONFIG[kind];

          if (!config) {
            warn("Fish kind config not found: " + kind);
            return null;
          }

          if (this.isSpriteFish(kind)) {
            if (!config.asset) {
              config.asset = this.assetHolder.getFishAnimationClip(kind);
            }
          } else {
            if (!config.asset) {
              config.asset = this.assetHolder.getFishSkeletonData(kind);
            }
          }

          if (!config.asset) {
            warn("Fish kind asset found: " + kind);
            return null;
          }

          return config;
        };

        _proto.getCoinConfig = function getCoinConfig(kind) {
          var asset = this.assetHolder.getCoinAsset(kind);

          if (!this.COIN_CONFIG[kind]) {
            if (asset) {
              this.COIN_CONFIG[kind] = {};
            } else {
              // warn("Coin kind config not found: " + kind);
              if (kind != 0) {
                return this.getCoinConfig(0);
              }

              return null;
            }
          }

          var config = this.COIN_CONFIG[kind];

          if (!config.asset) {
            config.asset = asset;
          }

          return config;
        };

        _proto.getLabelCoinFont = function getLabelCoinFont(kind) {
          var font = this.assetHolder.getLabelCoinAsset(kind);
          return font;
        };

        _proto.getNetFXConfig = function getNetFXConfig(kind) {
          var asset = this.assetHolder.getNetFXAsset(kind);

          if (!this.NET_FX_CONFIG[kind]) {
            if (asset) {
              this.NET_FX_CONFIG[kind] = {};
            } else {
              warn("NetFx kind config not found: " + kind);

              if (kind != 0) {
                return this.getNetFXConfig(0);
              }

              return null;
            }
          }

          var config = this.NET_FX_CONFIG[kind];

          if (!config.asset) {
            config.asset = asset;
          }

          return config;
        };

        _proto.getDragonBallConfig = function getDragonBallConfig(kind) {
          var config = this.DRAGON_BALL_CONFIG[kind];

          if (!config) {
            warn("Dragon Ball kind config not found: " + kind);
            return null;
          }

          if (!config.asset) {
            config.asset = this.assetHolder.getDragonBallAssets(kind);
            config.kind = kind;
          }

          return config;
        };

        _proto.destroy = function destroy() {
          this.assetHolder.destroy();
          this.assetHolder = null;
          gfNodePoolConfig.instance = null;
        };

        return gfNodePoolConfig;
      }());
      gfNodePoolConfig.instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfNotifyComponent.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, SpriteAtlas, Font, BitmapFont, size, Color, Label, LabelOutline, Sprite, UITransform, Tween, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      SpriteAtlas = module.SpriteAtlas;
      Font = module.Font;
      BitmapFont = module.BitmapFont;
      size = module.size;
      Color = module.Color;
      Label = module.Label;
      LabelOutline = module.LabelOutline;
      Sprite = module.Sprite;
      UITransform = module.UITransform;
      Tween = module.Tween;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "cce78C6FSZIOKBYNeXzKYbf", "gfNotifyComponent", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfNotifyComponent = exports('GfNotifyComponent', (_dec = ccclass('GfNotifyComponent'), _dec2 = property(Node), _dec3 = property(SpriteAtlas), _dec4 = property(Font), _dec5 = property(BitmapFont), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfNotifyComponent, _Component);

        function GfNotifyComponent() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._isShow = false;
          _this._lstMessage = [];

          _initializerDefineProperty(_this, "contentNode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "atlasFishNotify", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "defaultFontSize", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "defaultFont", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "moneyFont", _descriptor5, _assertThisInitialized(_this));

          _this._defaultSpriteSize = size(40, 40);
          return _this;
        }

        var _proto = GfNotifyComponent.prototype;

        _proto.onLoad = function onLoad() {};

        _proto.show = function show(data) {};

        _proto.hide = function hide() {};

        _proto.play = function play(data) {};

        _proto.validateData = function validateData(data) {};

        _proto.onStackMessage = function onStackMessage() {
          if (this._lstMessage.length > 0) {
            var data = this._lstMessage.shift();

            this.play(data);
          } else {
            this.hide();
          }
        };

        _proto.createNotifyMessage = function createNotifyMessage(data) {
          var _this2 = this;

          this.contentNode.removeAllChildren();
          Object.values(data).forEach(function (element) {
            if (element['type'] === "label") {
              _this2.decorLabel(element);
            } else {
              _this2.decorSprite(element);
            }
          });
        };

        _proto.decorLabel = function decorLabel(element) {
          var color = new Color("#FFFFFF"); //create node with label

          var node = new Node();
          node.parent = this.contentNode;
          var label = node.addComponent(Label);
          label.string = element.str;

          if (element.color) {
            node.getComponent(Label).color = color.fromHEX(element.color);
          }

          label.fontSize = element.fontSize ? element.fontSize : this.defaultFontSize;

          if (element.outline) {
            var outline = node.addComponent(LabelOutline);
            outline.color = color.fromHEX(element.outline.color);
            outline.width = element.outline.width;
          }

          if (element.isMoney && this.moneyFont) {
            label.font = this.moneyFont;
          } else if (this.defaultFont) {
            label.font = this.defaultFont;
          }

          label.isBold = !!element.isBold;
          label.verticalAlign = Label.VerticalAlign.CENTER;
          label.updateRenderData(true);
        };

        _proto.decorSprite = function decorSprite(element) {
          var node = new Node();
          node.parent = this.contentNode;
          var sprite = node.addComponent(Sprite);
          sprite.spriteFrame = this.atlasFishNotify.getSpriteFrame(element.spriteFrame);
          node.getComponent(UITransform).width = this._defaultSpriteSize.width;
          node.getComponent(UITransform).height = this._defaultSpriteSize.height;
        };

        _proto.onBeforeSceneChange = function onBeforeSceneChange() {
          //reset notify
          Tween.stopAllByTarget(this.node); //Clear children

          this.contentNode && this.contentNode.removeAllChildren();
        };

        _proto.onAfterSceneChange = function onAfterSceneChange() {
          this._isShow = false;

          if (this._lstMessage.length) {
            this.show(this._lstMessage.shift());
          } else {
            this.hide();
          }
        };

        return GfNotifyComponent;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "contentNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "atlasFishNotify", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "defaultFontSize", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 32;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "defaultFont", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "moneyFont", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfNotifyController.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './loadConfigAsync.ts', './gfUtilities.ts', './gfBaseEvents.ts', './gfBaseConfig.ts', './gfDataStore.ts', './gfNotifyMessage.ts', './gfNotifyJackpot.ts', './gfNotifyStack.ts', './utils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, UITransform, director, Director, Component, loadConfigAsync, SetZIndex, registerEvent, removeEvents, gfBaseEvents, gfBaseConfig, gfDataStore, GfNotifyMessage, GfNotifyJackpot, GfNotifyStack, setOpacity;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      UITransform = module.UITransform;
      director = module.director;
      Director = module.Director;
      Component = module.Component;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      SetZIndex = module.SetZIndex;
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      GfNotifyMessage = module.GfNotifyMessage;
    }, function (module) {
      GfNotifyJackpot = module.GfNotifyJackpot;
    }, function (module) {
      GfNotifyStack = module.GfNotifyStack;
    }, function (module) {
      setOpacity = module.setOpacity;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "bc97fFVSShPybJtGLB45k0x", "gfNotifyController", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfNotifyController = exports('default', (_dec = ccclass('GfNotifyController'), _dec2 = property(GfNotifyMessage), _dec3 = property(GfNotifyJackpot), _dec4 = property(GfNotifyStack), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfNotifyController, _Component);

        function gfNotifyController() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "notifyMessage", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "notifyJackpot", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "notifyStack", _descriptor3, _assertThisInitialized(_this));

          _this.LOAD_CONFIG = null;
          return _this;
        }

        var _proto = gfNotifyController.prototype;

        _proto.onLoad = function onLoad() {
          this.LOAD_CONFIG = loadConfigAsync.getConfig();
          SetZIndex(this.node, gfBaseConfig.instance.Z_INDEX.NOTIFY);
          setOpacity(this.node, 255);
          this.initEvents();
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.COMMON.SHOW_NOTIFY, this.onNotify, this);
          registerEvent(gfBaseEvents.COMMON.ON_SCREEN_RESIZE, this.updateSceneSize, this);
          registerEvent(gfBaseEvents.COMMON.BEFORE_LOAD_SCENE, this.onBeforeSceneChange, this);
          registerEvent(gfBaseEvents.COMMON.INIT_SCENE, this.onAfterSceneChange, this);
        };

        _proto.updateSceneSize = function updateSceneSize() {
          this.node.getComponent(UITransform).width = gfBaseConfig.instance.realSize.Width;
          this.node.getComponent(UITransform).height = gfBaseConfig.instance.realSize.Height;
        };

        _proto.onBeforeSceneChange = function onBeforeSceneChange() {
          this.notifyMessage && this.notifyMessage.onBeforeSceneChange();
          this.notifyJackpot && this.notifyJackpot.onBeforeSceneChange();
          this.notifyStack && this.notifyStack.onBeforeSceneChange();
        };

        _proto.onAfterSceneChange = function onAfterSceneChange() {
          this.notifyMessage && this.notifyMessage.onAfterSceneChange();
          this.notifyJackpot && this.notifyJackpot.onAfterSceneChange();
          this.notifyStack && this.notifyStack.onAfterSceneChange();
        };

        _proto.onNotify = function onNotify(data) {
          if (!this.validateData(data)) return;

          if (gfBaseConfig.instance.NOTIFY_JACKPOT.array_type_notify_jackpot.indexOf(data.type) > -1) {
            var selfInfo = gfDataStore.instance.getSelfInfo();

            if (data.data[0] !== selfInfo.Username) {
              this.notifyJackpot.show(data);
            }
          } else if (this.notifyStack) {
            if (gfBaseConfig.instance.NOTIFY_TYPE.SYSTEM === data.type) {
              this.notifyMessage.show(data);
            } else {
              this.notifyStack.show(data);
            }
          } else {
            this.notifyMessage.show(data);
          }
        };

        _proto.validateData = function validateData(data) {
          var isValid = false;
          var LOGIN_IFRAME = this.LOAD_CONFIG.LOGIN_IFRAME;
          var _GameConfig$instance$ = gfBaseConfig.instance.NOTIFY_ENVIRONMENT_CONFIG,
              ALL = _GameConfig$instance$.ALL,
              IFRAME = _GameConfig$instance$.IFRAME,
              APP = _GameConfig$instance$.APP;

          switch (data.environment) {
            case ALL:
              isValid = true;
              break;

            case IFRAME:
              if (LOGIN_IFRAME) isValid = true;
              break;

            case APP:
              if (!LOGIN_IFRAME) isValid = true;
              break;

            default:
              isValid = true;
              break;
          }

          return isValid;
        };

        _proto.refreshPage = function refreshPage() {
          director.off(Director.EVENT_BEFORE_SCENE_LOADING, this.onBeforeSceneChange, this);
          director.off(Director.EVENT_AFTER_SCENE_LAUNCH, this.onAfterSceneChange, this);
          this.node.children.forEach(function (item) {
            item.destroy();
          });
          removeEvents(this);
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return gfNotifyController;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "notifyMessage", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "notifyJackpot", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "notifyStack", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfNotifyItemStack.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfActionHelper.ts', './gfUtilities.ts', './utils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Sprite, SpriteAtlas, UITransform, v3, tween, Component, stopAllActions, moveTo, fadeTo, formatUserName, SetZIndex, setOpacity;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Sprite = module.Sprite;
      SpriteAtlas = module.SpriteAtlas;
      UITransform = module.UITransform;
      v3 = module.v3;
      tween = module.tween;
      Component = module.Component;
    }, function (module) {
      stopAllActions = module.stopAllActions;
      moveTo = module.moveTo;
      fadeTo = module.fadeTo;
    }, function (module) {
      formatUserName = module.formatUserName;
      SetZIndex = module.SetZIndex;
    }, function (module) {
      setOpacity = module.setOpacity;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "a0d3aOdmJZDN71/zQ3uQY+Z", "gfNotifyItemStack", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfNotifyItemStack = exports('gfNotifyItemStack', (_dec = ccclass('gfNotifyItemStack'), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property(Sprite), _dec5 = property(SpriteAtlas), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfNotifyItemStack, _Component);

        function gfNotifyItemStack() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "userName", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "winAmount", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "iconImage", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "atlasIconFish", _descriptor4, _assertThisInitialized(_this));

          _this._iconPrefix = "";
          _this._isShow = false;
          _this._index = void 0;
          _this._config = void 0;
          return _this;
        }

        var _proto = gfNotifyItemStack.prototype;

        _proto.initObj = function initObj(index) {
          this._index = index;
          this._config = {
            SPACING: 30,
            HEIGHT: this.node.getComponent(UITransform).height,
            WIDTH: this.node.getComponent(UITransform).width,
            TIME_MOVE: 0.25
          };
          this.reset();
          this.extendInit();
        };

        _proto.extendInit = function extendInit() {};

        _proto.updateData = function updateData(dataInput) {
          var data = dataInput.data; // Override here

          this.userName.string = formatUserName(data.userName) + " ";
          this.winAmount.string = data.goldReward;
          this.userName.updateRenderData(true);
          this.winAmount.updateRenderData(true);
          this.iconImage.spriteFrame = this.atlasIconFish.getSpriteFrame(this._iconPrefix + data.itemKind);
        };

        _proto.moveToIndex = function moveToIndex(newIndex, lastItem) {
          if (lastItem === void 0) {
            lastItem = false;
          }

          if (!this.checkShow()) {
            stopAllActions(this.node);
            this.setIndex(newIndex);
            return;
          }

          var _this$_config = this._config,
              SPACING = _this$_config.SPACING,
              HEIGHT = _this$_config.HEIGHT,
              TIME_MOVE = _this$_config.TIME_MOVE;
          var postStartY = -this._index * (SPACING + HEIGHT);
          var postEndY = -newIndex * (SPACING + HEIGHT);
          var posStart = v3(0, postStartY, 0);
          var posEnd = v3(0, postEndY, 0);
          this.setIndex(newIndex);
          stopAllActions(this.node);
          this.node.setPosition(posStart);
          this.node.active = true;
          setOpacity(this.node, 255);
          SetZIndex(this.node, 1);

          if (lastItem) {
            this._isShow = false;
            tween(this.node).parallel(moveTo(TIME_MOVE, posEnd.x, posEnd.y), fadeTo(TIME_MOVE, 1)).start();
          } else {
            tween(this.node).to(TIME_MOVE, {
              position: posEnd
            }).start();
          }
        };

        _proto.showItem = function showItem(data) {
          var _this2 = this;

          var _this$_config2 = this._config,
              WIDTH = _this$_config2.WIDTH,
              TIME_MOVE = _this$_config2.TIME_MOVE;
          var posStart = v3(-WIDTH, 0, 0);
          var posEnd = v3(0, 0, 0);
          this.setIndex(0);
          stopAllActions(this.node);
          this.node.setPosition(posStart);
          this.node.active = true;
          setOpacity(this.node, 255);
          SetZIndex(this.node, 2);
          tween(this.node).call(function () {
            _this2._isShow = true;

            _this2.updateData(data);
          }).to(TIME_MOVE, {
            position: posEnd
          }).start();
        };

        _proto.hideAfterDeltaTime = function hideAfterDeltaTime(_ref) {
          var _this3 = this;

          var idleTime = _ref.idleTime,
              timeMove = _ref.timeMove;
          stopAllActions(this.node);
          tween(this.node).delay(idleTime).then(fadeTo(timeMove, 1)).call(function () {
            _this3._isShow = false;

            _this3.reset();
          }).start();
        };

        _proto.getIndex = function getIndex() {
          return this._index;
        };

        _proto.setIndex = function setIndex(index) {
          this._index = index;
        };

        _proto.checkShow = function checkShow() {
          return this._isShow;
        };

        _proto.reset = function reset() {
          stopAllActions(this.node);
          this.winAmount.string = "";
          this._isShow = false;
          this.node.active = false;
        };

        return gfNotifyItemStack;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "userName", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "winAmount", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "iconImage", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "atlasIconFish", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfNotifyJackpot.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfNotifyComponent.ts', './gfBaseConfig.ts', './gfUtilities.ts', './gfLocalize.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _inheritsLoose, _assertThisInitialized, cclegacy, _decorator, sp, UIOpacity, Color, Tween, tween, Layout, GfNotifyComponent, gfBaseConfig, deepCopy, formatString, formatUserName, gfLocalize;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
      UIOpacity = module.UIOpacity;
      Color = module.Color;
      Tween = module.Tween;
      tween = module.tween;
      Layout = module.Layout;
    }, function (module) {
      GfNotifyComponent = module.GfNotifyComponent;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      deepCopy = module.deepCopy;
      formatString = module.formatString;
      formatUserName = module.formatUserName;
    }, function (module) {
      gfLocalize = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2, _dec3, _dec4, _dec5, _class4, _class5, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "35cacSvDjRDY7UMGG0j/89Q", "gfNotifyJackpot", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var JPNotifySpineData = exports('JPNotifySpineData', (_dec = ccclass('JPNotifySpineData'), _dec2 = property(sp.SkeletonData), _dec(_class = (_class2 = function JPNotifySpineData() {
        _initializerDefineProperty(this, "type", _descriptor, this);

        _initializerDefineProperty(this, "static", _descriptor2, this);
      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "type", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return -1;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "static", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      var GfNotifyJackpot = exports('GfNotifyJackpot', (_dec3 = ccclass('GfNotifyJackpot'), _dec4 = property(sp.Skeleton), _dec5 = property(JPNotifySpineData), _dec3(_class4 = (_class5 = /*#__PURE__*/function (_GfNotifyComponent) {
        _inheritsLoose(GfNotifyJackpot, _GfNotifyComponent);

        function GfNotifyJackpot() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GfNotifyComponent.call.apply(_GfNotifyComponent, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "mainAnim", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "jpNotifySpineData", _descriptor4, _assertThisInitialized(_this));

          _this._animAppear = "animation";
          _this._animIdle = "animation2";
          _this._type = -1;
          _this._compOpacity = null;
          return _this;
        }

        var _proto = GfNotifyJackpot.prototype;

        _proto.onLoad = function onLoad() {
          this._compOpacity = this.node.getComponent(UIOpacity);
        };

        _proto.setOpacity = function setOpacity(opacity) {
          this._compOpacity.opacity = opacity;
          this.mainAnim.color = new Color(255, 255, 255, opacity);
        };

        _proto.show = function show(data) {
          if (!this.validateData(data)) return;

          if (this._lstMessage.length < gfBaseConfig.instance.NOTIFY_JACKPOT.limited_stack_size) {
            this._lstMessage.push(data);
          }

          if (!this._isShow) {
            this._isShow = true;
            this.onStackMessage();
          }
        };

        _proto.setupSpineAnim = function setupSpineAnim(type) {
          if (this._type !== type) {
            this._type = type;
            var spineData = this.getJPNotifySkeletonDataByType(this._type);
            this.mainAnim.skeletonData = spineData && spineData.isValid ? spineData : this.mainAnim.skeletonData;
          }
        };

        _proto.play = function play(dataInput) {
          var _this2 = this;

          var data = dataInput.data,
              type = dataInput.type;
          this.node.active = true;
          Tween.stopAllByTarget(this.node);
          Tween.stopAllByTarget(this.contentNode);
          this.setOpacity(255);
          this.setupSpineAnim(type);
          this.contentNode.getComponent(UIOpacity).opacity = 0;
          this.mainAnim.setAnimation(0, this._animAppear, false);
          var compOpacityContent = this.contentNode.getComponent(UIOpacity);
          var tweenShowRichText = tween(compOpacityContent).to(0.15, {
            opacity: 255
          });
          var _GameConfig$instance = gfBaseConfig.instance,
              NOTIFY_CONFIG = _GameConfig$instance.NOTIFY_CONFIG,
              NOTIFY_TYPE = _GameConfig$instance.NOTIFY_TYPE;
          var str = deepCopy(gfLocalize.instance.txtJPNotify);
          var jackpotConfig = NOTIFY_CONFIG[NOTIFY_TYPE.JACKPOT];
          str = formatString(str, [formatUserName(data[jackpotConfig.userName]), data[jackpotConfig.goldReward]]);
          str = str.replace(/'/g, '"');
          var objMessage = JSON.parse(str);
          this.createNotifyMessage(objMessage);
          this.contentNode.getComponent(Layout).updateLayout();
          this.mainAnim.setAnimation(1, this._animIdle, true);
          this.mainAnim.setCompleteListener(function (trackEntry) {
            _this2.mainAnim.setCompleteListener(function () {});

            tweenShowRichText.start();

            var compOpacity = _this2.node.getComponent(UIOpacity);

            tween(compOpacity).delay(3).call(function () {
              _this2.mainAnim.clearTrack(0);
            }).to(0.5, {
              opacity: 0
            }).call(function () {
              _this2.onStackMessage();
            }).start();
          });
        };

        _proto.validateData = function validateData(dataInput) {
          var data = dataInput.data;
          var _GameConfig$instance2 = gfBaseConfig.instance,
              NOTIFY_CONFIG = _GameConfig$instance2.NOTIFY_CONFIG,
              NOTIFY_TYPE = _GameConfig$instance2.NOTIFY_TYPE;
          var str = deepCopy(gfLocalize.instance.txtJPNotify);
          var jackpotConfig = NOTIFY_CONFIG[NOTIFY_TYPE.JACKPOT];
          str = formatString(str, [formatUserName(data[jackpotConfig.userName]), data[jackpotConfig.goldReward]]);
          str = str.replace(/'/g, '"');

          try {
            return !!JSON.parse(str);
          } catch (e) {
            return false;
          }
        };

        _proto.hide = function hide() {
          this._isShow = false;
          this.node.active = false;
        };

        _proto.getJPNotifySkeletonDataByType = function getJPNotifySkeletonDataByType(type) {
          for (var index = 0; index < this.jpNotifySpineData.length; index++) {
            var spineData = this.jpNotifySpineData[index];

            if (spineData.type === type) {
              return spineData["static"];
            }
          }

          return null;
        };

        return GfNotifyJackpot;
      }(GfNotifyComponent), (_descriptor3 = _applyDecoratedDescriptor(_class5.prototype, "mainAnim", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class5.prototype, "jpNotifySpineData", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class5)) || _class4));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfNotifyLockFish.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfUtilities.ts', './gfBaseEvents.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, UIOpacity, Component, registerEvent, removeEvents, gfBaseEvents;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      UIOpacity = module.UIOpacity;
      Component = module.Component;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfBaseEvents = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "51754JeHrtBa7Qn2SZKaoFF", "gfNotifyLockFish", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfNotifyLockFish = exports('gfNotifyLockFish', (_dec = ccclass('gfNotifyLockFish'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfNotifyLockFish, _Component);

        function gfNotifyLockFish() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = gfNotifyLockFish.prototype;

        _proto.onLoad = function onLoad() {
          this.node.getComponent(UIOpacity).opacity = 0;
          this.initEvents();
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.resetOnExit, this);
          registerEvent(gfBaseEvents.EFFECT_LAYER.SHOW_NOTIFY_LOCK_FISH, this.showNotifyLockFish, this);
          registerEvent(gfBaseEvents.EFFECT_LAYER.HIDE_NOTIFY_LOCK_FISH, this.resetOnExit, this);
        };

        _proto.showNotifyLockFish = function showNotifyLockFish() {
          this.resetOnExit();
          this.node.getComponent(UIOpacity).opacity = 255;
        };

        _proto.resetOnExit = function resetOnExit() {
          this.node.getComponent(UIOpacity).opacity = 0;
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return gfNotifyLockFish;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfNotifyMessage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfDataStore.ts', './gfLocalize.ts', './gfBaseConfig.ts', './gfUtilities.ts', './gfNotifyComponent.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Vec3, tween, Tween, Layout, UITransform, gfDataStore, gfLocalize, gfBaseConfig, deepCopy, formatString, GfNotifyComponent;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      tween = module.tween;
      Tween = module.Tween;
      Layout = module.Layout;
      UITransform = module.UITransform;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfLocalize = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      deepCopy = module.deepCopy;
      formatString = module.formatString;
    }, function (module) {
      GfNotifyComponent = module.GfNotifyComponent;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "1978dkyay5KYKZ2rPUEufhY", "gfNotifyMessage", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfNotifyMessage = exports('GfNotifyMessage', (_dec = ccclass('GfNotifyMessage'), _dec(_class = (_class2 = /*#__PURE__*/function (_GfNotifyComponent) {
        _inheritsLoose(GfNotifyMessage, _GfNotifyComponent);

        function GfNotifyMessage() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GfNotifyComponent.call.apply(_GfNotifyComponent, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "speed", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = GfNotifyMessage.prototype;

        _proto.onLoad = function onLoad() {};

        _proto.show = function show(data) {
          if (!gfBaseConfig.instance.NOTIFY_MESSAGE.position[gfDataStore.instance.getCurrentSceneName()] || !this.validateData(data)) return;
          this.sortDataMessage();

          if (!this._isShow) {
            this.runAnimShow();
          }
        };

        _proto.hide = function hide() {
          var _this2 = this;

          this._isShow = false;
          var scaleHide = new Vec3(this.node.getScale().x, 0, 1);
          tween(this.node).to(0.5, {
            scale: scaleHide
          }).call(function () {
            _this2.node.active = false;
          }).start();
        };

        _proto.runAnimShow = function runAnimShow() {
          var _this3 = this;

          var position = gfBaseConfig.instance.NOTIFY_MESSAGE.position[gfDataStore.instance.getCurrentSceneName()];
          this.node.setPosition(position.x, position.y);
          this._isShow = true;
          this.node.active = true;
          this.node.setScale(this.node.getScale().x, 0, 1);
          Tween.stopAllByTarget(this.node);
          var scaleShow = new Vec3(this.node.getScale().x, 1, 1);
          tween(this.node).to(0.5, {
            scale: scaleShow
          }).call(function () {
            _this3.onStackMessage();
          }).start();
        };

        _proto.play = function play(data) {
          var _this4 = this;

          var json = this.getStringDataNotify(data).replace(/'/g, '"');
          var objMessage = JSON.parse(json);
          this.createNotifyMessage(objMessage);
          this.contentNode.getComponent(Layout).updateLayout();
          var dX = this.contentNode.getComponent(UITransform).width + this.node.getComponent(UITransform).width;
          this.contentNode.setPosition(dX, this.contentNode.position.y);
          Tween.stopAllByTarget(this.contentNode);
          tween(this.node).delay(0).call(function () {
            var timer = 2 * dX / _this4.speed;
            var positionEndContent = new Vec3(-dX, _this4.contentNode.position.y, _this4.contentNode.position.z);
            tween(_this4.contentNode).to(timer, {
              position: positionEndContent
            }).delay(0.5).call(function () {
              _this4.onStackMessage();
            }).start();
          }).start();
        };

        _proto.validateData = function validateData(data) {
          var json = this.getStringDataNotify(data).replace(/'/g, '"');

          try {
            var result = !!JSON.parse(json);

            if (result) {
              this._lstMessage.push(data);
            }

            return result;
          } catch (e) {
            return false;
          }
        };

        _proto.getStringDataNotify = function getStringDataNotify(dataInput) {
          if (!gfLocalize || !gfLocalize.instance) return;
          var data = dataInput.data,
              message = dataInput.message,
              type = dataInput.type;
          var str = "";

          if (type >= 0) {
            var configTxtNotify = gfLocalize.instance.txtNotify;
            var _GameConfig$instance = gfBaseConfig.instance,
                NOTIFY_CONFIG = _GameConfig$instance.NOTIFY_CONFIG,
                NOTIFY_TYPE = _GameConfig$instance.NOTIFY_TYPE;

            switch (type) {
              case NOTIFY_TYPE.MESSAGE_BIG_FISH:
                // big fish
                str = deepCopy(configTxtNotify.big_fish);
                str = formatString(str, [data[NOTIFY_CONFIG[type].userName], data[NOTIFY_CONFIG[type].fishKind].toString(), data[NOTIFY_CONFIG[type].multiple].toString(), data[NOTIFY_CONFIG[type].goldReward].toString()]);
                break;

              case NOTIFY_TYPE.MESSAGE_SPECIAL_SKILL:
                // special skill
                str = deepCopy(configTxtNotify.special_skill[data[NOTIFY_CONFIG[type].subID]]);
                str = formatString(str, [data[NOTIFY_CONFIG[type].userName], data[NOTIFY_CONFIG[type].goldReward]]);
                break;

              case NOTIFY_TYPE.MESSAGE_DRAGON_BALL:
                str = deepCopy(configTxtNotify.dragon_balls);
                str = formatString(str, [data[NOTIFY_CONFIG[type].userName], data[NOTIFY_CONFIG[type].countBall], data[NOTIFY_CONFIG[type].goldReward]]);
                break;

              case NOTIFY_TYPE.MESSAGE_KILL_MINIBOSS:
                str = deepCopy(configTxtNotify.kill_miniboss);
                str = formatString(str, [data[NOTIFY_CONFIG[type].userName], data[NOTIFY_CONFIG[type].fishKind], data[NOTIFY_CONFIG[type].goldReward]]);
                break;

              case NOTIFY_TYPE.MESSAGE_DROP_ITEM_MINIBOSS:
                str = deepCopy(configTxtNotify.drop_item_miniboss);
                str = formatString(str, [data[NOTIFY_CONFIG[type].userName], data[NOTIFY_CONFIG[type].fishKind], data[NOTIFY_CONFIG[type].itemID], data[NOTIFY_CONFIG[type].goldReward]]);
                break;

              case NOTIFY_TYPE.MESSAGE_EVENT:
                str = deepCopy(configTxtNotify.event);
                str = formatString(str, [data[NOTIFY_CONFIG[type].userName], data[NOTIFY_CONFIG[type].goldReward]]);
                break;

              default:
                // normal message
                str = deepCopy(configTxtNotify.message);
                str = formatString(str, [message]);
                break;
            }
          }

          return str;
        };

        _proto.sortDataMessage = function sortDataMessage() {
          var _this5 = this;

          this._lstMessage.sort(function (a, b) {
            return a.type === 0 && b.type !== 0 ? -1 : a.type !== 0 && b.type === 0 ? 1 : 0;
          });

          this._lstMessage.sort(function (a, b) {
            var _a = {
              type: null,
              amount: null
            };
            _a.type = a.type;

            if (_a.type > 0) {
              _a.amount = _this5.replaceAmountData(a);
            }

            var _b = {
              type: null,
              amount: null
            };
            _b.type = b.type;

            if (_b.type > 0) {
              _b.amount = _this5.replaceAmountData(b);
            }

            if (_a.type !== 0 && _b.type !== 0) {
              if (_a.amount > _b.amount) return -1;
              if (_a.amount < _b.amount) return 1;
            }

            return 0;
          });

          this._lstMessage = this._lstMessage.slice(0, gfBaseConfig.instance.NOTIFY_MESSAGE.limited_stack_size);
        };

        _proto.replaceAmountData = function replaceAmountData(data) {
          var notifyConfig = gfBaseConfig.instance.NOTIFY_CONFIG[data.type];
          return Number(data.data[notifyConfig.goldReward].replace(/[^0-9.-]+/g, ""));
        };

        _proto.onBeforeSceneChange = function onBeforeSceneChange() {
          _GfNotifyComponent.prototype.onBeforeSceneChange.call(this);

          this.node.setScale(this.node.getScale().x, 0, 1);
        };

        return GfNotifyMessage;
      }(GfNotifyComponent), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "speed", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 320;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfNotifyStack.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfActionHelper.ts', './gfNotifyComponent.ts', './gfNotifyItemStack.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, SpriteAtlas, Font, BitmapFont, Prefab, instantiate, tween, warn, stopAllActions, GfNotifyComponent, gfNotifyItemStack;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      SpriteAtlas = module.SpriteAtlas;
      Font = module.Font;
      BitmapFont = module.BitmapFont;
      Prefab = module.Prefab;
      instantiate = module.instantiate;
      tween = module.tween;
      warn = module.warn;
    }, function (module) {
      stopAllActions = module.stopAllActions;
    }, function (module) {
      GfNotifyComponent = module.GfNotifyComponent;
    }, function (module) {
      gfNotifyItemStack = module.gfNotifyItemStack;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "1ccabEZJ5ZP3JktQNMP0iu5", "gfNotifyStack", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfNotifyStack = exports('GfNotifyStack', (_dec = ccclass('GfNotifyStack'), _dec2 = property({
        type: Node,
        override: true,
        visible: false
      }), _dec3 = property({
        type: SpriteAtlas,
        override: true,
        visible: false
      }), _dec4 = property({
        override: true,
        visible: false
      }), _dec5 = property({
        type: Font,
        override: true,
        visible: false
      }), _dec6 = property({
        type: BitmapFont,
        override: true,
        visible: false
      }), _dec7 = property(Prefab), _dec(_class = (_class2 = /*#__PURE__*/function (_GfNotifyComponent) {
        _inheritsLoose(GfNotifyStack, _GfNotifyComponent);

        function GfNotifyStack() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GfNotifyComponent.call.apply(_GfNotifyComponent, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "contentNode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "atlasFishNotify", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "defaultFontSize", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "defaultFont", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "moneyFont", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "itemPrefab", _descriptor6, _assertThisInitialized(_this));

          _this._listItem = [];
          _this.CONFIG_HIDE = void 0;
          _this.NOTIFY_FORMAT = void 0;
          _this.NOTIFY_TYPE = void 0;
          _this.NOTIFY_CONFIG = void 0;
          return _this;
        }

        var _proto = GfNotifyStack.prototype;

        _proto.onLoad = function onLoad() {
          var _this$NOTIFY_FORMAT;

          _GfNotifyComponent.prototype.onLoad.call(this);

          this.NOTIFY_CONFIG = {
            STACK_SIZE: 25,
            IDLE_TIME: 1.5,
            TIME_MOVE: 0.25,
            MAX_ITEM: 3
          };
          this.NOTIFY_TYPE = {
            BIG_FISH: 2,
            SPECIAL_SKILL: 3,
            DRAGON_BALL: 4,
            KILL_MINI_BOSS: 5,
            DROP_ITEM_MINI_BOSS: 6
          };
          this.NOTIFY_FORMAT = (_this$NOTIFY_FORMAT = {}, _this$NOTIFY_FORMAT[this.NOTIFY_TYPE.BIG_FISH] = {
            userName: 0,
            itemKind: 1,
            goldReward: 2
          }, _this$NOTIFY_FORMAT[this.NOTIFY_TYPE.SPECIAL_SKILL] = {
            userName: 0,
            itemKind: 1,
            goldReward: 2
          }, _this$NOTIFY_FORMAT[this.NOTIFY_TYPE.DRAGON_BALL] = {
            userName: 0,
            itemKind: 1,
            goldReward: 2
          }, _this$NOTIFY_FORMAT[this.NOTIFY_TYPE.KILL_MINI_BOSS] = {
            userName: 0,
            itemKind: 1,
            goldReward: 3
          }, _this$NOTIFY_FORMAT[this.NOTIFY_TYPE.DROP_ITEM_MINI_BOSS] = {
            userName: 0,
            itemKind: 1,
            childItem: 2,
            goldReward: 3
          }, _this$NOTIFY_FORMAT);
          this.CONFIG_HIDE = {
            IDLE_TIME: 1.5,
            TIME_MOVE: 0.25
          };

          for (var i = 0; i <= this.NOTIFY_CONFIG.MAX_ITEM; i++) {
            var item = instantiate(this.itemPrefab).getComponent(gfNotifyItemStack);
            item.node.setParent(this.node);
            item.initObj(i);

            this._listItem.push(item);
          }

          this.extendInit();
        };

        _proto.extendInit = function extendInit() {// Override here
        };

        _proto.show = function show(data) {
          if (!this.formatData(data)) return;
          this.updateListMessage(data);
          if (this._isShow) return;
          stopAllActions(this.node);
          this._isShow = true;
          this.node.active = true;
          this.onStackMessage();
        };

        _proto.play = function play(data) {
          var _this2 = this;

          var IDLE_TIME = this.NOTIFY_CONFIG.IDLE_TIME;
          stopAllActions(this.node);
          tween(this.node).call(function () {
            var mainItem = null;
            var listChildItem = [];

            _this2._listItem.forEach(function (item) {
              if (item.getIndex() == _this2._listItem.length - 1) {
                mainItem = item;
              } else {
                listChildItem.push(item);
              }
            });

            mainItem.showItem(data);

            _this2.moveDownChildItem(listChildItem);
          }).delay(IDLE_TIME).call(function () {
            _this2.onStackMessage();
          }).start();
        };

        _proto.moveDownChildItem = function moveDownChildItem(listItem) {
          var _this3 = this;

          if (listItem === void 0) {
            listItem = [];
          }

          listItem.forEach(function (item) {
            var currentIndex = item.getIndex();
            var lastItem = false;

            if (currentIndex == _this3._listItem.length - 2) {
              lastItem = true;
            }

            item.moveToIndex(currentIndex + 1, lastItem);
          });
        };

        _proto.hide = function hide() {
          var _this4 = this;

          this._isShow = false;
          stopAllActions(this.node);
          var _this$CONFIG_HIDE = this.CONFIG_HIDE,
              IDLE_TIME = _this$CONFIG_HIDE.IDLE_TIME,
              TIME_MOVE = _this$CONFIG_HIDE.TIME_MOVE;
          var countShow = 0;

          this._listItem.forEach(function (item) {
            if (item.checkShow()) countShow = countShow + 1;
          });

          var timeHide = 0;

          var _loop = function _loop(i) {
            var item = _this4._listItem.find(function (obj) {
              return obj.getIndex() === i;
            });

            var data = {
              idleTime: i === countShow - 1 ? 0 : (countShow - (i + 1)) * (IDLE_TIME + TIME_MOVE),
              timeMove: TIME_MOVE
            };
            timeHide = timeHide + data.idleTime + data.timeMove;
            item.hideAfterDeltaTime(data);
          };

          for (var i = 0; i < countShow; i++) {
            _loop(i);
          }

          tween(this.node).delay(timeHide).call(function () {
            _this4.node.active = false;
          }).start();
        };

        _proto.updateListMessage = function updateListMessage(data) {
          if (this._lstMessage.length >= this.NOTIFY_CONFIG.STACK_SIZE) {
            this._lstMessage.shift();
          }

          this._lstMessage.push(data);

          this.sortDataMessage(this._lstMessage);
        };

        _proto.formatData = function formatData(dataInput) {
          if (dataInput.formatted) return true;
          var data = dataInput.data,
              type = dataInput.type;
          var format = this.NOTIFY_FORMAT[type];

          if (format) {
            var keys = Object.keys(format);
            var newData = {};
            keys.forEach(function (key) {
              newData[key] = data[format[key]];
            });
            dataInput.data = newData;
            dataInput.formatted = true;
            return true;
          }

          warn('Invalid message:', dataInput);
          return false;
        };

        _proto.sortDataMessage = function sortDataMessage(lstMessage) {
          var _this5 = this;

          lstMessage.sort(function (a, b) {
            return a.type === 0 && b.type !== 0 ? -1 : a.type !== 0 && b.type === 0 ? 1 : 0;
          });
          lstMessage.sort(function (a, b) {
            var _a = {};
            _a.type = a.type;

            if (_a.type > 0) {
              _a.amount = _this5.replaceAmountData(a);
            }

            var _b = {};
            _b.type = b.type;

            if (_b.type > 0) {
              _b.amount = _this5.replaceAmountData(b);
            }

            if (_a.type !== 0 && _b.type !== 0) {
              if (_a.amount > _b.amount) return -1;
              if (_a.amount < _b.amount) return 1;
            }

            return 0;
          });
          return lstMessage;
        };

        _proto.replaceAmountData = function replaceAmountData(data) {
          return Number(data.data.goldReward.replace(/[^0-9.-]+/g, ""));
        };

        _proto.onBeforeSceneChange = function onBeforeSceneChange() {
          stopAllActions(this.node);

          this._listItem.forEach(function (item) {
            item.reset();
          });
        };

        return GfNotifyStack;
      }(GfNotifyComponent), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "contentNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "atlasFishNotify", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "defaultFontSize", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 32;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "defaultFont", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "moneyFont", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "itemPrefab", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfOverrideEngine.ts", ['cc', './gfBaseConfig.ts'], function (exports) {
  'use strict';

  var cclegacy, sys, view, game, macro, gfBaseConfig;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      sys = module.sys;
      view = module.view;
      game = module.game;
      macro = module.macro;
    }, function (module) {
      gfBaseConfig = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "32b5eAam8dLFbjLylOHcuBP", "gfOverrideEngine", undefined);

      var gfOverrideEngine = exports('default', /*#__PURE__*/function () {
        function gfOverrideEngine() {
          this.originalInitFrameSizeFunc = void 0;
          gfOverrideEngine.instance = this;
          this.overrideFunctions();
        }

        var _proto = gfOverrideEngine.prototype;

        _proto.overrideFunctions = function overrideFunctions() {
          this.overrideInitFrameSize();
        };

        _proto.restoreToDefaults = function restoreToDefaults() {
          this.restoreInitFrameSize();
        };

        _proto.overrideInitFrameSize = function overrideInitFrameSize() {
          if (gfBaseConfig.instance.LoadGameByPrefab) return;
          var isIOSBrowser = sys.os === sys.OS.IOS && sys.isBrowser && sys.isMobile;
          if (!isIOSBrowser) return;
          this.originalInitFrameSizeFunc = view['_initFrameSize'];

          view['_initFrameSize'] = function () {
            var locFrameSize = view['_frameSize'];
            var w = game.frame.clientWidth;
            var h = game.frame.clientHeight;
            var isLandscape = w >= h;

            if (!sys.isMobile || isLandscape && view['_orientation'] & macro.ORIENTATION_LANDSCAPE || !isLandscape && view['_orientation'] & macro.ORIENTATION_PORTRAIT) {
              locFrameSize.width = window.innerWidth;
              locFrameSize.height = window.innerHeight;
              game.container.style['-webkit-transform'] = 'rotate(0deg)';
              game.container.style.transform = 'rotate(0deg)';
              view['_isRotated'] = false;
            } else {
              locFrameSize.width = h;
              locFrameSize.height = w;
              game.container.style['-webkit-transform'] = 'rotate(90deg)';
              game.container.style.transform = 'rotate(90deg)';
              game.container.style['-webkit-transform-origin'] = '0px 0px 0px';
              game.container.style.transformOrigin = '0px 0px 0px';
              view['_isRotated'] = true;
              game.canvas.style['-webkit-transform'] = 'translateZ(0px)';
              game.canvas.style.transform = 'translateZ(0px)';
            }

            if (view['_orientationChanging']) {
              setTimeout(function () {
                view['_orientationChanging'] = false;
              }, 1000);
            }
          };
        };

        _proto.restoreInitFrameSize = function restoreInitFrameSize() {
          if (this.originalInitFrameSizeFunc) {
            view['_initFrameSize'] = this.originalInitFrameSizeFunc;
            this.originalInitFrameSizeFunc = null;
          }
        };

        return gfOverrideEngine;
      }());
      gfOverrideEngine.instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfPersisNodeController.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfUtilities.ts', './gfBaseEvents.ts', './gfNotifyController.ts', './gfPopupController.ts', './gfSoundBase.ts', './gfBaseConfig.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, game, Component, registerEvent, removeEvents, gfBaseEvents, gfNotifyController, gfPopupController, GfSoundBase, gfBaseConfig;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      game = module.game;
      Component = module.Component;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfNotifyController = module.default;
    }, function (module) {
      gfPopupController = module.default;
    }, function (module) {
      GfSoundBase = module.GfSoundBase;
    }, function (module) {
      gfBaseConfig = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "9bcd7Izw+ZNDbm0/jweVcIp", "gfPersisNodeController", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfPersisNodeController = exports('GfPersisNodeController', (_dec = ccclass('GfPersisNodeController'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfPersisNodeController, _Component);

        function GfPersisNodeController() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "notifyController", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "popupController", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "soundController", _descriptor3, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = GfPersisNodeController.prototype;

        _proto.onLoad = function onLoad() {
          if (!gfBaseConfig.instance.LoadGameByPrefab) {
            game.addPersistRootNode(this.node);
          }

          this.initEvents();
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.COMMON.REMOVE_PERSIST_NODE, this.removePersisNode, this);
        };

        _proto.removePersisNode = function removePersisNode() {
          var compNotify = this.notifyController.getComponent(gfNotifyController);
          compNotify.refreshPage();
          var compPopup = this.popupController.getComponent(gfPopupController);
          compPopup.refreshPage();

          if (this.soundController) {
            var compSound = this.soundController.getComponent(GfSoundBase);
            compSound && compSound.refreshPage();
          }

          if (!gfBaseConfig.instance.LoadGameByPrefab) {
            game.removePersistRootNode(this.node);
          }

          removeEvents(this);
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return GfPersisNodeController;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "notifyController", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "popupController", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "soundController", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfPlayAndDestroy.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, sp, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "25430KmEBxJHY0rVIsXD4d+", "gfPlayAndDestroy", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfPlayAndDestroy = exports('gfPlayAndDestroy', (_dec = ccclass('gfPlayAndDestroy'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfPlayAndDestroy, _Component);

        function gfPlayAndDestroy() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = gfPlayAndDestroy.prototype;

        _proto.onLoad = function onLoad() {
          var _this = this;

          var spine = this.node.getComponent(sp.Skeleton);
          spine.setCompleteListener(function () {
            _this.node.removeFromParent();

            _this.node.destroy();
          });
        };

        return gfPlayAndDestroy;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfPlayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfEventEmitter.ts', './gfBaseEvents.ts', './gfBaseConfig.ts', './gfDataStore.ts', './gfReferenceManager.ts', './gfUtilities.ts', './gfActionHelper.ts', './utils.ts', './gfNetworkGameEvent.ts', './gfLocalize.ts', './gfFishManager.ts', './gfWallet.ts', './loadConfigAsync.ts', './gfBallTray.ts', './gfFreezeGunFX.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Node, Sprite, warn, Button, Animation, Tween, tween, log, isValid, Component, gfEventEmitter, gfBaseEvents, gfBaseConfig, gfDataStore, gfReferenceManager, formatUserName, getBetValue, setBetValue, getRotation, removeEvents, delay, fadeOut, call, formatMoney, setOpacity, getPostionInOtherNode, changeParent, gfNetworkGameEvent, gfLocalize, gfFishManager, gfWallet, loadConfigAsync, GfBallTray, GfFreezeGunFX;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Node = module.Node;
      Sprite = module.Sprite;
      warn = module.warn;
      Button = module.Button;
      Animation = module.Animation;
      Tween = module.Tween;
      tween = module.tween;
      log = module.log;
      isValid = module.isValid;
      Component = module.Component;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      formatUserName = module.formatUserName;
      getBetValue = module.getBetValue;
      setBetValue = module.setBetValue;
      getRotation = module.getRotation;
      removeEvents = module.removeEvents;
    }, function (module) {
      delay = module.delay;
      fadeOut = module.fadeOut;
      call = module.call;
    }, function (module) {
      formatMoney = module.formatMoney;
      setOpacity = module.setOpacity;
      getPostionInOtherNode = module.getPostionInOtherNode;
      changeParent = module.changeParent;
    }, function (module) {
      gfNetworkGameEvent = module.default;
    }, function (module) {
      gfLocalize = module.default;
    }, function (module) {
      gfFishManager = module.default;
    }, function (module) {
      gfWallet = module.gfWallet;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      GfBallTray = module.GfBallTray;
    }, function (module) {
      GfFreezeGunFX = module.GfFreezeGunFX;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10;

      cclegacy._RF.push({}, "53ffflFBBhP7KzpIBzR/K/9", "gfPlayer", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfPlayer = exports('gfPlayer', (_dec = ccclass('gfPlayer'), _dec2 = property(Label), _dec3 = property(gfWallet), _dec4 = property(Label), _dec5 = property(Node), _dec6 = property(Sprite), _dec7 = property(Node), _dec8 = property(Node), _dec9 = property(Node), _dec10 = property(Node), _dec11 = property(GfBallTray), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfPlayer, _Component);

        function gfPlayer() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "txtUserName", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "wallet", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "txtBet", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "gun", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "avatar", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnPlus", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnMinus", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "_gunIndex", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "gunNode", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "ballTray", _descriptor10, _assertThisInitialized(_this));

          _this._isGunSkill = false;
          _this._userID = null;
          _this._SkillID = 0;
          _this.isMe = false;
          _this.DeskStation = -1;
          _this.effectIsMe = null;
          _this.effectMaxGun = null;
          _this.waitingText = null;
          _this.avatarAtlas = void 0;
          _this.gunSprite = null;
          _this.index = -1;
          _this._gunValue = 0;
          _this.isFreezed = void 0;
          return _this;
        }

        var _proto = gfPlayer.prototype;

        _proto.getGunIndex = function getGunIndex() {
          return this._gunIndex;
        };

        _proto.setGunIndex = function setGunIndex(gunIndex) {
          this._gunIndex = gunIndex;
        };

        _proto.getIsGunSkill = function getIsGunSkill() {
          return this._isGunSkill;
        };

        _proto.setIsGunSkill = function setIsGunSkill(isGunSkill) {
          this._isGunSkill = isGunSkill;
        };

        _proto.initObj = function initObj(data) {
          this.isMe = data.DeskStation === gfDataStore.instance.getSelfDeskStation();

          if (data.UserID === this._userID && !this.isMe) {
            this.updateData(data);
            return;
          }

          this.DeskStation = data.DeskStation;
          this._userID = data.UserID;
          this.reset();
          this.setActive(true);
          this.updateAvatar(data);
          this.txtUserName.string = formatUserName(data.Username);
          this.forceUpdateWallet(data.Wallet);
          this.toggleBtnPlusMinus();

          if (this.isMe) {
            gfDataStore.instance.setSelfInfo({
              isLockGun: false,
              skillLock: false
            });
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.INTERACTABLE_HUD, true);
            this.effectIsMe.setPosition(this.node.getPosition());
            this.effectMaxGun.active = false;

            var _this$effectMaxGun$ge = this.effectMaxGun.getPosition(),
                y = _this$effectMaxGun$ge.y,
                z = _this$effectMaxGun$ge.z;

            this.effectMaxGun.setPosition(this.node.position.x, y, z);

            if (data.BulletMultiple == 0) {
              data.BulletMultiple = getBetValue(gfBaseConfig.instance.GameId, gfDataStore.instance.getCurrentRoom());
            }

            if (data.listItem) {
              for (var i = 0; i < data.listItem.length; i++) {
                gfDataStore.instance.setListItemSkillByData(data.listItem[i]);
                gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.UPDATE_TOTAL_FREEZE_SKILL);
              }
            }
          }

          this.waitingText.active = false;
          this._gunIndex = gfDataStore.instance.getBulletIndex(data.BulletMultiple);

          this._updateGun();

          if (gfFishManager.instance.isDragonInGame()) {
            this.resumeBallTray(data.Balls);
          } else if (data.Balls) {
            warn("DRAGON SHOULD BE IN GAME");
          }

          if (this.isMe) {
            var config = gfDataStore.instance.getGunValue();
            var wallet = this.wallet.getDisplayWallet();
            var realWallet = this.wallet.getRealWallet();

            if (wallet < this._gunValue) {
              if (wallet < config[0]) {
                if (!this.checkIfHaveDragon()) {
                  if (realWallet < config[0]) {
                    gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.OFF_ALL_TARGET);
                    this.showPopupNoMoney();
                  }
                }
              } else {
                for (var index = config.length - 1; index >= 0; index--) {
                  var gunValue = config[index];

                  if (wallet >= gunValue) {
                    this._gunIndex = gfDataStore.instance.getBulletIndex(config[index]);

                    this._updateGun();

                    return true;
                  }
                }
              }
            }
          }
        };

        _proto.updateAvatar = function updateAvatar(data) {
          if (this.avatarAtlas) {
            var frameAvatar = this.avatarAtlas.getSpriteFrame(data.Avatar);

            if (!frameAvatar) {
              frameAvatar = this.avatarAtlas.getSpriteFrame(gfBaseConfig.instance.DEFAULT_AVATAR);
            }

            this.avatar.spriteFrame = frameAvatar;
          }
        };

        _proto.updateData = function updateData(data) {
          this.updateAvatar(data);
          this.txtUserName.string = formatUserName(data.Username);
          this.forceUpdateWallet(data.Wallet);
          this.toggleBtnPlusMinus();
          this.waitingText.active = false;
          this._gunIndex = gfDataStore.instance.getBulletIndex(data.BulletMultiple);

          this._updateGun();
        };

        _proto.isActive = function isActive() {
          return this.node.active;
        };

        _proto.toggleBtnPlusMinus = function toggleBtnPlusMinus() {
          if (this.btnMinus) this.btnMinus.active = this.isMe;
          if (this.btnPlus) this.btnPlus.active = this.isMe;
        } // _hideBtnPlusMinus() {
        //     if (this.btnMinus) this.btnMinus.active = false;
        //     if (this.btnPlus) this.btnPlus.active = false;
        // }
        ;

        _proto.updateGunData = function updateGunData(gunIndex) {
          this._gunIndex = gunIndex;

          this._updateGun();
        };

        _proto._updateGun = function _updateGun() {
          if (this.btnMinus) this.btnMinus.getComponent(Button).interactable = !(this._gunIndex === 0);
          if (this.btnPlus) this.btnPlus.getComponent(Button).interactable = !(this._gunIndex === gfDataStore.instance.getTotalGun() - 1);
          this._gunValue = gfDataStore.instance.getGunValue()[this._gunIndex];
          this.txtBet.string = formatMoney(this._gunValue);

          this._playEffectChangeGun();

          if (this.isMe && gfDataStore.instance.getSelfInfo().skillLock) {
            if (this.btnPlus) this.btnPlus.getComponent(Button).interactable = false;
            if (this.btnMinus) this.btnMinus.getComponent(Button).interactable = false;
          }
        };

        _proto._playEffectChangeGun = function _playEffectChangeGun() {
          this._playEffectFire();
        };

        _proto._playEffectFire = function _playEffectFire(gunName) {
          var spriteGunNode = this.gun.getChildByName('SpriteGun');

          if (spriteGunNode) {
            if (!gunName) gunName = "gun" + (this._gunIndex + 1);
            this._isGunSkill = Object.values(gfBaseConfig.instance.GunSkill).indexOf(gunName) > -1;
            spriteGunNode.getComponent(Sprite).spriteFrame = this.gunSprite[gunName];
            spriteGunNode.getComponent(Animation).play();
          }
        };

        _proto.lockBet = function lockBet(isLock) {
          if (isLock === void 0) {
            isLock = false;
          }

          if (isLock) {
            if (this.btnPlus) this.btnPlus.getComponent(Button).interactable = false;
            if (this.btnMinus) this.btnMinus.getComponent(Button).interactable = false;
          } else {
            this._updateGun();
          }
        };

        _proto.onBtnPlus = function onBtnPlus() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK_BET);
          this._gunIndex++;

          if (!this._checkMaxGun()) {
            this._gunIndex--;
            return;
          }

          if (this._gunIndex >= gfDataStore.instance.getTotalGun()) {
            this._gunIndex = 0;
          }

          this._updateGun();
        };

        _proto._checkMaxGun = function _checkMaxGun() {
          var _this2 = this;

          if (gfDataStore.instance.getGunValue()[this._gunIndex] > this.wallet.getDisplayWallet()) {
            this.effectMaxGun.active = true;
            Tween.stopAllByTarget(this.effectMaxGun);
            setOpacity(this.effectMaxGun, 255);
            var fadeAction = tween(this.effectMaxGun);
            fadeAction.then(delay(1));
            fadeAction.then(fadeOut(2));
            fadeAction.then(call(function () {
              _this2.effectMaxGun.active = false;
            }));
            fadeAction.start();
            return false;
          }

          return true;
        };

        _proto.onBtnMinus = function onBtnMinus() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK_BET);
          this._gunIndex--;

          if (this._gunIndex < 0) {
            this._gunIndex = gfDataStore.instance.getTotalGun() - 1;
          }

          this._updateGun();
        };

        _proto.onUserFire = function onUserFire(data) {
          if (this.isMe) {
            if (gfDataStore.instance.isReachMaxNumBullet()) return;
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.GUN_FIRE, this._gunIndex);
          }

          this.gun.angle = this.checkAngleByLockFish(data);

          if (!this.isMe) {
            this._gunIndex = gfDataStore.instance.getBulletIndex(data.BulletMultiple);

            this._updateGun();
          } else {
            setBetValue(gfBaseConfig.instance.GameId, gfDataStore.instance.getCurrentRoom(), data.BulletMultiple);
            if (this.effectIsMe.active) this.effectIsMe.active = false;

            if (data.LockedFishID > -1) {
              this._playEffectLockFish(data);
            }
          }

          this._playEffectFire();

          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.CREATE_BULLET, data);
        };

        _proto.checkAngleByLockFish = function checkAngleByLockFish(data) {
          if (data.LockedFishID >= 0) {
            var fish = gfFishManager.instance.getFishById(data.LockedFishID);
            var startPos = getPostionInOtherNode(gfReferenceManager.instance.getNodeGameLayer(), this.gun);
            var angle = 0;

            if (fish) {
              var endPos = fish.getLockPositionByNodeSpace(gfReferenceManager.instance.getNodeGameLayer());
              angle = getRotation(endPos, startPos);

              if (this.index > 1) {
                angle += 360;
              }

              data.Angle = angle;
            }
          }

          return data.Angle;
        };

        _proto.onStartBot = function onStartBot() {
          if (!this.isMe) return;
          this.lockBet(true);

          var _DataStore$instance$g = gfDataStore.instance.getSelfInfo(),
              isLockGun = _DataStore$instance$g.isLockGun,
              skillLock = _DataStore$instance$g.skillLock;
        };

        _proto._updateAngle = function _updateAngle(angle) {
          if (angle < 0 && angle > -90) {
            return 0;
          }

          if (angle < -90 && angle > -180) {
            return -180;
          }

          return angle;
        };

        _proto.rotateGun = function rotateGun(mousePos) {
          var angle = getRotation(mousePos, this.gun.worldPosition);
          this.gun.angle = this._updateAngle(angle);
        };

        _proto.getGunAngle = function getGunAngle() {
          return this.gun.angle;
        };

        _proto.forceUpdateWallet = function forceUpdateWallet(value) {
          if (this.isMe) {
            gfDataStore.instance.setSelfInfo({
              Wallet: value
            });
          }

          this.wallet.forceUpdateWallet(value);
        };

        _proto.updateWallet = function updateWallet(value) {
          if (this.isMe) {
            gfDataStore.instance.setSelfInfo({
              Wallet: value
            });
            log("REAL WALLET:" + formatMoney(value));
          }

          this.wallet.updateWallet(value);
        };

        _proto.addGoldReward = function addGoldReward(reward) {
          this.wallet.addGoldReward(reward);
        };

        _proto.addToDisplayWallet = function addToDisplayWallet(amount) {
          this.wallet.addToDisplay(amount);

          if (amount > 0 && gfDataStore.instance.isAutoPaused()) {
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.RESUME_AUTO_FIRE);
          }
        };

        _proto.getBallHolder = function getBallHolder(index) {
          return this.ballTray.getBallHolder(index);
        };

        _proto.checkHaveBallTrayOnActived = function checkHaveBallTrayOnActived() {
          if (this.ballTray && !this.ballTray.isAppear()) {
            this.resumeBallTray(0);
          }
        };

        _proto.showBallTray = function showBallTray() {
          var _this3 = this;

          if (!this.ballTray) return;
          this.scheduleOnce(function () {
            _this3.ballTray.appear();
          }, 1);
        };

        _proto.resumeBallTray = function resumeBallTray(ballCount) {
          if (ballCount === void 0) {
            ballCount = 0;
          }

          if (!this.ballTray) return;
          this.ballTray.appear();
          gfEventEmitter.instance.emit(gfBaseEvents.DRAGON.ADD_BALL_TO_PLAYER, {
            ballCount: ballCount,
            playerIndex: this.index
          });
          this.ballTray.onBallEnter(ballCount);
        };

        _proto.onBallDropDone = function onBallDropDone() {
          this.ballTray.onBallEnter();
        };

        _proto.hideBallTray = function hideBallTray() {
          if (!this.ballTray) return;
          this.ballTray.disappear();
        };

        _proto.reset = function reset() {
          this.unscheduleAllCallbacks();
          this.stopFreezeEffect();
          var angle = 90;

          if (this.index == 2 || this.index == 3) {
            angle = -90;
          }

          this.gun.angle = angle;

          if (this.ballTray) {
            this.ballTray.hide();
          }
        };

        _proto.resetOnExit = function resetOnExit() {
          this.unscheduleAllCallbacks();

          if (this.isMe) {
            if (this.effectIsMe.active) this.effectIsMe.active = false;
            gfDataStore.instance.setSelfInfo({
              isLockGun: false
            });
          }

          this.setActive(false);

          if (this.ballTray) {
            this.ballTray.hide();
          }

          this.txtUserName.string = '';
          this.wallet.resetOnExit();
          this.txtBet.string = '';
          this._gunIndex = 0;
          this._gunValue = 0;
          this.avatar.spriteFrame = null;
          this.resetUserId();
          this.stopFreezeEffect();
        };

        _proto.setActive = function setActive(active) {
          if (active === void 0) {
            active = true;
          }

          this.node.active = active;
        };

        _proto.resetUserId = function resetUserId() {
          this._userID = null;
        };

        _proto._playEffectLockFish = function _playEffectLockFish(data) {
          var fish = gfFishManager.instance.getFishById(data.LockedFishID);

          if (fish) {
            gfEventEmitter.instance.emit(gfBaseEvents.PLAYER_LAYER.START_LOCK_FISH, fish, this.gun);
          }
        };

        _proto.checkUpdateGunByWallet = function checkUpdateGunByWallet() {
          var config = gfDataStore.instance.getGunValue();
          var wallet = this.wallet.getDisplayWallet();
          var realWallet = this.wallet.getRealWallet();

          if (wallet < this._gunValue) {
            if (wallet < config[0]) {
              if (!this.checkIfHaveDragon()) {
                if (realWallet < config[0]) {
                  gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.OFF_ALL_TARGET);
                  this.showPopupNoMoney();
                }
              }

              return false;
            }

            if (config[this._gunIndex] >= wallet) {
              for (var i = this._gunIndex - 1; i >= 0; --i) {
                if (config[i] <= wallet) {
                  this._gunIndex = i;
                  break;
                }
              }

              this._updateGun();
            }
          }

          return true;
        };

        _proto.checkIfHaveDragon = function checkIfHaveDragon() {
          var _this4 = this;

          if (parseInt(gfDataStore.instance.getCurrentRoom()) !== parseInt(gfBaseConfig.instance.RoomKind.VIP)) {
            return false;
          }

          var config = gfDataStore.instance.getGunValue();
          var effectDragon = gfReferenceManager.instance.getEffectLayer().getComponent('gfEffectDragon');

          if (!isValid(effectDragon)) {
            if (gfReferenceManager.instance.getBossFxNode()) {
              effectDragon = gfReferenceManager.instance.getBossFxNode().getComponent('gfEffectDragon');
            }
          }

          var minBet = config[0];

          if (effectDragon) {
            var ballCount = effectDragon.getMyTotalBall();

            if (ballCount === 0 && this.wallet.getRealWallet() < minBet) {
              gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.OFF_ALL_TARGET);
              this.showPopupNoMoney();
            } else if (ballCount > 0) {
              if (!gfDataStore.instance.isAutoPaused()) {
                gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.PAUSE_AUTO_FIRE);
              }

              var data = {
                customMsg: gfLocalize.instance.txtCustomNotify.NotEnoughCoin,
                customCallbacks: {
                  confirmCallback: function confirmCallback() {
                    var currentBallCount = effectDragon.getMyTotalBall();

                    if (currentBallCount === 0 && _this4.wallet.getRealWallet() >= minBet && gfDataStore.instance.isAutoPaused()) {
                      gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.RESUME_AUTO_FIRE);
                    } else {
                      var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
                          LOGIN_IFRAME = _loadConfigAsync$getC.LOGIN_IFRAME;

                      if (LOGIN_IFRAME && typeof globalThis.ingameDeposit === 'function') {
                        globalThis.ingameDeposit();
                      }
                    }
                  },
                  rejectCallback: function rejectCallback() {}
                }
              };
              gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_PROMPT, data);
            }

            return true;
          }

          return false;
        };

        _proto.activeFreezeEffect = function activeFreezeEffect() {
          var compFreezeGun = this.node.getComponent(GfFreezeGunFX);
          compFreezeGun && compFreezeGun.activeFreezeEffect();
        };

        _proto.stopFreezeEffect = function stopFreezeEffect() {
          var compFreezeGun = this.node.getComponent(GfFreezeGunFX);
          compFreezeGun && compFreezeGun.stopFreezeGunEffect();
        };

        _proto.isHoldingSkillGun = function isHoldingSkillGun() {
          return this._isGunSkill;
        };

        _proto.showPopupNoMoney = function showPopupNoMoney() {
          if (!this.isMe) return;
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_PROMPT, gfNetworkGameEvent.MSG_CODE.NO_MONEY_IN_GAME);
        };

        _proto.setSkillID = function setSkillID(SkillID) {
          this._SkillID = SkillID;
        };

        _proto.getSkillID = function getSkillID() {
          return this._SkillID;
        };

        _proto.addGunSkill = function addGunSkill(gunData) {
          var GunSkillNode = gunData.GunSkillNode,
              SkillID = gunData.SkillID,
              isResume = gunData.isResume; // Show gunSkill

          GunSkillNode.parent = this.gun;
          this.setSkillID(SkillID); //Hide normalGun

          if (this.ballTray && isValid(this.ballTray.node)) {
            changeParent(this.ballTray.node, GunSkillNode);
          }

          this.gunNode.active = false;

          if (this.isMe) {
            this.lockBet(true);
          }

          GunSkillNode.getComponent("gfGunSkill").showGunSkill({
            DeskStation: this.DeskStation,
            SkillID: SkillID,
            isResume: isResume
          });
        };

        _proto.removeGunSkill = function removeGunSkill() {
          if (this.ballTray && isValid(this.ballTray.node)) {
            changeParent(this.ballTray.node, this.gunNode);
          }

          this.gunNode.active = true;

          this._updateGun();

          this.setSkillID(0);
        };

        _proto.onDestroy = function onDestroy() {
          this.unscheduleAllCallbacks();
          removeEvents(this);
        };

        return gfPlayer;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "txtUserName", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "wallet", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "txtBet", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "gun", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "avatar", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "btnPlus", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "btnMinus", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "_gunIndex", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "gunNode", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "ballTray", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfPlayerLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfEventEmitter.ts', './gfBaseEvents.ts', './gfDataStore.ts', './gfReferenceManager.ts', './gfUtilities.ts', './utils.ts', './gfPlayer.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, SpriteFrame, SpriteAtlas, Component, gfEventEmitter, gfBaseEvents, gfDataStore, gfReferenceManager, registerEvent, removeEvents, convertAssetArrayToObject, gfPlayer;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      SpriteFrame = module.SpriteFrame;
      SpriteAtlas = module.SpriteAtlas;
      Component = module.Component;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      convertAssetArrayToObject = module.convertAssetArrayToObject;
    }, function (module) {
      gfPlayer = module.gfPlayer;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "37a30WpvLFGmIqvZRPer6t7", "gfPlayerLayer", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfPlayerLayer = exports('gfPlayerLayer', (_dec = ccclass('gfPlayerLayer'), _dec2 = property(gfPlayer), _dec3 = property(Node), _dec4 = property(SpriteFrame), _dec5 = property(SpriteAtlas), _dec6 = property(Node), _dec7 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfPlayerLayer, _Component);

        function gfPlayerLayer() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "listPlayer", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listWaiting", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listGunSprite", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "avatarAtlas", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "effectIsMe", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "effectMaxGun", _descriptor6, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = gfPlayerLayer.prototype;

        _proto.onLoad = function onLoad() {
          this.node['getPlayerByDeskStation'] = this.getPlayerByDeskStation.bind(this);
          this.node['getPlayerByIndex'] = this.getPlayerByIndex.bind(this);
          this.initEvents();
          this.configAllPlayer();
          this.hideAllPlayer();
          gfReferenceManager.instance.setData({
            PlayerLayer: this.node
          });
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.PLAYER_LAYER.UPDATE_LIST_PLAYER, this.updateListPlayer, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.PLAYER_JOIN_BOARD, this.playerJoinBoard, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.PLAYER_LEAVE_BOARD, this.playerLeaveBoard, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.GAME_UPDATE_WALLET, this.playerUpdateWallet, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.HIDE_IS_ME, this.hideIsMe, this);
          registerEvent(gfBaseEvents.GAME_LAYER.CATCH_FISH, this.playerCatchFish, this);
          registerEvent(gfBaseEvents.GAME_LAYER.CATCH_FISH_BY_SKILL, this.playerCatchFishBySkill, this);
          registerEvent(gfBaseEvents.GAME_LAYER.ON_PLAYER_FIRE, this.playerFire, this);
          registerEvent(gfBaseEvents.DRAGON.WARNING, this.onDragonWarning, this);
          registerEvent(gfBaseEvents.DRAGON.DONE_ALL_BIGWIN, this.hideBallTray, this);
          registerEvent(gfBaseEvents.DRAGON.CREATE, this.onDragonCreated, this);
          registerEvent(gfBaseEvents.DRAGON.DONE_BALL_DROP, this.onBallDropDone, this);
          registerEvent(gfBaseEvents.GAME_LAYER.RECEIVE_LASER_GUN, this.onReceiveLaser, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.SHOW_POPUP_NO_MONEY, this.playerShowPopupNoMoney, this);
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.hideAllPlayer, this);
          registerEvent(gfBaseEvents.GAME_LAYER.GAME_CHANGE_ROUND, this.onChangeRound, this);
        };

        _proto.configAllPlayer = function configAllPlayer() {
          for (var i = 0; i < this.listPlayer.length; i++) {
            this.listPlayer[i].gunSprite = convertAssetArrayToObject(this.listGunSprite);
            this.listPlayer[i].avatarAtlas = this.avatarAtlas;
            this.listPlayer[i].waitingText = this.listWaiting[i];
            this.listPlayer[i].index = i;
            this.listPlayer[i].effectIsMe = this.effectIsMe;
            this.listPlayer[i].effectMaxGun = this.effectMaxGun;
          }
        };

        _proto.onReceiveLaser = function onReceiveLaser(DeskStation) {
          var player = this.getPlayerByDeskStation(DeskStation);

          if (player && player.isMe) {
            player.lockBet(true);
          }
        };

        _proto.playerShowPopupNoMoney = function playerShowPopupNoMoney() {
          var player = this.getPlayerByDeskStation(gfDataStore.instance.getSelfDeskStation());

          if (player) {
            player.showPopupNoMoney();
          }
        };

        _proto.updateListPlayer = function updateListPlayer(data) {
          for (var i = 0; i < data.length; i++) {
            var userInfo = data[i];
            var player = this.getPlayerByDeskStation(userInfo.DeskStation);

            if (player) {
              player.resetUserId();
              player.initObj(userInfo);
            }
          } //Make sure init position after init all player


          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.ON_AFTER_INIT_PLAYER_LIST);
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.HIDE_WAITING);
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_TUTORIAL);
        };

        _proto.playerJoinBoard = function playerJoinBoard(userInfo) {
          if (userInfo === void 0) {
            userInfo = null;
          }

          var player = this.getPlayerByDeskStation(userInfo.DeskStation);

          if (player) {
            player.initObj(userInfo);
            player.waitingText.active = false;
          }
        };

        _proto.playerLeaveBoard = function playerLeaveBoard(data) {
          if (data === void 0) {
            data = null;
          }

          var player = this.getPlayerByDeskStation(data.DeskStation);

          if (player) {
            player.resetOnExit();
            player.waitingText.active = true;

            if (!player.isMe) {
              gfEventEmitter.instance.emit(gfBaseEvents.PLAYER_LAYER.REMOVE_BALL, data);
            }
          }
        };

        _proto.playerFire = function playerFire(data) {
          if (data === void 0) {
            data = null;
          }

          var player = this.getPlayerByDeskStation(data.DeskStation);

          if (player) {
            player.onUserFire(data);
          }
        };

        _proto.playerUpdateWallet = function playerUpdateWallet(data) {
          var player = this.getPlayerByDeskStation(data.DeskStation);

          if (player) {
            player.updateWallet(data.Wallet);
          }
        };

        _proto.hideIsMe = function hideIsMe() {
          this.effectIsMe.active = false;
        };

        _proto.playerCatchFish = function playerCatchFish(data) {
          var player = this.getPlayerByDeskStation(data.DeskStation);

          if (player && !player.isMe) {
            if (data.Wallet || data.Wallet === 0) {
              player.updateWallet(data.Wallet);
            }
          }
        };

        _proto.playerCatchFishBySkill = function playerCatchFishBySkill(data) {
          var player = this.getPlayerByDeskStation(data.DeskStation);

          if (player && !player.isMe && (data.Wallet || data.Wallet === 0)) {
            player.updateWallet(data.Wallet);
          }
        };

        _proto.getPlayerByIndex = function getPlayerByIndex(index) {
          return this.listPlayer[index];
        };

        _proto.getPlayerByDeskStation = function getPlayerByDeskStation(deskStation) {
          if (!this.listPlayer) return null;
          var index = deskStation;

          if (gfDataStore.instance.getSelfDeskStation() >= 2) {
            index = [2, 3, 0, 1][deskStation];
          }

          return this.listPlayer[index];
        };

        _proto.onDragonWarning = function onDragonWarning() {
          this.listPlayer.forEach(function (player) {
            if (player.isActive()) {
              player.showBallTray();
            }
          });
        };

        _proto.onDragonCreated = function onDragonCreated() {
          this.listPlayer.forEach(function (player) {
            if (player.isActive()) {
              player.checkHaveBallTrayOnActived();
            }
          });
        };

        _proto.hideBallTray = function hideBallTray() {
          this.listPlayer.forEach(function (player) {
            if (player.isActive()) {
              player.hideBallTray();
            }
          });
        };

        _proto.hideAllPlayer = function hideAllPlayer() {
          for (var i = 0; i < this.listPlayer.length; ++i) {
            this.listPlayer[i].resetOnExit && this.listPlayer[i].resetOnExit();
            this.listPlayer[i].waitingText.active = true;
          }

          this.effectIsMe.active = false;
        };

        _proto.onBallDropDone = function onBallDropDone(deskStation) {
          var player = this.getPlayerByDeskStation(deskStation);

          if (player) {
            player.onBallDropDone();
          }
        };

        _proto.onChangeRound = function onChangeRound(data) {
          var isFishGroupToNormal = data.isFishGroupToNormal;

          if (!isFishGroupToNormal) {
            this.listPlayer.forEach(function (player) {
              if (player.isActive()) {
                player.stopFreezeEffect();
              }
            });
          }
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return gfPlayerLayer;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "listPlayer", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "listWaiting", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "listGunSprite", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "avatarAtlas", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "effectIsMe", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "effectMaxGun", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfPoolManager.ts", ['cc', './gfNodePool.ts', './utils.ts', './gfBaseEvents.ts', './gfBaseConfig.ts', './gfDataStore.ts', './gfReferenceManager.ts', './gfNodePoolConfig.ts', './gfUtilities.ts'], function (exports) {
  'use strict';

  var cclegacy, error, log, instantiate, isValid, gfNodePool, convertAssetArrayToObject, gfBaseEvents, gfBaseConfig, gfDataStore, gfReferenceManager, gfNodePoolConfig, registerEvent, removeEvents;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      error = module.error;
      log = module.log;
      instantiate = module.instantiate;
      isValid = module.isValid;
    }, function (module) {
      gfNodePool = module.default;
    }, function (module) {
      convertAssetArrayToObject = module.convertAssetArrayToObject;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfNodePoolConfig = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }],
    execute: function () {
      exports('POOL_TYPE', void 0);

      cclegacy._RF.push({}, "f6802Xn49FIqoYx4d/oZhco", "gfPoolManager", undefined);

      var POOL_TYPE;

      (function (POOL_TYPE) {
        POOL_TYPE[POOL_TYPE["SpineFish"] = 0] = "SpineFish";
        POOL_TYPE[POOL_TYPE["SpriteFish"] = 1] = "SpriteFish";
        POOL_TYPE[POOL_TYPE["Bullet"] = 2] = "Bullet";
        POOL_TYPE[POOL_TYPE["NetFX"] = 3] = "NetFX";
        POOL_TYPE[POOL_TYPE["Coin"] = 4] = "Coin";
        POOL_TYPE[POOL_TYPE["LuckyEffect"] = 5] = "LuckyEffect";
        POOL_TYPE[POOL_TYPE["FreezeEffect"] = 6] = "FreezeEffect";
        POOL_TYPE[POOL_TYPE["LabelCoin"] = 7] = "LabelCoin";
        POOL_TYPE[POOL_TYPE["BigExplosion"] = 8] = "BigExplosion";
        POOL_TYPE[POOL_TYPE["SmallExplosion"] = 9] = "SmallExplosion";
        POOL_TYPE[POOL_TYPE["DragonBall"] = 10] = "DragonBall";
        POOL_TYPE[POOL_TYPE["FINAL_INDEX"] = 11] = "FINAL_INDEX";
      })(POOL_TYPE || (POOL_TYPE = exports('POOL_TYPE', {})));

      var MAIN_COMPONENT = {};
      var gfPoolManager = exports('default', /*#__PURE__*/function () {
        function gfPoolManager(listPrefab) {
          this.listPrefab = void 0;
          this.pools = void 0;
          this.dragon = void 0;
          this.listBoss = [];
          gfPoolManager.instance = this;
          this.listPrefab = convertAssetArrayToObject(listPrefab);
          this.initPools();
          this.initEvents();
          this.listPrefab = null;
        }

        var _proto = gfPoolManager.prototype;

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.returnAllObjectToPool, this);
          registerEvent(gfBaseEvents.GAME_LAYER.ON_ENTER_GAME_ROOM, this.returnAllObjectToPool, this);
        };

        _proto.initPools = function initPools() {
          this.pools = [];
          this.dragon = this.instantiateBoss(this.listPrefab["gfDragon"]); //type, prefabName, mainComponent, count

          this.initPool(POOL_TYPE.SpineFish, "SpineFish", "gfSpineFish", 25); // this.initPool(POOL_TYPE.SpriteFish, "SpriteFish", "gfSpriteFish", 25);

          this.initPool(POOL_TYPE.Coin, "Coin", "gfCoinFX", 10);
          this.initPool(POOL_TYPE.Bullet, "Bullet", "gfBullet", 10);
          this.initPool(POOL_TYPE.NetFX, "NetFX", "gfNetFX", 5);
          this.initPool(POOL_TYPE.LuckyEffect, "LuckyEffect", "gfLuckyEffect", 1);
          this.initPool(POOL_TYPE.FreezeEffect, "ItemFreezeEffect", "gfItemFreezeEffect", 1);
          this.initPool(POOL_TYPE.DragonBall, "DragonBall", "gfDragonBall", 1);
          this.initPool(POOL_TYPE.LabelCoin, "LabelCoin", "gfCoinLabel", 5);
          this.initPool(POOL_TYPE.SmallExplosion, "SmallExplosion", "gfExplosionAnimationClip", 1);
          this.initPool(POOL_TYPE.BigExplosion, "BigExplosion", "gfExplosionSpine", 1);
        };

        _proto.initPool = function initPool(type, prefabName, mainComponent, count, maximum) {
          if (maximum === void 0) {
            maximum = 1000;
          }

          if (!this.listPrefab[prefabName]) {
            error("[PoolManager] Prefab not found: " + prefabName);
            return;
          }

          MAIN_COMPONENT[type] = mainComponent;

          if (MAIN_COMPONENT[type]) {
            this.pools[type] = new gfNodePool(MAIN_COMPONENT[type]);
          } else {
            this.pools[type] = new gfNodePool();
          }

          this.pools[type].init(this.listPrefab[prefabName], count, maximum);
        };

        _proto.getObjectByType = function getObjectByType(type) {
          if (!this.pools[type]) {
            error("this type do not init");
            return null;
          }

          return this.pools[type].getObj();
        };

        _proto.getObjectMainComponentByType = function getObjectMainComponentByType(type) {
          return this.pools[type].getObj().getComponent(MAIN_COMPONENT[type]);
        };

        _proto.getFishByKind = function getFishByKind(kind) {
          var config = gfNodePoolConfig.instance.getFishConfig(kind);
          if (!config) return null;
          var fishType = gfNodePoolConfig.instance.isSpriteFish(kind) ? POOL_TYPE.SpriteFish : POOL_TYPE.SpineFish;
          var fishNode = this.getObjectByType(fishType);

          if (fishNode) {
            this.updateFishComponent(fishNode, fishType, config.customComponent);
            var fish = fishNode.getComponent(MAIN_COMPONENT[fishType]);
            fish.setPoolManager(this.pools[fishType]);
            fish.node.setParent(gfReferenceManager.instance.getNodeFishLayer());
            fish.initAssets(config);
            return fish;
          }

          return null;
        };

        _proto.updateFishComponent = function updateFishComponent(fishNode, fishType, customComponent) {
          fishNode.getComponent('gfBaseFish')._destroyImmediate();

          fishNode.addComponent(customComponent ? customComponent : MAIN_COMPONENT[fishType]);
        };

        _proto.getFishWithData = function getFishWithData(data) {
          var fish = this.getFishByKind(data.FishKind);
          if (!fish) return null;
          fish.initFishData(data);
          return fish;
        };

        _proto.getBulletByKind = function getBulletByKind(data) {
          var config = gfNodePoolConfig.instance.getBulletConfig(data);
          if (!config) return null;
          var bullet = this.getObjectMainComponentByType(POOL_TYPE.Bullet);
          bullet.initAssets(config);
          return bullet;
        };

        _proto.getBulletKindByMultiple = function getBulletKindByMultiple(bulletMultiple) {
          return gfDataStore.instance.getBulletIndex(bulletMultiple);
        };

        _proto.getBulletWithData = function getBulletWithData(data) {
          var bullet = this.getBulletByKind({
            BulletIndex: this.getBulletKindByMultiple(data.BulletMultiple),
            isFreezed: data.isFreezed
          });
          if (!bullet) return null;
          bullet.initData(data);
          return bullet;
        };

        _proto.getCoin = function getCoin(kind) {
          var config = gfNodePoolConfig.instance.getCoinConfig(kind);
          if (!config) return null;
          var coin = this.getObjectMainComponentByType(POOL_TYPE.Coin);
          coin.initAssets(config);
          return coin;
        };

        _proto.getLabelCoin = function getLabelCoin(isMe) {
          if (isMe === void 0) {
            isMe = true;
          }

          var kind = isMe ? 1 : 0;
          var config = gfNodePoolConfig.instance.getLabelCoinFont(kind);
          var label = this.getObjectMainComponentByType(POOL_TYPE.LabelCoin);
          label.initAssets(config);
          return label;
        };

        _proto.createSmallExplosion = function createSmallExplosion(_ref) {
          var position = _ref.position;
          var explosion = this.getObjectByType(POOL_TYPE.SmallExplosion);
          explosion.parent = gfReferenceManager.instance.getEffectLayer();
          explosion.position = position;
          return explosion;
        };

        _proto.createBigExplosion = function createBigExplosion(_ref2) {
          var position = _ref2.position;
          var explosion = this.getObjectByType(POOL_TYPE.BigExplosion);
          explosion.parent = gfReferenceManager.instance.getEffectLayer();
          explosion.position = position;
          return explosion;
        };

        _proto.getFreezeFX = function getFreezeFX(kind) {
          var freezeitem = this.getObjectMainComponentByType(POOL_TYPE.FreezeEffect);
          freezeitem.initAssets();
          return freezeitem;
        };

        _proto.getNetFX = function getNetFX(data) {
          var kind;

          if (data.isFreezed) {
            kind = gfBaseConfig.instance.NetFx.IceNet;
          } else if (data.FishKind == gfBaseConfig.instance.FISH_KIND.MINIBOSS) {
            kind = gfBaseConfig.instance.NetFx.ExplostionNet;
          } else {
            kind = gfBaseConfig.instance.NetFx.NormalNet;
          }

          var config = gfNodePoolConfig.instance.getNetFXConfig(kind);
          if (!config) return null;
          var netfx = this.getObjectMainComponentByType(POOL_TYPE.NetFX);
          config.kind = kind;
          config.isMe = data.isMe;
          netfx.initAssets(config);
          return netfx;
        };

        _proto.getLuckyEffectWithData = function getLuckyEffectWithData(data) {
          var luckyeffect = this.getObjectMainComponentByType(POOL_TYPE.LuckyEffect);
          luckyeffect.initData(data);
          return luckyeffect;
        };

        _proto.returnAllObjectToPool = function returnAllObjectToPool() {
          this.pools.forEach(function (pool, i) {
            log("return pool: " + i);
            pool.returnAllToPool();
          });
        } //BOSS
        ;

        _proto.getDragonBall = function getDragonBall(kind) {
          var config = gfNodePoolConfig.instance.getDragonBallConfig(kind);
          if (!config) return null;
          var ball = this.getObjectMainComponentByType(POOL_TYPE.DragonBall);
          ball.initAssets(config);
          return ball;
        };

        _proto.instantiateBoss = function instantiateBoss(prefab) {
          if (prefab) {
            if (!this.checkAssetLoaded(prefab)) {
              this.listBoss.push(instantiate(prefab).getComponent(prefab.data.name));
            }
          }
        };

        _proto.getBossWithData = function getBossWithData(data, bossName) {
          var boss = this.getBossByName(bossName);

          if (boss) {
            boss.node.parent = gfReferenceManager.instance.getNodeFishLayer();
            boss.initFishData(data);
            return boss;
          }

          return null;
        };

        _proto.releaseBoss = function releaseBoss() {
          this.listBoss.forEach(function (boss) {
            if (isValid(boss.node)) boss.node.destroy();
          });
          this.listBoss.length = 0;
        };

        _proto.getBossByName = function getBossByName(name) {
          return this.listBoss.find(function (boss) {
            return boss.node.name === name;
          });
        };

        _proto.checkAssetLoaded = function checkAssetLoaded(prefab) {
          return !!this.listBoss.find(function (boss) {
            return boss && boss.node.name === prefab.data.name;
          });
        };

        _proto.destroy = function destroy() {
          removeEvents(this);
          gfNodePoolConfig.instance.destroy();
          this.pools.forEach(function (pool) {
            pool.destroy();
          });
          this.releaseBoss();
          gfPoolManager.instance = null;
        };

        return gfPoolManager;
      }());
      gfPoolManager.instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfPopupBase.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseConfig.ts', './gfEventEmitter.ts', './gfBaseEvents.ts', './gfActionHelper.ts', './gfUtilities.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Vec3, Button, Tween, tween, UIOpacity, UITransform, isValid, Component, gfBaseConfig, gfEventEmitter, gfBaseEvents, fadeIn, fadeTo, fadeOut, SetZIndex;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Vec3 = module.Vec3;
      Button = module.Button;
      Tween = module.Tween;
      tween = module.tween;
      UIOpacity = module.UIOpacity;
      UITransform = module.UITransform;
      isValid = module.isValid;
      Component = module.Component;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      fadeIn = module.fadeIn;
      fadeTo = module.fadeTo;
      fadeOut = module.fadeOut;
    }, function (module) {
      SetZIndex = module.SetZIndex;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "eb234Cads1Jt4N6YxakWEVU", "gfPopupBase", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfPopupBase = exports('GfPopupBase', (_dec = ccclass('GfPopupBase'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfPopupBase, _Component);

        function GfPopupBase() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.fadeSpeed = 0.1;
          _this._initialized = false;

          _initializerDefineProperty(_this, "popupTitle", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "contents", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "overlay", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "popupBackground", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnClose", _descriptor5, _assertThisInitialized(_this));

          _this._callback = null;
          _this._opacityShowOverlay = 150;
          _this._fullScale = 1;
          _this._showPosition = new Vec3(0, 0, 0);
          _this._animStyleShow = null;
          _this._animStyleHide = null;
          return _this;
        }

        var _proto = GfPopupBase.prototype;

        _proto.onLoad = function onLoad() {
          this.node.setScale(0, 0, 0);
          this.node.setPosition(0, 0, 0);
          this.node['show'] = this.show.bind(this);
          this.node['hide'] = this.hide.bind(this);
          this.node['resetState'] = this.onResetState.bind(this);
          this.initLanguage();
          this.initObj();
          this.initEvent();
          this.setAnimPopup();
          this.onResetState();
        };

        _proto.initObj = function initObj() {
          var _this2 = this;

          if (this._initialized) return;

          if (this.contents == null) {
            this.contents = this.node;
          }

          if (this.btnClose) {
            this.btnClose.off(Button.EventType.CLICK);
            this.btnClose.on(Button.EventType.CLICK, function () {
              gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
              _this2.btnClose.getComponent(Button).interactable = false;

              _this2.onClose();
            }, this);
          }

          this._showPosition = new Vec3(this.contents.position.x, this.contents.position.y, 1);
          this._fullScale = 1;
        };

        _proto.show = function show() {
          Tween.stopAllByTarget(this.node);

          if (this.contents) {
            Tween.stopAllByTarget(this.contents);
          }

          this.node.active = true;

          if (this.btnClose) {
            this.btnClose.getComponent(Button).interactable = true;
          }

          this.showWithEffect();
          SetZIndex(this.node, gfBaseConfig.instance.Z_INDEX.POPUP);
        };

        _proto.setAnimPopup = function setAnimPopup() {
          this._animStyleShow = gfBaseConfig.instance.POPUP_ANIMATION.DEFAULT;
          this._animStyleHide = gfBaseConfig.instance.POPUP_ANIMATION.DEFAULT;
        };

        _proto.initLanguage = function initLanguage() {};

        _proto.initEvent = function initEvent() {};

        _proto.showWithEffect = function showWithEffect() {
          var animation = tween(this.contents);
          var compOpacityContent = this.contents.getComponent(UIOpacity);

          if (!compOpacityContent) {
            compOpacityContent = this.contents.addComponent(UIOpacity);
          }

          compOpacityContent.opacity = 0;
          var hidePosition = null;

          switch (this._animStyleShow) {
            case gfBaseConfig.instance.POPUP_ANIMATION.PULSE:
              this.node.setScale(1, 1, 1);
              animation.then(tween().parallel(fadeTo(0.3, this._opacityShowOverlay), tween().to(0.15, {
                scale: new Vec3(this._fullScale + 0.1, this._fullScale + 0.1, 1)
              }, {
                easing: "sineOut"
              }).to(0.15, {
                scale: new Vec3(this._fullScale, this._fullScale, 1)
              }, {
                easing: "sineOut"
              })));
              break;

            case gfBaseConfig.instance.POPUP_ANIMATION.BOUNCE:
              this.node.setScale(new Vec3(this._fullScale, this._fullScale, 1));
              compOpacityContent.opacity = 255;
              hidePosition = new Vec3(this.contents.position.x, this.contents.position.y + this.popupBackground.getComponent(UITransform).height * 1.5, 1);
              this.contents.setPosition(hidePosition);
              animation.then(tween().to(0.65, {
                position: this._showPosition
              }, {
                easing: "backOut"
              }));
              break;

            case gfBaseConfig.instance.POPUP_ANIMATION.EASE:
              this.node.setScale(new Vec3(this._fullScale, this._fullScale, 1));
              compOpacityContent.opacity = 255;
              hidePosition = new Vec3(this.contents.position.x - this.popupBackground.getComponent(UITransform).width * 1.5, this.contents.position.y, 1);
              this.contents.setPosition(hidePosition);
              animation.then(tween().to(0.65, {
                position: this._showPosition
              }, {
                easing: "backOut"
              }));
              break;

            case gfBaseConfig.instance.POPUP_ANIMATION.FADE:
              this.node.setScale(new Vec3(this._fullScale, this._fullScale, 1));
              animation.then(fadeIn(0.3));
              break;

            default:
              this.node.setScale(new Vec3(this._fullScale, this._fullScale, 1));
              compOpacityContent.opacity = 255;
              break;
          }

          if (animation != null && animation._actions.length > 0) {
            animation.start();
          }
        };

        _proto.hideWithEffect = function hideWithEffect(animStyle) {
          var _this3 = this;

          var animation = tween(this.contents);
          var hidePosition = null;
          var style = animStyle || this._animStyleHide;

          switch (style) {
            case gfBaseConfig.instance.POPUP_ANIMATION.PULSE:
              animation.then(tween().parallel(fadeOut(0.3), tween().to(0.15, {
                scale: new Vec3(this._fullScale + 0.1, this._fullScale + 0.1, 1)
              }, {
                easing: "sineIn"
              }).to(0.15, {
                scale: new Vec3(this._fullScale - 0.1, this._fullScale - 0.1, 1)
              }, {
                easing: "sineIn"
              })).call(function () {
                _this3.node.active = false;

                _this3.onResetState();

                if (_this3._callback) {
                  _this3._callback();
                }
              }));
              break;

            case gfBaseConfig.instance.POPUP_ANIMATION.BOUNCE:
              hidePosition = new Vec3(this.contents.position.x, this.contents.position.y + this.popupBackground.getComponent(UITransform).height * 1.5, 1);
              animation.then(tween().to(0.65, {
                position: new Vec3(this._showPosition.x, hidePosition.y, 1)
              }, {
                easing: "backIn"
              }).call(function () {
                _this3.node.active = false;

                _this3.onResetState();

                if (_this3._callback) {
                  _this3._callback();
                }
              }));
              break;

            case gfBaseConfig.instance.POPUP_ANIMATION.EASE:
              hidePosition = new Vec3(this.contents.position.x - this.popupBackground.getComponent(UITransform).width * 1.5, this.contents.position.y, 1);
              animation.then(tween().to(0.65, {
                position: new Vec3(hidePosition.x, this._showPosition.y, 1)
              }, {
                easing: "backIn"
              }).call(function () {
                _this3.node.active = false;

                _this3.onResetState();

                if (_this3._callback) {
                  _this3._callback();
                }
              }));
              break;

            case gfBaseConfig.instance.POPUP_ANIMATION.FADE:
              animation.then(fadeOut(this.fadeSpeed).call(function () {
                _this3.node.active = false;

                _this3.onResetState();

                if (_this3._callback) {
                  _this3._callback();
                }
              }));
              break;

            default:
              this.node.active = false;
              this.onResetState();

              if (this._callback) {
                this._callback();
              }

              break;
          }

          if (animation && animation._actions.length > 0) {
            if (this.contents) {
              animation.start();
            }
          } else {
            this.node.active = false;
            this.onResetState();
          }
        };

        _proto.hide = function hide(animStyle) {
          this.hideWithEffect(animStyle);
        };

        _proto.getCallback = function getCallback() {
          return this._callback;
        };

        _proto.setCallback = function setCallback(callback) {
          this._callback = callback;
        };

        _proto.getInitialized = function getInitialized() {
          return this._initialized;
        };

        _proto.setInitialized = function setInitialized(isInitialized) {
          this._initialized = isInitialized;
        };

        _proto.onResetState = function onResetState() {
          if (!isValid(this.node)) return;

          if (this.contents) {
            if (!this.contents.getComponent(UIOpacity)) {
              this.contents.addComponent(UIOpacity);
            }

            this.contents.getComponent(UIOpacity).opacity = 255;
            this.contents.setPosition(new Vec3(0, 0, 1));
          }

          this.node.setScale(0, 0, 0);
        };

        _proto.onClose = function onClose() {
          var isHaveAnim = true;

          if (this._animStyleHide == gfBaseConfig.instance.POPUP_ANIMATION.DEFAULT) {
            isHaveAnim = false;
          }

          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.CLOSE_TOP_POPUP, isHaveAnim);
        };

        return GfPopupBase;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "popupTitle", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "contents", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "overlay", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "popupBackground", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "btnClose", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfPopupController.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfUtilities.ts', './gfActionHelper.ts', './gfBaseEvents.ts', './gfBaseConfig.ts', './gfDataStore.ts', './gfEventEmitter.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, screen, UITransform, sys, UIOpacity, tween, Component, SetZIndex, registerEvent, removeEvents, stopAllActions, fadeOut, gfBaseEvents, gfBaseConfig, gfDataStore, gfEventEmitter;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      screen = module.screen;
      UITransform = module.UITransform;
      sys = module.sys;
      UIOpacity = module.UIOpacity;
      tween = module.tween;
      Component = module.Component;
    }, function (module) {
      SetZIndex = module.SetZIndex;
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      stopAllActions = module.stopAllActions;
      fadeOut = module.fadeOut;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;

      cclegacy._RF.push({}, "a5556p45EFFKboqKOEZaXM8", "gfPopupController", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfPopupController = exports('default', (_dec = ccclass('gfPopupController'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Node), _dec7 = property(Node), _dec8 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfPopupController, _Component);

        function gfPopupController() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "popupSetting", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "popupHistoryJackpot", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "popupInfo", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "popupTutorial", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "popupPrompt", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "popupEventInfo", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "overlay", _descriptor7, _assertThisInitialized(_this));

          _this._popupQueue = [];
          _this._joinedGame = false;
          return _this;
        }

        var _proto = gfPopupController.prototype;

        _proto.onLoad = function onLoad() {
          this.overlay.active = false;
          SetZIndex(this.node, gfBaseConfig.instance.Z_INDEX.POPUP);
          this.initEvents();
          this.setActiveAllPopup(true);
        };

        _proto.start = function start() {
          this.setActiveAllPopup(false);
          var canvasSize = screen.windowSize;
          this.node.getComponent(UITransform).width = canvasSize.width;
          this.node.getComponent(UITransform).height = canvasSize.height;
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.COMMON.BEFORE_LOAD_SCENE, this.onBeforeSceneChange, this);
          registerEvent(gfBaseEvents.COMMON.INIT_SCENE, this.onAfterSceneChange, this);
          registerEvent(gfBaseEvents.POPUP.CLOSE_ALL, this.closeAll, this);
          registerEvent(gfBaseEvents.POPUP.POPUP_PROMPT, this.showPrompt, this);
          registerEvent(gfBaseEvents.POPUP.POPUP_SETTING, this.showSetting, this);
          registerEvent(gfBaseEvents.POPUP.POPUP_INFO, this.showInfo, this);
          registerEvent(gfBaseEvents.POPUP.POPUP_TUTORIAL, this.onJoinGame, this);
          registerEvent(gfBaseEvents.POPUP.POPUP_JACKPOT_HISTORY, this.showJPHistory, this);
          registerEvent(gfBaseEvents.POPUP.POPUP_EVENT_INFO, this.showEventInfo, this);
          registerEvent(gfBaseEvents.POPUP.CHECK_SHOW_POPUP_EVENT, this.checkShowPopupEvent, this);
          registerEvent(gfBaseEvents.COMMON.ON_SCREEN_RESIZE, this.updateSceneSize, this);
          registerEvent(gfBaseEvents.POPUP.CLOSE_TOP_POPUP, this.close, this);
        };

        _proto.onBeforeSceneChange = function onBeforeSceneChange() {
          this.closeAll();
        };

        _proto.onAfterSceneChange = function onAfterSceneChange() {
          this.popupEventInfo && this.checkShowPopupEvent();
        };

        _proto.updateSceneSize = function updateSceneSize() {
          this.node.getComponent(UITransform).width = gfBaseConfig.instance.realSize.Width;
          this.node.getComponent(UITransform).height = gfBaseConfig.instance.realSize.Height;
        };

        _proto.checkShowPopupEvent = function checkShowPopupEvent() {
          var showEventInfo = sys.localStorage.getItem(gfBaseConfig.instance.LOCAL_STORE.SHOW_EVENT_INFO);

          if (showEventInfo) {
            if (!JSON.parse(showEventInfo)) {
              this.showEventInfo(true);
            }
          } else {
            this.showEventInfo(true);
          }

          sys.localStorage.setItem(gfBaseConfig.instance.LOCAL_STORE.SHOW_EVENT_INFO, 'true');
        };

        _proto.setActiveAllPopup = function setActiveAllPopup(active) {
          if (active === void 0) {
            active = true;
          }

          this.popupSetting && (this.popupSetting.active = active);
          this.popupHistoryJackpot && (this.popupHistoryJackpot.active = active);
          this.popupPrompt && (this.popupPrompt.active = active);
          this.popupTutorial && (this.popupTutorial.active = active);
          this.popupInfo && (this.popupInfo.active = active);
          this.popupEventInfo && (this.popupEventInfo.active = active);
        };

        _proto.showEventInfo = function showEventInfo(data) {
          this._showPopup(this.popupEventInfo, data);
        };

        _proto.showJPHistory = function showJPHistory() {
          this._showPopup(this.popupHistoryJackpot);
        };

        _proto.showSetting = function showSetting() {
          this._showPopup(this.popupSetting);
        };

        _proto.showPrompt = function showPrompt(data) {
          this._showPopup(this.popupPrompt, data);
        };

        _proto.showInfo = function showInfo() {
          this._showPopup(this.popupInfo);
        };

        _proto.showTutorial = function showTutorial() {
          this._showPopup(this.popupTutorial);
        };

        _proto._showPopup = function _showPopup(currentPopup, data) {
          if (data === void 0) {
            data = null;
          }

          if (!currentPopup) {
            return;
          }

          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.HIDE_WAITING);
          this.onPopupQueue(currentPopup);
          currentPopup.show(data);
        };

        _proto.onJoinGame = function onJoinGame() {
          if (!this._joinedGame) {
            this._joinedGame = true;
            var selfInfo = gfDataStore.instance.getSelfInfo();
            var llv = sys.localStorage.getItem(gfBaseConfig.instance.LOCAL_STORE.LOCAL_LOGIN_VAR + selfInfo.UserID);

            if (llv) {
              llv = JSON.parse(llv);

              if (!llv[gfBaseConfig.instance.LOCAL_STORE.NOT_SHOW_NT]) {
                this.showTutorial();
              }
            } else {
              this.showTutorial();
            }
          }
        };

        _proto.onPopupQueue = function onPopupQueue(popup) {
          var isNew = false;
          stopAllActions(this.overlay.getComponent(UIOpacity));

          if (this._popupQueue && this._popupQueue.length > 0) {
            var currPopup = this._popupQueue[this._popupQueue.length - 1];

            if (currPopup != popup) {
              this._popupQueue[this._popupQueue.length - 1].hide();

              isNew = true;
            }
          } else {
            this.overlay.active = true;
            this.overlay.getComponent(UIOpacity).opacity = 0;
            tween(this.overlay.getComponent(UIOpacity)).to(0.3, {
              opacity: 100
            }).start();
            isNew = true;
          }

          if (isNew) {
            this._popupQueue.push(popup);
          }
        };

        _proto.close = function close(isHaveAnim) {
          var _this2 = this;

          if (isHaveAnim === void 0) {
            isHaveAnim = true;
          }

          var popup = this._popupQueue.pop();

          if (popup == null) {
            return;
          }

          popup.hide();
          stopAllActions(this.overlay.getComponent(UIOpacity));

          if (this._popupQueue.length < 1) {
            if (isHaveAnim) {
              tween(this.overlay.getComponent(UIOpacity)).to(0.3, {
                opacity: 0
              }).call(function () {
                _this2.overlay.active = false;
              }).start();
            } else {
              this.overlay.active = false;
            }

            return;
          }

          this._popupQueue[this._popupQueue.length - 1].show();
        };

        _proto.closeAll = function closeAll() {
          var _this3 = this;

          if (this._popupQueue.length < 1) {
            return;
          }

          for (var i = 0; i < this._popupQueue.length; i++) {
            this._popupQueue[i].hide(gfBaseConfig.instance.POPUP_ANIMATION.DEFAULT);
          }

          stopAllActions(this.overlay.getComponent(UIOpacity));
          tween(this.overlay.getComponent(UIOpacity)).to(0.3, {
            opacity: 0
          }).call(function () {
            _this3.overlay.active = false;
          }).start();
          this._popupQueue = [];
        };

        _proto.refreshPage = function refreshPage() {
          removeEvents(this);
        };

        _proto.closePopupByName = function closePopupByName(popupName) {
          var _this4 = this;

          var popup = null;
          this._popupQueue = this._popupQueue.filter(function (child) {
            if (child.name === popupName) {
              popup = child;
            }

            return child.name !== popupName;
          });

          if (popup == null) {
            return;
          }

          popup.hide();

          if (this._popupQueue.length < 1) {
            stopAllActions(this.overlay);
            tween(this.overlay).then(fadeOut(0.3)).call(function () {
              _this4.overlay.active = false;
            }).start();
            return;
          }

          this._popupQueue[this._popupQueue.length - 1].show();
        };

        _proto.onDestroy = function onDestroy() {
          this.refreshPage();
        };

        return gfPopupController;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "popupSetting", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "popupHistoryJackpot", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "popupInfo", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "popupTutorial", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "popupPrompt", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "popupEventInfo", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "overlay", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfPopupEventInfo.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfPopupBase.ts', './gfBaseHistory.ts', './gfBaseConfig.ts', './gfBaseEvents.ts', './gfEventEmitter.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, ToggleContainer, Node, GfPopupBase, GfBaseHistory, gfBaseConfig, gfBaseEvents, gfEventEmitter;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      ToggleContainer = module.ToggleContainer;
      Node = module.Node;
    }, function (module) {
      GfPopupBase = module.GfPopupBase;
    }, function (module) {
      GfBaseHistory = module.GfBaseHistory;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "f6324Tee55GW7idYUryXth9", "gfPopupEventInfo", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfPopupEventInfo = exports('gfPopupEventInfo', (_dec = ccclass('gfPopupEventInfo'), _dec2 = property(ToggleContainer), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(GfBaseHistory), _dec(_class = (_class2 = /*#__PURE__*/function (_GfPopupBase) {
        _inheritsLoose(gfPopupEventInfo, _GfPopupBase);

        function gfPopupEventInfo() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GfPopupBase.call.apply(_GfPopupBase, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "toggleContainer", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "pageHistory", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "pageInfo", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "history", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "eventUrl", _descriptor5, _assertThisInitialized(_this));

          _this._choiceIndex = void 0;
          _this._initialized = false;
          return _this;
        }

        var _proto = gfPopupEventInfo.prototype;

        _proto.show = function show(firstTime) {
          if (firstTime === void 0) {
            firstTime = false;
          }

          _GfPopupBase.prototype.show.call(this);

          this._choiceIndex = firstTime ? 0 : 1;
          this.toggleContainer.toggleItems[this._choiceIndex].isChecked = true;
          this._initialized = true;
          this.updatePage(this._choiceIndex);
        };

        _proto.updatePage = function updatePage(index) {
          if (parseInt(index) == 1) {
            this.pageHistory.active = true;
            this.pageInfo.active = false;

            if (this._initialized) {
              this.loadEventHistory();
            }
          } else {
            this.pageHistory.active = false;
            this.pageInfo.active = true;
          }
        };

        _proto.onClick = function onClick(event, index) {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          this._choiceIndex = parseInt(index);
          this.updatePage(index);
        };

        _proto.loadEventHistory = function loadEventHistory() {
          var data = {
            gameId: gfBaseConfig.instance.GameId,
            url: this.eventUrl
          };
          this.history.openPanel(data);
        };

        return gfPopupEventInfo;
      }(GfPopupBase), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "toggleContainer", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "pageHistory", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "pageInfo", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "history", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "eventUrl", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfPopupInfo.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseConfig.ts', './gfPopupBase.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, gfBaseConfig, GfPopupBase;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      GfPopupBase = module.GfPopupBase;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "86ccdM66AJJAayV+JjIdCJn", "gfPopupInfo", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfPopupInfo = exports('GfPopupInfo', (_dec = ccclass('GfPopupInfo'), _dec2 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_GfPopupBase) {
        _inheritsLoose(GfPopupInfo, _GfPopupBase);

        function GfPopupInfo() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GfPopupBase.call.apply(_GfPopupBase, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "pageIndexLabel", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = GfPopupInfo.prototype;

        _proto.setAnimPopup = function setAnimPopup() {
          this._animStyleShow = gfBaseConfig.instance.POPUP_ANIMATION.FADE;
          this._animStyleHide = gfBaseConfig.instance.POPUP_ANIMATION.FADE;
        };

        _proto.updateTabs = function updateTabs() {// To Do
        };

        _proto.show = function show() {
          _GfPopupBase.prototype.show.call(this);

          this.updateTabs();
        };

        return GfPopupInfo;
      }(GfPopupBase), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "pageIndexLabel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfPopupInfoPageView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfPopupInfo.ts', './gfLocalize.ts', './gfBaseEvents.ts', './gfEventEmitter.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, PageView, Button, Label, GfPopupInfo, gfLocalize, gfBaseEvents, gfEventEmitter;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      PageView = module.PageView;
      Button = module.Button;
      Label = module.Label;
    }, function (module) {
      GfPopupInfo = module.GfPopupInfo;
    }, function (module) {
      gfLocalize = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "9614fioKR9P/5tS213bx92q", "gfPopupInfoPageView", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfPopupInfoPageView = exports('GfPopupInfoPageView', (_dec = ccclass('GfPopupInfoPageView'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_GfPopupInfo) {
        _inheritsLoose(GfPopupInfoPageView, _GfPopupInfo);

        function GfPopupInfoPageView() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GfPopupInfo.call.apply(_GfPopupInfo, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "pageViewNode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnNext", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnBack", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "title", _descriptor4, _assertThisInitialized(_this));

          _this._currInfoID = 0;
          _this._pageView = null;
          return _this;
        }

        var _proto = GfPopupInfoPageView.prototype;

        _proto.initObj = function initObj() {
          if (this.getInitialized()) {
            if (this._currInfoID > 0) {
              this.initPage();
            }

            return;
          }

          _GfPopupInfo.prototype.initObj.call(this);

          this.initPage();
        };

        _proto.initPage = function initPage() {
          this._currInfoID = 0;
          this._pageView = this.pageViewNode.getComponent(PageView);

          this._pageView.node.on('page-turning', this.pageViewEvent, this);

          this._pageView.scrollToPage(this._currInfoID);

          this.activeButtons(this._currInfoID);
        };

        _proto.pageViewEvent = function pageViewEvent() {
          this._currInfoID = this._pageView.getCurrentPageIndex();
          this.activeButtons(this._currInfoID);
        };

        _proto.initLanguage = function initLanguage() {
          this.title[0] = gfLocalize.instance.popupTitle.infoHSC;
          this.title[1] = gfLocalize.instance.popupTitle.infoTNDB;
          this.title[2] = gfLocalize.instance.popupTitle.infoKN;
          this.title[3] = gfLocalize.instance.popupTitle.infoHuRong;
          this.title[4] = gfLocalize.instance.popupTitle.infoHuRong;
          this.title[5] = gfLocalize.instance.popupTitle.miniboss;
          this.title[6] = gfLocalize.instance.popupTitle.miniboss;
        };

        _proto.next = function next() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);

          this._pageView.scrollToPage(this._currInfoID + 1);

          this._currInfoID++;
          this.activeButtons(this._currInfoID);
        };

        _proto.previous = function previous() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);

          this._pageView.scrollToPage(this._currInfoID - 1);

          this._currInfoID--;
          this.activeButtons(this._currInfoID);
        };

        _proto.activeButtons = function activeButtons(id) {
          var btnNext = this.btnNext,
              btnBack = this.btnBack,
              popupTitle = this.popupTitle;

          var totalInfo = this._pageView.node.getChildByName('view').getChildByName('content').children.length;

          if (id >= totalInfo - 1) {
            id = totalInfo - 1;
            btnNext.getComponent(Button).interactable = false;
          } else {
            btnNext.getComponent(Button).interactable = true;
          }

          if (id <= 0) {
            id = 0;
            btnBack.getComponent(Button).interactable = false;
          } else {
            btnBack.getComponent(Button).interactable = true;
          }

          this._currInfoID = id;

          if (popupTitle) {
            if (popupTitle.getComponent(Label)) {
              // const textData = this.titles;
              popupTitle.getComponent(Label).string = this.title[this._currInfoID]; // textData[this.curInfoID];
            }
          }
        };

        _proto.resetInfo = function resetInfo() {
          this._pageView.scrollToPage(0, 0.01);

          this._currInfoID = 0;
          this.activeButtons(this._currInfoID);
        };

        _proto.onClose = function onClose() {
          _GfPopupInfo.prototype.onClose.call(this);

          this.resetInfo();
        };

        return GfPopupInfoPageView;
      }(GfPopupInfo), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "pageViewNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btnNext", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "btnBack", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "title", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [""];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfPopupJackpotHistory.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfLocalize.ts', './gfBaseConfig.ts', './gfPopupBase.ts', './gfBaseHistory.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, gfLocalize, gfBaseConfig, GfPopupBase, GfBaseHistory;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
    }, function (module) {
      gfLocalize = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      GfPopupBase = module.GfPopupBase;
    }, function (module) {
      GfBaseHistory = module.GfBaseHistory;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "76e0epdjAJPD6DVl+YUvUni", "gfPopupJackpotHistory", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfPopupJackpotHistory = exports('GfPopupJackpotHistory', (_dec = ccclass('GfPopupJackpotHistory'), _dec2 = property(GfBaseHistory), _dec3 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_GfPopupBase) {
        _inheritsLoose(GfPopupJackpotHistory, _GfPopupBase);

        function GfPopupJackpotHistory() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GfPopupBase.call.apply(_GfPopupBase, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "history", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "pageIndexLabel", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = GfPopupJackpotHistory.prototype;

        _proto.show = function show() {
          _GfPopupBase.prototype.show.call(this);

          var data = this.getData();
          this.history.openPanel(data);
        };

        _proto.getData = function getData() {
          return {
            gameId: gfBaseConfig.instance.GameId,
            jpList: "GRAND",
            jpPrefix: "ktf_",
            url: "jackpothistory/fish"
          };
        };

        _proto.setAnimPopup = function setAnimPopup() {
          this._animStyleShow = gfBaseConfig.instance.POPUP_ANIMATION.FADE;
          this._animStyleHide = gfBaseConfig.instance.POPUP_ANIMATION.FADE;
        };

        _proto.hide = function hide(animStyle) {
          _GfPopupBase.prototype.hide.call(this, animStyle);

          this.history.closePanel();
        };

        _proto.initLanguage = function initLanguage() {
          this.popupTitle && (this.popupTitle.getComponent(Label).string = gfLocalize.instance.popupTitle.jackpotHistory);
          this.pageIndexLabel.string = gfLocalize.instance.txtPopup.txtPageIndex;
        };

        return GfPopupJackpotHistory;
      }(GfPopupBase), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "history", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "pageIndexLabel", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfPopupPrompt.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfPopupBase.ts', './gfBaseConfig.ts', './gfLocalize.ts', './gfEventEmitter.ts', './gfBaseEvents.ts', './gfNetworkGameEvent.ts', './loadConfigAsync.ts', './gameCommonUtils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Node, Vec3, v3, UITransform, isValid, GfPopupBase, gfBaseConfig, gfLocalize, gfEventEmitter, gfBaseEvents, gfNetworkGameEvent, loadConfigAsync, gameCommonUtils;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Node = module.Node;
      Vec3 = module.Vec3;
      v3 = module.v3;
      UITransform = module.UITransform;
      isValid = module.isValid;
    }, function (module) {
      GfPopupBase = module.GfPopupBase;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfLocalize = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfNetworkGameEvent = module.default;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      gameCommonUtils = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "30ac7WFJ2lP9bxNIsxQRL3V", "gfPopupPrompt", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfPopupPrompt = exports('GfPopupPrompt', (_dec = ccclass('GfPopupPrompt'), _dec2 = property(Label), _dec3 = property(Node), _dec4 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_GfPopupBase) {
        _inheritsLoose(GfPopupPrompt, _GfPopupBase);

        function GfPopupPrompt() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GfPopupBase.call.apply(_GfPopupBase, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "txtMessage", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnYes", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnNo", _descriptor3, _assertThisInitialized(_this));

          _this._currData = null;
          _this._dataCallback = null;
          _this.posMessageWithBtn = new Vec3();
          return _this;
        }

        var _proto = GfPopupPrompt.prototype;

        _proto.onLoad = function onLoad() {
          this.posMessageWithBtn = v3(0, this.btnYes.getComponent(UITransform).height * 0.4, 1);

          _GfPopupBase.prototype.onLoad.call(this);
        };

        _proto.setAnimPopup = function setAnimPopup() {
          this._animStyleShow = gfBaseConfig.instance.POPUP_ANIMATION.FADE;
          this._animStyleHide = gfBaseConfig.instance.POPUP_ANIMATION.FADE;
        };

        _proto.initLanguage = function initLanguage() {
          this.popupTitle && (this.popupTitle.getComponent(Label).string = gfLocalize.instance.popupTitle.notice);
        };

        _proto.show = function show(data) {
          if (!this.txtMessage) return;

          if (data) {
            this._currData = data;
          }

          var _this$onPromptHandler = this.onPromptHandler(this._currData),
              msg = _this$onPromptHandler.msg,
              type = _this$onPromptHandler.type,
              callbacks = _this$onPromptHandler.callbacks;

          this.txtMessage.string = msg;
          this._dataCallback = null;

          if (callbacks) {
            this._dataCallback = callbacks;
          }

          switch (type) {
            case gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON:
              this.btnYes.setPosition(0, this.btnYes.position.y);
              this.btnYes.active = true;
              this.btnNo.active = false;
              this.btnClose.active = false;
              break;

            case gfBaseConfig.instance.POPUP_PROMPT.CONFIRM_AND_REJECT_BUTTON:
              this.btnYes.setPosition(-150, this.btnYes.position.y);
              this.btnNo.setPosition(150, this.btnNo.position.y);
              this.btnNo.active = true;
              this.btnYes.active = true;
              break;

            case gfBaseConfig.instance.POPUP_PROMPT.CONFIRM_AND_CLOSE_BUTTON:
              this.btnYes.setPosition(0, this.btnYes.position.y);
              this.btnYes.active = true;
              this.btnNo.active = false;
              this.btnClose.active = true;
              break;

            case gfBaseConfig.instance.POPUP_PROMPT.NONE_BUTTON:
              this.txtMessage.node.setPosition(0, 0, 0);
              this.btnYes.active = false;
              this.btnNo.active = false;
              this.btnClose.active = false;
              break;

            default:
              this.btnYes.active = false;
              this.btnNo.active = false;
              this.btnClose.active = false;
              break;
          }

          _GfPopupBase.prototype.show.call(this);
        };

        _proto.onConfirmClick = function onConfirmClick() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          this.onClose();

          if (this._dataCallback && this._dataCallback.confirmCallback) {
            this._dataCallback.confirmCallback();
          }

          this._currData = null;
        };

        _proto.onRejectClick = function onRejectClick() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          this.onClose();

          if (this._dataCallback && this._dataCallback.rejectCallback) {
            this._dataCallback.rejectCallback();
          }

          this._currData = null;
        };

        _proto.onResetState = function onResetState() {
          if (!isValid(this.node)) return;

          _GfPopupBase.prototype.onResetState.call(this);

          this.txtMessage.node.setPosition(this.posMessageWithBtn);
          this.btnYes.setPosition(0, this.btnYes.position.y);
          this.btnNo.active = false;
          this.btnYes.active = false;
          this.btnClose.active = false;
          this.setCallback(null);
        };

        _proto.onPromptHandler = function onPromptHandler(eventData) {
          var _this2 = this;

          var customMsg = eventData.customMsg,
              customType = eventData.customType,
              customCallbacks = eventData.customCallbacks,
              Code = eventData.Code;
          var eventCode = customMsg || Code || eventData;
          var msg = null;
          var type = null;
          var callbacks = null;

          var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
              LOGIN_IFRAME = _loadConfigAsync$getC.LOGIN_IFRAME;

          switch (eventCode) {
            case gfNetworkGameEvent.NETWORK_ERROR:
            case gfNetworkGameEvent.NETWORK_DIE:
              msg = gfLocalize.instance.NETWORK_MESSAGE.NETWORK_DIE;
              type = gfBaseConfig.instance.POPUP_PROMPT.NONE_BUTTON;
              this._animStyleHide = gfBaseConfig.instance.POPUP_ANIMATION.DEFAULT;

              if (gameCommonUtils.checkConditionCloseGameIframe()) {
                type = gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON;
                callbacks = {
                  confirmCallback: function confirmCallback() {
                    gfEventEmitter.instance.emit(gfBaseEvents.COMMON.REFRESH_PAGE);
                  }
                };
              }

              break;

            case gfNetworkGameEvent.AUTHEN_FAIL:
              msg = gfLocalize.instance.NETWORK_MESSAGE.AUTHEN_FAIL;
              type = gfBaseConfig.instance.POPUP_PROMPT.NONE_BUTTON;
              this._animStyleHide = gfBaseConfig.instance.POPUP_ANIMATION.DEFAULT;

              if (gameCommonUtils.checkConditionCloseGameIframe()) {
                type = gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON;
                callbacks = {
                  confirmCallback: function confirmCallback() {
                    gfEventEmitter.instance.emit(gfBaseEvents.COMMON.REFRESH_PAGE);
                  }
                };
              }

              break;

            case gfNetworkGameEvent.LOGIN_IN_OTHER_DEVICE:
              msg = gfLocalize.instance.NETWORK_MESSAGE.LOGIN_IN_OTHER_DEVICE;
              type = gfBaseConfig.instance.POPUP_PROMPT.NONE_BUTTON;
              this._animStyleHide = gfBaseConfig.instance.POPUP_ANIMATION.DEFAULT;

              if (gameCommonUtils.checkConditionCloseGameIframe()) {
                type = gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON;
                callbacks = {
                  confirmCallback: function confirmCallback() {
                    gfEventEmitter.instance.emit(gfBaseEvents.COMMON.REFRESH_PAGE);
                  }
                };
              }

              break;

            case gfNetworkGameEvent.NETWORK_POOR:
              msg = gfLocalize.instance.NETWORK_MESSAGE.NETWORK_POOR;
              type = gfBaseConfig.instance.POPUP_PROMPT.NONE_BUTTON;
              break;

            case gfNetworkGameEvent.MSG_CODE.DUPLICATE_LOGIN:
            case gfNetworkGameEvent.MSG_CODE.IG_DUPLICATE_LOGIN:
              msg = gfLocalize.instance.MessagesSystem[gfNetworkGameEvent.MSG_CODE.DUPLICATE_LOGIN];
              type = gfBaseConfig.instance.POPUP_PROMPT.NONE_BUTTON;
              this._animStyleHide = gfBaseConfig.instance.POPUP_ANIMATION.DEFAULT;

              if (gameCommonUtils.checkConditionCloseGameIframe()) {
                type = gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON;
                callbacks = {
                  confirmCallback: function confirmCallback() {
                    gfEventEmitter.instance.emit(gfBaseEvents.COMMON.REFRESH_PAGE);
                  }
                };
              }

              break;

            case gfNetworkGameEvent.MSG_CODE.CANT_FIND_ROOM:
            case gfNetworkGameEvent.MSG_CODE.ROOM_FULL:
              msg = gfLocalize.instance.MessagesSystem[eventCode];
              type = gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON;
              break;

            case gfNetworkGameEvent.MSG_CODE.OWN_LASER:
              msg = gfLocalize.instance.MessagesSystem[eventCode];
              msg = msg.replace("xxx", gfLocalize.instance.txtGameMode[eventData.roomCode]);
              type = gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON;
              break;

            case gfNetworkGameEvent.MSG_CODE.NO_MONEY_LOBBY:
              if (LOGIN_IFRAME && typeof ingameDeposit === 'function') {
                msg = gfLocalize.instance.MessagesSystem[gfNetworkGameEvent.MSG_CODE.CHARGE_MONEY];
                type = gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON;
                callbacks = {
                  confirmCallback: function confirmCallback() {
                    ingameDeposit();
                  }
                };
              } else {
                msg = gfLocalize.instance.MessagesSystem[gfNetworkGameEvent.MSG_CODE.NO_MONEY_LOBBY];
                type = gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON;
              }

              break;

            case gfNetworkGameEvent.MSG_CODE.NO_MONEY_IN_GAME:
              if (LOGIN_IFRAME && typeof ingameDeposit === 'function') {
                msg = gfLocalize.instance.MessagesSystem[gfNetworkGameEvent.MSG_CODE.CHARGE_MONEY];
                type = gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON;
                callbacks = {
                  confirmCallback: function confirmCallback() {
                    ingameDeposit();
                  }
                };
              } else {
                msg = gfLocalize.instance.MessagesSystem[gfNetworkGameEvent.MSG_CODE.NO_MONEY_IN_GAME];
                type = gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON;
                callbacks = {
                  confirmCallback: function confirmCallback() {
                    // Emitter.instance.emit(EventCode.COMMON.GO_LOBBY);
                    gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SEND_EXIT_GAME_SERVER);
                  }
                };
              }

              gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.OFF_ALL_TARGET);
              break;

            case gfNetworkGameEvent.MSG_CODE.NO_ACTION:
              this.scheduleOnce(this.goToLobby, 4);
              msg = gfLocalize.instance.MessagesSystem[gfNetworkGameEvent.MSG_CODE.NO_ACTION];
              type = gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON;
              callbacks = {
                confirmCallback: function confirmCallback() {
                  _this2.unschedule(_this2.goToLobby);

                  _this2.goToLobby();
                }
              };
              break;

            case gfNetworkGameEvent.MSG_CODE.SERVER_MAINTAIN:
              this.scheduleOnce(this.goToLobby, 2);
              msg = gfLocalize.instance.MessagesSystem[gfNetworkGameEvent.MSG_CODE.SERVER_MAINTAIN];
              type = gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON;
              callbacks = {
                confirmCallback: function confirmCallback() {
                  _this2.unschedule(_this2.goToLobby);

                  _this2.goToLobby();
                }
              };
              break;

            case gfNetworkGameEvent.MSG_CODE.WAITING_TIMEOUT:
              this.scheduleOnce(function () {
                gfEventEmitter.instance.emit(gfBaseEvents.COMMON.REFRESH_PAGE);
              }, 2);
              msg = gfLocalize.instance.NETWORK_MESSAGE.NETWORK_DIE;
              type = gfBaseConfig.instance.POPUP_PROMPT.NONE_BUTTON;
              break;

            default:
              msg = eventCode;
              type = customType || gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON;

              if (customCallbacks) {
                callbacks = customCallbacks;
              }

          }

          return {
            msg: msg,
            type: type,
            callbacks: callbacks
          };
        };

        _proto.goToLobby = function goToLobby() {
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.GO_LOBBY);
        };

        return GfPopupPrompt;
      }(GfPopupBase), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "txtMessage", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btnYes", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "btnNo", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfPopupSetting.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfDataStore.ts', './gfEventEmitter.ts', './gfLocalize.ts', './gfBaseConfig.ts', './gfBaseEvents.ts', './gfPopupBase.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Toggle, Label, gfDataStore, gfEventEmitter, gfLocalize, gfBaseConfig, gfBaseEvents, GfPopupBase;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Toggle = module.Toggle;
      Label = module.Label;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfLocalize = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      GfPopupBase = module.GfPopupBase;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "a460cFL2v1C6LEQTORDEruY", "gfPopupSetting", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfPopupSetting = exports('GfPopupSetting', (_dec = ccclass('GfPopupSetting'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_GfPopupBase) {
        _inheritsLoose(GfPopupSetting, _GfPopupBase);

        function GfPopupSetting() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GfPopupBase.call.apply(_GfPopupBase, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "btnJackpotHistory", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sfxCheckBox", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bgmCheckBox", _descriptor3, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = GfPopupSetting.prototype;

        _proto.start = function start() {// [3]
        };

        _proto.initObj = function initObj() {
          _GfPopupBase.prototype.initObj.call(this);

          this.btnJackpotHistory.off('click');
          this.btnJackpotHistory.on('click', this.onBtnJPHistory, this);
          this.sfxCheckBox.off('toggle');
          this.bgmCheckBox.off('toggle');
          this.sfxCheckBox.on('toggle', this.onSFXCheckBoxTouch.bind(this), this);
          this.bgmCheckBox.on('toggle', this.onBGMCheckBoxTouch.bind(this), this);
          this.setInitialized(true);
        };

        _proto.show = function show() {
          _GfPopupBase.prototype.show.call(this);

          this.sfxCheckBox.getComponent(Toggle).isChecked = gfDataStore.instance.getIsEnableSFX();
          this.bgmCheckBox.getComponent(Toggle).isChecked = gfDataStore.instance.getIsEnableBGM();
        };

        _proto.setAnimPopup = function setAnimPopup() {
          this._animStyleShow = gfBaseConfig.instance.POPUP_ANIMATION.FADE;
          this._animStyleHide = gfBaseConfig.instance.POPUP_ANIMATION.FADE;
        };

        _proto.initLanguage = function initLanguage() {
          this.popupTitle && (this.popupTitle.getComponent(Label).string = gfLocalize.instance.popupTitle.setting);
        };

        _proto.onBtnJPHistory = function onBtnJPHistory() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_JACKPOT_HISTORY);
        };

        _proto.onSFXCheckBoxTouch = function onSFXCheckBoxTouch() {
          if (!this.getInitialized()) {
            return;
          }

          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.UPDATE_EFFECT_VOL, this.sfxCheckBox.getComponent(Toggle).isChecked ? 1 : 0);
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
        };

        _proto.onBGMCheckBoxTouch = function onBGMCheckBoxTouch() {
          if (!this.getInitialized()) {
            return;
          }

          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.UPDATE_MUSIC_VOL, this.bgmCheckBox.getComponent(Toggle).isChecked ? 1 : 0);
        };

        return GfPopupSetting;
      }(GfPopupBase), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "btnJackpotHistory", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "sfxCheckBox", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "bgmCheckBox", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfPopupSettingSlider.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfDataStore.ts', './gfEventEmitter.ts', './gfLocalize.ts', './gfBaseConfig.ts', './gfBaseEvents.ts', './gfPopupBase.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, sys, ProgressBar, Slider, Label, gfDataStore, gfEventEmitter, gfLocalize, gfBaseConfig, gfBaseEvents, GfPopupBase;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      sys = module.sys;
      ProgressBar = module.ProgressBar;
      Slider = module.Slider;
      Label = module.Label;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfLocalize = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      GfPopupBase = module.GfPopupBase;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "8a501SMzE5PkIMcK0VBOwS7", "gfPopupSettingSlider", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfPopupSettingSlider = exports('GfPopupSettingSlider', (_dec = ccclass('GfPopupSettingSlider'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_GfPopupBase) {
        _inheritsLoose(GfPopupSettingSlider, _GfPopupBase);

        function GfPopupSettingSlider() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GfPopupBase.call.apply(_GfPopupBase, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "bgmSliderNode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sfxSliderNode", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "handlerBgm", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "handlerSfx", _descriptor4, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = GfPopupSettingSlider.prototype;

        _proto.setAnimPopup = function setAnimPopup() {
          this._animStyleShow = gfBaseConfig.instance.POPUP_ANIMATION.FADE;
          this._animStyleHide = gfBaseConfig.instance.POPUP_ANIMATION.FADE;
        };

        _proto.initObj = function initObj() {
          var _this2 = this;

          _GfPopupBase.prototype.initObj.call(this);

          if (sys.isNative) {
            this.handlerBgm.off('touchend');
            this.handlerBgm.off('touchcancel');
            this.handlerSfx.off('touchend');
            this.handlerSfx.off('touchcancel');
            this.handlerBgm.on('touchend', function () {
              _this2.onBtnMusicClick();
            });
            this.handlerBgm.on('touchcancel', function () {
              _this2.onBtnMusicClick();
            });
            this.handlerSfx.on('touchend', function () {
              _this2.onBtnEffectClick();
            });
            this.handlerSfx.on('touchcancel', function () {
              _this2.onBtnEffectClick();
            });
            this.bgmSliderNode.off('touchend');
            this.bgmSliderNode.off('touchcancel');
            this.sfxSliderNode.off('touchend');
            this.sfxSliderNode.off('touchcancel');
            this.bgmSliderNode.on('touchend', function () {
              _this2.onBtnMusicClick();
            });
            this.bgmSliderNode.on('touchcancel', function () {
              _this2.onBtnMusicClick();
            });
            this.sfxSliderNode.on('touchend', function () {
              _this2.onBtnEffectClick();
            });
            this.sfxSliderNode.on('touchcancel', function () {
              _this2.onBtnEffectClick();
            });
          }

          this.setInitialized(true);
        };

        _proto.updateSlider = function updateSlider() {
          this.sfxSliderNode.getChildByName("ProgressBar").getComponent(ProgressBar).progress = gfDataStore.instance.getCurrentSFXVolume();
          this.sfxSliderNode.getComponent(Slider).progress = gfDataStore.instance.getCurrentSFXVolume();
          this.bgmSliderNode.getChildByName("ProgressBar").getComponent(ProgressBar).progress = gfDataStore.instance.getCurrentBGMVolume();
          this.bgmSliderNode.getComponent(Slider).progress = gfDataStore.instance.getCurrentBGMVolume();
        };

        _proto.show = function show() {
          _GfPopupBase.prototype.show.call(this);

          this.updateSlider();
        };

        _proto.initLanguage = function initLanguage() {
          this.popupTitle && (this.popupTitle.getComponent(Label).string = gfLocalize.instance.popupTitle.setting);
        };

        _proto.onBtnJPHistory = function onBtnJPHistory() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_JACKPOT_HISTORY);
        };

        _proto.onSliderSFX = function onSliderSFX(event) {
          this.sfxSliderNode.getChildByName("ProgressBar").getComponent(ProgressBar).progress = event.progress;

          if (!sys.isNative) {
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.UPDATE_EFFECT_VOL, event.progress);
          }
        };

        _proto.onSliderBGM = function onSliderBGM(event) {
          this.bgmSliderNode.getChildByName("ProgressBar").getComponent(ProgressBar).progress = event.progress;

          if (!sys.isNative) {
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.UPDATE_MUSIC_VOL, event.progress);
          }
        };

        _proto.onBtnMusicClick = function onBtnMusicClick() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.UPDATE_MUSIC_VOL, this.bgmSliderNode.getComponent(Slider).progress);
        };

        _proto.onBtnEffectClick = function onBtnEffectClick() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.UPDATE_EFFECT_VOL, this.sfxSliderNode.getComponent(Slider).progress);
        };

        return GfPopupSettingSlider;
      }(GfPopupBase), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "bgmSliderNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "sfxSliderNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "handlerBgm", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "handlerSfx", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfPopuptutorial.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfDataStore.ts', './gfEventEmitter.ts', './gfLocalize.ts', './gfBaseConfig.ts', './gfBaseEvents.ts', './gfPopupBase.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Toggle, Label, sys, gfDataStore, gfEventEmitter, gfLocalize, gfBaseConfig, gfBaseEvents, GfPopupBase;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Toggle = module.Toggle;
      Label = module.Label;
      sys = module.sys;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfLocalize = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      GfPopupBase = module.GfPopupBase;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "efab6qvrYlOVaOvEKXi+Mjk", "gfPopuptutorial", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfPopuptutorial = exports('GfPopuptutorial', (_dec = ccclass('GfPopuptutorial'), _dec2 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_GfPopupBase) {
        _inheritsLoose(GfPopuptutorial, _GfPopupBase);

        function GfPopuptutorial() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GfPopupBase.call.apply(_GfPopupBase, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "checkBox", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = GfPopuptutorial.prototype;

        _proto.setAnimPopup = function setAnimPopup() {
          this._animStyleShow = gfBaseConfig.instance.POPUP_ANIMATION.FADE;
          this._animStyleHide = gfBaseConfig.instance.POPUP_ANIMATION.FADE;
        };

        _proto.initObj = function initObj() {
          _GfPopupBase.prototype.initObj.call(this);

          this.checkBox.getComponent(Toggle).isChecked = false;
          this.checkBox.on('toggle', this.onToggle, this);
        };

        _proto.initLanguage = function initLanguage() {
          this.popupTitle && (this.popupTitle.getComponent(Label).string = gfLocalize.instance.popupTitle.tutorial);
        };

        _proto.onToggle = function onToggle() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          this.save();
        };

        _proto.save = function save() {
          var _llv;

          if (!gfDataStore.instance || !gfBaseConfig.instance) return;
          var selfInfo = gfDataStore.instance.getSelfInfo();
          var value = this.checkBox ? this.checkBox.getComponent(Toggle).isChecked : false;
          var llv = (_llv = {}, _llv[gfBaseConfig.instance.LOCAL_STORE.NOT_SHOW_NT] = value, _llv);
          sys.localStorage.setItem(gfBaseConfig.instance.LOCAL_STORE.LOCAL_LOGIN_VAR + selfInfo.UserID, JSON.stringify(llv));
        };

        return GfPopuptutorial;
      }(GfPopupBase), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "checkBox", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfReferenceManager.ts", ['cc', './gfUtilities.ts', './gfBaseEvents.ts'], function (exports) {
  'use strict';

  var cclegacy, isEmpty, removeEvents, registerEvent, gfBaseEvents;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      isEmpty = module.isEmpty;
      removeEvents = module.removeEvents;
      registerEvent = module.registerEvent;
    }, function (module) {
      gfBaseEvents = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "657249IrpRJl7jQccHifnQ9", "gfReferenceManager", undefined);

      var gfReferenceManager = exports('default', /*#__PURE__*/function () {
        function gfReferenceManager() {
          this.CurrentScene = void 0;
          this.FishLayer = void 0;
          this.PlayerLayer = void 0;
          this.HUDLayer = void 0;
          this.EffectLayer = void 0;
          this.GameLayer = void 0;
          this.BossFxNode = void 0;
          this.EventTrayLayer = void 0;
          this.BtnFreeze = null;
          gfReferenceManager.instance = this;
          this.CurrentScene = null;
          this.FishLayer = null;
          this.PlayerLayer = null;
          this.HUDLayer = null;
          this.EffectLayer = null;
          this.GameLayer = null;
          this.BossFxNode = null;
          this.EventTrayLayer = null;
          registerEvent(gfBaseEvents.COMMON.SET_REFERENCE_DATA, this.setData, this);
        }

        var _proto = gfReferenceManager.prototype;

        _proto.setData = function setData(data) {
          var _this = this;

          if (!isEmpty(data)) {
            Object.keys(data).forEach(function (key) {
              _this[key] = data[key];
            });
          }
        };

        _proto.setBossFxNode = function setBossFxNode(bossFxNode) {
          this.BossFxNode = bossFxNode;
        };

        _proto.getBossFxNode = function getBossFxNode() {
          return this.BossFxNode;
        };

        _proto.getBtnFreeze = function getBtnFreeze() {
          return this.BtnFreeze;
        };

        _proto.getNodeFishLayer = function getNodeFishLayer() {
          return this.FishLayer;
        };

        _proto.getNodeHUDLayer = function getNodeHUDLayer() {
          return this.HUDLayer;
        };

        _proto.getNodeGameLayer = function getNodeGameLayer() {
          return this.GameLayer;
        };

        _proto.getPrefabFishByKind = function getPrefabFishByKind(fishKind) {
          var fish = this.FishLayer.getPrefabFishByKind(fishKind);
          return fish;
        };

        _proto.getPlayerByIndex = function getPlayerByIndex(index) {
          return this.PlayerLayer.getPlayerByIndex(index);
        };

        _proto.getPlayerByDeskStation = function getPlayerByDeskStation(deskStation) {
          return this.PlayerLayer.getPlayerByDeskStation(deskStation);
        };

        _proto.getEventTrayByDeskStation = function getEventTrayByDeskStation(deskStation) {
          return this.EventTrayLayer && this.EventTrayLayer.getEventTrayByDeskStation(deskStation);
        };

        _proto.getEffectLayer = function getEffectLayer() {
          return this.EffectLayer;
        };

        _proto.getPlayerLayer = function getPlayerLayer() {
          return this.PlayerLayer;
        };

        _proto.destroy = function destroy() {
          removeEvents(this);
          gfReferenceManager.instance = null;
        };

        return gfReferenceManager;
      }());
      gfReferenceManager.instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfResizeByEvent.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfBaseConfig.ts', './gfUtilities.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, UITransform, Component, gfBaseEvents, gfBaseConfig, registerEvent, removeEvents;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      UITransform = module.UITransform;
      Component = module.Component;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "d8f8e3C3IpHMpEL7vNTsyTu", "gfResizeByEvent", undefined);

      var ccclass = _decorator.ccclass;
      var gfResizeByEvent = exports('default', (_dec = ccclass('gfResizeByEvent'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfResizeByEvent, _Component);

        function gfResizeByEvent() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = gfResizeByEvent.prototype;

        _proto.start = function start() {
          registerEvent(gfBaseEvents.COMMON.ON_SCREEN_RESIZE, this.resizeNode, this);
        };

        _proto.resizeNode = function resizeNode() {
          var realSize = gfBaseConfig.instance.realSize;
          this.node.getComponent(UITransform).width = realSize.Width;
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return gfResizeByEvent;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfResizeWindow.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfDataStore.ts', './gfBaseConfig.ts', './gfUtilities.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, view, macro, Size, screen, ResolutionPolicy, math, UITransform, Component, gfBaseEvents, gfEventEmitter, gfDataStore, gfBaseConfig, showFullScreenButton;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      view = module.view;
      macro = module.macro;
      Size = module.Size;
      screen = module.screen;
      ResolutionPolicy = module.ResolutionPolicy;
      math = module.math;
      UITransform = module.UITransform;
      Component = module.Component;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      showFullScreenButton = module.showFullScreenButton;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "5a086oFlJ5FGbrlGFR24pZv", "gfResizeWindow", undefined);

      var ccclass = _decorator.ccclass;
      var gfResizeWindow = exports('default', (_dec = ccclass('gfResizeWindow'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfResizeWindow, _Component);

        function gfResizeWindow() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = gfResizeWindow.prototype;

        _proto.start = function start() {
          if (gfDataStore.instance.isPlayingLoadingTransition) {
            this.scheduleOnce(this.updateSceneSize, 0.25);
          } else {
            this.updateSceneSize();
          }

          view.setResizeCallback(this.updateSceneSize.bind(this)); //prevent resize event from common.js show button full screen

          if (window.visualViewport) {
            window.visualViewport.addEventListener('resize', this._updateButtonFullScreen);
          }
        };

        _proto._updateButtonFullScreen = function _updateButtonFullScreen() {
          var isShow = true;

          if (gfDataStore && gfDataStore.instance) {
            isShow = gfDataStore.instance.getCurrentSceneName() != gfBaseConfig.instance.SceneName.Game;
          }

          showFullScreenButton(isShow);
        };

        _proto.updateSceneSize = function updateSceneSize() {
          view.setOrientation(macro.ORIENTATION_LANDSCAPE);
          if (!gfBaseConfig.instance || !gfBaseConfig.instance.realSize) return;
          var _GameConfig$instance = gfBaseConfig.instance,
              realSize = _GameConfig$instance.realSize,
              AppSize = _GameConfig$instance.AppSize,
              SceneBox = _GameConfig$instance.SceneBox;
          var designResolution = new Size(AppSize.Width, AppSize.Height);
          var designRatio = AppSize.Width / AppSize.Height;
          var frameSize = screen.windowSize;
          var screenRatio = frameSize.width / frameSize.height;
          var canvasSize = screen.windowSize;

          if (screenRatio < designRatio) {
            view.setDesignResolutionSize(designResolution.width, designResolution.height, ResolutionPolicy.FIXED_WIDTH);
            realSize.Width = designResolution.width;
          } else {
            view.setDesignResolutionSize(designResolution.width, designResolution.height, ResolutionPolicy.FIXED_HEIGHT);
            var heightScale = AppSize.Height / canvasSize.height;
            realSize.Width = math.clamp(canvasSize.width * heightScale, AppSize.Width, AppSize.MaxWidth);
          }

          SceneBox.Left = -(realSize.Width - AppSize.Width) / 2;
          SceneBox.Right = SceneBox.Left + realSize.Width;
          this.node.getComponent(UITransform).width = realSize.Width;
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.ON_SCREEN_RESIZE);
          this.scheduleOnce(this._resizeFullScreenButton, 0.1);
        };

        _proto._resizeFullScreenButton = function _resizeFullScreenButton() {
          this.unscheduleAllCallbacks();
          var div_full_screen = document.getElementById('div_full_screen');
          var enterFullscreen = document.getElementById('enterFullscreen');
          var exitFullscreen = document.getElementById('exitFullscreen');

          if (div_full_screen) {
            if (enterFullscreen) {
              enterFullscreen.style.top = "0";
              enterFullscreen.style.left = "0";
              enterFullscreen.style.width = "100%";
              enterFullscreen.style.height = "100%";
              enterFullscreen.style.backgroundSize = "contain";
            }

            if (exitFullscreen) {
              exitFullscreen.style.top = "0";
              exitFullscreen.style.left = "0";
              exitFullscreen.style.width = "100%";
              exitFullscreen.style.height = "100%";
              exitFullscreen.style.backgroundSize = "contain";
            }

            div_full_screen.style.position = "absolute";
            div_full_screen.style.width = "30px";
            div_full_screen.style.height = "30px";

            if (window.innerWidth > window.innerHeight) {
              div_full_screen.style.top = "70%";
              div_full_screen.style.left = "10px";
            } else {
              div_full_screen.style.top = "10px";
              div_full_screen.style.left = "23%";
            }
          }
        };

        _proto.onDestroy = function onDestroy() {
          if (!gfBaseConfig.instance) {
            window.removeEventListener('resize', this._updateButtonFullScreen);
            view.setResizeCallback(null);
          }
        };

        return gfResizeWindow;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfSetOrientation.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, view, macro, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      view = module.view;
      macro = module.macro;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "fc8043iTNNPd5VcsxcT3jde", "gfSetOrientation", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfSetOrientation = exports('GfSetOrientation', (_dec = ccclass('GfSetOrientation'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfSetOrientation, _Component);

        function GfSetOrientation() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = GfSetOrientation.prototype;

        _proto.onLoad = function onLoad() {
          view.setOrientation(macro.ORIENTATION_LANDSCAPE);
        };

        return GfSetOrientation;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfSideMenu.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseConfig.ts', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfUtilities.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Vec3, Tween, tween, Component, gfBaseConfig, gfBaseEvents, gfEventEmitter, SetZIndex, registerEvent, removeEvents;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Vec3 = module.Vec3;
      Tween = module.Tween;
      tween = module.tween;
      Component = module.Component;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      SetZIndex = module.SetZIndex;
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "aab42cuFs1K7axaNphBxV/A", "gfSideMenu", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfSideMenu = exports('GfSideMenu', (_dec = ccclass('GfSideMenu'), _dec2 = property(Node), _dec3 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfSideMenu, _Component);

        function GfSideMenu() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "nodeMove", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "frameWidth", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "iconHide", _descriptor3, _assertThisInitialized(_this));

          _this.isHide = void 0;
          _this.scheduleHide = null;
          _this.isActionDone = true;
          return _this;
        }

        var _proto = GfSideMenu.prototype;

        _proto.onLoad = function onLoad() {
          SetZIndex(this.node, gfBaseConfig.instance.Z_INDEX.MENU);
          this.resetSideMenu();
          this.scheduleHide = this.hideSideBar.bind(this);
          this.initEvents();
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.resetOnExit, this);
          registerEvent(gfBaseEvents.COMMON.ON_SCREEN_RESIZE, this.updateSceneSize, this);
        };

        _proto.updateSceneSize = function updateSceneSize() {
          this.node.setPosition(gfBaseConfig.instance.realSize.Width / 2, this.node.position.y, this.node.position.z);
        };

        _proto.onInfoClick = function onInfoClick() {
          if (!this.isActionDone) return;
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_INFO);
          this.unscheduleAllCallbacks();
          this.hideSideBar();
        };

        _proto.onExitClick = function onExitClick() {
          if (!this.isActionDone) return;
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHOW_WAITING, true);
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          this.unscheduleAllCallbacks();
          this.hideSideBar();
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SEND_EXIT_GAME_SERVER);
        };

        _proto.onSettingClick = function onSettingClick() {
          if (!this.isActionDone) return;
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_SETTING); //PopupController.instance.showSetting();

          this.unscheduleAllCallbacks();
          this.hideSideBar();
        };

        _proto.onJPHistoryClick = function onJPHistoryClick() {
          if (!this.isActionDone) return;
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_JACKPOT_HISTORY); // PopupController.instance.showJPHistory();

          this.unscheduleAllCallbacks();
          this.hideSideBar();
        };

        _proto.onBtnHistoryClick = function onBtnHistoryClick() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_JACKPOT_HISTORY); // PopupController.instance.showJPHistory();

          this.unscheduleAllCallbacks();
        };

        _proto.onHideClick = function onHideClick() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          this.hideSideBar();
        };

        _proto.hideSideBar = function hideSideBar() {
          var _this2 = this;

          if (!this.isActionDone) return;
          this.unschedule(this.scheduleHide);
          this.isActionDone = false;
          var pos = new Vec3(-this.frameWidth, 0, 1);
          this.isHide = !this.isHide;
          this.iconHide.setScale(-this.iconHide.scale.x, this.iconHide.scale.y);

          if (this.isHide) {
            pos = new Vec3(5, 0, 1);
          } else {
            this.scheduleOnce(this.scheduleHide, 3);
          }

          var baseEasing = this.isHide ? "sineIn" : "sineOut";
          Tween.stopAllByTarget(this.nodeMove);
          tween(this.nodeMove).to(0.3, {
            position: pos
          }, {
            easing: baseEasing
          }).call(function () {
            _this2.isActionDone = true;
          }).start();
        };

        _proto.resetSideMenu = function resetSideMenu() {
          this.unschedule(this.scheduleHide);
          this.isHide = true;
          this.iconHide.setScale(new Vec3(-1, 1, 1));
          Tween.stopAllByTarget(this.nodeMove);
          this.nodeMove.setPosition(5, 0, 1);
          this.isActionDone = true;
        };

        _proto.resetOnExit = function resetOnExit() {
          this.resetSideMenu();
          this.unscheduleAllCallbacks();
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return GfSideMenu;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "nodeMove", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "frameWidth", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 90;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "iconHide", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfSoundBase.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfUtilities.ts', './gfDataStore.ts', './gfBaseConfig.ts', './SoundPlayerImpl.ts', './WebSoundPlayer.ts', './gfNativeSoundPlayer.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, warn, game, Game, sys, log, Node, AudioSource, gfBaseEvents, registerEvent, removeEvents, gfDataStore, gfBaseConfig, SoundPlayerImpl, WebSoundPlayer, gfNativeSoundPlayer;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      warn = module.warn;
      game = module.game;
      Game = module.Game;
      sys = module.sys;
      log = module.log;
      Node = module.Node;
      AudioSource = module.AudioSource;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      SoundPlayerImpl = module.SoundPlayerImpl;
    }, function (module) {
      WebSoundPlayer = module.WebSoundPlayer;
    }, function (module) {
      gfNativeSoundPlayer = module.gfNativeSoundPlayer;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "8ee22qaiExGPqA1k6oJTZ63", "gfSoundBase", undefined);

      var SoundStateEnum = {
        NONE: 0,
        PLAYING: 1
      };
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfSoundBase = exports('GfSoundBase', (_dec = ccclass('GfSoundBase'), _dec(_class = /*#__PURE__*/function (_SoundPlayerImpl) {
        _inheritsLoose(GfSoundBase, _SoundPlayerImpl);

        function GfSoundBase() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SoundPlayerImpl.call.apply(_SoundPlayerImpl, [this].concat(args)) || this;
          _this.scheduleResetVolume = null;
          _this.currSoundBigwin = null;
          _this.coinLoopId = null;
          _this.isGameHided = false;
          _this.oldCurrentTime = 0;
          return _this;
        }

        var _proto = GfSoundBase.prototype;

        _proto.onLoad = function onLoad() {
          this.loadSoundPlayerImpl();
          this.updateMusicVolume(gfDataStore.instance.getCurrentBGMVolume());
          this.updateEffectVolume(gfDataStore.instance.getCurrentSFXVolume());
          this.initEvents();
        };

        _proto.loadSoundPlayerImpl = function loadSoundPlayerImpl() {
          var _this2 = this;

          this._checkDuplicateAudioFile();

          this.node.setSiblingIndex(this.node.parent.children.length + 1);
          this.loadCacheConfig();

          if (this.isDebug) {
            warn("musicList", this.musicList.map(function (soundObj) {
              return soundObj.soundId;
            }));
            warn("sfxList", this.sfxList.map(function (soundObj) {
              return soundObj.soundId;
            }));
          }

          this.node.on('SET_UP_AUDIO_DATABASE', this._loadDynamicSounds.bind(this));
          game.on(Game.EVENT_HIDE, this._onEventHide, this);
          game.on(Game.EVENT_SHOW, this._onEventShow, this);
          this.isWebSound = sys.isBrowser == true && !!globalThis.Howl;

          if (this.isWebSound) {
            this._soundPlayer = new WebSoundPlayer();
          } else {
            this._soundPlayer = new gfNativeSoundPlayer();
          }

          this._soundPlayer.init(this.musicList, this.sfxList, this.node);

          if (this.isWebSound) {
            this._soundPlayer.loadSfxList(this.sfxList, function () {});

            this._soundPlayer.loadMusicList(this.musicList, function () {
              _this2._hasAudioContext = globalThis.Howler.ctx && globalThis.Howler.ctx.state === 'running';

              if (!_this2._hasAudioContext) {
                _this2._waitForUserGesture();
              } else {
                _this2._soundPlayer.skipGesture();
              }
            });
          }
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.COMMON.CLOSE_SCENE, this.stopAllAudio, this);
          registerEvent(gfBaseEvents.SOUND.RESET_VOLUME, this.onResumeSound, this);
          registerEvent(gfBaseEvents.SOUND.PLAY_SOUND_BACKGROUND, this.playBackGroundMusic, this);
          registerEvent(gfBaseEvents.SOUND.UPDATE_MUSIC_VOL, this.updateMusicVolume, this);
          registerEvent(gfBaseEvents.SOUND.UPDATE_EFFECT_VOL, this.updateEffectVolume, this);
        };

        _proto.loadCacheConfig = function loadCacheConfig() {
          var isEnableBGM = sys.localStorage.getItem(this.storageKeyBGM);
          var isEnableSFX = sys.localStorage.getItem(this.storageKeySFX);
          this.isEnableBGM = isEnableBGM != null || isEnableBGM != undefined ? JSON.parse(isEnableBGM.toString()) : true;
          this.isEnableSFX = isEnableSFX != null || isEnableSFX != undefined ? JSON.parse(isEnableSFX.toString()) : true;
          gfDataStore.instance.setDataStore({
            "isEnableBGM": this.isEnableBGM,
            "isEnableSFX": this.isEnableSFX
          });
          var effectVolume = 0;
          var musicVolume = 0;

          if (gfBaseConfig.instance.SOUND_SLIDER) {
            var storeMusicVolume = sys.localStorage.getItem(gfBaseConfig.instance.LOCAL_STORE.MUSIC_VOLUME);

            if (storeMusicVolume != null) {
              var volume = parseFloat(storeMusicVolume);

              if (this.isEnableBGM && volume > 0) {
                musicVolume = volume;
              }
            }

            var storeEffectVolume = sys.localStorage.getItem(gfBaseConfig.instance.LOCAL_STORE.EFFECT_VOLUME);

            if (storeEffectVolume != null) {
              var _volume = parseFloat(storeEffectVolume);

              if (this.isEnableSFX && _volume > 0) {
                effectVolume = _volume;
              }
            }
          }

          if (this.isEnableBGM && !musicVolume) musicVolume = 1;
          if (this.isEnableSFX && !effectVolume) effectVolume = 1;
          gfDataStore.instance.setCurrentBGMVolume(musicVolume);
          gfDataStore.instance.setCurrentSFXVolume(effectVolume);
        };

        _proto._onEventHide = function _onEventHide() {
          _SoundPlayerImpl.prototype._onEventHide.call(this);

          this.isGameHided = true;
        };

        _proto._onEventShow = function _onEventShow() {
          _SoundPlayerImpl.prototype._onEventShow.call(this);

          this.isGameHided = false;
        };

        _proto._startPlayWithUserGesture = function _startPlayWithUserGesture(ev) {
          var _this3 = this;

          log("[SoundPlayerImpl] start sound with user gesture");
          ev.preventSwallow = true;
          this.node.off(Node.EventType.TOUCH_START, this._startPlayWithUserGesture, this);
          globalThis.Howler.ctx.resume().then(function () {
            _this3._soundPlayer.resumeWithGesture();

            if (!_this3.isGameHided && _this3._soundPlayer._gamePaused) {
              _this3._soundPlayer._gamePaused = false;
            }
          });
        };

        _proto.playFishSFX = function playFishSFX(id, loop, ratio) {
          if (loop === void 0) {
            loop = false;
          }

          if (ratio === void 0) {
            ratio = 1;
          }

          var volume = gfDataStore.instance.getCurrentSFXVolume() * ratio;
          var dataSfx = null;
          dataSfx = this.playSfxOneShot(id, volume, loop);
          return dataSfx;
        };

        _proto.playFishBGM = function playFishBGM(id, loop, ratio) {
          if (loop === void 0) {
            loop = false;
          }

          if (ratio === void 0) {
            ratio = 1;
          }

          var volume = gfDataStore.instance.getCurrentBGMVolume() * ratio;
          var soundID = this.playMusic(id, loop, volume);
          return soundID;
        };

        _proto.getCurrentMusicIsPlaying = function getCurrentMusicIsPlaying() {
          var _this$_soundPlayer$ge, _this$_soundPlayer$ge2;

          if (this.isWebSound) return (_this$_soundPlayer$ge = this._soundPlayer.getCurrentMusic()) == null ? void 0 : _this$_soundPlayer$ge.playing();
          return (_this$_soundPlayer$ge2 = this._soundPlayer.getCurrentMusic()) == null ? void 0 : _this$_soundPlayer$ge2.playing;
        };

        _proto.updateMusicVolume = function updateMusicVolume(_musicVolume) {
          _musicVolume = parseFloat(_musicVolume);
          this.setMusicVolume(_musicVolume);

          if (gfBaseConfig.instance.SOUND_SLIDER) {
            sys.localStorage.setItem(gfBaseConfig.instance.LOCAL_STORE.MUSIC_VOLUME, _musicVolume.toFixed(2));
          }

          if (_musicVolume <= 0) {
            this.isEnableBGM = false;
          } else {
            this.isEnableBGM = true;
          }

          gfDataStore.instance.setIsEnableBGM(this.isEnableBGM);
          sys.localStorage.setItem(this.storageKeyBGM, this.isEnableBGM.toString()); // this.isEnableBGM = true; // Allways true, only set volume

          this.MUSIC_VOLUME = gfDataStore.instance.setCurrentBGMVolume(_musicVolume);
        };

        _proto.updateEffectVolume = function updateEffectVolume(_effectVolume) {
          _effectVolume = parseFloat(_effectVolume);
          this.setEffectVolume(_effectVolume);
          gfDataStore.instance.setCurrentSFXVolume(_effectVolume);

          if (gfBaseConfig.instance.SOUND_SLIDER) {
            sys.localStorage.setItem(gfBaseConfig.instance.LOCAL_STORE.EFFECT_VOLUME, _effectVolume.toFixed(2));
          }

          if (_effectVolume <= 0) {
            this.isEnableSFX = false;
          } else {
            this.isEnableSFX = true;
          }

          gfDataStore.instance.setIsEnableSFX(this.isEnableSFX);
          sys.localStorage.setItem(this.storageKeySFX, this.isEnableSFX.toString());
        };

        _proto.playBackGroundMusic = function playBackGroundMusic(data, init) {};

        _proto.onResumeSound = function onResumeSound() {
          if (!gfDataStore || !gfDataStore.instance) return;
          this.setMusicVolume(gfDataStore.instance.getCurrentBGMVolume());
          this.setEffectVolume(gfDataStore.instance.getCurrentSFXVolume());
        };

        _proto.setMusicVolume = function setMusicVolume(volume) {
          volume = volume < 0 ? 0 : volume;
          this.musicVolume = volume;

          this._soundPlayer.setMusicVolume(volume);
        };

        _proto.stopSound = function stopSound(dataSfx) {
          if (!dataSfx) return;
          this.stopSfxOneShot(dataSfx);
        };

        _proto.getDuration = function getDuration(dataSfx) {
          if (!dataSfx) return 0;

          if (!this.isWebSound) {
            return dataSfx.duration;
          } else {
            return dataSfx.clip.duration();
          }
        };

        _proto.checkIsIphone = function checkIsIphone() {
          return sys.OS.IOS && sys.isNative;
        };

        _proto.getPlayState = function getPlayState(id) {
          if (id !== 0 && !id) return SoundStateEnum.NONE;
          var state = SoundStateEnum.NONE;

          if (!this.isWebSound) {
            switch (id.state) {
              case AudioSource.AudioState.PLAYING:
                state = SoundStateEnum.PLAYING;
                break;
            }
          } else {
            if (typeof id != 'number') {
              if (id.playing) state = SoundStateEnum.PLAYING;
            }
          }

          return state;
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);

          _SoundPlayerImpl.prototype.onDestroy.call(this);
        };

        _proto.refreshPage = function refreshPage() {
          this.stopAllAudio();
          this.destroy();
          removeEvents(this);
        };

        return GfSoundBase;
      }(SoundPlayerImpl)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfSoundController.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseConfig.ts', './gfBaseEvents.ts', './gfDataStore.ts', './gfUtilities.ts', './gfSoundBase.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, gfBaseConfig, gfBaseEvents, gfDataStore, registerEvent, removeEvents, GfSoundBase;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      GfSoundBase = module.GfSoundBase;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "d4a44ZS5/BNTpFxh/3WVu13", "gfSoundController", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfSoundController = exports('GfSoundController', (_dec = ccclass('GfSoundController'), _dec(_class = /*#__PURE__*/function (_GfSoundBase) {
        _inheritsLoose(GfSoundController, _GfSoundBase);

        function GfSoundController() {
          return _GfSoundBase.apply(this, arguments) || this;
        }

        var _proto = GfSoundController.prototype;

        _proto.initEvents = function initEvents() {
          _GfSoundBase.prototype.initEvents.call(this);

          this.scheduleResetVolume = this.onResumeSound.bind(this);
          this.currSoundBigwin = null;
          registerEvent(gfBaseEvents.SOUND.GUN_FIRE, this.playSfxFire, this);
          registerEvent(gfBaseEvents.EFFECT_LAYER.PLAY_WAVE_TRANSITION, this.playSfxWaveTransition, this);
          registerEvent(gfBaseEvents.EFFECT_LAYER.PLAY_FISH_GROUP_TRANSITION, this.playSfxRoundSwitch, this);
          registerEvent(gfBaseEvents.SOUND.EFFECT_GOLD, this.playSfxGold, this);
          registerEvent(gfBaseEvents.SOUND.EFFECT_CATCH, this.playSfxCatch, this);
          registerEvent(gfBaseEvents.SOUND.EFFECT_BOMB, this.playSfxBomb, this);
          registerEvent(gfBaseEvents.SOUND.BIG_WIN, this.playSfxBigwin, this);
          registerEvent(gfBaseEvents.SOUND.MEGA_WIN, this.playSfxMegawin, this);
          registerEvent(gfBaseEvents.SOUND.STOP_BIG_WIN, this.stopSfxBigWin, this);
          registerEvent(gfBaseEvents.SOUND.FIRE_LASER, this.playSfxFireLaser, this);
          registerEvent(gfBaseEvents.EFFECT_LAYER.MINIBOSS_SMASH, this.playSfxMiniBossSmash, this);
          registerEvent(gfBaseEvents.SOUND.MINIBOSS_DEAD, this.playSfxMiniBossDead, this);
          registerEvent(gfBaseEvents.SOUND.MINIBOSS_HIT, this.playSfxMiniBossHit, this);
          registerEvent(gfBaseEvents.SOUND.DRAGON_SCREAM, this.playNewSfxWarning, this);
          registerEvent(gfBaseEvents.SOUND.DRAGON_DIE, this.playSfxDragonDie, this);
          registerEvent(gfBaseEvents.DRAGON.DROP_BALL, this.playSfxBallDrop, this);
          registerEvent(gfBaseEvents.DRAGON.DONE_BALL_DROP, this.playSfxBallInsert, this);
          registerEvent(gfBaseEvents.SOUND.BALL_TRAY_SHOW, this.playSfxBallTray, this);
          registerEvent(gfBaseEvents.SOUND.BALL_TRAY_DRAW, this.playSfxBallTrayDraw, this);
          registerEvent(gfBaseEvents.SOUND.COLLECT_BALL, this.playSfxCollectBalls, this);
          registerEvent(gfBaseEvents.SOUND.DRAGON_APPEAR, this.playSfxsWarning, this);
          registerEvent(gfBaseEvents.SOUND.DRAGON_BIG_WIN, this.playSfxJackpotExplode, this);
          registerEvent(gfBaseEvents.SOUND.PLAY_EFFECT_JACKPOT_COIN, this.playSfxJackpotCoin, this);
          registerEvent(gfBaseEvents.SOUND.STOP_EFFECT_JACKPOT_COIN, this.stopSfxJackpotCoin, this);
          registerEvent(gfBaseEvents.SOUND.STOP_ALL_AUDIO, this.stopAllAudio, this);
          registerEvent(gfBaseEvents.SOUND.DRAGON_HIT_BALL, this.playDragonHitBall, this);
          registerEvent(gfBaseEvents.SOUND.DRAGON_BALL_REWARD, this.playSfxWinDragonBallShow, this);
          registerEvent(gfBaseEvents.SOUND.DRAGON_BALL_HIDE, this.playSfxWinDragonBallHide, this);
          registerEvent(gfBaseEvents.SOUND.RESUME_SOUND_BACKGROUND, this.resumeSoundBackground, this);
          registerEvent(gfBaseEvents.SOUND.EFFECT_GET_ITEM_FREEZE, this.playSfxGetItemFreeze, this);
          registerEvent(gfBaseEvents.SOUND.EFFECT_GET_ITEM_LASER, this.playSfxGetItemLaser, this);
          registerEvent(gfBaseEvents.SOUND.CLICK_BET, this.playSFXClickBet, this);
          registerEvent(gfBaseEvents.SOUND.CLICK, this.playSfxClick, this);
        };

        _proto.resumeSoundBackground = function resumeSoundBackground(_ref) {
          var listFishNormal = _ref.listFishNormal,
              listFishGroup = _ref.listFishGroup;
          var dragon = listFishNormal.find(function (fish) {
            return fish.FishKind === gfBaseConfig.instance.FISH_KIND.DRAGON;
          });
          var miniBoss = listFishGroup.find(function (fish) {
            return fish.FishKind === gfBaseConfig.instance.FISH_KIND.MINIBOSS;
          });

          if (!dragon && !miniBoss) {
            this.playBackGroundMusic(gfBaseConfig.instance.SOUND_BACKGROUND_CONFIG.IN_GAME);
          }
        };

        _proto.playBackGroundMusic = function playBackGroundMusic(data, init) {
          if (init === void 0) {
            init = false;
          }

          if (gfDataStore.instance.getCurBGMusic() === data && !init && this.getCurrentMusicIsPlaying()) return;
          this.unscheduleAllCallbacks();
          this.onResumeSound();

          switch (data) {
            case gfBaseConfig.instance.SOUND_BACKGROUND_CONFIG.MINI_BOSS:
              this.playFishBGM("bgmMiniboss", true);
              break;

            case gfBaseConfig.instance.SOUND_BACKGROUND_CONFIG.DRAGON:
              this.onResumeSound();
              this.playFishBGM("bgmDragon", true);
              this.schedule(this.playSfxDragonScream.bind(this), 6);
              break;

            case gfBaseConfig.instance.SOUND_BACKGROUND_CONFIG.LOBBY:
              this.playFishBGM("bgmLobby", true);
              break;

            case gfBaseConfig.instance.SOUND_BACKGROUND_CONFIG.IN_GAME:
              this.playFishBGM("bgmMain", true);
              break;
          }

          gfDataStore.instance.setCurBGMusic(data);
        };

        _proto.playSfxCatch = function playSfxCatch() {
          this.playFishSFX("sfxCatch");
        };

        _proto.playSfxGold = function playSfxGold() {
          this.playFishSFX("sfxGold");
        };

        _proto.playSfxFire = function playSfxFire() {
          this.playFishSFX("sfxGun_fire");
        };

        _proto.playSfxsWarning = function playSfxsWarning() {
          this.playFishSFX("sfxWarning");
        };

        _proto.playSfxBigwin = function playSfxBigwin() {
          this.unschedule(this.scheduleResetVolume);
          this.setEffectVolume(gfDataStore.instance.getCurrentSFXVolume() * 0.4);
          this.setMusicVolume(gfDataStore.instance.getCurrentBGMVolume() * 0.6);

          if (this.currSoundBigwin) {
            this.stopSound(this.currSoundBigwin);
          }

          this.currSoundBigwin = this.playFishSFX("sfxBig_win");

          if (this.currSoundBigwin) {
            this.scheduleOnce(this.scheduleResetVolume, this.getDuration(this.currSoundBigwin));
          } else {
            this.onResumeSound();
          }
        };

        _proto.playSfxMegawin = function playSfxMegawin() {
          this.unschedule(this.scheduleResetVolume);
          this.setEffectVolume(gfDataStore.instance.getCurrentSFXVolume() * 0.4);
          this.setMusicVolume(gfDataStore.instance.getCurrentBGMVolume() * 0.6);

          if (this.currSoundBigwin) {
            this.stopSound(this.currSoundBigwin);
          }

          this.currSoundBigwin = this.playFishSFX("sfxMega_win");

          if (this.currSoundBigwin) {
            this.scheduleOnce(this.scheduleResetVolume, this.getDuration(this.currSoundBigwin));
          } else {
            this.onResumeSound();
          }
        };

        _proto.stopSfxBigWin = function stopSfxBigWin() {
          if (this.currSoundBigwin) {
            this.stopSound(this.currSoundBigwin);
            this.currSoundBigwin = null;
          }
        };

        _proto.playSfxBomb = function playSfxBomb() {
          this.playFishSFX("sfxBomb");
        };

        _proto.playSfxFreeze = function playSfxFreeze() {
          this.playFishSFX("sfxFreeze");
        };

        _proto.playSfxFireLaser = function playSfxFireLaser() {
          this.playFishSFX("sfxFire_laser");
        };

        _proto.playSfxJackpotExplode = function playSfxJackpotExplode() {
          this.playFishSFX("sfxJackpot_explode");
        };

        _proto.stopSfxJackpotCoin = function stopSfxJackpotCoin() {
          if (this.coinLoopId) {
            this.stopSound(this.coinLoopId);
            this.coinLoopId = null;
          }
        };

        _proto.playSfxJackpotCoin = function playSfxJackpotCoin() {
          this.coinLoopId = this.playFishSFX("sfxJackpot_coin", true, 0.4);
        };

        _proto.playDragonHitBall = function playDragonHitBall() {
          this.playFishSFX("sfxDragon_ball_drop");
        };

        _proto.playSfxBallDrop = function playSfxBallDrop() {
          this.playFishSFX("sfxBall_drop");
        };

        _proto.playSfxBallInsert = function playSfxBallInsert() {
          this.playFishSFX("sfxBall_insert");
        };

        _proto.playSfxBallTray = function playSfxBallTray() {
          this.playFishSFX("sfxBall_tray");
        };

        _proto.playSfxBallTrayDraw = function playSfxBallTrayDraw() {
          this.playFishSFX("sfxBall_tray_draw");
        };

        _proto.playSfxCollectBalls = function playSfxCollectBalls() {
          this.playFishSFX("sfxCollect_ball");
        };

        _proto.playSfxDragonDie = function playSfxDragonDie() {
          this.playFishSFX("sfxDragon_die");
        };

        _proto.playSfxDragonScream = function playSfxDragonScream() {
          this.playFishSFX("sfxDragon_scream");
        };

        _proto.playSfxWinDragonBallShow = function playSfxWinDragonBallShow() {
          this.playFishSFX("sfxShow_win_dragon_ball_put");
        };

        _proto.playSfxWinDragonBallHide = function playSfxWinDragonBallHide() {
          this.playFishSFX("sfxHide_win_dragon_ball_put");
        };

        _proto.playSfxGetItemFreeze = function playSfxGetItemFreeze() {
          this.playFishSFX("sfxGet_item");
        };

        _proto.playSfxGetItemLaser = function playSfxGetItemLaser() {
          this.playFishSFX("sfxGet_item");
        };

        _proto.playNewSfxWarning = function playNewSfxWarning() {
          this.stopAllEffects();

          if (this.isEnableSFX) {
            this.setEffectVolume(gfDataStore.instance.getCurrentSFXVolume() * 0.5);
          }

          if (this.isEnableBGM) {
            this.setMusicVolume(gfDataStore.instance.getCurrentBGMVolume() * 0.5);
          }

          this.playSfxDragonScream();
        };

        _proto.playSfxMiniBossDead = function playSfxMiniBossDead() {
          this.playFishSFX("sfxMiniboss_dead");
        };

        _proto.playSfxMiniBossSmash = function playSfxMiniBossSmash() {
          this.playFishSFX("sfxMiniboss_stomp");
        };

        _proto.playSfxMiniBossHit = function playSfxMiniBossHit() {
          var LENGTH_SFX_MINIBOSS_DAME = 3;
          var rand = Math.floor(Math.random() * LENGTH_SFX_MINIBOSS_DAME);
          this.playFishSFX("sfxMiniboss_takedame" + rand);
        };

        _proto.playSfxRoundSwitch = function playSfxRoundSwitch() {
          this.setMusicVolume(0);
          var soundSwitchRound = this.playFishSFX("sfxRound_switch");

          if (soundSwitchRound) {
            this.scheduleOnce(this.scheduleResetVolume, this.getDuration(soundSwitchRound));
          } else {
            this.onResumeSound();
          }
        };

        _proto.playSfxWaveTransition = function playSfxWaveTransition() {
          this.setMusicVolume(0);
          var soundWave = this.playFishSFX("sfxWave");

          if (soundWave) {
            this.scheduleOnce(this.scheduleResetVolume, this.getDuration(soundWave));
          } else {
            this.onResumeSound();
          }
        };

        _proto.stopAllAudio = function stopAllAudio() {
          this.unscheduleAllCallbacks();

          _GfSoundBase.prototype.stopAllAudio.call(this);
        };

        _proto.playSFXClickBet = function playSFXClickBet() {
          this.playSfxClick();
        };

        _proto.playSfxClick = function playSfxClick() {
          this.playFishSFX("sfxClick");
        };

        _proto.onDestroy = function onDestroy() {
          this.stopAllAudio();

          _GfSoundBase.prototype.onDestroy.call(this);

          removeEvents(this);
        };

        return GfSoundController;
      }(GfSoundBase)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfSpineFish.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseFish.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, sp, Color, v3, gfBaseFish;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
      Color = module.Color;
      v3 = module.v3;
    }, function (module) {
      gfBaseFish = module.gfBaseFish;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "047f1peYURI1KxycP6Q3Bb6", "gfSpineFish", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfSpineFish = exports('gfSpineFish', (_dec = ccclass('gfSpineFish'), _dec2 = property(sp.Skeleton), _dec(_class = (_class2 = /*#__PURE__*/function (_gfBaseFish) {
        _inheritsLoose(gfSpineFish, _gfBaseFish);

        function gfSpineFish() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfBaseFish.call.apply(_gfBaseFish, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "fishAnim", _descriptor, _assertThisInitialized(_this));

          _this.NORMAL_COLOR = new Color(255, 255, 255, 255);
          return _this;
        }

        var _proto = gfSpineFish.prototype;

        _proto.initAssets = function initAssets(config) {
          if (!this.fishAnim) {
            var fishAnim = this.node.getChildByName("mainSpine");
            this.fishAnim = fishAnim.getComponent(sp.Skeleton);
          }

          _gfBaseFish.prototype.initAssets.call(this, config);

          if (!this.fishAnim.skeletonData || this.fishAnim.skeletonData.name != config.asset.name) {
            this.fishAnim.skeletonData = config.asset;
          }

          this.initAnimationCacheMode(config.cacheMode);
          this.fishAnim.setAnimation(0, config.AnimationName ? config.AnimationName[0] : 'animation', true);

          if (this.fishAnim && config.customAnimProp) {
            Object.assign(this.fishAnim.node, config.customAnimProp);
          }
        };

        _proto.initAnimationCacheMode = function initAnimationCacheMode(cacheMode) {
          this.fishAnim.setAnimationCacheMode(cacheMode != undefined ? cacheMode : sp.Skeleton.AnimationCacheMode.SHARED_CACHE);
        };

        _proto.playEffectDie = function playEffectDie() {
          this.fishAnim.timeScale = 2;
        };

        _proto.resetColor = function resetColor() {
          this.setColor(this.NORMAL_COLOR);
        };

        _proto.setColor = function setColor(color) {
          this.fishAnim.color = color;
        };

        _proto.changeAnimationSpeed = function changeAnimationSpeed(multiple) {
          if (multiple === void 0) {
            multiple = 0.5;
          }

          this.fishAnim.timeScale *= multiple;
        };

        _proto.resetAnimationSpeed = function resetAnimationSpeed() {
          this.fishAnim.timeScale = 1;
        };

        _proto.unuse = function unuse() {
          _gfBaseFish.prototype.unuse.call(this);

          this.fishAnim.node.angle = 0;
          this.fishAnim.node.scale = v3(1, 1, 1);
        };

        return gfSpineFish;
      }(gfBaseFish), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "fishAnim", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfSpriteFish.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseFish.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Animation, Sprite, gfBaseFish;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Animation = module.Animation;
      Sprite = module.Sprite;
    }, function (module) {
      gfBaseFish = module.gfBaseFish;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "e1abeHfbDROX5IZHc7PVztn", "gfSpriteFish", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfSpriteFish = exports('gfSpriteFish', (_dec = ccclass('gfSpriteFish'), _dec2 = property(Animation), _dec(_class = (_class2 = /*#__PURE__*/function (_gfBaseFish) {
        _inheritsLoose(gfSpriteFish, _gfBaseFish);

        function gfSpriteFish() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfBaseFish.call.apply(_gfBaseFish, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "fishAnim", _descriptor, _assertThisInitialized(_this));

          _this._clipName = void 0;
          return _this;
        }

        var _proto = gfSpriteFish.prototype;

        _proto.initAssets = function initAssets(config) {
          if (!this.fishAnim) {
            this.fishAnim = this.node.getChildByName('mainFish').getComponent(Animation);
          }

          _gfBaseFish.prototype.initAssets.call(this, config);

          for (var i = 0; i < this.fishAnim.clips.length; i++) {
            this.fishAnim.removeState(this.fishAnim.clips[0].name);
          }

          this.fishAnim.clips = [config.asset];
          this.fishAnim.play(config.asset.name);
          this._clipName = this.fishAnim.clips[0].name;
        };

        _proto.playEffectDie = function playEffectDie() {
          this.fishAnim.getState(this._clipName).speed = 2;
        };

        _proto.changeAnimationSpeed = function changeAnimationSpeed(multiple) {
          if (multiple === void 0) {
            multiple = 1;
          }

          this.fishAnim.getState(this._clipName).speed *= multiple;
        };

        _proto.resetAnimationSpeed = function resetAnimationSpeed() {
          if (this.fishAnim.clips.length > 0) {
            this.fishAnim.getState(this._clipName).speed = 1;
          }
        };

        _proto.resetColor = function resetColor() {
          this.fishAnim.getComponent(Sprite).color = this.NORMAL_COLOR;
        };

        _proto.setColor = function setColor(color) {
          this.fishAnim.getComponent(Sprite).color = color;
        };

        return gfSpriteFish;
      }(gfBaseFish), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "fishAnim", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfTouchListener.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfEventEmitter.ts', './gfBaseEvents.ts', './gfBaseConfig.ts', './gfDataStore.ts', './gfReferenceManager.ts', './gfUtilities.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Node, sys, Component, gfEventEmitter, gfBaseEvents, gfBaseConfig, gfDataStore, gfReferenceManager, registerEvent, removeEvents;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      sys = module.sys;
      Component = module.Component;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "c2117HIc3ROTokYWCONQBRB", "gfTouchListener", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfTouchListener = exports('gfTouchListener', (_dec = ccclass('gfTouchListener'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfTouchListener, _Component);

        function gfTouchListener() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._userFireFunc = void 0;
          _this.holdClick = void 0;
          _this.actionLastTime = void 0;
          return _this;
        }

        var _proto = gfTouchListener.prototype;

        _proto.onLoad = function onLoad() {
          this._userFireFunc = this._userFire.bind(this);
          this.holdClick = false;
          this.actionLastTime = Date.now();
          this.initEvents();
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.GAME_LAYER.ON_AFTER_INIT_PLAYER_LIST, this.registerTouch, this);
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.resetOnExit, this);
          registerEvent(gfBaseEvents.COMMON.RESET_TOUCH_LISTENER, this.resetOnExit, this);
          registerEvent(gfBaseEvents.COMMON.RESET_TOUCH_LISTENER_NO_MONEY, this.resetOnNoMoney, this);
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME, this.removeTouchEvent, this);
          registerEvent(gfBaseEvents.COMMON.GAME_HIDE, this.resetHoldTouch, this);
        };

        _proto.registerTouch = function registerTouch() {
          this.node.on(Node.EventType.TOUCH_START, this._onUserStartTouch, this);
          this.node.on(Node.EventType.TOUCH_MOVE, this._onUserMoveTouch, this);
          this.node.on(Node.EventType.TOUCH_END, this._onUserEndTouch, this);
          this.node.on(Node.EventType.TOUCH_CANCEL, this._onUserEndTouch, this);

          if (!sys.isNative) {
            this.node.on(Node.EventType.MOUSE_MOVE, this._onUserMoveTouch, this);
          }
        };

        _proto._onUserStartTouch = function _onUserStartTouch(e) {
          var selfInfo = gfDataStore.instance.getSelfInfo();
          var targetState = gfDataStore.instance.getTargetState();
          this.holdClick = true;

          this._updateTouchPos(e ? e.getUILocation() : null);

          if (selfInfo.isLockGun) return;

          if (targetState === gfBaseConfig.instance.TARGET_LOCK.AUTO_FIRE) {
            return;
          }

          if (targetState === gfBaseConfig.instance.TARGET_LOCK.TARGET_ALL || targetState === gfBaseConfig.instance.TARGET_LOCK.TARGET_ONE) {
            if (!selfInfo.skillLock) {
              gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.CHOOSE_FISH_BY_POINT, gfDataStore.instance.getMousePos());
              return;
            }
          }

          if (this._checkValidClick()) {
            this._onUserFire('touch_start');
          }

          this.actionLastTime = Date.now();
        };

        _proto._onUserMoveTouch = function _onUserMoveTouch(e) {
          var selfInfo = gfDataStore.instance.getSelfInfo();
          if (selfInfo.isLockGun) return;

          if (selfInfo.skillLock) {
            this._updateTouchPos(e.getUILocation());

            var myPlayer = gfReferenceManager.instance.getPlayerByDeskStation(gfDataStore.instance.getSelfDeskStation());

            if (myPlayer) {
              myPlayer.rotateGun(gfDataStore.instance.getMousePos());
            }
          }

          if (this.holdClick) {
            this._updateTouchPos(e.getUILocation());
          }
        };

        _proto._onUserEndTouch = function _onUserEndTouch() {
          var selfInfo = gfDataStore.instance.getSelfInfo();
          this.holdClick = false;
          this.actionLastTime = Date.now();

          if (selfInfo.isLockGun && selfInfo.skillLock) {
            this.unschedule(this._userFireFunc);
            return;
          }

          this._onUserFire('touch_end');
        };

        _proto._onUserFire = function _onUserFire(status) {
          if (status === void 0) {
            status = 'touch_start';
          }

          var selfInfo = gfDataStore.instance.getSelfInfo();

          if (selfInfo.skillLock) {
            if (status === 'touch_end') {
              this.scheduleOnce(function () {
                gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.ON_SEND_FIRE_SKILL);
              }, 0);
            }
          } else if (status === 'touch_end') {
            this.unschedule(this._userFireFunc);
          } else {
            this._userFire();

            this.schedule(this._userFireFunc, gfDataStore.instance.FireSpeed.NORMAL);
          }
        };

        _proto._userFire = function _userFire() {
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.ON_SEND_FIRE, {
            point: gfDataStore.instance.mousePos,
            lockFishID: -1
          });
        };

        _proto._checkValidClick = function _checkValidClick() {
          var deltaTime = Date.now() - this.actionLastTime;
          return deltaTime > 40;
        };

        _proto._updateTouchPos = function _updateTouchPos(pos) {
          if (!pos) return;
          gfDataStore.instance.setDataStore({
            mousePos: pos
          });
        };

        _proto.removeTouchEvent = function removeTouchEvent() {
          this.node.off(Node.EventType.TOUCH_START, this._onUserStartTouch, this);
          this.node.off(Node.EventType.TOUCH_MOVE, this._onUserMoveTouch, this);
          this.node.off(Node.EventType.TOUCH_END, this._onUserEndTouch, this);
          this.node.off(Node.EventType.TOUCH_CANCEL, this._onUserEndTouch, this);

          if (!sys.isNative) {
            this.node.off(Node.EventType.MOUSE_MOVE, this._onUserMoveTouch, this);
          }
        };

        _proto.resetHoldTouch = function resetHoldTouch() {
          this.holdClick = false;
        };

        _proto.resetOnNoMoney = function resetOnNoMoney() {
          this.holdClick = false;
          this.unschedule(this._userFireFunc);
        };

        _proto.resetOnExit = function resetOnExit() {
          this.holdClick = false;
          gfDataStore.instance.setDataStore({
            mousePos: null
          });
          this.unschedule(this._userFireFunc);
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
          this.removeTouchEvent();
        };

        return gfTouchListener;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfUtilities.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfEventEmitter.ts', './gfBaseConfig.ts'], function (exports) {
  'use strict';

  var _extends, cclegacy, Tween, sys, v2, math, Rect, v3, view, UITransform, customDateFormat, gfEventEmitter, gfBaseConfig;

  return {
    setters: [function (module) {
      _extends = module.extends;
    }, function (module) {
      cclegacy = module.cclegacy;
      Tween = module.Tween;
      sys = module.sys;
      v2 = module.v2;
      math = module.math;
      Rect = module.Rect;
      v3 = module.v3;
      view = module.view;
      UITransform = module.UITransform;
    }, function (module) {
      customDateFormat = module.customDateFormat;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "61235QIdHNH25S5n7ic6whF", "gfUtilities", undefined); //     return this._finalAction.isDone();
      // };


      Tween.prototype.setSpeed = function (speed) {
        if (speed === void 0) {
          speed = 1;
        }

        this._finalAction._speedMethod = true;

        this._finalAction.setSpeed(speed);
      };

      var SubString = exports('SubString', function SubString(str, len) {
        return str.substr(0, len);
      });
      var v2Distance = exports('v2Distance', function v2Distance(p1, p2) {
        if (p1 == null || p2 == null) return 0;
        return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));
      });
      var getRotation = exports('getRotation', function getRotation(p1, p2) {
        if (p1 == null || p2 == null) return 0;
        return Math.atan2(p1.y - p2.y, p1.x - p2.x) * 180 / Math.PI;
      });
      var getRotationByRad = exports('getRotationByRad', function getRotationByRad(p1, p2) {
        if (p1 == null || p2 == null) return 0;
        return Math.atan2(p1.y - p2.y, p1.x - p2.x);
      });
      var randomBetween = exports('randomBetween', function randomBetween(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
      });
      var convertSecondToTime = exports('convertSecondToTime', function convertSecondToTime(a) {
        var sec_num = parseInt(a.toString(), 10); // let hours   = Math.floor(sec_num / 3600);

        var minutes = Math.floor(sec_num / 60);
        var seconds = sec_num % 60;
        return [minutes, seconds].map(function (v) {
          return v < 10 ? "0" + v : v;
        }).filter(function (v, i) {
          return v !== "00" || i > 0;
        }).join(":");
      });
      var ReplaceDataNotify = exports('ReplaceDataNotify', function ReplaceDataNotify(string, data, substr) {
        if (substr === void 0) {
          substr = '';
        }

        var strOut = string;

        for (var index = 0; index < data.length; index++) {
          strOut = strOut.replace("data.data[" + index + "]", data[index]);
        }

        if (substr != '') {
          strOut = strOut.replace("substr", substr);
        }

        return strOut;
      });
      var convertMillisecondsToTime = exports('convertMillisecondsToTime', function convertMillisecondsToTime(duration) {
        if (typeof duration !== "number") duration = parseInt(duration);
        var milliseconds = Math.floor(duration % 1000 / 100),
            seconds = Math.floor(duration / 1000 % 60),
            minutes = Math.floor(duration / (1000 * 60) % 60),
            hours = Math.floor(duration / (1000 * 60 * 60) % 24);
        var hourString = hours < 10 ? "0" + hours : hours;
        var minuteString = minutes < 10 ? "0" + minutes : minutes;
        var secondString = seconds < 10 ? "0" + seconds : seconds;
        return hourString + ":" + minuteString + ":" + secondString + "." + milliseconds;
      });
      var isWebMobileSafari = exports('isWebMobileSafari', function isWebMobileSafari() {
        if (sys.platform === sys.Platform.MOBILE_BROWSER && sys.browserType === sys.BrowserType.SAFARI) {
          if (navigator.userAgent.indexOf("Safari") > -1 && navigator.userAgent.indexOf("Chrome") <= -1 && navigator.userAgent.indexOf("CriOS") <= -1) {
            return true;
          } else {
            return false;
          }
        }

        return false;
      });
      var isChromeiOS = exports('isChromeiOS', function isChromeiOS() {
        if (sys.os === sys.OS.IOS && sys.platform === sys.Platform.MOBILE_BROWSER && sys.browserType === sys.BrowserType.SAFARI) {
          if (navigator.userAgent.indexOf("CriOS") > -1) {
            //Check is Chrome
            return true;
          }
        }

        return false;
      });
      var isEmpty = exports('isEmpty', function isEmpty(data) {
        return data == undefined || data == null;
      });
      var formatCoin = exports('formatCoin', function formatCoin(str, seperate) {
        if (seperate === void 0) {
          seperate = ",";
        }

        if (str == undefined || str < 0) return '0';
        seperate = seperate == null ? "," : seperate;

        if (typeof str === "number") {
          str = Math.round(str);
          str = str.toString();
        } else {
          if (typeof str == 'string') {
            var coin = parseInt(str);
            str = coin.toString();
          }
        }

        var strResult = "";
        var count = -1;
        var stringLength = str.length;

        for (var i = 0; i < stringLength; i++) {
          count++;

          if (count == 3) {
            count = 0;

            if (parseInt(str.charAt(stringLength - (i + 1)), 10).toString() != "NaN" && str.charAt(stringLength - (i + 1)) != "-") {
              strResult += seperate + str.charAt(stringLength - (i + 1));
            } else {
              strResult += str.charAt(stringLength - (i + 1));
            }
          } else {
            strResult += str.charAt(stringLength - (i + 1));
          }
        }

        var s1 = "";
        var strResultLength = strResult.length;

        for (var j = 0; j < strResultLength; j++) {
          s1 += strResult.charAt(strResultLength - (j + 1));
        }

        if (s1 == "NaN") {
          s1 = 0;
        }

        return s1.toString();
      });
      var getPointBetweenTwoPointByPercent = exports('getPointBetweenTwoPointByPercent', function getPointBetweenTwoPointByPercent(p0, p1, per) {
        var px = p0.x + (p1.x - p0.x) * per;
        var py = p0.y + (p1.y - p0.y) * per;
        return v2(px, py);
      });
      var getListPointFromThreePoint = exports('getListPointFromThreePoint', function getListPointFromThreePoint(p1, p2, p3, tbegin) {
        var listPoints = [];

        for (var t = tbegin; t <= 1; t += 0.01) {
          var xt = (1 - t) * (1 - t) * p1.x + 2 * (1 - t) * t * p2.x + t * t * p3.x;
          var yt = (1 - t) * (1 - t) * p1.y + 2 * (1 - t) * t * p2.y + t * t * p3.y;
          listPoints.push(v2(xt, yt));
        }

        return listPoints;
      });
      var rotateAngleByCoordinate = exports('rotateAngleByCoordinate', function rotateAngleByCoordinate(cx, cy, x, y, angle) {
        var radians = Math.PI / 180 * angle,
            cos = Math.cos(radians),
            sin = Math.sin(radians),
            nx = cos * (x - cx) + sin * (y - cy) + cx,
            ny = cos * (y - cy) - sin * (x - cx) + cy;
        return {
          x: nx,
          y: ny
        };
      });
      var showFullScreenButton = exports('showFullScreenButton', function showFullScreenButton(isShow) {
        if (isShow === void 0) {
          isShow = true;
        }

        var visible = isShow ? "visible" : "hidden";

        if (sys.os === sys.OS.ANDROID && sys.isMobile) {
          var divFullscreen = document.getElementById('div_full_screen');

          if (divFullscreen) {
            divFullscreen.style.visibility = visible;
          }
        }
      });
      var addHtmlCursor = exports('addHtmlCursor', function addHtmlCursor() {
        if (sys.platform == sys.Platform.DESKTOP_BROWSER) {
          var css = document.createElement('style');
          css.type = 'text/css';
          css.id = 'cursorId';
          var styles = 'canvas { color: #555;cursor: url(data:image/cur;base64,' + gfBaseConfig.instance.CursorBase64 + ') 16 16, default; background:#F4F4F4; display: block;  text-align: center;}';
          if (css['styleSheet']) css['styleSheet'].cssText = styles;else css.appendChild(document.createTextNode(styles));
          document.getElementsByTagName("head")[0].appendChild(css);
        }
      });
      var removeCursorInHtml = exports('removeCursorInHtml', function removeCursorInHtml() {
        if (sys.platform == sys.Platform.DESKTOP_BROWSER) {
          var _document$getElements;

          var cursorElement = document.getElementById("cursorId");
          cursorElement && ((_document$getElements = document.getElementsByTagName("head")[0]) == null ? void 0 : _document$getElements.removeChild(cursorElement));
        }
      });
      var clamp = exports('clamp', function clamp(x, min, max) {
        return math.clamp(x, min, max);
      });
      var isArrayEqual = exports('isArrayEqual', function isArrayEqual(x, y) {
        return globalThis._(x).xorWith(y, globalThis._.isEqual).isEmpty();
      });
      var getPointByDegrees = exports('getPointByDegrees', function getPointByDegrees(cx, cy, x, y, angle) {
        var radians = -(Math.PI / 180) * angle,
            cos = Math.cos(radians),
            sin = Math.sin(radians),
            nx = cos * (x - cx) + sin * (y - cy) + cx,
            ny = cos * (y - cy) - sin * (x - cx) + cy;
        return {
          x: nx,
          y: ny
        };
      });
      var registerEvent = exports('registerEvent', function registerEvent(eventCode, func, main) {
        if (!main.eventMap) {
          main.eventMap = [];
        }

        var funcKey = func.bind(main);
        main.eventMap.push({
          eventCode: eventCode,
          funcKey: funcKey
        });

        if (gfEventEmitter.instance) {
          gfEventEmitter.instance.registerEvent(eventCode, funcKey);
        }
      });
      var removeEvents = exports('removeEvents', function removeEvents(main) {
        if (!main.eventMap || !gfEventEmitter.instance) return;
        main.eventMap.forEach(function (e) {
          gfEventEmitter.instance.removeEvent(e.eventCode, e.funcKey);
        });
        main.eventMap.length = 0;
      });
      var autoEnum = exports('autoEnum', function autoEnum(arr) {
        var res = {};

        for (var i = 0; i < arr.length; i++) {
          res[arr[i]] = i;
        }

        return res;
      });
      var getBetValue = exports('getBetValue', function getBetValue(gameId, roomKind) {
        if (!gameId || !roomKind) return null;
        var KEY_STORE = 'betFish' + gameId;
        var betObject = sys.localStorage.getItem(KEY_STORE);

        if (!globalThis._.isEmpty(betObject)) {
          betObject = JSON.parse(betObject);

          if (betObject[roomKind]) {
            return betObject[roomKind];
          }
        }

        return null;
      });
      var setBetValue = exports('setBetValue', function setBetValue(gameId, roomKind, bulletMultiple) {
        var KEY_STORE = 'betFish' + gameId;
        var betObject = sys.localStorage.getItem(KEY_STORE);

        if (globalThis._.isEmpty(betObject)) {
          var _newObj;

          var newObj = (_newObj = {}, _newObj[roomKind] = bulletMultiple, _newObj);
          sys.localStorage.setItem(KEY_STORE, JSON.stringify(newObj));
        } else {
          betObject = JSON.parse(betObject);
          betObject[roomKind] = bulletMultiple;
          sys.localStorage.setItem(KEY_STORE, JSON.stringify(betObject));
        }
      });
      var formatUserName = exports('formatUserName', function formatUserName(userName, maxLength, replaceText) {
        if (userName === void 0) {
          userName = '';
        }

        if (maxLength === void 0) {
          maxLength = 16;
        }

        if (replaceText === void 0) {
          replaceText = "...";
        }

        if (userName.length <= maxLength) return userName;
        return userName.slice(0, maxLength - replaceText.length + 1) + replaceText;
      });
      var isPointInScreen = exports('isPointInScreen', function isPointInScreen(point, offset) {
        if (offset === void 0) {
          offset = 0;
        }

        var _GameConfig$instance = gfBaseConfig.instance,
            SceneBox = _GameConfig$instance.SceneBox,
            realSize = _GameConfig$instance.realSize;
        var screen = new Rect(SceneBox.Left - offset / 2, SceneBox.Bottom - offset / 2, realSize.Width + offset, realSize.Height + offset);
        return screen.contains(v2(point.x, point.y));
      });
      var formatString = exports('formatString', function formatString(theString, argumentArray) {
        var regex = /%s/;

        var _r = function _r(p, c) {
          return p.replace(regex, c);
        };

        return argumentArray.reduce(_r, theString);
      });
      var deepCopy = exports('deepCopy', function deepCopy(target) {
        if (target === null) {
          return target;
        }

        if (target instanceof Date) {
          return new Date(target.getTime());
        }

        if (target instanceof Array) {
          var cp = [];
          target.forEach(function (v) {
            cp.push(v);
          });
          return cp.map(function (n) {
            return deepCopy(n);
          });
        }

        if (typeof target === 'object' && target !== {}) {
          var _cp = _extends({}, target);

          Object.keys(_cp).forEach(function (k) {
            _cp[k] = deepCopy(_cp[k]);
          });
          return _cp;
        }

        return target;
      });
      var mergeTwoObject = exports('mergeTwoObject', function mergeTwoObject(obj1, obj2) {
        return globalThis._.merge({}, obj1, obj2);
      });
      var SetZIndex = exports('SetZIndex', function SetZIndex(node, index) {
        var zIndex = 'zIndex';
        if (!node.parent) return;
        node[zIndex] = index;

        for (var i = 0; i < node.parent.children.length; ++i) {
          var child = node.parent.children[i];

          if (child[zIndex] == undefined) {
            child[zIndex] = 0;
          }

          if (index <= child[zIndex] && node.uuid != child.uuid) {
            node.setSiblingIndex(child.getSiblingIndex());
            return;
          }
        }

        node.setSiblingIndex(node.parent.children.length);
      });
      var convertFishCoordinateSystem = exports('convertFishCoordinateSystem', function convertFishCoordinateSystem(points) {
        var APP_SIZE = gfBaseConfig.instance.AppSize;

        for (var i = 0; i < points.length; ++i) {
          var pointRotated = rotateAngleByCoordinate(APP_SIZE.Width / 2, APP_SIZE.Height / 2, points[i].PosX, points[i].PosY, -180);
          points[i].PosY = pointRotated.y;
          points[i].PosX = pointRotated.x;
        }
      });
      var bezier3P = exports('bezier3P', function bezier3P(a, b, c, t) {
        return (1 - t) * (1 - t) * a + 2 * (1 - t) * t * b + t * t * c;
      });
      var getPositionWithTimeSpentFromThreePoint = exports('getPositionWithTimeSpentFromThreePoint', function getPositionWithTimeSpentFromThreePoint(p1, p2, p3, timeLost, speed) {
        var totalPoints = 100;
        var durationPerUnit = 1 / totalPoints;
        var duration = 0;
        var position = v2(x(0), y(0));
        var i = 1;
        var currentPoint = position;
        var lastPoint = currentPoint;
        var lastDuration = 0;

        while (duration < timeLost && i <= totalPoints) {
          lastPoint = currentPoint;
          lastDuration = duration;
          currentPoint = v2(x(i * durationPerUnit), y(i * durationPerUnit));
          var distance = v2Distance(lastPoint, currentPoint);
          duration += distance / speed;
          ++i;
        }

        if (duration == lastDuration) {
          return v2(x(i - 1), y(i - 1));
        }

        var ratio = (timeLost - lastDuration) / (duration - lastDuration);
        var index = (i - 2 + ratio) * durationPerUnit;
        return v2(x(index), y(index));

        function x(t) {
          return bezier3P(p1.x, p2.x, p3.x, t);
        }

        function y(t) {
          return bezier3P(p1.y, p2.y, p3.y, t);
        }
      });
      var flipX = exports('flipX', function flipX(node) {
        node.scale = v3(-node.scale.x, node.scale.y, node.scale.z);
      });
      var checkTablet = exports('checkTablet', function checkTablet() {
        if (sys.isNative) {
          var dpi = jsb.device.getDevicePixelRatio();
          var viewSize = view.getFrameSize();
          var xInches = viewSize.width / dpi;
          var yInches = viewSize.height / dpi;
          var diagonalInches = Math.sqrt(Math.pow(xInches, 2) + Math.pow(yInches, 2));
          diagonalInches = Math.round(diagonalInches * 100) / 100;
          return diagonalInches >= 7;
        } else {
          var userAgent = navigator.userAgent.toLowerCase();
          var isTablet = /(ipad|tablet|(android(?!.*mobile))|(windows(?!.*phone)(.*touch))|kindle|playbook|silk|(puffin(?!.*(IP|AP|WP))))/.test(userAgent);
          return isTablet;
        }
      });
      var formatTimeStamp = exports('formatTimeStamp', function formatTimeStamp(ts, formatString) {
        if (formatString === void 0) {
          formatString = "#DD#/#MM# #hhhh#:#mm#:#ss#";
        }

        var date = new Date(ts);
        return customDateFormat(date, formatString);
      });
      var refreshButtonState = exports('refreshButtonState', function refreshButtonState(button) {
        button.interactable = false;
        button.interactable = true;
      });
      var isTouchScreen = exports('isTouchScreen', function isTouchScreen() {
        return navigator.maxTouchPoints > 0;
      });
      var roundAngle = exports('roundAngle', function roundAngle(angle) {
        if (angle > 180) angle -= 360;
        if (angle < -180) angle += 360;
        return angle;
      });
      var convertSecondToTimeDay = exports('convertSecondToTimeDay', function convertSecondToTimeDay(a) {
        //let sec_num = parseInt(a, 10);
        var sec_num = parseInt(a, 10);
        var days = Math.floor(sec_num / 86400);
        sec_num -= days * 86400;
        var hours = Math.floor(sec_num / 3600) % 24;
        sec_num -= hours * 3600;
        var minutes = Math.floor(sec_num / 60) % 60;
        sec_num -= minutes * 60;
        var seconds = sec_num;
        return [days, hours, minutes, seconds].map(function (v) {
          return v < 10 ? "0" + v : v;
        }).filter(function (v, i) {
          return v !== "0" || i > 1;
        }).join(":");
      });

      var removeZero = function removeZero(str) {
        if (str.length > 1 && str.charAt(0) == "0") {
          return str.charAt(1);
        }

        return str;
      };

      var addTimePrefix = exports('addTimePrefix', function addTimePrefix(str, arrPrefix) {
        var infos = str.split(':');

        if (infos[0] == "00" && infos[1] == "00" && infos[2] == "00") {
          str = removeZero(infos[3]) + arrPrefix[3];
        } else if (infos[0] == "00" && infos[1] == "00") {
          str = removeZero(infos[2]) + arrPrefix[2] + removeZero(infos[3]) + arrPrefix[3];
        } else if (infos[0] == "00") {
          if (infos[2] == "00") str = removeZero(infos[1]) + arrPrefix[1].replace(':', '');else str = removeZero(infos[1]) + arrPrefix[1] + removeZero(infos[2]) + arrPrefix[2].replace(':', '');
        } else {
          if (infos[2] == "00") str = removeZero(infos[0]) + arrPrefix[0] + removeZero(infos[1]) + arrPrefix[1].replace(':', '');else str = removeZero(infos[0]) + arrPrefix[0] + removeZero(infos[1]) + arrPrefix[1] + removeZero(infos[2]) + arrPrefix[2].replace(':', '');
        }

        return str;
      });
      var getPositionInOtherNode = exports('getPositionInOtherNode', function getPositionInOtherNode(spaceNode, targetNode) {
        if (targetNode.parent == null) {
          return null;
        }

        var pos = targetNode.parent.getComponent(UITransform).convertToWorldSpaceAR(targetNode.getPosition());
        return spaceNode.getComponent(UITransform).convertToNodeSpaceAR(pos);
      });
      var updateSpineTime = exports('updateSpineTime', function updateSpineTime(spine, dt) {
        sys.isNative ? spine.updateAnimationDT(dt) : spine.updateAnimation(dt);
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfVersion.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseConfig.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Component, gfBaseConfig;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      gfBaseConfig = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "bd43ehXrhxM5olQKt0IEhEv", "gfVersion", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfVersion = exports('GfVersion', (_dec = ccclass('GfVersion'), _dec2 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfVersion, _Component);

        function GfVersion() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "versionText", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = GfVersion.prototype;

        _proto.onLoad = function onLoad() {
          this.versionText.string = gfBaseConfig.instance.GameVersion;
        };

        return GfVersion;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "versionText", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfWaitingLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfEventEmitter.ts', './gfBaseEvents.ts', './gfBaseConfig.ts', './gfUtilities.ts', './gfActionHelper.ts', './gfNetworkGameEvent.ts', './gfLocalize.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, tween, UIOpacity, Label, game, Component, gfEventEmitter, gfBaseEvents, gfBaseConfig, SetZIndex, registerEvent, removeEvents, rotateBy, stopAllActions, fadeIn, fadeOut, gfNetworkGameEvent, gfLocalize;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      tween = module.tween;
      UIOpacity = module.UIOpacity;
      Label = module.Label;
      game = module.game;
      Component = module.Component;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      SetZIndex = module.SetZIndex;
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      rotateBy = module.rotateBy;
      stopAllActions = module.stopAllActions;
      fadeIn = module.fadeIn;
      fadeOut = module.fadeOut;
    }, function (module) {
      gfNetworkGameEvent = module.default;
    }, function (module) {
      gfLocalize = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "8d8a86RmJFPCo4Pf9LXTbJf", "gfWaitingLayer", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfWaitingLayer = exports('gfWaitingLayer', (_dec = ccclass('gfWaitingLayer'), _dec2 = property(Node), _dec3 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfWaitingLayer, _Component);

        function gfWaitingLayer() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "iconWaiting", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "toolTip", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = gfWaitingLayer.prototype;

        _proto.onLoad = function onLoad() {
          SetZIndex(this.node, gfBaseConfig.instance.Z_INDEX.WAITING);
          this.hideWaiting();
          this.initEvents();
          this.runIconAction();
        };

        _proto.runIconAction = function runIconAction() {
          tween(this.iconWaiting).repeatForever(rotateBy(2, 360)).start();
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.COMMON.SHOW_WAITING, this.showWaiting, this);
          registerEvent(gfBaseEvents.COMMON.HIDE_WAITING, this.hideWaiting, this);
          registerEvent(gfBaseEvents.COMMON.REMOVE_PERSIST_NODE, this.refreshPage, this);
        };

        _proto.showWaiting = function showWaiting(needTimeout, needTimeoutLoadScene) {
          var _this2 = this;

          if (needTimeout === void 0) {
            needTimeout = false;
          }

          if (needTimeoutLoadScene === void 0) {
            needTimeoutLoadScene = false;
          }

          this.node.active = true;
          stopAllActions(this.node);
          tween(this.node).then(fadeIn(.2)).start();
          tween(this.iconWaiting).repeatForever(rotateBy(2, 360)).start();

          if (this.toolTip && this.toolTip.active) {
            this.hideTooltip();
          }

          if (needTimeoutLoadScene) {
            tween(this.node).sequence(tween().delay(5), tween().call(function () {
              _this2.showTooltip();
            }), tween().delay(5), tween().call(function () {
              _this2.hideWaiting();

              if (gfEventEmitter.instance) {
                gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_PROMPT, gfNetworkGameEvent.MSG_CODE.WAITING_LOAD_SCENE_TIMEOUT);
              }
            }));
          } else if (needTimeout) {
            tween(this.node).sequence(tween().delay(gfBaseConfig.instance.waiting_timeout), tween().call(function () {
              _this2.hideWaiting();

              if (gfEventEmitter.instance) {
                gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_PROMPT, gfNetworkGameEvent.MSG_CODE.WAITING_TIMEOUT);
              }
            }));
          }
        };

        _proto.hideWaiting = function hideWaiting() {
          var _this3 = this;

          this.unscheduleAllCallbacks();
          stopAllActions(this.node);
          tween(this.node).then(fadeOut(.2)).call(function () {
            _this3.node.active = false;
          }).start();
        };

        _proto.showTooltip = function showTooltip() {
          if (!this.toolTip) return;
          this.toolTip.active = true;
          this.toolTip.getComponent(UIOpacity).opacity = 0;
          this.toolTip.getComponent(Label).string = gfLocalize.instance.txtWaitingTooltip;
          stopAllActions(this.toolTip);
          tween(this.toolTip).then(fadeIn(.2)).start();
        };

        _proto.hideTooltip = function hideTooltip() {
          var _this4 = this;

          if (!this.toolTip) return;
          stopAllActions(this.toolTip);
          tween(this.toolTip).then(fadeOut(.2)).call(function () {
            _this4.toolTip.active = false;
          }).start();
        };

        _proto.refreshPage = function refreshPage() {
          game.removePersistRootNode(this.node);
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return gfWaitingLayer;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "iconWaiting", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "toolTip", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfWallet.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfUtilities.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Component, warn, formatCoin;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Component = module.Component;
      warn = module.warn;
    }, function (module) {
      formatCoin = module.formatCoin;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "09e66uiZfZIT6s8Ofzt04fG", "gfWallet", undefined);

      var INCREASING_TIME = 0.3;
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var logError = warn;
      var gfWallet = exports('gfWallet', (_dec = ccclass('gfWallet'), _dec2 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfWallet, _Component);

        function gfWallet() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "displayLabel", _descriptor, _assertThisInitialized(_this));

          _this._displayAmount = 0;
          _this._rewardAmount = 0;
          _this._targetAmount = 0;
          _this._totalAmount = 0;
          _this.incSpeed = 0;
          return _this;
        }

        var _proto = gfWallet.prototype;

        _proto.forceUpdateWallet = function forceUpdateWallet(amount) {
          this._displayAmount = amount;
          this._targetAmount = amount;
          this._rewardAmount = 0;
          this.incSpeed = 0;
          this._totalAmount = amount;
          this.updateDisplay();
        };

        _proto.updateWallet = function updateWallet(amount) {
          this._targetAmount = amount - this._rewardAmount;

          if (this._displayAmount > this._targetAmount) {
            this._displayAmount = this._targetAmount;
          } else {
            this.incSpeed = (this._targetAmount - this._displayAmount) / INCREASING_TIME;
          }

          this._totalAmount = amount;
          this.updateDisplay();
        };

        _proto.addToDisplay = function addToDisplay(amount) {
          if (amount > this._rewardAmount) {
            logError("Reward Wallet Amount is negative! [" + amount + "]");
          }

          this._rewardAmount -= amount;
          this._targetAmount += amount;

          if (this._targetAmount > this._totalAmount) {
            this._targetAmount = this._totalAmount;
          }

          this.incSpeed = (this._targetAmount - this._displayAmount) / INCREASING_TIME;
        };

        _proto.addGoldReward = function addGoldReward(reward) {
          this._rewardAmount += reward;
        };

        _proto.update = function update(dt) {
          if (this._displayAmount == this._targetAmount) return;
          this._displayAmount += this.incSpeed * dt;

          if (this._displayAmount > this._targetAmount) {
            this._displayAmount = this._targetAmount;
          }

          this.updateDisplay();
        };

        _proto.updateDisplay = function updateDisplay() {
          this.displayLabel.string = formatCoin(this._displayAmount);
        };

        _proto.getDisplayWallet = function getDisplayWallet() {
          return this._targetAmount;
        };

        _proto.getRealWallet = function getRealWallet() {
          return this._totalAmount;
        };

        _proto.resetOnExit = function resetOnExit() {
          this.displayLabel.string = '';
        };

        return gfWallet;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "displayLabel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfWaveTransition.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseConfig.ts', './gfBaseEvents.ts', './gfUtilities.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Prefab, UIOpacity, tween, v3, instantiate, Tween, Component, gfBaseConfig, gfBaseEvents, registerEvent, removeEvents;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Prefab = module.Prefab;
      UIOpacity = module.UIOpacity;
      tween = module.tween;
      v3 = module.v3;
      instantiate = module.instantiate;
      Tween = module.Tween;
      Component = module.Component;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "d278d0jz3lMobZKknGa2Lgg", "gfWaveTransition", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var offsetX = 200;
      var GfWaveTransition = exports('GfWaveTransition', (_dec = ccclass('GfWaveTransition'), _dec2 = property(Node), _dec3 = property(Prefab), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfWaveTransition, _Component);

        function GfWaveTransition() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "wave", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bubble", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = GfWaveTransition.prototype;

        _proto.onLoad = function onLoad() {
          this.node.getComponent(UIOpacity).opacity = 0;
          this.initEvents();
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.resetOnExit, this);
          registerEvent(gfBaseEvents.EFFECT_LAYER.PLAY_WAVE_TRANSITION, this.playWaveTransition, this);
          registerEvent(gfBaseEvents.COMMON.GAME_SHOW, this.resetOnExit, this);
        };

        _proto.playWaveTransition = function playWaveTransition() {
          var _this2 = this;

          var realSize = gfBaseConfig.instance.realSize;
          this.resetOnExit();
          this.node.getComponent(UIOpacity).opacity = 255;
          this.schedule(this.createBubble, 0.1);
          tween(this.wave).to(4, {
            position: v3(-(realSize.Width + offsetX), 0, this.wave.position.z)
          }).call(function () {
            _this2.unschedule(_this2.createBubble);

            _this2.node.getComponent(UIOpacity).opacity = 0;
          }).start();
        };

        _proto.createBubble = function createBubble() {
          var realSize = gfBaseConfig.instance.realSize;
          var Count = 5;

          for (var i = 0; i < Count; ++i) {
            var bubble = instantiate(this.bubble);
            bubble.parent = this.node;
            var bubblePosX = this.wave.position.x + Math.random() * 50 - 220;
            var bubblePosY = -realSize.Height / 2 + realSize.Height / Count * i + Math.random() * 100;
            bubble.setPosition(bubblePosX, bubblePosY, bubble.position.z);
          }
        };

        _proto.resetOnExit = function resetOnExit() {
          var realSize = gfBaseConfig.instance.realSize;
          this.node.getComponent(UIOpacity).opacity = 0;
          this.wave.setPosition(realSize.Width / 2 + offsetX, this.wave.position.y, this.wave.position.z);
          Tween.stopAllByTarget(this.wave);
          this.unschedule(this.createBubble);
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return GfWaveTransition;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "wave", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "bubble", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfWifiStatus.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfDataStore.ts', './gfReferenceManager.ts', './gfBaseEvents.ts', './gfNetworkGameEvent.ts', './gfUtilities.ts', './gfBaseConfig.ts', './utils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, SpriteFrame, Node, Label, Sprite, UITransform, Color, isValid, Component, gfDataStore, gfReferenceManager, gfBaseEvents, gfNetworkGameEvent, registerEvent, removeEvents, gfBaseConfig, setOpacity;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SpriteFrame = module.SpriteFrame;
      Node = module.Node;
      Label = module.Label;
      Sprite = module.Sprite;
      UITransform = module.UITransform;
      Color = module.Color;
      isValid = module.isValid;
      Component = module.Component;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfNetworkGameEvent = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      setOpacity = module.setOpacity;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "e6c7c1BvHRELrvHvEHN8RBF", "gfWifiStatus", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var STATUS = {
        STRONG: 0,
        MEDIUM: 1,
        WEAK: 2,
        DISCONNECT: 3
      };
      var WIFI_STATUS_AVERAGE = 5;
      var GfWifiStatus = exports('GfWifiStatus', (_dec = ccclass('GfWifiStatus'), _dec2 = property(SpriteFrame), _dec3 = property(Node), _dec4 = property(Label), _dec5 = property(Sprite), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfWifiStatus, _Component);

        function GfWifiStatus() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "listSprite", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "ping", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labelPing", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "spriteIcon", _descriptor4, _assertThisInitialized(_this));

          _this._right = false;
          _this._averagePing = 0;
          _this._listTotalPing = [];
          return _this;
        }

        var _proto = GfWifiStatus.prototype;

        _proto.onLoad = function onLoad() {
          this.node.active = false;

          if (gfBaseConfig.instance.TURN_ON_WIFI_STATUS) {
            this.initEvents();
            this.average();
          }
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.COMMON.UPDATE_PING, this.onPingUpdate, this);
          registerEvent(gfBaseEvents.COMMON.NETWORK_STATUS_INFO, this.onNetworkState, this);
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.resetOnExit, this);
          registerEvent(gfBaseEvents.GAME_LAYER.ON_AFTER_INIT_PLAYER_LIST, this.updatePositionWifi, this);
          this.labelPing.string = '0ms';
        };

        _proto.setupRight = function setupRight() {
          this._right = true;
          this.ping.getComponent(UITransform).anchorX = 0;
          this.ping.setPosition(-37, this.ping.position.y, this.ping.position.z); //this.msNode.setPosition(60, this.msNode.position.y, this.msNode.position.z);
        };

        _proto.onPingUpdate = function onPingUpdate(ms) {
          if (!this.node.active && gfBaseConfig.instance.TURN_ON_WIFI_STATUS) {
            this.node.active = true;
          }

          var sprite = null;
          var color = null;
          this.handlerListPing(ms);
          this.average();
          this.enableLbl(true);

          if (this._averagePing > 0 && this._averagePing < 100) {
            sprite = this.listSprite[STATUS.STRONG];
            color = Color.GREEN;
          } else if (this._averagePing >= 100 && this._averagePing < 300) {
            sprite = this.listSprite[STATUS.MEDIUM];
            color = Color.YELLOW;
          } else if (this._averagePing >= 300 && this._averagePing < 500) {
            sprite = this.listSprite[STATUS.WEAK];
            color = Color.RED;
          } else {
            sprite = this.listSprite[STATUS.WEAK];
            color = Color.RED;
          }

          this.labelPing.color = color;
          this.labelPing.string = this._averagePing.toString();
          this.spriteIcon.spriteFrame = sprite;
        };

        _proto.onNetworkState = function onNetworkState(data) {
          if (!isValid(this.node)) return;

          switch (data.EventID) {
            case gfNetworkGameEvent.NETWORK_ERROR:
            case gfNetworkGameEvent.NETWORK_CLOSE:
            case gfNetworkGameEvent.NETWORK_POOR:
            case gfNetworkGameEvent.NETWORK_DIE:
              this.spriteIcon.spriteFrame = this.listSprite[STATUS.DISCONNECT];
              this.enableLbl(false);
              break;

            case gfNetworkGameEvent.NETWORK_RECONNECT:
              this.enableLbl(true);
              this.onPingUpdate(100);
              break;
          }
        };

        _proto.updatePositionWifi = function updatePositionWifi() {
          var player = gfReferenceManager.instance.getPlayerByDeskStation(gfDataStore.instance.getSelfInfo().DeskStation);

          if (!player) {
            return;
          }

          var pos = player.index === 0 ? gfBaseConfig.instance.POS_WIFI_STATUS.LEFT : gfBaseConfig.instance.POS_WIFI_STATUS.RIGHT;
          setOpacity(this.node, 255);
          this.node.active = true;
          this.node.setPosition(pos.x, pos.y, 1);
        };

        _proto.enableLbl = function enableLbl(status) {
          this.ping.active =
          /*this.msNode.active =*/
          status;
        };

        _proto.average = function average() {
          this._averagePing = Math.round(this._listTotalPing.reduce(function (p, c) {
            return p + c;
          }, 0) / this._listTotalPing.length);
        };

        _proto.handlerListPing = function handlerListPing(ms) {
          this._listTotalPing.length >= WIFI_STATUS_AVERAGE && this._listTotalPing.pop();

          this._listTotalPing.push(ms);
        };

        _proto.resetOnExit = function resetOnExit() {
          this.node.active = false;
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return GfWifiStatus;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "listSprite", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "ping", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "labelPing", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "spriteIcon", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/globalConfig.ts", ['cc'], function () {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f666fZHMPZPYLzkEcEVye4i", "globalConfig", undefined);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/globalNetwork.ts", ['cc', './loadConfigAsync.ts', './game-network.mjs_cjs=&original=.js', './game-network.js'], function (exports) {
  'use strict';

  var cclegacy, log, warn, sys, loadConfigAsync, _cjsExports;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      log = module.log;
      warn = module.warn;
      sys = module.sys;
    }, function (module) {
      loadConfigAsync = module.default;
    }, null, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "ec906OpgxlOkISCFs4dK7/M", "globalNetwork", undefined);

      var network = globalThis.GameNetwork || _cjsExports;
      var MessageManager = network.MessageManager,
          ServiceRest = network.ServiceRest;
      var logger = network.lib.logger;
      logger && logger.updateLogger(log, log, warn);
      var messageManager = MessageManager.getInstance();

      var GlobalNetwork = function GlobalNetwork() {
        var _this = this;

        this.gamesData = {};
        this.token = null;
        this.refreshToken = null;
        this.socket = null;
        this.expectedEvent = '';
        this.expectedCommandId = '';

        this.init = function (token, refreshToken, envId, gameIdSocket) {
          if (refreshToken === void 0) {
            refreshToken = '';
          }

          if (envId === void 0) {
            envId = 'portal';
          }

          if (gameIdSocket === void 0) {
            gameIdSocket = 'all';
          }

          log("Network using V3");
          _this.token = token;
          _this.refreshToken = refreshToken;

          var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
              SOCKET_URL = _loadConfigAsync$getC.SOCKET_URL,
              API_URL = _loadConfigAsync$getC.API_URL;

          var deviceInfo = {
            os: sys.os,
            osVersion: sys.osVersion,
            platform: sys.platform,
            browser: sys.browserType,
            browserVersion: sys.browserVersion,
            language: sys.language
          };
          messageManager.initSocket({
            socketUrl: SOCKET_URL,
            apiUrl: API_URL,
            urlVerifyToken: 'auth/token/login',
            env: envId,
            games: gameIdSocket,
            token: token,
            serviceRest: ServiceRest.getInstance('cc'),
            device: deviceInfo
          });
          loadConfigAsync.setUpSentry();
        };

        this.getToken = function () {
          return _this.token;
        };

        this.setToken = function (token) {
          _this.token = token;
        };

        this.registerGame = function (gameData) {
          var gameId = gameData.gameId,
              gameState = gameData.gameState;

          if (typeof Sentry !== 'undefined') {
            Sentry.configureScope(function (scope) {
              scope.setExtra("gameId", gameId);
            });
          }

          if (!gameState) return;
          return new gameState({
            gameData: gameData
          });
        };

        this.initGame = function (gameData) {
          if (gameData === void 0) {
            gameData = {};
          }

          gameData.token = _this.getToken();

          if (typeof Sentry !== 'undefined') {
            Sentry.configureScope(function (scope) {
              scope.setExtra("gameId", gameData.gameId);
            });
          }

          return gameData;
        };

        this.triggerUserLogout = function () {
          messageManager.closeAndCleanUp();
        };

        this.outGame = function () {};
      };

      var globalNetwork = exports('default', new GlobalNetwork());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GlobalNodeSharing.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "1ec038vpNhNrZaXGV1Gy83+", "GlobalNodeSharing", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GlobalNodeSharing = exports('GlobalNodeSharing', (_dec = ccclass('GlobalNodeSharing'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GlobalNodeSharing, _Component);

        function GlobalNodeSharing() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "nodeId", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "getNode", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "setNode", _descriptor3, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = GlobalNodeSharing.prototype;

        _proto.onLoad = function onLoad() {
          if (this.getNode) {
            this.getNodeSharing();
          }

          if (this.setNode) {
            this.setNodeSharing();
          }
        };

        _proto.setNodeSharing = function setNodeSharing() {
          if (this.node.scene) {
            this.node.scene[this.nodeId] = this.node;
          }
        };

        _proto.getNodeSharing = function getNodeSharing() {
          if (this.node.scene && this.node.scene[this.nodeId]) {
            this.node[this.nodeId] = this.node.scene[this.nodeId];
          }
        };

        return GlobalNodeSharing;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "nodeId", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "getNode", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "setNode", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GongReel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CustomType.ts', './SlotReelv2.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, instantiate, tween, v3, CustomEvent, SlotReelv2;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      instantiate = module.instantiate;
      tween = module.tween;
      v3 = module.v3;
    }, function (module) {
      CustomEvent = module.CustomEvent;
    }, function (module) {
      SlotReelv2 = module.SlotReelv2;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "4e29aEEOUtDapIRhjqM1PNZ", "GongReel", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GongReel = exports('GongReel', (_dec = ccclass('GongReel'), _dec2 = property(Prefab), _dec(_class = (_class2 = /*#__PURE__*/function (_SlotReelv) {
        _inheritsLoose(GongReel, _SlotReelv);

        function GongReel() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SlotReelv.call.apply(_SlotReelv, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "stackWildPrefab", _descriptor, _assertThisInitialized(_this));

          _this._stackWild = null;
          _this._isSpeedUp = false;
          _this._remainStep = _this.MAX_STEP;
          _this._stackData = {};
          _this._tweenNudge = null;
          _this._isFinished = true;
          return _this;
        }

        var _proto = GongReel.prototype;

        _proto.onLoad = function onLoad() {
          _SlotReelv.prototype.onLoad.call(this);

          this.node.on('SET_STACK_DATA', this.setStackData, this);
          this.node.on('SHOW_STACK_WILD', this.showStackWild, this);
          this.node.on('CLEAR_STACK_WILD', this.clearStackWild, this);
          this.node.on('RUN_NUDGE', this.runAnimNudge, this);
          this.node.on('SKIP_NUDGE', this.skipAnimNudge, this);
          this.node["getShowSymbols"] = this.getShowSymbols.bind(this);
        };

        _proto.init = function init() {
          var _SlotReelv$prototype$;

          for (var _len2 = arguments.length, params = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            params[_key2] = arguments[_key2];
          }

          (_SlotReelv$prototype$ = _SlotReelv.prototype.init).call.apply(_SlotReelv$prototype$, [this].concat(params));

          this._stackWild = instantiate(this.stackWildPrefab);
          this.node.addChild(this._stackWild);

          this._stackWild.emit('INIT', this.symbolHeight);
        };

        _proto.setHigherHolder = function setHigherHolder(node) {
          this._higherHolder = node;
        };

        _proto.startSpinning = function startSpinning(reelIndex, reelConfig) {
          if (reelConfig === void 0) {
            reelConfig = {};
          }

          this._isFinished = false;
          this._isSpeedUp = false;

          this._stackWild.emit("SHOW_PARTICLE", false);

          this._stackWild.emit("SHOW_GONG_EFFECT", false);

          this._resetReelPosition();

          _SlotReelv.prototype.startSpinning.call(this, reelIndex, reelConfig);

          this._remainStep = this.step;
        };

        _proto.setStackData = function setStackData(stackFormat) {
          this._stackData = Object.assign({}, stackFormat);
        };

        _proto.fastStopSpinning = function fastStopSpinning(remainStep) {
          var _this2 = this; //check step is reset will not do anything.


          if (this.step === this.MAX_STEP) return;
          if (this.isFastToResult) return;
          this.isFastToResult = true;
          this.unschedule(this.setStepToStop);
          this.currentSpeed = this.currentSpeed / 3;
          if (this.isShowingResult) return;
          this.scheduleOnce(function () {
            if (remainStep < _this2.totalSymbols) {
              _this2.step = _this2.totalSymbols;
            } else if (_this2.step > remainStep) {
              _this2.step = remainStep;
            }

            _this2._remainStep = _this2.step;
          }, 0.04);
        };

        _proto.speedUp = function speedUp() {
          this._isSpeedUp = true;
          this.adjustReelSpeed(this.currentSpeed / 1.5);
        };

        _proto.showStackWild = function showStackWild() {
          var _this$_stackData = this._stackData,
              nudgeStep = _this$_stackData.nudgeStep,
              step = _this$_stackData.step,
              type = _this$_stackData.type,
              size = _this$_stackData.size;
          if (type === "0") return this.clearStackWild();

          this._addStackWild();

          this._stackWild.emit("SHOW_PARTICLE", false);

          this._stackWild.emit("SHOW_GONG_EFFECT", true);

          this._stackWild.setPosition(0, (size + 1.5 - step - nudgeStep) * this.symbolHeight);

          this._setupShowSymbols();
        };

        _proto.clearStackWild = function clearStackWild() {
          this._stackWild.emit("CLEAR_STACK_WILD");

          this.symbols.forEach(function (sb) {
            return sb.opacity = 255;
          });
          this.showSymbols = this.symbols.slice(1, 4).reverse();
        };

        _proto.runAnimNudge = function runAnimNudge() {
          var _this3 = this;

          var _this$_stackData2 = this._stackData,
              nudgeStep = _this$_stackData2.nudgeStep,
              type = _this$_stackData2.type,
              nudge = _this$_stackData2.nudge;
          if (type === "0") return this._finishNudge(false);
          if (nudge === 6) return this._finishNudge();
          if (nudge === 2) return this._runFakeNudge();
          var step = Math.abs(nudgeStep);
          var direction = nudgeStep / step; // 1: down -1: up */

          var dur = 1;

          this._clearTweenNudge();

          this._tweenNudge = tween(this.node).delay(0.2);

          for (var index = 0; index < step; index++) {
            this._tweenNudge.call(function () {
              _this3._stackWild.emit("SHAKING_WILDS");

              _this3._playSoundWildShake();
            }).delay(dur).call(function () {
              _this3._playSoundWildMove();
            }).by(dur, {
              position: v3(0, -this.symbolHeight * direction)
            }, {
              easing: "cubicInOut"
            }).call(function () {
              var lastIndex = direction === 1 ? 0 : _this3.totalSymbols - 1;
              var lastSymbol = _this3.symbols[lastIndex];
              lastSymbol.setPosition(0, lastSymbol.position.y + _this3.symbolHeight * _this3.totalSymbols * direction);

              _this3._resetReelPosition();
            });
          }

          this._tweenNudge.call(function () {
            _this3._tweenNudge = null;

            _this3._stackWild.emit("RESET_ANIM_WILDS");

            _this3._finishNudge();
          }).start();
        };

        _proto.skipAnimNudge = function skipAnimNudge() {
          var _this4 = this;

          if (this._isFinished) return;

          if (this._tweenNudge) {
            this._clearTweenNudge();

            this._resetReelPosition();

            this.symbols.forEach(function (symbol, index) {
              symbol.setPosition(0, _this4.symbolPos[index]);
            });
          }

          this.showStackWild();

          this._finishNudge();
        }
        /**@private */
        ;

        _proto.circulateSymbols = function circulateSymbols() {
          var _this$_stackData3 = this._stackData,
              step = _this$_stackData3.step,
              nudgeStep = _this$_stackData3.nudgeStep;
          var lastSymbol = this.symbols[0];
          var posY = lastSymbol.position.y + this.symbolHeight * this.totalSymbols;
          lastSymbol.setPosition(lastSymbol.position.x, posY);

          this._resetReelPosition();

          if (!this.isShowingResult) {
            this._remainStep = this.step;
            lastSymbol.emit('CHANGE_TO_BLUR_SYMBOL', this.getRandomSymbolName());
          } else if (this.stop < this.totalSymbols) {
            this._remainStep = this.totalSymbols - 1 - this.stop;

            var isRealSymbol = this._isRealSymbol();

            var symbolName = this.result[this.stop];
            this.step = this.totalSymbols + this.showNumber - (this.stop + this.config.TABLE_BUFFER.BOT);

            if (isRealSymbol) {
              if ('KL'.includes(symbolName) && nudgeStep !== 0) {
                symbolName = this.getRandomSymbolNameWithExceptions(["2", "4"]);
              } // fake for nudge


              lastSymbol.emit('CHANGE_TO_SYMBOL', symbolName);
              this.showSymbols.unshift(lastSymbol);
            } else {
              lastSymbol.emit('CHANGE_TO_BLUR_SYMBOL', symbolName);
            }

            this.stop++;
          }

          if (this._remainStep === step) {
            this._addStackWild();
          }
        };

        _proto._resetReelPosition = function _resetReelPosition() {
          var _this5 = this; // reset currentIndex


          this.symbols.sort(function (a, b) {
            return a.position.y - b.position.y;
          });
          this.currentIndex = 0; // reset reel position

          this.node.children.forEach(function (child) {
            return child.setPosition(child.position.x, child.position.y + _this5.node.position.y);
          });
          this.node.setPosition(this.node.position.x, 0);

          if (this._stackWild.position.y < -1.5 * this.symbolHeight) {
            // out of table
            this._stackWild.emit("RESET_STACK_WILD");
          }
        };

        _proto._addStackWild = function _addStackWild() {
          var _this$_stackData4 = this._stackData,
              size = _this$_stackData4.size,
              type = _this$_stackData4.type;
          if (type === "FAKE" && !this._canFakeStackWild()) return;

          this._stackWild.emit("SET_STACK_WILD", this._stackData);

          this._stackWild.setPosition(0, (size + 1.5) * this.symbolHeight);

          this._stackWild.emit("SHOW_PARTICLE", true);
        };

        _proto._isUnderStackWild = function _isUnderStackWild() {
          var _this$_stackData5 = this._stackData,
              step = _this$_stackData5.step,
              size = _this$_stackData5.size;
          return this._remainStep <= step && this._remainStep > Math.abs(step - size);
        };

        _proto.onReelStop = function onReelStop() {
          this._stackWild.emit("SHOW_PARTICLE", false);

          this._stackWild.emit("SHOW_GONG_EFFECT", true);
        };

        _proto._runFakeNudge = function _runFakeNudge() {
          var _this6 = this;

          var isFake = true;

          this._stackWild.emit("SHAKING_WILDS", isFake);

          this.node.soundPlayer.playSFXWildShake();

          this._clearTweenNudge();

          this._tweenNudge = tween(this.node).delay(0.5).call(function () {
            _this6._finishNudge(true);

            _this6._tweenNudge = null;
          });

          this._tweenNudge.start();
        };

        _proto._clearTweenNudge = function _clearTweenNudge() {
          if (this._tweenNudge) {
            this._tweenNudge.stop();

            this._tweenNudge = null;
          }
        };

        _proto._finishNudge = function _finishNudge(hasStackWild) {
          if (hasStackWild === void 0) {
            hasStackWild = true;
          }

          if (this._isFinished) return;
          this._isFinished = true;
          if (hasStackWild) this._setupShowSymbols();
          var event = new CustomEvent('FINISH_NUDGE', true);
          this.node.dispatchEvent(event);
        };

        _proto._setupShowSymbols = function _setupShowSymbols() {
          if (this._stackData.type === "0") return;
          this.showSymbols = this.symbols.slice(1, 4).reverse();

          var wildSymbols = this._stackWild.getShowWilds();

          for (var row = 0; row < 3; row++) {
            this.showSymbols[row] = wildSymbols[row] || this.showSymbols[row];
          }
        };

        _proto._canFakeStackWild = function _canFakeStackWild() {
          if (this.isFreeMode) return true;
          if ([1, 3].includes(this.reelIndex)) return false;
          return true;
        }
        /**@sound */
        ;

        _proto._playSoundWildShake = function _playSoundWildShake() {};

        _proto._playSoundWildMove = function _playSoundWildMove() {};

        return GongReel;
      }(SlotReelv2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "stackWildPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GongStackWild.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, GameObject;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
    }, function (module) {
      GameObject = module.GameObject;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "af8e3hnsrZNx7jro34Qo0tA", "GongStackWild", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GongStackWild = exports('GongStackWild', (_dec = ccclass('GongStackWild'), _dec2 = property(Node), _dec3 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(GongStackWild, _GameObject);

        function GongStackWild() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "background", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "staticsNode", _descriptor2, _assertThisInitialized(_this));

          _this._symbolBgs = void 0;
          _this._symbols = void 0;
          _this._showWilds = [null, null, null];
          _this.stackData = null;
          _this._indexTest = 0;
          _this._symbolHeight = 0;
          return _this;
        }

        var _proto = GongStackWild.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          globalThis['gongStrip'] = globalThis['gongStrip'] || this;
          this.node.on("INIT", this.init, this);
          this.node.on("SET_STACK_WILD", this.setStackWild, this);
          this.node.on("SHOW_PARTICLE", this.showParticle, this);
          this.node.on("SHOW_GONG_EFFECT", this.showGongEffect, this);
          this.node.on("SHAKING_WILDS", this.shakingWilds, this);
          this.node.on("RESET_ANIM_WILDS", this.resetAnimWilds, this);
          this.node.on("RESET_STACK_WILD", this.resetStackWild, this);
          this.node.getShowWilds = this.getShowWilds.bind(this);
          this._symbolBgs = this.background.children.slice();
          this._symbols = this.staticsNode.children.slice();
        };

        _proto.start = function start() {
          this._symbols.forEach(function (sb, index) {
            sb.emit("CHANGE_TO_SYMBOL", index === 3 ? "L" : "K");
          });

          this.node.active = false;
        }
        /**@API */
        ;

        _proto.init = function init(symbolHeight) {
          this._symbolHeight = symbolHeight;
        };

        _proto.setStackWild = function setStackWild(stackData) {
          this.resetStackWild();
          var type = stackData.type;
          this.node.active = type !== "0";
          this.stackData = Object.assign(Object.create(null), stackData);

          switch (type) {
            //* [0: top], [6: bottom] always show
            case "A1":
              this._symbols[0].active = false;
              this._symbolBgs[1].active = false;
              break;

            case "A2":
              this._symbols[0].active = this._symbols[1].active = false;
              this._symbolBgs[1].active = this._symbolBgs[2].active = false;
              break;

            case "A3":
              this._symbolBgs[0].active = this._symbols[0].active = false;
              this._symbolBgs[1].active = this._symbols[1].active = false;
              this._symbolBgs[2].active = this._symbols[2].active = false;
              break;

            case "B1":
              this._symbols[6].active = false;
              this._symbolBgs[5].active = false;
              break;

            case "B2":
              this._symbols[5].active = this._symbols[6].active = false;
              this._symbolBgs[4].active = this._symbolBgs[5].active = false;
              break;

            case "B3":
              this._symbolBgs[6].active = this._symbols[6].active = false;
              this._symbolBgs[5].active = this._symbols[5].active = false;
              this._symbolBgs[4].active = this._symbols[4].active = false;
              break;

            case "FAKE":
              this._symbolBgs[6].active = this._symbols[6].active = false;
              this._symbolBgs[5].active = this._symbols[5].active = false;
              this._symbolBgs[4].active = this._symbols[4].active = false;

              this._symbols.forEach(function (sb) {
                return sb.active && sb.emit("CHANGE_TO_BLUR_SYMBOL", sb.symbol);
              });

              break;
          }

          this._alignSymbols();

          this._setShowWilds();
        };

        _proto.resetStackWild = function resetStackWild() {
          for (var index = 0; index < 7; index++) {
            this._symbolBgs[index].active = this._symbols[index].active = true;

            this._symbols.forEach(function (sb) {
              return sb.emit("CHANGE_TO_SYMBOL", sb.symbol);
            });
          }

          this.stackData = null;
          this._showWilds = [null, null, null];
          this.resetAnimWilds();
          this.showParticle(false);
          this.showGongEffect(false);
          this.node.active = false;
        };

        _proto.getShowWilds = function getShowWilds() {
          return this._showWilds;
        };

        _proto.showParticle = function showParticle(isShow) {};

        _proto.showGongEffect = function showGongEffect(isShow) {};

        _proto.shakingWilds = function shakingWilds() {
          this._symbols.forEach(function (sb) {
            return sb.active && sb.emit("SHAKING");
          });
        };

        _proto.resetAnimWilds = function resetAnimWilds() {
          this._symbols.forEach(function (sb) {
            return sb.emit("RESET_WILD");
          });
        }
        /**@private */
        ;

        _proto._alignSymbols = function _alignSymbols() {
          var _this2 = this;

          var activeSymbols = this._symbols.filter(function (sb) {
            return sb.active;
          });

          activeSymbols.forEach(function (sb, index) {
            return sb.setPosition(0, -(index + 0.5) * _this2._symbolHeight);
          });

          var activeBgs = this._symbolBgs.filter(function (sb) {
            return sb.active;
          });

          activeBgs.forEach(function (bg, index) {
            return bg.setPosition(0, -(index + 0.5) * _this2._symbolHeight);
          });
        };

        _proto._setShowWilds = function _setShowWilds() {
          if (this.stackData.type !== "0") return;
          if (this.stackData.type !== "FAKE") return;

          var activeSymbols = this._symbols.filter(function (sb) {
            return sb.active;
          });

          var _this$stackData = this.stackData,
              step = _this$stackData.step,
              size = _this$stackData.size,
              nudgeStep = _this$stackData.nudgeStep;
          var topIndex = step - size + nudgeStep;

          for (var index = 0, len = activeSymbols.length; index < len; index++) {
            var row = topIndex + index;

            if (row >= 0 && row < 3) {
              this._showWilds[row] = activeSymbols[index];
            }
          }
        } //*/
        ;

        return GongStackWild;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "background", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "staticsNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GongTable.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SlotTable.ts', './GongUtils.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, SlotTable, processStackData;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      SlotTable = module.SlotTable;
    }, function (module) {
      processStackData = module.processStackData;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "6cee7e1eQFLOohQikjEaGBE", "GongTable", undefined);

      var ccclass = _decorator.ccclass;
      var GongTable = exports('GongTable', (_dec = ccclass('GongTable'), _dec(_class = /*#__PURE__*/function (_SlotTable) {
        _inheritsLoose(GongTable, _SlotTable);

        function GongTable() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SlotTable.call.apply(_SlotTable, [this].concat(args)) || this;
          _this._isSpeedUp = false;
          _this._countNudge = 0;
          _this._callbackNudge = null;
          _this.stackFormats = null;
          return _this;
        }

        var _proto = GongTable.prototype;

        _proto.onLoad = function onLoad() {
          globalThis['gongTable'] = this;

          _SlotTable.prototype.onLoad.call(this);

          this.node.on("SETUP_STACK_WILDS", this.setupStackWilds, this);
          this.node.on("SPEED_UP_REELS", this.speedUpReels, this);
          this.node.on("RUN_ANIM_NUDGE", this.runAnimNudges, this);
          this.node.on("REEL_FINISH_NUDGE", this.onReelFinishedNudge, this);
          this.node.on("SKIP_NUDGE", this.skipAnimNudges, this);
        };

        _proto.setupStackWilds = function setupStackWilds(_ref) {
          var _this2 = this;

          var matrix = _ref.matrix,
              stackWilds = _ref.stackWilds,
              nudges = _ref.nudges;
          this.matrix = matrix;
          this.stackFormats = processStackData(matrix, stackWilds, nudges);
          this.reels.forEach(function (reel, col) {
            return reel.emit("SET_STACK_DATA", _this2.stackFormats[col]);
          });
        };

        _proto.speedUpReels = function speedUpReels() {
          this._isSpeedUp = true;
          this.reels.forEach(function (reel) {
            return reel.emi("SPEED_UP");
          });
        };

        _proto.changeMatrix = function changeMatrix(_ref2) {
          var _this3 = this;

          var matrix = _ref2.matrix,
              stackWilds = _ref2.stackWilds,
              nudges = _ref2.nudges;
          this.setupStackWilds({
            matrix: matrix,
            stackWilds: stackWilds,
            nudges: nudges
          });
          this.reels.forEach(function (reel, col) {
            reel.emit('UPDATE_SYMBOLS', _this3.matrix[col]);
            reel.emit('SHOW_STACK_WILD');
          });
        };

        _proto.fastToResult = function fastToResult() {
          if (this.isFastToResult) return;
          this.isFastToResult = true;
          if (!this._isSpinning) return;
          var stepToAddStackWilds = this.stackFormats.map(function (format) {
            return format.step;
          });
          var maxStepToAdd = Math.max.apply(null, stepToAddStackWilds);
          this.reels.forEach(function (reel) {
            return reel.emit('FAST_STOP', maxStepToAdd);
          });
        };

        _proto.runAnimNudges = function runAnimNudges(callback) {
          var _this4 = this;

          this._callbackNudge = function () {
            callback && callback(); // next Script

            _this4._callbackNudge = null;
          };

          this._countNudge = 0;
          this.reels.forEach(function (reel) {
            return reel.emit("RUN_NUDGE");
          });
        };

        _proto.onReelFinishedNudge = function onReelFinishedNudge(evt) {
          evt.stopPropagation();
          this._countNudge++;

          if (this._countNudge === this.reels.length) {
            this._callbackNudge && this._callbackNudge();
          }
        };

        _proto.skipAnimNudges = function skipAnimNudges(callback) {
          if (!this._callbackNudge && callback) {
            this._callbackNudge = callback;
            this._countNudge = 0;
          }

          this.reels.forEach(function (reel) {
            return reel.emit("SKIP_NUDGE");
          });
        }
        /**@private */
        ;

        _proto._getDefaultMatrix = function _getDefaultMatrix() {
          var defaultMatrix = [[["2", "3", "7"], ["5", "2", "3"], ["K", "K", "L"], ["5", "2", "3"], ["2", "3", "7"]], [["2", "3", "2"], ["5", "3", "6"], ["K", "L", "K"], ["6", "3", "5"], ["2", "3", "2"]], [["4", "7", "3"], ["6", "2", "5"], ["L", "K", "K"], ["6", "2", "5"], ["4", "7", "3"]], [["7", "2", "7"], ["2", "3", "2"], ["3", "4", "3"], ["4", "5", "4"], ["K", "L", "K"]], [["7", "2", "7"], ["4", "2", "4"], ["K", "L", "K"], ["3", "2", "3"], ["K", "L", "K"]], [["K", "K", "L"], ["7", "4", "6"], ["K", "K", "K"], ["7", "4", "6"], ["K", "K", "L"]], //
          [["K", "L", "K"], ["2", "7", "2"], ["3", "2", "3"], ["4", "3", "4"], ["6", "4", "6"]], [["K", "L", "K"], ["3", "2", "7"], ["K", "K", "L"], ["3", "2", "7"], ["K", "L", "K"]], [["K", "L", "K"], ["3", "7", "3"], ["K", "L", "K"], ["2", "7", "2"], ["4", "7", "4"]], [["L", "K", "K"], ["2", "4", "3"], ["K", "L", "K"], ["3", "4", "2"], ["K", "K", "L"]]];
          var defaultStackWilds = [["9;0", "9;0", "0;B3", "9;0", "9;0"], ["9;0", "9;0", "0;B2", "9;0", "9;0"], ["9;0", "9;0", "0;B1", "9;0", "9;0"], ["9;0", "9;0", "9;0", "9;0", "0;C"], ["9;0", "9;0", "0;B1", "9;0", "0;C"], ["0;A1", "9;0", "0;C", "9;0", "0;C"], ["0;A1", "9;0", "9;0", "9;0", "9;0"], ["0;A1", "9;0", "0;C", "9;0", "0;B1"], ["0;A1", "9;0", "0;C", "9;0", "9;0"], ["0;A1", "9;0", "0;C", "9;0", "0;B1"]];
          var index = Math.floor(Math.random() * defaultMatrix.length); // index = 9; // *test

          var matrix = defaultMatrix[index];
          var stackWilds = defaultStackWilds[index];
          return {
            matrix: matrix,
            stackWilds: stackWilds
          };
        }
        /* // todo open for test
        start() {
            this.init();
        }
        setTurbo() {
            this.dataStore.setTurbo(!this.dataStore.modeTurbo);
        }
        startSpinning() {
            if (this._isSpinning) return;
            this.skipAnimNudges();
            this.scheduleOnce(() => {  
                super.startSpinning();
                this._testResultReceive();
            }, 0.1);
        }
        _testResultReceive() {
            const { matrix, stackWilds } = this._getDefaultMatrix();
            const nudges = [6, 6, 6, 6, 6];
            this.scheduleOnce(() => {
                this.setupStackWilds({ matrix, stackWilds, nudges });
                this.stopSpinning(matrix, () => {
                    this.runAnimNudges();
                });
            }, 0.2);
        }
        _testChangeMatrix() {
            const { matrix, stackWilds } = this._getDefaultMatrix();
            const nudges = [4, 6, 6, 6, 8];
            this.changeMatrix({ matrix, stackWilds, nudges });
        }
        //*/
        ;

        return GongTable;
      }(SlotTable)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GongUtils.ts", ['cc', './utils.ts'], function (exports) {
  'use strict';

  var cclegacy, randRange;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      randRange = module.randRange;
    }],
    execute: function () {
      exports({
        getFakeStackData: getFakeStackData,
        processStackData: processStackData
      });

      cclegacy._RF.push({}, "10e76DQDKBHQ4xLXrLzeNnE", "GongUtils", undefined);

      function processStackData(matrix, stackWilds, nudges) {
        if (stackWilds === void 0) {
          stackWilds = ["9;0", "9;0", "0;B3", "9;0", "9;0"];
        }

        if (nudges === void 0) {
          nudges = [6, 6, 6, 6, 6];
        }

        var stackFormats = [];

        for (var col = 0; col < stackWilds.length; col++) {
          var type = stackWilds[col].split(";")[1];
          var isFake = Math.random() > 0.5;

          if (type === "0" && isFake) {
            stackFormats.push(getFakeStackData());
            continue;
          }

          var nudge = nudges[col];
          var nudgeStep = (6 - nudge) % 4;
          var lastIndex = parseInt(stackWilds[col].split(";")[0]);
          var size = getStackSize(type);
          var gongRow = matrix[col].indexOf("L");
          var firstIndex = lastIndex - nudgeStep;
          var format = {
            lastIndex: lastIndex,
            firstIndex: firstIndex,
            type: type,
            nudgeStep: nudgeStep,
            gongRow: gongRow,
            size: size,
            nudge: nudge
          };
          format.step = getStepToAddWild(format);
          stackFormats.push(format);
        }

        return stackFormats;
      }

      function getStackSize(type) {
        switch (type) {
          case "C":
            return 7;

          case "A1":
          case "B1":
            return 6;

          case "A2":
          case "B2":
            return 5;

          case "A3":
          case "B3":
            return 4;
        }

        return 0;
      }

      function getGongIndex(stackType) {
        switch (stackType) {
          case "A1":
          case "A2":
          case "A3":
          case "C":
            return 4;

          case "B1":
            return 3;

          case "B2":
            return 2;

          case "B3":
            return 1;
        }

        return 0;
      }

      function getStepToAddWild(format) {
        var firstIndex = format.firstIndex,
            size = format.size,
            gongRow = format.gongRow,
            type = format.type,
            nudgeStep = format.nudgeStep;
        var gongIndex = getGongIndex(type);
        if (gongRow > -1) return gongRow + gongIndex - nudgeStep;
        if (firstIndex === 9) return null;
        if (firstIndex > 0) return size + firstIndex;
        if (firstIndex < 0) return 3 + firstIndex;

        if (firstIndex === 0) {
          if (type.includes("B")) return size;
          if (type.includes("A")) return 3;

          if (type === "C") {
            var random = Math.random();
            return random > 0.5 ? 3 : size;
          }
        }
      }

      function getFakeStackData() {
        var type = "FAKE",
            size = 4;
        var firstIndex = randRange(3, 6);
        var step = size + firstIndex;
        var lastIndex = firstIndex;
        return {
          type: type,
          size: size,
          step: step,
          firstIndex: firstIndex,
          lastIndex: lastIndex
        };
      }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GridRenderer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './MapManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Camera, Node, Graphics, Vec3, UITransform, Component, MapManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Camera = module.Camera;
      Node = module.Node;
      Graphics = module.Graphics;
      Vec3 = module.Vec3;
      UITransform = module.UITransform;
      Component = module.Component;
    }, function (module) {
      MapManager = module.MapManager;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "0514axyXDRAm5f6Dy+KbVFk", "GridRenderer", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GridRenderer = exports('GridRenderer', (_dec = ccclass('GridRenderer'), _dec2 = property({
        type: Camera
      }), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GridRenderer, _Component);

        function GridRenderer() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "camera", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "gridHolder", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "pathHolder", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "pathLineHolder", _descriptor4, _assertThisInitialized(_this));

          _this._selectedGrid = [];
          _this._selectedPath = [];
          _this._gridGraphic = null;
          _this._pathGraphic = null;
          _this._pathLineGraphic = null;
          _this._mapManager = null;
          _this._gridColumn = 0;
          _this._gridRow = 0;
          _this._gridWidth = 0;
          _this._gridHeight = 0;
          _this._startY = 0;
          _this._startX = 0;
          _this._mapData = null;
          return _this;
        }

        var _proto = GridRenderer.prototype;

        _proto.start = function start() {
          this._mapManager = this.node.parent.getComponent(MapManager);

          var config = this._mapManager.getConfig();

          this._gridColumn = config.gridColumn;
          this._gridRow = config.gridRow;
          this._gridWidth = config.gridWidth;
          this._gridHeight = config.gridHeight;
          this._startX = config.startX;
          this._startY = config.startY;
          this._mapData = config.mapData;
          this._gridGraphic = this.gridHolder.getComponent(Graphics);
          this._pathGraphic = this.pathHolder.getComponent(Graphics);
          this._pathLineGraphic = this.pathLineHolder.getComponent(Graphics);
          this.node.on(Node.EventType.MOUSE_DOWN, this.onMouseDown, this);
          this.node.on(Node.EventType.TOUCH_MOVE, this.onMouseMove, this);
          this.node.on(Node.EventType.MOUSE_UP, this.onMouseUp, this);
          this.renderGrid(this._gridGraphic);
          this.renderCollider();
          this.renderZIndex();
        };

        _proto.onMouseDown = function onMouseDown(ev) {
          var location = ev.getLocation(new Vec3());
          var worldPos = this.camera.screenToWorld(location, new Vec3());
          var localPos = this.node.getComponent(UITransform).convertToNodeSpaceAR(worldPos);
          console.log(localPos);
          var gridPos = this.node.parent.getComponent(MapManager).positionToGrid(localPos);
          console.log(gridPos);
          var position = this.node.parent.getComponent(MapManager).gridToPosition(gridPos.row, gridPos.col);
          console.log(position);

          this._resetSelectPath();
        };

        _proto._resetSelectPath = function _resetSelectPath() {
          this._selectedPath = [];

          var config = this._mapManager.getConfig();

          this._selectedGrid = [];

          for (var r = 0; r < config.gridRow; r++) {
            this._selectedGrid[r] = [];

            for (var c = 0; c < config.gridColumn; c++) {
              this._selectedGrid[r][c] = false;
            }
          }

          this._pathGraphic.clear();
        };

        _proto.onMouseMove = function onMouseMove(ev) {
          var location = ev.getLocation(new Vec3());
          var worldPos = this.camera.screenToWorld(location, new Vec3());
          var localPos = this.node.getComponent(UITransform).convertToNodeSpaceAR(worldPos);
          var gridPos = this.node.parent.getComponent(MapManager).positionToGrid(localPos);
          gridPos.row = Math.floor(gridPos.row);
          gridPos.col = Math.floor(gridPos.col);

          if (!this._selectedGrid[gridPos.row][gridPos.col]) {
            this._selectedGrid[gridPos.row][gridPos.col] = true;

            this._selectedPath.push({
              r: gridPos.row,
              c: gridPos.col
            });

            this.renderBlock(this._pathGraphic, gridPos.row, gridPos.col);
          }
        };

        _proto.onMouseUp = function onMouseUp(ev) {
          if (this._selectedGrid.length > 0) {
            console.log(this._selectedPath);
          }
        };

        _proto.renderBlock = function renderBlock(g, r, c) {
          var position = this._mapManager.gridCenterToPosition(r, c);

          var config = this._mapManager.getConfig();

          g.moveTo(position.x - config.gridWidth / 2, position.y);
          g.lineTo(position.x, position.y + config.gridHeight / 2);
          g.lineTo(position.x + config.gridWidth / 2, position.y);
          g.lineTo(position.x, position.y - config.gridHeight / 2);
          g.stroke();
          g.fill();
        };

        _proto.renderGrid = function renderGrid(g) {
          g.clear();
          g.lineWidth = 4;
          g.fillColor.fromHEX('#ff0000');

          for (var col = 0; col <= this._gridColumn; col++) {
            var posX = this._startX + col * this._gridWidth / 2;
            var posY = this._startY - col * this._gridHeight / 2;
            g.moveTo(posX, posY);
            g.lineTo(posX - this._gridWidth / 2 * this._gridRow, posY - this._gridHeight / 2 * this._gridRow);
          }

          for (var row = 0; row <= this._gridRow; row++) {
            var _posX = this._startX - row * this._gridWidth / 2;

            var _posY = this._startY - row * this._gridHeight / 2;

            g.moveTo(_posX, _posY);
            g.lineTo(_posX + this._gridWidth / 2 * this._gridColumn, _posY - this._gridHeight / 2 * this._gridColumn);
          }

          g.stroke();
        };

        _proto.renderCollider = function renderCollider() {
          for (var i = 0; i < this._mapData.collider.length; i++) {
            if (this._mapData.collider[i] == 1) {
              var row = Math.floor(i / this._mapData.mapSize.width);
              var col = i % this._mapData.mapSize.width;
              this.renderBlock(this._gridGraphic, row, col);
            }
          }
        };

        _proto.renderZIndex = function renderZIndex() {
          /*for (let i=0; i<this._mapData.collider.length; i++) {
              if (this._mapData.zIndex[i] != 0) {
                  const row = Math.floor(i / this._mapData.mapSize.width);
                  const col = i % this._mapData.mapSize.width;
                  this.renderBlock(this._gridGraphic, row, col);
              }
          }*/
        };

        _proto.renderPathLine = function renderPathLine(path) {
          if (this._pathLineGraphic) {
            this._pathLineGraphic.moveTo(path[0].x, path[0].y);

            for (var i = 1; i < path.length; i++) {
              this._pathLineGraphic.lineTo(path[i].x, path[i].y);
            }

            this._pathLineGraphic.stroke();
          }
        };

        return GridRenderer;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "camera", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "gridHolder", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "pathHolder", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "pathLineHolder", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GunSkill1998.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfGunSkill.ts', './gfActionHelper.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Tween, v3, tween, gfGunSkill, scaleTo;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Tween = module.Tween;
      v3 = module.v3;
      tween = module.tween;
    }, function (module) {
      gfGunSkill = module.gfGunSkill;
    }, function (module) {
      scaleTo = module.scaleTo;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "79052QClrhKw7wgXSPA2/C0", "GunSkill1998", undefined);

      var ccclass = _decorator.ccclass;
      var GunSkill1998 = exports('GunSkill1998', (_dec = ccclass('GunSkill1998'), _dec(_class = /*#__PURE__*/function (_gfGunSkill) {
        _inheritsLoose(GunSkill1998, _gfGunSkill);

        function GunSkill1998() {
          return _gfGunSkill.apply(this, arguments) || this;
        }

        var _proto = GunSkill1998.prototype;

        _proto.showSkillTitle = function showSkillTitle() {
          var _this = this;

          this.skillTitle.parent = this.node.parent.parent;
          this.skillTitle.active = true;
          Tween.stopAllByTarget(this.skillTitle);
          this.skillTitle.setScale(v3(0, 0, 0));
          tween(this.skillTitle).to(0.7, {
            scale: v3(1, 1, 1)
          }).call(function () {
            tween(_this.skillTitle).repeatForever(tween().then(scaleTo(.4, 0.9, 0.9, 'sineIn')).then(scaleTo(.4, 1.1, 1.1))).start();
          }).start();
        };

        return GunSkill1998;
      }(gfGunSkill)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/hashKey.ts", ['cc', './crypto-core.ts'], function (exports) {
  'use strict';

  var cclegacy, CryptoJS;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      CryptoJS = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "6917c03Q9dI0ZrQj5E+tge7", "hashKey", undefined);

      var hash = exports('default', function hash(cipherMethodKey, message) {
        if (cipherMethodKey === void 0) {
          cipherMethodKey = '';
        }

        if (message === void 0) {
          message = '';
        }

        if (!cipherMethodKey) {
          return '';
        }

        var upperCaseCipherMethodKey = cipherMethodKey.trim().toUpperCase();

        if (upperCaseCipherMethodKey.length < 3) {
          return '';
        }

        return CryptoJS[upperCaseCipherMethodKey](message).toString();
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HotUpdate.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UpdatePanel.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, log, sys, game, Component, UpdatePanel;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      log = module.log;
      sys = module.sys;
      game = module.game;
      Component = module.Component;
    }, function (module) {
      UpdatePanel = module.UpdatePanel;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "8ee7ate7OVDEph2ruFCYLQZ", "HotUpdate", undefined);

      var jsb = window.jsb;
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var HotUpdate = exports('HotUpdate', (_dec = ccclass('HotUpdate'), _dec2 = property(UpdatePanel), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(HotUpdate, _Component);

        function HotUpdate() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "panel", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "manifestFileName", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "storageDownloadPath", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "maximumRetry", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "autodownload", _descriptor5, _assertThisInitialized(_this));

          _this._updating = false;
          _this._canRetry = false;
          _this._storagePath = '';
          _this._am = null;
          _this._updateListener = null;
          _this._failCount = 0;

          _this.versionCompareHandle = function (versionA, versionB) {
            console.log("JS Custom Version Compare: version A is " + versionA + " version B is " + versionB);
            var vA = versionA.split('.');
            var vB = versionB.split('.');

            for (var i = 0; i < vA.length; ++i) {
              var a = parseInt(vA[i]);
              var b = parseInt(vB[i] || '0');

              if (a === b) {
                continue;
              } else {
                return a - b;
              }
            }

            if (vB.length > vA.length) {
              return -1;
            } else {
              return 0;
            }
          };

          return _this;
        }

        var _proto = HotUpdate.prototype;

        _proto.onLoad = function onLoad() {
          if (!jsb) {
            return;
          }

          var writablePath = jsb.fileUtils ? jsb.fileUtils.getWritablePath() : '/';
          this._storagePath = "" + writablePath + this.storageDownloadPath;
          console.log('Storage path for remote asset : ' + this._storagePath);
          this._am = new jsb.AssetsManager('', this._storagePath, this.versionCompareHandle); //TODO MD5 compare check

          this._am.setVerifyCallback(this._verifyFileHandle.bind(this));

          this.loadManifest();
          this.checkUpdate();
        };

        _proto._verifyFileHandle = function _verifyFileHandle(path, asset) {
          var compressed = asset.compressed;
          var relativePath = asset.path;
          var size = asset.size;

          if (compressed) {
            log("Verification passed: " + relativePath);
            return true;
          } else {
            //TODO implement md5 content, it's too lagging
            var fileSize = jsb.fileUtils.getFileSize(path);

            if (size == fileSize) {
              log("Verification passed: " + relativePath);
              return true;
            }

            log("Verification failed: " + relativePath + " " + size + "/" + fileSize);
            return false;
          }
        };

        _proto.loadManifest = function loadManifest() {
          if (sys.isNative) {
            if (jsb.fileUtils.isFileExist(this.manifestFileName)) {
              var path = jsb.fileUtils.fullPathForFilename(this.manifestFileName);
              log("find manifest at path " + path);

              this._am.loadLocalManifest(path);
            } else {
              log("cant find manifest");
            }
          }
        };

        _proto.loadManifestFromString = function loadManifestFromString(customManifestStr) {
          if (this._am.getState() === jsb.AssetsManager.State.UNINITED) {
            log('load custom manifest');
            var manifest = new jsb.Manifest(customManifestStr, this._storagePath);

            this._am.loadLocalManifest(manifest, this._storagePath);
          }
        };

        _proto.checkUpdate = function checkUpdate() {
          if (!this._am) return;

          if (this._updating) {
            this.panel.info.string = 'Checking version';
            return;
          }

          this._updating = true;

          if (this._am.getState() === jsb.AssetsManager.State.UNINITED) {
            log("Failed to checkUpdate, need to load manifest first");
          }

          if (!this._am.getLocalManifest() || !this._am.getLocalManifest().isLoaded()) {
            log("Failed to load local manifest ...");
            return;
          }

          this._am.setEventCallback(this.checkCb.bind(this));

          this._am.checkUpdate();
        };

        _proto.checkCb = function checkCb(event) {
          console.log('Code: ' + event.getEventCode());
          var hasNewVersion = false;

          switch (event.getEventCode()) {
            case jsb.EventAssetsManager.ERROR_NO_LOCAL_MANIFEST:
              log("No local manifest file found, hot update skipped.");
              break;

            case jsb.EventAssetsManager.ERROR_DOWNLOAD_MANIFEST:
            case jsb.EventAssetsManager.ERROR_PARSE_MANIFEST:
              log("Fail to download manifest file, hot update skipped.");
              break;

            case jsb.EventAssetsManager.ALREADY_UP_TO_DATE:
              log("Already up to date with the latest remote version.");
              break;

            case jsb.EventAssetsManager.NEW_VERSION_FOUND:
              log('New version found');
              hasNewVersion = true;
              this.panel.node.active = true;
              this.panel.byteProgress.progress = 0;
              break;

            default:
              return;
          }

          this._am.setEventCallback(null);

          this._checkListener = null;
          this._updating = false;

          if (hasNewVersion && this.autodownload) {
            this.hotUpdate();
          }
        };

        _proto.hotUpdate = function hotUpdate() {
          if (this._am && !this._updating) {
            this._updating = true;

            this._am.setEventCallback(this.updateCb.bind(this));

            if (this._am.getState() === jsb.AssetsManager.State.UNINITED) {
              log("Failed to load hotupdate, need load manifest first");
            }

            this._failCount = 0;

            this._am.update();
          }
        };

        _proto.updateCb = function updateCb(event) {
          var doFinishJob = false;
          var failed = false;

          switch (event.getEventCode()) {
            case jsb.EventAssetsManager.ERROR_NO_LOCAL_MANIFEST:
              log("No local manifest file found, hot update skipped.");
              failed = true;
              break;

            case jsb.EventAssetsManager.UPDATE_PROGRESSION:
              var percent = event.getPercent();

              if (!isNaN(percent)) {
                this.panel.byteProgress.progress = percent;
                this.panel.info.string = "Updating..." + Math.floor(percent * 100) + "%";
              }

              var msg = event.getMessage();

              if (msg) {
                log("Updated file: " + msg);
              }

              break;

            case jsb.EventAssetsManager.ERROR_DOWNLOAD_MANIFEST:
            case jsb.EventAssetsManager.ERROR_PARSE_MANIFEST:
              log("Fail to download manifest file, hot update skipped.");
              failed = true;
              break;

            case jsb.EventAssetsManager.ALREADY_UP_TO_DATE:
              log("Already up to date with the latest remote version.");
              failed = true;
              break;

            case jsb.EventAssetsManager.UPDATE_FINISHED:
              log("Update finished. " + event.getMessage());
              doFinishJob = true;
              break;

            case jsb.EventAssetsManager.UPDATE_FAILED:
              log("Update failed. " + event.getMessage());
              this._updating = false;
              this._canRetry = true;
              break;

            case jsb.EventAssetsManager.ERROR_UPDATING:
              log("Asset update error: " + event.getAssetId() + ", " + event.getMessage());
              break;

            case jsb.EventAssetsManager.ERROR_DECOMPRESS:
              this.panel.info.string = event.getMessage();
              break;
          }

          if (failed) {
            this._am.setEventCallback(null);

            this._updateListener = null;
            this._updating = false;
          }

          if (this._canRetry) {
            if (this._failCount < this.maximumRetry) {
              this._failCount += 1;
              this.retry();
            } else {
              this.panel.info.string = "Failed to update new version, restart game to try again";
            }
          }

          if (doFinishJob) {
            this._am.setEventCallback(null);

            this._updateListener = null;
            var searchPaths = jsb.fileUtils.getSearchPaths();

            var newPaths = this._am.getLocalManifest().getSearchPaths();

            console.log(JSON.stringify(newPaths));
            Array.prototype.unshift.apply(searchPaths, newPaths);
            localStorage.setItem('HotUpdateSearchPaths', JSON.stringify(searchPaths));
            jsb.fileUtils.setSearchPaths(searchPaths);
            setTimeout(function () {
              game.restart();
            }, 1000);
          }
        };

        _proto.retry = function retry() {
          if (!this._updating && this._canRetry) {
            this._canRetry = false;
            this.panel.info.string = "Retry failed Assets...";

            this._am.downloadFailedAssets();
          }
        };

        _proto.onDestroy = function onDestroy() {
          if (this._updateListener) {
            this._am.setEventCallback(null);

            this._updateListener = null;
          }
        };

        _createClass(HotUpdate, [{
          key: "IsUpdating",
          get: function get() {
            return this._updating;
          }
        }]);

        return HotUpdate;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "panel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "manifestFileName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'project.manifest';
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "storageDownloadPath", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'gemi-hotupdate';
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "maximumRetry", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 3;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "autodownload", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HUDController1989.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfDataStore.ts', './gfEventEmitter.ts', './FishManager1989.ts', './gfHUDController.ts', './gfBaseConfig.ts', './gfBaseEvents.ts', './EventsCode1989.ts', './gfUtilities.ts', './Config1989.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Sprite, SpriteFrame, Vec3, sys, Button, sp, tween, Tween, setOpacity, fadeIn, gfDataStore, gfEventEmitter, FishManager1989, GfHUDController, gfBaseConfig, gfBaseEvents, EventsCode1989, registerEvent, Config1989;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Sprite = module.Sprite;
      SpriteFrame = module.SpriteFrame;
      Vec3 = module.Vec3;
      sys = module.sys;
      Button = module.Button;
      sp = module.sp;
      tween = module.tween;
      Tween = module.Tween;
    }, function (module) {
      setOpacity = module.setOpacity;
      fadeIn = module.fadeIn;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      FishManager1989 = module.default;
    }, function (module) {
      GfHUDController = module.GfHUDController;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      EventsCode1989 = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
    }, function (module) {
      Config1989 = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12;

      cclegacy._RF.push({}, "b608e1twpVO2oScmWMs4H77", "HUDController1989", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var HUDController1989 = exports('HUDController1989', (_dec = ccclass('HUDController1989'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Sprite), _dec5 = property(SpriteFrame), _dec6 = property(SpriteFrame), _dec7 = property(SpriteFrame), _dec8 = property(SpriteFrame), _dec9 = property(SpriteFrame), _dec10 = property(SpriteFrame), _dec11 = property(Node), _dec12 = property(Node), _dec13 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_GfHUDController) {
        _inheritsLoose(HUDController1989, _GfHUDController);

        function HUDController1989() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GfHUDController.call.apply(_GfHUDController, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "listFrameActive", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "skillNode", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "frameActive", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listActive", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listPressed", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listNormal", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listHover", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listTextStateLockFish", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listTextStateExtermination", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnMenu", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "pauseIcon", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "autoFireHolder", _descriptor12, _assertThisInitialized(_this));

          _this.tweenMenuSkill = null;
          _this.tweenPause = null;
          _this._isShowMenu = false;
          _this._isHover = false;
          _this._isActiveSkill = false;
          _this._isAnimDone = true;
          _this.startPos = new Vec3(-40, 0, 0);
          _this._currentSkill = 0;
          return _this;
        }

        var _proto = HUDController1989.prototype;

        _proto.onLoad = function onLoad() {
          _GfHUDController.prototype.onLoad.call(this);

          this.skillNode.setPosition(this.startPos);

          if (!sys.isNative) {
            this.btnMenu.on(Node.EventType.MOUSE_ENTER, this.onMouseEnter, this);
            this.btnMenu.on(Node.EventType.MOUSE_LEAVE, this.onMouseLeave, this);
            this.btnMenu.on(Node.EventType.MOUSE_DOWN, this.onMouseDown, this);
          }

          registerEvent(EventsCode1989.GAME_LAYER.ON_SEND_FIRE, this.closeHub, this);
          registerEvent(EventsCode1989.GAME_LAYER.CLOSE_HUD, this.closeHub, this);
          registerEvent(EventsCode1989.COMMON.ON_SCREEN_RESIZE, this.updateSceneResize, this);

          if (this.pauseIcon) {
            setOpacity(this.pauseIcon, 0);
          }

          this.setUpButtonSkillState();
        };

        _proto.updateSceneResize = function updateSceneResize() {
          var newWidth = Config1989.instance.realSize.Width / 2 * -680 / 780;
          this.autoFireHolder.setPosition(newWidth, this.autoFireHolder.position.y, this.node.position.z);
        };

        _proto.onAutoFire = function onAutoFire() {
          if (gfDataStore.instance.isAutoPaused()) {
            return;
          }

          var point = new Vec3(gfBaseConfig.instance.realSize.Width / 2, gfBaseConfig.instance.realSize.Height / 2, 1);
          var mousePos = gfDataStore.instance.getMousePos();

          if (mousePos) {
            point = mousePos;
          }

          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.ON_SEND_FIRE, {
            point: point,
            lockFishID: -1
          });
        };

        _proto.setUpButtonSkillState = function setUpButtonSkillState(type) {
          if (type === void 0) {
            type = 3;
          }

          var buttonActive = this.btnMenu.getComponent(Button);
          var index = type - 1;
          buttonActive.normalSprite = this.listNormal[index];
          buttonActive.hoverSprite = this.listHover[index];
          buttonActive.pressedSprite = this.listPressed[index];
          buttonActive.disabledSprite = this.listPressed[index];
        };

        _proto.chooseFishByPoint = function chooseFishByPoint(point) {
          var selfInfo = gfDataStore.instance.getSelfInfo();

          if (selfInfo.LockFish) {
            selfInfo.LockFish.enabledLock(false);
          }

          var fish = FishManager1989.instance.GetFishByPoint(point);
          if (!fish) return;
          gfDataStore.instance.setSelfInfo({
            LockFish: fish,
            LockFishKind: fish.getKind(),
            LockFishID: fish.getId()
          });

          if (gfDataStore.instance.getTargetState() === gfBaseConfig.instance.TARGET_LOCK.TARGET_ONE) {
            gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.HIDE_NOTIFY_LOCK_FISH);
            this.updateLockFishImg(fish.getKind());
          } else if (gfDataStore.instance.getTargetState() === gfBaseConfig.instance.TARGET_LOCK.TARGET_ALL) {
            this['_targetLockTime'] = selfInfo.TargetTime;
            gfDataStore.instance.setSelfInfo({
              isPriorityTargetBoss: this.isBossKind(fish.getKind())
            });
          }
        };

        _proto.targetButtonOn = function targetButtonOn(type) {
          this.setUpButtonSkillState(type);

          if (type > 0) {
            this._isActiveSkill = true;
          }

          if (this.fxBtnAbove) {
            this.fxBtnAbove.active = true;
            var anim = this.fxBtnAbove.getComponent(sp.Skeleton);
            anim.setAnimation(0, 'animation', true);
          }

          this._currentSkill = type;
          this.showTextBtn(type);
        };

        _proto.showTextBtn = function showTextBtn(type) {
          this.listTextBtn[type - 1].active = true;
          this.onStateTextBtn();
        };

        _proto.closeHub = function closeHub() {
          if (!this._isShowMenu) return;
          this.onAnimHide();
        };

        _proto.targetButtonsOff = function targetButtonsOff() {
          gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.HIDE_NOTIFY_LOCK_FISH);
          this.fishNotifyImg.active = false;
          this.setUpButtonSkillState();
          if (this.fxBtnAbove) this.fxBtnAbove.active = false;
          this._isActiveSkill = false;
          this.listTextBtn.forEach(function (item) {
            item.active = false;
          });
          this.listFrameActive.forEach(function (item) {
            item.active = false;
          });
          this.interactableHUD();
        };

        _proto.onButtonAutoClick = function onButtonAutoClick() {
          this._currentSkill = 0;
          this.setUpButtonSkillState();

          if (this._isActiveSkill) {
            this.changeStatusGroupButton();
            this.pauseIcon.active = false;
          }

          if (!this._isShowMenu) {
            this.onAnimShow();
          } else {
            this.onAnimHide();
          }
        };

        _proto.onAnimShow = function onAnimShow() {
          var _this2 = this;

          if (!this._isAnimDone) return;
          this._isAnimDone = false;
          this.tweenMenuSkill && this.tweenMenuSkill.stop();
          this.tweenMenuSkill = tween(this.skillNode);
          this.tweenMenuSkill.to(0.4, {
            position: new Vec3(107, 0, 0)
          }, {
            easing: 'sineOut'
          }).call(function () {
            _this2._isShowMenu = true;
            _this2._isAnimDone = true;
          }).start();
        };

        _proto.onAnimHide = function onAnimHide() {
          var _this3 = this;

          if (!this._isAnimDone) return;
          this._isAnimDone = false;
          this.tweenMenuSkill && this.tweenMenuSkill.stop();
          this.tweenMenuSkill = tween(this.skillNode);
          this.tweenMenuSkill.to(0.4, {
            position: this.startPos
          }, {
            easing: 'sineIn'
          }).call(function () {
            _this3._isAnimDone = true;
            _this3._isShowMenu = false;
          }).start();
        };

        _proto.onAutoTargetOne = function onAutoTargetOne() {
          if (gfDataStore.instance.isAutoPaused()) {
            return;
          }

          var selfInfo = gfDataStore.instance.getSelfInfo();

          if (selfInfo.LockFishKind > -1) {
            if (!selfInfo.LockFish || !selfInfo.LockFish.isAvailable()) {
              var lockFish = FishManager1989.instance.getFishByType(selfInfo.LockFishKind);
              var lockFishID = lockFish ? lockFish.getId() : null;
              gfDataStore.instance.setSelfInfo({
                LockFish: lockFish,
                LockFishID: lockFishID
              });
            }

            if (selfInfo.LockFish && selfInfo.LockFish.isAvailable()) {
              selfInfo.LockFish.enabledLock(true);
              gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.ON_SEND_FIRE, {
                point: selfInfo.LockFish.node.position,
                lockFishID: selfInfo.LockFish._FishID
              });
            } else {
              this.changeStatusGroupButton(gfBaseConfig.instance.TARGET_LOCK.NONE);
              this.resetLockFish();
            }
          }
        };

        _proto.updateLockFishImg = function updateLockFishImg(fishKind) {
          if (fishKind === void 0) {
            fishKind = 0;
          }

          var assetFishes = this['listFishNotify'];
          var key = fishKind - 1;

          if (assetFishes[key]) {
            this.updateImgButtonLockFish();
            this.fishNotifyImg.active = true;
            this.fishNotifyImg.getComponent(Sprite).spriteFrame = assetFishes[key];
            Tween.stopAllByTarget(this.fishNotifyImg);
            tween(this.fishNotifyImg).to(0, {
              scale: new Vec3(this._scaleFactor, this._scaleFactor, this._scaleFactor)
            }).to(0.1, {
              scale: new Vec3(this._scaleFactor + 0.5, this._scaleFactor + 0.5, this._scaleFactor + 0.5)
            }).to(0, {
              scale: new Vec3(this._scaleFactor, this._scaleFactor, this._scaleFactor)
            }).start();
          }
        };

        _proto.updateImgButtonLockFish = function updateImgButtonLockFish() {
          var buttonActive = this.btnMenu.getComponent(Button);
          buttonActive.normalSprite = this.listPressed[1];
        };

        _proto.onMouseEnter = function onMouseEnter() {
          if (!this._isActiveSkill) return;
          this.pauseIcon.active = true;
          Tween.stopAllByTarget(this.pauseIcon);
          fadeIn(this.pauseIcon, 0.1);
          this.onStateTextBtn(0);
        };

        _proto.onMouseLeave = function onMouseLeave() {
          if (!this.pauseIcon.active) return;
          Tween.stopAllByTarget(this.pauseIcon);
          setOpacity(this.pauseIcon, 0);
          this.pauseIcon.active = false;
          this.onStateTextBtn(1);
        };

        _proto.onMouseDown = function onMouseDown() {
          if (!this._isActiveSkill) return;
          this.onStateTextBtn(2);
        };

        _proto.onStateTextBtn = function onStateTextBtn(state) {
          if (state === void 0) {
            state = 1;
          }

          if (this._currentSkill == 0) return;
          var listImgState = this._currentSkill == 1 ? this.listTextStateExtermination : this.listTextStateLockFish;
          var sprite = listImgState[state];
          this.listTextBtn[this._currentSkill - 1].getComponent(Sprite).spriteFrame = sprite;
        };

        _proto.onClickTargetBtn = function onClickTargetBtn(event, data) {
          _GfHUDController.prototype.onClickTargetBtn.call(this, event, data);

          this.onAnimHide();
        };

        _proto.stopTarget = function stopTarget() {
          this._stopLockFish();

          _GfHUDController.prototype.stopTarget.call(this);
        };

        _proto.pauseAutoFire = function pauseAutoFire() {
          this._stopLockFish();

          _GfHUDController.prototype.pauseAutoFire.call(this);
        };

        _proto.resetLockFish = function resetLockFish() {
          this._stopLockFish();

          _GfHUDController.prototype.resetLockFish.call(this);
        };

        _proto._stopLockFish = function _stopLockFish() {
          var selfInfo = gfDataStore.instance.getSelfInfo();

          if (selfInfo.LockFish && selfInfo.LockFishKind > 0) {
            var lockFish = selfInfo.LockFish;
            lockFish.stopLock();
          }
        };

        return HUDController1989;
      }(GfHUDController), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "listFrameActive", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "skillNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "frameActive", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "listActive", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "listPressed", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "listNormal", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "listHover", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "listTextStateLockFish", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "listTextStateExtermination", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "btnMenu", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "pauseIcon", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "autoFireHolder", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HUDController1998.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfHUDController.ts', './gfEventEmitter.ts', './Config1998.ts', './DataStore1998.ts', './gfBaseEvents.ts', './gfActionHelper.ts', './FishManager1998.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Button, SpriteFrame, Vec3, tween, v3, Sprite, GfHUDController, gfEventEmitter, Config1998, DataStore1998, gfBaseEvents, stopAllActions, FishManager1998;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Button = module.Button;
      SpriteFrame = module.SpriteFrame;
      Vec3 = module.Vec3;
      tween = module.tween;
      v3 = module.v3;
      Sprite = module.Sprite;
    }, function (module) {
      GfHUDController = module.GfHUDController;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      Config1998 = module.default;
    }, function (module) {
      DataStore1998 = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      stopAllActions = module.stopAllActions;
    }, function (module) {
      FishManager1998 = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "8e87e7FCLtFkJRd+M65eKPL", "HUDController1998", undefined);

      var TIME_SHOW_HIDE = 0.15;
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var HUDController1998 = exports('HUDController1998', (_dec = ccclass('HUDController1998'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Button), _dec5 = property(Node), _dec6 = property(Node), _dec7 = property(SpriteFrame), _dec(_class = (_class2 = /*#__PURE__*/function (_GfHUDController) {
        _inheritsLoose(HUDController1998, _GfHUDController);

        function HUDController1998() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GfHUDController.call.apply(_GfHUDController, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "panelExpand", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeAuto", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnAuto", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listNodeAuto", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listNodeFXActive", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listSpriteFrame", _descriptor6, _assertThisInitialized(_this));

          _this._isShow = false;
          _this.actionLastTime = void 0;
          return _this;
        }

        var _proto = HUDController1998.prototype;

        _proto.onLoad = function onLoad() {
          _GfHUDController.prototype.onLoad.call(this);

          this.actionLastTime = Date.now();
          this._scaleFactor = 1.1;
          this._posButton = [new Vec3(-114, -230, 1), new Vec3(24, -230, 1), new Vec3(-44, -158, 1), new Vec3(-44, -307, 1)];
          this.resetAllState();
        };

        _proto.updateLockFishImg = function updateLockFishImg(fishKind) {
          if (fishKind === void 0) {
            fishKind = 0;
          }

          var FISH_KIND = Config1998.instance.FISH_KIND;

          if (fishKind === FISH_KIND.BOMB) {
            this._scaleFactor = 0.9;
          } else if (fishKind === FISH_KIND.LASER_CRAB) {
            this._scaleFactor = 0.8;
          } else {
            this._scaleFactor = 1.0;
          }

          _GfHUDController.prototype.updateLockFishImg.call(this, fishKind);
        };

        _proto.onButtonAutoClick = function onButtonAutoClick() {
          var _this2 = this;

          tween(this.nodeAuto).call(function () {
            _this2.btnAuto.enabled = true;
          }).call(function () {
            if (_this2._isShow) {
              _this2.onAnimHide();
            } else {
              _this2.onAnimShow();
            }
          }).start();
        };

        _proto.onAnimShow = function onAnimShow() {
          var _this3 = this;

          if (this._isShow) return;
          this._isShow = true;
          this.nodeAuto.active = true;
          this.stopAllNodeActions();

          var _loop = function _loop(i) {
            var node = _this3.listNodeAuto[i];
            node.active = true;
            node.setScale(new Vec3(.82, .82, .82));
            _this3.listNodeFXActive[i].active = false;
            _this3.listButton[1].getComponent(Sprite).spriteFrame = _this3.listSpriteFrame[0];
            tween(node).call(function () {
              _this3.listButton[i].getComponent(Button).interactable = false;
              _this3.btnAuto.getComponent(Button).interactable = false;
            }).to(TIME_SHOW_HIDE, {
              position: _this3._posButton[i]
            }).call(function () {
              _this3.listButton[i].getComponent(Button).interactable = true;
              _this3.btnAuto.getComponent(Button).interactable = true;
            }).start();
          };

          for (var i = 0; i < this.listNodeAuto.length; ++i) {
            _loop(i);
          }

          tween(this.panelExpand).to(TIME_SHOW_HIDE, {
            scale: v3(1, 1, 1)
          }).call(function () {
            _this3.btnAuto.enabled = true;
          }).start();
        };

        _proto.onAnimHide = function onAnimHide(idButton) {
          if (idButton === void 0) {
            idButton = Config1998.instance.TARGET_LOCK.NONE;
          }

          if (!this._isShow) return;
          this.stopAllNodeActions();

          if (idButton == Config1998.instance.TARGET_LOCK.NONE) {
            for (var i = 0; i < this.listNodeAuto.length; ++i) {
              var node = this.listNodeAuto[i];
              this.listButton[i].getComponent(Button).interactable = false;
              this.listNodeFXActive[i].active = false;
              node.position = this._posButton[this._posButton.length - 1];
              node.active = false;
            }
          } else {
            this.btnAuto.enabled = false;
            this.nodeAuto.active = false;

            for (var _i = 0; _i < this.listNodeAuto.length; ++_i) {
              var _node = this.listNodeAuto[_i];
              var isActive = +idButton == _i + 1 ? true : false;
              this.listButton[_i].getComponent(Button).interactable = isActive;
              this.listNodeFXActive[_i].active = isActive;
              _node.position = this._posButton[this._posButton.length - 1];
              _node.active = isActive;

              if (isActive) {
                _node.setScale(new Vec3(1, 1, 1));

                this.changeStatusGroupButton(parseInt(idButton));
              }
            }
          }

          this._isShow = false;
          this.panelExpand.setScale(new Vec3(0, 0, 0));
        };

        _proto.onClickTargetBtn = function onClickTargetBtn(event, data) {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);

          if (this._checkValidClick()) {
            if (this._isShow) {
              this.onAnimHide(data);
            } else {
              this.onAnimShow();
              this.changeStatusGroupButton(parseInt(data));
            }
          }

          this.actionLastTime = Date.now();
        };

        _proto._checkValidClick = function _checkValidClick() {
          var deltaTime = Date.now() - this.actionLastTime;
          return deltaTime > 40;
        };

        _proto.stopAllNodeActions = function stopAllNodeActions() {
          stopAllActions(this.panelExpand);

          for (var i = 0; i < this.listNodeAuto.length; i++) {
            stopAllActions(this.listNodeAuto[i]);
          }
        };

        _proto.onAutoTargetOne = function onAutoTargetOne() {
          if (DataStore1998.instance.isAutoPaused()) {
            return;
          }

          var selfInfo = DataStore1998.instance.getSelfInfo();

          if (selfInfo.LockFishKind > -1) {
            if (!selfInfo.LockFish || !selfInfo.LockFish.isAvailable()) {
              DataStore1998.instance.setSelfInfo({
                LockFish: FishManager1998.instance.getFishByType(selfInfo.LockFishKind)
              });
            }

            if (selfInfo.LockFish && selfInfo.LockFish.isAvailable()) {
              gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.ON_SEND_FIRE, {
                point: selfInfo.LockFish.node.position,
                lockFishID: selfInfo.LockFish._FishID
              });
              this.listButton[1].getComponent(Sprite).spriteFrame = this.listSpriteFrame[1];
            } else {
              this.resetAllState();
              this.changeStatusGroupButton(Config1998.instance.TARGET_LOCK.NONE);
            }
          }
        };

        _proto.targetButtonOn = function targetButtonOn(type) {};

        _proto.targetButtonsOff = function targetButtonsOff() {
          gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.HIDE_NOTIFY_LOCK_FISH);
          this.fishNotifyImg.active = false;
          this.listButton.forEach(function (button) {
            button.getComponent(Button).interactable = true;
          });
        };

        _proto.resetAllState = function resetAllState() {
          for (var i = 0; i < this.listNodeAuto.length; ++i) {
            stopAllActions(this.listNodeAuto[i]);
            this.listNodeAuto[i].setPosition(this._posButton[this._posButton.length - 1]);
            this.listNodeAuto[i].active = false;
          }

          this._isShow = false;
          this.nodeAuto.active = true;
          this.btnAuto.enabled = true;
          this.btnAuto.getComponent(Button).interactable = true;
          this.panelExpand.setScale(new Vec3(0, 1, 1));
          DataStore1998.instance.setDataStore({
            targetState: Config1998.instance.TARGET_LOCK.NONE,
            currentTargetState: Config1998.instance.TARGET_LOCK.NONE
          });
        };

        _proto.interactableHUD = function interactableHUD(interactable) {
          if (interactable === void 0) {
            interactable = true;
          }

          _GfHUDController.prototype.interactableHUD.call(this, interactable);

          this.btnAuto.interactable = interactable;
        };

        _proto.resumeOldTarget = function resumeOldTarget() {
          var oldTarget = DataStore1998.instance.getOldTarget();

          _GfHUDController.prototype.resumeOldTarget.call(this);

          this.playResumeBeforeFireSkill(oldTarget.targetState);
        };

        _proto.playResumeBeforeFireSkill = function playResumeBeforeFireSkill(targetState) {
          if (!targetState) return;
          this.nodeAuto.active = false;
          this.listNodeAuto[targetState - 1].active = true;
          this.listButton[targetState - 1].getComponent(Button).interactable = true;
        };

        _proto.resetOnExit = function resetOnExit() {
          _GfHUDController.prototype.resetOnExit.call(this);

          this.resetAllState();
        };

        return HUDController1998;
      }(GfHUDController), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "panelExpand", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "nodeAuto", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "btnAuto", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "listNodeAuto", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "listNodeFXActive", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "listSpriteFrame", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Info.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EventNames.ts', './SlotUIScene.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Button, Node, SpriteFrame, PageView, Mask, Sprite, EventNames, SlotUIScene;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Button = module.Button;
      Node = module.Node;
      SpriteFrame = module.SpriteFrame;
      PageView = module.PageView;
      Mask = module.Mask;
      Sprite = module.Sprite;
    }, function (module) {
      EventNames = module.default;
    }, function (module) {
      SlotUIScene = module.SlotUIScene;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "787c4iWE1VA5rWmuHjmz9DN", "Info", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Info = exports('Info', (_dec = ccclass('Info'), _dec2 = property({
        type: Button
      }), _dec3 = property({
        type: Button
      }), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: SpriteFrame
      }), _dec6 = property({
        type: PageView
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_SlotUIScene) {
        _inheritsLoose(Info, _SlotUIScene);

        function Info() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SlotUIScene.call.apply(_SlotUIScene, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "nextBtn", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "preBtn", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "infoTitle", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "titles", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "pageView", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "isCircular", _descriptor6, _assertThisInitialized(_this));

          _this.curInfoID = 0;
          _this.maskComponent = null;
          _this.viewNode = null;
          return _this;
        }

        var _proto = Info.prototype;

        _proto.onLoad = function onLoad() {
          globalThis.info = this;

          _SlotUIScene.prototype.onLoad.call(this);

          this.node.on("NEXT_GAME_INFO", this.next, this);
          this.node.on("PREVIOUS_GAME_INFO", this.previous, this);
          this.pageView.node.on('page-turning', this.pageViewEvent, this);
          this.activeButtons(this.curInfoID);
          this.preBtn.interactable = false;
          this.maskComponent = this.pageView.getComponentInChildren(Mask);
          this.viewNode = this.maskComponent.node;
        };

        _proto.enter = function enter() {
          this.resetInfo();
        };

        _proto.pageViewEvent = function pageViewEvent() {
          var newIndex = this.pageView.getCurrentPageIndex();

          if (Math.abs(newIndex - this.curInfoID) !== 1) {
            this.pageView.scrollToPage(this.curInfoID, 0.1);
            return;
          }

          this.curInfoID = newIndex;
          this.activeButtons(this.curInfoID);
        };

        _proto.next = function next() {
          this.soundPlayer && this.soundPlayer.playSFXClick();
          this.curInfoID++;
          this.activeButtons(this.curInfoID);
          this.pageView.scrollToPage(this.curInfoID);
          this.eventManager.emit(EventNames.OPEN_INFO, this.curInfoID);
        };

        _proto.previous = function previous() {
          this.soundPlayer && this.soundPlayer.playSFXClick();
          this.curInfoID--;
          this.activeButtons(this.curInfoID);
          this.pageView.scrollToPage(this.curInfoID);
          this.eventManager.emit(EventNames.OPEN_INFO, this.curInfoID);
        };

        _proto.activeButtons = function activeButtons(id) {
          var nextBtn = this.nextBtn,
              preBtn = this.preBtn,
              infoTitle = this.infoTitle;
          var totalInfo = this.pageView.content.children.length;

          if (this.isCircular) {
            nextBtn.interactable = true;
            preBtn.interactable = true;

            if (id > totalInfo - 1) {
              id = 0;
            }

            if (id < 0) {
              id = totalInfo - 1;
            }
          } else {
            if (id >= totalInfo - 1) {
              id = totalInfo - 1;
              nextBtn.interactable = false;
            } else {
              nextBtn.interactable = true;
            }

            if (id <= 0) {
              id = 0;
              preBtn.interactable = false;
            } else {
              preBtn.interactable = true;
            }
          }

          this.curInfoID = id;

          if (infoTitle) {
            if (infoTitle.getComponent(Sprite)) {
              infoTitle.getComponent(Sprite).spriteFrame = this.titles[this.curInfoID];
            }
          }
        };

        _proto.resetInfo = function resetInfo() {
          this.pageView.scrollToPage(0, 0);
          this.curInfoID = 0;
          this.eventManager.emit(EventNames.OPEN_INFO, this.curInfoID);
          this.activeButtons(this.curInfoID);
        };

        _proto.onClose = function onClose() {
          this.soundPlayer && this.soundPlayer.playSFXClick();
          this.exit();
        };

        return Info;
      }(SlotUIScene), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "nextBtn", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "preBtn", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "infoTitle", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "titles", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "pageView", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "isCircular", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/InfoPayableSymbol.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './CustomEnum.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Layout, SpriteFrame, CCString, sp, UITransform, Sprite, Component, setOpacity, HorizontalExpandDirection, VerticalExpandDirection;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Layout = module.Layout;
      SpriteFrame = module.SpriteFrame;
      CCString = module.CCString;
      sp = module.sp;
      UITransform = module.UITransform;
      Sprite = module.Sprite;
      Component = module.Component;
    }, function (module) {
      setOpacity = module.setOpacity;
    }, function (module) {
      HorizontalExpandDirection = module.HorizontalExpandDirection;
      VerticalExpandDirection = module.VerticalExpandDirection;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22;

      cclegacy._RF.push({}, "6e508AeLOtNJaO3Ve4TWE5t", "InfoPayableSymbol", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var InfoPayableSymbol = exports('InfoPayableSymbol', (_dec = ccclass('InfoPayableSymbol'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Layout
      }), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: Node
      }), _dec6 = property({
        type: Node
      }), _dec7 = property({
        type: Node
      }), _dec8 = property({
        type: SpriteFrame
      }), _dec9 = property({
        type: CCString
      }), _dec10 = property({
        type: CCString
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(InfoPayableSymbol, _Component);

        function InfoPayableSymbol() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "frameBg", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "layout", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "description", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "payable", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "spine", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "border", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listPayables", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listSymbols", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listSymbolAnimations", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "borderAnimation", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bigNodeWidth", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bigDescriptionWidth", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bigBackgroundWidth", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bigBackgroundHeight", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "normalNodeWidth", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "normalDescriptionWidth", _descriptor16, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "normalBackgroundWidth", _descriptor17, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "normalBackgroundHeight", _descriptor18, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "normalBackgroundOffsetX", _descriptor19, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "normalWidthOffsetRatio", _descriptor20, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "expandWidthOffsetRatio", _descriptor21, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "expandHeightOffsetRatio", _descriptor22, _assertThisInitialized(_this));

          _this.spineAnim = null;
          _this.borderAnim = null;
          _this.tweenScale = null;
          _this.tweenForever = null;
          return _this;
        }

        var _proto = InfoPayableSymbol.prototype;

        _proto.onLoad = function onLoad() {
          this.node.on("UPDATE_LAYOUT", this.updateLayout, this);
          this.node.on("UPDATE_DATA", this.updateData, this);
          this.node.on("RESET_ANIM", this.resetAnim, this);

          if (this.spine) {
            this.spineAnim = this.spine.getComponent(sp.Skeleton);
          }

          if (this.border) {
            this.borderAnim = this.border.getComponent(sp.Skeleton);
          }
        };

        _proto.updateLayout = function updateLayout(direction, newPos, symbolName, expandConfig) {
          var _this2 = this;

          if (direction === void 0) {
            direction = Layout.HorizontalDirection.LEFT_TO_RIGHT;
          }

          if (expandConfig === void 0) {
            expandConfig = null;
          }

          var newX = newPos.x;
          var newY = newPos.y;
          setOpacity(this.node, 0);
          this.node.getComponent(UITransform).width = this.normalNodeWidth;
          this.description.getComponent(UITransform).width = this.normalDescriptionWidth;
          this.frameBg.getComponent(UITransform).width = this.normalBackgroundWidth;
          this.frameBg.getComponent(UITransform).height = this.normalBackgroundHeight;

          var _x = direction === Layout.HorizontalDirection.LEFT_TO_RIGHT ? this.normalBackgroundOffsetX : -this.normalBackgroundOffsetX;

          this.frameBg.setPosition(_x, this.frameBg.getPosition().y);
          var widthNode = this.node.getComponent(UITransform).width;
          newX = direction === Layout.HorizontalDirection.LEFT_TO_RIGHT ? newPos.x + widthNode * this.normalWidthOffsetRatio : newPos.x - widthNode * this.normalWidthOffsetRatio;

          if (expandConfig) {
            if (expandConfig.expandWidth > 1) {
              this.node.getComponent(UITransform).width = this.bigNodeWidth;
              this.description.getComponent(UITransform).width = this.bigDescriptionWidth;
              this.frameBg.getComponent(UITransform).width = this.bigBackgroundWidth;
              this.frameBg.setPosition(0, this.frameBg.getPosition().y);
              var nodeWidth = this.node.getComponent(UITransform).width;

              if (expandConfig.expandDirectionHorizontal === HorizontalExpandDirection.LeftToRight) {
                newX = newPos.x + nodeWidth * this.expandWidthOffsetRatio;
              } else if (expandConfig.expandDirectionHorizontal === HorizontalExpandDirection.RightToLeft) {
                newX = newPos.x - nodeWidth * this.expandWidthOffsetRatio;
              }
            }

            if (expandConfig.expandHeight > 1) {
              this.frameBg.getComponent(UITransform).height = this.bigBackgroundHeight;
              this.frameBg.setPosition(0, this.frameBg.getPosition().y);
              var nodeHeight = this.node.getComponent(UITransform).height;

              if (expandConfig.expandDirectionVertical === VerticalExpandDirection.BottomToTop) {
                newY = newPos.y + nodeHeight * this.expandHeightOffsetRatio;
              } else if (expandConfig.expandDirectionVertical === VerticalExpandDirection.TopToBottom) {
                newY = newPos.y - nodeHeight * this.expandHeightOffsetRatio;
              }
            }
          }

          this.node.setPosition(newX, newY, 0);
          this.layout.horizontalDirection = direction;
          this.layout.updateLayout();
          this.scheduleOnce(function () {
            setOpacity(_this2.node, 255);
          }, 0.03);
        };

        _proto.updateData = function updateData(symbolName, spineData, spineBorder, specialSymbolAnim) {
          if (symbolName === void 0) {
            symbolName = null;
          }

          if (spineData === void 0) {
            spineData = null;
          }

          if (spineBorder === void 0) {
            spineBorder = null;
          }

          if (specialSymbolAnim === void 0) {
            specialSymbolAnim = null;
          }

          if (!symbolName) {
            return;
          }

          var index = this.listSymbols.indexOf(symbolName);
          var animationName = 'animation';

          if (index > -1) {
            this.payable.getComponent(Sprite).spriteFrame = this.listPayables[index];
            animationName = this.listSymbolAnimations[index];
          }

          if (spineData) {
            this.spineAnim.skeletonData = spineData;

            if (specialSymbolAnim && specialSymbolAnim !== "") {
              animationName = specialSymbolAnim;
            }

            if (this.spineAnim.findAnimation(animationName)) {
              this.spineAnim.setAnimation(0, animationName, true);
              this.spineAnim.timeScale = 0.5;
            }
          }

          if (spineBorder && this.borderAnim) {
            this.borderAnim.skeletonData = spineBorder;

            if (this.borderAnim.findAnimation(this.borderAnimation)) {
              this.borderAnim.setAnimation(0, this.borderAnimation, true);
            }
          }
        };

        _proto.resetAnim = function resetAnim() {
          if (this.spineAnim) this.spineAnim.skeletonData = null;
          if (this.borderAnim) this.borderAnim.skeletonData = null;
        };

        return InfoPayableSymbol;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "frameBg", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "layout", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "description", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "payable", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "spine", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "border", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "listPayables", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "listSymbols", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "listSymbolAnimations", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "borderAnimation", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "Touch";
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "bigNodeWidth", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 420;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "bigDescriptionWidth", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 240;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "bigBackgroundWidth", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 420;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "bigBackgroundHeight", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 420;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "normalNodeWidth", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 282;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "normalDescriptionWidth", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 95;
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "normalBackgroundWidth", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 300;
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "normalBackgroundHeight", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 300;
        }
      }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "normalBackgroundOffsetX", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 6;
        }
      }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "normalWidthOffsetRatio", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.2;
        }
      }), _descriptor21 = _applyDecoratedDescriptor(_class2.prototype, "expandWidthOffsetRatio", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.31;
        }
      }), _descriptor22 = _applyDecoratedDescriptor(_class2.prototype, "expandHeightOffsetRatio", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.5;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/InfoView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './SlotUIScene.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, ScrollView, setOpacity, SlotUIScene;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      ScrollView = module.ScrollView;
    }, function (module) {
      setOpacity = module.setOpacity;
    }, function (module) {
      SlotUIScene = module.SlotUIScene;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "d29b3UysERNGJVjy3C2MXzE", "InfoView", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var InfoView = exports('InfoView', (_dec = ccclass('InfoView'), _dec2 = property({
        type: ScrollView
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_SlotUIScene) {
        _inheritsLoose(InfoView, _SlotUIScene);

        function InfoView() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SlotUIScene.call.apply(_SlotUIScene, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "scrollView", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = InfoView.prototype;

        _proto.show = function show() {
          this.node.active = true;
          setOpacity(this.node, 255);
          this.node.show();
        };

        _proto.enter = function enter() {
          _SlotUIScene.prototype.enter.call(this);

          if (this.scrollView) {
            this.scrollView.scrollToTop();
          }
        };

        _proto.exit = function exit() {
          var _this2 = this; // overide exit
          // must have TweenView component


          var startCB = function startCB() {};

          var endCB = function endCB() {
            // this.node.opacity = 0;
            setOpacity(_this2.node, 1);
            _this2.node.active = false;
          };

          this.node.hide(startCB, endCB);
        };

        return InfoView;
      }(SlotUIScene), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "scrollView", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/InitSocketComponent.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './globalNetwork.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component, globalNetwork;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      globalNetwork = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "fe931LhyMNInZ7vvHP8UfBj", "InitSocketComponent", undefined);

      var ccclass = _decorator.ccclass;
      var InitSocketComponent = exports('InitSocketComponent', (_dec = ccclass('InitSocketComponent'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(InitSocketComponent, _Component);

        function InitSocketComponent() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = InitSocketComponent.prototype;

        _proto.init = function init(token) {
          globalNetwork.init(token);
        };

        return InitSocketComponent;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/IntroBonus.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SlotUIScene.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, SlotUIScene;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      SlotUIScene = module.SlotUIScene;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "2638biS6INOIaluPqSwjg40", "IntroBonus", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var IntroBonus = exports('IntroBonus', (_dec = ccclass('IntroBonus'), _dec(_class = /*#__PURE__*/function (_SlotUIScene) {
        _inheritsLoose(IntroBonus, _SlotUIScene);

        function IntroBonus() {
          return _SlotUIScene.apply(this, arguments) || this;
        }

        var _proto = IntroBonus.prototype;

        _proto.start = function start() {// [3]
        };

        _proto.show = function show() {
          _SlotUIScene.prototype.show.call(this);

          this.scheduleOnce(this.exit, 2);
        };

        return IntroBonus;
      }(SlotUIScene)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/IntroFree.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SlotUIScene.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, SlotUIScene;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      SlotUIScene = module.SlotUIScene;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "b9a8819CClDbIiqfjoqyyFm", "IntroFree", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var IntroFree = exports('IntroFree', (_dec = ccclass('IntroFree'), _dec(_class = /*#__PURE__*/function (_SlotUIScene) {
        _inheritsLoose(IntroFree, _SlotUIScene);

        function IntroFree() {
          return _SlotUIScene.apply(this, arguments) || this;
        }

        var _proto = IntroFree.prototype;

        _proto.show = function show() {
          _SlotUIScene.prototype.show.call(this);

          this.scheduleOnce(this.exit, 2);
        };

        return IntroFree;
      }(SlotUIScene)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/IntroJackpot.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SlotUIScene.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, SlotUIScene;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      SlotUIScene = module.SlotUIScene;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "ae6ceSm0OFE3qjajorAVs7e", "IntroJackpot", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var IntroJackpot = exports('IntroJackpot', (_dec = ccclass('IntroJackpot'), _dec(_class = /*#__PURE__*/function (_SlotUIScene) {
        _inheritsLoose(IntroJackpot, _SlotUIScene);

        function IntroJackpot() {
          return _SlotUIScene.apply(this, arguments) || this;
        }

        var _proto = IntroJackpot.prototype;

        _proto.show = function show() {
          _SlotUIScene.prototype.show.call(this);

          this.scheduleOnce(this.exit, 2);
        };

        return IntroJackpot;
      }(SlotUIScene)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ItemLobby.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Sprite, Button, Node, v3, Event, Component, Color;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Button = module.Button;
      Node = module.Node;
      v3 = module.v3;
      Event = module.Event;
      Component = module.Component;
      Color = module.Color;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "5c457zj8jZGaJOoxcIw0SWf", "ItemLobby", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ItemLobby = exports('ItemLobby', (_dec = ccclass('ItemLobby'), _dec2 = property({
        type: Sprite
      }), _dec3 = property({
        type: Button
      }), _dec4 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ItemLobby, _Component);

        function ItemLobby() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.gameId = null;

          _initializerDefineProperty(_this, "icon", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "button", _descriptor2, _assertThisInitialized(_this));

          _this.config = null;

          _initializerDefineProperty(_this, "jackpot", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "dimColor", _descriptor4, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = ItemLobby.prototype;

        _proto.onLoad = function onLoad() {
          this.node.on('ENABLE_SELECTED_GAME', this.enableGame.bind(this));
          this.node.on('DISABLE_SELECTED_GAME', this.disableGame.bind(this));
          this.node.on('JACKPOT_UPDATE', this.jackpotUpdate, this);
        };

        _proto.setJackpotY = function setJackpotY(posY) {
          this.jackpot.setPosition(v3(0, posY, 0));
        };

        _proto.jackpotUpdate = function jackpotUpdate(data) {
          var _this2 = this; // console.log(data);


          var listJP = Object.keys(data);
          var jpName = listJP.filter(function (it) {
            return it.indexOf(_this2.gameId) > 0;
          })[0];

          if (jpName) {
            var jpData = data[jpName];
            this.jackpot.emit('UPDATE_JACKPOT', {
              JP3: jpData[3],
              JP2: jpData[2],
              JP1: jpData[1]
            });
          }
        };

        _proto.setSprite = function setSprite(spriteFrame) {
          this.icon.spriteFrame = spriteFrame;
        };

        _proto.setGameConfig = function setGameConfig(id, config) {
          this.gameId = id;
          this.config = config;
        };

        _proto.disableGame = function disableGame() {
          this.icon.active = false; // this.icon.getComponent(Sprite).color = this.dimColor;
        };

        _proto.enableGame = function enableGame() {
          this.icon.active = true; // this.icon.getComponent(Sprite).color = Color.WHITE;
        };

        _proto.onClick = function onClick() {
          var ev = new Event('RQ_PLAY_GAME', true);
          ev['gameId'] = this.gameId;
          ev['config'] = this.config;
          this.node.dispatchEvent(ev);
        };

        return ItemLobby;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "icon", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "button", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "jackpot", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "dimColor", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Color();
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Jackpot.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './GameObject.ts', './CustomType.ts', './CustomEventNames.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, warn, Label, tweenMoney, GameObject, JackpotObject, gameEvent;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      warn = module.warn;
      Label = module.Label;
    }, function (module) {
      tweenMoney = module.tweenMoney;
    }, function (module) {
      GameObject = module.GameObject;
    }, function (module) {
      JackpotObject = module.JackpotObject;
    }, function (module) {
      gameEvent = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "696d9LQBQdEn6FLAb/WwOuE", "Jackpot", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Jackpot = exports('Jackpot', (_dec = ccclass('Jackpot'), _dec2 = property({
        type: JackpotObject
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(Jackpot, _GameObject);

        function Jackpot() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "listJackpots", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "isUsingExtraBet", _descriptor2, _assertThisInitialized(_this));

          _this.jackpots = {};
          _this.isInit = false;
          _this.isPausedJP = false;
          _this.JP_Prefix = void 0;
          _this.isJoinGame = false;
          _this.jackpotData = {};
          return _this;
        }

        var _proto = Jackpot.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          this.node.on("INIT_JACKPOT", this.initJackpot, this);
          this.node.on("UPDATE_JACKPOT", this.jackpotUpdate, this);
          this.node.on("CHANGE_JACKPOT", this.changeJackpot, this); // change bet

          this.node.on("PAUSE_JACKPOT", this.pauseRenderJP, this);
          this.node.on("RESUME_JACKPOT", this.resumeRenderJP, this);
          this.node.on("UPDATE_VALUE_JACKPOT", this.updateValueJP, this); // for case win Jackpot

          this.eventManager.on(gameEvent.BET_UPDATE, this.changeJackpot, this);
          this.initData();
        };

        _proto.initJackpot = function initJackpot(data) {
          this.isJoinGame = true;
          this.jackpotData = Object.assign({}, data);
          this.renderJackpot(3);
        };

        _proto.jackpotUpdate = function jackpotUpdate(data) {
          Object.assign(this.jackpotData, data);
          this.renderJackpot(3);
        };

        _proto.changeJackpot = function changeJackpot() {
          if (!this.isJoinGame) return;
          this.renderJackpot(.3);
        };

        _proto.pauseRenderJP = function pauseRenderJP() {
          this.isPausedJP = true;
        };

        _proto.resumeRenderJP = function resumeRenderJP(data) {
          if (data === void 0) {
            data = null;
          }

          if (data) {
            Object.assign(this.jackpotData, data);
          }

          this.isPausedJP = false;
          this.renderJackpot(0.01);
        };

        _proto.updateValueJP = function updateValueJP(jpType, jpValue) {
          if (this.jackpots[jpType]) {
            var jpObject = this.jackpots[jpType];
            this.renderJP({
              node: jpObject.jpNode,
              value: jpValue,
              time: 0.3
            });
          } else {
            warn("do not have jackpot", jpType);
          }
        };

        _proto.onJackpotHistory = function onJackpotHistory() {
          this.guiMgr.showJackpotHistory();
        };

        _proto.initData = function initData() {
          var _this2 = this;

          if (!this.isInit) {
            this.listJackpots.forEach(function (jpObj) {
              _this2.jackpots[jpObj.jpType] = jpObj;
            });
            this.JP_Prefix = this.config.JP_PREFIX_EVENT;
            this.isInit = true;
          }
        };

        _proto.renderJackpot = function renderJackpot(time) {
          var _this3 = this;

          if (time === void 0) {
            time = 3;
          }

          if (this.isPausedJP) return;
          var _this$dataStore$betDa = this.dataStore.betData,
              betKey = _this$dataStore$betDa.betKey,
              extraBetKey = _this$dataStore$betDa.extraBetKey;
          var betIndex = this.isUsingExtraBet ? extraBetKey : betKey;
          this.listJackpots.forEach(function (jpObj) {
            var value = _this3.getJackpotValue(jpObj.jpType, betIndex);

            _this3.renderJP({
              node: jpObj.jpNode,
              value: value,
              time: time
            });
          });
        };

        _proto.getJackpotValue = function getJackpotValue(jpType, betIndex) {
          var jpId = this.JP_Prefix + betIndex + "_" + jpType;

          if (this.jackpotData[jpId]) {
            return this.jackpotData[jpId];
          } else {
            warn("invalid Jackpot Id", jpId, this.jackpotData);
            return null;
          }
        };

        _proto.renderJP = function renderJP(_ref) {
          var node = _ref.node,
              value = _ref.value,
              _ref$time = _ref.time,
              time = _ref$time === void 0 ? 3 : _ref$time;

          if (value == null) {
            node.active = false;
            return;
          }

          if (node) {
            var label = node.getComponent(Label);

            if (label) {
              tweenMoney(label, time, value);
            }
          }
        };

        return Jackpot;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "listJackpots", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "isUsingExtraBet", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/JackpotCellHistory1998.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfUtilities.ts', './gfBaseCellHistory.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Label, formatTimeStamp, GfBaseCellHistory;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
    }, function (module) {
      formatTimeStamp = module.formatTimeStamp;
    }, function (module) {
      GfBaseCellHistory = module.GfBaseCellHistory;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "fa4efAsfWhFkbPfQ+agBzmq", "JackpotCellHistory1998", undefined);

      var ccclass = _decorator.ccclass;
      var JackpotCellHistory1998 = exports('JackpotCellHistory1998', (_dec = ccclass('JackpotCellHistory1998'), _dec(_class = /*#__PURE__*/function (_GfBaseCellHistory) {
        _inheritsLoose(JackpotCellHistory1998, _GfBaseCellHistory);

        function JackpotCellHistory1998() {
          return _GfBaseCellHistory.apply(this, arguments) || this;
        }

        var _proto = JackpotCellHistory1998.prototype;

        _proto.updateData = function updateData(data) {
          _GfBaseCellHistory.prototype.updateData.call(this, data);

          this.time.getComponent(Label).string = formatTimeStamp(data.time, " #DD#/#MM# #hhhh#:#mm#:#ss#");
        };

        return JackpotCellHistory1998;
      }(GfBaseCellHistory)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/JackpotCoinEffect.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Prefab, instantiate, ParticleSystem2D, view, tween, Vec3, Component, setOpacity;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Prefab = module.Prefab;
      instantiate = module.instantiate;
      ParticleSystem2D = module.ParticleSystem2D;
      view = module.view;
      tween = module.tween;
      Vec3 = module.Vec3;
      Component = module.Component;
    }, function (module) {
      setOpacity = module.setOpacity;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;

      cclegacy._RF.push({}, "0f6961lkbBDRYGKrjIY1tTs", "JackpotCoinEffect", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var JackpotCoinEffect = exports('JackpotCoinEffect', (_dec = ccclass('JackpotCoinEffect'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: Prefab
      }), _dec6 = property({
        type: [Node]
      }), _dec7 = property({
        type: [Node]
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(JackpotCoinEffect, _Component);

        function JackpotCoinEffect() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.duration = 10;
          _this.moneyPool = [];
          _this.moneyIndex = 0;

          _initializerDefineProperty(_this, "coinSpawnerCount", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "coinDropper", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "diamondDropper", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "moneySpawner", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "moneyPrefab", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "coinPiles", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "diamondPiles", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "coinPipeDelayTime", _descriptor8, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = JackpotCoinEffect.prototype;

        _proto.onLoad = function onLoad() {
          this.initValue();
          this.node.on('START_PARTICLE', this.startParticle, this);
          this.node.on('STOP_PARTICLE', this.stopParticle, this);
          this.node.on('DROP_MONEY', this.randomDropMoney, this);
          this.node.on('DROP_DIAMOND', this.dropDiamond, this);
          this.duration = 10;
        };

        _proto.initValue = function initValue() {
          if (!this.moneyPrefab) {
            return;
          }

          this.moneyPool = [];

          for (var i = 0; i < 20; ++i) {
            var money = instantiate(this.moneyPrefab);
            money.parent = this.moneySpawner;
            setOpacity(money, 0);
            this.moneyPool.push(money);
          }

          setOpacity(this.moneySpawner, 0);
        };

        _proto.startParticle = function startParticle() {
          var _this2 = this;

          this.coinDropper.getComponent(ParticleSystem2D).resetSystem();
          this.coinPiles.forEach(function (pile) {
            pile.getComponent(ParticleSystem2D).resetSystem();
            pile.setPosition(0, -view.getVisibleSize().height / 2);
            tween(pile).by(_this2.duration, {
              position: new Vec3(0, 50, 0)
            }).start();
          });
        };

        _proto.stopParticle = function stopParticle() {
          this.coinDropper.getComponent(ParticleSystem2D).stopSystem();
          this.coinPiles.forEach(function (pile) {
            pile.getComponent(ParticleSystem2D).stopSystem();
          });

          if (this.diamondDropper) {
            this.diamondDropper.getComponent(ParticleSystem2D).resetSystem();
            this.diamondDropper.getComponent(ParticleSystem2D).stopSystem();
            this.diamondPiles.forEach(function (pile) {
              pile.getComponent(ParticleSystem2D).resetSystem();
              pile.getComponent(ParticleSystem2D).stopSystem();
            });
          }
        };

        _proto.randomDropMoney = function randomDropMoney() {
          var _this3 = this;

          if (!this.moneyPrefab) {
            return;
          }

          this.moneyIndex = 0;
          setOpacity(this.moneySpawner, 255);
          tween(this.moneySpawner).repeatForever(tween().delay(0.3).call(function () {
            _this3.dropMoney();
          })).start();
        };

        _proto.dropMoney = function dropMoney() {
          var money = this.moneyPool[this.moneyIndex];
          this.moneyIndex = (this.moneyIndex + 1) % this.moneyPool.length;
          money.position.x = (Math.random() - 0.5) * view.getVisibleSize().width;
          var randomAnimIdx = Math.random() * 3 | 0 + 1;
          var animName = 'TienRoi' + randomAnimIdx;
          setOpacity(money, 255);
          money.getComponent('sp.Skeleton').setAnimation(0, animName, false);
        };

        _proto.dropDiamond = function dropDiamond() {
          setOpacity(this.diamondDropper, 0);
          this.diamondDropper.getComponent(ParticleSystem2D).resetSystem();
        };

        return JackpotCoinEffect;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "coinSpawnerCount", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 3;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "coinDropper", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "diamondDropper", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "moneySpawner", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "moneyPrefab", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Prefab();
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "coinPiles", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "diamondPiles", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "coinPipeDelayTime", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1.3;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/JackpotHistory1989.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseHistory.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, GfBaseHistory;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      GfBaseHistory = module.GfBaseHistory;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "cb2b1b+FKpP44U7LYIt20xI", "JackpotHistory1989", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var JackpotHistory1989 = exports('JackpotHistory1989', (_dec = ccclass('JackpotHistory1989'), _dec(_class = /*#__PURE__*/function (_GfBaseHistory) {
        _inheritsLoose(JackpotHistory1989, _GfBaseHistory);

        function JackpotHistory1989() {
          return _GfBaseHistory.apply(this, arguments) || this;
        }

        var _proto = JackpotHistory1989.prototype;

        _proto.initTableCells = function initTableCells(itemPerPage) {// for (let i = 0; i < itemPerPage; ++i) {
          //     const cell = instantiate(this.cell);
          //     cell.parent = this.table;
          // }
        };

        return JackpotHistory1989;
      }(GfBaseHistory)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/JackpotHistory1998.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseHistory.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, GfBaseHistory;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      GfBaseHistory = module.GfBaseHistory;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "d88f4FrtSFKn5deRhHIFtBj", "JackpotHistory1998", undefined);

      var ccclass = _decorator.ccclass;
      var JackpotHistory1998 = exports('JackpotHistory1998', (_dec = ccclass('JackpotHistory1998'), _dec(_class = /*#__PURE__*/function (_GfBaseHistory) {
        _inheritsLoose(JackpotHistory1998, _GfBaseHistory);

        function JackpotHistory1998() {
          return _GfBaseHistory.apply(this, arguments) || this;
        }

        return JackpotHistory1998;
      }(GfBaseHistory)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/JackpotInfo1998.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfJackpotInfo.ts', './gfActionHelper.ts', './gfEventEmitter.ts', './gfBaseEvents.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Animation, tween, GfJackpotInfo, stopAllActions, gfEventEmitter, gfBaseEvents;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Animation = module.Animation;
      tween = module.tween;
    }, function (module) {
      GfJackpotInfo = module.GfJackpotInfo;
    }, function (module) {
      stopAllActions = module.stopAllActions;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "7593aL72sBKMbaHuT/6hOD9", "JackpotInfo1998", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var JackpotInfo1998 = exports('JackpotInfo1998', (_dec = ccclass('JackpotInfo1998'), _dec2 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_GfJackpotInfo) {
        _inheritsLoose(JackpotInfo1998, _GfJackpotInfo);

        function JackpotInfo1998() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GfJackpotInfo.call.apply(_GfJackpotInfo, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "waringDragon", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = JackpotInfo1998.prototype;

        _proto.onDragonWarning = function onDragonWarning() {
          var _this2 = this;

          var animation = this.waringDragon.getComponent(Animation);
          stopAllActions(this.txtValue);
          tween(this.txtValue).call(function () {
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.DRAGON_APPEAR);
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHAKE_SCREEN, {
              timeOneStep: 0.1,
              amplitude: 10
            });
            _this2.waringDragon.active = true;
            animation.play();
          }).delay(2).call(function () {
            _this2.waringDragon.active = false;
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.RESET_VOLUME);
          }).start();
        };

        return JackpotInfo1998;
      }(GfJackpotInfo), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "waringDragon", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/JackpotStarFX1998.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfJackpotStarFX.ts', './gfUtilities.ts', './gfBaseConfig.ts', './utils.ts', './gfActionHelper.ts', './gfEventEmitter.ts', './gfBaseEvents.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, v3, isValid, tween, UITransform, gfJackpotStarFX, SetZIndex, gfBaseConfig, setOpacity, getPostionInOtherNode, rotateBy, fadeIn, scaleTo, fadeOut, gfEventEmitter, gfBaseEvents;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      v3 = module.v3;
      isValid = module.isValid;
      tween = module.tween;
      UITransform = module.UITransform;
    }, function (module) {
      gfJackpotStarFX = module.gfJackpotStarFX;
    }, function (module) {
      SetZIndex = module.SetZIndex;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      setOpacity = module.setOpacity;
      getPostionInOtherNode = module.getPostionInOtherNode;
    }, function (module) {
      rotateBy = module.rotateBy;
      fadeIn = module.fadeIn;
      scaleTo = module.scaleTo;
      fadeOut = module.fadeOut;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "352b8NDHDFF0qTrCQ0NXev0", "JackpotStarFX1998", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BallStarPos = [v3(4, 242), v3(202, 139), v3(246, -69), v3(114, -234), v3(-105, -236), v3(-244, -71), v3(-201, 139)];
      var JackpotStarFX1998 = exports('JackpotStarFX1998', (_dec = ccclass('JackpotStarFX1998'), _dec(_class = /*#__PURE__*/function (_gfJackpotStarFX) {
        _inheritsLoose(JackpotStarFX1998, _gfJackpotStarFX);

        function JackpotStarFX1998() {
          return _gfJackpotStarFX.apply(this, arguments) || this;
        }

        var _proto = JackpotStarFX1998.prototype;

        _proto.onLoad = function onLoad() {
          SetZIndex(this.node, gfBaseConfig.instance.Z_INDEX.POPUP);
        };

        _proto.playAnimation = function playAnimation(ballListArr) {
          var _this = this;

          var ballList = [].concat(ballListArr);
          var scaleTime = 1.25;
          var fadeDelay = 0.5;
          var glowDelay = 1.65;
          var scaleDelay = 0.15;
          var rotateTime = scaleTime + fadeDelay + glowDelay + scaleDelay;
          var ballFlyTime = 0.15; // fly to star

          var flyAwayTime = 0.2; // fly out of screen

          setOpacity(this.image, 0);
          ballList.forEach(function (ball, i) {
            if (isValid(ball.node)) {
              var ballPost = getPostionInOtherNode(_this.node, ball.node);

              if (ballPost) {
                ball.node.position = ballPost;
                ball.node.parent = _this.node;
                ball.moveToJackpotStar({
                  delay: ballFlyTime * i,
                  position: BallStarPos[i]
                });
              }
            }
          });
          tween(this.node).delay(1 + ballFlyTime * 7).parallel(rotateBy(rotateTime, 720), tween().then(tween().delay(fadeDelay).call(function () {
            tween(_this.image).then(fadeIn(0.5)).start();
          }).delay(glowDelay).call(function () {
            ballList.forEach(function (ball) {
              if (isValid(ball.node)) {
                ball.playGlowEffect();
              }
            });
          }).delay(scaleDelay).parallel(scaleTo(scaleTime, 0.4), tween().delay(1).call(function () {
            gfEventEmitter.instance.emit(gfBaseEvents.DRAGON.BIG_EXPLOSION, _this.node.getComponent(UITransform).convertToWorldSpaceAR(v3(0, 0)));
          }).delay(0.3)).call(function () {
            ballList.forEach(function (ball) {
              if (isValid(ball.node)) {
                ball.flyAway(flyAwayTime);
              }
            });
            tween(_this.image).then(fadeOut(0.5)).start();
          }).delay(scaleDelay).call(function () {
            gfEventEmitter.instance.emit(gfBaseEvents.DRAGON.SHOW_JACKPOT_WINAMOUNT);
          }).delay(0.75).call(function () {
            gfEventEmitter.instance.emit(gfBaseEvents.DRAGON.DONE_JACKPOT_STAR);
          }).removeSelf())).start();
        };

        return JackpotStarFX1998;
      }(gfJackpotStarFX)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/JackpotWin.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SlotUIScene.ts', './utils.ts', './CustomEnum.ts', './EventNames.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Label, Event, Vec3, tween, SlotUIScene, formatMoney, PerformanceLevel, TutorialTriggerType, EventNames;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
      Event = module.Event;
      Vec3 = module.Vec3;
      tween = module.tween;
    }, function (module) {
      SlotUIScene = module.SlotUIScene;
    }, function (module) {
      formatMoney = module.formatMoney;
    }, function (module) {
      PerformanceLevel = module.PerformanceLevel;
      TutorialTriggerType = module.TutorialTriggerType;
    }, function (module) {
      EventNames = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;

      cclegacy._RF.push({}, "902a6Wd+UhJi7XoeEOrAqzd", "JackpotWin", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var JackpotWin = exports('JackpotWin', (_dec = ccclass('JackpotWin'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_SlotUIScene) {
        _inheritsLoose(JackpotWin, _SlotUIScene);

        function JackpotWin() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SlotUIScene.call.apply(_SlotUIScene, [this].concat(args)) || this;
          _this.label = null;
          _this.currentValue = 0;
          _this.currentTitle = 0;
          _this.isUpdating = false;
          _this.speedUp = false;
          _this.skippable = false;
          _this.currentTween = null;
          _this.tweenWinAmount = null;
          _this.tweenTitle = null;
          _this.tweenExit = null;

          _initializerDefineProperty(_this, "winAmount", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "title", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "winInfo", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "coinsEffect", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "delayShowTime", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "hideTime", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "animDuration", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "extendFinishDelayTime", _descriptor8, _assertThisInitialized(_this));

          _this.animationLevel = 2;
          return _this;
        }

        var _proto = JackpotWin.prototype;

        _proto.onLoad = function onLoad() {
          _SlotUIScene.prototype.onLoad.call(this);

          var labels = this.winAmount.getComponentsInChildren(Label);
          this.label = labels[labels.length - 1];
        };

        _proto.enter = function enter() {
          this.eventManager.emit(EventNames.JACKPOT_START);

          if (!this.dataStore.isTrialMode) {
            var updatedEvent = new Event('NOTIFY_OPEN_JACKPOT', true);
            updatedEvent.winAmount = this.content.winAmount;
            updatedEvent.gameId = this.config.GAME_ID;
            this.node.dispatchEvent(updatedEvent);
          }

          var performanceLvl = this.dataStore && this.dataStore.performanceLevel || 'HIGH_PERFORMANCE_LV';
          this.animationLevel = this.config[performanceLvl].JP_WIN_ANIMATION;
          this.playSoundStart();
          this.playTweenWinAmount();
          this.playTweenTitle();
          this.initValue();
          this.startParticle();
          this.startUpdateWinAmount();
        };

        _proto.playSoundStart = function playSoundStart() {
          this.soundPlayer && this.soundPlayer.stopAllAudio();
          this.soundPlayer && this.soundPlayer.playSfx('JACKPOT_START', true);
        };

        _proto.playSoundEnd = function playSoundEnd() {
          this.soundPlayer && this.soundPlayer.playSfx('JACKPOT_END');
        };

        _proto.initValue = function initValue() {
          this.winInfo.scale = new Vec3(1, 1, 1);
          this.currentValue = 0;
          this.currentTitle = 0;
          this.label.string = '';
          this.isUpdating = true;
          this.speedUp = false;
          this.bindQuickShow();
        };

        _proto.bindQuickShow = function bindQuickShow() {
          var _this2 = this;

          this.skippable = false;
          tween(this.node).delay(this.hideTime).call(function () {
            _this2.skippable = true;
          }).start();
        };

        _proto.playTweenWinAmount = function playTweenWinAmount() {
          if (!this.winAmount) return;
          this.tweenWinAmount = tween(this.winAmount).repeatForever(tween().to(0.2, {
            scale: new Vec3(1.2, 1.2, 1.2)
          }).to(0.2, {
            scale: new Vec3(1, 1, 1)
          }));
          this.tweenWinAmount.start();
        };

        _proto.stopTweenWinAmount = function stopTweenWinAmount() {
          if (this.tweenWinAmount) this.tweenWinAmount.stop();

          if (this.winAmount) {
            this.winAmount.scale = Vec3.ONE;
          }
        };

        _proto.playTweenTitle = function playTweenTitle() {
          if (!this.title) return;
          this.tweenTitle = tween(this.title).repeatForever(tween().to(0.2, {
            scale: new Vec3(1.2, 1.2, 1.2)
          }).to(0.2, {
            scale: new Vec3(1, 1, 1)
          }));
          this.tweenTitle.start();
        };

        _proto.stopTweenTitle = function stopTweenTitle() {
          if (this.tweenTitle) this.tweenTitle.stop();

          if (this.title) {
            this.title.scale = Vec3.ONE;
          }
        };

        _proto.startParticle = function startParticle() {
          if (!this.coinsEffect) return;

          if (this.animationLevel < Number(PerformanceLevel.Medium)) {
            return;
          }

          this.coinsEffect.emit('START_PARTICLE');
          this.coinsEffect.emit('DROP_MONEY');
        };

        _proto.startUpdateWinAmount = function startUpdateWinAmount() {
          var _this3 = this;

          var halfAmount = 0.5 * Number(this.content.winAmount);
          var extendFinishDelayTime = this.dataStore && this.dataStore.isAutoSpin ? this.extendFinishDelayTime : 0;
          this.currentTween = tween(this);
          this.currentTween.to(0.5 * this.animDuration, {
            currentValue: halfAmount
          }).to(0.5 * this.animDuration, {
            currentValue: Number(this.content.winAmount)
          }).delay(extendFinishDelayTime).call(function () {
            if (_this3.dataStore && _this3.dataStore.isAutoSpin) {
              _this3.playSoundEnd();

              _this3.skippable = false;
              _this3.currentTween = null;

              _this3.finish();
            }
          });
          this.currentTween.start();
        };

        _proto.update = function update() {
          if (!this.isUpdating) return;
          this.label.string = formatMoney(this.currentValue);
        };

        _proto.onClick = function onClick() {
          var _this4 = this;

          if (!this.isUpdating || this.speedUp) return;
          if (!this.skippable) return;
          this.speedUp = true;
          this.playSoundEnd();

          if (this.currentTween) {
            this.currentTween.stop();
            this.currentTween = null;
          }

          this.currentTween = tween(this);
          this.currentTween.to(1, {
            currentValue: 1 * this.content.winAmount
          }).delay(0.1).call(function () {
            _this4.finish();
          }).start();
        };

        _proto.stopParticle = function stopParticle() {
          if (!this.coinsEffect) return;

          if (this.animationLevel < Number(PerformanceLevel.Medium)) {
            return;
          }

          this.coinsEffect.emit('STOP_PARTICLE');
        };

        _proto.finish = function finish() {
          var _this5 = this;

          this.isUpdating = false;
          this.label.string = formatMoney(this.content.winAmount);
          this.stopParticle();
          this.stopTweenTitle();
          this.stopTweenWinAmount();
          this.tweenExit = tween(this.node).delay(this.delayShowTime).call(function () {
            _this5.label.string = '';

            _this5.exit();

            _this5.soundPlayer && _this5.soundPlayer.stopAllAudio();
            _this5.soundPlayer && _this5.soundPlayer.playMainBGM();
          }).start();
        };

        _proto.onDisable = function onDisable() {
          this.currentTween && this.currentTween.stop();
          this.currentTween = null;
          this.tweenTitle && this.tweenTitle.stop();
          this.tweenTitle = null;
          this.tweenWinAmount && this.tweenWinAmount.stop();
          this.tweenWinAmount = null;
          this.tweenExit && this.tweenExit.stop();
          this.tweenExit = null;
        };

        _proto.exit = function exit() {
          this.soundPlayer && this.soundPlayer.stopAllEffects();
          this.eventManager.emit(EventNames.JACKPOT_END);
          this.guiMgr.onIngameEvent(TutorialTriggerType.OnJackpotCutsceneClose, 'ON_JACKPOT_CUTSCENE_CLOSE');

          _SlotUIScene.prototype.exit.call(this);
        };

        return JackpotWin;
      }(SlotUIScene), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "winAmount", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "title", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "winInfo", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "coinsEffect", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "delayShowTime", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 2;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "hideTime", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.5;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "animDuration", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 10;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "extendFinishDelayTime", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 15;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/JackpotWinPopup1998.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfEventEmitter.ts', './gfActionHelper.ts', './gfBaseEvents.ts', './gf3DParticle.ts', './gfCuSceneJackpotWin.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, v3, tween, Button, gfEventEmitter, stopAllActions, gfBaseEvents, gf3DParticle, GfCuSceneJackpotWin;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      v3 = module.v3;
      tween = module.tween;
      Button = module.Button;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      stopAllActions = module.stopAllActions;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gf3DParticle = module.gf3DParticle;
    }, function (module) {
      GfCuSceneJackpotWin = module.GfCuSceneJackpotWin;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "3b797TzuYxNxqEWJvIIfN5M", "JackpotWinPopup1998", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var JackpotWinPopup1998 = exports('JackpotWinPopup1998', (_dec = ccclass('jackpotWinPopup1998'), _dec(_class = /*#__PURE__*/function (_GfCuSceneJackpotWin) {
        _inheritsLoose(JackpotWinPopup1998, _GfCuSceneJackpotWin);

        function JackpotWinPopup1998() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GfCuSceneJackpotWin.call.apply(_GfCuSceneJackpotWin, [this].concat(args)) || this;
          _this._isSkip = false;
          return _this;
        }

        var _proto = JackpotWinPopup1998.prototype;

        _proto.start = function start() {
          var _this2 = this;

          this.txtCoin.string = "0";
          this.winFrame.active = false;
          this.animNode.scale = v3(0, 0, 0);
          this._isSkip = false;
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.STOP_ALL_AUDIO);
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.DRAGON_BIG_WIN);
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_EFFECT_JACKPOT_COIN);
          this.particleCoin.active = true;
          stopAllActions(this.particleCoin);
          this.particleCoin.getComponent(gf3DParticle).startAnimation();
          this.winFrame.active = true;
          this.winFrame.scale.set(1, 0.2);
          tween(this.winFrame).to(0.1, {
            scale: v3(1, 0.75, 1)
          }).start();
          tween(this.animNode).to(0.25, {
            scale: v3(0.75, 0.75, 0.75)
          }).start();
          this.scheduleOnce(function () {
            _this2.blackLayer.getComponent(Button).interactable = true;
          }, 0.65);

          this._tweenCoin();
        };

        _proto._tweenCoin = function _tweenCoin() {
          var _this3 = this;

          var superValue = this.winValue * 0.75;
          var megaValue = this.winValue * 0.5;
          this.tweenCoin = tween(this).to(this._duration / 3, null, {
            onUpdate: function onUpdate(target, ratio) {
              _this3.coinValue = ratio * megaValue;
            },
            easing: "sineInOut"
          }).to(this._duration / 3, null, {
            onUpdate: function onUpdate(target, ratio) {
              _this3.coinValue = megaValue + ratio * _this3.winValue * 0.25;
            },
            easing: "sineInOut"
          }).to(this._duration / 3, null, {
            onUpdate: function onUpdate(target, ratio) {
              _this3.coinValue = superValue + ratio * _this3.winValue * 0.25;
            },
            easing: "sineInOut"
          }).call(function () {
            _this3._isSkip = true;
          });
          this.tweenCoin.start();
        };

        _proto.quickShow = function quickShow() {
          var _this4 = this;

          if (this.coinValue === this.winValue) {
            this.blackLayer.getComponent(Button).interactable = false;
            this.hide();
            return;
          }

          if (!this._isSkip) {
            this._isSkip = true;
            this.tweenCoin.stop();
            stopAllActions(this);
            this.tweenCoin = tween(this).to(1, null, {
              onUpdate: function onUpdate(target, ratio) {
                _this4.coinValue = _this4.coinValue + (_this4.winValue - _this4.coinValue) * ratio;
              }
            }).delay(1).call(function () {}).start();
          }
        };

        return JackpotWinPopup1998;
      }(GfCuSceneJackpotWin)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LayerTouchListener.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Prefab, BoxCollider2D, Intersection2D, instantiate, sp, v3, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Prefab = module.Prefab;
      BoxCollider2D = module.BoxCollider2D;
      Intersection2D = module.Intersection2D;
      instantiate = module.instantiate;
      sp = module.sp;
      v3 = module.v3;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "b4a67rVjIxNR7JXnZmuMJXt", "LayerTouchListener", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var LayerTouchListener = exports('LayerTouchListener', (_dec = ccclass('LayerTouchListener'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Prefab), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(LayerTouchListener, _Component);

        function LayerTouchListener() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "fishHolder", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listGun", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "effectSkillSelecteds", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "prefabLockTaget", _descriptor4, _assertThisInitialized(_this));

          _this._currentGun = null;
          _this._currentGunIndex = 1;
          _this._isLockMummy = false;
          _this._currentTargetlock = null;
          _this._gunSkillState = {
            0: 0,
            1: 0,
            2: 0
          };
          return _this;
        }

        var _proto = LayerTouchListener.prototype;

        _proto.onLoad = function onLoad() {
          this.node.on(Node.EventType.TOUCH_START, this._onTouchStart, this);
          this.node.on("CHANGE_PLAYER", this.selectedGunShoot, this);
          this.node.on("STOP_LOCK_FISH", this.stopLockFish, this);
          this._currentGun = this.listGun[this._currentGunIndex];
          this._isLockMummy = false;
        };

        _proto.start = function start() {
          this._currentGunIndex = 1;
          this.resetSkillState();
        };

        _proto._onTouchStart = function _onTouchStart(e) {
          if (isNaN(this._currentGunIndex)) return;
          if (this._currentGun.active == false) return;
          var pos = e.getUILocation();

          if (this._isLockMummy) {
            this.getFishByTouchPoint(pos);
          } else {
            this._currentGun.emit("FIRE", pos);
          }
        };

        _proto.selectedGunShoot = function selectedGunShoot(index) {
          if (index < 0) return;
          this._currentGunIndex = index;
          this._currentGun = this.listGun[this._currentGunIndex];
          this.updateSkillStateByGunIndex();
        };

        _proto.setNormalFire = function setNormalFire(event, index) {
          this.showEffectSkillSelected(index);
          this.stopAutoFire();
          this.stopLockFish();
        };

        _proto.setAutoFire = function setAutoFire(event, index) {
          this.showEffectSkillSelected(index);

          this._currentGun.emit("AUTO_FIRE", true);

          this.stopLockFish();
        };

        _proto.setLockFish = function setLockFish(e, index) {
          this.showEffectSkillSelected(index);
          this.stopAutoFire();
          this._isLockMummy = true;
        };

        _proto.stopAutoFire = function stopAutoFire() {
          this._currentGun.emit("AUTO_FIRE", false);
        };

        _proto.stopLockFish = function stopLockFish() {
          this._isLockMummy = false;

          this._currentGun.emit("LOCK_FISH", false);
        };

        _proto.getLishMummy = function getLishMummy() {
          var fishHolder = this.fishHolder;
          return fishHolder.children;
        };

        _proto.getFishByTouchPoint = function getFishByTouchPoint(pos) {
          var listFish = this.getLishMummy();
          if (!listFish || listFish.length <= 0) return;

          for (var i = 0; i < listFish.length; ++i) {
            var fish = listFish[i];
            var boxcollider = fish.getComponent(BoxCollider2D);

            if (boxcollider && boxcollider.worldPoints && Intersection2D.pointInPolygon(pos, boxcollider.worldPoints)) {
              var fishKind = fish["fishKind"];

              this._currentGun.emit("LOCK_FISH", true, fish, fishKind);

              return;
            }
          }
        };

        _proto.showLockTarget = function showLockTarget() {
          var obLockTarget = instantiate(this.prefabLockTaget);
          var animLockTarget = obLockTarget.getComponent(sp.Skeleton);
          animLockTarget.node.active = true;
          animLockTarget.node.parent = this._currentTargetlock;
          animLockTarget.node.setPosition(v3(0, 0, 0));
          animLockTarget.setAnimation(0, "appear", false);
          animLockTarget.addAnimation(0, "loop", true);
        };

        _proto.resetEffectSkillSelected = function resetEffectSkillSelected() {
          this.effectSkillSelecteds.forEach(function (effect) {
            effect.active = false;
          });
        };

        _proto.updateSkillStateByGunIndex = function updateSkillStateByGunIndex() {
          var currentSkillState = this._gunSkillState[this._currentGunIndex];
          this.showEffectSkillSelected(currentSkillState);
        };

        _proto.showEffectSkillSelected = function showEffectSkillSelected(indexSkill) {
          this.resetEffectSkillSelected();
          this.effectSkillSelecteds[indexSkill].active = true;
          this._gunSkillState[this._currentGunIndex] = indexSkill;
        };

        _proto.resetSkillState = function resetSkillState() {
          this._gunSkillState[0] = 0;
          this._gunSkillState[1] = 0;
          this._gunSkillState[2] = 0;
        };

        return LayerTouchListener;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "fishHolder", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "listGun", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "effectSkillSelecteds", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "prefabLockTaget", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LayoutNodeInstance.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "e17d55QpGxCiprWgGmQLSDT", "LayoutNodeInstance", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var LayoutNodeInstance = exports('LayoutNodeInstance', (_dec = ccclass('LayoutNodeInstance'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(LayoutNodeInstance, _Component);

        function LayoutNodeInstance() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = LayoutNodeInstance.prototype;

        _proto.onLoad = function onLoad() {
          // console.log("LayoutNodeInstance onLoad");
          if (LayoutNodeInstance.onLoadCallback != null) {
            LayoutNodeInstance.onLoadCallback(this.node);
          }
        };

        return LayoutNodeInstance;
      }(Component), _class2.onLoadCallback = null, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LetterSpacing.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, warn, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      warn = module.warn;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "06158ZI+yBOppfcR+STxzzA", "LetterSpacing", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var LetterSpacing = exports('LetterSpacing', (_dec = ccclass('LetterSpacing'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(LetterSpacing, _Component);

        function LetterSpacing() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "spacingX", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = LetterSpacing.prototype;

        _proto.start = function start() {
          var label = this.node.getComponent(Label);

          if (label) {
            label.spacingX = this.spacingX;
          } else {
            warn("do not have label to custom letter spacing");
          }
        };

        return LetterSpacing;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "spacingX", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LineDrawingPayline.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts', './EventNames.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, CCInteger, SpriteFrame, Node, Sprite, UITransform, Vec3, GameObject, EventNames;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCInteger = module.CCInteger;
      SpriteFrame = module.SpriteFrame;
      Node = module.Node;
      Sprite = module.Sprite;
      UITransform = module.UITransform;
      Vec3 = module.Vec3;
    }, function (module) {
      GameObject = module.GameObject;
    }, function (module) {
      EventNames = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13;

      cclegacy._RF.push({}, "b674cnIVC5PV46YsnZusgU6", "LineDrawingPayline", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var LineDrawingPayline = exports('LineDrawingPayline', (_dec = ccclass('LineDrawingPayline'), _dec2 = property({
        type: CCInteger
      }), _dec3 = property({
        type: CCInteger
      }), _dec4 = property({
        type: SpriteFrame
      }), _dec5 = property({
        type: Node
      }), _dec6 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(LineDrawingPayline, _GameObject);

        function LineDrawingPayline() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "totalRow", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "totalCol", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "linePrefabName", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "dotPrefabName", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lineSprites", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lineHolder", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "dotHolder", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "leftOffset", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "rightOffset", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "heightOffset", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "heightOffsetAllLines", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "horizontalLineHeight", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "isFreeMode", _descriptor13, _assertThisInitialized(_this));

          _this.cachedLine = [];
          _this.cachedFirstLine = [];
          _this.cachedLastLine = [];
          _this.cachedDotLine = [];
          _this.poolFactory = null;
          _this._usingObj = [];
          _this._startXPos = 0;
          _this._startYPos = 0;
          return _this;
        }

        var _proto = LineDrawingPayline.prototype;

        _proto.onEnable = function onEnable() {
          if (this.eventManager) {
            this.eventManager.on(EventNames.DRAWING_LINE_CLEAR, this.clear, this);
            this.eventManager.on(EventNames.DRAWING_LINE_ADD, this.addLine, this);
            this.eventManager.on(EventNames.DRAWING_LINE_ADD_FIRST, this.addFirstLine, this);
            this.eventManager.on(EventNames.DRAWING_LINE_ADD_LAST, this.addLastLine, this);
            this.eventManager.on(EventNames.DRAWING_LINE_ADD_DOT, this.addDotToLine, this);
          }

          if (!this.poolFactory) {
            this.poolFactory = this.mainDirector.poolFactory;
          }

          var tableFormat = this.isFreeMode ? this.config.FREE_TABLE_FORMAT : this.config.NORMAL_TABLE_FORMAT;
          this._startXPos = -(tableFormat.length / 2) * this.config.SYMBOL_WIDTH;
          this._startYPos = -(tableFormat[0] / 2) * this.config.SYMBOL_HEIGHT;
        };

        _proto.onDisable = function onDisable() {
          if (this.eventManager) {
            this.eventManager.off(EventNames.DRAWING_LINE_CLEAR, this.clear, this);
            this.eventManager.off(EventNames.DRAWING_LINE_ADD, this.addLine, this);
            this.eventManager.off(EventNames.DRAWING_LINE_ADD_FIRST, this.addFirstLine, this);
            this.eventManager.off(EventNames.DRAWING_LINE_ADD_LAST, this.addLastLine, this);
            this.eventManager.off(EventNames.DRAWING_LINE_ADD_DOT, this.addDotToLine, this);
          }
        };

        _proto.addLine = function addLine(type, col, row) {
          if (!this.cachedLine[col]) {
            this.cachedLine[col] = [];
          }

          if (!this.cachedLine[col][row]) {
            this.cachedLine[col][row] = [];
          } else if (this.cachedLine[col][row][type]) {
            return;
          }

          this.cachedLine[col][row][type] = true;
          var line = null;

          if (this.poolFactory) {
            line = this.poolFactory.getObject(this.linePrefabName);
            line.active = true;
          }

          line.parent = this.lineHolder;

          this._usingObj.push(line);

          var posX = this._startXPos + this.config.SYMBOL_WIDTH / 2 + col * this.config.SYMBOL_WIDTH;
          var posY = this._startYPos + this.config.SYMBOL_HEIGHT / 2 + (this.totalRow - 1 - row) * this.config.SYMBOL_HEIGHT;
          posY -= this.heightOffsetAllLines;
          var spriteComp = line.getComponent(Sprite);

          if (!spriteComp) {
            spriteComp = line.addComponent(Sprite);
          }

          var lineTransform = line.getComponent(UITransform);

          if (!lineTransform) {
            lineTransform = line.addComponent(UITransform);
          } // line.setPosition(position);


          if (type == 0) {
            spriteComp.spriteFrame = this.lineSprites[0];
            lineTransform.width = this.config.SYMBOL_WIDTH;
            lineTransform.height = this.horizontalLineHeight;
            lineTransform.anchorX = 0;
            lineTransform.anchorY = 0.5;
            line.scale = new Vec3(1, 1, 1);
            line.setPosition(posX, posY, 1);
          } else if (type == 1 || type == 2) {
            // 1: cheo len 1 o
            // 2: cheo xuong 1 o 
            spriteComp.spriteFrame = this.lineSprites[1];
            lineTransform.width = this.config.SYMBOL_WIDTH;
            lineTransform.height = this.config.SYMBOL_HEIGHT + 10;
            lineTransform.anchorX = 0;
            lineTransform.anchorY = 0;
            line.scale = new Vec3(1, type == 1 ? 1 : -1, 1);
            var deltaHeight = type == 1 ? this.heightOffset : -this.heightOffset;
            line.setPosition(posX, posY - deltaHeight, 1);
          } else if (type == 3 || type == 4) {
            // 3: cheo len 2 o
            // 4: cheo xuong 2 o
            spriteComp.spriteFrame = this.lineSprites[2];
            lineTransform.width = this.config.SYMBOL_WIDTH;
            lineTransform.height = this.config.SYMBOL_HEIGHT * 2 + 10;
            lineTransform.anchorX = 0;
            lineTransform.anchorY = 0;
            line.scale = new Vec3(1, type == 3 ? 1 : -1, 1);

            var _deltaHeight = type == 3 ? this.heightOffset : -this.heightOffset;

            line.setPosition(posX, posY - _deltaHeight, 1);
          }

          this.addDotToLine(col, row);
        };

        _proto.addFirstLine = function addFirstLine(row) {
          if (this.cachedFirstLine[row]) return;
          this.cachedFirstLine[row] = true;
          var line;

          if (this.poolFactory) {
            line = this.poolFactory.getObject(this.linePrefabName);
            line.active = true;
          }

          line.parent = this.lineHolder;

          this._usingObj.push(line);

          var posX = row == 1 ? this.config.SYMBOL_WIDTH / 2 : -this.leftOffset;
          posX += this._startXPos;
          var posY = this._startYPos + this.config.SYMBOL_HEIGHT / 2 + this.config.SYMBOL_HEIGHT;
          posY -= this.heightOffsetAllLines;
          var spriteComp = line.getComponent(Sprite);

          if (!spriteComp) {
            spriteComp = line.addComponent(Sprite);
          }

          var lineTransform = line.getComponent(UITransform);

          if (!lineTransform) {
            lineTransform = line.addComponent(UITransform);
          }

          if (row == 1) {
            spriteComp.spriteFrame = this.lineSprites[0];
            lineTransform.width = this.config.SYMBOL_WIDTH / 2 + this.leftOffset;
            lineTransform.height = this.horizontalLineHeight;
            lineTransform.anchorX = 0;
            lineTransform.anchorY = 0.5;
            line.scale = new Vec3(-1, 1, 1);
            line.setPosition(posX, posY, 1);
          } else if (row == 0 || row == 2) {
            spriteComp.spriteFrame = this.lineSprites[3];
            lineTransform.width = this.config.SYMBOL_WIDTH / 2 + this.leftOffset;
            lineTransform.height = this.config.SYMBOL_HEIGHT + 10;
            lineTransform.anchorX = 0;
            lineTransform.anchorY = 0;
            line.scale = new Vec3(1, row == 0 ? 1 : -1, 1);
            var deltaHeight = row == 0 ? this.heightOffset : -this.heightOffset;
            line.setPosition(posX, posY - deltaHeight, 1);
          }
        };

        _proto.addLastLine = function addLastLine(row) {
          if (this.cachedLastLine[row]) return;
          this.cachedLastLine[row] = true;
          var line;

          if (this.poolFactory) {
            line = this.poolFactory.getObject(this.linePrefabName);
            line.active = true;
          }

          line.parent = this.lineHolder;

          this._usingObj.push(line);

          var posX = this._startXPos + (row == 1 ? this.config.SYMBOL_WIDTH / 2 : this.config.SYMBOL_WIDTH + this.rightOffset) + (this.totalCol - 1) * this.config.SYMBOL_WIDTH;
          var posY = this._startYPos + this.config.SYMBOL_HEIGHT / 2 + this.config.SYMBOL_HEIGHT;
          posY -= this.heightOffsetAllLines;
          var spriteComp = line.getComponent(Sprite);

          if (!spriteComp) {
            spriteComp = line.addComponent(Sprite);
          }

          var lineTransform = line.getComponent(UITransform);

          if (!lineTransform) {
            lineTransform = line.addComponent(UITransform);
          }

          if (row == 1) {
            spriteComp.spriteFrame = this.lineSprites[0];
            lineTransform.width = this.config.SYMBOL_WIDTH / 2 + this.rightOffset;
            lineTransform.height = this.horizontalLineHeight;
            lineTransform.anchorX = 0;
            lineTransform.anchorY = 0.5;
            line.scale = new Vec3(1, 1, 1);
            line.setPosition(posX, posY, 1);
          } else if (row == 0 || row == 2) {
            spriteComp.spriteFrame = this.lineSprites[3];
            lineTransform.width = this.config.SYMBOL_WIDTH / 2 + this.rightOffset;
            lineTransform.height = this.config.SYMBOL_HEIGHT + 10;
            lineTransform.anchorX = 0;
            lineTransform.anchorY = 0;
            line.scale = new Vec3(-1, row == 0 ? 1 : -1, 1);
            var deltaHeight = row == 0 ? this.heightOffset : -this.heightOffset;
            line.setPosition(posX, posY - deltaHeight, 1);
          }

          this.addDotToLine(4, row);
        };

        _proto.addDotToLine = function addDotToLine(col, row) {
          if (!this.cachedDotLine[col]) {
            this.cachedDotLine[col] = [];
          }

          if (!this.cachedDotLine[col][row]) {
            this.cachedDotLine[col][row] = [];
          }

          if (this.cachedDotLine[col][row] == true) return;
          this.cachedDotLine[col][row] = true;
          var dotObj;

          if (this.poolFactory) {
            dotObj = this.poolFactory.getObject(this.dotPrefabName);
            dotObj.active = true;
          }

          var posX = this._startXPos + this.config.SYMBOL_WIDTH / 2 + col * this.config.SYMBOL_WIDTH;
          var posY = this._startYPos + this.config.SYMBOL_HEIGHT / 2 + (this.totalRow - 1 - row) * this.config.SYMBOL_HEIGHT;
          posY -= this.heightOffsetAllLines;
          dotObj.parent = this.dotHolder;
          dotObj.setPosition(posX, posY);

          this._usingObj.push(dotObj);
        };

        _proto.clear = function clear() {
          for (var i = 0; i < this._usingObj.length; i++) {
            var removeObj = this._usingObj[i];

            if (removeObj) {
              this.poolFactory.removeObject(removeObj);
            }
          }

          this._usingObj = [];
          this.cachedLine = [];
          this.cachedFirstLine = [];
          this.cachedLastLine = [];
          this.cachedDotLine = [];
        };

        return LineDrawingPayline;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "totalRow", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 3;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "totalCol", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 5;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "linePrefabName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "dotPrefabName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "lineSprites", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "lineHolder", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "dotHolder", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "leftOffset", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 30;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "rightOffset", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 30;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "heightOffset", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "heightOffsetAllLines", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "horizontalLineHeight", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 10;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "isFreeMode", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/loadConfigAsync.ts", ['cc', './appConfig.ts', './appConfig-debug.ts', './XOCypher.ts', './serviceRest.ts'], function (exports) {
  'use strict';

  var cclegacy, sys, urlConstant, urlConstant$1, xorCipher, apiObject;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      sys = module.sys;
    }, function (module) {
      urlConstant = module.urlConstant;
    }, function (module) {
      urlConstant$1 = module.urlConstant;
    }, function (module) {
      xorCipher = module.default;
    }, function (module) {
      apiObject = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "65982XRfqlJUrHV60UubZQG", "loadConfigAsync", undefined);

      var lodash = _;

      var LoadConfigAsync = /*#__PURE__*/function () {
        function LoadConfigAsync() {
          var _this = this;

          this.dataUpdate = void 0;
          this.dataUpdateProd = void 0;

          this.setUpSentry = function () {
            var _this$dataUpdate = _this.dataUpdate,
                IS_PRODUCTION = _this$dataUpdate.IS_PRODUCTION,
                IS_SHOW_STATS = _this$dataUpdate.IS_SHOW_STATS;

            if (typeof Sentry !== 'undefined') {
              if (IS_PRODUCTION) {
                Sentry.init({
                  dsn: 'https://32ab507534bc4befbd5e1b20e223c93d@sentry.io/1780011'
                });
              } else {
                Sentry.init({
                  dsn: 'https://b034a1c4d32e42af90071e62d2bf3290@sentry.io/2655786'
                });
              }
            }
          };

          this.dataUpdate = lodash.cloneDeep(urlConstant);
          var isDebugMode = sys.isBrowser && window.location.hostname === 'localhost';

          if (this.dataUpdate.REMOTE_CONFIG_URL_FULL && !sys.isBrowser && !isDebugMode) {
            setTimeout(function () {
              apiObject.get({
                apiUrl: _this.dataUpdate.REMOTE_CONFIG_URL_FULL,
                url: '',
                callback: _this.handleDataSuccess.bind(_this),
                callbackErr: _this.handleDataError.bind(_this)
              });
            }, 100);
          } else if (this.dataUpdate.REMOTE_CONFIG_URL_FULL && sys.isBrowser) {
            setTimeout(function () {
              apiObject.getRawDataWeb({
                fullURL: _this.dataUpdate.REMOTE_CONFIG_URL_FULL,
                callback: _this.handleDataSuccess.bind(_this),
                callbackErr: _this.handleDataError.bind(_this)
              });
            }, 100);
          } else if (this.dataUpdate.REMOTE_CONFIG_URL && sys.isBrowser && !isDebugMode) {
            setTimeout(function () {
              var domainGame = typeof domainGlobal !== 'undefined' ? domainGlobal : window.location.origin;
              apiObject.get({
                apiUrl: domainGame + _this.dataUpdate.REMOTE_CONFIG_URL,
                params: {
                  t: new Date().getTime()
                },
                url: '',
                callback: _this.handleDataSuccess.bind(_this),
                callbackErr: _this.handleDataError.bind(_this)
              });
            }, 100);
          } else {
            if (sys.localStorage.getItem("enviroment") != null) {
              try {
                if (sys.localStorage.getItem("enviroment").indexOf("test") >= 0) {
                  // check appConfigDebug
                  if (urlConstant$1) {
                    this.dataUpdate = lodash.cloneDeep(urlConstant$1);
                    this.dataUpdate = this.decryptData(this.dataUpdate);
                  } else {
                    this.dataUpdate = lodash.cloneDeep(urlConstant);
                    this.dataUpdate = this.decryptData(this.dataUpdate);
                  }
                } else {
                  this.dataUpdate = lodash.cloneDeep(urlConstant);
                  this.dataUpdate = this.decryptData(this.dataUpdate);
                }
              } catch (e) {
                this.dataUpdate = lodash.cloneDeep(urlConstant);
                this.dataUpdate = this.decryptData(this.dataUpdate);
              }
            } else {
              this.dataUpdate = lodash.cloneDeep(urlConstant);
              this.dataUpdate = this.decryptData(this.dataUpdate);
            }

            this.dataUpdate.IS_FINISHED_REMOTE = true;
          }
        }

        var _proto = LoadConfigAsync.prototype;

        _proto.handleDataSuccess = function handleDataSuccess(data) {
          this.dataUpdate = lodash.cloneDeep(data);
          this.dataUpdate = this.decryptData(this.dataUpdate);
          this.dataUpdateProd = lodash.cloneDeep(this.dataUpdate);
          sys.localStorage.setItem('appConfigLocalStore', JSON.stringify(this.dataUpdateProd));
          this.dataUpdate.IS_FINISHED_REMOTE = true;
        };

        _proto.handleDataError = function handleDataError() {
          var appConfigLocal = sys.localStorage.getItem('appConfigLocalStore');

          if (appConfigLocal) {
            appConfigLocal = JSON.parse(appConfigLocal);
            this.dataUpdate = lodash.cloneDeep(appConfigLocal);
          } else {
            this.dataUpdate = lodash.cloneDeep(urlConstant);
          }

          this.dataUpdate = this.decryptData(this.dataUpdate);
          this.dataUpdateProd = lodash.cloneDeep(this.dataUpdate);
          this.dataUpdate.IS_FINISHED_REMOTE = true;
        };

        _proto.decryptData = function decryptData(data) {
          if (data.IS_DECODE) {
            Object.keys(data).forEach(function (key) {
              if (key === 'API_URL' || key === 'SOCKET_URL' || key.indexOf('IPMaster') > -1) {
                data[key] = xorCipher.decode('Không Biết Đặt Tên Gì', data[key]);
              }
            });
          }

          delete data.IS_DECODE;
          return data;
        };

        _proto.getConfig = function getConfig() {
          return this.dataUpdate;
        };

        _proto.replaceConfig = function replaceConfig(config) {
          var _this2 = this;

          Object.keys(config).forEach(function (it) {
            _this2.dataUpdate[it] = config[it];
          });
        };

        _proto.switchEnv = function switchEnv(isProd) {
          if (isProd) {
            if (this.dataUpdateProd) {
              this.dataUpdate = lodash.cloneDeep(this.dataUpdateProd);
            } else {
              this.dataUpdate = lodash.cloneDeep(urlConstant);
            }

            this.dataUpdate = this.decryptData(this.dataUpdate);
            this.dataUpdate.IS_FINISHED_REMOTE = true;
          } else {
            this.dataUpdate = lodash.cloneDeep(urlConstant$1);
            this.dataUpdate = this.decryptData(this.dataUpdate);
            this.dataUpdate.IS_FINISHED_REMOTE = true;
          }
        };

        return LoadConfigAsync;
      }();

      var loadConfigAsync = exports('default', new LoadConfigAsync());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LoadingScene1989.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfLoadingScene.ts', './Config1989.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, gfLoadingScene, Config1989;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfLoadingScene = module.gfLoadingScene;
    }, function (module) {
      Config1989 = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "51dabhgpXlDELuwrX0dORfY", "LoadingScene1989", undefined);

      var ccclass = _decorator.ccclass;
      var LoadingScene1989 = exports('LoadingScene1989', (_dec = ccclass('LoadingScene1989'), _dec(_class = /*#__PURE__*/function (_gfLoadingScene) {
        _inheritsLoose(LoadingScene1989, _gfLoadingScene);

        function LoadingScene1989() {
          return _gfLoadingScene.apply(this, arguments) || this;
        }

        var _proto = LoadingScene1989.prototype;

        _proto.initGameConfig = function initGameConfig() {
          if (!Config1989.instance) {
            new Config1989();
          }
        };

        return LoadingScene1989;
      }(gfLoadingScene)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LoadingScene1998.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfLoadingScene.ts', './Config1998.ts', './AssetBundle1998.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, gfLoadingScene, Config1998, AssetBundle1998;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfLoadingScene = module.gfLoadingScene;
    }, function (module) {
      Config1998 = module.default;
    }, function (module) {
      AssetBundle1998 = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "6be6eseWuFI/6BYeKJFk81V", "LoadingScene1998", undefined);

      var ccclass = _decorator.ccclass;
      var LoadingScene1998 = exports('LoadingScene1998', (_dec = ccclass('LoadingScene1998'), _dec(_class = /*#__PURE__*/function (_gfLoadingScene) {
        _inheritsLoose(LoadingScene1998, _gfLoadingScene);

        function LoadingScene1998() {
          return _gfLoadingScene.apply(this, arguments) || this;
        }

        var _proto = LoadingScene1998.prototype;

        _proto.initAssetBundle = function initAssetBundle() {
          if (!AssetBundle1998.instance) {
            new AssetBundle1998();
          }
        };

        _proto.initGameConfig = function initGameConfig() {
          if (!Config1998.instance) {
            new Config1998();
          }
        };

        return LoadingScene1998;
      }(gfLoadingScene)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LoadingScreen.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './loadConfigAsync.ts', './gameCommonUtils.ts', './utils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, ProgressBar, sys, assetManager, error, director, Prefab, instantiate, Component, loadConfigAsync, gameCommonUtils, registerLoadHowl, setOpacity, unregisterLoadHowl;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      ProgressBar = module.ProgressBar;
      sys = module.sys;
      assetManager = module.assetManager;
      error = module.error;
      director = module.director;
      Prefab = module.Prefab;
      instantiate = module.instantiate;
      Component = module.Component;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      gameCommonUtils = module.default;
    }, function (module) {
      registerLoadHowl = module.registerLoadHowl;
      setOpacity = module.setOpacity;
      unregisterLoadHowl = module.unregisterLoadHowl;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10;

      cclegacy._RF.push({}, "01f22w8LoVFq5YVtgEK6Ozg", "LoadingScreen", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var LoadingScreen = exports('LoadingScreen', (_dec = ccclass('LoadingScreen'), _dec2 = property({
        visible: function visible() {
          return this.loadByBundle;
        }
      }), _dec3 = property({
        visible: function visible() {
          return this.loadByBundle;
        }
      }), _dec4 = property({
        type: Node,
        visible: function visible() {
          return this.loadByBundle;
        }
      }), _dec5 = property({
        visible: function visible() {
          return !this.loadByBundle;
        }
      }), _dec6 = property({
        visible: function visible() {
          return !this.loadByBundle;
        }
      }), _dec7 = property({
        visible: function visible() {
          return !this.loadByBundle;
        }
      }), _dec8 = property(ProgressBar), _dec9 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(LoadingScreen, _Component);

        function LoadingScreen() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "loadByBundle", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bundlePath", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bundleMainScene", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "gameHolder", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sceneName", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sdSceneName", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sceneNameIframe", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sceneNameHistory", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "progressBar", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "homeBtn", _descriptor10, _assertThisInitialized(_this));

          _this.preloadGameScene = false;
          _this.preloadGamePrefab = false;
          _this.switchGameScene = false;
          _this.isBackToLobby = false;
          _this.gameBundle = null;
          _this.gameNode = null;
          _this._loadedPrefab = [];
          _this.usingLoadHowl = false;
          _this.totalPercent = 0;
          _this.eventId = null;
          _this.updatedScene = '';
          return _this;
        }

        var _proto = LoadingScreen.prototype;

        _proto.onLoad = function onLoad() {
          var _this2 = this;

          if (this.sceneName === '') return;

          var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
              LOGIN_IFRAME = _loadConfigAsync$getC.LOGIN_IFRAME;

          this.updatedScene = this.sceneName;
          var loadHistory = false;

          if (sys.isBrowser) {
            var queryString = window.location.search;
            var urlParams = new URLSearchParams(queryString);
            var history = urlParams.get('history');

            if (this.sceneNameHistory && history == 'true') {
              this.updatedScene = this.sceneNameHistory;
              loadHistory = true;
            } else if (this.sceneNameIframe) {
              this.updatedScene = this.sceneNameIframe;
            }

            if (LOGIN_IFRAME && globalThis.Howler) {
              registerLoadHowl();
              this.usingLoadHowl = true;
            }
          }

          if (sys.isMobile && this.sdSceneName) {
            this.updatedScene = this.sdSceneName;
          }

          if (this.homeBtn) {
            this.homeBtn.active = false;

            if (!LOGIN_IFRAME) {
              this.scheduleOnce(function () {
                _this2.homeBtn.active = true;

                _this2.homeBtn.off('click');

                _this2.homeBtn.on('click', function () {
                  if (_this2.isBackToLobby) return; //TODO: implement KtekEventHandler
                  // let eventHandler = this.node.getComponent("KtekEventHandler");
                  // if( eventHandler ){
                  //     eventHandler.getInstance().sendToUs("clear_cache", {
                  //         scene: sceneName
                  //     });
                  // }

                  gameCommonUtils.handleCloseGameIframe();
                  _this2.isBackToLobby = true;
                });
              }, 10);
            }
          }

          this.node.active = true;
          setOpacity(this.node, 255);

          if (this.loadByBundle && !loadHistory) {
            this.gameBundle = assetManager.getBundle(this.bundlePath);

            if (!this.gameBundle) {
              assetManager.loadBundle(this.bundlePath, function (err, bundle) {
                if (err) {
                  error("Error while loading bundle with path: BundleLobby");
                } else {
                  _this2.gameBundle = bundle;
                  _this2.preloadGamePrefab = true;

                  _this2.loadGamePrefab(bundle, _this2.bundleMainScene, _this2.eventId);
                }
              });
            } else {
              this.preloadGamePrefab = true;
              this.loadGamePrefab(this.gameBundle, this.bundleMainScene, this.eventId);
            }
          } else {
            this.preloadGameScene = true;
            director.preloadScene(this.updatedScene, function (completedCount, totalCount) {
              if (totalCount > 0) {
                _this2.totalPercent = completedCount / totalCount;
              }
            }, function (error, scene) {
              if (error) {
                gameCommonUtils.handleFlowOutGame();
              }
            });
          }
        };

        _proto.setProgressFull = function setProgressFull() {
          this.progressBar.progress = 1;
        };

        _proto.update = function update(dt) {
          if (this.preloadGameScene) {
            var percent = (this.totalPercent - this.progressBar.progress) / 20;

            if (percent > 0) {
              this.progressBar.progress += percent;
            }

            if (this.progressBar.progress > 0.99 && !this.switchGameScene) {
              this.switchGameScene = true;
              director.loadScene(this.updatedScene);
            }
          } else if (this.preloadGamePrefab) {
            var _percent = (this.totalPercent - this.progressBar.progress) / 20;

            if (_percent > 0) {
              this.progressBar.progress += _percent;
            }

            if (this.progressBar.progress > 0.99 && this.gameNode && !this.switchGameScene) {
              this.switchGameScene = true;
              this.loadGameNode();
            }
          }
        };

        _proto.loadGamePrefab = function loadGamePrefab(bundle, mainPrefabName, eventId) {
          var _this3 = this;

          if (eventId === void 0) {
            eventId = '';
          }

          this.eventId = eventId;
          bundle.loadDir('', Prefab, function (finish, total, item) {
            _this3.totalPercent = finish / total;
          }, function (error, assets) {
            if (error) {
              gameCommonUtils.handleFlowOutGame();
              return;
            }

            var mainPrefab = null;
            assets.forEach(function (prefab) {
              prefab.addRef();

              if (prefab.data.name == mainPrefabName) {
                mainPrefab = prefab;
              }
            });
            _this3._loadedPrefab = assets;

            if (mainPrefab) {
              _this3.gameNode = instantiate(mainPrefab);
            }
          });
        };

        _proto.loadGameNode = function loadGameNode() {
          if (this.gameNode && this.gameHolder) {
            var _director = this.gameNode.getComponent('Director');

            if (_director && _director.setEventId) _director.setEventId(this.eventId);
            this.gameNode.parent = this.gameHolder;
            if (this.homeBtn) this.homeBtn.active = false;
            this.node.active = false;
            this.unscheduleAllCallbacks();
          }
        };

        _proto.setEventId = function setEventId(id) {
          this.eventId = id;
        };

        _proto.onDestroy = function onDestroy() {
          this.unscheduleAllCallbacks();

          if (this.usingLoadHowl) {
            unregisterLoadHowl();
          }

          if (this.loadByBundle && this.gameBundle) {
            this._loadedPrefab.forEach(function (prefab) {
              prefab.decRef(true);
            });

            this._loadedPrefab = null;
            assetManager.removeBundle(this.gameBundle);

            if (sys.isNative) {
              sys.garbageCollect();
            }
          }
        };

        return LoadingScreen;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "loadByBundle", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "bundlePath", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "bundleMainScene", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "gameHolder", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "sceneName", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "sdSceneName", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "sceneNameIframe", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "sceneNameHistory", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "progressBar", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "homeBtn", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LoadingTransition.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Component, setOpacity, fadeOut;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      setOpacity = module.setOpacity;
      fadeOut = module.fadeOut;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "30c42daOrdI/r+S+9oq4Q0Q", "LoadingTransition", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var LoadingTransition = exports('LoadingTransition', (_dec = ccclass('LoadingTransition'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(LoadingTransition, _Component);

        function LoadingTransition() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "delayTime", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "fadeTime", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = LoadingTransition.prototype;

        _proto.start = function start() {
          var _this2 = this;

          this.node.active = true;
          setOpacity(this.node, 255);
          this.scheduleOnce(function () {
            fadeOut(_this2.node, _this2.fadeTime, {
              onComplete: function onComplete() {
                _this2.node.active = false;
                _this2.node['tweenFade'] = null;
              }
            });
          }, this.delayTime);
        };

        _proto.onDisable = function onDisable() {
          this.unscheduleAllCallbacks();

          if (this.node['tweenFade']) {
            this.node['tweenFade'].stop();
            this.node['tweenFade'] = null;
          }
        };

        return LoadingTransition;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "delayTime", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "fadeTime", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LobbyDev.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './loadConfigAsync.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, Node, _decorator, director, Component, loadConfigAsync;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      _decorator = module._decorator;
      director = module.director;
      Component = module.Component;
    }, function (module) {
      loadConfigAsync = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "82220qRjXFBT5RKRiUWVVoZ", "LobbyDev", undefined);

      var _cc$_decorator = _decorator,
          ccclass = _cc$_decorator.ccclass,
          property = _cc$_decorator.property;
      var LobbyDev = exports('LobbyDev', (_dec = ccclass('LobbyDev'), _dec2 = property({
        displayName: "List Game",
        type: Node
      }), _dec3 = property({
        displayName: "Login",
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_cc$Component) {
        _inheritsLoose(LobbyDev, _cc$Component);

        function LobbyDev() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _cc$Component.call.apply(_cc$Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "listGame", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnLogin", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = LobbyDev.prototype;

        _proto.onLoad = function onLoad() {
          this._bindEvents();
        };

        _proto.start = function start() {// [3]
        } // update (deltaTime: number) {
        //     // [4]
        // }
        ;

        _proto._bindEvents = function _bindEvents() {
          var arrView = this.listGame.children;
          var length = arrView.length;

          var _loop = function _loop(i) {
            var view = arrView[i];
            view.off("click");
            view.on("click", function (event) {
              var sceneName = view.name;
              director.loadScene(sceneName);
            });
          };

          for (var i = 0; i < length; i++) {
            _loop(i);
          }

          if (this.btnLogin) {
            this.btnLogin.off('click');
            this.btnLogin.on('click', function () {
              var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
                  LOGIN_SCENE_NAME = _loadConfigAsync$getC.LOGIN_SCENE_NAME;

              if (LOGIN_SCENE_NAME) {
                director.loadScene(LOGIN_SCENE_NAME);
              }
            });
          }
        };

        return LobbyDev;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "listGame", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btnLogin", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LobbyJackpot.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './CustomType.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, warn, Label, Component, tweenMoney, JackpotObject;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      warn = module.warn;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      tweenMoney = module.tweenMoney;
    }, function (module) {
      JackpotObject = module.JackpotObject;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "07bdaKv5lhPFY5MgFeH7S9/", "LobbyJackpot", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var LobbyJackpot = exports('LobbyJackpot', (_dec = ccclass('LobbyJackpot'), _dec2 = property({
        type: JackpotObject
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(LobbyJackpot, _Component);

        function LobbyJackpot() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "listJackpots", _descriptor, _assertThisInitialized(_this));

          _this.jackpots = {};
          _this.isInit = false;
          _this.jackpotData = {};
          return _this;
        }

        var _proto = LobbyJackpot.prototype;

        _proto.onLoad = function onLoad() {
          this.node.on("UPDATE_JACKPOT", this.jackpotUpdate, this);
        };

        _proto.jackpotUpdate = function jackpotUpdate(data) {
          Object.assign(this.jackpotData, data);
          this.renderJackpot(3);
        };

        _proto.updateValueJP = function updateValueJP(jpType, jpValue) {
          if (this.jackpots[jpType]) {
            var jpObject = this.jackpots[jpType];
            this.renderJP({
              node: jpObject.jpNode,
              value: jpValue,
              time: 0.3
            });
          } else {
            warn("do not have jackpot", jpType);
          }
        };

        _proto.initData = function initData() {
          var _this2 = this;

          if (!this.isInit) {
            this.listJackpots.forEach(function (jpObj) {
              _this2.jackpots[jpObj.jpType] = jpObj;
            });
            this.isInit = true;
          }
        };

        _proto.renderJackpot = function renderJackpot(time) {
          var _this3 = this;

          if (time === void 0) {
            time = 3;
          }

          this.listJackpots.forEach(function (jpObj) {
            var value = parseInt(_this3.jackpotData[jpObj.jpType]);

            _this3.renderJP({
              node: jpObj.jpNode,
              value: value,
              time: time
            });
          });
        };

        _proto.renderJP = function renderJP(_ref) {
          var node = _ref.node,
              value = _ref.value,
              _ref$time = _ref.time,
              time = _ref$time === void 0 ? 3 : _ref$time;

          if (value == null) {
            node.active = false;
            return;
          }

          if (node) {
            var label = node.getComponent(Label);

            if (label && value) {
              tweenMoney(label, time, value);
            }
          }
        };

        return LobbyJackpot;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "listJackpots", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LobbyLayer1989.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfLobbyLayer.ts', './gfUtilities.ts', './EventsCode1989.ts', './gfEventEmitter.ts', './gfNetworkParser.ts', './gfDataStore.ts', './gfBaseConfig.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, sp, UIOpacity, Vec3, tween, v3, log, warn, gfLobbyLayer, registerEvent, EventsCode1989, gfEventEmitter, gfNetworkParser, gfDataStore, gfBaseConfig;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      sp = module.sp;
      UIOpacity = module.UIOpacity;
      Vec3 = module.Vec3;
      tween = module.tween;
      v3 = module.v3;
      log = module.log;
      warn = module.warn;
    }, function (module) {
      gfLobbyLayer = module.gfLobbyLayer;
    }, function (module) {
      registerEvent = module.registerEvent;
    }, function (module) {
      EventsCode1989 = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfNetworkParser = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "25c5dFIfyFH7JuEva3QBick", "LobbyLayer1989", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var LobbyLayer1989 = exports('LobbyLayer1989', (_dec = ccclass('LobbyLayer1989'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(sp.Skeleton), _dec(_class = (_class2 = /*#__PURE__*/function (_gfLobbyLayer) {
        _inheritsLoose(LobbyLayer1989, _gfLobbyLayer);

        function LobbyLayer1989() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfLobbyLayer.call.apply(_gfLobbyLayer, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "overlay", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeRoomNormal", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "roomNormal", _descriptor3, _assertThisInitialized(_this));

          _this.canShowWaiting = true;
          return _this;
        }

        var _proto = LobbyLayer1989.prototype;

        _proto.onLoad = function onLoad() {
          _gfLobbyLayer.prototype.onLoad.call(this);

          this.overlay.active = false;
          this.overlay.getComponent(UIOpacity).opacity = 0;
          registerEvent(EventsCode1989.LOBBY_LAYER.PLAY_TRANSITION_GATE, this.playTransitionRoomNormal, this);
          this.canShowWaiting = true;
        };

        _proto.playTransitionRoomNormal = function playTransitionRoomNormal(callback) {
          var _this2 = this;

          var ratioScale = 70;
          var posZoomNode = new Vec3(-this.nodeRoomNormal.position.x * ratioScale, 30 * ratioScale, 0);
          this.overlay.active = true;
          this.roomNormal.setAnimation(0, "open_door", false);
          gfEventEmitter.instance.emit(EventsCode1989.COMMON.HIDE_WAITING);
          tween(this.node).delay(1.5).parallel(tween().to(2, {
            position: posZoomNode,
            scale: v3(ratioScale, ratioScale, 1)
          }, {
            easing: "quintIn"
          }), tween().call(function () {
            tween(_this2.overlay.getComponent(UIOpacity)).to(1.5, {
              opacity: 255
            }, {
              easing: "quintIn"
            }).start();
          })).call(function () {
            callback && callback();
            gfEventEmitter.instance.emit(EventsCode1989.COMMON.SHOW_WAITING);
          }).start();
        };

        _proto.onRoomNormalClick = function onRoomNormalClick() {
          log("::LobbyLayer:: onRoomNormalClick");
          if (!gfEventEmitter || !gfEventEmitter.instance) return;

          if (!gfNetworkParser.instance.isAvailable()) {
            warn('Network socket closed');
            return;
          }

          gfEventEmitter.instance.emit(EventsCode1989.SOUND.CLICK);
          this.showWaiting();
          gfDataStore.instance.setDataStore({
            currentRoom: gfBaseConfig.instance.RoomKind.Normal
          });
          gfEventEmitter.instance.emit(EventsCode1989.LOBBY_LAYER.LOBBY_GET_ROOM_INFO, gfBaseConfig.instance.RoomKind.Normal);
        };

        _proto.onRoomVipClick = function onRoomVipClick() {
          log("::LobbyLayer:: onRoomVipClick");
          if (!gfEventEmitter || !gfEventEmitter.instance) return;

          if (!gfNetworkParser.instance.isAvailable()) {
            warn('Network socket closed');
            return;
          } //     Emitter.instance.emit(EventCode.COMMON.SHOW_WAITING, true);


          gfDataStore.instance.setDataStore({
            currentRoom: gfBaseConfig.instance.RoomKind.VIP
          });
          gfEventEmitter.instance.emit(EventsCode1989.LOBBY_LAYER.LOBBY_GET_ROOM_INFO, gfBaseConfig.instance.RoomKind.VIP);
        };

        _proto.showWaiting = function showWaiting() {
          var _this3 = this;

          if (this.canShowWaiting) {
            this.canShowWaiting = false;
            gfEventEmitter.instance.emit(EventsCode1989.COMMON.SHOW_WAITING, true);
            this.scheduleOnce(function () {
              _this3.canShowWaiting = true;
            }, 0.3);
          }
        };

        return LobbyLayer1989;
      }(gfLobbyLayer), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "overlay", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "nodeRoomNormal", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "roomNormal", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LobbyLayer1998.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfLobbyLayer.ts', './gfDataStore.ts', './utils.ts', './gfUtilities.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, systemEvent, SystemEvent, KeyCode, gfLobbyLayer, gfDataStore, formatMoney, loadAvatarFacebook, formatUserName;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      systemEvent = module.systemEvent;
      SystemEvent = module.SystemEvent;
      KeyCode = module.KeyCode;
    }, function (module) {
      gfLobbyLayer = module.gfLobbyLayer;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      formatMoney = module.formatMoney;
      loadAvatarFacebook = module.loadAvatarFacebook;
    }, function (module) {
      formatUserName = module.formatUserName;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "0982dkOFPxGzYpEp2Jyt0wj", "LobbyLayer1998", undefined);

      var ccclass = _decorator.ccclass;
      var LobbyLayer1998 = exports('LobbyLayer1998', (_dec = ccclass('LobbyLayer1998'), _dec(_class = /*#__PURE__*/function (_gfLobbyLayer) {
        _inheritsLoose(LobbyLayer1998, _gfLobbyLayer);

        function LobbyLayer1998() {
          return _gfLobbyLayer.apply(this, arguments) || this;
        }

        var _proto = LobbyLayer1998.prototype;

        _proto.initEvents = function initEvents() {
          _gfLobbyLayer.prototype.initEvents.call(this);

          systemEvent.on(SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);
        };

        _proto.onKeyDown = function onKeyDown(event) {
          if (event.keyCode == KeyCode.BACKSPACE) {
            if (this.node && this.node.active === true) {
              this.onBtnBackClick();
            }
          }
        };

        _proto.onUpdateInfo = function onUpdateInfo() {
          var selfInfo = gfDataStore.instance.getSelfInfo();
          this.txtUserName.string = formatUserName(selfInfo.Username);
          this.txtWallet.string = formatMoney(selfInfo.Wallet);

          if (this.avatarAtlas && loadAvatarFacebook) {
            if (selfInfo.Avatar && selfInfo.Avatar.indexOf('Avatar') === 0) {
              selfInfo.Avatar = selfInfo.Avatar.replace('Avatar', '');
            }

            loadAvatarFacebook(this.avatarSprite, selfInfo.Avatar, this.avatarAtlas, 'avatar_', 2);
          }
        };

        return LobbyLayer1998;
      }(gfLobbyLayer)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LobbyMenu.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "52196V367xKG4EbuCYnH8OC", "LobbyMenu", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var LobbyMenu = exports('LobbyMenu', (_dec = ccclass('LobbyMenu'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(LobbyMenu, _Component);

        function LobbyMenu() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "gameNode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "eventNode", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = LobbyMenu.prototype;

        _proto.onGameClick = function onGameClick() {
          this.eventNode.active = false;
          this.gameNode.active = true;
        };

        _proto.onEventClick = function onEventClick() {
          this.eventNode.active = true;
          this.gameNode.active = false;
        };

        return LobbyMenu;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "gameNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "eventNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LobbyScene.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Prefab, Toggle, Button, NodePool, resources, JsonAsset, SpriteAtlas, instantiate, Label, director, game, assetManager, sys, setDisplayStats, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Prefab = module.Prefab;
      Toggle = module.Toggle;
      Button = module.Button;
      NodePool = module.NodePool;
      resources = module.resources;
      JsonAsset = module.JsonAsset;
      SpriteAtlas = module.SpriteAtlas;
      instantiate = module.instantiate;
      Label = module.Label;
      director = module.director;
      game = module.game;
      assetManager = module.assetManager;
      sys = module.sys;
      setDisplayStats = module.setDisplayStats;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "45d5dpkekdB2pRnLKF2Wj5o", "LobbyScene", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var LobbyScene = exports('LobbyScene', (_dec = ccclass('LobbyScene'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Prefab
      }), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: Toggle
      }), _dec6 = property({
        type: Button
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(LobbyScene, _Component);

        function LobbyScene() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "iconHolder", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "iconPrefab", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "gameSelection", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "toggleDebug", _descriptor4, _assertThisInitialized(_this));

          _this.iconPool = null;
          _this.projectConfig = null;
          _this.iconList = null;
          _this.multiSlotConfig = {};

          _initializerDefineProperty(_this, "buttonEvent", _descriptor5, _assertThisInitialized(_this));

          _this._loadBundleDone = void 0;
          _this._mapIconByGameId = {};
          return _this;
        }

        var _proto = LobbyScene.prototype;

        _proto.onLoad = function onLoad() {
          var _this2 = this;

          this.node.on('RQ_PLAY_GAME', this.requestPlayGame.bind(this));
          this.iconPool = new NodePool();
          var loadCount = 0;

          var _completeLoad = function _completeLoad() {
            loadCount++;

            if (loadCount >= 2) {
              _this2.loadProjects();
            }

            _this2.buttonEvent.interactable = true;
          };

          this.buttonEvent.interactable = false;
          resources.load("jsons/LobbyConfig", JsonAsset, function (err, json) {
            _this2.projectConfig = json;

            _this2.projectConfig.addRef();

            _completeLoad();
          });
          resources.load("sprites/iconLobby", SpriteAtlas, function (err, atlas) {
            _this2.iconList = atlas;

            _this2.iconList.addRef();

            _completeLoad();
          });
        };

        _proto.getIcon = function getIcon() {
          var icon = this.iconPool.get();

          if (!icon) {
            icon = instantiate(this.iconPrefab);
          }

          return icon;
        };

        _proto.getIconSpriteFrame = function getIconSpriteFrame(id) {
          if (this.iconList) {
            return this.iconList.getSpriteFrame(id);
          }

          return null;
        };

        _proto.removeAllIcons = function removeAllIcons() {
          this._mapIconByGameId = {};

          if (this.iconHolder.children) {
            while (this.iconHolder.children.length > 0) {
              this.iconPool.put(this.iconHolder.children[0]);
            }
          }
        };

        _proto.loadProjects = function loadProjects() {
          this.removeAllIcons();

          for (var id in this.projectConfig.json) {
            var config = this.projectConfig.json[id];

            if (config.displayLobby) {
              var item = this.getIcon();
              item.setParent(this.iconHolder);
              var icon = this.iconList.getSpriteFrame(config.iconName);
              var itemScript = item.getComponent('ItemLobby');

              if (icon) {
                itemScript.setSprite(icon);
              } else {
                item.getChildByName("label").getComponent(Label).string = id;
              }

              itemScript.setGameConfig(id, config);
              this._mapIconByGameId[id] = item;
            }
          }
        };

        _proto.requestPlayGame = function requestPlayGame(ev) {
          var config = ev.config;

          if (ev.config.isMultiSlot) {
            director.loadScene("MultiSlot", function () {
              var multiSlotComp = director.getScene().getChildByName('Canvas').getComponentInChildren('MultiSlot');
              multiSlotComp.requestPlayFromLobby(config);
            });
          } else if (ev.config.bundleName) {
            var icon = this._mapIconByGameId[ev.gameId];
            this.loadBundle(ev.config.bundleName, ev.config.prefabPath, function (percent) {
              icon.getChildByName("label").getComponent(Label).string = "Load " + Math.floor(percent) + "%";
            }, function (err, assets, status) {
              assets.forEach(function (asset) {
                var prefab = asset;

                if (prefab.data.name == ev.config.startScene) {
                  icon.getChildByName("label").getComponent(Label).string = ev.config.startScene;
                  var node = instantiate(prefab);
                  game.addPersistRootNode(node);
                }
              });
            });
          } else {
            director.loadScene(ev.config.startScene);
          }
        };

        _proto.loadBundle = function loadBundle(bundleName, prefabPath, onProgress, onComplete) {
          var _this3 = this;

          var bundle = assetManager.getBundle(bundleName);

          if (!bundle) {
            this._loadBundleDone = false;
            assetManager.loadBundle(bundleName, function (err, bundle) {
              if (err) {
                _this3._loadBundleDone = false;
                onComplete && onComplete(err, [], "load bundle error");
              } else {
                bundle.loadDir(prefabPath, Prefab, function (finish, total, item) {
                  var percent = 100 * finish / total;
                  onProgress && onProgress(percent);
                }, function (error, assets) {
                  if (error) {
                    _this3._loadBundleDone = false;
                    onComplete && onComplete(err, [], "load prefab error");
                    return;
                  }

                  onComplete(error, assets, "done");
                  _this3._loadBundleDone = true;
                });
              }
            });
          }
        };

        _proto.onEnable = function onEnable() {
          if (sys.isNative) {
            sys.garbageCollect();
          }
        };

        _proto.showDebug = function showDebug() {
          setDisplayStats(!this.toggleDebug.isChecked);
        };

        _proto.onDestroy = function onDestroy() {
          if (this.projectConfig) {
            this.projectConfig.decRef();
            this.projectConfig = null;
          }

          if (this.iconList) {
            this.iconList.decRef();
            this.iconList = null;
          }

          this.removeAllIcons();
          this.iconPool.clear();
        };

        return LobbyScene;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "iconHolder", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "iconPrefab", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "gameSelection", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "toggleDebug", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "buttonEvent", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LoginDev.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './loadConfigAsync.ts', './serviceRest.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, Node, _decorator, director, sys, Component, Label, loadConfigAsync, apiObject;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      _decorator = module._decorator;
      director = module.director;
      sys = module.sys;
      Component = module.Component;
      Label = module.Label;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      apiObject = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "92923CnVDdKsaOVS+yBf9Ay", "LoginDev", undefined);

      var _cc$_decorator = _decorator,
          ccclass = _cc$_decorator.ccclass,
          property = _cc$_decorator.property;
      var LoginDev = exports('LoginDev', (_dec = ccclass('LoginDev'), _dec2 = property({
        displayName: "List User",
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_cc$Component) {
        _inheritsLoose(LoginDev, _cc$Component);

        function LoginDev() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _cc$Component.call.apply(_cc$Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "listUser", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = LoginDev.prototype;

        _proto.onLoad = function onLoad() {
          this._bindEvents();
        };

        _proto.start = function start() {// [3]
        } // update (deltaTime: number) {
        //     // [4]
        // }
        ;

        _proto._bindEvents = function _bindEvents() {
          var _this2 = this;

          var startIdx = 100;
          var arrView = this.listUser.children;
          var length = arrView.length;

          var _loop = function _loop(i) {
            var view = arrView[i];
            var userId = arrView[i].getChildByName("Label").getComponent(Label);
            var currentIndex = i + 1;
            userId.string = "User " + currentIndex;
            view.off("click");
            view.on("click", function (event) {
              var indexUser = startIdx + currentIndex;
              var userName = 'user' + indexUser;
              var password = 'pwduser' + indexUser;

              _this2.loginSuccess({
                userText: userName,
                pwText: password
              });
            });
          };

          for (var i = 0; i < length; i++) {
            _loop(i);
          }
        };

        _proto.loginSuccess = function loginSuccess(_ref) {
          var _this3 = this;

          var userText = _ref.userText,
              pwText = _ref.pwText;

          var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
              IS_FINISHED_REMOTE = _loadConfigAsync$getC.IS_FINISHED_REMOTE,
              LOBBY_SCENE_NAME = _loadConfigAsync$getC.LOBBY_SCENE_NAME,
              API_URL = _loadConfigAsync$getC.API_URL,
              USER_TOKEN = _loadConfigAsync$getC.USER_TOKEN;

          if (!IS_FINISHED_REMOTE) {
            setTimeout(function () {
              _this3.loginSuccess({
                userText: userText,
                pwText: pwText
              });
            }, 100);
            return;
          }

          var dataPost = {
            userName: userText,
            password: pwText,
            fingerPrint: 'test'
          };
          apiObject.post({
            url: 'auth/login',
            data: dataPost,
            callback: function callback(res) {
              var _res$data = res.data,
                  data = _res$data.data,
                  error = _res$data.error;

              if (data) {
                director.loadScene(LOBBY_SCENE_NAME);
                sys.localStorage.setItem(USER_TOKEN, data.token);
              }
            },
            callbackErr: function callbackErr() {},
            apiUrl: API_URL
          });
        };

        return LoginDev;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "listUser", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LoginStaging.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './loadConfigAsync.ts', './serviceRest.ts', './globalNetwork.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, EditBox, Label, JsonAsset, Toggle, Node, Button, Prefab, sys, screen, instantiate, game, log, physics, director, Component, loadConfigAsync, apiObject, globalNetwork;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      EditBox = module.EditBox;
      Label = module.Label;
      JsonAsset = module.JsonAsset;
      Toggle = module.Toggle;
      Node = module.Node;
      Button = module.Button;
      Prefab = module.Prefab;
      sys = module.sys;
      screen = module.screen;
      instantiate = module.instantiate;
      game = module.game;
      log = module.log;
      physics = module.physics;
      director = module.director;
      Component = module.Component;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      apiObject = module.default;
    }, function (module) {
      globalNetwork = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15;

      cclegacy._RF.push({}, "7042cF+G9VB3aQidFVXOwrG", "LoginStaging", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Login = exports('Login', (_dec = ccclass('Login'), _dec2 = property(EditBox), _dec3 = property(EditBox), _dec4 = property(EditBox), _dec5 = property({
        type: Label
      }), _dec6 = property({
        type: Label
      }), _dec7 = property({
        type: JsonAsset
      }), _dec8 = property({
        type: Toggle
      }), _dec9 = property({
        type: Toggle
      }), _dec10 = property({
        type: Toggle
      }), _dec11 = property({
        type: Node
      }), _dec12 = property({
        type: Node
      }), _dec13 = property({
        type: Button
      }), _dec14 = property({
        type: Prefab
      }), _dec15 = property({
        type: Prefab
      }), _dec16 = property({
        type: Label
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Login, _Component);

        function Login() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "tokenInput", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "userInput", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "passwordInput", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "errorMsg", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "version", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "versionFile", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "toggleStaging", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "toggleExStaging", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "toggleAccount", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "passwordHolder", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tokenHolder", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnGetToken", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "stateMonitorPrefab", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "stateMonitorPrefabPortrait", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "physicType", _descriptor15, _assertThisInitialized(_this));

          _this.envInfo = {
            stg: {
              userId: '',
              token: '',
              api: 'https://api.staging.gmstd.dev/manage-token-stg/getToken'
            },
            exstg: {
              userId: '',
              token: '',
              api: 'https://api.staging.gmstd.dev/manage-token-ex-stg/getToken'
            },
            account: {
              userId: '',
              password: '',
              api: 'https://api.staging.gmstd.dev/manage-token-ex-stg/getToken'
            },
            current: 'stg'
          };
          return _this;
        }

        var _proto = Login.prototype;

        _proto.onLoad = function onLoad() {
          // console.log('Loaded scene login v341');
          this.getConfigRemote();
          this.version.string = this.versionFile.json['v'];

          if (sys.isNative) {
            var versionFilePath = jsb.fileUtils.getWritablePath() + 'gemi-hotupdate/' + 'project.manifest';

            if (jsb.fileUtils.isFileExist(versionFilePath)) {
              var str = jsb.fileUtils.getStringFromFile(versionFilePath);

              if (str) {
                var obj = JSON.parse(str);
                this.version.string = obj.version;
              }
            }
          }

          if (this.stateMonitorPrefab) {
            var monitorPrefab = this.stateMonitorPrefab;
            var screenWidth = window ? window.innerWidth : screen.windowSize.width;
            var screenHeight = window ? window.innerHeight : screen.windowSize.height;

            if (screenWidth < screenHeight) {
              monitorPrefab = this.stateMonitorPrefabPortrait;
            }

            var monitor = instantiate(monitorPrefab);
            game.addPersistRootNode(monitor);
          } else {
            log("No StateMonitor");
          }

          if (physics.PhysicsSystem.PHYSICS_PHYSX) {
            this.physicType.string = "PhysicX";
          } else if (physics.PhysicsSystem.PHYSICS_BULLET) {
            this.physicType.string = "PhysicBullet";
          } else if (physics.PhysicsSystem.PHYSICS_CANNON) {
            this.physicType.string = "PhysicCannon";
          } else {
            this.physicType.string = "PhysicBultin";
          }
        };

        _proto.getConfigRemote = function getConfigRemote() {
          var _this2 = this;

          var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
              IS_FINISHED_REMOTE = _loadConfigAsync$getC.IS_FINISHED_REMOTE;

          if (!IS_FINISHED_REMOTE) {
            setTimeout(function () {
              _this2.getConfigRemote();
            }, 100);
            return;
          }

          var cachedInfo = sys.localStorage.getItem('envInfo');
          if (cachedInfo) this.envInfo = JSON.parse(cachedInfo);

          if (this.envInfo && this.envInfo.current == "stg") {
            this.toggleStaging.isChecked = true;
            this.switchStaging();
          } else if (this.envInfo && this.envInfo.current == "exstg") {
            this.toggleExStaging.isChecked = true;
            this.switchExStaging();
          } else {
            this.toggleAccount.isChecked = true;
            this.switchAccount();
          }
        };

        _proto.switchStaging = function switchStaging() {
          if (!this.toggleStaging.isChecked) return;
          this.envInfo.current = 'stg';
          var config = {
            API_URL: "https://api.staging.gmstd.dev/",
            SOCKET_URL: "wss://sock-bin.staging.gmstd.dev",
            LOGIN_USE_TOKEN: true,
            URL_TOKEN: 'token',
            URL_CODE: 'code',
            USER_TOKEN: "user_token",
            IS_FINISHED_REMOTE: true,
            LOBBY_SCENE_NAME: "Lobby",
            LOGIN_SCENE_NAME: "Login",
            "IPMaster1": "wss://staging.fish.gmstd.dev/lobby-1999/",
            "IPMaster2": "wss://staging.fish.gmstd.dev/lobby-1998/",
            "IPMaster3": "wss://staging.fish.gmstd.dev/lobby-1997/",
            "IPMaster5": "wss://staging.fish.gmstd.dev/lobby-1995/",
            "IPMaster6": "wss://staging.fish.gmstd.dev/lobby-1992/",
            "IPMaster7": "wss://staging.fish.gmstd.dev/lobby-1990/",
            "IPMaster8": "wss://staging.fish.gmstd.dev/lobby-1988/",
            "IPMaster10": "wss://staging.fish.gmstd.dev/lobby-1996/",
            "IPMaster12": "wss://staging.fish.gmstd.dev/lobby-1985/",
            "IPMaster88": "wss://staging.fish.gmstd.dev/lobby-1993/",
            "IPMaster89": "wss://dev.fish.gmstd.dev/lobby-1989/"
          };
          this.btnGetToken.interactable = true;
          this.tokenHolder.active = true;
          this.passwordHolder.active = false;
          loadConfigAsync.replaceConfig(config);
          sys.localStorage.setItem('envInfo', JSON.stringify(this.envInfo));
          this.loadUserInfo();
        };

        _proto.switchExStaging = function switchExStaging() {
          if (!this.toggleExStaging.isChecked) return;
          this.envInfo.current = 'exstg';
          var config = {
            API_URL: "https://api.ex-staging.gmstd.dev/",
            SOCKET_URL: "wss://sock-bin.ex-staging.gmstd.dev",
            USER_TOKEN: "user_token",
            URL_TOKEN: "token",
            URL_CODE: "code",
            IS_FINISHED_REMOTE: true,
            LOBBY_SCENE_NAME: "Lobby",
            LOGIN_SCENE_NAME: "Login",
            "IPMaster1": "wss://prelive.fish.gmstd.dev/lobby-1999/",
            "IPMaster2": "wss://prelive.fish.gmstd.dev/xwin-lobby/",
            "IPMaster3": "wss://prelive.fish.gmstd.dev/lobby-1997/",
            "IPMaster5": "wss://prelive.fish.gmstd.dev/lobby-1995/",
            "IPMaster6": "wss://prelive.fish.gmstd.dev/lobby-1992/",
            "IPMaster7": "wss://prelive.fish.gmstd.dev/lobby-1990/",
            "IPMaster8": "wss://prelive.fish.gmstd.dev/lobby-1988/",
            "IPMaster10": "wss://prelive.fish.gmstd.dev/lobby-1996/",
            "IPMaster88": "wss://prelive.fish.gmstd.dev/lobby-1993/"
          };
          this.btnGetToken.interactable = true;
          this.tokenHolder.active = true;
          this.passwordHolder.active = false;
          loadConfigAsync.replaceConfig(config);
          sys.localStorage.setItem('envInfo', JSON.stringify(this.envInfo));
          this.loadUserInfo();
        };

        _proto.switchAccount = function switchAccount() {
          if (!this.toggleAccount.isChecked) return;
          this.envInfo.current = 'account';
          var config = {
            API_URL: "https://api2.ex-staging.gmstd.dev/",
            SOCKET_URL: "wss://sock2-bin.ex-staging.gmstd.dev",
            USER_TOKEN: "user_token",
            URL_TOKEN: "token",
            URL_CODE: "code",
            IS_FINISHED_REMOTE: true,
            LOBBY_SCENE_NAME: "Lobby",
            LOGIN_SCENE_NAME: "Login",
            FISH_CLIENT_TYPE: 2,
            "IPMaster1": "wss://prelive.fish.gmstd.dev/lobby-1999/",
            "IPMaster2": "wss://prelive.fish.gmstd.dev/lobby-1998/",
            "IPMaster3": "wss://prelive.fish.gmstd.dev/lobby-1997/",
            "IPMaster5": "wss://prelive.fish.gmstd.dev/lobby-1995/",
            "IPMaster6": "wss://prelive.fish.gmstd.dev/lobby-1992/",
            "IPMaster7": "wss://prelive.fish.gmstd.dev/lobby-1990/",
            "IPMaster8": "wss://prelive.fish.gmstd.dev/lobby-1988/",
            "IPMaster10": "wss://prelive.fish.gmstd.dev/lobby-1996/",
            "IPMaster88": "wss://prelive.fish.gmstd.dev/lobby-1993/"
          };
          this.btnGetToken.interactable = false;
          this.tokenHolder.active = false;
          this.passwordHolder.active = true;
          loadConfigAsync.replaceConfig(config);
          sys.localStorage.setItem('envInfo', JSON.stringify(this.envInfo));
          this.loadUserInfo();
        };

        _proto.loadUserInfo = function loadUserInfo() {
          var currentEnv = this.envInfo.current;
          var userInfo = this.envInfo[currentEnv] || {};
          if (!userInfo) return;
          if (userInfo.token) this.tokenInput.string = userInfo.token;else {
            this.tokenInput.string = '';
          }
          if (userInfo.password) this.passwordInput.string = userInfo.password;else {
            this.passwordInput.string = '';
          }
          this.userInput.string = userInfo.userId || '';
        };

        _proto.getToken = function getToken() {
          var _this3 = this;

          var currentEnv = this.envInfo.current;
          var userInfo = this.envInfo[currentEnv];
          var params = {
            userName: this.userInput.string.replace(/xxxxx_|tek_/g, ''),
            password: '123456'
          };
          apiObject.get({
            url: userInfo.api,
            params: params,
            callback: function callback(data) {
              if (data.code == 200 && data.data && _this3.tokenInput) {
                _this3.tokenInput.string = data.data;
              }
            }
          });
        };

        _proto.onLoginPress = function onLoginPress() {
          if (this.envInfo.current == 'account') {
            this.loginAccount();
          } else {
            this.loginToken();
          }
        };

        _proto.loginAccount = function loginAccount() {
          var _this4 = this;

          var _loadConfigAsync$getC2 = loadConfigAsync.getConfig(),
              LOBBY_SCENE_NAME = _loadConfigAsync$getC2.LOBBY_SCENE_NAME,
              USER_TOKEN = _loadConfigAsync$getC2.USER_TOKEN,
              API_URL = _loadConfigAsync$getC2.API_URL;

          var dataPost = {
            username: this.userInput.string,
            password: this.passwordInput.string
          };
          apiObject.post({
            apiUrl: API_URL,
            url: 'client2-tool/login',
            data: dataPost,
            callback: function callback(res) {
              var _res$data = res.data,
                  data = _res$data.data,
                  code = _res$data.code;

              if (code === 200 && data) {
                var token = data.token,
                    refreshToken = data.refreshToken;
                if (!_this4.envInfo[_this4.envInfo.current]) _this4.envInfo[_this4.envInfo.current] = {};
                _this4.envInfo[_this4.envInfo.current].userId = _this4.userInput.string;
                _this4.envInfo[_this4.envInfo.current].password = _this4.passwordInput.string;
                sys.localStorage.setItem('envInfo', JSON.stringify(_this4.envInfo));
                globalNetwork.init(token, refreshToken);
                sys.localStorage.setItem(USER_TOKEN, token);
                director.loadScene(LOBBY_SCENE_NAME);
              } else {
                _this4.errorMsg.string = "Không thể đăng nhập";
              }
            },
            callbackErr: function callbackErr() {
              _this4.errorMsg.string = "Không thể đăng nhập";
            }
          });
        };

        _proto.loginToken = function loginToken() {
          var _this5 = this;

          var _loadConfigAsync$getC3 = loadConfigAsync.getConfig(),
              LOBBY_SCENE_NAME = _loadConfigAsync$getC3.LOBBY_SCENE_NAME,
              USER_TOKEN = _loadConfigAsync$getC3.USER_TOKEN,
              API_URL = _loadConfigAsync$getC3.API_URL;

          var userToken = this.tokenInput.string;
          if (!userToken) return;
          var dataPost = {
            token: userToken
          }; // console.log('Trying login user token ' + userToken);

          apiObject.post({
            url: API_URL + 'auth/token/login',
            data: dataPost,
            callback: function callback(res) {
              // console.log('login res ' + JSON.stringify(res));
              var _res$data2 = res.data,
                  data = _res$data2.data,
                  error = _res$data2.error;

              if (data) {
                var token = data.token,
                    userId = data.userId;

                if (token && token != "") {
                  _this5.envInfo[_this5.envInfo.current].token = token;
                  _this5.envInfo[_this5.envInfo.current].userId = userId.replace(/xxxxx_|tek_/g, ''), sys.localStorage.setItem('envInfo', JSON.stringify(_this5.envInfo));
                  sys.localStorage.setItem(USER_TOKEN, token);
                  director.loadScene(LOBBY_SCENE_NAME);
                  _this5.errorMsg.string = "";
                  globalNetwork.setToken(token);
                  globalNetwork.init(token, null, 'portal', 'all');
                } else {
                  _this5.errorMsg.string = "Không thể đăng nhập";
                }
              } else if (error || res.data.errors) {
                switch (res.data.errors[0]) {
                  case "ERROR_TOKEN_EXPRIED":
                    _this5.errorMsg.string = "Token đã expired";
                    break;

                  default:
                    _this5.errorMsg.string = "Không thể đăng nhập";
                    break;
                }
              }
            }
          });
        };

        return Login;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "tokenInput", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "userInput", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "passwordInput", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "errorMsg", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "version", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "versionFile", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "toggleStaging", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "toggleExStaging", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "toggleAccount", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "passwordHolder", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "tokenHolder", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "btnGetToken", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "stateMonitorPrefab", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "stateMonitorPrefabPortrait", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "physicType", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LogoWithBrand.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "21f06Vy2PJOLpMbDKIT8mBX", "LogoWithBrand", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var LogoWithBrand = exports('LogoWithBrand', (_dec = ccclass('LogoWithBrand'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(LogoWithBrand, _Component);

        function LogoWithBrand() {
          return _Component.apply(this, arguments) || this;
        }

        return LogoWithBrand;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LuckyEffect1998.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfActionHelper.ts', './utils.ts', './gfLuckyEffect.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, tween, v3, gfBaseEvents, gfEventEmitter, fadeIn, rotateBy, setOpacity, gfLuckyEffect;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      tween = module.tween;
      v3 = module.v3;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      fadeIn = module.fadeIn;
      rotateBy = module.rotateBy;
    }, function (module) {
      setOpacity = module.setOpacity;
    }, function (module) {
      gfLuckyEffect = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "9c0877wShdOE6L3Q5t7Vm+y", "LuckyEffect1998", undefined);

      var ccclass = _decorator.ccclass;
      var LuckyEffect1998 = exports('LuckyEffect1998', (_dec = ccclass('LuckyEffect1998'), _dec(_class = /*#__PURE__*/function (_gfLuckyEffect) {
        _inheritsLoose(LuckyEffect1998, _gfLuckyEffect);

        function LuckyEffect1998() {
          return _gfLuckyEffect.apply(this, arguments) || this;
        }

        var _proto = LuckyEffect1998.prototype;

        _proto.playEffect = function playEffect(data) {
          var _this = this;

          var multiplier = data.Multiplier;
          var result = multiplier - 2;
          var showTime = 0.5;
          var fadeTime = 0.2;
          this.iconGlow.active = true;
          setOpacity(this.iconGlow, 0);
          this.numberNode.angle = result * 90;
          tween(this.iconGlow).then(fadeIn(2, "cubicOut")).start();
          tween(this.numberNode).parallel(tween().then(rotateBy(this.rotateTime, -360 * 3, "cubicOut")), tween().then(fadeIn(this.rotateTime, "cubicOut"))).start();
          tween(this.pinNode).then(fadeIn(0.5)).start();
          tween(this.node).to(showTime, {
            scale: v3(1, 1, 1)
          }).delay(this.rotateTime - showTime).call(function () {
            tween(_this.multiNode[result]).delay(fadeTime).to(showTime, {
              scale: v3(1.5, 1.5, 1)
            }).call(function () {
              tween(_this.node).to(showTime + fadeTime, {
                scale: v3(0, 0, 1)
              }).call(function () {
                gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.PLAY_LUCKY_EFFECT_DONE, data);

                _this.returnPool();
              }).start();
            }).start();
          }).start();
        };

        return LuckyEffect1998;
      }(gfLuckyEffect)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/main", ['./HotUpdate.ts', './UpdatePanel.ts', './LayoutNodeInstance.ts', './LogoWithBrand.ts', './GameLogo.ts', './EventList.ts', './GameEvent.ts', './GameQuest.ts', './ItemLobby.ts', './LobbyDev.ts', './LobbyMenu.ts', './LobbyScene.ts', './LoginDev.ts', './LoginStaging.ts', './connectNetwork.ts', './game-network.mjs_cjs=&original=.js', './globalNetwork.ts', './AlignFullScreenButton.ts', './AnimUtils.ts', './AntialiasConfig.ts', './ClickAndShow.ts', './LetterSpacing.ts', './LoadingScreen.ts', './animateNumberLabel.ts', './gameCommonUtils.ts', './utils.ts', './AnimationCacheConfig.ts', './AudioClipDatabase.ts', './CanvasScaleByOrientation.ts', './CustomCanvasSize.ts', './CustomPageViewIndicator.ts', './CustomTypeShare.ts', './EventListenerManager.ts', './InitSocketComponent.ts', './MonitorTarget.ts', './NativeSoundPlayer.ts', './ScreenOrientationControl.ts', './ScrollViewOptimise.ts', './Sound.ts', './SoundPlayerImpl.ts', './WebSoundPlayer.ts', './globalConfig.ts', './XOCypher.ts', './loadConfigAsync.ts', './serviceRest.ts', './Config9000.ts', './AnimationControl.ts', './AtlasHolder.ts', './AutoScaleBackground.ts', './BackToLobby.ts', './BackgroundEffectControl.ts', './BaseDynamicLoading.ts', './BaseTableHistoryDetail.ts', './Bet.ts', './BetHistoryMgr.ts', './DotsHistory.ts', './PaginationMrg.ts', './SlotBetCellHistory.ts', './SlotBetHistory.ts', './SlotBetHistoryDetail.ts', './SlotBetSummaryHistory.ts', './SlotBetTableHistory.ts', './SlotBetTableHistoryDetail.ts', './BigWild.ts', './BigWildTable.ts', './CloudMovingControl.ts', './CountDown.ts', './CustomEnum.ts', './CustomType.ts', './DemoComponent.ts', './DialogDisplayControl.ts', './Draggable.ts', './DynamicLoadingPrefabControl.ts', './EventMiniIcon.ts', './EventMiniProgress.ts', './FreeGameOption.ts', './FreespinOption.ts', './GambleBox.ts', './GambleDirector.ts', './GambleWriter.ts', './GameAnalytics.ts', './GlobalNodeSharing.ts', './SlotBaseCellHistory.ts', './SlotBaseHistory.ts', './SlotBaseTableHistory.ts', './SlotJackpotCellHistory.ts', './SlotJackpotHistory.ts', './SlotJackpotHistoryDetail.ts', './SlotJackpotTableHistory.ts', './Info.ts', './IntroBonus.ts', './IntroFree.ts', './IntroJackpot.ts', './Jackpot.ts', './JackpotCoinEffect.ts', './JackpotWin.ts', './LoadingTransition.ts', './LobbyJackpot.ts', './BonusValueControl.ts', './ExtendMiniBox.ts', './ExtendMiniTable.ts', './MiniBox.ts', './MiniDirector.ts', './MiniTable.ts', './MiniWriter.ts', './MovingParticleControl.ts', './OnDemandLoadingControl.ts', './PoolFactory.ts', './RenderTextureFactory.ts', './Setting.ts', './RotateIcon.ts', './SlotButton.ts', './SlotDialog.ts', './SlotDialogAction.ts', './SlotGetShare.ts', './SlotTask.ts', './SlotUIScene.ts', './SpinTimes.ts', './SpineAnimationControl.ts', './SpineSkeletonDatabase.ts', './StickyWild.ts', './Toast.ts', './ToggleMotion.ts', './TopUIController.ts', './TotalWinPanel.ts', './TrialButton.ts', './Turbo.ts', './TutorialControl.ts', './TutorialDialog.ts', './TutorialMgr.ts', './TutorialStep.ts', './VersionSlot.ts', './Wallet.ts', './WinAmount.ts', './BaseDirector.ts', './BetData.ts', './CustomEventNames.ts', './DataStore.ts', './Director.ts', './EventNames.ts', './FreeGameWriter.ts', './GameMode.ts', './GameObject.ts', './MsgKeyMapping.ts', './NetworkEnum.ts', './QuestData.ts', './SlotDirector.ts', './SlotGameWriter.ts', './SlotQuestMgr.ts', './SlotText.ts', './TurnBaseFSM.ts', './UIManager.ts', './Writer.ts', './gameStateSlot.ts', './CoinEffect.ts', './CoinsEffect.ts', './WinEffect.ts', './WinEffectv2.ts', './AutoSpinPanelController.ts', './BarMenu.ts', './BetOptionItem.ts', './BetOptionScrollView.ts', './BetSelectionMgr.ts', './BetSelectionPanelController.ts', './BottomBarMgr.ts', './CustomToggle.ts', './InfoView.ts', './SmallToolTip.ts', './Turbov2.ts', './TweenViewComponent.ts', './TweenViewConfig.ts', './InfoPayableSymbol.ts', './TouchPayableSymbol.ts', './SlotReelv2.ts', './SlotTableTouchSymbol.ts', './SlotSoundPlayer.ts', './BonusRollReel.ts', './BonusRollSymbol.ts', './BonusRollTable.ts', './GongReel.ts', './GongStackWild.ts', './GongTable.ts', './GongUtils.ts', './LineDrawingPayline.ts', './SlotReel.ts', './SlotSymbol.ts', './SlotSymbolPayline.ts', './SlotTable.ts', './SlotTableNearWinEffect.ts', './SlotTablePayline.ts', './SlotTablePaylineInfo.ts', './SlotTableSoundEffect.ts', './SlotUtils.ts', './ConfigTest.ts', './FakeDirector.ts', './TestSpine.ts', './Session.ts', './SessionInfo.ts', './StateMonitor.ts', './UPNG.mjs_cjs=&original=.js', './Dragon1998.ts', './AssetBundle1998.ts', './Config1998.ts', './DataStore1998.ts', './DragonBall1998.ts', './EffectDragon1998.ts', './EffectLockFish1998.ts', './EventsCode1998.ts', './FishManager1998.ts', './GeneralInitialization1998.ts', './HUDController1998.ts', './LoadingScene1998.ts', './MainController1998.ts', './NodePoolAssets1998.ts', './NodePoolConfig1998.ts', './PoolManager1998.ts', './ReferenceManager1998.ts', './SideMenu1998.ts', './BackgroundController1998.ts', './BaseFish1998.ts', './BulletLayer1998.ts', './DropSpecialGun1998.ts', './EffectLayer1998.ts', './FishGroupMgr1998.ts', './FreezeSkill1998.ts', './GunSkill1998.ts', './JackpotInfo1998.ts', './JackpotStarFX1998.ts', './JackpotWinPopup1998.ts', './LobbyLayer1998.ts', './LuckyEffect1998.ts', './NotifyJackpot1998.ts', './Player1998.ts', './SoundController1998.ts', './SpineFish1998.ts', './SpriteFish1998.ts', './WaitingLayer1998.ts', './FishGroup17Extend1998.ts', './JackpotCellHistory1998.ts', './JackpotHistory1998.ts', './PopupJackpotHistory1998.ts', './PopupInfo1998.ts', './PopupPrompt1998.ts', './PopupSetting1998.ts', './gfAssetBundle.ts', './gfBackgroundController.ts', './gfBubble.ts', './gfCustomDataType.ts', './gfDataStore.ts', './gfEventEmitter.ts', './gfFishManager.ts', './gfGeneralInitialization.ts', './gfHUDController.ts', './gfJackpotInfo.ts', './gfLoadAllInOne.ts', './gfLoadGameByPrefabs.ts', './gfLoadingScene.ts', './gfLoadingTransition.ts', './gfLocalize.ts', './gfMainController.ts', './gfMainFSM.ts', './gfNativeSoundPlayer.ts', './gfNode.ts', './gfNodePool.ts', './gfNodePoolAssets.ts', './gfNodePoolConfig.ts', './gfNotifyController.ts', './gfOverrideEngine.ts', './gfPersisNodeController.ts', './gfPoolManager.ts', './gfPopupController.ts', './gfReferenceManager.ts', './gfSetOrientation.ts', './gfSideMenu.ts', './gfSoundBase.ts', './gfSoundController.ts', './gfBallTray.ts', './gfDragon.ts', './gfDragonBall.ts', './gfDragonCacheData.ts', './gfEffectDragon.ts', './gfJackpotStarFX.ts', './gfCuSceneJackpotWin.ts', './gfCutSceneItem.ts', './gfCutSceneLayer.ts', './gfCutSceneWin.ts', './gfDropSpecialGunFX.ts', './gfEffectEvent.ts', './gfEventButton.ts', './gfEventController.ts', './gfEventItemEffect.ts', './gfEventTray.ts', './gfEventTrayController.ts', './gfEventWinWheel.ts', './gfPopupEventInfo.ts', './gfBaseFish.ts', './gfMiniBossGuardFish.ts', './gfMoveByThreePoints.ts', './gfSpineFish.ts', './gfSpriteFish.ts', './gfFishFreezeEffect.ts', './gfFreezeGunFX.ts', './gfFreezeSkill.ts', './gfItemFreeze.ts', './gfEventHistory.ts', './gfLuckyEffect.ts', './gfLuckyFish.ts', './gfBaseCellHistory.ts', './gfBaseHistory.ts', './gfPopupJackpotHistory.ts', './gfPopupInfo.ts', './gfPopupInfoPageView.ts', './gfPopupPrompt.ts', './gfPopupSetting.ts', './gfPopupSettingSlider.ts', './gfPopuptutorial.ts', './gfBubbleTransition.ts', './gfWaveTransition.ts', './gf3DParticle.ts', './gfBigWinWheel.ts', './gfBigWinWheelAvatar.ts', './gfBlockAllInput.ts', './gfBlurScrollView.ts', './gfBlurScrollViewController.ts', './gfBullet.ts', './gfBulletLayer.ts', './gfCoinFX.ts', './gfCoinLabel.ts', './gfEffectLayer.ts', './gfEffectLockFish.ts', './gfExplosionAnimationClip.ts', './gfExplosionSpine.ts', './gfFishLayer.ts', './gfGameLayer.ts', './gfGunSkill.ts', './gfGunSkillController.ts', './gfJackpotWinPopup.ts', './gfLaserBox.ts', './gfLayerComponent.ts', './gfLobbyLayer.ts', './gfNetFX.ts', './gfNotifyComponent.ts', './gfNotifyItemStack.ts', './gfNotifyJackpot.ts', './gfNotifyLockFish.ts', './gfNotifyMessage.ts', './gfNotifyStack.ts', './gfPlayAndDestroy.ts', './gfPlayer.ts', './gfPlayerLayer.ts', './gfPopupBase.ts', './gfResizeByEvent.ts', './gfResizeWindow.ts', './gfTouchListener.ts', './gfVersion.ts', './gfWaitingLayer.ts', './gfWallet.ts', './gfWifiStatus.ts', './gfBaseConfig.ts', './gfBaseEvents.ts', './gfFishGroup01.ts', './gfFishGroup02.ts', './gfFishGroup03.ts', './gfFishGroup04.ts', './gfFishGroup05.ts', './gfFishGroup06.ts', './gfFishGroup06Lite.ts', './gfFishGroup07.ts', './gfFishGroup07Lite.ts', './gfFishGroup08.ts', './gfFishGroup09.ts', './gfFishGroup10.ts', './gfFishGroup11.ts', './gfFishGroup12.ts', './gfFishGroup13.ts', './gfFishGroup15.ts', './gfFishGroup16.ts', './gfFishGroup17.ts', './gfFishGroup18.ts', './gfFishGroup19.ts', './gfFishGroupData.ts', './gfFishGroupHelper.ts', './gfFishGroupMgr.ts', './gfFishMoveActions.ts', './gfGameScheduler.ts', './gfNetworkEvent.ts', './gfNetworkGameEvent.ts', './gfNetworkKeyMap.ts', './gfNetworkParser.ts', './gfNetworkSocket.ts', './gfActionHelper.ts', './gfUtilities.ts', './crypto-core.ts', './hashKey.ts', './md5.ts', './sha1.ts', './sha224.ts', './sha256.ts', './sha512.ts', './x64-core.ts', './BackgroundController1989.ts', './Config1989.ts', './DataStore1989.ts', './EffectLockFish1989.ts', './EventsCode1989.ts', './FishManager1989.ts', './GeneralInitialization1989.ts', './HUDController1989.ts', './LoadingScene1989.ts', './MainController1989.ts', './MapManager1989.ts', './MechanismComponent1989.ts', './NodePoolAssets1989.ts', './NodePoolConfig1989.ts', './PoolManager1989.ts', './ReferenceManager1989.ts', './SideMenu1989.ts', './SortLayer1989.ts', './WaitingLayer1989.ts', './BigWinMummy1989.ts', './EffectLayer1989.ts', './LobbyLayer1989.ts', './NetFX1989.ts', './GameLayer1989.ts', './Mummy1989.ts', './Bullet1989.ts', './BulletLayer1989.ts', './MyUserInfoController1989.ts', './Player1989.ts', './PlayerLayer1989.ts', './JackpotHistory1989.ts', './PopupInfo1989.ts', './PopupJackpotHistory1989.ts', './PopupPrompt1989.ts', './PopupSetting1989.ts', './Debug.ts', './MapConfig.ts', './DragAndDrop.ts', './DummyData.ts', './GridRenderer.ts', './MapManager.ts', './Moving.ts', './MummySpawner.ts', './MapGenerator.ts', './testMove.ts', './BulletMapGen.ts', './Fish.ts', './LayerTouchListener.ts', './Player.ts', './PlayerView.ts', './DragAndDropSpine.ts', './SpineController.ts', './SpineGrid.ts', './SpineMummy.ts', './CustomTiledMap.ts', './TiledMapConfig.ts', './TiledMapManager.ts', './GameView.ts', './Main.ts', './MapView.ts', './Fish.mjs_cjs=&original=.js', './FishConfig.mjs_cjs=&original=.js', './Map.mjs_cjs=&original=.js', './archive.mjs_cjs=&original=.js', './index.mjs_cjs=&original=.js', './utils.mjs_cjs=&original=.js', './appConfig-debug.ts', './appConfig.ts', './mock.ts', './state-machine.min.mjs_cjs=&original=.js'], function () {
  'use strict';

  return {
    setters: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null],
    execute: function () {}
  };
});

System.register("chunks:///_virtual/Main.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, UITransform, Vec3, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      UITransform = module.UITransform;
      Vec3 = module.Vec3;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "6ecab3SIjBE0pPoq6DpFi9G", "Main", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var dat = globalThis.dat;
      var guiWidth = 150;
      var Main = exports('Main', (_dec = ccclass('Main'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Main, _Component);

        function Main() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "gridNode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "objectNode", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "pathNode", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "background", _descriptor4, _assertThisInitialized(_this));

          _this.eventManager = null;
          _this._viewControls = null;
          _this._viewGui = null;
          _this._mapControls = null;
          _this._mapGui = null;
          _this._fishControls = null;
          _this._fishGui = null;
          _this._fullScreenScale = 1;
          return _this;
        }

        var _proto = Main.prototype;

        _proto.onLoad = function onLoad() {
          var _this2 = this;

          this.eventManager = this.node;
          window["main"] = this;
          var canvasSize = this.node.parent.getComponent(UITransform);
          var rootSize = this.node.getComponent(UITransform);
          var scale = Math.min(canvasSize.width / rootSize.width, canvasSize.height / rootSize.height);
          this._fullScreenScale = new Vec3(scale, scale, 1);
          this._viewControls = {
            Grid: true,
            Object: true,
            Path: true,
            Background: true,
            Gun: false,
            "Gen Paths": function GenPaths() {
              _this2.eventManager.emit("GEN_PATH");
            },
            "Clear Paths": function ClearPaths() {
              _this2.eventManager.emit("CLEAR_PATH");
            },
            "Full Screen": false
          };
          this._mapControls = {
            "Select Map": "Map 1",
            "Add Obstacle": function AddObstacle() {
              _this2.eventManager.emit("ADD_OBSTACLE");
            },
            "Add Spawner": function AddSpawner() {
              _this2.eventManager.emit("ADD_SPAWNER");
            },
            "Export Map": function ExportMap() {
              _this2.eventManager.emit("EXPORT_MAP");
            },
            "Clear Map": function ClearMap() {
              _this2.eventManager.emit("CLEAR_MAP");
            }
          };
          this._fishControls = {
            "Create Fish": function CreateFish() {
              _this2.eventManager.emit("CREATE_FISH");
            },
            "Create Fishes": function CreateFishes() {
              _this2.eventManager.emit("CREATE_FISHES");
            },
            "Clear Fishes": function ClearFishes() {
              _this2.eventManager.emit("CLEAR_FISHES");
            }
          };
        };

        _proto.start = function start() {
          this._createViewGui();

          for (var key in this._viewControls) {
            this._updateView(key);
          }

          this._createMapGui();

          this._createFishGui();

          this.eventManager.emit("CHANGE_MAP", 2);
        };

        _proto._createViewGui = function _createViewGui() {
          var _this3 = this;

          var gui = new dat.GUI({
            name: "View",
            width: 150
          });
          gui.domElement.parentElement.style.zIndex = 1000;
          this._viewGui = gui.addFolder("View");

          var _loop = function _loop(key) {
            _this3._viewGui.add(_this3._viewControls, key).onChange(function (value) {
              if (typeof _this3._viewControls[key] !== 'function') {
                _this3._viewControls[key] = value;
              }

              _this3._updateView(key);

              _this3._viewGui.close();
            });
          };

          for (var key in this._viewControls) {
            _loop(key);
          }
        };

        _proto._updateView = function _updateView(key) {
          switch (key) {
            case "Grid":
              this.gridNode.active = this._viewControls.Grid;
              return;

            case "Path":
              this.pathNode.active = this._viewControls.Path;
              return;

            case "Object":
              this.objectNode.active = this._viewControls.Object;
              return;

            case "Background":
              this.eventManager.emit("SHOW_BACKGROUND", this._viewControls.Background);
              return;

            case "Gun":
              this.eventManager.emit("SHOW_GUN", this._viewControls.Gun);
              return;

            case "Full Screen":
              var scale = this._viewControls["Full Screen"] ? this._fullScreenScale : new Vec3(1, 1, 1);
              this.node.setScale(scale);
              return;
          }
        };

        _proto._createMapGui = function _createMapGui() {
          var _this4 = this;

          this._mapGui = new dat.GUI({
            name: "Map",
            width: guiWidth
          });

          var mapFolder = this._mapGui.addFolder('Map');

          for (var key in this._mapControls) {
            if (key === "Select Map") {
              mapFolder.add(this._mapControls, key, ["Map 1", "Map 2"]).onChange(function (value) {
                var mapId = value.slice(3);

                _this4.eventManager.emit("CHANGE_MAP", mapId);

                _this4.eventManager.emit("CLEAR_FISHES");

                _this4.eventManager.emit("CLEAR_PATH");

                mapFolder.close();
              });
            } else {
              mapFolder.add(this._mapControls, key).onChange(function () {
                return mapFolder.close();
              });
            }
          }
        };

        _proto._createFishGui = function _createFishGui() {
          this._fishGui = new dat.GUI({
            name: "Fish",
            width: guiWidth
          });

          var fishFolder = this._fishGui.addFolder('Fish');

          for (var key in this._fishControls) {
            fishFolder.add(this._fishControls, key).onChange(function () {
              return fishFolder.close();
            });
          }
        };

        return Main;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "gridNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "objectNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "pathNode", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "background", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MainController1989.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfMainController.ts', './gfNetworkParser.ts', './EventsCode1989.ts', './Config1989.ts', './DataStore1989.ts', './gfEventEmitter.ts', './gfAssetBundle.ts', './gameCommonUtils.ts', './gfLayerComponent.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _assertThisInitialized, cclegacy, instantiate, warn, director, gfMainController, gfNetworkParser, EventsCode1989, Config1989, DataStore1989, gfEventEmitter, gfAssetBundle, gameCommonUtils, gfLayerComponent;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      instantiate = module.instantiate;
      warn = module.warn;
      director = module.director;
    }, function (module) {
      gfMainController = module.default;
    }, function (module) {
      gfNetworkParser = module.default;
    }, function (module) {
      EventsCode1989 = module.default;
    }, function (module) {
      Config1989 = module.default;
    }, function (module) {
      DataStore1989 = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfAssetBundle = module.default;
    }, function (module) {
      gameCommonUtils = module.default;
    }, function (module) {
      gfLayerComponent = module.gfLayerComponent;
    }],
    execute: function () {
      cclegacy._RF.push({}, "7ba36o/uJdGY5cCQoa9L1Zw", "MainController1989", undefined);

      var handleFlowOutGame = gameCommonUtils.handleFlowOutGame;
      var MainController1989 = exports('default', /*#__PURE__*/function (_gfMainController) {
        _inheritsLoose(MainController1989, _gfMainController);

        function MainController1989() {
          var _this;

          _this = _gfMainController.call(this) || this;
          MainController1989.instance = _assertThisInitialized(_this);
          return _this;
        }

        var _proto = MainController1989.prototype;

        _proto.loadScene = function loadScene(sceneName, callback) {
          var _this2 = this;

          gfEventEmitter.instance.emit(EventsCode1989.COMMON.CLOSE_SCENE);

          if (Config1989.instance.LoadGameByPrefab) {
            gfEventEmitter.instance.emit(EventsCode1989.COMMON.BEFORE_LOAD_SCENE);
            var newNode = instantiate(Config1989.instance.ScenePrefabs[sceneName]);

            if (newNode) {
              var _GameConfig$instance$ = Config1989.instance.SceneName,
                  Game = _GameConfig$instance$.Game,
                  Lobby = _GameConfig$instance$.Lobby;
              var mainComponent = newNode.getComponent(gfLayerComponent);
              var curSceneName = DataStore1989.instance.getCurrentSceneName();
              var isLoadingScene = curSceneName != Game && curSceneName != Lobby;

              var createSceneCallback = function createSceneCallback() {
                mainComponent.setStartCallback(callback);
                newNode.parent = Config1989.instance.MainGameNode;
                newNode.setSiblingIndex(0);

                _this2.removeCurrentScene();
              };

              if (isLoadingScene && sceneName == Lobby) {
                createSceneCallback();
              } else if (isLoadingScene && sceneName == Game) {
                if (DataStore1989.instance.getCurrentRoom() === Config1989.instance.RoomKind.VIP) {
                  gfAssetBundle.instance.loadVipRoomAssets(createSceneCallback);
                } else {
                  gfAssetBundle.instance.releaseVipRoomAssets();
                  createSceneCallback();
                }
              } else if (curSceneName == Game && sceneName == Lobby) {
                createSceneCallback();
              } else if (curSceneName == Lobby && sceneName == Game) {
                if (DataStore1989.instance.getCurrentRoom() === Config1989.instance.RoomKind.VIP) {
                  gfAssetBundle.instance.loadVipRoomAssets(createSceneCallback);
                } else {
                  gfAssetBundle.instance.releaseVipRoomAssets();
                  gfEventEmitter.instance.emit(EventsCode1989.LOBBY_LAYER.PLAY_TRANSITION_GATE, function () {
                    createSceneCallback();
                  });
                }
              }
            } else {
              warn('Fail to run scene ' + sceneName);
              handleFlowOutGame();
            }
          } else {
            director.loadScene(sceneName, function (err) {
              if (err) {
                warn(err.message, err.stack);
                handleFlowOutGame();
              } else {
                _this2._isGameHide = false;

                if (callback && typeof callback === 'function') {
                  var _Emitter$instance;

                  (_Emitter$instance = gfEventEmitter.instance) == null ? void 0 : _Emitter$instance.emit(EventsCode1989.COMMON.SCENE_LOAD_DONE);
                  callback();
                }
              }
            });
          }
        };

        _proto.connectMaster = function connectMaster() {
          Config1989.instance.IPMaster = Config1989.instance.IPMaster || "wss://dev.fish.gmstd.dev/lobby-1989/";
          gfNetworkParser.instance.connectMaster(Config1989.instance.IPMaster, Config1989.instance.token4Master);
        };

        return MainController1989;
      }(gfMainController));
      MainController1989.instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MainController1998.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfMainController.ts', './gfNetworkGameEvent.ts', './loadConfigAsync.ts', './gfMainFSM.ts', './gfEventEmitter.ts', './DataStore1998.ts', './gfBaseEvents.ts', './gfNetworkParser.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _assertThisInitialized, cclegacy, warn, sys, director, game, gfMainController, gfNetworkGameEvent, loadConfigAsync, gfMainFSM, gfEventEmitter, DataStore1998, gfBaseEvents, gfNetworkParser;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      warn = module.warn;
      sys = module.sys;
      director = module.director;
      game = module.game;
    }, function (module) {
      gfMainController = module.default;
    }, function (module) {
      gfNetworkGameEvent = module.default;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      gfMainFSM = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      DataStore1998 = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfNetworkParser = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "860c9kQ7alFAYbGNDjdfitE", "MainController1998", undefined);

      var MainController1998 = exports('default', /*#__PURE__*/function (_gfMainController) {
        _inheritsLoose(MainController1998, _gfMainController);

        function MainController1998() {
          var _this;

          _this = _gfMainController.call(this) || this;
          MainController1998.instance = _assertThisInitialized(_this);
          return _this;
        } // NETWORK FUNCTION


        var _proto = MainController1998.prototype;

        _proto.onNetworkState = function onNetworkState(data) {
          if (!DataStore1998.instance || !gfEventEmitter.instance) {
            warn('game already destroyed or either not initialized');
          }

          var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
              LOGIN_IFRAME = _loadConfigAsync$getC.LOGIN_IFRAME;

          var selfInfo = DataStore1998.instance.getSelfInfo();
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.NETWORK_STATUS_INFO, data);

          switch (data.EventID) {
            case gfNetworkGameEvent.PINGPONG:
              gfEventEmitter.instance.emit(gfBaseEvents.COMMON.UPDATE_PING, data.EventData.data);
              break;

            case gfNetworkGameEvent.NETWORK_CONNECT:
              if (gfMainFSM.instance.isStateLoginGameRoom() || gfMainFSM.instance.isStateGameRoom()) {
                // Emitter.instance.emit(EventCode.POPUP.CLOSE_ALL);
                gfNetworkParser.instance.sendJoinDesk(selfInfo.DeskId);
              }

              break;

            case gfNetworkGameEvent.NETWORK_WAITING:
              gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHOW_WAITING);
              break;

            case gfNetworkGameEvent.NETWORK_ERROR:
              /** Show popup network poor* */
              gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_PROMPT, gfNetworkGameEvent.NETWORK_ERROR);
              break;

            case gfNetworkGameEvent.NETWORK_CLOSE:
              /** Show close socket hay làm gì đó* */
              break;

            case gfNetworkGameEvent.NETWORK_POOR:
              /** Show popup network poor* */
              gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHOW_WAITING);
              break;

            case gfNetworkGameEvent.NETWORK_DIE:
              /** Show popup refesh* */
              if (LOGIN_IFRAME) {
                gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_PROMPT, gfNetworkGameEvent.NETWORK_DIE);
              } else {
                this.handleBackGame();
              }

              break;

            case gfNetworkGameEvent.AUTHEN_FAIL:
              if (LOGIN_IFRAME) {
                gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_PROMPT, gfNetworkGameEvent.AUTHEN_FAIL);
              } else {
                this.handleBackGame();
              }

              break;

            case gfNetworkGameEvent.LOGIN_IN_OTHER_DEVICE:
              /** Show popup thiết bị khác* */
              if (LOGIN_IFRAME) {
                gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_PROMPT, gfNetworkGameEvent.LOGIN_IN_OTHER_DEVICE);
              } else {
                this.handleBackGame();
              }

              break;

            case gfNetworkGameEvent.NETWORK_RECONNECT:
              this.onReconnect();
              break;
          }
        };

        _proto.handleBackGame = function handleBackGame() {
          var _loadConfigAsync$getC2 = loadConfigAsync.getConfig(),
              LOBBY_SCENE_NAME = _loadConfigAsync$getC2.LOBBY_SCENE_NAME,
              IS_PRODUCTION = _loadConfigAsync$getC2.IS_PRODUCTION,
              LOGIN_SCENE_NAME = _loadConfigAsync$getC2.LOGIN_SCENE_NAME;

          if (sys.isNative && typeof globalThis.closeCreatorGame === 'function') {
            globalThis.closeCreatorGame();
          } else {
            if (IS_PRODUCTION) {
              director.preloadScene(LOBBY_SCENE_NAME, function () {
                director.loadScene(LOBBY_SCENE_NAME);
                gfEventEmitter.instance.emit(gfBaseEvents.COMMON.REFRESH_PAGE);
              });
            } else {
              var scene = director.getScene();
              var nodePersist = scene.getChildByName('OverlayPersistent');

              if (nodePersist) {
                game.removePersistRootNode(nodePersist);
              }

              director.preloadScene(LOGIN_SCENE_NAME, function () {
                director.loadScene(LOGIN_SCENE_NAME);
                gfEventEmitter.instance.emit(gfBaseEvents.COMMON.REFRESH_PAGE);
              });
            }
          }
        };

        return MainController1998;
      }(gfMainController));
      MainController1998.instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MapConfig.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "caab6Gh+JNLMZTfVVw67Hzw", "MapConfig", undefined);

      var MapConfig = exports('MapConfig', /*#__PURE__*/function () {
        //X: col, Y:row
        function MapConfig(config) {
          this.gridSizeX = void 0;
          this.gridSizeY = void 0;
          this.gridWidth = void 0;
          this.gridHeight = void 0;
          this.startX = void 0;
          this.startY = void 0;
          this.gridSize = void 0;
          this.mapData = null;
          var gridSizeX = config.gridSizeX,
              gridSizeY = config.gridSizeY,
              gridWidth = config.gridWidth,
              gridHeight = config.gridHeight,
              mapData = config.mapData;
          this.gridSizeX = gridSizeX;
          this.gridSizeY = gridSizeY;
          this.gridWidth = gridWidth;
          this.gridHeight = gridHeight;
          this.startX = (gridSizeY - gridSizeX) / 2 * (gridWidth / 2);
          this.startY = (gridSizeX + gridSizeY) / 2 * (gridHeight / 2);
          this.gridSize = Math.sqrt(Math.pow(this.gridWidth / 2, 2) + Math.pow(this.gridHeight / 2, 2));
          this.mapData = mapData;
        }

        var _proto = MapConfig.prototype;

        _proto.positionToGrid = function positionToGrid(x, y) {
          var X = Math.floor((this.startY - y) / this.gridHeight - (x - this.startX) / this.gridWidth);
          var Y = Math.floor((x - this.startX) / this.gridWidth + (this.startY - y) / this.gridHeight);
          return {
            X: X,
            Y: Y
          };
        };

        _proto.positionToGridFloat = function positionToGridFloat(x, y) {
          var X = (this.startY - y) / this.gridHeight - (x - this.startX) / this.gridWidth;
          var Y = (x - this.startX) / this.gridWidth + (this.startY - y) / this.gridHeight;
          return {
            X: X,
            Y: Y
          };
        };

        _proto.gridToPosition = function gridToPosition(X, Y) {
          var x = this.startX + (Y - X) * this.gridWidth / 2;
          var y = this.startY - (X + Y) * this.gridHeight / 2;
          return {
            x: x,
            y: y
          };
        };

        _proto.gridCenterToPosition = function gridCenterToPosition(X, Y) {
          var x = this.startX + (Y - X) * this.gridWidth / 2;
          var y = this.startY - (X + Y + 1) * this.gridHeight / 2;
          return {
            x: x,
            y: y
          };
        };

        _proto.gridIdToGrid = function gridIdToGrid(gridId) {
          var X = gridId % this.gridSizeX;
          var Y = Math.floor(gridId / this.gridSizeX);
          return {
            X: X,
            Y: Y
          };
        };

        _proto.getZAxis = function getZAxis(X, Y) {
          if (!this.mapData) return 0;
          var zPosition = 0;
          var zObjects = this.mapData.zObjects;

          for (var i = 0; i < zObjects.length; i++) {
            var zObject = zObjects[i];

            if (Y >= zObject.minCol && Y <= zObject.maxCol && X >= zObject.minRow && X <= zObject.maxRow) {
              if (zObject.axis == 0) {
                zPosition = zObject.from + (zObject.to - zObject.from) * ((Y - zObject.minCol) / (zObject.maxCol - zObject.minCol));
              } else {
                zPosition = zObject.from + (zObject.to - zObject.from) * ((X - zObject.minRow) / (zObject.maxRow - zObject.minRow));
              }

              break;
            }
          }

          return zPosition;
        };

        return MapConfig;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MapGenerator.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './MapConfig.ts', './utils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Camera, Graphics, Node, Vec3, UITransform, Label, Color, Component, MapConfig, setOpacity;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Camera = module.Camera;
      Graphics = module.Graphics;
      Node = module.Node;
      Vec3 = module.Vec3;
      UITransform = module.UITransform;
      Label = module.Label;
      Color = module.Color;
      Component = module.Component;
    }, function (module) {
      MapConfig = module.MapConfig;
    }, function (module) {
      setOpacity = module.setOpacity;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "afb1cgWctpIYpd2yCa7w6du", "MapGenerator", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ActionType;

      (function (ActionType) {
        ActionType[ActionType["NONE"] = 0] = "NONE";
        ActionType[ActionType["CREATE_PATH"] = 1] = "CREATE_PATH";
        ActionType[ActionType["CREATE_OBSTACLE"] = 2] = "CREATE_OBSTACLE";
        ActionType[ActionType["CREATE_MUMMY"] = 3] = "CREATE_MUMMY";
      })(ActionType || (ActionType = {}));

      var MapGenerator = exports('MapGenerator', (_dec = ccclass('MapGenerator'), _dec2 = property({
        type: Camera
      }), _dec3 = property(Graphics), _dec4 = property(Graphics), _dec5 = property(Graphics), _dec6 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MapGenerator, _Component);

        function MapGenerator() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "camera", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "gridGraphic", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "pathGraphic", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "pathLineGraphic", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labelHolder", _descriptor5, _assertThisInitialized(_this));

          _this.mapData = null;
          _this._mapConfig = null;
          _this._mapManager = null;
          _this._labels = {};
          _this._currentLabel = null;
          _this._allPaths = [];
          _this._currentPath = null;
          _this._action = ActionType.CREATE_PATH;
          return _this;
        }

        var _proto = MapGenerator.prototype;

        _proto.onLoad = function onLoad() {
          this._mapConfig = new MapConfig({
            gridSizeX: 44,
            gridSizeY: 44,
            gridWidth: 72,
            gridHeight: 36
          });
          this.node.on(Node.EventType.MOUSE_DOWN, this.onMouseDown, this, false);
          this.node.on(Node.EventType.MOUSE_MOVE, this.onMouseMove, this, false);
          window['test'] = this;
        };

        _proto.onMouseDown = function onMouseDown(ev) {
          var location = ev.getLocation(new Vec3());
          var worldPos = this.camera.screenToWorld(location, new Vec3());
          var localPos = this.node.getComponent(UITransform).convertToNodeSpaceAR(worldPos);

          var gridPos = this._mapConfig.positionToGrid(localPos.x, localPos.y);

          console.log(gridPos);

          switch (this._action) {
            case ActionType.CREATE_PATH:
              return this._genPath(gridPos);
          }
        };

        _proto._genPath = function _genPath(endPoint) {
          if (!this._currentPath) {
            this._currentPath = [];
            this.renderBlock(endPoint.X, endPoint.Y);

            this._currentPath.push(endPoint);

            return;
          }

          var currentPoint = this._currentPath[this._currentPath.length - 1];

          this._genRect(currentPoint, endPoint);

          console.log(this._currentPath);
        };

        _proto._addPoint = function _addPoint(point) {
          var currentPoint = this._currentPath[this._currentPath.length - 1];

          var label = this._createLabel(point.X, point.Y);

          this.renderBlock(point.X, point.Y);

          this._drawLine(currentPoint, point);

          this._currentPath.push(point);

          this.pathGraphic.node.addChild(label);
          label._uiProps.colorDirty = true;
          if (label) setOpacity(label, 255);
        };

        _proto._genRect = function _genRect(p1, p4) {
          var offset = this.randIntRange(-5, 5);
          var p2 = {
            X: p1.X,
            Y: p1.Y + offset
          };
          var p3 = {
            X: p4.X,
            Y: p1.Y + offset
          };

          this._addPoint(p2);

          this._addPoint(p3);

          this._addPoint(p4);
        };

        _proto._drawLine = function _drawLine(p1, p2) {
          var pos1 = this._mapConfig.gridCenterToPosition(p1.X, p1.Y);

          var pos2 = this._mapConfig.gridCenterToPosition(p2.X, p2.Y);

          this.pathGraphic.lineWidth = 2;
          this.pathGraphic.strokeColor.fromHEX('#00ffff');
          this.pathGraphic.moveTo(pos1.x, pos1.y);
          this.pathGraphic.lineTo(pos2.x, pos2.y);
          this.pathGraphic.stroke();
        };

        _proto.onMouseMove = function onMouseMove(ev) {
          if (this._currentLabel) setOpacity(this._currentLabel, 1);
          this._currentLabel = null;
          var location = ev.getLocation(new Vec3());
          var worldPos = this.camera.screenToWorld(location, new Vec3());
          var localPos = this.node.getComponent(UITransform).convertToNodeSpaceAR(worldPos);

          var _this$_mapConfig$posi = this._mapConfig.positionToGrid(localPos.x, localPos.y),
              X = _this$_mapConfig$posi.X,
              Y = _this$_mapConfig$posi.Y;

          this._currentLabel = this._labels[X + "-" + Y];
          if (this._currentLabel) setOpacity(this._currentLabel, 255);
        };

        _proto.addPath = function addPath() {
          this._allPaths.push(this._currentPath);
        };

        _proto.clear = function clear() {
          this._currentPath = null;
          this.pathGraphic.clear();
          this.pathGraphic.node.removeAllChildren();
        };

        _proto["export"] = function _export() {
          var dataStr = JSON.stringify(this._allPaths);
          var dataUri = 'data:application/json;charset=utf-8,' + encodeURIComponent(dataStr);
          var exportFileDefaultName = 'paths.json';
          var linkElement = document.createElement('a');
          linkElement.setAttribute('href', dataUri);
          linkElement.setAttribute('download', exportFileDefaultName);
          linkElement.click();
        };

        _proto.start = function start() {
          this._renderGrid();

          var _this$_mapConfig = this._mapConfig,
              gridSizeX = _this$_mapConfig.gridSizeX,
              gridSizeY = _this$_mapConfig.gridSizeY;

          for (var X = 0; X < gridSizeX; X++) {
            for (var Y = 0; Y < gridSizeY; Y++) {
              var labelNode = this._createLabel(X, Y);

              this._labels[X + "-" + Y] = labelNode;
            }
          }
        };

        _proto._createLabel = function _createLabel(X, Y) {
          var labelNode = new Node();
          this.labelHolder.addChild(labelNode);
          labelNode.active = true;
          labelNode._uiProps.colorDirty = true;
          var label = labelNode.addComponent(Label);
          label.string = X + "-" + Y;

          var pos = this._mapConfig.gridCenterToPosition(X, Y);

          labelNode.setPosition(pos.x, pos.y);
          label.fontSize = 16;
          setOpacity(labelNode, 1);
          return labelNode;
        };

        _proto.renderBlock = function renderBlock(X, Y) {
          this.pathGraphic.fillColor.fromHEX('#00ff00');

          var position = this._mapConfig.gridCenterToPosition(X, Y);

          var _this$_mapConfig2 = this._mapConfig,
              gridWidth = _this$_mapConfig2.gridWidth,
              gridHeight = _this$_mapConfig2.gridHeight;
          this.pathGraphic.moveTo(position.x - gridWidth / 2, position.y);
          this.pathGraphic.lineTo(position.x, position.y + gridHeight / 2);
          this.pathGraphic.lineTo(position.x + gridWidth / 2, position.y);
          this.pathGraphic.lineTo(position.x, position.y - gridHeight / 2);
          this.pathGraphic.stroke();
          this.pathGraphic.fill();
        };

        _proto._renderGrid = function _renderGrid() {
          var _this$_mapConfig3 = this._mapConfig,
              gridSizeX = _this$_mapConfig3.gridSizeX,
              gridSizeY = _this$_mapConfig3.gridSizeY,
              gridWidth = _this$_mapConfig3.gridWidth,
              gridHeight = _this$_mapConfig3.gridHeight,
              startX = _this$_mapConfig3.startX,
              startY = _this$_mapConfig3.startY;
          this.gridGraphic.clear();
          this.gridGraphic.lineWidth = 1;
          this.gridGraphic.strokeColor.fromHEX('#00ff00');
          this.gridGraphic.moveTo(0, 360);
          this.gridGraphic.lineTo(0, -360);
          this.gridGraphic.moveTo(-780, 0);
          this.gridGraphic.lineTo(780, 0);
          this.gridGraphic.stroke();
          this.gridGraphic.fillColor = new Color(180, 180, 180, 80);
          this.gridGraphic.fillRect(-780, -360, 1560, 720);
          this.gridGraphic.lineWidth = 1;
          this.gridGraphic.strokeColor.fromHEX('#ff0000');

          for (var col = 0; col <= gridSizeX; col++) {
            var _x = startX + col * gridWidth / 2;

            var _y = startY - col * gridHeight / 2;

            this.gridGraphic.moveTo(_x, _y);
            this.gridGraphic.lineTo(_x - gridWidth / 2 * gridSizeY, _y - gridHeight / 2 * gridSizeY);
          }

          for (var row = 0; row <= gridSizeY; row++) {
            var _x2 = startX - row * gridWidth / 2;

            var _y2 = startY - row * gridHeight / 2;

            this.gridGraphic.moveTo(_x2, _y2);
            this.gridGraphic.lineTo(_x2 + gridWidth / 2 * gridSizeX, _y2 - gridHeight / 2 * gridSizeX);
          }

          this.gridGraphic.stroke();
          this.gridGraphic.lineWidth = 2;
          this.gridGraphic.strokeColor.fromHEX('#00ff00');
          var x = startX + 22 * gridWidth / 2;
          var y = startY - 22 * gridHeight / 2;
          this.gridGraphic.moveTo(x, y);
          this.gridGraphic.lineTo(x - gridWidth / 2 * gridSizeY, y - gridHeight / 2 * gridSizeY);
          x = startX - 22 * gridWidth / 2;
          y = startY - 22 * gridHeight / 2;
          this.gridGraphic.moveTo(x, y);
          this.gridGraphic.lineTo(x + gridWidth / 2 * gridSizeX, y - gridHeight / 2 * gridSizeX);
          this.gridGraphic.stroke();
        };

        _proto.gridIdToGrid = function gridIdToGrid(gridId) {
          var X = gridId % 44;
          var Y = Math.floor(gridId / 44);
          return {
            X: X,
            Y: Y
          };
        };

        _proto.randomElement = function randomElement(arr) {
          return arr[Math.floor(Math.random() * arr.length)];
        };

        _proto.randIntRange = function randIntRange(min, max) {
          return min + Math.round(Math.random() * (max - min));
        };

        return MapGenerator;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "camera", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "gridGraphic", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "pathGraphic", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "pathLineGraphic", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "labelHolder", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MapManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Moving.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, JsonAsset, SpriteFrame, Sprite, Prefab, Node, input, Input, instantiate, Vec3, game, Component, Moving;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      JsonAsset = module.JsonAsset;
      SpriteFrame = module.SpriteFrame;
      Sprite = module.Sprite;
      Prefab = module.Prefab;
      Node = module.Node;
      input = module.input;
      Input = module.Input;
      instantiate = module.instantiate;
      Vec3 = module.Vec3;
      game = module.game;
      Component = module.Component;
    }, function (module) {
      Moving = module.Moving;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10;

      cclegacy._RF.push({}, "78c18IfTUtJ4bW0qS/lN6KT", "MapManager", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var EPSILON = 0.01;
      var MapManager = exports('MapManager', (_dec = ccclass('MapManager'), _dec2 = property({
        type: JsonAsset
      }), _dec3 = property({
        type: SpriteFrame
      }), _dec4 = property({
        type: Sprite
      }), _dec5 = property({
        type: SpriteFrame
      }), _dec6 = property({
        type: Prefab
      }), _dec7 = property({
        type: Node
      }), _dec8 = property({
        type: Number
      }), _dec9 = property({
        type: Number
      }), _dec10 = property({
        type: Number
      }), _dec11 = property({
        type: Number
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MapManager, _Component);

        function MapManager() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "mapData", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "mapBackground", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "background", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "mapObjects", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "objectPrefab", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "objectHolder", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "gridColumn", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "gridRow", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "gridWidth", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "gridHeight", _descriptor10, _assertThisInitialized(_this));

          _this._currentMapData = null;
          _this._startX = 0;
          _this._startY = 0;
          _this._mapIndex = 0;
          _this._selectedMummy = null;
          _this._objectIndex = [];
          return _this;
        }

        var _proto = MapManager.prototype;

        _proto.onLoad = function onLoad() {
          this.loadMap(0);
          this.node.on('REQUEST_POSITION', this._onDropMummy, this);
          this.node.on('MUMMY_SELECT', this._onMummySelect, this);
          input.on(Input.EventType.KEY_DOWN, this._onKeyDown, this);
          input.on(Input.EventType.KEY_UP, this._onKeyUp, this);
        };

        _proto._onKeyDown = function _onKeyDown(ev) {
          if (this._selectedMummy) {
            this._selectedMummy.emit('ON_KEY_DOWN', ev);
          }
        };

        _proto._onKeyUp = function _onKeyUp(ev) {
          if (this._selectedMummy) {
            this._selectedMummy.emit('ON_KEY_UP', ev);
          }
        };

        _proto.loadMap = function loadMap(index) {
          //config
          this._mapIndex = index;
          this._currentMapData = this.mapData[this._mapIndex].json;
          var mapSize = this._currentMapData.mapSize;
          this.gridWidth = mapSize.tilewidth;
          this.gridHeight = mapSize.tileheight;
          this.gridColumn = mapSize.width;
          this.gridRow = mapSize.height;
          this._startX = (this.gridRow - this.gridColumn) / 2 * this.gridWidth / 2;
          this._startY = (this.gridColumn + this.gridRow) / 2 * this.gridHeight / 2;

          this._loadMapBackground();

          this._generateObjects();
        };

        _proto._loadMapBackground = function _loadMapBackground() {
          this.background.spriteFrame = this.mapBackground[this._mapIndex];
        };

        _proto._generateObjects = function _generateObjects() {
          var _this2 = this;

          var objectList = Object.keys(this._currentMapData.objects);

          if (objectList.length >= 0) {
            objectList.forEach(function (key) {
              var oj = _this2._currentMapData.objects[key];
              var object = instantiate(_this2.objectPrefab);
              object.getComponent(Sprite).spriteFrame = _this2.getObjectFrame(oj.name);

              var position = _this2.gridToPosition(oj.row, oj.col);

              position.y += object.height / 2;
              object.parent = _this2.objectHolder;
              object.setPosition(new Vec3(position.x, position.y, 0));
              object.name = oj.name; //object.setSiblingIndex(debug[object.name].index);

              object.isMummy = false;
              object.isMapObject = true;
              object.zones = oj.zones;
              object.drawIndex = oj.drawIndex;
            });
          }
        };

        _proto.getObjectFrame = function getObjectFrame(name) {
          var frame = this.mapObjects.filter(function (it) {
            return it.name == name;
          })[0] || null;
          return frame;
        };

        _proto.getConfig = function getConfig() {
          return {
            gridColumn: this.gridColumn,
            gridRow: this.gridRow,
            gridWidth: this.gridWidth,
            gridHeight: this.gridHeight,
            startX: this._startX,
            startY: this._startY,
            mapData: this._currentMapData
          };
        };

        _proto.positionToGrid = function positionToGrid(_ref, floor) {
          var x = _ref.x,
              y = _ref.y;

          if (floor === void 0) {
            floor = false;
          }

          var col = (x - this._startX) / this.gridWidth + (this._startY - y) / this.gridHeight;
          var row = (this._startY - y) / this.gridHeight - (x - this._startX) / this.gridWidth;

          if (floor) {
            col = Math.floor(col);
            row = Math.floor(row);
          }

          return {
            col: col,
            row: row
          };
        };

        _proto.gridToPosition = function gridToPosition(row, col) {
          var x = this._startX + (col - row) * this.gridWidth / 2;
          var y = this._startY - (row + col) * this.gridHeight / 2;
          var index = Math.floor(row) * this._currentMapData.mapSize.width + Math.floor(col);
          var z = this._currentMapData.zIndex[index];
          return {
            x: x,
            y: y,
            z: z
          };
        };

        _proto.gridCenterToPosition = function gridCenterToPosition(row, col) {
          var x = this._startX + (col - row) * this.gridWidth / 2;
          var y = this._startY - (row + col + 1) * this.gridHeight / 2;
          var index = Math.floor(row) * this._currentMapData.mapSize.width + Math.floor(col);
          var z = -this._currentMapData.zIndex[index];
          return {
            x: x,
            y: y,
            z: z
          };
        };

        _proto.update = function update(dt) {
          this._sortObjects();
        };

        _proto.isWalkable = function isWalkable(row, col) {
          return this._currentMapData.collider[row * this._currentMapData.mapSize.width + col] === 0;
        };

        _proto._sortObjects = function _sortObjects() {
          var _this3 = this;

          this.objectHolder.children.sort(function (objectA, objectB) {
            var indexA = objectA.isMapObject ? objectA.drawIndex : _this3.getDrawIndex(objectA.position);
            var indexB = objectB.isMapObject ? objectB.drawIndex : _this3.getDrawIndex(objectB.position);
            var deltaY = objectB.position.y - objectA.position.y;

            if (indexA > indexB || (indexA == indexB || indexA == undefined || indexB == undefined) && deltaY > 0.05) {
              return 1;
            } else {
              return -1;
            }
          });
        };

        _proto.getDrawIndex = function getDrawIndex(position) {
          var _this$positionToGrid = this.positionToGrid(position),
              row = _this$positionToGrid.row,
              col = _this$positionToGrid.col;

          var index = Math.floor(row) * this._currentMapData.mapSize.width + Math.floor(col);
          return this._currentMapData.zones[index];
        };

        _proto._recheck = function _recheck() {
          for (var i = 0; i < this._objectIndex.length - 1; i++) {
            for (var j = i + 1; j < this._objectIndex.length; j++) {
              if (this._objectIndex[i].isMapObject && this._objectIndex[j].isMummy) {
                if (this._isMummyBack(this._objectIndex[j], this._objectIndex[i])) {
                  game.pause();
                }
              }
            }
          }
        };

        _proto._compareMummyVsMummy = function _compareMummyVsMummy(indexA, indexB) {
          var mummyA = this._objectIndex[indexA];
          var mummyB = this._objectIndex[indexB];
          var gridPosA = this.positionToGrid(mummyA.position);
          var gridPosB = this.positionToGrid(mummyB.position);
          var deltaCol = gridPosA.col - gridPosB.col;
          var deltaRow = gridPosA.row - gridPosB.row;

          if (gridPosA.col > gridPosB.col && gridPosA.row > gridPosB.row || gridPosA.col == gridPosB.col && deltaRow > EPSILON || gridPosA.row == gridPosB.row && deltaCol > EPSILON) {
            var tmp = this._objectIndex[indexA];
            this._objectIndex[indexA] = this._objectIndex[indexB];
            this._objectIndex[indexB] = tmp;
          }
        };

        _proto._compareMummyVsObject = function _compareMummyVsObject(indexA, indexB) {
          var mummyA = this._objectIndex[indexA];
          var object = this._objectIndex[indexB];

          var isMummyFront = this._isMummyFront(mummyA, object);

          if (isMummyFront) {
            var tmp = this._objectIndex[indexA];
            this._objectIndex[indexA] = this._objectIndex[indexB];
            this._objectIndex[indexB] = tmp;
          }
        };

        _proto._compareObjectVsMummy = function _compareObjectVsMummy(indexA, indexB) {
          var mummyA = this._objectIndex[indexB];
          var object = this._objectIndex[indexA];

          var isMummyBack = this._isMummyBack(mummyA, object);

          if (isMummyBack) {
            var tmp = this._objectIndex[indexA];
            this._objectIndex[indexA] = this._objectIndex[indexB];
            this._objectIndex[indexB] = tmp;
          }
        };

        _proto._isMummyBack = function _isMummyBack(mummyA, object) {
          if (!object.zones) {
            return false;
          }

          var gridPos = this.positionToGrid(mummyA.position);

          for (var i = 0; i < object.zones.length; i++) {
            var zone = object.zones[i];

            if (gridPos.row >= zone.minRow && gridPos.col >= zone.minCol && gridPos.row <= zone.maxRow && gridPos.col <= zone.maxCol) {
              return true;
            }
          }

          return false;
        };

        _proto._isMummyFront = function _isMummyFront(mummyA, object) {
          if (!object.zones || this._isMummyBack(mummyA, object)) {
            return false;
          }

          var gridPos = this.positionToGrid(mummyA.position);

          for (var i = 0; i < object.zones.length; i++) {
            var zone = object.zones[i];

            if (gridPos.row > zone.maxRow && gridPos.col >= zone.minCol && gridPos.col <= zone.maxCol || gridPos.col > zone.maxCol && gridPos.row >= zone.minRow && gridPos.row <= zone.maxRow) {
              return true;
            }
          }

          return false;
        };

        _proto._onDropMummy = function _onDropMummy(ev) {
          var targetGrid = this.positionToGrid(ev.target.position, true);

          if (this.isWalkable(targetGrid.row, targetGrid.col)) {
            ev.target.getComponent(Moving).setPosition(this.gridCenterToPosition(targetGrid.row, targetGrid.col));
          } else {
            ev.target.setPosition(ev.startPosition);
          }
        };

        _proto._onMummySelect = function _onMummySelect(ev) {
          if (this._selectedMummy && this._selectedMummy != ev.target) {
            this._selectedMummy.emit('DESELECT');
          }

          this._selectedMummy = ev.target;
        };

        _proto.getSelectedMummy = function getSelectedMummy() {
          return this._selectedMummy;
        };

        return MapManager;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "mapData", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "mapBackground", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "background", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "mapObjects", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "objectPrefab", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "objectHolder", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "gridColumn", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 10;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "gridRow", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 10;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "gridWidth", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 30;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "gridHeight", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MapManager1989.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfEventEmitter.ts', './EventsCode1989.ts', './gfUtilities.ts', './MapConfig.ts', './DataStore1989.ts', './Mummy1989.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _inheritsLoose, _assertThisInitialized, cclegacy, _decorator, JsonAsset, Prefab, Node, instantiate, Collider2D, UITransform, Component, gfEventEmitter, EventsCode1989, registerEvent, removeEvents, MapConfig, DataStore1989, Mummy1989;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      JsonAsset = module.JsonAsset;
      Prefab = module.Prefab;
      Node = module.Node;
      instantiate = module.instantiate;
      Collider2D = module.Collider2D;
      UITransform = module.UITransform;
      Component = module.Component;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      EventsCode1989 = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      MapConfig = module.MapConfig;
    }, function (module) {
      DataStore1989 = module.default;
    }, function (module) {
      Mummy1989 = module.Mummy1989;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _dec5, _dec6, _dec7, _class4, _class5, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "dd715W7JnZEb4sY+8MLEpwh", "MapManager1989", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var CustomMapData1989 = exports('CustomMapData1989', (_dec = ccclass('CustomMapData1989'), _dec2 = property(), _dec3 = property({
        type: JsonAsset
      }), _dec4 = property(Prefab), _dec(_class = (_class2 = function CustomMapData1989() {
        _initializerDefineProperty(this, "mapID", _descriptor, this);

        _initializerDefineProperty(this, "mapData", _descriptor2, this);

        _initializerDefineProperty(this, "mapPrefab", _descriptor3, this);
      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "mapID", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "mapData", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "mapPrefab", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      var MapManager1989 = exports('MapManager1989', (_dec5 = ccclass('MapManager1989'), _dec6 = property({
        type: CustomMapData1989
      }), _dec7 = property(Node), _dec5(_class4 = (_class5 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MapManager1989, _Component);

        function MapManager1989() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "listMap", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "fishLayer", _descriptor5, _assertThisInitialized(_this));

          _this._mapConfig = null;
          _this._currentMapID = 0;
          _this._currentMapPrefab = null;
          _this.obstacles = [];
          _this.backGround = null;
          return _this;
        }

        var _proto = MapManager1989.prototype;

        _proto.onLoad = function onLoad() {
          this.initEvents();
          this.loadMap(1);
        };

        _proto.initEvents = function initEvents() {
          registerEvent(EventsCode1989.GAME_LAYER.UPDATE_ROOM_DATA, this.onInitBackground, this);
          registerEvent(EventsCode1989.GAME_LAYER.GAME_CHANGE_ROUND, this.onChangeRound, this);
        };

        _proto.onInitBackground = function onInitBackground(data) {
          var backgroundID = data.SceneKind;
          if (this._currentMapID == backgroundID) return;
          this._currentMapID = backgroundID;
          gfEventEmitter.instance.emit(EventsCode1989.GAME_LAYER.INIT_BUBBLE, backgroundID);
        };

        _proto.onChangeRound = function onChangeRound(data) {};

        _proto.onLoadMapClick = function onLoadMapClick(event, value) {
          this.loadMap(value);
          gfEventEmitter.instance.emit(EventsCode1989.GAME_LAYER.CHANGE_BACKGROUND);
        };

        _proto.loadMap = function loadMap(index) {
          this.resetMap();
          this._currentMapID = index;
          var map = this.listMap[this._currentMapID];
          var mapData = map.mapData.json;
          var _mapData$mapSize = mapData['mapSize'],
              width = _mapData$mapSize.width,
              height = _mapData$mapSize.height,
              tilewidth = _mapData$mapSize.tilewidth,
              tileheight = _mapData$mapSize.tileheight;
          this._mapConfig = new MapConfig({
            gridSizeX: width,
            gridSizeY: height,
            gridWidth: tilewidth,
            gridHeight: tileheight,
            mapData: mapData
          });
          this._currentMapPrefab = map.mapPrefab;
          this.loadBackground();
          this.generateObjects();
        };

        _proto.loadBackground = function loadBackground() {
          this.backGround = instantiate(this._currentMapPrefab);
          this.backGround.parent = this.node;
          this.backGround.active = true;
        };

        _proto.generateObjects = function generateObjects() {
          var _this2 = this;

          var colliders = this.backGround.getComponentsInChildren(Collider2D);
          colliders.forEach(function (collider) {
            collider.enabled = true;
            collider.group = 2;
            collider["isWall"] = true;
          });
          this.backGround.getChildByName("Objects").children.forEach(function (obstacle) {
            _this2.obstacles.push(obstacle);
          });
          this.obstacles.forEach(function (obstacle) {
            var oj = _this2._mapConfig.mapData.objects[obstacle.name];
            obstacle.position = _this2.fishLayer.getComponent(UITransform).convertToNodeSpaceAR(obstacle.worldPosition);
            obstacle.parent = _this2.fishLayer;
            obstacle.isMapObject = true;
            obstacle.isMummy = false;
            if (!oj) return;
            obstacle.zones = oj.zones;
            obstacle.drawIndex = oj.drawIndex;
          });
        };

        _proto.update = function update() {
          this._sortObjects();
        };

        _proto._sortObjects = function _sortObjects() {
          var _this3 = this; // this.fishLayer.children.sort((a, b) => { return b.position.y - a.position.y })


          this.fishLayer.children.sort(function (objectA, objectB) {
            var indexA = objectA.isMapObject ? objectA.drawIndex : _this3._getDrawIndex(objectA.position);
            var indexB = objectB.isMapObject ? objectB.drawIndex : _this3._getDrawIndex(objectB.position);
            var deltaY = objectB.position.y - objectA.position.y;
            var selfInfo = DataStore1989.instance.getSelfInfo();

            if (selfInfo && selfInfo.LockFishID) {
              var lockFish = selfInfo.LockFish;

              if (objectA.getComponent(Mummy1989) == lockFish) {
                return 1;
              } else if (objectB.getComponent(Mummy1989) == lockFish) {
                return -1;
              }
            }

            if (indexA > indexB || (indexA == indexB || indexA == undefined || indexB == undefined) && deltaY > 0.05) {
              return 1;
            } else {
              return -1;
            }
          });
          this.fishLayer.children.forEach(function (item, index) {
            item.sortIndex = index;
          });
        };

        _proto._getDrawIndex = function _getDrawIndex(position) {
          var originPos = {
            x: -641,
            y: -360
          };

          var _this$_mapConfig$posi = this._mapConfig.positionToGrid(position.x + originPos.x, position.y + originPos.y),
              X = _this$_mapConfig$posi.X,
              Y = _this$_mapConfig$posi.Y;

          var index = X * this._mapConfig.mapData.mapSize.width + Y;
          return this._mapConfig.mapData.zones[index];
        };

        _proto._getMapConfig = function _getMapConfig() {
          return this._mapConfig;
        };

        _proto.resetMap = function resetMap() {
          this.backGround && this.backGround.destroy();

          while (this.obstacles.length > 0) {
            var obstacle = this.obstacles.pop();
            obstacle.destroy();
          }

          this.obstacles = [];
          this.backGround = null;
          this._currentMapID = 0;
          this._mapConfig = null;
          this._currentMapPrefab = null;
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return MapManager1989;
      }(Component), (_descriptor4 = _applyDecoratedDescriptor(_class5.prototype, "listMap", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class5.prototype, "fishLayer", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class5)) || _class4));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MapView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Map.mjs_cjs=&original=.js', './Map.js'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Color, Node, Camera, Graphics, JsonAsset, Label, Vec3, UITransform, tween, Component, _cjsExports;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Color = module.Color;
      Node = module.Node;
      Camera = module.Camera;
      Graphics = module.Graphics;
      JsonAsset = module.JsonAsset;
      Label = module.Label;
      Vec3 = module.Vec3;
      UITransform = module.UITransform;
      tween = module.tween;
      Component = module.Component;
    }, null, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;

      cclegacy._RF.push({}, "225877gc1tOx4tvhlJyiHvN", "MapView", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Map = _cjsExports.Map;
      var ActionType;

      (function (ActionType) {
        ActionType[ActionType["NONE"] = 0] = "NONE";
        ActionType[ActionType["CREATE_OBSTACLE"] = 1] = "CREATE_OBSTACLE";
        ActionType[ActionType["CREATE_SPAWNER"] = 2] = "CREATE_SPAWNER";
        ActionType[ActionType["ADD_STOP_POINT"] = 3] = "ADD_STOP_POINT";
        ActionType[ActionType["GEN_PATH"] = 4] = "GEN_PATH";
      })(ActionType || (ActionType = {}));

      var OPACITY = 50;
      var COLOR = {
        OBSTACLE: new Color(255, 0, 0, OPACITY),
        SPAWNER: new Color(0, 0, 255, OPACITY),
        STOP_POINT: new Color(255, 255, 0, OPACITY)
      };
      var MapView = exports('MapView', (_dec = ccclass('MapView'), _dec2 = property(Node), _dec3 = property({
        type: Camera
      }), _dec4 = property(Graphics), _dec5 = property(Graphics), _dec6 = property(Graphics), _dec7 = property(Node), _dec8 = property(JsonAsset), _dec9 = property(JsonAsset), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MapView, _Component);

        function MapView() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "eventManager", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "camera", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "gridGraphic", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "pathGraphic", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "obstacleGraphics", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labelHolder", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "mapConfigs", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "fishInfo", _descriptor8, _assertThisInitialized(_this));

          _this._hoverLabel = null;
          _this.mapData = null;
          _this._map = null;
          _this._mapConfig = null;
          _this._labels = {};
          _this._currentLabel = null;
          _this._allPaths = [];
          _this._action = ActionType.NONE;
          _this._spawnerIds = [];
          _this._fishInfo = null;
          _this._p1 = null;
          _this._p2 = null;
          _this._points = [];
          _this.isShowGraphics = true;
          _this._tweenCreateFishes = null;
          return _this;
        }

        var _proto = MapView.prototype;

        _proto.onLoad = function onLoad() {
          var mapConfig = {
            gridSizeX: 42,
            gridSizeY: 42,
            gridWidth: 72,
            gridHeight: 36
          };
          if (this.mapConfigs) mapConfig = this.mapConfigs[1].json;
          if (this.fishInfo) this._fishInfo = this.fishInfo.json;
          this._map = new Map(mapConfig, this._fishInfo);
          this._hoverLabel = this._createLabel(0, 0);
          this.node.on(Node.EventType.MOUSE_DOWN, this.onMouseDown, this, false);
          this.node.on(Node.EventType.MOUSE_MOVE, this.onMouseMove, this, false);
          window['test'] = this; // map

          this.eventManager.on("CHANGE_MAP", this.changeMap, this);
          this.eventManager.on("ADD_OBSTACLE", this.addObstacles, this);
          this.eventManager.on("ADD_SPAWNER", this.addSpawner, this);
          this.eventManager.on("ADD_STOP_POINTS", this.addStopPoint, this);
          this.eventManager.on("CLEAR_MAP", this.clearMap, this);
          this.eventManager.on("EXPORT_MAP", this.exportMap, this); // fish

          this.eventManager.on("CREATE_FISHES", this.genFishes, this);
          this.eventManager.on("CLEAR_FISHES", this.clearFishes, this); // view

          this.eventManager.on("RENDER_BLOCK", this.renderBlock, this);
          this.eventManager.on("DRAW_LINE", this.drawLine, this);
          this.eventManager.on("GEN_PATH", this.genPath, this);
          this.eventManager.on("CLEAR_PATH", this.clearPath, this);
        };

        _proto.start = function start() {
          this._renderGrid();

          this.eventManager.emit("SET_MAP", this._map);
        };

        _proto.changeMap = function changeMap(id) {
          this.clearMap();
          var mapConfig = this.mapConfigs[id - 1].json;
          this._map = new Map(mapConfig, this._fishInfo);
          this.eventManager.emit("SET_MAP", this._map);

          this._renderGrid();
        };

        _proto.clearMap = function clearMap() {
          this._map.clear();

          this.obstacleGraphics.clear();
        };

        _proto._renderGrid = function _renderGrid() {
          this._mapConfig = this._map.getConfig();
          var _this$_mapConfig = this._mapConfig,
              obstacles = _this$_mapConfig.obstacles,
              spawners = _this$_mapConfig.spawners,
              stopPoints = _this$_mapConfig.stopPoints;
          this.gridGraphic.clear();

          this._drawViewPort(1560, 720);

          this._drawGridLines();

          this._drawObstacles(obstacles);

          this._drawSpawner(spawners);

          this._drawStopPoints(stopPoints);

          this._action = ActionType.NONE;
        };

        _proto._drawViewPort = function _drawViewPort(screenWidth, screenHeight) {
          this.gridGraphic.lineWidth = 2;
          this.gridGraphic.strokeColor.fromHEX('#00ff00');
          this.gridGraphic.rect(-screenWidth / 2, -screenHeight / 2, screenWidth, screenHeight);
          this.gridGraphic.stroke();
        };

        _proto._drawGridLines = function _drawGridLines() {
          var _this$_mapConfig2 = this._mapConfig,
              gridSizeX = _this$_mapConfig2.gridSizeX,
              gridSizeY = _this$_mapConfig2.gridSizeY,
              gridWidth = _this$_mapConfig2.gridWidth,
              gridHeight = _this$_mapConfig2.gridHeight,
              startX = _this$_mapConfig2.startX,
              startY = _this$_mapConfig2.startY; // gridSizeX /= 3, gridSizeY /= 3, gridWidth *= 3, gridHeight *= 3;

          this.gridGraphic.lineWidth = 1;
          this.gridGraphic.strokeColor.fromHEX('#ffffff');

          for (var col = 0; col <= gridSizeX; col++) {
            var x = startX + col * gridWidth / 2;
            var y = startY - col * gridHeight / 2;
            this.gridGraphic.moveTo(x, y);
            this.gridGraphic.lineTo(x - gridWidth / 2 * gridSizeY, y - gridHeight / 2 * gridSizeY);
          }

          for (var row = 0; row <= gridSizeY; row++) {
            var _x = startX - row * gridWidth / 2;

            var _y = startY - row * gridHeight / 2;

            this.gridGraphic.moveTo(_x, _y);
            this.gridGraphic.lineTo(_x + gridWidth / 2 * gridSizeX, _y - gridHeight / 2 * gridSizeX);
          }

          this.gridGraphic.stroke();
        };

        _proto._drawObstacles = function _drawObstacles(obstacles) {
          if (!obstacles) return;
          this._action = ActionType.CREATE_OBSTACLE;

          for (var id in obstacles) {
            var _this$_map$idToGrid = this._map.idToGrid(id),
                X = _this$_map$idToGrid.X,
                Y = _this$_map$idToGrid.Y;

            this.renderBlock(X, Y);
          }
        };

        _proto._drawSpawner = function _drawSpawner(spawners) {
          var _this2 = this;

          if (!spawners) return;
          this._action = ActionType.CREATE_SPAWNER;
          Object.keys(spawners).forEach(function (id) {
            var _this2$_map$idToGrid = _this2._map.idToGrid(id),
                X = _this2$_map$idToGrid.X,
                Y = _this2$_map$idToGrid.Y;

            for (var x = X - 1; x <= X + 1; x++) {
              for (var y = Y - 1; y <= Y + 1; y++) {
                _this2.renderBlock(x, y);
              }
            }
          });
        };

        _proto._drawStopPoints = function _drawStopPoints(stopPoints) {
          var _this3 = this;

          if (!stopPoints) return;
          this._action = ActionType.ADD_STOP_POINT;
          stopPoints.forEach(function (id) {
            var _this3$_map$idToGrid = _this3._map.idToGrid(id),
                X = _this3$_map$idToGrid.X,
                Y = _this3$_map$idToGrid.Y;

            for (var x = X - 1; x <= X + 1; x++) {
              for (var y = Y - 1; y <= Y + 1; y++) {
                _this3.renderBlock(x, y);
              }
            }
          });
        };

        _proto._createLabel = function _createLabel(X, Y) {
          var labelNode = new Node();
          this.labelHolder.addChild(labelNode);
          labelNode.active = true;
          labelNode._uiProps.colorDirty = true;
          var label = labelNode.addComponent(Label);
          label.string = X + "-" + Y;

          var pos = this._map.gridCenterToPosition(X, Y);

          labelNode.setPosition(pos.x, pos.y);
          label.fontSize = 16;
          label.color = new Color(255, 255, 255, 255);
          return label;
        };

        _proto.onMouseMove = function onMouseMove(ev) {
          var location = ev.getLocation(new Vec3());
          var worldPos = this.camera.screenToWorld(location, new Vec3());
          var localPos = this.node.getComponent(UITransform).convertToNodeSpaceAR(worldPos);

          var _this$_map$positionTo = this._map.positionToGrid(localPos.x, localPos.y),
              X = _this$_map$positionTo.X,
              Y = _this$_map$positionTo.Y;

          if (X < 0 || Y < 0 || X > 30 || Y > 30) return;
          this._hoverLabel.string = X + "-" + Y;

          var pos = this._map.gridCenterToPosition(X, Y);

          this._hoverLabel.node.setPosition(pos.x, pos.y);
        };

        _proto.onMouseDown = function onMouseDown(ev) {
          var location = ev.getLocation(new Vec3());
          var worldPos = this.camera.screenToWorld(location, new Vec3());
          var localPos = this.node.getComponent(UITransform).convertToNodeSpaceAR(worldPos);

          var gridPos = this._map.positionToGrid(localPos.x, localPos.y);

          switch (this._action) {
            case ActionType.NONE:
              return;

            case ActionType.CREATE_OBSTACLE:
              return this._addObstacles(gridPos);

            case ActionType.CREATE_SPAWNER:
              return this._addSpawner(gridPos);

            case ActionType.ADD_STOP_POINT:
              return this._addStopPoint(gridPos);

            case ActionType.GEN_PATH:
              return this._genPath(gridPos);
          }
        };

        _proto._addLabel = function _addLabel(X, Y) {
          var label = this._createLabel(X, Y);

          this.pathGraphic.node.addChild(label.node);
          label.node._uiProps.colorDirty = true;
        };

        _proto.renderBlock = function renderBlock(gridOrX, Y) {
          if (!this.isShowGraphics) return;
          var X = gridOrX;

          if (typeof gridOrX === "object") {
            X = gridOrX.X;
            Y = gridOrX.Y;
          }

          var graphics, color;

          if (this._action === ActionType.CREATE_OBSTACLE) {
            graphics = this.obstacleGraphics;
            color = COLOR.OBSTACLE;
          } else if (this._action === ActionType.CREATE_SPAWNER) {
            graphics = this.obstacleGraphics;
            color = COLOR.SPAWNER;
          } else if (this._action === ActionType.ADD_STOP_POINT) {
            graphics = this.obstacleGraphics;
            color = COLOR.STOP_POINT;
          } else {
            graphics = this.pathGraphic;
            color = new Color(0, 255, 0, OPACITY);
          }

          graphics.fillColor = color;

          var position = this._map.gridCenterToPosition(X, Y);

          var _this$_map = this._map,
              gridWidth = _this$_map.gridWidth,
              gridHeight = _this$_map.gridHeight;
          graphics.moveTo(position.x - gridWidth / 2, position.y);
          graphics.lineTo(position.x, position.y + gridHeight / 2);
          graphics.lineTo(position.x + gridWidth / 2, position.y);
          graphics.lineTo(position.x, position.y - gridHeight / 2);
          graphics.fill();
        };

        _proto.drawLine = function drawLine(p1, p2, lineWidth, color) {
          if (lineWidth === void 0) {
            lineWidth = 2;
          }

          if (color === void 0) {
            color = new Color(0, 255, 255, 20);
          }

          if (!this.isShowGraphics) return;
          this.pathGraphic.lineWidth = lineWidth;
          this.pathGraphic.strokeColor = color;

          var pos1 = this._map.gridCenterToPosition(p1.X, p1.Y);

          var pos2 = this._map.gridCenterToPosition(p2.X, p2.Y);

          this.pathGraphic.moveTo(pos1.x, pos1.y);
          this.pathGraphic.lineTo(pos2.x, pos2.y);
          this.pathGraphic.stroke();
        };

        _proto._addObstacles = function _addObstacles(grid) {
          var gridId = this._map.gridToId(grid);

          this._map.addObstacle(gridId);

          this.renderBlock(grid.X, grid.Y);

          var label = this._createLabel(grid.X, grid.Y);

          this.obstacleGraphics.node.addChild(label.node);
          label.node._uiProps.colorDirty = true;
        };

        _proto._addSpawner = function _addSpawner(grid) {
          var gridId = this._map.gridToId(grid);

          this._map.addSpawner(gridId);

          this.renderBlock(grid.X, grid.Y);

          var label = this._createLabel(grid.X, grid.Y);

          this.obstacleGraphics.node.addChild(label.node);
          label.node._uiProps.colorDirty = true;
        };

        _proto._addStopPoint = function _addStopPoint(grid) {
          var gridId = this._map.gridToId(grid);

          this._map.addStopPoint(gridId);

          this.renderBlock(grid.X, grid.Y);
        };

        _proto.addObstacles = function addObstacles() {
          this._action = ActionType.CREATE_OBSTACLE;
        };

        _proto.addSpawner = function addSpawner() {
          this._action = ActionType.CREATE_SPAWNER;
        };

        _proto.addStopPoint = function addStopPoint() {
          this._action = ActionType.ADD_STOP_POINT;
        };

        _proto.genFishes = function genFishes() {
          var _this4 = this;

          this._action = ActionType.GEN_PATH;
          if (this._tweenCreateFishes) return;
          this._tweenCreateFishes = tween(this.node).call(function () {
            var fishes = _this4._map.createFishes();

            fishes.forEach(function (fishData) {
              if (!fishData) return console.error("invalid fish data");

              _this4.eventManager.emit("NEW_FISH", fishData);

              _this4.drawPath(fishData.Position);
            });
          }).delay(3).union().repeatForever().start();
        };

        _proto.clearFishes = function clearFishes() {
          this._tweenCreateFishes && this._tweenCreateFishes.stop();
          this._tweenCreateFishes = null;
        };

        _proto.drawPath = function drawPath(Position) {
          var _this5 = this;

          var path = Position.map(function (id) {
            return _this5._map.idToGrid(id);
          });

          this._allPaths.push(path);

          this.renderBlock(path[0].X, path[0].Y);
          this.renderBlock(path[path.length - 1].X, path[path.length - 1].Y);

          for (var index = 1; index < path.length; index++) {
            var prev = path[index - 1];
            var current = path[index];
            this.drawLine(prev, current, 4);
          }
        };

        _proto.clearPath = function clearPath() {
          this.pathGraphic.clear();
          this.pathGraphic.node.removeAllChildren();
        };

        _proto.exportMap = function exportMap() {
          var config = this._map.getConfig();

          var dataStr = JSON.stringify(config);
          var dataUri = 'data:application/json;charset=utf-8,' + encodeURIComponent(dataStr);
          var exportFileDefaultName = 'mapConfig.json';
          var linkElement = document.createElement('a');
          linkElement.setAttribute('href', dataUri);
          linkElement.setAttribute('download', exportFileDefaultName);
          linkElement.click();
        };

        _proto.genPath = function genPath() {
          this._action = ActionType.GEN_PATH;
          this._p1 = null;
          this._p2 = null;
          this._points = [];
        };

        _proto._genPath2 = function _genPath2(point) {
          console.error(point);
          if (point.X % 3 !== 1 || point.Y % 3 !== 1) return;

          if (this._p1 === null) {
            this._p1 = point;
            this.renderBlock(point.X, point.Y);
            return;
          } else {
            this._p2 = point;
            this.renderBlock(point.X, point.Y);

            var path = this._map.getRandomPath(this._p1, this._p2);

            if (path) {
              this.clearPath();
              this.drawPath(path);
            }

            this._p1 = null;
            this._p2 = null;
          }
        };

        _proto._genPath = function _genPath(point) {
          if (point.X % 3 !== 1 || point.Y % 3 !== 1) return;

          if (this._points.length === 0) {
            this.clearPath();

            this._points.push(point);

            this.renderBlock(point.X, point.Y);
            return;
          }

          this.renderBlock(point.X, point.Y);
          var p1 = this._points[this._points.length - 1];
          var p2 = point;

          var fishData = this._map.getTestFish(p1, p2);

          if (fishData) {
            this.eventManager.emit("NEW_FISH", fishData);
            this.drawPath(fishData.Position);

            this._points.push(point);
          } else {
            debugger;
          }
        };

        return MapView;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "eventManager", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "camera", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "gridGraphic", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "pathGraphic", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "obstacleGraphics", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "labelHolder", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "mapConfigs", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "fishInfo", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/md5.ts", ['cc', './crypto-core.ts'], function () {
  'use strict';

  var cclegacy, CryptoJS;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      CryptoJS = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "81536ybHJVDSYQVBRQE319w", "md5", undefined);

      var C = CryptoJS;
      var C_lib = C.lib;
      var WordArray = C_lib.WordArray;
      var Hasher = C_lib.Hasher;
      var C_algo = C.algo; // Constants table

      var T = []; // Compute constants

      (function () {
        for (var i = 0; i < 64; i++) {
          T[i] = Math.abs(Math.sin(i + 1)) * 0x100000000 | 0;
        }
      })();
      /**
       * MD5 hash algorithm.
       */


      var MD5 = C_algo.MD5 = Hasher.extend({
        _doReset: function _doReset() {
          this._hash = new WordArray.init([0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476]);
        },
        _doProcessBlock: function _doProcessBlock(M, offset) {
          // Swap endian
          for (var i = 0; i < 16; i++) {
            // Shortcuts
            var offset_i = offset + i;
            var M_offset_i = M[offset_i];
            M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 0x00ff00ff | (M_offset_i << 24 | M_offset_i >>> 8) & 0xff00ff00;
          } // Shortcuts


          var H = this._hash.words;
          var M_offset_0 = M[offset + 0];
          var M_offset_1 = M[offset + 1];
          var M_offset_2 = M[offset + 2];
          var M_offset_3 = M[offset + 3];
          var M_offset_4 = M[offset + 4];
          var M_offset_5 = M[offset + 5];
          var M_offset_6 = M[offset + 6];
          var M_offset_7 = M[offset + 7];
          var M_offset_8 = M[offset + 8];
          var M_offset_9 = M[offset + 9];
          var M_offset_10 = M[offset + 10];
          var M_offset_11 = M[offset + 11];
          var M_offset_12 = M[offset + 12];
          var M_offset_13 = M[offset + 13];
          var M_offset_14 = M[offset + 14];
          var M_offset_15 = M[offset + 15]; // Working varialbes

          var a = H[0];
          var b = H[1];
          var c = H[2];
          var d = H[3]; // Computation

          a = FF(a, b, c, d, M_offset_0, 7, T[0]);
          d = FF(d, a, b, c, M_offset_1, 12, T[1]);
          c = FF(c, d, a, b, M_offset_2, 17, T[2]);
          b = FF(b, c, d, a, M_offset_3, 22, T[3]);
          a = FF(a, b, c, d, M_offset_4, 7, T[4]);
          d = FF(d, a, b, c, M_offset_5, 12, T[5]);
          c = FF(c, d, a, b, M_offset_6, 17, T[6]);
          b = FF(b, c, d, a, M_offset_7, 22, T[7]);
          a = FF(a, b, c, d, M_offset_8, 7, T[8]);
          d = FF(d, a, b, c, M_offset_9, 12, T[9]);
          c = FF(c, d, a, b, M_offset_10, 17, T[10]);
          b = FF(b, c, d, a, M_offset_11, 22, T[11]);
          a = FF(a, b, c, d, M_offset_12, 7, T[12]);
          d = FF(d, a, b, c, M_offset_13, 12, T[13]);
          c = FF(c, d, a, b, M_offset_14, 17, T[14]);
          b = FF(b, c, d, a, M_offset_15, 22, T[15]);
          a = GG(a, b, c, d, M_offset_1, 5, T[16]);
          d = GG(d, a, b, c, M_offset_6, 9, T[17]);
          c = GG(c, d, a, b, M_offset_11, 14, T[18]);
          b = GG(b, c, d, a, M_offset_0, 20, T[19]);
          a = GG(a, b, c, d, M_offset_5, 5, T[20]);
          d = GG(d, a, b, c, M_offset_10, 9, T[21]);
          c = GG(c, d, a, b, M_offset_15, 14, T[22]);
          b = GG(b, c, d, a, M_offset_4, 20, T[23]);
          a = GG(a, b, c, d, M_offset_9, 5, T[24]);
          d = GG(d, a, b, c, M_offset_14, 9, T[25]);
          c = GG(c, d, a, b, M_offset_3, 14, T[26]);
          b = GG(b, c, d, a, M_offset_8, 20, T[27]);
          a = GG(a, b, c, d, M_offset_13, 5, T[28]);
          d = GG(d, a, b, c, M_offset_2, 9, T[29]);
          c = GG(c, d, a, b, M_offset_7, 14, T[30]);
          b = GG(b, c, d, a, M_offset_12, 20, T[31]);
          a = HH(a, b, c, d, M_offset_5, 4, T[32]);
          d = HH(d, a, b, c, M_offset_8, 11, T[33]);
          c = HH(c, d, a, b, M_offset_11, 16, T[34]);
          b = HH(b, c, d, a, M_offset_14, 23, T[35]);
          a = HH(a, b, c, d, M_offset_1, 4, T[36]);
          d = HH(d, a, b, c, M_offset_4, 11, T[37]);
          c = HH(c, d, a, b, M_offset_7, 16, T[38]);
          b = HH(b, c, d, a, M_offset_10, 23, T[39]);
          a = HH(a, b, c, d, M_offset_13, 4, T[40]);
          d = HH(d, a, b, c, M_offset_0, 11, T[41]);
          c = HH(c, d, a, b, M_offset_3, 16, T[42]);
          b = HH(b, c, d, a, M_offset_6, 23, T[43]);
          a = HH(a, b, c, d, M_offset_9, 4, T[44]);
          d = HH(d, a, b, c, M_offset_12, 11, T[45]);
          c = HH(c, d, a, b, M_offset_15, 16, T[46]);
          b = HH(b, c, d, a, M_offset_2, 23, T[47]);
          a = II(a, b, c, d, M_offset_0, 6, T[48]);
          d = II(d, a, b, c, M_offset_7, 10, T[49]);
          c = II(c, d, a, b, M_offset_14, 15, T[50]);
          b = II(b, c, d, a, M_offset_5, 21, T[51]);
          a = II(a, b, c, d, M_offset_12, 6, T[52]);
          d = II(d, a, b, c, M_offset_3, 10, T[53]);
          c = II(c, d, a, b, M_offset_10, 15, T[54]);
          b = II(b, c, d, a, M_offset_1, 21, T[55]);
          a = II(a, b, c, d, M_offset_8, 6, T[56]);
          d = II(d, a, b, c, M_offset_15, 10, T[57]);
          c = II(c, d, a, b, M_offset_6, 15, T[58]);
          b = II(b, c, d, a, M_offset_13, 21, T[59]);
          a = II(a, b, c, d, M_offset_4, 6, T[60]);
          d = II(d, a, b, c, M_offset_11, 10, T[61]);
          c = II(c, d, a, b, M_offset_2, 15, T[62]);
          b = II(b, c, d, a, M_offset_9, 21, T[63]); // Intermediate hash value

          H[0] = H[0] + a | 0;
          H[1] = H[1] + b | 0;
          H[2] = H[2] + c | 0;
          H[3] = H[3] + d | 0;
        },
        _doFinalize: function _doFinalize() {
          // Shortcuts
          var data = this._data;
          var dataWords = data.words;
          var nBitsTotal = this._nDataBytes * 8;
          var nBitsLeft = data.sigBytes * 8; // Add padding

          dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
          var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);
          var nBitsTotalL = nBitsTotal;
          dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = (nBitsTotalH << 8 | nBitsTotalH >>> 24) & 0x00ff00ff | (nBitsTotalH << 24 | nBitsTotalH >>> 8) & 0xff00ff00;
          dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotalL << 8 | nBitsTotalL >>> 24) & 0x00ff00ff | (nBitsTotalL << 24 | nBitsTotalL >>> 8) & 0xff00ff00;
          data.sigBytes = (dataWords.length + 1) * 4; // Hash final blocks

          this._process(); // Shortcuts


          var hash = this._hash;
          var H = hash.words; // Swap endian

          for (var i = 0; i < 4; i++) {
            // Shortcut
            var H_i = H[i];
            H[i] = (H_i << 8 | H_i >>> 24) & 0x00ff00ff | (H_i << 24 | H_i >>> 8) & 0xff00ff00;
          } // Return final computed hash


          return hash;
        },
        clone: function clone() {
          var clone = Hasher.clone.call(this);
          clone._hash = this._hash.clone();
          return clone;
        }
      });

      function FF(a, b, c, d, x, s, t) {
        var n = a + (b & c | ~b & d) + x + t;
        return (n << s | n >>> 32 - s) + b;
      }

      function GG(a, b, c, d, x, s, t) {
        var n = a + (b & d | c & ~d) + x + t;
        return (n << s | n >>> 32 - s) + b;
      }

      function HH(a, b, c, d, x, s, t) {
        var n = a + (b ^ c ^ d) + x + t;
        return (n << s | n >>> 32 - s) + b;
      }

      function II(a, b, c, d, x, s, t) {
        var n = a + (c ^ (b | ~d)) + x + t;
        return (n << s | n >>> 32 - s) + b;
      }
      /**
       * Shortcut function to the hasher's object interface.
       *
       * @param {WordArray|string} message The message to hash.
       *
       * @return {WordArray} The hash.
       *
       * @static
       *
       * @example
       *
       *     var hash = CryptoJS.MD5('message');
       *     var hash = CryptoJS.MD5(wordArray);
       */


      C.MD5 = Hasher._createHelper(MD5);
      /**
       * Shortcut function to the HMAC's object interface.
       *
       * @param {WordArray|string} message The message to hash.
       * @param {WordArray|string} key The secret key.
       *
       * @return {WordArray} The HMAC.
       *
       * @static
       *
       * @example
       *
       *     var hmac = CryptoJS.HmacMD5(message, key);
       */

      C.HmacMD5 = Hasher._createHmacHelper(MD5);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MechanismComponent1989.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Mummy1989.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Collider2D, Contact2DType, BoxCollider2D, Component, Mummy1989;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Collider2D = module.Collider2D;
      Contact2DType = module.Contact2DType;
      BoxCollider2D = module.BoxCollider2D;
      Component = module.Component;
    }, function (module) {
      Mummy1989 = module.Mummy1989;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "360e7pQCD9OsLo0OtiE5qLc", "MechanismComponent1989", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var MechanismComponent1989 = exports('MechanismComponent1989', (_dec = ccclass('MechanismComponent1989'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MechanismComponent1989, _Component);

        function MechanismComponent1989() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.isLockFish = false;
          return _this;
        }

        var _proto = MechanismComponent1989.prototype;

        _proto.onLoad = function onLoad() {
          this.getComponent(Collider2D).on(Contact2DType.BEGIN_CONTACT, this.onCollisionEnter, this);
          this.getComponent(Collider2D).on(Contact2DType.END_CONTACT, this.onCollisionExit, this);
        };

        _proto.activeMachanism = function activeMachanism(isActive) {
          if (isActive === void 0) {
            isActive = false;
          }

          var MummyColliderBoxes = this.node.getComponent(BoxCollider2D);
          MummyColliderBoxes.enabled = isActive;
          MummyColliderBoxes['isMummy'] = true;
          this.node.active = isActive;
        };

        _proto.setUpBoxColliders = function setUpBoxColliders(boxes) {
          var MummyColliderBoxes = this.node.getComponent(BoxCollider2D);
          MummyColliderBoxes.enabled = false;
          this.setBoxCollider(MummyColliderBoxes, boxes);
        };

        _proto.setBoxCollider = function setBoxCollider(box, config) {
          box.offset.x = config.x;
          box.offset.y = config.y;
          box.size.width = config.width;
          box.size.height = config.height;
        };

        _proto.onCollisionEnter = function onCollisionEnter(self, other, contact) {
          var fish = other.getComponent(Mummy1989) || other.node.parent.getComponent(Mummy1989);
          if (!fish || fish.checkDie() || fish.checkLockFish()) return;
          fish.dimMummy(true);
        };

        _proto.onCollisionExit = function onCollisionExit(self, other, contact) {
          var fish = other.getComponent(Mummy1989) || other.node.parent.getComponent(Mummy1989);
          if (!fish || fish.checkDie()) return;
          fish.dimMummy(false);
        };

        return MechanismComponent1989;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MiniBox.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, SpriteFrame, Event, tween, Vec3, Sprite, Button, GameObject;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      SpriteFrame = module.SpriteFrame;
      Event = module.Event;
      tween = module.tween;
      Vec3 = module.Vec3;
      Sprite = module.Sprite;
      Button = module.Button;
    }, function (module) {
      GameObject = module.GameObject;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "13a04uu1UxMb7gUWTdvWxHX", "MiniBox", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var MiniBox = exports('MiniBox', (_dec = ccclass('MiniBox'), _dec2 = property({
        type: Node,
        override: true
      }), _dec3 = property({
        type: Node,
        override: true
      }), _dec4 = property({
        type: SpriteFrame,
        override: true
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(MiniBox, _GameObject);

        function MiniBox() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "staticNode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "symbolNode", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "spriteSymbols", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "soundBoxClick", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "soundBoxOpen", _descriptor5, _assertThisInitialized(_this));

          _this.isAutoTrigger = false;
          _this.tweenClick = void 0;
          _this.tweenOpen = void 0;
          _this.mapValue = {};
          _this.boxPosition = null;
          _this.isSelected = false;
          _this.animationLevel = 2;
          return _this;
        }

        var _proto = MiniBox.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          this.node.on("INIT", this.init, this);
          this.node.on("SHOW", this.show, this);
          this.node.on("HIDE", this.hide, this);
          this.node.on("DIM", this.dim, this);
          this.node.on("BOX_OPEN", this.playAnimOpen, this);
          this.node.on("BOX_RESET", this.resetBox, this);
          this.node.isOpen = false;
          this.node.disableClick = this.disableClick.bind(this);
          this.node.enableClick = this.enableClick.bind(this);
          this.node.showScore = this.showScore.bind(this);
          this.node.playAnimClick = this.playAnimClick.bind(this);
          this.node.onClickItem = this.onClickItem.bind(this);
          this.node.stopAnimClick = this.stopAnimClick.bind(this);
        };

        _proto.init = function init(config) {
          this.mapValue = config.BOX_MAP_VALUES;
          this.boxPosition = this.node.position.clone();
        };

        _proto.show = function show() {
          this.node.active = true;
        };

        _proto.hide = function hide() {
          this.node.active = false;
        };

        _proto.onClickItem = function onClickItem(e, isAutoTrigger) {
          if (isAutoTrigger === void 0) {
            isAutoTrigger = false;
          }

          if (this.node.isOpen) return;
          this.node["isAutoTrigger"] = isAutoTrigger;
          var event = new Event('CLICK_ITEM', true);
          this.node.dispatchEvent(event);
        };

        _proto.playAnimClick = function playAnimClick() {
          this.soundBoxClick && this.soundPlayer && this.soundPlayer.playSfx(this.soundBoxClick);
          var time = 0.02;
          this.stopAnimClick();
          this.tweenClick = tween(this.node).repeatForever(tween(this.node).by(time, {
            position: new Vec3(-10, 0, 0)
          }).by(time, {
            position: new Vec3(10, 0, 0)
          }).by(time, {
            position: new Vec3(10, 0, 0)
          }).by(time, {
            position: new Vec3(-10, 0, 0)
          }));
          this.tweenClick.start();
        };

        _proto.stopAnimClick = function stopAnimClick() {
          if (this.tweenClick) this.tweenClick.stop();
          this.tweenClick = null;
        };

        _proto.playAnimOpen = function playAnimOpen(value, isFast, isSelected, callback) {
          var _this2 = this;

          this.node.isOpen = true;
          this.isSelected = isSelected;
          this.disableClick();
          this.soundBoxOpen && this.soundPlayer && this.soundPlayer.playSfx(this.soundBoxOpen);
          if (this.tweenOpen) this.tweenOpen.stop();
          this.tweenOpen = tween(this.node).delay(0.5).call(function () {
            _this2.stopAnimClick(); //Todo get the current performance level from data store to play exact animation
            //Example:
            // const performanceLvl = (this.dataStore &&this.dataStore.performanceLevel) || 'HIGH_PERFORMANCE_LV';
            // this.animationLevel = this.config[performanceLvl].BONUS_ANIMATION;
            // const showStaticAnim = this.animationLevel< Number(PerformanceLevel.Medium);


            _this2.node.setPosition(_this2.boxPosition);

            _this2.symbolNode.active = true;

            _this2.setOpacity(_this2.staticNode, 0);

            var indexSprite = _this2.mapValue[value];
            _this2.symbolNode.getComponent(Sprite).spriteFrame = _this2.spriteSymbols[indexSprite];

            _this2.setOpacity(_this2.staticNode, 255);
          }).call(function () {
            _this2.showScore(value, isFast);
          }).delay(0.5).call(function () {
            if (callback && typeof callback === 'function') {
              callback();
            }

            _this2.tweenOpen = null;
          });
          this.tweenOpen.start();
        };

        _proto.dim = function dim() {
          this.setOpacity(this.node, 150);
        };

        _proto.showScore = function showScore(value, isFast) {
          if (isFast === void 0) {
            isFast = false;
          }

          if (this.eventManager) {
            this.eventManager.emit("SHOW_BONUS_VALUE", value, this.node.getWorldPosition(), isFast, this.isSelected);
          }
        };

        _proto.setScore = function setScore(value) {
          this.symbolNode.active = false; // this.labelScore.getComponent(Label).string = 'x' + (value || 0);
          // this.labelScore._uiProps.opacity = 1;
        };

        _proto.enableClick = function enableClick() {
          this.node.getComponent(Button).interactable = true;
        };

        _proto.disableClick = function disableClick() {
          this.node.getComponent(Button).interactable = false;
        };

        _proto.resetBox = function resetBox() {
          this.boxPosition && this.node.setPosition(this.boxPosition);
          this.stopAnimClick();
          this.symbolNode.active = false;
          this.setOpacity(this.staticNode, 255);
          this.setOpacity(this.node, 255);
          this.node.isOpen = false;
          this.enableClick();
          this.isSelected = false;
        };

        return MiniBox;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "staticNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "symbolNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "spriteSymbols", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "soundBoxClick", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "soundBoxOpen", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MiniDirector.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BaseDirector.ts', './CustomEnum.ts', './BonusValueControl.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Label, UITransform, Vec3, tween, error, Vec2, BaseDirector, SlotGameMode, TutorialTriggerType, BonusValueControl;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
      UITransform = module.UITransform;
      Vec3 = module.Vec3;
      tween = module.tween;
      error = module.error;
      Vec2 = module.Vec2;
    }, function (module) {
      BaseDirector = module.BaseDirector;
    }, function (module) {
      SlotGameMode = module.SlotGameMode;
      TutorialTriggerType = module.TutorialTriggerType;
    }, function (module) {
      BonusValueControl = module.BonusValueControl;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9;

      cclegacy._RF.push({}, "aa621lYqwNHfLZ/tpkenXKX", "MiniDirector", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var MiniDirector = exports('MiniDirector', (_dec = ccclass('MiniDirector'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_BaseDirector) {
        _inheritsLoose(MiniDirector, _BaseDirector);

        function MiniDirector() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseDirector.call.apply(_BaseDirector, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "table", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "valueLabelHolder", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labelPrefabName", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labelOffset", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "winAmount", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "countDownNode", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "maxOpenBoxes", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "timerCount", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "defaultValue", _descriptor9, _assertThisInitialized(_this));

          _this.writer = null;
          _this.isWaitingResult = false;
          _this.isAutoTrigger = false;
          _this.callbackStateUpdate = null;
          _this._callbackAutoTrigger = null;
          _this.currentPick = void 0;
          _this.listOpenedIndexes = [];
          _this.repeatCountDown = null;
          _this._count = 20;
          _this._delayTimeCallback = null;
          _this.countDownText = null;
          _this._labelHolderTransform = null;
          _this._labelObjects = [];
          _this._poolFactory = null;
          return _this;
        }

        var _proto = MiniDirector.prototype;

        _proto.onLoad = function onLoad() {
          _BaseDirector.prototype.onLoad.call(this);

          this.setOpacity(this.node, 0);
          this.node.on("GAME_UPDATE", this.stateUpdate, this);
          this.node.on("GAME_ENTER", this.ready, this);
          this.node.on("GAME_INIT", this.init, this);
          this.node.on('CLICK_ITEM', this.onClickItem, this);
          this.countDownText = this.countDownNode.getComponentInChildren(Label);

          if (this.valueLabelHolder) {
            this._labelHolderTransform = this.valueLabelHolder.getComponent(UITransform);
            if (!this._labelHolderTransform) this._labelHolderTransform = this.valueLabelHolder.addComponent(UITransform);
          }

          this._bindProps();

          if (this.mainDirector) this.mainDirector.gameModes[SlotGameMode.BonusGame] = this.node;
        };

        _proto.onEnable = function onEnable() {
          if (this.eventManager) {
            this.eventManager.on("SHOW_BONUS_VALUE", this.showBonusValue, this);
          }

          if (!this._poolFactory) {
            this._poolFactory = this.mainDirector.poolFactory;
          }
        };

        _proto.onDisable = function onDisable() {
          if (this.eventManager) {
            this.eventManager.off("SHOW_BONUS_VALUE", this.showBonusValue, this);
          }
        };

        _proto._bindProps = function _bindProps() {
          this.node.init = this.init.bind(this);
        }
        /**
         * @receive_data
         * */
        ;

        _proto.stateUpdate = function stateUpdate(callback) {
          this.isWaitingResult = false;
          this.callbackStateUpdate = callback;
          this.runAction('ResultReceive');
        };

        _proto.runCallbackStateUpdate = function runCallbackStateUpdate() {
          if (typeof this.callbackStateUpdate == "function") {
            this.callbackStateUpdate();
            this.callbackStateUpdate = null;
          }
        };

        _proto.ready = function ready(data) {
          var _this2 = this;

          if (data) {
            for (var index = 0; index < data.length; index++) {
              if (data[index] !== this.defaultValue) this.listOpenedIndexes.push(index);
            }

            this.table.emit("RESUME_MINI_GAME", data, this.defaultValue);
          }

          this.isWaitingResult = false;
          this.runAction("MiniGameStart");
          this._count = this.timerCount;
          this.soundPlayer && this.soundPlayer.playMainBGM();
          var delayForTrigger = 1;
          this.scheduleOnce(function () {
            _this2.guiMgr.onIngameEvent(TutorialTriggerType.EnterBonusGame, "ENTER_GAME_MODE");
          }, delayForTrigger);
        };

        _proto.init = function init() {
          this.writer = this.node['writer'];
          this.isWaitingResult = false;
          this.table.emit("INIT_TABLE");
          this.node.active = false;
        };

        _proto.onClickItem = function onClickItem(event) {
          if (this.isWaitingResult) return;
          event.propagationStopped = true;
          this.stopAutoTrigger();
          this.soundClickItem();
          var box = event.target;

          if (this.canOpenBox(box)) {
            var index = box["boxIndex"];
            this.currentPick = index;
            this.listOpenedIndexes.push(index);
            this.runAction("MiniGameClick", this.currentPick);
            box.playAnimClick();
            box.disableClick();
            this.isAutoTrigger = box.isAutoTrigger;
          }
        };

        _proto.canOpenBox = function canOpenBox(box) {
          if (this.isFinishOpen()) return false;
          if (this.listOpenedIndexes.indexOf(box["boxIndex"]) > -1) return false;
          return true;
        };

        _proto.isFinishOpen = function isFinishOpen() {
          return this.listOpenedIndexes.length >= this.maxOpenBoxes;
        };

        _proto.showBonusValue = function showBonusValue(bonusValue, itemWPosition, isFast, isSelected) {
          if (!this.labelPrefabName || this.labelPrefabName === '') return;

          for (var i = 0; i < this._labelObjects.length; i++) {
            this._labelObjects[i].active = false;
          }

          var lPos = this._labelHolderTransform.convertToNodeSpaceAR(itemWPosition);

          var labelPos = new Vec3(lPos.x + this.labelOffset.x, lPos.y + this.labelOffset.y, lPos.z);

          var valueLabel = this._poolFactory.getObject(this.labelPrefabName);

          if (valueLabel && this.valueLabelHolder) {
            valueLabel.parent = this.valueLabelHolder;
            valueLabel.active = true;
            valueLabel.setPosition(labelPos);
            valueLabel.getComponent(BonusValueControl).showValue(bonusValue, this.dataStore.betData.denom, isFast, isSelected);

            this._labelObjects.push(valueLabel);
          }

          for (var _i = 0; _i < this._labelObjects.length; _i++) {
            this._labelObjects[_i].active = true;
          }

          this.soundPlayer && this.soundPlayer.playSfx("BONUS_PAY");
        };

        _proto.runAutoTrigger = function runAutoTrigger(delay) {
          var _this3 = this;

          this.stopAutoTrigger();

          this._callbackAutoTrigger = function () {
            _this3.table.emit("AUTO_OPEN_BOX");

            _this3._callbackAutoTrigger = null;
          };

          this.scheduleOnce(this._callbackAutoTrigger, delay);
          this.runCountDown(delay);
        };

        _proto.stopAutoTrigger = function stopAutoTrigger() {
          this._callbackAutoTrigger && this.unschedule(this._callbackAutoTrigger);
        };

        _proto.runCountDown = function runCountDown(delay) {
          var _this4 = this;

          if (!this.countDownText) return;
          this.stopCountDown();

          if (delay === this.timerCount) {
            this.repeatCountDown = tween(this);
            this.repeatCountDown.repeatForever(tween(this.node).call(function () {
              _this4.setOpacity(_this4.countDownNode, 255);

              _this4.countDownText.string = "H\u1EC7 th\u1ED1ng s\u1EBD t\u1EF1 ch\u1ECDn sau: " + _this4._count + "s";
            }).delay(1).call(function () {
              _this4._count--;

              if (_this4._count <= 0) {
                _this4.repeatCountDown.stop();

                _this4.setOpacity(_this4.countDownNode, 0);
              }
            })).start();
          } else {
            this.setOpacity(this.countDownNode, !this.isAutoTrigger ? 255 : 0);
          }
        };

        _proto.stopCountDown = function stopCountDown() {
          if (this.repeatCountDown) {
            this.repeatCountDown.stop();
            this._count = this.timerCount;
          }
        };

        _proto.resetMiniGame = function resetMiniGame() {
          this.stopAutoTrigger();
          this.stopCountDown();
          this.listOpenedIndexes = [];
          this.currentPick = 0;
          this.table.emit("RESET_MINI_TABLE");
          this._count = this.timerCount;
          this.setOpacity(this.countDownNode, 0);
          this.clearValueLabels();
        };

        _proto.clearValueLabels = function clearValueLabels() {
          if (!this._poolFactory) {
            this._poolFactory = this.mainDirector.poolFactory;
          }

          for (var i = 0; i < this._labelObjects.length; i++) {
            var labelObj = this._labelObjects[i];

            if (labelObj) {
              labelObj.getComponent(Label).string = '';

              this._poolFactory.removeObject(labelObj);
            }
          }

          this._labelObjects = [];
        }
        /**
         * commands
         */
        ;

        _proto._miniGameStart = function _miniGameStart(scripts) {
          if (this._checkPauseTutorial('pauseBonusGame')) {
            this.storeCurrentScripts = '_miniGameStart';
            this.storeNextScripts = {
              scripts: scripts,
              data: {}
            };
          } else {
            this.runAutoTrigger(this.timerCount);
            this.executeNextScript(scripts);
          }
        };

        _proto._sendRequestPlayMiniGame = function _sendRequestPlayMiniGame(scripts, _ref) {
          var openCell = _ref.openCell;
          this.isWaitingResult = true;
          this.node["mainDirector"].gameStateManager.triggerMiniGame(openCell);
          this.executeNextScript(scripts);
        };

        _proto._showResult = function _showResult(script) {
          this.isWaitingResult = false;
          this.runAction("ShowResult");
          this.executeNextScript(script);
        };

        _proto._openPickedItem = function _openPickedItem(scripts, data) {
          var _this5 = this;

          this.table.emit("OPEN_BOX", data, function () {
            _this5.executeNextScript(scripts);
          });

          if (!this.isFinishOpen()) {
            var time = this.isAutoTrigger ? 0.5 : this.timerCount;
            this.runAutoTrigger(time);
          }
        };

        _proto._openAllItems = function _openAllItems(scripts, matrix) {
          var _this6 = this;

          this.setOpacity(this.countDownNode, 0);
          this.stopAutoTrigger();
          this.table.emit("OPEN_ALL_BOXES", matrix, function () {
            _this6.executeNextScript(scripts);
          });
          this.stopCountDown();
        };

        _proto._updateWinningAmount = function _updateWinningAmount(scripts, _ref2) {
          var winAmount = _ref2.winAmount,
              time = _ref2.time;
          this.guiMgr.updateWinAmount(winAmount, time / 1000);
          this.executeNextScript(scripts);
        };

        _proto._miniGameRestart = function _miniGameRestart(scripts) {
          this.executeNextScript(scripts);
        };

        _proto._delayTimeScript = function _delayTimeScript(script, time) {
          var _this7 = this;

          this._delayTimeCallback = function () {
            _this7.executeNextScript(script);
          };

          this.scheduleOnce(this._delayTimeCallback, time);
        };

        _proto._checkPauseTutorial = function _checkPauseTutorial(flag) {
          return this.guiMgr.checkPauseTutorial(flag);
        };

        _proto._showCutscene = function _showCutscene(script, _ref3) {
          var _this8 = this;

          var name = _ref3.name,
              content = _ref3.content;

          if (this._checkPauseTutorial('pauseFreeGame') || this._checkPauseTutorial('pauseBonusGame')) {
            this.storeCurrentScripts = '_showCutscene';
            var data = {
              name: name,
              content: content
            };
            this.storeNextScripts = {
              script: script,
              data: data
            };
          } else {
            this.guiMgr.showCutScene(name, content, function () {
              _this8.executeNextScript(script);
            });
          }
        };

        _proto._showCutscene_2 = function _showCutscene_2(script) {
          this.executeNextScript(script);
        };

        _proto._hideCutscene = function _hideCutscene(script, _ref4) {
          var name = _ref4.name;
          this.guiMgr.hideCutScene(name);
          this.executeNextScript(script);
        };

        _proto._showUnskippedCutscene = function _showUnskippedCutscene(script, _ref5) {
          var _this9 = this;

          var name = _ref5.name,
              content = _ref5.content;
          this.guiMgr.showCutScene(name, content, function () {
            _this9.executeNextScript(script);
          });
        };

        _proto._updateValueJP = function _updateValueJP(script, data) {
          this.guiMgr.updateValueJP(data);
          this.executeNextScript(script);
        };

        _proto._pauseUpdateJP = function _pauseUpdateJP(script) {
          this.guiMgr.pauseJackpot();
          this.executeNextScript(script);
        };

        _proto._resumeUpdateJP = function _resumeUpdateJP(script) {
          this.guiMgr.resumeJackpot();
          this.executeNextScript(script);
        };

        _proto._gameExit = function _gameExit(scripts) {
          var _this10 = this;

          if (scripts.length > 0) {
            error("have tp finish all scripts when exit game");
          }

          this.resetMiniGame();
          this.guiMgr.onIngameEvent(TutorialTriggerType.ExitBonusGame, "EXIT_GAME_MODE");
          this.node.exit(function () {
            _this10.executeNextScript(scripts);
          });
        };

        _proto.soundClickItem = function soundClickItem() {//to do play sound
        };

        return MiniDirector;
      }(BaseDirector), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "table", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "valueLabelHolder", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "labelPrefabName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "labelOffset", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Vec2(0, 0);
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "winAmount", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "countDownNode", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "maxOpenBoxes", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 3;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "timerCount", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 15;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "defaultValue", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MiniTable.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, instantiate, v3, tween, GameObject;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      instantiate = module.instantiate;
      v3 = module.v3;
      tween = module.tween;
    }, function (module) {
      GameObject = module.GameObject;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "ef8b7q6n51KoLW4ILuyhveY", "MiniTable", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var MiniTable = exports('MiniTable', (_dec = ccclass('MiniTable'), _dec2 = property(Prefab), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(MiniTable, _GameObject);

        function MiniTable() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "colNumber", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "rowNumber", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "WIDTH_STEP", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "HEIGHT_STEP", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "boxPrefab", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "openAllBoxDelay", _descriptor6, _assertThisInitialized(_this));

          _this.listBoxes = [];
          _this.listScore = [];
          _this.startX = 0;
          _this.startY = 0;
          _this.result = null;
          return _this;
        }

        var _proto = MiniTable.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          this.node.on("INIT_TABLE", this.initBoxes, this);
          this.node.on("OPEN_BOX", this.openBox, this);
          this.node.on("OPEN_ALL_BOXES", this.openAllBoxes, this);
          this.node.on("RESUME_MINI_GAME", this.resumeTable, this);
          this.node.on("RESET_MINI_TABLE", this.resetTable, this);
          this.node.on("AUTO_OPEN_BOX", this.autoClick, this);
          this.startX = -this.colNumber / 2 * this.WIDTH_STEP + this.WIDTH_STEP / 2;
          this.startY = this.rowNumber / 2 * this.HEIGHT_STEP - this.HEIGHT_STEP / 2;
        };

        _proto.randRange = function randRange(min, max) {
          return Math.floor(Math.random() * (max - min)) + min;
        };

        _proto.initBoxes = function initBoxes() {
          var maxBox = this.colNumber * this.rowNumber;
          this.listBoxes = [];

          for (var index = 0; index < maxBox; index++) {
            var box = instantiate(this.boxPrefab);
            this.node.addChild(box);
            box.active = true;
            box['boxIndex'] = index;
            this.listBoxes.push(box);
            box.setPosition(this.getPosByIndex(index));
            box.emit('INIT', this.config);
          }
        };

        _proto.getPosByIndex = function getPosByIndex(index) {
          var x = this.startX + this.WIDTH_STEP * Math.floor(index / this.rowNumber);
          var y = this.startY - this.HEIGHT_STEP * (index % this.rowNumber);
          return v3(x, y);
        };

        _proto.openBox = function openBox(data, callback) {
          var index = data.index,
              value = data.value;
          this.listBoxes[index].emit("BOX_OPEN", value, false, true, callback);
        };

        _proto.openAllBoxes = function openAllBoxes(result, callback) {
          this.result = result;
          this.updateCurrentMatrix();

          for (var i = 0; i < this.listBoxes.length; i++) {
            if (this.listBoxes[i]["isOpen"] === false) {
              var randValue = this.getRandomValue();
              this.listBoxes[i].stopAnimClick();
              this.listBoxes[i].emit("BOX_OPEN", randValue, true, false, null);
              this.listBoxes[i].emit("DIM");
            }
          }

          if (callback && typeof callback === 'function') {
            tween(this.node).delay(this.openAllBoxDelay).call(function () {
              callback();
            }).start();
          }
        };

        _proto.resumeTable = function resumeTable(data, defaultValue) {
          if (!data) return;

          for (var i = 0; i < data.length; i++) {
            if (data[i] !== defaultValue) {
              this.listBoxes[i].emit("BOX_OPEN", data[i], true, true);
            }
          }
        };

        _proto.resetTable = function resetTable() {
          for (var i = 0; i < this.listBoxes.length; i++) {
            this.listBoxes[i].emit("BOX_RESET");
          }
        };

        _proto.autoClick = function autoClick() {
          var index = this.randRange(0, this.listBoxes.length);
          this.listBoxes[index]["isOpen"] ? this.autoClick() : this.listBoxes[index].onClickItem(null, true);
        };

        _proto.updateCurrentMatrix = function updateCurrentMatrix() {// todo: implement this func to mini game win Jackpot
          // like BDMN, 4L
        };

        _proto.getRandomValue = function getRandomValue() {
          var boxValue = Object.keys(this.config.BOX_MAP_VALUES);
          return boxValue[Math.floor(Math.random() * boxValue.length)];
        };

        return MiniTable;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "colNumber", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 5;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "rowNumber", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 3;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "WIDTH_STEP", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 250;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "HEIGHT_STEP", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 250;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "boxPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "openAllBoxDelay", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 3;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MiniWriter.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CustomEnum.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _createClass, cclegacy, _decorator, Component, SlotSceneType;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      SlotSceneType = module.SlotSceneType;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "ff4bdM4aUhM+K6bHbWWxrpW", "MiniWriter", undefined);

      var ccclass = _decorator.ccclass;
      var MiniWriter = exports('MiniWriter', (_dec = ccclass('MiniWriter'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MiniWriter, _Component);

        function MiniWriter() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.currentPick = null;
          return _this;
        }

        var _proto = MiniWriter.prototype;

        _proto.onLoad = function onLoad() {
          this.node['writer'] = this;
        };

        _proto.makeScriptMiniGameStart = function makeScriptMiniGameStart() {
          var listScript = [];
          listScript.push({
            command: "_miniGameStart"
          });
          return listScript;
        };

        _proto.makeScriptMiniGameClick = function makeScriptMiniGameClick(boxIndex) {
          this.currentPick = boxIndex;
          return [{
            command: "_sendRequestPlayMiniGame",
            data: {
              openCell: boxIndex
            }
          }];
        };

        _proto.makeScriptResultReceive = function makeScriptResultReceive() {
          var _this$dataStore$playS = this.dataStore.playSession,
              jackpotInfo = _this$dataStore$playS.jackpotInfo,
              extraVipJackpot = _this$dataStore$playS.extraVipJackpot;
          var listScript = [];

          if (jackpotInfo) {
            var infoJP = jackpotInfo[jackpotInfo.length - 1];
            var arrayJP = infoJP.split(';');
            var jpId = arrayJP[0];
            var jpType = jpId.slice(7);
            var jackpotAmount = Number(arrayJP[1]);
            listScript.push({
              command: "_pauseUpdateJP"
            });
            listScript.push({
              command: "_updateValueJP",
              data: {
                jpType: jpType,
                jpValue: jackpotAmount - (extraVipJackpot || 0)
              }
            });
          }

          listScript.push({
            command: "_showResult"
          });
          return listScript;
        };

        _proto.makeScriptShowResult = function makeScriptShowResult() {
          var listScript = [];
          var _this$dataStore$playS2 = this.dataStore.playSession,
              winAmountPS = _this$dataStore$playS2.winAmountPS,
              bonusPlayRemain = _this$dataStore$playS2.bonusPlayRemain,
              bonusGameMatrix = _this$dataStore$playS2.bonusGameMatrix,
              bonusValue = _this$dataStore$playS2.bonusValue,
              bonusGameWinAmount = _this$dataStore$playS2.bonusGameWinAmount,
              bgWinAmtCurrent = _this$dataStore$playS2.bgWinAmtCurrent,
              jackpotInfo = _this$dataStore$playS2.jackpotInfo;
          var betData = this.dataStore.betData;
          listScript.push({
            command: "_openPickedItem",
            data: {
              index: this.currentPick,
              value: bonusValue
            }
          });

          if (winAmountPS && winAmountPS > 0) {
            listScript.push({
              command: "_updateWinningAmount",
              data: {
                winAmount: winAmountPS,
                time: 300
              }
            });
          }

          if (bonusPlayRemain) {
            listScript.push({
              command: "_miniGameRestart"
            });
            return listScript;
          } else {
            listScript.push({
              command: "_openAllItems",
              data: bonusGameMatrix
            });

            if (jackpotInfo) {
              var infoJP = jackpotInfo[jackpotInfo.length - 1];
              var arrayJP = infoJP.split(';');
              var jackpotAmount = 0;
              var jpLineId;

              if (arrayJP && arrayJP.length > 2) {
                jackpotAmount = Number(arrayJP[1]);
                jpLineId = arrayJP[2];
              }

              if (jpLineId) {
                listScript.push({
                  command: "_showJackpotPayLine",
                  data: {
                    jpPayLineID: jpLineId
                  }
                });
              }

              listScript.push({
                command: "_showUnskippedCutscene",
                data: {
                  name: SlotSceneType.JackpotWin,
                  content: {
                    winAmount: jackpotAmount,
                    currentBetData: betData.getTotalBet()
                  }
                }
              });
              listScript.push({
                command: "_resumeUpdateJP"
              });
            } else {
              listScript.push({
                command: "_showCutscene",
                data: {
                  name: SlotSceneType.TotalWinPanel,
                  content: {
                    winAmount: bgWinAmtCurrent ? bgWinAmtCurrent : bonusGameWinAmount
                  }
                }
              });
              listScript.push({
                command: "_updateWinningAmount",
                data: {
                  winAmount: winAmountPS,
                  time: 300
                }
              });
            }

            listScript.push({
              command: "_gameExit"
            });
            return listScript;
          }
        };

        _createClass(MiniWriter, [{
          key: "dataStore",
          get: function get() {
            return this.node["dataStore"] || null;
          }
        }]);

        return MiniWriter;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/mock.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "7b3eaHRoJpAl7VdbWi2xxG7", "mock", undefined);

      var userList = ['', '56e6b7cb-533c-4888-9d5a-ab248a06697c', 'd24bb892-2186-4f99-80bf-d86711182e1e', 'dc539325-654e-4e8b-868f-76de25a2f35a', '7f40784b-5a46-4543-8423-fd8f4fcd0279', 'ca23696a-6aff-49e4-8be4-2878a4537265', '2d7fe03b-9e6f-46c2-bd1c-5a62c8d5e047', 'dc8cc0bb-7f25-4284-bbe0-a78d1f5b0f10', '1323b14d-b986-40ae-bc38-1e4362f5f339', '665e2d1b-85a8-486c-951f-4ba6b4a520e2', 'efe80f93-c21d-414b-b6b0-ca6633624b52', 'd2341c95-cc7a-4764-b076-54778df11c58', '7fdfd544-d0f8-4d1c-8f62-5c56857e6fae', 'bb8d1526-f4c0-472c-8308-b6b23dcd6a51', 'aea847a9-9b40-4f27-8f04-b821152d9d95', '122b2b5e-6232-49ac-8c23-5f7f0087a2f5', '5037ff8b-6a53-4812-b961-79984425ec04', 'e88b0830-0de9-4e3b-ae16-29c261cd797a', '3cb48324-b4fe-443a-bb72-94365dfba446', '7d186fb7-9dbc-416f-92f7-098e2b387b41', 'e6d94531-b9a7-4613-a369-88be17c47510', 'bbf5c484-fd49-4712-a74a-d9087fcac470', 'c0fea303-40d9-4916-9469-bb120c9cb946', '7d68da4c-e6f2-4b2e-a062-b42c70d1262f', '1f1d69a8-4de4-4ecf-8038-175c259a1796', '26c969e0-8ca8-4938-964b-5974a22e726f', '708574af-82aa-4dc2-a1ca-d545a45b9406', 'f1e65656-7a7f-4470-a42f-d3f329558882', 'a623678e-3c01-4970-a154-973c4f83b554', '47bc3d24-7c00-49ca-b18a-ae97368b2eab', '1ee89c7f-43d7-4d0f-a07f-35617d832db6', '4b5a50dd-8518-41a7-81a1-ae08634f7224', 'd2cefdae-62e3-4998-9629-ea6ced1b6d37', 'a7e128e6-deff-425d-9c42-a9f7ed32dbe4', '02e7e890-f5e7-46d1-bfb3-664cb80d6014', '0621ed1b-d2b5-480a-bee0-0fa93b72590f', '86e8c8c1-c8ad-495a-a5d6-efcebb93abc6', '68e5ef10-5451-455b-9076-871907548752', '1d05a7b7-fef3-49ad-820d-13cc26dab10c', 'be11c11b-0f04-4827-bf3d-82af3c75dc20', '7f58dd54-8e9f-4fed-b91e-c2657255bc39', '280125a5-92d3-492c-9054-ad163e48b441', '76d73797-4249-429d-8006-5d47cee5f6cb', '6487d34e-9e63-4bbe-8556-2ed6de713d9d', '48c64e13-1310-4a39-b258-1c1417fc486a', '1d231f82-4fc6-47e2-bba4-c203419f8402', 'e9eff152-dcbb-4d85-bc9f-953ae4d12776', '93437ca0-d5a9-446d-9e2d-eb0833c2acc1', 'af67b4e7-eabc-4087-b66a-b8b1bd0a5e00', 'fb3ebe48-caf1-4acc-b4c5-5e12b6126eb8', '0d786d1d-4f1c-46a3-8ffb-54cf80e14d79', 'ce851e2b-8e5e-46bd-8a13-b3d487c7ed6d', 'b890aa8c-ab4b-4b66-8094-d5fa1ce76abd', '56d73399-4231-42b8-bb9e-75ea8c5bdc35', 'b4412364-c3bc-4fa3-9311-1e1a721dd7bd', '30cc4fae-ac36-4eff-884a-7f51812129d0', '8e4cbb6e-72bf-4e79-bb85-eb9ef13bcb82', '2820fb3c-ca83-488b-b4eb-60a462d3940e', 'ddad2b48-8004-4d06-9749-2159e39a502b', 'e2bbb4f7-3987-49b7-9ca9-5e0ed8619f5f', 'a2c21e4f-1cf1-4c08-bd48-23fbafb0193c', 'd8235853-20e5-4c59-a6ec-51b5f920c83d', '5eff7099-0ab5-4218-9e29-ad62a4a7aef6', '8b965686-b37e-4c66-b463-5c7bb61c0be0', 'a85c17e3-6b22-4609-8a5a-9b839bbf27aa', 'd717803c-45aa-4676-b40f-cd8bcb2dfbd3', '7599abed-b608-41c6-a14f-40b94c65ae89', '43b60a97-22f4-4536-b2a7-fd1025df9bc5', '7b1ec585-5323-43b2-80c0-98961fbe7c4d', 'fbd35472-3c35-4764-a5db-39c30483dfb1', '7f5dbeef-cf0d-4715-b730-61548ad8c8b8', '34485d01-c565-4208-921f-c1c07f4b651c', 'b6cf22b0-5c58-4f5d-a5a8-142d431483af', 'a23a5459-1f08-4f0a-821f-0d7bab70aee9', '2d7c1dca-f628-4214-9fe9-c461e5a61774', '775e18f7-f702-471d-847b-e6e1be2dc465', '5ea33124-81a7-4c6c-8a29-67977e4af089', '53a0a688-2d7f-48d8-a8aa-2f83cf339fb4', '5614804e-b27a-4cc2-9317-3c37a2ff4a10', 'f4650e0a-8eae-4c77-8388-a74b24d38deb', 'e25416f1-8c8d-450b-919b-faa97981fe8d', '45e8195b-9ff1-466d-9748-3e1280443dd4', 'da0af4d3-af6b-4af1-977a-34a9e779dca6', 'f5b4323b-37a9-49f2-a4c0-7443515b6443', '360f4086-fc1b-41cf-b322-18ac80ff1636', 'bf0246e7-a179-4a62-843a-5f12036cafd4', '1bdff444-a214-424d-b76f-2c4b75c45c7c', '30e3d2ff-2f05-447b-972d-16571031eb26', 'c2d77d20-f6b3-4e71-bb5e-a7fb8c3e57b4', 'ba8977a8-b8b2-4f27-9c1c-64c68eb4972e', '23459e80-6190-47ab-8639-9cec204fc1ff', '8dbf465d-74b4-480d-af06-11baceadac1a', '0bf53ba8-efab-492a-93bc-086a74f263e6', 'a1560658-5927-4d2b-8bd7-0854f5e04689', '43253665-e9c8-43fa-b8b1-e70b9aa84cbc', '60beb533-fcf9-4927-b89e-884328a4ecfb', '6951de0d-cddc-46a4-abde-3bb44cce0dec', 'd09428f0-c851-4f17-af76-f0c6845e39bb', 'def15344-d560-4434-8a6b-f49274bedb28', '5335474d-cf1a-4acc-8fc0-757bd1bffc37', 'e9cca118-6bbd-4569-b0fb-2134bb75a922'];
      var listToken = ['', 'acb80c1b66e8d7e0238f664f6b2bade2', 'b64ee5942930d546d542b901f59571f8', '2ae5ce8fd3c2443ed9ed03d636870a5c', '5de60fa78df3c8b0d74fdab50bb1f05e', 'ec6418535a9a8c91c51457d95712d4ca', '62894b6a26ab2fc237bf8d337e09bea1', '4844f2fd92183d1e51db69d2262fdf62', '120c1f3746720186db019889e858fe76', '0e68f050850a67c4a4895969b8267ac5', '933529699ea607139e924b07e4ee3bdb', 'f14065e80d3c0c0da8e3231ae6a9e090', 'ca8222f4c8c3289bb6fbaf81720e7718', 'ceb383b6a9b06acb776dd2705345d592', 'bc229dcb0f2f526889046c4cc47ab8a2', '84d5399826046dbd4a06a5f53b15fed4', '64b7587d15c9440dfa9b8027719330eb', '254fd4b630e0554608623c61d4cee589', '9233c0694d2050eacf0cc48e1d92bbcc', '0d84f49e245969c0f075a304f61e7020', 'bee2816e5284e5f443c9bdaaa3b1d01d']; //  const uIndex = 30;

      var mock = exports('mock', {
        // IS_MOCK_NETWORK: true,
        '9999': 'spinNoWin',
        '9998': 'spinMiniGame',
        '5999': 'spinWin',
        userList: userList,
        listToken: listToken,
        token: 'CQFYIm.RPD5pXGNK2kvxGyu9Cr11lry',
        userText: 'user169',
        pwText: 'pwduser169',
        userId: 'user169'
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MonitorTarget.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "d9c84VJAbJG55ntfWlMb+mx", "MonitorTarget", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var MonitorTarget = exports('MonitorTarget', (_dec = ccclass('MonitorTarget'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MonitorTarget, _Component);

        function MonitorTarget() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "gameId", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = MonitorTarget.prototype;

        _proto.getGameId = function getGameId() {
          return this.gameId;
        };

        _proto.getGameMeta = function getGameMeta() {
          return "Please Input Any String";
        };

        return MonitorTarget;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "gameId", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "0000";
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Moving.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Graphics, Node, Vec3, sp, UITransform, Event, KeyCode, log, Vec2, tween, lerp, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Graphics = module.Graphics;
      Node = module.Node;
      Vec3 = module.Vec3;
      sp = module.sp;
      UITransform = module.UITransform;
      Event = module.Event;
      KeyCode = module.KeyCode;
      log = module.log;
      Vec2 = module.Vec2;
      tween = module.tween;
      lerp = module.lerp;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "e27619y3NNFAaFt4AX8phws", "Moving", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var DIRECTION = {
        DOWN: 0,
        LEFT: 1,
        UP: 2,
        RIGHT: 3
      };
      var DIRECTION_OFFSET = [{
        row: 1,
        col: 0
      }, {
        row: 0,
        col: -1
      }, {
        row: -1,
        col: 0
      }, {
        row: 0,
        col: 1
      }];
      var STATE = {
        IDLE: 0,
        MOVING: 1
      };
      var Moving = exports('Moving', (_dec = ccclass('Moving'), _dec2 = property({
        type: Graphics
      }), _dec3 = property(), _dec4 = property(), _dec5 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Moving, _Component);

        function Moving() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "selectLine", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "autoMove", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "autoMovePath", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "zControl", _descriptor4, _assertThisInitialized(_this));

          _this._direction = DIRECTION.DOWN;
          _this._speed = 0;
          _this._path = null;
          _this._anim = null;
          _this._startPosition = null;
          _this._nextPosition = null;
          _this._movingVector = null;
          _this._uiTransform = null;
          _this._distance = 0;
          _this._pathIndex = 0;
          _this._state = STATE.IDLE;
          _this._keyQueue = [];
          _this._keyMoving = null;
          _this._lastKeyCode = null;
          _this._movingByPath = false;
          _this._mapManager = null;
          _this._animScale = new Vec3(1, 1, 1);
          _this._targetRotation = new Vec3(0, 0, 0);
          _this._gridPosition = null;
          return _this;
        }

        var _proto = Moving.prototype;

        _proto.onLoad = function onLoad() {
          this.node.on(Node.EventType.MOUSE_DOWN, this.onSelect, this);
          this.node.on('DESELECT', this.onDeselect, this);
          this.node.on('ON_KEY_DOWN', this.onKeyDown, this);
          this.node.on('ON_KEY_UP', this.onKeyUp, this);
          this._anim = this.node.getComponentInChildren(sp.Skeleton);
          this._uiTransform = this.node.parent.getComponent(UITransform);
          this.selectLine.clear();
          this.selectLine.ellipse(0, 0, 30, 15);
          this.selectLine.stroke();
        };

        _proto.start = function start() {
          if (this.autoMove) {
            var direction = this._autoPickDir();

            this._moveDir(direction);
          }
        };

        _proto.onSelect = function onSelect() {
          this.selectLine.node.active = true;
          this.node.dispatchEvent(new Event('MUMMY_SELECT', true));
        };

        _proto.onDeselect = function onDeselect() {
          this.selectLine.node.active = false;
        };

        _proto.onKeyDown = function onKeyDown(ev) {
          if (ev.keyCode == KeyCode.ARROW_DOWN || ev.keyCode == KeyCode.ARROW_UP || ev.keyCode == KeyCode.ARROW_RIGHT || ev.keyCode == KeyCode.ARROW_LEFT) {
            this._keyQueue.unshift(ev.keyCode);
          }

          if (this._state == STATE.IDLE) {
            this.checkIfMovingKey();
          }
        };

        _proto.onKeyUp = function onKeyUp(ev) {
          this._keyQueue = this._keyQueue.filter(function (it) {
            return it != ev.keyCode;
          });
        };

        _proto.checkIfMovingKey = function checkIfMovingKey() {
          var lastKey = this._keyQueue[0];
          this._keyMoving = null;
          this._state = STATE.IDLE;

          switch (lastKey) {
            case KeyCode.ARROW_UP:
              this._keyMoving = DIRECTION.UP;
              break;

            case KeyCode.ARROW_DOWN:
              this._keyMoving = DIRECTION.DOWN;
              break;

            case KeyCode.ARROW_LEFT:
              this._keyMoving = DIRECTION.LEFT;
              break;

            case KeyCode.ARROW_RIGHT:
              this._keyMoving = DIRECTION.RIGHT;
              break;
          }

          if (!this._nextPosition) {
            this._nextPosition = this.node.position;
          }

          this._moveDir(this._keyMoving);
        };

        _proto._moveDir = function _moveDir(dir) {
          log("move dir " + dir);

          var _this$_mapManager$pos = this._mapManager.positionToGrid(this._nextPosition || this.node.position),
              col = _this$_mapManager$pos.col,
              row = _this$_mapManager$pos.row;

          col = Math.floor(col);
          row = Math.floor(row);

          switch (dir) {
            case DIRECTION.DOWN:
              row += 1;
              break;

            case DIRECTION.LEFT:
              col -= 1;
              break;

            case DIRECTION.RIGHT:
              col += 1;
              break;

            case DIRECTION.UP:
              row -= 1;
              break;
          }

          if (this._mapManager.isWalkable(row, col)) {
            this._startPosition = this.node.position;
            this._nextPosition = this._mapManager.gridCenterToPosition(row, col);
            log("Move to next " + JSON.stringify(this._nextPosition));
            this._distance = Vec2.distance(this._startPosition, this._nextPosition);
            this._state = STATE.MOVING;

            this._updateDirection();

            this._moveToNext();
          } else {
            log("could not move to " + row + " " + col);
          }
        };

        _proto.setMapManager = function setMapManager(mgr) {
          this._mapManager = mgr;
        };

        _proto.setSpeed = function setSpeed(speed) {
          this._speed = speed;
        };

        _proto.getSpine = function getSpine() {
          return this._anim;
        };

        _proto.getSpeed = function getSpeed() {
          return this._speed;
        };

        _proto.getGridPosition = function getGridPosition() {
          return this._gridPosition;
        };

        _proto.getDirection = function getDirection() {
          return this._direction;
        };

        _proto.setState = function setState(state) {
          this._state = state;
        };

        _proto.setPath = function setPath(path) {
          this._path = path;

          if (this.autoMovePath) {
            this.moveByPath();
          }
        };

        _proto.setPosition = function setPosition(position) {
          this.node.position = new Vec3(position.x, position.y, position.z || 0);
          this._gridPosition = this._mapManager.positionToGrid(this.node.position);

          this._checkCollisionZ();

          this._nextPosition = null;
        };

        _proto.moveByPath = function moveByPath() {
          this._state = STATE.MOVING;
          this.node.setPosition(new Vec3(this._path[0].x, this._path[0].y, 0));
          this._pathIndex = 0;

          this._updateMovingPosition();

          this._moveToNext();

          this._updateDirection();
        };

        _proto.setAutoMove = function setAutoMove(isAuto) {
          this.autoMove = isAuto;

          if (this.autoMove && this._state == STATE.IDLE) {
            var direction = this._autoPickDir();

            this._moveDir(direction);
          }
        };

        _proto.isAutoMove = function isAutoMove() {
          return this.autoMove;
        };

        _proto._moveToNext = function _moveToNext() {
          var _this2 = this;

          var time = this._distance / this._speed;
          var transformPos = this._nextPosition;
          tween(this.node).to(time, {
            position: transformPos
          }).call(function () {
            _this2._onFinishMove();
          }).start();
        };

        _proto._autoPickDir = function _autoPickDir() {
          var _this$_mapManager$pos2 = this._mapManager.positionToGrid(this._nextPosition || this.node.position),
              col = _this$_mapManager$pos2.col,
              row = _this$_mapManager$pos2.row;

          col = Math.floor(col);
          row = Math.floor(row);
          var result = [];

          for (var i = 0; i < 4; i++) {
            if (this._mapManager.isWalkable(row + DIRECTION_OFFSET[i].row, col + DIRECTION_OFFSET[i].col)) {
              result.push(i);
            }
          }

          console.log("available dir " + result);
          var pickDir = result[Math.floor(Math.random() * result.length)];
          return pickDir;
        };

        _proto._onFinishMove = function _onFinishMove() {
          if (this._movingByPath) {
            this._pathIndex += 1;

            if (this._pathIndex < this._path.length) {
              this._updateMovingPosition();

              this._moveToNext();

              this._updateDirection();
            } else {
              this._state = STATE.IDLE;
            }
          } else if (this._keyMoving != null) {
            this.checkIfMovingKey();
          } else if (this.autoMove) {
            var direction = this._autoPickDir();

            this._moveDir(direction);
          } else {
            this._state = STATE.IDLE;
          }

          console.log(this._mapManager.getDrawIndex(this.node.position));
        };

        _proto._updateMovingPosition = function _updateMovingPosition() {
          if (this._pathIndex < this._path.length - 1) {
            this._startPosition = this._path[this._pathIndex];
            this._nextPosition = this._path[this._pathIndex + 1];
            this._distance = Vec2.distance(this._startPosition, this._nextPosition);
          }
        };

        _proto._updateDirection = function _updateDirection() {
          var lastDirection = this._direction;

          if (this._nextPosition.x < this.node.position.x && this._nextPosition.y < this.node.position.y) {
            this._direction = DIRECTION.DOWN;

            this._anim.setSkin('Front');

            this._animScale = new Vec3(1, 1, 1);
          } else if (this._nextPosition.x < this.node.position.x && this._nextPosition.y > this.node.position.y) {
            this._direction = DIRECTION.LEFT;

            this._anim.setSkin('Back');

            this._animScale = new Vec3(-1, 1, 1);
          } else if (this._nextPosition.x > this.node.position.x && this._nextPosition.y > this.node.position.y) {
            this._direction = DIRECTION.UP;

            this._anim.setSkin('Back');

            this._animScale = new Vec3(1, 1, 1);
          } else if (this._nextPosition.x > this.node.position.x && this._nextPosition.y < this.node.position.y) {
            this._direction = DIRECTION.RIGHT;

            this._anim.setSkin('Front');

            this._animScale = new Vec3(-1, 1, 1);
          }

          this.node.setScale(this._animScale);

          if (lastDirection != this._direction) {
            log('update direction ' + this._direction);
          }
        };

        _proto.lateUpdate = function lateUpdate(dt) {
          if (this._state == STATE.MOVING) {
            this._gridPosition = this._mapManager.positionToGrid(this.node.position || this._startPosition);

            this._checkCollisionZ();
          }
        };

        _proto._checkCollisionZ = function _checkCollisionZ() {
          if (!this._mapManager) return;
          var _this$_gridPosition = this._gridPosition,
              col = _this$_gridPosition.col,
              row = _this$_gridPosition.row;
          var zObjects = this._mapManager._currentMapData.zObjects;
          var zPosition = 0;
          var hasCollitionZ = false;

          for (var i = 0; i < zObjects.length; i++) {
            var zObject = zObjects[i];

            if (col >= zObject.minCol && col <= zObject.maxCol && row >= zObject.minRow && row <= zObject.maxRow) {
              if (zObject.axis == 0) {
                zPosition = zObject.from + (zObject.to - zObject.from) * ((col - zObject.minCol) / (zObject.maxCol - zObject.minCol));
              } else {
                zPosition = zObject.from + (zObject.to - zObject.from) * ((row - zObject.minRow) / (zObject.maxRow - zObject.minRow));
              }

              hasCollitionZ = true;

              this._checkRotate(zObject.dir);

              break;
            }
          }

          if (!hasCollitionZ) this._checkRotate(-1);
          this.node.position = new Vec3(this.node.position.x, this.node.position.y, zPosition);

          this._updateZEffect();
        };

        _proto._checkRotate = function _checkRotate(dir) {
          var scaleDir = this.node.scale.x / Math.abs(this.node.scale.x);

          switch (dir) {
            case DIRECTION.DOWN:
              this._targetRotation = new Vec3(0, 0, 15 * scaleDir);
              break;

            case DIRECTION.UP:
              this._targetRotation = new Vec3(0, 0, -15 * scaleDir);
              break;

            case DIRECTION.RIGHT:
              this._targetRotation = new Vec3(0, 0, 15 * scaleDir);
              break;

            case DIRECTION.LEFT:
              this._targetRotation = new Vec3(0, 0, -15 * scaleDir);
              break;

            default:
              this._targetRotation = new Vec3(0, 0, 0);
          }

          this.node.angle = lerp(this.node.angle, this._targetRotation.z, 0.05);
        };

        _proto._updateZEffect = function _updateZEffect() {
          var scale = 1 + this.node.position.z * 0.06;
          this.node.setScale(new Vec3(scale * this._animScale.x, scale * this._animScale.y, scale * this._animScale.z));
          var y = 9 * this.node.position.z;
          this.zControl.position = new Vec3(0, y, 0);
        };

        return Moving;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "selectLine", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "autoMove", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "autoMovePath", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "zControl", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MovingParticleControl.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts', './CustomEnum.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, UITransform, Node, ParticleSystem2D, tween, GameObject, SlotGameMode;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      UITransform = module.UITransform;
      Node = module.Node;
      ParticleSystem2D = module.ParticleSystem2D;
      tween = module.tween;
    }, function (module) {
      GameObject = module.GameObject;
    }, function (module) {
      SlotGameMode = module.SlotGameMode;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "ef340xZlppFh55PczBHvwLr", "MovingParticleControl", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          requireComponent = _decorator.requireComponent;
      var MovingParticleControl = exports('MovingParticleControl', (_dec = ccclass('MovingParticleControl'), _dec2 = requireComponent(UITransform), _dec3 = property({
        type: SlotGameMode
      }), _dec4 = property({
        type: Node
      }), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(MovingParticleControl, _GameObject);

        function MovingParticleControl() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "currentGameMode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "destination", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "particleMovingPrefabName", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "particleExplodingPrefabName", _descriptor4, _assertThisInitialized(_this));

          _this.poolFactory = null;
          _this.uiTransform = null;
          return _this;
        }

        var _proto = MovingParticleControl.prototype;

        _proto.onEnable = function onEnable() {
          if (this.eventManager) {
            this.eventManager.on("MOVE_PARTICLES", this.moveParticle, this);
            this.eventManager.on('CLEAR_PARTICLES', this.clearParticles, this);
          }

          if (!this.poolFactory) {
            this.poolFactory = this.mainDirector.poolFactory;
          }

          if (!this.uiTransform) this.uiTransform = this.node.getComponent(UITransform);
        };

        _proto.onDisable = function onDisable() {
          if (this.eventManager) {
            this.eventManager.off("MOVE_PARTICLES", this.moveParticle, this);
            this.eventManager.off('CLEAR_PARTICLES', this.clearParticles, this);
          }
        };

        _proto.moveParticle = function moveParticle(gameMode, fromWPos, movingTime, callback) {
          var _this2 = this;

          if (callback === void 0) {
            callback = null;
          }

          if (gameMode === this.currentGameMode) {
            var fLPos = this.uiTransform.convertToNodeSpaceAR(fromWPos);
            var movingpParticle = this.poolFactory.getObject(this.particleMovingPrefabName);
            var explodingParticle = this.poolFactory.getObject(this.particleExplodingPrefabName);

            if (movingpParticle) {
              movingpParticle.parent = this.node;
              movingpParticle.active = true;
              movingpParticle.setPosition(fLPos);
              movingpParticle.getComponent(ParticleSystem2D).resetSystem();

              if (explodingParticle) {
                explodingParticle.parent = this.node;
                explodingParticle.active = true;
                explodingParticle.setPosition(this.destination.getPosition());
                explodingParticle.getComponent(ParticleSystem2D).stopSystem();
                explodingParticle.active = false;
              }

              var movingTween = movingpParticle["particleMoveTween"];
              if (movingTween) movingTween.stop();
              this.soundPlayer && this.soundPlayer.playSfx('PARTICAL_FLY');
              movingpParticle["particleMoveTween"] = tween(movingpParticle).to(movingTime, {
                position: this.destination.getPosition()
              }).call(function () {
                _this2.soundPlayer && _this2.soundPlayer.playSfx('PARTICAL_HIT');
                movingpParticle.getComponent(ParticleSystem2D).stopSystem();

                if (explodingParticle) {
                  explodingParticle.active = true;
                  explodingParticle.getComponent(ParticleSystem2D).resetSystem();
                }

                callback && callback();
              }).delay(1).call(function () {
                movingpParticle.active = false;

                _this2.poolFactory.removeObject(movingpParticle);

                movingpParticle["particleMoveTween"] = null;

                if (explodingParticle) {
                  explodingParticle.getComponent(ParticleSystem2D).stopSystem();
                  explodingParticle.active = false;

                  _this2.poolFactory.removeObject(explodingParticle);
                }
              });
              movingpParticle["particleMoveTween"].start();
            }
          }
        };

        _proto.clearParticles = function clearParticles() {
          var paricles = this.node.children;

          for (var i = 0; i < paricles.length; i++) {
            var particle = paricles[i];

            if (particle) {
              var movingTween = particle["particleMoveTween"];
              if (movingTween) movingTween.stop();
              particle.getComponent(ParticleSystem2D).stopSystem();
              this.poolFactory.removeObject(particle);
            }
          }

          this.node.removeAllChildren();
        };

        return MovingParticleControl;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "currentGameMode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return SlotGameMode.NormalGame;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "destination", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "particleMovingPrefabName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "particleExplodingPrefabName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      })), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MsgKeyMapping.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "6934dePcbhFnLn4TXcbxaYE", "MsgKeyMapping", undefined);

      var MsgReceiveMapping = exports('MsgReceiveMapping', {
        uId: {
          name: 'userId'
        },
        sId: {
          name: 'serviceId'
        },
        cId: {
          name: 'commandId'
        },
        cIdt: {
          name: 'gameCommandId'
        },
        wat: {
          name: 'winAmountPS'
        },
        wa: {
          name: 'winAmount'
        },
        wap1: {
          name: 'winAmountP1'
        },
        ja: {
          name: 'winJackpotAmount'
        },
        wJPAmt: {
          name: 'winJackpotAmount'
        },
        jLn: {
          name: 'jackpotPayline'
        },
        bId: {
          name: 'betId'
        },
        nMx: {
          name: 'normalGameMatrix'
        },
        pl: {
          name: 'payLines'
        },
        nTf: {
          name: 'normalGameTableFormat'
        },
        nLn: {
          name: 'normalGamePaylines'
        },
        nWAmt: {
          name: 'normalGameWinAmount'
        },
        wsc: {
          name: 'winScatterCredit'
        },
        wsa: {
          name: 'winScatterAmount'
        },
        s0: {
          name: 'scatter'
        },
        s1: {
          name: 'scatter1'
        },
        s2: {
          name: 'scatter2'
        },
        bg: {
          name: 'bonusGame'
        },
        fg: {
          name: 'freeGame'
        },
        fso: {
          name: 'freeSpinOption'
        },
        opt: {
          name: 'selectedOption'
        },
        tsc: {
          name: 'totalScatterCredit'
        },
        ssi: {
          name: 'sumScatterInfo'
        },
        fRe: {
          name: 'freeGameRemain'
        },
        fta: {
          name: 'freeGameTotal'
        },
        fMx: {
          name: 'freeGameMatrix'
        },
        fTf: {
          name: 'freeGameTableFormat'
        },
        fLn: {
          name: 'freeGamePaylines'
        },
        fa: {
          name: 'freeGameWinAmount'
        },
        bv: {
          name: 'bonusValue'
        },
        bRe: {
          name: 'bonusGameRemain'
        },
        bTa: {
          name: 'bonusGameTotal'
        },
        bpRe: {
          name: 'bonusPlayRemain'
        },
        ba: {
          name: 'bonusGameWinAmount'
        },
        bMx: {
          name: 'bonusGameMatrix'
        },
        bTf: {
          name: 'bonusGameTableFormat'
        },
        v: {
          name: 'version'
        },
        le: {
          name: 'lastEvent'
        },
        mtx: {
          name: 'matrix'
        },
        nrs: {
          name: 'normalGameResult'
        },
        mtx0: {
          name: 'matrix0'
        },
        pLn: {
          name: 'pLines'
        },
        c: {
          name: 'cChar'
        },
        frs: {
          name: 'freeGameResult'
        },
        brs: {
          name: 'bonusGameResult'
        },
        bcz: {
          name: 'bonusCrazy'
        },
        bcm: {
          name: 'bonusCommon'
        },
        ex: {
          name: 'extend'
        },
        isF: {
          name: 'isFinished',
          type: Boolean
        },
        isT: {
          name: 'isTrialMode',
          type: Boolean
        },
        tW: {
          name: 'trialWallet'
        },
        tJ: {
          name: 'trialJpl'
        },
        na: {
          name: 'normalGameWinAmount'
        },
        tJW: {
          name: 'trialJplWin'
        },
        baC: {
          name: 'bgWinAmtCurrent'
        },
        bLn: {
          name: 'betLines'
        },
        bty: {
          name: 'bType'
        },
        cPh: {
          name: 'cbPhase'
        },
        cbMtx: {
          name: 'cbMatrix'
        },
        pro: {
          name: 'promotion'
        },
        pRe: {
          name: 'promotionRemain'
        },
        pTal: {
          name: 'promotionTotal'
        },
        pCd: {
          name: 'promotionCode'
        },
        wm: {
          name: 'wildMultiply'
        },
        nsm: {
          name: 'subSymbols'
        },
        fsm: {
          name: 'freeSubSymbols'
        },
        oRe: {
          name: 'freeSpinOption'
        },
        msm: {
          name: 'mulSetMys'
        },
        // join game
        exD: {
          name: 'extendData'
        },
        mtD: {
          name: 'metaData'
        },
        mDP: {
          name: 'metaDataPromotion'
        },
        mb: {
          name: 'mBet'
        },
        eb: {
          name: 'eBet'
        },
        ed: {
          name: 'eData'
        },
        gCN: {
          name: 'groupChannelName'
        },
        jp: {
          name: 'jackpotInfo'
        },
        ejp: {
          name: 'extraJackpot'
        },
        evjp: {
          name: 'extraVipJackpot'
        },
        // slot spin request
        serviceId: {
          name: 'sId'
        },
        commandId: {
          name: 'cId'
        },
        token: {
          name: 'tkn'
        },
        betId: {
          name: 'bId'
        },
        betLines: {
          name: 'bLn'
        },
        openCell: {
          name: 'cOp'
        },
        sw: {
          name: 'sureWin'
        },
        // error push
        cd: {
          name: 'code'
        },
        cbMx: {
          name: 'commonBonusMatrix'
        },
        czy: {
          name: 'crazy'
        },
        bi: {
          name: 'bInfo'
        },
        ji: {
          name: 'jpInfo'
        },
        mx: {
          name: 'matrix'
        },
        mx0: {
          name: 'matrix0'
        },
        s: {
          name: 'state'
        },
        nbh: {
          name: 'nextBonusPhase'
        },
        bml: {
          name: 'bonusMultiplierList'
        },
        eba: {
          name: 'extraBonusGameWinAmount'
        },
        gm: {
          name: "gambleRemain"
        },
        gta: {
          name: "gambleTotal"
        },
        gex: {
          name: "gambleExpiredTime"
        },
        gc: {
          name: "gambleCount"
        },
        wt: {
          name: 'winType'
        },
        bwc: {
          name: 'bigWinConfig'
        },
        evl: {
          name: 'eventData'
        },
        wq: {
          name: 'winAmountQuest'
        },
        we: {
          name: 'winAmountEvent'
        },
        eId: {
          name: 'eventId'
        },
        qId: {
          name: 'questId'
        },
        bwa: {
          name: 'bigwinAmount'
        },
        wo: {
          name: 'walletType'
        },
        abro: {
          name: "allBonusRoll"
        },
        bro: {
          name: 'bonusRoll'
        },
        nbro: {
          name: 'normalBonusRoll'
        },
        nxbro: {
          name: "nextBonusRolls"
        },
        fbro: {
          name: "freeBonusRolls"
        },
        nud: {
          name: 'nudge'
        },
        swf: {
          name: 'stackWildFormat'
        },
        mul: {
          name: 'multiplier'
        },
        nsw: {
          name: 'normalStackWildFormat'
        },
        fsw: {
          name: 'freeStackWildFormat'
        },
        bph: {
          name: 'bonusPhase'
        },
        jpo: {
          name: 'jackpotOption'
        },
        gMx: {
          name: 'gunMatrix'
        },
        fea: {
          name: 'feature'
        }
      });
      var MsgSendMapping = exports('MsgSendMapping', {
        serviceId: {
          name: 'sId'
        },
        commandId: {
          name: 'cId'
        },
        token: {
          name: 'tkn'
        },
        betId: {
          name: 'bId'
        },
        betLines: {
          name: 'bLn'
        },
        openCell: {
          name: 'cOp'
        },
        option: {
          name: 'opt'
        },
        totalBet: {
          name: 'talB'
        },
        code: {
          name: 'c'
        },
        userId: {
          name: 'uId'
        }
      });
      var MsgTopUserMapping = exports('MsgTopUserMapping', {
        wTp: {
          name: 'winType'
        },
        av: {
          name: 'avatar'
        },
        wAwmt: {
          name: 'winAmount'
        },
        dn: {
          name: 'playerName'
        },
        ul: {
          name: 'userList'
        },
        wAmt: {
          name: 'winAmount'
        },
        t: {
          name: 'time'
        }
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Mummy1989.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseFish.ts', './gfActionHelper.ts', './gfDataStore.ts', './gfEventEmitter.ts', './gfBaseEvents.ts', './MechanismComponent1989.ts', './gfUtilities.ts', './utils.ts', './MapConfig.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, sp, tween, Vec3, gfBaseFish, moveTo, fadeOut, call, gfDataStore, gfEventEmitter, gfBaseEvents, MechanismComponent1989, v2Distance, getPointBetweenTwoPointByPercent, setOpacity, MapConfig;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
      tween = module.tween;
      Vec3 = module.Vec3;
    }, function (module) {
      gfBaseFish = module.gfBaseFish;
    }, function (module) {
      moveTo = module.moveTo;
      fadeOut = module.fadeOut;
      call = module.call;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      MechanismComponent1989 = module.MechanismComponent1989;
    }, function (module) {
      v2Distance = module.v2Distance;
      getPointBetweenTwoPointByPercent = module.getPointBetweenTwoPointByPercent;
    }, function (module) {
      setOpacity = module.setOpacity;
    }, function (module) {
      MapConfig = module.MapConfig;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "0d3e58IZKBCqLQ1lQzq4wHC", "Mummy1989", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Mummy1989 = exports('Mummy1989', (_dec = ccclass('Mummy1989'), _dec2 = property(sp.Skeleton), _dec(_class = (_class2 = /*#__PURE__*/function (_gfBaseFish) {
        _inheritsLoose(Mummy1989, _gfBaseFish);

        function Mummy1989() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfBaseFish.call.apply(_gfBaseFish, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "mummyAnim", _descriptor, _assertThisInitialized(_this));

          _this.dimComponent = null;
          _this.scheduleFade = null;
          _this._mapConfig = null;
          _this.currentOpacity = 255;
          return _this;
        }

        var _proto = Mummy1989.prototype;

        _proto.onLoad = function onLoad() {
          _gfBaseFish.prototype.onLoad.call(this);

          this._mapConfig = new MapConfig({
            gridSizeX: 30,
            gridSizeY: 30,
            gridWidth: 96,
            gridHeight: 48
          });
        };

        _proto.initAssets = function initAssets(config) {
          _gfBaseFish.prototype.initAssets.call(this, config);

          var asset = config.asset,
              cacheMode = config.cacheMode,
              AnimationName = config.AnimationName,
              customAnimProp = config.customAnimProp;

          if (!this.mummyAnim) {
            this.mummyAnim = this.node.getComponentInChildren(sp.Skeleton);
          }

          if (this.mummyAnim.skeletonData.name != asset.name) {
            this.mummyAnim.skeletonData = asset;
          }

          if (!this.dimComponent) {
            this.dimComponent = this.node.getComponentInChildren(MechanismComponent1989);
            this.dimComponent.setUpBoxColliders(config.BoxCollider);
            this.dimComponent.activeMachanism(false);
            this.dimComponent.node.active = false;
          }

          this.currentOpacity = 255;
          this.resetColor();
          this.mummyAnim.setAnimationCacheMode(cacheMode ? cacheMode : sp.Skeleton.AnimationCacheMode.REALTIME);
          this.mummyAnim.setAnimation(0, AnimationName ? AnimationName[0] : 'Walk', true);

          if (customAnimProp) {
            Object.assign(this.mummyAnim.node, customAnimProp);
          }

          this.node.setScale(1.3, 1.3);
        };

        _proto.initFishData = function initFishData(data) {
          var FishID = data.FishID,
              FishKind = data.FishKind,
              isResume = data.isResume,
              zIndex = data.zIndex,
              Position = data.Position,
              BuildTick = data.BuildTick;
          this._FishID = FishID;
          this._FishKind = FishKind;
          this._isDie = false;
          this._buildTick = BuildTick;
          this._timeLost = Math.max(0, (gfDataStore.instance.getTime() - this._buildTick) / 1000);
          this.updateZIndex(zIndex);
          this.moveByPath(Position, isResume);
        };

        _proto.moveByPath = function moveByPath(gridIds, isResume) {
          var _this2 = this;

          var totalTimeLost = this._timeLost ? this._timeLost : 0;
          var startPos = this.convertGridIdToPosition(gridIds[0]);
          this.node.setPosition(startPos);
          this.moveAction = tween(this.node);

          for (var i = 1; i < gridIds.length; ++i) {
            var nextPos = this.convertGridIdToPosition(gridIds[i]);
            var distance = v2Distance(nextPos, startPos);
            var dur = distance / this._mapConfig.gridSize * this["speed"];
            var moveTime = Math.max(dur - totalTimeLost, 0);

            if (isResume && totalTimeLost > 0) {
              if (dur > totalTimeLost) {
                var fPoint = getPointBetweenTwoPointByPercent(startPos, nextPos, totalTimeLost / dur);
                startPos = new Vec3(fPoint.x, fPoint.y);
                this.node.setPosition(startPos);
                totalTimeLost = 0;
              } else {
                totalTimeLost = totalTimeLost - dur;
              }
            }

            if (moveTime) {
              this.moveAction.then(moveTo(moveTime, nextPos.x, nextPos.y));
            }

            startPos = nextPos;
          }

          this.moveAction.call(function () {
            _this2.onDie();
          });
          this.moveAction.start();
        };

        _proto.updateAngle = function updateAngle() {
          var startPos = this["_lastPos"];
          var endPos = this.node.getPosition();

          if (startPos && endPos) {
            if (endPos.x > startPos.x && endPos.y > startPos.y) {
              //Up
              this.mummyAnim.setSkin("Back");
              this.mummyAnim.node.setScale(1, 1);
            }

            if (endPos.x < startPos.x && endPos.y < startPos.y) {
              //Down
              this.mummyAnim.setSkin("Front");
              this.mummyAnim.node.setScale(1, 1);
            }

            if (endPos.x < startPos.x && endPos.y > startPos.y) {
              //Left
              this.mummyAnim.setSkin("Back");
              this.mummyAnim.node.setScale(-1, 1);
            }

            if (endPos.x > startPos.x && endPos.y < startPos.y) {
              //Right
              this.mummyAnim.setSkin("Front");
              this.mummyAnim.node.setScale(-1, 1);
            }
          }

          this["_lastPos"] = endPos;
        };

        _proto.onCatch = function onCatch(data) {
          var _this3 = this;

          if (data.isCheckedFakeBullet === undefined) {
            if (this.needFakeBullet(data)) {
              this.createFakeBullet(data);
              return;
            }
          }

          this._isDie = true;
          this.onPlayEffectWinInCatchFish(data);
          this.stopAllActions();
          this.resetColor();
          this.playEffectDie();
          this.dimComponent && this.dimComponent.activeMachanism(false);
          this.moveAction = tween(this.node).then(fadeOut(0.5)).then(call(function () {
            _this3.onDie();
          })).start();
        };

        _proto.onPlayEffectWinInCatchFish = function onPlayEffectWinInCatchFish(data) {
          gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.PLAY_REWARD_EFFECT, {
            data: data,
            fishKind: this._FishKind,
            fishPos: this.getLockPositionByWorldSpace(),
            footPos: this.node.worldPosition
          });
        };

        _proto.resetColor = function resetColor() {
          this.mummyAnim.color = this.NORMAL_COLOR;
          setOpacity(this.mummyAnim.node, this.currentOpacity);
        };

        _proto.setColor = function setColor(color) {
          this.mummyAnim.color = color;
          setOpacity(this.mummyAnim.node, this.currentOpacity);
        };

        _proto.convertGridIdToPosition = function convertGridIdToPosition(gridId) {
          var originPos = {
            x: -641,
            y: -360
          };

          var _this$_mapConfig$grid = this._mapConfig.gridIdToGrid(gridId),
              X = _this$_mapConfig$grid.X,
              Y = _this$_mapConfig$grid.Y;

          var _this$_mapConfig$grid2 = this._mapConfig.gridToPosition(X, Y),
              x = _this$_mapConfig$grid2.x,
              y = _this$_mapConfig$grid2.y;

          return new Vec3(x - originPos.x, y - originPos.y);
        };

        _proto.stopLock = function stopLock() {
          this.enabledLock(false);
          this.dimMummy(false);
        };

        _proto.enabledLock = function enabledLock(isEnable) {
          if (isEnable === void 0) {
            isEnable = false;
          }

          if (isEnable) {
            this.dimMummy(false);
          }

          if (this.dimComponent) {
            this.dimComponent.activeMachanism(isEnable);
            this.dimComponent.node.active = isEnable;
          }
        };

        _proto.checkLockFish = function checkLockFish() {
          return this.dimComponent && this.dimComponent.node.active;
        };

        _proto.dimMummy = function dimMummy(isDim) {
          if (isDim === void 0) {
            isDim = false;
          }

          if (!this.mummyAnim) return;
          var opacity = isDim ? 153 : 255;
          setOpacity(this.mummyAnim.node, opacity);
          this.currentOpacity = opacity;
        };

        return Mummy1989;
      }(gfBaseFish), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "mummyAnim", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MummySpawner.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Moving.ts', './GridRenderer.ts', './MapManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, sp, Prefab, Node, instantiate, Component, Moving, GridRenderer, MapManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
      Prefab = module.Prefab;
      Node = module.Node;
      instantiate = module.instantiate;
      Component = module.Component;
    }, function (module) {
      Moving = module.Moving;
    }, function (module) {
      GridRenderer = module.GridRenderer;
    }, function (module) {
      MapManager = module.MapManager;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "481a533LYFF1Y1SIIbJtZPt", "MummySpawner", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var debug = {
        "Object_2": {
          index: 0
        },
        "Object_3": {
          index: 1
        },
        "Object_1": {
          index: 2
        },
        "mummyPrefab1": {
          index: 3,
          "pos": {
            "x": -156.15904322416378,
            "y": 191.9204783879181,
            "z": 0
          }
        },
        "Object_4.2": {
          index: 4
        },
        "Object_4.7": {
          index: 5
        },
        "Object_4.8": {
          index: 6
        },
        "Object_4.1": {
          index: 7
        },
        "Object_4.4": {
          index: 8
        },
        "Object_4.5": {
          index: 9
        },
        "Object_4.3": {
          index: 10
        },
        "mummyPrefab2": {
          index: 11,
          "pos": {
            "x": 400.47660809068805,
            "y": 105.76169595465599,
            "z": 0
          }
        },
        "Object_5": {
          index: 12
        },
        "mummyPrefab3": {
          index: 13,
          "pos": {
            "x": 448.0102467188985,
            "y": 81.99487664055076,
            "z": 0
          }
        },
        "mummyPrefab4": {
          index: 14,
          "pos": {
            "x": 319.6493061533321,
            "y": 74.17534692333395,
            "z": 0
          }
        },
        "Object_6": {
          index: 15
        },
        "Object_4.6": {
          index: 16
        },
        "mummyPrefab5": {
          index: 17,
          "pos": {
            "x": 696.1590432241638,
            "y": -29.920478387918102,
            "z": 0
          }
        },
        "mummyPrefab6": {
          index: 18,
          "pos": {
            "x": 637.2042638046977,
            "y": -84.60213190234883,
            "z": 0
          }
        }
      };
      var MummySpawner = exports('MummySpawner', (_dec = ccclass('MummySpawner'), _dec2 = property({
        type: sp.SkeletonData
      }), _dec3 = property({
        type: Prefab
      }), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: GridRenderer
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MummySpawner, _Component);

        function MummySpawner() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "animation", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "mummyPrefab", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "objectHolder", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "gridRenderer", _descriptor4, _assertThisInitialized(_this));

          _this._mapManager = null;
          return _this;
        }

        var _proto = MummySpawner.prototype;

        _proto.onLoad = function onLoad() {
          this._mapManager = this.node.getComponent(MapManager);
        };

        _proto.start = function start() {
          this.startSpawn();
        };

        _proto.startSpawn = function startSpawn() {
          /*const data = demoData[0];
          for (let i=0; i<6; i++) {
              let mummyNode = instantiate(this.mummyPrefab);
              mummyNode.setParent(this.objectHolder);
              mummyNode.isMummy = true;
              mummyNode.name = "mummyPrefab" + (i +1);
              mummyNode.setPosition(debug[mummyNode.name].pos);
          }
          this.sortObjectDebug();*/
        };

        _proto.sortObjectDebug = function sortObjectDebug() {
          var _this2 = this;

          Object.keys(debug).forEach(function (name, i) {
            var oj = _this2.getObject(name);

            if (oj) oj.setSiblingIndex(i);
          });
        };

        _proto.getObject = function getObject(name) {
          return this.objectHolder.children.filter(function (it) {
            return it.name == name;
          })[0];
        };

        _proto.pathGridToPosition = function pathGridToPosition(path) {
          var _this3 = this;

          return path.map(function (it) {
            return _this3._mapManager.gridCenterToPosition(it.r, it.c);
          });
        };

        _proto.getSkeleton = function getSkeleton(name) {
          var result = null;
          this.animation.forEach(function (anim) {
            if (anim.name == name) {
              result = anim;
            }
          });
          return result;
        };

        _proto.changeAnimByName = function changeAnimByName(target, animName) {
          var skeleton = this.getSkeleton(animName);

          if (skeleton) {
            this.changeAnim(target, skeleton);
          }
        };

        _proto.changeAnim = function changeAnim(target, skeleton) {
          var spineComp = target.getComponent(Moving).getSpine();
          spineComp.skeletonData = skeleton;
          spineComp.setAnimation(0, 'Walk', true);
          spineComp.setSkin('Front');
        };

        _proto.spawnRandomOne = function spawnRandomOne() {
          var col = 12 + Math.floor(Math.random() * 19);
          var row = 13 + Math.floor(Math.random() * 3);
          var anim = this.animation[Math.floor(Math.random() * this.animation.length)];
          var mummyNode = instantiate(this.mummyPrefab);
          mummyNode.setParent(this.objectHolder);
          mummyNode.isMummy = true;
          var mummy = mummyNode.getComponent(Moving);
          this.changeAnim(mummy, anim);
          mummy.setMapManager(this._mapManager);
          mummy.setPosition(this._mapManager.gridCenterToPosition(row, col));
          mummy.setSpeed(50);
          setTimeout(function () {
            mummy.setAutoMove(true);
          }, 1000);
        };

        _proto.removeRandomOne = function removeRandomOne() {
          var mummyList = this.objectHolder.children.filter(function (it) {
            return it.isMummy;
          });
          var random = mummyList[Math.floor(Math.random() * mummyList.length)];
          random.destroy();
        };

        return MummySpawner;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "animation", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "mummyPrefab", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "objectHolder", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "gridRenderer", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MyUserInfoController1989.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfUtilities.ts', './EventsCode1989.ts', './Config1989.ts', './gfWallet.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Sprite, Component, registerEvent, formatUserName, removeEvents, EventsCode1989, Config1989, gfWallet;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Sprite = module.Sprite;
      Component = module.Component;
    }, function (module) {
      registerEvent = module.registerEvent;
      formatUserName = module.formatUserName;
      removeEvents = module.removeEvents;
    }, function (module) {
      EventsCode1989 = module.default;
    }, function (module) {
      Config1989 = module.default;
    }, function (module) {
      gfWallet = module.gfWallet;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "35023TmxbNKz47UmkS2Kslu", "MyUserInfoController1989", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TYPE_WALLET = {
        ADD_GOLD_REWARD: "ADD_GOLD_REWARD",
        ADD_DISPLAY_WALLET: "ADD_DISPLAY_WALLET",
        ADD_FORCE_UPDATE: "ADD_FORCE_UPDATE"
      };
      var MyUserInfoController = exports('MyUserInfoController', (_dec = ccclass('MyUserInfoController'), _dec2 = property(Label), _dec3 = property(gfWallet), _dec4 = property(Sprite), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MyUserInfoController, _Component);

        function MyUserInfoController() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "txtUserName", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "wallet", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "avatar", _descriptor3, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = MyUserInfoController.prototype;

        _proto.onLoad = function onLoad() {
          this.node.active = false;
          this.initEvents();
        };

        _proto.initEvents = function initEvents() {
          registerEvent(EventsCode1989.COMMON.EXIT_GAME_ROOM, this.resetOnExit, this);
          registerEvent(EventsCode1989.GAME_LAYER.INIT_MY_USER_INFO, this.initData, this);
          registerEvent(EventsCode1989.GAME_LAYER.UPDATE_WALLET_MY_USER, this.updateWallet, this);
        };

        _proto.initData = function initData(data, avatarAtlas) {
          this.node.active = true;
          this.txtUserName.string = formatUserName(data.Username);
          this.wallet.forceUpdateWallet(data.Wallet);
          this.updateAvatar(avatarAtlas, data.Avatar);
        };

        _proto.updateWallet = function updateWallet(data) {
          var wallet = data.wallet,
              type = data.type;

          if (type == TYPE_WALLET.ADD_GOLD_REWARD) {
            this.wallet.addGoldReward(wallet);
          } else if (type == TYPE_WALLET.ADD_DISPLAY_WALLET) {
            this.wallet.addToDisplay(wallet);
          } else if (type == TYPE_WALLET.ADD_FORCE_UPDATE) {
            this.wallet.forceUpdateWallet(wallet);
          } else {
            this.wallet.updateWallet(wallet);
          }
        };

        _proto.updateAvatar = function updateAvatar(avatarAtlas, avatar) {
          if (avatarAtlas) {
            var frameAvatar = avatarAtlas.getSpriteFrame(avatar);

            if (!frameAvatar) {
              frameAvatar = avatarAtlas.getSpriteFrame(Config1989.instance.DEFAULT_AVATAR);
            }

            this.avatar.spriteFrame = frameAvatar;
          }
        };

        _proto.resetOnExit = function resetOnExit() {
          this.node.active = false;
          this.txtUserName.string = "";
          this.wallet.resetOnExit();
          this.avatar.spriteFrame = null;
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return MyUserInfoController;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "txtUserName", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "wallet", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "avatar", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NativeSoundPlayer.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, _decorator, log, Node, AudioSource, sys, Vec3, warn, tween, error;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      log = module.log;
      Node = module.Node;
      AudioSource = module.AudioSource;
      sys = module.sys;
      Vec3 = module.Vec3;
      warn = module.warn;
      tween = module.tween;
      error = module.error;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "2d38eZL5P9DurGNhhptSL0Y", "NativeSoundPlayer", undefined);

      var ccclass = _decorator.ccclass;
      var NativeSoundPlayer = exports('NativeSoundPlayer', (_dec = ccclass('NativeSoundPlayer'), _dec(_class = /*#__PURE__*/function () {
        function NativeSoundPlayer() {
          this.musicMap = {};
          this.sfxMap = {};
          this.musicList = null;
          this.sfxList = null;
          this.musicAudioNode = null;
          this.currentMusicVolumn = 0;
          this.musicAudioSource = null;
          this.currentMusic = null;
          this._musicTween = null;
          this._soundTweens = {};
          this._gameNode = null;
          this._isMusicPlaying = false;
          this._playingSfxAudioSources = [];
          this._isAppHide = false;
          this._isThumbMode = false;
        }

        var _proto = NativeSoundPlayer.prototype;

        _proto.init = function init(musicList, sfxList, gameNode) {
          var _this = this;

          log('native sound init');
          this.musicList = musicList;
          this.sfxList = sfxList;
          this.musicList.forEach(function (soundObj) {
            _this.musicMap[soundObj.soundId] = soundObj;
          });
          this.sfxList.forEach(function (soundObj) {
            _this.sfxMap[soundObj.soundId] = soundObj;
          });
          this._gameNode = gameNode;
          this.createMusicAudioSource();
        };

        _proto.createMusicAudioSource = function createMusicAudioSource() {
          if (!this.musicAudioNode) {
            this.musicAudioNode = new Node("MusicAudio");
            this.musicAudioNode.parent = this._gameNode;
            this.musicAudioNode.active = false;
            this.musicAudioSource = this.musicAudioNode.addComponent(AudioSource);
            this.musicAudioSource.playOnAwake = false;
            this.musicAudioSource['isMusicSrc'] = true;
          }
        };

        _proto.setThumbMode = function setThumbMode(isThumbMode) {
          this._isThumbMode = isThumbMode;
        };

        _proto.loadDynamicSounds = function loadDynamicSounds(sfxList, callback) {
          var _this2 = this;

          if (sfxList && sfxList.length > 0) {
            sfxList.forEach(function (audioObj) {
              if (audioObj.isMusic) {
                if (!_this2.musicMap[audioObj.soundId]) {
                  _this2.musicMap[audioObj.soundId] = audioObj;
                }
              } else if (audioObj.isEffect) {
                if (!_this2.sfxMap[audioObj.soundId]) {
                  _this2.sfxMap[audioObj.soundId] = audioObj;
                }
              }
            });
            callback && callback();
          } else {
            this.resetAudioMaps();
          }
        };

        _proto.resetAudioMaps = function resetAudioMaps() {
          for (var key in this.musicMap) {
            var musicObj = this.musicMap[key];

            if (musicObj && musicObj.destroyedOnSwitchMode) {
              this.musicMap[key] = null;
              delete this.musicMap[key];
            }
          }

          if (this.currentMusic && this.currentMusic.destroyedOnSwitchMode) {
            this.currentMusic = null;
          }

          for (var _key in this.sfxMap) {
            var soundObj = this.sfxMap[_key];

            if (soundObj && soundObj.destroyedOnSwitchMode) {
              if (soundObj.audioSource && soundObj.audioSource.node) {
                soundObj.audioSource.node.destroy();
              }

              this.sfxMap[_key] = null;
              delete this.sfxMap[_key];
            }
          }
        };

        _proto.onEventShow = function onEventShow(isEnableMusic, isEnableSfx) {
          this._isAppHide = false;
          isEnableMusic = isEnableMusic && this._isMusicPlaying;

          if (sys.os == sys.OS.IOS) {
            this.resetSFX(isEnableSfx);
            this.resetMusic(isEnableMusic);
          }

          if (sys.os == sys.OS.WINDOWS) {
            this.resetMusic(isEnableMusic);
          }
        };

        _proto.onEventHide = function onEventHide() {
          this._isAppHide = true;

          if (sys.os == sys.OS.IOS) {
            this.currentMusicVolumn = this.musicAudioSource.volume;
            this.musicAudioSource.volume = 0;
          }

          if (sys.os == sys.OS.WINDOWS) {
            this.currentMusicVolumn = this.musicAudioSource.volume;
            this.musicAudioSource.volume = 0;
            this.pauseMusic();
          }
        };

        _proto.playMusic = function playMusic(id, loop, volume) {
          if (loop === void 0) {
            loop = true;
          }

          if (this.musicMap.hasOwnProperty(id) == false) {
            return null;
          }

          if (!this.musicAudioNode.active) {
            this.musicAudioNode.active = true;
          }

          if (this.currentMusic && this.currentMusic.soundId == id && !this.musicAudioSource.playing) {
            this.musicAudioSource.clip = this.currentMusic.audioFile;
            this.musicAudioSource.play();
            this.musicAudioSource.loop = loop;
            this.musicAudioSource.volume = volume;
          } else {
            if (this.currentMusic && this.currentMusic.soundId == id) return this.currentMusic;
            if (this.currentMusic) this.musicAudioSource.stop();
            this.currentMusic = this.musicMap[id];

            if (this.currentMusic) {
              this.musicAudioSource.clip = this.currentMusic.audioFile;
              this.musicAudioSource.play();
              this.musicAudioSource.loop = loop;
              this.musicAudioSource.volume = volume;
            }
          }

          this._isMusicPlaying = true;
          log("%cSOUND playMusic", "color:red", id);
        };

        _proto.getCurrentMusic = function getCurrentMusic() {
          return this.musicAudioSource;
        };

        _proto.pauseMusic = function pauseMusic() {
          this.currentMusic && this.musicAudioSource.pause();
        };

        _proto.resumeMusic = function resumeMusic() {
          this._isMusicPlaying && this.currentMusic && this.musicAudioSource.play();
        };

        _proto.stopMusic = function stopMusic() {
          this._isMusicPlaying = false;
          this.currentMusic && this.musicAudioSource && this.musicAudioSource.stop();
        };

        _proto.setMusicVolume = function setMusicVolume(volume) {
          this.musicAudioSource.volume = volume;
        };

        _proto.muteMusic = function muteMusic() {
          if (this.musicAudioSource) {
            this.musicAudioSource.volume = 0;
          }
        };

        _proto.unmuteMusic = function unmuteMusic(volume) {
          if (volume === void 0) {
            volume = 1;
          }

          if (this.musicAudioSource) {
            this.musicAudioSource.volume = volume;
          }
        };

        _proto.playSfx = function playSfx(id, loop, volume) {
          if (loop === void 0) {
            loop = false;
          }

          if (!this.sfxMap.hasOwnProperty(id) || this._isAppHide) {
            log("SOUND playSfx, do not have sfx: " + id);
            return null;
          }

          var soundObj = this.sfxMap[id];

          if (!soundObj.audioSource) {
            soundObj.audioSource = this._createSfxAudioSource(soundObj);
          }

          this._discardOnePlayingIfNeeded();

          if (soundObj.audioSource.node) {
            soundObj.audioSource.play();
            soundObj.audioSource.loop = loop;

            if (typeof volume === "number") {
              soundObj.audioSource.volume = volume;
            }
          }

          log("%cSOUND playSfx", "color: blue", id);
          return soundObj.audioSource;
        };

        _proto._createSfxAudioSource = function _createSfxAudioSource(soundObj) {
          var sfxNode = new Node("SFX_" + soundObj.soundId);
          var audioSource = sfxNode.addComponent(AudioSource);
          audioSource.playOnAwake = false;
          audioSource['soundId'] = soundObj.soundId;
          audioSource["ignoreCheckMaxChannel"] = soundObj.ignoreCheckMaxChannel;
          audioSource.clip = soundObj.audioFile;
          sfxNode.parent = this._gameNode;
          sfxNode.setPosition(new Vec3(0, 0, 0));
          sfxNode.on(AudioSource.EventType.STARTED, this._addPlayingAudioSource, this);
          sfxNode.on(AudioSource.EventType.ENDED, this._removePlayingAudioSource, this);
          return audioSource;
        };

        _proto._addPlayingAudioSource = function _addPlayingAudioSource(audioSource) {
          if (this._playingSfxAudioSources.includes(audioSource)) return;

          this._playingSfxAudioSources.push(audioSource);
        };

        _proto._removePlayingAudioSource = function _removePlayingAudioSource(audioSource) {
          var index = this._playingSfxAudioSources.indexOf(audioSource);

          if (index >= 0) this._playingSfxAudioSources.splice(index, 1);

          if (audioSource["isOneShot"]) {
            var soundId = audioSource['soundId'];
            var soundObj = this.sfxMap[soundId];
            soundObj && soundObj.audioSourcePool.push(audioSource);
          }
        };

        _proto._discardOnePlayingIfNeeded = function _discardOnePlayingIfNeeded() {
          if (this._playingSfxAudioSources.length < AudioSource.maxAudioChannel) return;

          for (var i = 0; i < this._playingSfxAudioSources.length; i++) {
            var audioSource = this._playingSfxAudioSources[i];

            if (!audioSource['ignoreCheckMaxChannel']) {
              var index = this._playingSfxAudioSources.indexOf(audioSource);

              log("Sound: discardOnePlaying ", audioSource);

              this._playingSfxAudioSources.splice(index, 1);

              audioSource.stop();
              return;
            }
          }
        };

        _proto.playSfxOneShot = function playSfxOneShot(id, volume, loop) {
          if (loop === void 0) {
            loop = false;
          }

          if (!this.sfxMap.hasOwnProperty(id)) {
            warn("SOUND, playSfxOneShot: do not have sfx: " + id);
            return null;
          }

          this._discardOnePlayingIfNeeded();

          var soundObj = this.sfxMap[id];

          var audioSource = this._getSfxOneShotAudioSource(soundObj);

          if (typeof volume === "number") audioSource.volume = volume;
          audioSource.play();
          audioSource.loop = loop;
          log("SOUND, playSfxOneShot: " + id);
          return audioSource;
        };

        _proto._getSfxOneShotAudioSource = function _getSfxOneShotAudioSource(soundObj) {
          var audioSource = soundObj.audioSourcePool.pop();

          if (!audioSource) {
            audioSource = this._createSfxAudioSource(soundObj);
            audioSource['isOneShot'] = true;
          }

          return audioSource;
        };

        _proto._testMaxAudioChanel = function _testMaxAudioChanel() {
          var _this3 = this;

          var tweenSound = tween(this._gameNode);

          var _loop = function _loop(id) {
            tweenSound.delay(0.05).call(function () {
              _this3.playSfx(id);
            });
          };

          for (var id in this.sfxMap) {
            _loop(id);
          }

          tweenSound.start();
        }
        /**
         * @stop_sfx by soundId, including playOneShot
         */
        ;

        _proto.stopSfx = function stopSfx(soundId) {
          var _this4 = this;

          var soundObj = this.sfxMap[soundId];
          if (!soundObj) return warn("SOUND stopSfx, do not have sfx: " + soundId);

          this._playingSfxAudioSources.forEach(function (audioSource) {
            if (audioSource['soundId'] === soundId) {
              audioSource.playing && audioSource.stop();

              _this4._removePlayingAudioSource(audioSource);
            }
          });
        };

        _proto.stopSfxOneShot = function stopSfxOneShot(audioSource) {
          audioSource.playing && audioSource.stop();

          this._removePlayingAudioSource(audioSource);
        }
        /**
        * @stop_all_sfx including playOneShot
        */
        ;

        _proto.stopAllEffects = function stopAllEffects() {
          this._playingSfxAudioSources.forEach(function (audioSource) {
            return audioSource.stop();
          });

          this._playingSfxAudioSources.length = 0;
        };

        _proto.pauseAllEffects = function pauseAllEffects() {
          this._playingSfxAudioSources.forEach(function (audioSource) {
            log("%cSOUND pauseAllEffects", "color: orange", audioSource['soundId']);
            audioSource.pause();
          });
        };

        _proto.setEffectVolume = function setEffectVolume(volume) {
          volume = volume < 0 ? 0 : volume;

          for (var key in this.sfxMap) {
            var soundObj = this.sfxMap[key];

            if (soundObj && soundObj.audioSource) {
              soundObj.audioSource.volume = volume;
              soundObj.audioSourcePool.forEach(function (audioSource) {
                return audioSource.volume = volume;
              });
            }
          }

          this._playingSfxAudioSources.forEach(function (audioSource) {
            return audioSource.volume = volume;
          });
        };

        _proto.resetMusic = function resetMusic(isEnableMusic) {
          var _this5 = this;

          var currentMusicTime = 0;
          tween(this._gameNode).call(function () {
            currentMusicTime = _this5.musicAudioSource.currentTime;

            _this5.musicAudioSource.stop();
          }).call(function () {
            _this5.musicAudioSource.play();
          }).call(function () {
            _this5.musicAudioSource.pause();
          }).call(function () {
            _this5.musicAudioSource.currentTime = currentMusicTime;
            _this5.musicAudioSource.volume = _this5.currentMusicVolumn;

            _this5.musicAudioSource.play();

            if (isEnableMusic && !_this5._isThumbMode) {
              _this5.unmuteMusic();
            } else {
              _this5.muteMusic();
            }
          }).start();
        };

        _proto.resetSFX = function resetSFX(isEnableSfx) {
          var audioSources = this._gameNode.getComponentsInChildren(AudioSource);

          audioSources = audioSources.filter(function (it) {
            return it.playing && !it['isMusicSrc'];
          });
          tween(this._gameNode).call(function () {
            audioSources.forEach(function (it) {
              if (it.playing) {
                it['_cacheCurrentTime'] = it.currentTime;
                it.stop();
              }
            });
          }).call(function () {
            audioSources.forEach(function (it) {
              if (it['_cacheCurrentTime']) {
                it.play();
              }
            });
          }).call(function () {
            audioSources.forEach(function (it) {
              if (it['_cacheCurrentTime']) {
                it.pause();
              }
            });
          }).call(function () {
            audioSources.forEach(function (it) {
              if (it['_cacheCurrentTime']) {
                it.currentTime = it['_cacheCurrentTime'];
                it['_cacheCurrentTime'] = null;
                if (isEnableSfx) it.play();
              }
            });
          }).start();
        };

        _proto.fadeMusicTo = function fadeMusicTo(duration, volume) {
          var _this6 = this;

          this._musicTween && this._musicTween.stop();
          this._musicTween = tween(this.musicAudioSource).to(duration, {
            volume: volume
          }).call(function () {
            _this6._musicTween = null;
          }).start();
        };

        _proto.fadeSoundTo = function fadeSoundTo(soundId, duration, volume) {
          var _this7 = this;

          var soundObj = this.sfxMap[soundId];
          if (!soundObj) return error("do not have sound", soundId, soundObj);
          if (!soundObj.audioSource) return error("do not have audio source", soundId, soundObj);

          if (soundObj["tweenSound"]) {
            soundObj["tweenSound"].stop();
            delete this._soundTweens[soundId];
          }

          soundObj["tweenSound"] = tween(soundObj.audioSource).to(duration, {
            volume: volume
          }).call(function () {
            delete soundObj["tweenSound"];
            delete _this7._soundTweens[soundId];
          }).start();
          this._soundTweens[soundId] = soundObj["tweenSound"];
        };

        _proto.stopAllAudio = function stopAllAudio() {
          this._musicTween && this._musicTween.stop();
          this._musicTween = null;
          this.stopMusic();

          for (var soundId in this._soundTweens) {
            var soundObj = this.sfxMap[soundId];

            if (soundObj['tweenSound']) {
              soundObj['tweenSound'].stop();
              delete soundObj['tweenSound'];
              delete this._soundTweens['soundId'];
            }
          }

          this.stopAllEffects();
        };

        _proto.onDestroy = function onDestroy() {};

        return NativeSoundPlayer;
      }()) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NetFX1989.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfNetFX.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, gfNetFX;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfNetFX = module.gfNetFX;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "0ecd2nkZRBMPbZAoSdRki9e", "NetFX1989", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var NetFX1989 = exports('NetFX1989', (_dec = ccclass('NetFX1989'), _dec(_class = /*#__PURE__*/function (_gfNetFX) {
        _inheritsLoose(NetFX1989, _gfNetFX);

        function NetFX1989() {
          return _gfNetFX.apply(this, arguments) || this;
        }

        var _proto = NetFX1989.prototype;

        _proto.initAssets = function initAssets(config) {
          var _this = this;

          this._animationName = 'animation';
          this.spine.skeletonData = config.asset;
          this.spine.setAnimation(0, this._animationName, false);
          this.spine.setCompleteListener(function () {
            _this.returnPool();
          });
        };

        return NetFX1989;
      }(gfNetFX)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NetworkEnum.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, Enum;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Enum = module.Enum;
    }],
    execute: function () {
      exports({
        NetworkEvent: void 0,
        NetworkState: void 0
      });

      cclegacy._RF.push({}, "69da7hSa1dNqqhzf20lfzP2", "NetworkEnum", undefined);

      var NetworkEvent;

      (function (NetworkEvent) {
        NetworkEvent[NetworkEvent["FAIL_AUTHENTICATION"] = 0] = "FAIL_AUTHENTICATION";
        NetworkEvent[NetworkEvent["FAIL_CONNECT_SERVER"] = 1] = "FAIL_CONNECT_SERVER";
        NetworkEvent[NetworkEvent["SLOW_CONNECTION"] = 2] = "SLOW_CONNECTION";
        NetworkEvent[NetworkEvent["SOCKET_LOST_CONNECTION"] = 3] = "SOCKET_LOST_CONNECTION";
        NetworkEvent[NetworkEvent["SOCKET_RESUME_CONNECTION"] = 4] = "SOCKET_RESUME_CONNECTION";
        NetworkEvent[NetworkEvent["RESUME_CONNECTION"] = 5] = "RESUME_CONNECTION";
        NetworkEvent[NetworkEvent["TIMEOUT_REQUEST_DIE"] = 6] = "TIMEOUT_REQUEST_DIE";
        NetworkEvent[NetworkEvent["TIMEOUT_REQUEST_WAIT"] = 7] = "TIMEOUT_REQUEST_WAIT";
        NetworkEvent[NetworkEvent["BACKEND_ERROR_CODE"] = 8] = "BACKEND_ERROR_CODE";
        NetworkEvent[NetworkEvent["WALLET_ERROR_CODE"] = 9] = "WALLET_ERROR_CODE";
        NetworkEvent[NetworkEvent["MISMATCH_DATA"] = 10] = "MISMATCH_DATA";
        NetworkEvent[NetworkEvent["USER_LOGOUT"] = 11] = "USER_LOGOUT";
        NetworkEvent[NetworkEvent["PROMOTION_ERROR"] = 12] = "PROMOTION_ERROR";
      })(NetworkEvent || (NetworkEvent = exports('NetworkEvent', {})));

      var NetworkState;

      (function (NetworkState) {
        NetworkState[NetworkState["NOT_CONNECT"] = 0] = "NOT_CONNECT";
        NetworkState[NetworkState["CONNECTED"] = 1] = "CONNECTED";
        NetworkState[NetworkState["LOST_CONNECTION"] = 2] = "LOST_CONNECTION";
        NetworkState[NetworkState["WAITING_RESPONSE"] = 3] = "WAITING_RESPONSE";
        NetworkState[NetworkState["DISCONNECTED"] = 4] = "DISCONNECTED";
      })(NetworkState || (NetworkState = exports('NetworkState', {})));

      Enum(NetworkState);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NodePoolAssets1989.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfNodePoolAssets.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, gfNodePoolAssets;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfNodePoolAssets = module.gfNodePoolAssets;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "3d2da4GGjhPTLFNU+z20LTH", "NodePoolAssets1989", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var NodePoolAssets1989 = exports('NodePoolAssets1989', (_dec = ccclass('NodePoolAssets1989'), _dec(_class = /*#__PURE__*/function (_gfNodePoolAssets) {
        _inheritsLoose(NodePoolAssets1989, _gfNodePoolAssets);

        function NodePoolAssets1989() {
          return _gfNodePoolAssets.apply(this, arguments) || this;
        }

        return NodePoolAssets1989;
      }(gfNodePoolAssets)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NodePoolAssets1998.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfCustomDataType.ts', './gfNodePoolAssets.ts', './utils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, gfGunSkeletonData, gfNodePoolAssets, convertAssetArrayToObject;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfGunSkeletonData = module.gfGunSkeletonData;
    }, function (module) {
      gfNodePoolAssets = module.gfNodePoolAssets;
    }, function (module) {
      convertAssetArrayToObject = module.convertAssetArrayToObject;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "369a9fAZONAkqG0rO/H7+sd", "NodePoolAssets1998", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var NodePoolAssets1998 = exports('NodePoolAssets1998', (_dec = ccclass('NodePoolAssets1998'), _dec2 = property(gfGunSkeletonData), _dec(_class = (_class2 = /*#__PURE__*/function (_gfNodePoolAssets) {
        _inheritsLoose(NodePoolAssets1998, _gfNodePoolAssets);

        function NodePoolAssets1998() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfNodePoolAssets.call.apply(_gfNodePoolAssets, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "gunSkeletonData", _descriptor, _assertThisInitialized(_this));

          _this.gunAssets = null;
          return _this;
        }

        var _proto = NodePoolAssets1998.prototype;

        _proto.initMapAssets = function initMapAssets() {
          _gfNodePoolAssets.prototype.initMapAssets.call(this);

          this.gunAssets = convertAssetArrayToObject(this.gunSkeletonData);
        };

        _proto.getGunSkeletonData = function getGunSkeletonData(name) {
          if (this.gunAssets[name] && this.gunAssets[name].animation) {
            return this.gunAssets[name].animation;
          }

          return null;
        };

        return NodePoolAssets1998;
      }(gfNodePoolAssets), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "gunSkeletonData", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NodePoolConfig1989.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfNodePoolConfig.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _assertThisInitialized, cclegacy, _decorator, v2, Rect, gfNodePoolConfig;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      v2 = module.v2;
      Rect = module.Rect;
    }, function (module) {
      gfNodePoolConfig = module.default;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "a4a553Hq+hKS7UaYPIEZTcB", "NodePoolConfig1989", undefined);

      var ccclass = _decorator.ccclass;
      var NodePoolConfig1989 = exports('default', (_dec = ccclass('NodePoolConfig1989'), _dec(_class = (_class2 = /*#__PURE__*/function (_gfNodePoolConfig) {
        _inheritsLoose(NodePoolConfig1989, _gfNodePoolConfig);

        function NodePoolConfig1989(listAssets) {
          var _this;

          _this = _gfNodePoolConfig.call(this, listAssets) || this;
          NodePoolConfig1989.instance = _assertThisInitialized(_this);
          _this.FISH_CONFIG = {
            "1": {
              speed: 1.8,
              FishMultiple: -1,
              zIndex: 0,
              AnimationName: ['Fly'],
              visibleSize: v2(100, 100),
              targetPoint: v2(0, 50),
              BoxCollider: new Rect(0.6, 51, 30, 30),
              premiumAlphaMode: false
            },
            "2": {
              speed: 1.7,
              FishMultiple: -1,
              zIndex: 0,
              AnimationName: ['walk'],
              visibleSize: v2(100, 100),
              targetPoint: v2(1, -4),
              BoxCollider: new Rect(1, -4, 40, 50),
              premiumAlphaMode: false
            },
            "3": {
              speed: 2,
              FishMultiple: -1,
              zIndex: 0,
              AnimationName: ['Walk'],
              visibleSize: v2(100, 100),
              targetPoint: v2(0, 7),
              BoxCollider: new Rect(0, 12, 55, 55),
              premiumAlphaMode: false
            },
            "4": {
              speed: 1.3,
              FishMultiple: -1,
              zIndex: 0,
              AnimationName: ['Walk'],
              visibleSize: v2(100, 100),
              targetPoint: v2(0, 60),
              BoxCollider: new Rect(0, 47, 57, 95),
              premiumAlphaMode: false
            },
            "5": {
              speed: 1.2,
              FishMultiple: -1,
              zIndex: 0,
              AnimationName: ['Walk'],
              visibleSize: v2(100, 100),
              targetPoint: v2(0, 50),
              BoxCollider: new Rect(0, 40, 60, 90),
              premiumAlphaMode: false
            },
            "6": {
              speed: 1.7,
              FishMultiple: -1,
              zIndex: 0,
              AnimationName: ['Walk'],
              visibleSize: v2(100, 100),
              targetPoint: v2(0, 50),
              BoxCollider: new Rect(0, 40, 60, 90),
              premiumAlphaMode: false
            },
            "7": {
              speed: 0.9,
              FishMultiple: -1,
              zIndex: 0,
              AnimationName: ['Walk'],
              visibleSize: v2(100, 100),
              targetPoint: v2(0, 30),
              BoxCollider: new Rect(0, 30, 50, 90),
              premiumAlphaMode: false
            },
            "8": {
              speed: 0.9,
              FishMultiple: -1,
              zIndex: 0,
              AnimationName: ['Walk'],
              visibleSize: v2(100, 100),
              targetPoint: v2(0, 60),
              BoxCollider: new Rect(0, 50, 83, 110),
              premiumAlphaMode: false
            },
            "9": {
              speed: 1.6,
              FishMultiple: -1,
              zIndex: 0,
              AnimationName: ['Walk'],
              visibleSize: v2(100, 100),
              targetPoint: v2(0, 60),
              BoxCollider: new Rect(0, 50, 50, 120),
              premiumAlphaMode: false
            },
            "10": {
              speed: 0.8,
              FishMultiple: -1,
              zIndex: 0,
              AnimationName: ['Walk'],
              visibleSize: v2(100, 100),
              targetPoint: v2(0, 80),
              BoxCollider: new Rect(0, 60, 95, 145),
              premiumAlphaMode: false
            },
            "11": {
              speed: 1.6,
              FishMultiple: -1,
              zIndex: 0,
              AnimationName: ['Walk'],
              visibleSize: v2(100, 100),
              targetPoint: v2(0, 120),
              BoxCollider: new Rect(0, 85, 80, 140),
              premiumAlphaMode: false
            },
            "12": {
              speed: 3,
              FishMultiple: -1,
              zIndex: 0,
              AnimationName: ['Walk'],
              visibleSize: v2(100, 100),
              targetPoint: v2(0, 0),
              BoxCollider: new Rect(0, 0, 100, 100),
              premiumAlphaMode: false
            }
          };
          _this.BULLET_CONFIG = {
            "0": {
              BoxCollider: new Rect(0, 0, 40, 20)
            },
            "1": {
              BoxCollider: new Rect(0, 0, 40, 50)
            },
            "2": {
              BoxCollider: new Rect(0, 0, 40, 55)
            },
            "3": {
              BoxCollider: new Rect(0, 0, 60, 88)
            },
            "4": {
              BoxCollider: new Rect(0, 0, 47, 90)
            }
          };
          return _this;
        }

        return NodePoolConfig1989;
      }(gfNodePoolConfig), _class2.instance = null, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NodePoolConfig1998.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfNodePoolConfig.ts', './NodePoolAssets1998.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _assertThisInitialized, cclegacy, _decorator, v2, Rect, instantiate, gfNodePoolConfig, NodePoolAssets1998;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      v2 = module.v2;
      Rect = module.Rect;
      instantiate = module.instantiate;
    }, function (module) {
      gfNodePoolConfig = module.default;
    }, function (module) {
      NodePoolAssets1998 = module.NodePoolAssets1998;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "3f218ixxcpIhItnH5EEnOf0", "NodePoolConfig1998", undefined);

      var ccclass = _decorator.ccclass;
      var NodePoolConfig1998 = exports('default', (_dec = ccclass('NodePoolConfig1998'), _dec(_class = (_class2 = /*#__PURE__*/function (_gfNodePoolConfig) {
        _inheritsLoose(NodePoolConfig1998, _gfNodePoolConfig);

        function NodePoolConfig1998(listAssets) {
          var _this;

          _this = _gfNodePoolConfig.call(this, listAssets) || this;
          NodePoolConfig1998.instance = _assertThisInitialized(_this);
          _this.FISH_CONFIG = {
            "0": {
              speed: 100.5,
              FishMultiple: -1,
              zIndex: 502,
              AnimationName: ['animation'],
              visibleSize: v2(40, 50),
              targetPoint: v2(0, 0),
              BoxCollider: [new Rect(-1, 0, 40, 15), new Rect(5, 0, 10, 40)],
              premiumAlphaMode: false
            },
            "1": {
              speed: 100.5,
              FishMultiple: -1,
              zIndex: 503,
              AnimationName: ['animation'],
              visibleSize: v2(60, 20),
              targetPoint: v2(4, 0),
              BoxCollider: new Rect(4, 0, 55, 18),
              premiumAlphaMode: false
            },
            "2": {
              speed: 80.4,
              FishMultiple: -1,
              zIndex: 504,
              AnimationName: ['animation'],
              visibleSize: v2(65, 55),
              targetPoint: v2(3, -2),
              BoxCollider: new Rect(5, 0, 50, 30),
              premiumAlphaMode: false
            },
            "3": {
              speed: 80.4,
              FishMultiple: -1,
              zIndex: 505,
              AnimationName: ['animation'],
              visibleSize: v2(120, 50),
              targetPoint: v2(-5, 0),
              BoxCollider: [new Rect(-5, 0, 60, 16), new Rect(-18, 15, 40, 10)],
              premiumAlphaMode: false
            },
            "4": {
              speed: 40.2,
              FishMultiple: -1,
              zIndex: 10,
              AnimationName: ['animation'],
              visibleSize: v2(105, 65),
              targetPoint: v2(10, 1),
              BoxCollider: [new Rect(0, 4, 65, 20), new Rect(37, 0, 15, 60)],
              premiumAlphaMode: false
            },
            "5": {
              speed: 80.4,
              FishMultiple: -1,
              zIndex: 504,
              AnimationName: ['animation'],
              visibleSize: v2(75, 90),
              targetPoint: v2(5, 2),
              BoxCollider: [new Rect(0, 0, 60, 15), new Rect(15, 0, 20, 40)],
              premiumAlphaMode: false
            },
            "6": {
              speed: 80.4,
              FishMultiple: -1,
              zIndex: 101,
              AnimationName: ['animation'],
              visibleSize: v2(75, 60),
              targetPoint: v2(10, 2),
              BoxCollider: new Rect(5, 0, 65, 25),
              premiumAlphaMode: false
            },
            "7": {
              speed: 60.3,
              FishMultiple: -1,
              zIndex: 401,
              AnimationName: ['animation'],
              visibleSize: v2(120, 90),
              targetPoint: v2(20, 0),
              BoxCollider: [new Rect(27, 3, 33, 60), new Rect(5, 3, 100, 10)],
              premiumAlphaMode: false
            },
            "8": {
              speed: 60.3,
              FishMultiple: -1,
              zIndex: 201,
              AnimationName: ['animation'],
              visibleSize: v2(75, 100),
              targetPoint: v2(0, 2),
              BoxCollider: [new Rect(0, 0, 65, 12), new Rect(5, 0, 30, 60)],
              premiumAlphaMode: false
            },
            "9": {
              speed: 60.3,
              FishMultiple: -1,
              zIndex: 202,
              AnimationName: ['animation'],
              visibleSize: v2(105, 50),
              targetPoint: v2(10, 0),
              BoxCollider: new Rect(10, 0, 80, 30),
              premiumAlphaMode: false
            },
            "10": {
              speed: 60.3,
              FishMultiple: -1,
              zIndex: 203,
              AnimationName: ['animation'],
              visibleSize: v2(100, 100),
              targetPoint: v2(10, 0),
              BoxCollider: new Rect(10, 0, 70, 80),
              premiumAlphaMode: false
            },
            "11": {
              speed: 60.3,
              FishMultiple: -1,
              zIndex: 204,
              AnimationName: ['animation'],
              visibleSize: v2(125, 105),
              targetPoint: v2(25, 0),
              BoxCollider: [new Rect(25, 0, 50, 65), new Rect(-20, 0, 50, 8)],
              premiumAlphaMode: false
            },
            "12": {
              speed: 60.3,
              FishMultiple: -1,
              zIndex: 205,
              AnimationName: ['animation'],
              visibleSize: v2(110, 100),
              targetPoint: v2(10, 3),
              BoxCollider: [new Rect(10, 0, 75, 30), new Rect(10, 0, 33, 65)],
              premiumAlphaMode: false
            },
            "13": {
              speed: 20.1,
              FishMultiple: -1,
              zIndex: 505,
              AnimationName: ['animation'],
              visibleSize: v2(125, 95),
              targetPoint: v2(-5, 5),
              BoxCollider: [new Rect(10, 0, 90, 35), new Rect(-5, 0, 45, 60)],
              premiumAlphaMode: false
            },
            "14": {
              speed: 40.2,
              FishMultiple: -1,
              zIndex: 312,
              AnimationName: ['animation'],
              visibleSize: v2(170, 120),
              targetPoint: v2(10, 0),
              BoxCollider: [new Rect(10, 0, 65, 35), new Rect(10, 0, 35, 70)],
              premiumAlphaMode: false
            },
            "15": {
              speed: 40.2,
              FishMultiple: -1,
              zIndex: 302,
              AnimationName: ['animation'],
              visibleSize: v2(170, 120),
              targetPoint: v2(10, 0),
              BoxCollider: [new Rect(20, 0, 90, 45), new Rect(20, 0, 45, 100)],
              premiumAlphaMode: false
            },
            "16": {
              speed: 60.3,
              FishMultiple: -1,
              zIndex: 311,
              AnimationName: ['animation'],
              visibleSize: v2(215, 75),
              targetPoint: v2(20, 0),
              BoxCollider: [new Rect(15, 0, 190, 10), new Rect(20, 0, 60, 30)],
              premiumAlphaMode: false
            },
            "17": {
              speed: 40.2,
              FishMultiple: -1,
              zIndex: 304,
              AnimationName: ['animation'],
              visibleSize: v2(305, 170),
              targetPoint: v2(0, 0),
              BoxCollider: [new Rect(-10, 0, 50, 70), new Rect(-35, 0, 130, 10)],
              premiumAlphaMode: false
            },
            "18": {
              speed: 40.2,
              FishMultiple: -1,
              zIndex: 315,
              AnimationName: ['animation'],
              visibleSize: v2(305, 170),
              targetPoint: v2(0, 0),
              BoxCollider: [new Rect(-10, 0, 50, 70), new Rect(-35, 0, 130, 10)],
              premiumAlphaMode: false
            },
            "19": {
              speed: 40.2,
              FishMultiple: -1,
              zIndex: 306,
              AnimationName: ['animation'],
              visibleSize: v2(245, 85),
              targetPoint: v2(-20, 0),
              BoxCollider: [new Rect(5, 0, 210, 10), new Rect(-20, 0, 90, 25)],
              premiumAlphaMode: false
            },
            "20": {
              speed: 40.2,
              FishMultiple: -1,
              zIndex: 349,
              AnimationName: ['animation'],
              visibleSize: v2(215, 75),
              targetPoint: v2(20, -3),
              BoxCollider: [new Rect(20, 0, 160, 8), new Rect(20, 0, 70, 28)],
              premiumAlphaMode: false
            },
            "21": {
              speed: 40.2,
              FishMultiple: -1,
              zIndex: 308,
              AnimationName: ['animation'],
              visibleSize: v2(250, 130),
              targetPoint: v2(40, 0),
              BoxCollider: [new Rect(20, 0, 140, 25), new Rect(35, 0, 10, 80)],
              premiumAlphaMode: false
            },
            "22": {
              speed: 20.1,
              FishMultiple: -1,
              zIndex: 313,
              AnimationName: ['animation'],
              visibleSize: v2(270, 120),
              targetPoint: v2(40, 0),
              BoxCollider: [new Rect(-30, 0, 100, 17), new Rect(40, 0, 150, 35), new Rect(50, 0, 15, 100)],
              premiumAlphaMode: false
            },
            "23": {
              speed: 20.1,
              FishMultiple: -1,
              zIndex: 310,
              AnimationName: ['animation'],
              visibleSize: v2(300, 130),
              targetPoint: v2(70, 0),
              BoxCollider: [new Rect(-30, 0, 80, 17), new Rect(70, 0, 150, 35), new Rect(70, 0, 15, 100)],
              premiumAlphaMode: false
            },
            "24": {
              speed: 20.1,
              FishMultiple: -1,
              zIndex: 313,
              AnimationName: ['animation'],
              visibleSize: v2(300, 130),
              targetPoint: v2(50, 0),
              BoxCollider: [new Rect(45, 0, 160, 55), new Rect(120, 0, 20, 100), new Rect(-60, 0, 90, 10)],
              premiumAlphaMode: false
            },
            "25": {
              speed: 20.1,
              FishMultiple: -1,
              zIndex: 312,
              AnimationName: ['animation'],
              visibleSize: v2(300, 130),
              targetPoint: v2(50, 0),
              BoxCollider: [new Rect(45, 0, 160, 55), new Rect(120, 0, 20, 100), new Rect(-60, 0, 90, 10)],
              premiumAlphaMode: false
            },
            "27": {
              speed: 20.1,
              FishMultiple: -1,
              zIndex: 102,
              AnimationName: ['animation'],
              visibleSize: v2(160, 110),
              targetPoint: v2(0, -5),
              BoxCollider: [new Rect(0, -5, 72, 42), new Rect(0, 40, 80, 25)],
              premiumAlphaMode: false
            },
            "30": {
              speed: 20.1,
              FishMultiple: -1,
              zIndex: 501,
              AnimationName: ['animation'],
              visibleSize: v2(410, 180),
              targetPoint: v2(10, 0),
              BoxCollider: [new Rect(10, 0, 210, 35), new Rect(0, 0, 140, 112)],
              premiumAlphaMode: false
            },
            "31": {
              speed: 20.1,
              FishMultiple: -1,
              zIndex: 501,
              AnimationName: ['animation'],
              visibleSize: v2(185, 230),
              targetPoint: v2(65, 20),
              BoxCollider: [new Rect(60, 20, 55, 66), new Rect(0, -40, 70, 49), new Rect(60, -20, 30, 30)],
              premiumAlphaMode: false
            },
            "43": {
              speed: 20.1,
              FishMultiple: -1,
              zIndex: 206,
              AnimationName: ['animation'],
              visibleSize: v2(130, 210),
              targetPoint: v2(17, -10),
              BoxCollider: new Rect(10, -10, 70, 70),
              skipRotate: true,
              premiumAlphaMode: false
            }
          };
          _this.SPRITE_FISH_KIND = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
          _this.BULLET_CONFIG = {
            "0": {
              BoxCollider: new Rect(5, 0, 40, 20)
            },
            "1": {
              BoxCollider: new Rect(5, 0, 45, 15)
            },
            "2": {
              BoxCollider: new Rect(8, 1, 45, 20)
            },
            "3": {
              BoxCollider: new Rect(15, 0, 40, 20)
            },
            "4": {
              BoxCollider: new Rect(10, 0, 50, 55)
            },
            "5": {
              BoxCollider: new Rect(5, 0, 60, 70)
            },
            "6": {
              BoxCollider: new Rect(5, 0, 60, 70)
            },
            "7": {
              BoxCollider: new Rect(0, 0, 20, 36)
            },
            "8": {
              BoxCollider: new Rect(0, 0, 20, 77)
            },
            "9": {
              BoxCollider: new Rect(0, 0, 20, 101)
            }
          };
          return _this;
        }

        var _proto = NodePoolConfig1998.prototype;

        _proto.initNodePoolAssets = function initNodePoolAssets(listAssets) {
          this.assetHolder = instantiate(listAssets).getComponent(NodePoolAssets1998);
          this.assetHolder.initMapAssets();
        };

        _proto.getGunSkeletonData = function getGunSkeletonData(name) {
          var gunData = this.assetHolder.getGunSkeletonData(name);
          return gunData;
        };

        return NodePoolConfig1998;
      }(gfNodePoolConfig), _class2.instance = null, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NotifyJackpot1998.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Config1998.ts', './gfActionHelper.ts', './utils.ts', './gfUtilities.ts', './gfLocalize.ts', './gfNotifyJackpot.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, tween, Layout, Config1998, stopAllActions, fadeIn, fadeOut, setOpacity, deepCopy, formatString, formatUserName, gfLocalize, GfNotifyJackpot;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      tween = module.tween;
      Layout = module.Layout;
    }, function (module) {
      Config1998 = module.default;
    }, function (module) {
      stopAllActions = module.stopAllActions;
      fadeIn = module.fadeIn;
      fadeOut = module.fadeOut;
    }, function (module) {
      setOpacity = module.setOpacity;
    }, function (module) {
      deepCopy = module.deepCopy;
      formatString = module.formatString;
      formatUserName = module.formatUserName;
    }, function (module) {
      gfLocalize = module.default;
    }, function (module) {
      GfNotifyJackpot = module.GfNotifyJackpot;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "6eb45SvFIlFO7oUY6ycfgIB", "NotifyJackpot1998", undefined);

      var ccclass = _decorator.ccclass;
      var NotifyJackpot1998 = exports('NotifyJackpot1998', (_dec = ccclass('NotifyJackpot1998'), _dec(_class = /*#__PURE__*/function (_GfNotifyJackpot) {
        _inheritsLoose(NotifyJackpot1998, _GfNotifyJackpot);

        function NotifyJackpot1998() {
          return _GfNotifyJackpot.apply(this, arguments) || this;
        }

        var _proto = NotifyJackpot1998.prototype;

        _proto.play = function play(dataInput) {
          var _this = this;

          var data = dataInput.data,
              type = dataInput.type;
          this.node.active = true;
          stopAllActions(this.node);
          setOpacity(this.node, 255);
          stopAllActions(this.contentNode);
          setOpacity(this.contentNode, 0);
          this.setupSpineAnim(type);
          var tweenShowRichText = tween(this.contentNode).then(fadeIn(0.15));
          var _GameConfig$instance = Config1998.instance,
              NOTIFY_CONFIG = _GameConfig$instance.NOTIFY_CONFIG,
              NOTIFY_TYPE = _GameConfig$instance.NOTIFY_TYPE;
          var str = deepCopy(gfLocalize.instance.txtJPNotify);
          var jackpotConfig = NOTIFY_CONFIG[NOTIFY_TYPE.JACKPOT];
          str = formatString(str, [formatUserName(data[jackpotConfig.userName]), data[jackpotConfig.goldReward]]);
          str = str.replace(/'/g, '"');
          var objMessage = JSON.parse(str);
          this.createNotifyMessage(objMessage);
          this.contentNode.getComponent(Layout).updateLayout();
          this.mainAnim.setAnimation(0, 'animation', false);
          tween(this.node).delay(0.8).call(function () {
            tweenShowRichText.start();
          }).delay(3).then(fadeOut(0.5)).call(function () {
            _this.onStackMessage();
          }).start();
        };

        return NotifyJackpot1998;
      }(GfNotifyJackpot)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/OnDemandLoadingControl.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EventNames.ts', './BaseDynamicLoading.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, sys, instantiate, EventNames, BaseDynamicLoading;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      sys = module.sys;
      instantiate = module.instantiate;
    }, function (module) {
      EventNames = module.default;
    }, function (module) {
      BaseDynamicLoading = module.BaseDynamicLoading;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "1787ebaYKNMCqNM5Fq1HTkU", "OnDemandLoadingControl", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SpawnObjectData = exports('SpawnObjectData', function SpawnObjectData(spawnObject, id) {
        this.spawnObject = void 0;
        this.id = void 0;
        this.spawnObject = spawnObject;
        this.id = id;
      });
      var OnDemandLoadingControl = exports('OnDemandLoadingControl', (_dec = ccclass('OnDemandLoadingControl'), _dec2 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_BaseDynamicLoading) {
        _inheritsLoose(OnDemandLoadingControl, _BaseDynamicLoading);

        function OnDemandLoadingControl() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseDynamicLoading.call.apply(_BaseDynamicLoading, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "loading", _descriptor, _assertThisInitialized(_this));

          _this._usingObjects = [];
          return _this;
        }

        var _proto = OnDemandLoadingControl.prototype;

        _proto.onEnable = function onEnable() {
          if (this.eventManager) {
            this.eventManager.on(EventNames.CREATE_ON_DEMAND_OBJECT, this.createObjectOnDemand, this);
            this.eventManager.on(EventNames.REMOVE_ON_DEMAND_OBJECT, this.destroyObjectOnDemand, this);
          }
        };

        _proto.onDisable = function onDisable() {
          if (this.eventManager) {
            this.eventManager.off(EventNames.CREATE_ON_DEMAND_OBJECT, this.createObjectOnDemand, this);
            this.eventManager.off(EventNames.REMOVE_ON_DEMAND_OBJECT, this.destroyObjectOnDemand, this);
          }
        };

        _proto.runAsyncLazyLoading = function runAsyncLazyLoading() {
          var _this2 = this;

          var _loop = function _loop(i) {
            var assetPathConfig = _this2.assetPaths[i];

            if (assetPathConfig) {
              log(">>>> Run Async Lazy Loading for: " + assetPathConfig.path);

              if (assetPathConfig.lazyLoadOnNative && sys.isNative || assetPathConfig.lazyLoadOnWeb && sys.isBrowser) {
                _this2.createObjectOnDemand(assetPathConfig.id, function () {
                  log(">>>> Complete Lazy Loading for: " + assetPathConfig.path);
                }, false);
              }
            }
          };

          for (var i = 0; i < this.assetPaths.length; i++) {
            _loop(i);
          }
        };

        _proto.runSyncLazyLoading = function runSyncLazyLoading(index) {
          var _this3 = this;

          var assetPathConfig = this.assetPaths[index];

          if (assetPathConfig) {
            log(">>>> Run Sync Lazy Loading for: " + assetPathConfig.path);

            if (assetPathConfig.lazyLoadOnNative && sys.isNative || assetPathConfig.lazyLoadOnWeb && sys.isBrowser) {
              this.createObjectOnDemand(assetPathConfig.id, function () {
                _this3.runSyncLazyLoading(++index);
              }, false);
            } else {
              this.runSyncLazyLoading(++index);
            }
          } else {
            log(">>>> Lazy Load Completed");
          }
        };

        _proto.createObjectOnDemand = function createObjectOnDemand(assetId, callback, isShowLoadingIcon) {
          var _this4 = this;

          if (callback === void 0) {
            callback = null;
          }

          if (isShowLoadingIcon === void 0) {
            isShowLoadingIcon = true;
          }

          var objectToDestroy = this.getObjectSpawnedById(assetId);

          if (objectToDestroy && objectToDestroy.spawnData && objectToDestroy.spawnData.spawnObject) {
            callback && callback();
            return;
          }

          if (this.loading && isShowLoadingIcon) this.loading.active = true;

          var _assetData = this.getAssetLoadedById(assetId);

          if (_assetData && _assetData.asset) {
            this.spawnOnDemandObject(_assetData.asset, _assetData, callback);
          } else {
            var _loop2 = function _loop2(i) {
              var assetPathConfig = _this4.assetPaths[i];

              if (assetPathConfig && assetPathConfig.id === assetId) {
                _this4._dynamicLoadByPath(assetPathConfig.path, assetPathConfig.id, assetPathConfig.parentNode, function (asset) {
                  _this4.spawnOnDemandObject(asset, assetPathConfig, callback);
                });

                return "break";
              }
            };

            for (var i = 0; i < this.assetPaths.length; i++) {
              var _ret = _loop2(i);

              if (_ret === "break") break;
            }
          }
        };

        _proto.spawnOnDemandObject = function spawnOnDemandObject(asset, assetData, callback) {
          if (callback === void 0) {
            callback = null;
          }

          var node = instantiate(asset);
          node.active = true;
          node.parent = assetData.parentNode;
          node['sibIndex'] = assetData.index; //node.setSiblingIndex(assetData.id);

          var spawnObject = new SpawnObjectData(node, assetData.id);

          this._usingObjects.push(spawnObject);

          callback && callback();
          if (this.loading) this.loading.active = false;
        };

        _proto.destroyObjectOnDemand = function destroyObjectOnDemand(id, releaseResource, callback) {
          if (callback === void 0) {
            callback = null;
          }

          var objectToDestroy = this.getObjectSpawnedById(id);

          if (objectToDestroy) {
            this._usingObjects.splice(objectToDestroy.index, 1);

            if (objectToDestroy.spawnData) objectToDestroy.spawnData.spawnObject.destroy();
            callback && callback();
          }

          if (releaseResource) {
            var assetData = this.getAssetLoadedById(id);
            this.clearSingleResourceLoaded(assetData);
          }

          if (sys.isNative) {
            log('>>>>> GC Collect in Native at: destroyObjectOnDemand ');
            sys.garbageCollect();
          }
        };

        _proto.getObjectSpawnedById = function getObjectSpawnedById(id) {
          for (var i = 0; i < this._usingObjects.length; i++) {
            if (this._usingObjects[i].id === id) {
              return {
                spawnData: this._usingObjects[i],
                index: i
              };
            }
          }

          return null;
        };

        return OnDemandLoadingControl;
      }(BaseDynamicLoading), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "loading", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PaginationMrg.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CustomType.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Button, Node, UITransform, Label, Event, Layout, Color, v3, Component, CustomEvent;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Button = module.Button;
      Node = module.Node;
      UITransform = module.UITransform;
      Label = module.Label;
      Event = module.Event;
      Layout = module.Layout;
      Color = module.Color;
      v3 = module.v3;
      Component = module.Component;
    }, function (module) {
      CustomEvent = module.CustomEvent;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "b1842cNMghHxYnluzQMnF6+", "PaginationMrg", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var PaginationMrg = exports('PaginationMrg', (_dec = ccclass('PaginationMrg'), _dec2 = property({
        type: Button
      }), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(PaginationMrg, _Component);

        function PaginationMrg() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "btns", _descriptor, _assertThisInitialized(_this));

          _this.totalPage = 0;

          _initializerDefineProperty(_this, "preLabel", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nextLabel", _descriptor3, _assertThisInitialized(_this));

          _this.clickEvent = null;
          return _this;
        }

        var _proto = PaginationMrg.prototype;

        _proto.onLoad = function onLoad() {
          var _this2 = this;

          this.node.on("UPDATE_PAGE", this.updatePage, this);
          this.node.on('RESET_PAGE_INDEX', this.resetPage, this);
          this.node.children.forEach(function (it) {
            return it.active = false;
          });

          if (this.btns && this.btns.length > 0) {
            this.btns.forEach(function (it) {
              it.node.on(Node.EventType.TOUCH_END, _this2.clickPage, _this2);
              it.node['initWidth'] = it.node.getComponent(UITransform).width;
            });
          }
        };

        _proto.clickPage = function clickPage(event) {
          var clickedPage = parseInt(event.target.children[0].getComponent(Label).string);
          this.updatePage(clickedPage, this.totalPage);
          this.clickEvent = new Event('JUMP_TO_PAGE_HISTORY', true);
          this.clickEvent.clickedPage = clickedPage;
          this.node.dispatchEvent(this.clickEvent);
        };

        _proto.updatePage = function updatePage(page, totalPage) {
          var _this3 = this;

          this.preLabel.active = page - 2 > 1 && totalPage > 5;
          this.nextLabel.active = page + 2 < totalPage && totalPage > 5;
          this.totalPage = totalPage;
          var value = -1;

          switch (true) {
            case totalPage <= 5:
              value = 1;
              break;

            case totalPage > page + 1:
              value = page - 2 <= 0 ? 1 : page - 2;
              break;

            case totalPage <= page + 1:
              value = totalPage - 4;
              break;
          }

          this.btns.forEach(function (it, index) {
            if (index < totalPage) _this3.updateLabelValue(it, value + index, page);
          });
          this.updateSizeForEachBtn();
          this.node.getComponent(Layout).updateLayout();
        };

        _proto.resetPage = function resetPage() {
          this.node.children.forEach(function (it) {
            return it.active = false;
          });
        };

        _proto.updateSizeForEachBtn = function updateSizeForEachBtn() {
          var lastBtn = this.btns[this.btns.length - 1];
          var label = lastBtn.node.children[0].getComponent(Label);
          var offset = (label.string.length - 1) * lastBtn.node['initWidth'];
          var newWidth = lastBtn.node['initWidth'] + offset;
          this.preLabel.getComponent(UITransform).width = newWidth;
          this.nextLabel.getComponent(UITransform).width = newWidth;
          this.btns.forEach(function (it) {
            it.node.getComponent(UITransform).width = newWidth;
          });
          this.node.dispatchEvent(new CustomEvent("UPDATE_NAVIGATION_BUTTON_PAGE", true, {
            offset: offset * 3
          }));
        };

        _proto.updateLabelValue = function updateLabelValue(button, value, page) {
          button.node.active = true;
          var label = button.node.children[0].getComponent(Label);
          label.node.active = true;
          label.string = value;
          label.color = value === page ? Color.YELLOW : Color.WHITE;
          var scale = value === page ? 1.3 : 1;
          label.node.setScale(v3(scale, scale, scale));
        };

        return PaginationMrg;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "btns", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "preLabel", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "nextLabel", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Player.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BulletMapGen.ts', './Fish.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, sp, Node, Label, Prefab, v2, NodePool, instantiate, Vec3, UITransform, Component, BulletMapGen, Fish;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
      Node = module.Node;
      Label = module.Label;
      Prefab = module.Prefab;
      v2 = module.v2;
      NodePool = module.NodePool;
      instantiate = module.instantiate;
      Vec3 = module.Vec3;
      UITransform = module.UITransform;
      Component = module.Component;
    }, function (module) {
      BulletMapGen = module.BulletMapGen;
    }, function (module) {
      Fish = module.Fish;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11;

      cclegacy._RF.push({}, "27e0dZqEIdObIC9SRQ/+i8E", "Player", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BET_CONFIG = {
        0: '100',
        1: '300',
        2: '500',
        3: '1000',
        4: '3000'
      };
      var Player = exports('Player', (_dec = ccclass('Player'), _dec2 = property({
        type: sp.SkeletonData
      }), _dec3 = property(sp.Skeleton), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Label), _dec7 = property(Prefab), _dec8 = property(Node), _dec9 = property(Node), _dec10 = property(Node), _dec11 = property(Number), _dec12 = property(Number), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Player, _Component);

        function Player() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "listGunSpine", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "gunSpine", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "gunNode", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "node_fire", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "betLabel", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bulletPrefab", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bulletHolder", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "fishHolder", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "layerTouch", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "totalBulletPool", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "_autoFireDelay", _descriptor11, _assertThisInitialized(_this));

          _this._bulletPool = null;
          _this._currentBetKey = 0;
          _this._fishLock = null;
          _this._countShoot = 0;
          _this._targetPosition = v2(835, 870);
          _this._isAuto_fire = false;
          _this._isLockFish = false;
          _this._lockFishKind = null;
          return _this;
        }

        var _proto = Player.prototype;

        _proto.onLoad = function onLoad() {
          this.initBulletPool();
          this.node.on("FIRE", this._fire, this);
          this.node.on("AUTO_FIRE", this.setAutoFire, this);
          this.node.on("LOCK_FISH", this.setLockFish, this);
        };

        _proto.initBulletPool = function initBulletPool() {
          this._bulletPool = new NodePool();

          for (var i = 0; i < this.totalBulletPool; i++) {
            var bullet = instantiate(this.bulletPrefab);

            this._bulletPool.put(bullet);
          }
        };

        _proto.increaseBet = function increaseBet(evt) {
          if (this._currentBetKey >= 4) return;
          var betKey = ++this._currentBetKey;

          this._updateBet(this.betLabel, betKey);

          this._changeGun(this.gunSpine, betKey);
        };

        _proto.decreaseBet = function decreaseBet(evt) {
          if (this._currentBetKey <= 0) return;
          var betKey = --this._currentBetKey;

          this._updateBet(this.betLabel, betKey);

          this._changeGun(this.gunSpine, betKey);
        };

        _proto._updateBet = function _updateBet(label, betKey) {
          label.string = BET_CONFIG[betKey];
        };

        _proto._changeGun = function _changeGun(gun, index) {
          if (index === void 0) {
            index = 0;
          }

          gun.skeletonData = this.listGunSpine[index];
        };

        _proto.setAutoFire = function setAutoFire(isAutoFire) {
          this._targetPosition = v2(835, 870);
          this._isAuto_fire = isAutoFire;
        };

        _proto.setLockFish = function setLockFish(isLockFish, fishLock, lockFishKind) {
          if (fishLock === void 0) {
            fishLock = null;
          }

          if (lockFishKind === void 0) {
            lockFishKind = null;
          }

          this._isLockFish = isLockFish;
          this._fishLock = fishLock;
          this._lockFishKind = lockFishKind;
        };

        _proto._fire = function _fire(targetPosition) {
          if (!targetPosition) return;
          this._targetPosition = targetPosition;

          this._createBullet(targetPosition);
        };

        _proto._createBullet = function _createBullet(touchPos) {
          var bullet = this._getBulletFromPool();

          var angle = this.getAngleTwoPoint(this.gunNode.worldPosition, touchPos);
          this.gunNode.angle = angle;
          var bulletPos = this.getStartPosBullet(this.layerTouch, this.node_fire);
          bullet.active = true;
          bullet.setParent(this.bulletHolder);
          bullet.angle = angle;
          bullet.setPosition(bulletPos);
          bullet.emit("INIT_DATA", this._currentBetKey);
          bullet.emit("SET_LOCK_FISH", this._fishLock);
        };

        _proto._getBulletFromPool = function _getBulletFromPool() {
          var bullet = this._bulletPool.get();

          if (!bullet) {
            bullet = instantiate(this.bulletPrefab);
          }

          return bullet;
        };

        _proto.getStartPosBullet = function getStartPosBullet(spaceNode, targetNode) {
          if (targetNode.parent == null) {
            return null;
          }

          var pos = new Vec3(0, 0, 0);
          var targetNodeComponent = targetNode.parent.getComponent(UITransform);
          var spaceNodeComponent = spaceNode.getComponent(UITransform);

          if (!targetNodeComponent) {
            targetNode.parent.addComponent(UITransform);
          }

          if (!spaceNodeComponent) {
            spaceNode.addComponent(UITransform);
          }

          pos = targetNodeComponent.convertToWorldSpaceAR(targetNode.getPosition());
          return spaceNodeComponent ? spaceNodeComponent.convertToNodeSpaceAR(pos) : pos;
        };

        _proto.getAngleTwoPoint = function getAngleTwoPoint(p1, p2) {
          return Math.atan2(p2.y - p1.y, p2.x - p1.x) * 180 / Math.PI;
        };

        _proto.update = function update(dt) {
          this._countShoot += dt;

          if (this._countShoot >= this._autoFireDelay) {
            if (this._isAuto_fire) {
              this._fire(this._targetPosition);
            } else if (this._fishLock && this.getLishMummy().length > 0) {
              if (this._fishLock && !this._fishLock["_isDead"]) {
                this._targetPosition = this.getHitPositionOnFish();

                this._fire(this._targetPosition);
              } else {
                var listFishLock = this.getLockFishByKind();

                if (listFishLock && listFishLock.length > 0) {
                  this._fishLock = listFishLock[0];
                } else {
                  this.layerTouch.emit("STOP_LOCK_FISH");
                }
              }
            }

            this._countShoot = 0;
          }

          this.checkRemoveBullet();
        };

        _proto.getHitPositionOnFish = function getHitPositionOnFish() {
          var targetPoint = this._fishLock["targetPoint"];
          var x = this._fishLock._pos.x + targetPoint.x;
          var y = this._fishLock._pos.y + targetPoint.y;
          return v2(x, y);
        };

        _proto.getLishMummy = function getLishMummy() {
          var fishHolder = this.fishHolder;
          return fishHolder.children;
        };

        _proto.getLockFishByKind = function getLockFishByKind() {
          var _this2 = this;

          var listFish = this.getLishMummy();
          return listFish.filter(function (fish) {
            return fish.getComponent(Fish) && fish["fishKind"] === _this2._lockFishKind;
          });
        };

        _proto.checkRemoveBullet = function checkRemoveBullet() {
          var bullets = this.bulletHolder.children;

          if (bullets && bullets.length > 0) {
            for (var i = 0; i < bullets.length; i++) {
              var bullet = bullets[i];
              if (bullet.getComponent(BulletMapGen).isDestroy() == true) this._bulletPool.put(bullet);
            }
          }
        };

        _proto.resetPlayerState = function resetPlayerState() {
          this.setLockFish(false);
          this.setAutoFire(false);
        };

        return Player;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "listGunSpine", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "gunSpine", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "gunNode", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "node_fire", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "betLabel", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "bulletPrefab", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "bulletHolder", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "fishHolder", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "layerTouch", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "totalBulletPool", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 20;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "_autoFireDelay", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.1;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Player1989.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfPlayer.ts', './Config1989.ts', './DataStore1989.ts', './EventsCode1989.ts', './FishManager1989.ts', './ReferenceManager1989.ts', './gfEventEmitter.ts', './gfUtilities.ts', './utils.ts', './gfDataStore.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, sp, Animation, warn, tween, gfPlayer, Config1989, DataStore1989, EventsCode1989, FishManager1989, ReferenceManager1989, gfEventEmitter, setBetValue, getRotation, setOpacity, getPostionInOtherNode, gfDataStore;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      sp = module.sp;
      Animation = module.Animation;
      warn = module.warn;
      tween = module.tween;
    }, function (module) {
      gfPlayer = module.gfPlayer;
    }, function (module) {
      Config1989 = module.default;
    }, function (module) {
      DataStore1989 = module.default;
    }, function (module) {
      EventsCode1989 = module.default;
    }, function (module) {
      FishManager1989 = module.default;
    }, function (module) {
      ReferenceManager1989 = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      setBetValue = module.setBetValue;
      getRotation = module.getRotation;
    }, function (module) {
      setOpacity = module.setOpacity;
      getPostionInOtherNode = module.getPostionInOtherNode;
    }, function (module) {
      gfDataStore = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "c02dfoC5wlFIZ3yXo9zSoXy", "Player1989", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Player1989 = exports('Player1989', (_dec = ccclass('Player1989'), _dec2 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_gfPlayer) {
        _inheritsLoose(Player1989, _gfPlayer);

        function Player1989() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfPlayer.call.apply(_gfPlayer, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "otherUserSpine", _descriptor, _assertThisInitialized(_this));

          _this.gunAnim = null;
          _this.otherUserAnim = null;
          _this.gunAssets = null;
          return _this;
        }

        var _proto = Player1989.prototype;

        _proto.onLoad = function onLoad() {
          if (this.gunNode) {
            this.gunAnim = this.gunNode.getComponent(sp.Skeleton);
          }

          if (this.otherUserSpine) {
            this.otherUserAnim = this.otherUserSpine.getComponent(sp.Skeleton);
          }
        };

        _proto.initObj = function initObj(data) {
          _gfPlayer.prototype.initObj.call(this, data);

          var isUserInPlace = data.isUserInPlace;
          setOpacity(this.otherUserAnim.node, 255);

          if (this.isMe) {
            this.node.getComponent(Animation).play("InitMainPlayer1989");
            gfEventEmitter.instance.emit(EventsCode1989.GAME_LAYER.INIT_MY_USER_INFO, data, this.avatarAtlas);
          } else {
            setOpacity(this.otherUserAnim.node, 255);
            this.playAnimExpandOtherUser(isUserInPlace);
          }
        };

        _proto.playAnimExpandOtherUser = function playAnimExpandOtherUser(isUserInPlace) {
          if (!this.otherUserAnim) {
            warn("anim other user is null");
            return;
          }

          var animationClipName = isUserInPlace ? "InitOtherPlayer1989" : "InitOtherPlayerAnim1989";
          var animationName = isUserInPlace ? "InExpand" : "action";
          var timeScale = isUserInPlace ? 4 : 2;
          this.otherUserAnim.setAnimation(0, animationName, false);
          this.otherUserAnim.timeScale = timeScale;
          this.node.getComponent(Animation).play(animationClipName);
        };

        _proto.playAnimCloseOtherUser = function playAnimCloseOtherUser() {
          var _this2 = this;

          this.otherUserAnim.timeScale = 1.5;
          tween(this.node).call(function () {
            _this2.node.getComponent(Animation).play("HideOtherUser1989");
          }).delay(0.5).call(function () {
            _this2.otherUserAnim.setAnimation(0, "action_idle", false);
          }).delay(0.5).call(function () {
            setOpacity(_this2.otherUserAnim.node, 153);
          }).start();
        };

        _proto.getGunSkeletonData = function getGunSkeletonData(name) {
          if (this.gunAssets[name] && this.gunAssets[name].animation) {
            return this.gunAssets[name].animation;
          }

          return null;
        };

        _proto._playEffectFire = function _playEffectFire(gunName) {
          if (this.gunAnim) {
            if (!gunName) gunName = "gun" + (this._gunIndex + 1);
            this._isGunSkill = Object.values(Config1989.instance.GunSkill).indexOf(gunName) > -1;
            this.gunAnim.skeletonData = this.getGunSkeletonData(gunName);
            this.gunAnim.setAnimation(0, "gun", false);
            this.gunAnim.addAnimation(0, "idle", true);
          }
        };

        _proto.forceUpdateWallet = function forceUpdateWallet(value) {
          _gfPlayer.prototype.forceUpdateWallet.call(this, value);

          if (this.isMe) gfEventEmitter.instance.emit(EventsCode1989.GAME_LAYER.UPDATE_WALLET_MY_USER, {
            wallet: value,
            type: "ADD_FORCE_UPDATE"
          });
        };

        _proto.updateWallet = function updateWallet(value) {
          _gfPlayer.prototype.updateWallet.call(this, value);

          if (this.isMe) gfEventEmitter.instance.emit(EventsCode1989.GAME_LAYER.UPDATE_WALLET_MY_USER, {
            wallet: value
          });
        };

        _proto.addGoldReward = function addGoldReward(reward) {
          _gfPlayer.prototype.addGoldReward.call(this, reward);

          if (this.isMe) gfEventEmitter.instance.emit(EventsCode1989.GAME_LAYER.UPDATE_WALLET_MY_USER, {
            wallet: reward,
            type: "ADD_GOLD_REWARD"
          });
        };

        _proto.addToDisplayWallet = function addToDisplayWallet(amount) {
          _gfPlayer.prototype.addToDisplayWallet.call(this, amount);

          if (this.isMe) gfEventEmitter.instance.emit(EventsCode1989.GAME_LAYER.UPDATE_WALLET_MY_USER, {
            wallet: amount,
            type: "ADD_DISPLAY_WALLET"
          });
        };

        _proto.onUserFire = function onUserFire(data) {
          if (this.isMe) {
            gfEventEmitter.instance.emit(EventsCode1989.SOUND.GUN_FIRE, this['_gunIndex']);
          }

          this.gun.angle = this.checkAngleByLockFish(data);

          if (!this.isMe) {
            this['_gunIndex'] = DataStore1989.instance.getBulletIndex(data.BulletMultiple);

            this._updateGun();
          } else {
            setBetValue(Config1989.instance.GameId, DataStore1989.instance.getCurrentRoom(), data.BulletMultiple);
            if (this.effectIsMe.active) this.effectIsMe.active = false;

            if (data.LockedFishID > -1) {
              this._playEffectLockFish(data);
            }
          }

          this._playEffectFire();

          gfEventEmitter.instance.emit(EventsCode1989.GAME_LAYER.CREATE_BULLET, data);
        };

        _proto._playEffectLockFish = function _playEffectLockFish(data) {
          var fish = FishManager1989.instance.getFishById(data.LockedFishID);
          var fishKind = fish._FishKind;

          if (fish) {
            gfEventEmitter.instance.emit(EventsCode1989.PLAYER_LAYER.START_LOCK_FISH, fish, this.gun);
            gfEventEmitter.instance.emit(EventsCode1989.PLAYER_LAYER.UPDATE_LOCK_FISH_IMAGE, fishKind);
          }
        };

        _proto._playEffectChangeGun = function _playEffectChangeGun() {
          if (this.gunAnim) {
            var gunName = "gun" + (this._gunIndex + 1);
            this['_isGunSkill'] = Object.values(Config1989.instance.GunSkill).indexOf(gunName) > -1;
            this.gunAnim.skeletonData = this.getGunSkeletonData(gunName);
            this.gunAnim.setAnimation(0, "idle", true);
          }
        };

        _proto.checkAngleByLockFish = function checkAngleByLockFish(data) {
          if (data.LockedFishID >= 0) {
            var fish = FishManager1989.instance.getFishById(data.LockedFishID);
            var startPos = getPostionInOtherNode(ReferenceManager1989.instance.getNodeGameLayer(), this.gun);
            var angle = 0;

            if (fish) {
              var endPos = fish.getLockPositionByNodeSpace(ReferenceManager1989.instance.getNodeGameLayer());
              angle = getRotation(endPos, startPos);
              data.Angle = angle;
            }
          }

          return data.Angle;
        };

        _proto.reset = function reset() {
          this.unscheduleAllCallbacks();
          this.stopFreezeEffect();
          var angle = 90;
          this.gun.angle = angle;

          if (this.ballTray) {
            this.ballTray.hide();
          }
        };

        _proto.resetOnExit = function resetOnExit() {
          this.unscheduleAllCallbacks();

          if (this.isMe) {
            if (this.effectIsMe.active) this.effectIsMe.active = false;
            gfDataStore.instance.setSelfInfo({
              isLockGun: false
            });
          }

          this.setActive(false);

          if (this.ballTray) {
            this.ballTray.hide();
          }

          this.txtUserName.string = '';
          this.wallet.resetOnExit();
          this.txtBet.string = '';
          this._gunIndex = 0;
          this._gunValue = 0;
          this.avatar.spriteFrame = null;
          this.resetUserId();
          this.stopFreezeEffect();
        };

        return Player1989;
      }(gfPlayer), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "otherUserSpine", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Player1998.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EventsCode1998.ts', './gfEventEmitter.ts', './gfPlayer.ts', './DataStore1998.ts', './utils.ts', './gfActionHelper.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, SpriteFrame, Sprite, Tween, tween, Button, v3, EventCode, gfEventEmitter, gfPlayer, DataStore1998, setOpacity, formatMoney, loadAvatarFacebook, scaleTo, delay, call, stopAllActions;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SpriteFrame = module.SpriteFrame;
      Sprite = module.Sprite;
      Tween = module.Tween;
      tween = module.tween;
      Button = module.Button;
      v3 = module.v3;
    }, function (module) {
      EventCode = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfPlayer = module.gfPlayer;
    }, function (module) {
      DataStore1998 = module.default;
    }, function (module) {
      setOpacity = module.setOpacity;
      formatMoney = module.formatMoney;
      loadAvatarFacebook = module.loadAvatarFacebook;
    }, function (module) {
      scaleTo = module.scaleTo;
      delay = module.delay;
      call = module.call;
      stopAllActions = module.stopAllActions;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "985e2soiIlHAZjWkOtJszlk", "Player1998", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Player1998 = exports('Player1998', (_dec = ccclass('Player1998'), _dec2 = property(SpriteFrame), _dec3 = property(Sprite), _dec(_class = (_class2 = /*#__PURE__*/function (_gfPlayer) {
        _inheritsLoose(Player1998, _gfPlayer);

        function Player1998() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfPlayer.call.apply(_gfPlayer, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "backgroundGunFrame", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "backgroundGun", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = Player1998.prototype;

        _proto.initObj = function initObj(data) {
          _gfPlayer.prototype.initObj.call(this, data);

          if (this.backgroundGun) {
            var index = this.isMe ? 1 : 0;
            this.backgroundGun.spriteFrame = this.backgroundGunFrame[index];
            this.backgroundGun.node.setPosition(this.backgroundGun.node.position.x, this.isMe ? 0 : -2, 1);
          }

          if (this.isMe) {
            this.effectIsMe.setPosition(this.node.getPosition());
          }
        };

        _proto._checkMaxGun = function _checkMaxGun() {
          var _this2 = this;

          if (DataStore1998.instance.getGunValue()[this.getGunIndex()] > this.wallet.getDisplayWallet()) {
            this.effectMaxGun.active = true;
            Tween.stopAllByTarget(this.effectMaxGun);
            setOpacity(this.effectMaxGun, 255);
            this.effectMaxGun.setScale(0, 0, 0);
            var fadeAction = tween(this.effectMaxGun);
            fadeAction.then(scaleTo(0.2, 1, 1));
            fadeAction.then(delay(1.8));
            fadeAction.then(scaleTo(0.2, 0, 0));
            fadeAction.then(call(function () {
              _this2.effectMaxGun.setScale(0, 0, 0);

              _this2.effectMaxGun.active = false;
            }));
            fadeAction.start();
            return false;
          }

          return true;
        };

        _proto._updateGun = function _updateGun() {
          if (this.btnMinus) {
            this.btnMinus.getComponent(Button).interactable = !(this.getGunIndex() === 0);
            this.btnMinus.getComponent(Sprite).grayscale = !this.btnMinus.getComponent(Button).interactable;
          }

          if (this.btnPlus) {
            this.btnPlus.getComponent(Button).interactable = !(this.getGunIndex() === DataStore1998.instance.getTotalGun() - 1);
            this.btnPlus.getComponent(Sprite).grayscale = !this.btnPlus.getComponent(Button).interactable;
          }

          this._gunValue = DataStore1998.instance.getGunValue()[this.getGunIndex()];
          this.txtBet.string = formatMoney(this._gunValue);

          this._playEffectChangeGun();

          if (this.isMe && DataStore1998.instance.getSelfInfo().skillLock) {
            if (this.btnPlus) {
              this.btnPlus.getComponent(Button).interactable = false;
              this.btnPlus.getComponent(Sprite).grayscale = true;
            }

            if (this.btnMinus) {
              this.btnMinus.getComponent(Button).interactable = false;
              this.btnMinus.getComponent(Sprite).grayscale = true;
            }
          }
        };

        _proto.lockBet = function lockBet(isLock) {
          if (isLock === void 0) {
            isLock = false;
          }

          if (isLock) {
            if (this.btnPlus) {
              this.btnPlus.getComponent(Button).interactable = false;
              this.btnPlus.getComponent(Sprite).grayscale = true;
            }

            if (this.btnMinus) {
              this.btnMinus.getComponent(Button).interactable = false;
              this.btnMinus.getComponent(Sprite).grayscale = true;
            }
          } else {
            this._updateGun();
          }
        };

        _proto.updateAvatar = function updateAvatar(data) {
          if (this.avatarAtlas) {
            if (this.avatarAtlas && loadAvatarFacebook) {
              if (data.Avatar && data.Avatar.indexOf('Avatar') === 0) {
                data.Avatar = data.Avatar.replace('Avatar', '');
              }

              loadAvatarFacebook(this.avatar, data.Avatar, this.avatarAtlas, 'avatar_', 2);
            }
          }
        };

        _proto.playerEffectScale = function playerEffectScale() {
          this.wallet.node.setScale(1, 1, 1);
          stopAllActions(this.wallet.node);
          tween(this.wallet.node).to(0.02, {
            scale: v3(1.1, 1.1, 1.1)
          }).to(0.02, {
            scale: v3(1, 1, 1)
          }).start();
        };

        _proto.activeFreezeEffect = function activeFreezeEffect() {
          _gfPlayer.prototype.activeFreezeEffect.call(this);

          if (this.isMe) gfEventEmitter.instance.emit(EventCode.SOUND.ACTIVE_FREEZE);
        };

        return Player1998;
      }(gfPlayer), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "backgroundGunFrame", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "backgroundGun", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PlayerLayer1989.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfPlayerLayer.ts', './gfCustomDataType.ts', './utils.ts', './DataStore1989.ts', './EventsCode1989.ts', './gfEventEmitter.ts', './Player1989.ts', './AnimUtils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, tween, gfPlayerLayer, gfGunSkeletonData, convertAssetArrayToObject, DataStore1989, EventsCode1989, gfEventEmitter, Player1989, setOpacity;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      tween = module.tween;
    }, function (module) {
      gfPlayerLayer = module.gfPlayerLayer;
    }, function (module) {
      gfGunSkeletonData = module.gfGunSkeletonData;
    }, function (module) {
      convertAssetArrayToObject = module.convertAssetArrayToObject;
    }, function (module) {
      DataStore1989 = module.default;
    }, function (module) {
      EventsCode1989 = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      Player1989 = module.Player1989;
    }, function (module) {
      setOpacity = module.setOpacity;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "eb46a7HZF9CuYkLb3uxKBum", "PlayerLayer1989", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var PlayerLayer1989 = exports('PlayerLayer1989', (_dec = ccclass('PlayerLayer1989'), _dec2 = property(gfGunSkeletonData), _dec3 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_gfPlayerLayer) {
        _inheritsLoose(PlayerLayer1989, _gfPlayerLayer);

        function PlayerLayer1989() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfPlayerLayer.call.apply(_gfPlayerLayer, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "gunSkeletonData", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "myUserInfo", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = PlayerLayer1989.prototype;

        _proto.onLoad = function onLoad() {
          _gfPlayerLayer.prototype.onLoad.call(this);

          this.node['getMyUserInfo'] = this.getMyUserInfo.bind(this);
        };

        _proto.configAllPlayer = function configAllPlayer() {
          for (var i = 0; i < this.listPlayer.length; i++) {
            this.listPlayer[i].gunAssets = convertAssetArrayToObject(this.gunSkeletonData);
            this.listPlayer[i].avatarAtlas = this.avatarAtlas;
            this.listPlayer[i].waitingText = this.listWaiting[i];
            setOpacity(this.listPlayer[i].waitingText, 255 * 0.6);
            this.listPlayer[i].index = i;
            this.listPlayer[i].effectIsMe = this.effectIsMe;
            this.listPlayer[i].effectMaxGun = this.effectMaxGun;
          }
        };

        _proto.getMyUserInfo = function getMyUserInfo() {
          return this.myUserInfo;
        };

        _proto.getPlayerByDeskStation = function getPlayerByDeskStation(deskStation) {
          if (!this.listPlayer) return null;
          var index = deskStation;

          if (DataStore1989.instance.getSelfDeskStation() >= 2) {
            index = [0, 1, 2][deskStation];
          }

          return this.listPlayer[index];
        };

        _proto.updateListPlayer = function updateListPlayer(data) {
          for (var i = 0; i < data.length; i++) {
            var userInfo = data[i];
            userInfo.isUserInPlace = true;
            var player = this.getPlayerByDeskStation(userInfo.DeskStation);

            if (player) {
              player.resetUserId();
              player.initObj(userInfo);
            }
          } //Make sure init position after init all player


          gfEventEmitter.instance.emit(EventsCode1989.GAME_LAYER.ON_AFTER_INIT_PLAYER_LIST);
          gfEventEmitter.instance.emit(EventsCode1989.COMMON.HIDE_WAITING);
          gfEventEmitter.instance.emit(EventsCode1989.POPUP.POPUP_TUTORIAL);
        };

        _proto.playerJoinBoard = function playerJoinBoard(userInfo) {
          if (userInfo === void 0) {
            userInfo = null;
          }

          var player = this.getPlayerByDeskStation(userInfo.DeskStation);

          if (player) {
            userInfo.isUserInPlace = false;
            player.initObj(userInfo);
            player.waitingText.active = false;
            setOpacity(player.waitingText, 255);
          }
        };

        _proto.playerLeaveBoard = function playerLeaveBoard(data) {
          if (data === void 0) {
            data = null;
          }

          var player = this.getPlayerByDeskStation(data.DeskStation);

          if (player) {
            tween(this.node).call(function () {
              player.getComponent(Player1989).playAnimCloseOtherUser();
            }).delay(1).call(function () {
              player.resetOnExit();
              player.waitingText.active = true;
              setOpacity(player.waitingText, 255 * 0.6);

              if (!player.isMe) {
                gfEventEmitter.instance.emit(EventsCode1989.PLAYER_LAYER.REMOVE_BALL, data);
              }
            }).start();
          }
        };

        return PlayerLayer1989;
      }(gfPlayerLayer), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "gunSkeletonData", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "myUserInfo", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PlayerView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "e7e66knUO5Ii5l/63M/wpTr", "PlayerView", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var PLAYER_LAYER = {
        PLAYER_CHANGE_DESK: 'PLAYER_CHANGE_DESK'
      };
      var PlayerView = exports('PlayerView', (_dec = ccclass('PlayerView'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(PlayerView, _Component);

        function PlayerView() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "players", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "waitingIcons", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "touchLayer", _descriptor3, _assertThisInitialized(_this));

          _this.listActiveIndex = [];
          _this.currentFocusPlayer = null;
          _this.gunData = {
            0: 0,
            1: 0,
            2: 0
          };
          return _this;
        }

        var _proto = PlayerView.prototype;

        _proto.onLoad = function onLoad() {
          this.node.on(PLAYER_LAYER.PLAYER_CHANGE_DESK, this.onChangeDeskstation, this);
        };

        _proto.start = function start() {
          this.currentFocusPlayer = 1;
          this.listActiveIndex = [1];
        };

        _proto.onClickDesk = function onClickDesk(evt, data) {
          this.onChangeDeskstation(data);
        };

        _proto.onChangeDeskstation = function onChangeDeskstation(deskStation) {
          var _this2 = this;

          this.players.forEach(function (item, index) {
            if (index == deskStation) {
              var playerIndex = -1;

              if (item.active == false) {
                _this2.showPlayer(item, index, true);

                _this2.listActiveIndex.push(index);

                _this2.currentFocusPlayer = index;
                playerIndex = index;
              } else {
                if (_this2.currentFocusPlayer !== index) {
                  _this2.currentFocusPlayer = index;
                  playerIndex = index;
                } else {
                  _this2.showPlayer(item, index, false);

                  _this2.listActiveIndex.splice(_this2.listActiveIndex.indexOf(index), 1);

                  if (_this2.listActiveIndex.length > 0) {
                    _this2.currentFocusPlayer = _this2.listActiveIndex[0];
                    playerIndex = _this2.currentFocusPlayer;
                  } else {
                    _this2.currentFocusPlayer = null;
                    playerIndex = -1;
                  }
                }
              }

              _this2.touchLayer.emit("CHANGE_PLAYER", playerIndex);
            }
          });
        };

        _proto.showPlayer = function showPlayer(player, index, isShow) {
          if (isShow === void 0) {
            isShow = false;
          }

          player.active = isShow;
          this.waitingIcons[index].active = !isShow;
        };

        return PlayerView;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "players", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "waitingIcons", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "touchLayer", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PoolFactory.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CustomType.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, NodePool, instantiate, Component, PoolPrefab, CustomEvent;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      NodePool = module.NodePool;
      instantiate = module.instantiate;
      Component = module.Component;
    }, function (module) {
      PoolPrefab = module.PoolPrefab;
      CustomEvent = module.CustomEvent;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "f3978/G4gRNPb+ZuiP2JxRv", "PoolFactory", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var PoolFactory = exports('PoolFactory', (_dec = ccclass('PoolFactory'), _dec2 = property({
        type: PoolPrefab,
        displayName: 'Pool Prefab List',
        visible: true
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(PoolFactory, _Component);

        function PoolFactory() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "poolPrefabList", _descriptor, _assertThisInitialized(_this));

          _this.pools = [];
          return _this;
        }

        var _proto = PoolFactory.prototype;

        _proto.onLoad = function onLoad() {
          for (var i = 0; i < this.poolPrefabList.length; i++) {
            var prefabObject = this.poolPrefabList[i];

            if (prefabObject) {
              var prefabName = prefabObject.prefabName;
              var initialCount = prefabObject.initialCount;
              var prefab = prefabObject.prefab;

              if (prefabName && initialCount && prefab) {
                var aPool = new NodePool(prefabName);

                for (var j = 0; j < initialCount; j++) {
                  var obj = instantiate(prefab);
                  obj.name = prefabName;
                  obj.active = false;
                  aPool.put(obj);
                }

                var poolObject = {
                  prefabName: prefabName,
                  prefab: prefab,
                  pool: aPool
                };
                this.pools[i] = poolObject;
              }
            }
          }

          this.node.on("GET_OBJECT", this.getObject, this);
          this.node.on("REMOVE_OBJECT", this.removeObject, this);
          this.setupInstant();
        };

        _proto.setupInstant = function setupInstant() {
          this.node.dispatchEvent(new CustomEvent("SET_UP_POOL_FACTORY", true, {
            poolFactory: this
          }));
        };

        _proto.getObject = function getObject(_prefabName) {
          var obj = null;

          for (var i = 0; i < this.pools.length; i++) {
            var poolObject = this.pools[i];

            if (poolObject) {
              var prefabName = poolObject.prefabName,
                  prefab = poolObject.prefab,
                  pool = poolObject.pool;

              if (prefabName == _prefabName) {
                if (pool.size() > 0) {
                  obj = pool.get();
                } else {
                  obj = instantiate(prefab);
                  obj.name = prefabName;
                  obj.active = false;
                }

                break;
              }
            }
          }

          return obj;
        };

        _proto.removeObject = function removeObject(node) {
          var name = node.name;

          for (var i = 0; i < this.pools.length; i++) {
            var poolObject = this.pools[i];

            if (poolObject) {
              var _this$pools$i = this.pools[i],
                  prefabName = _this$pools$i.prefabName,
                  pool = _this$pools$i.pool;

              if (name == prefabName) {
                node.active = false;
                pool.put(node);
                break;
              }
            }
          }
        };

        _proto.onDestroy = function onDestroy() {
          for (var i = 0; i < this.pools.length; i++) {
            var poolObject = this.pools[i];

            if (poolObject) {
              var pool = poolObject.pool;

              if (pool) {
                pool.clear();
              }

              poolObject.prefab = null;
            }
          }

          this.pools = [];
          this.pools = null;
          this.poolPrefabList = [];
          this.poolPrefabList = null;
          this.node.off("GET_OBJECT", this.getObject, this);
          this.node.off("REMOVE_OBJECT", this.removeObject, this);
        };

        return PoolFactory;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "poolPrefabList", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PoolManager1989.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfPoolManager.ts', './gfNodePoolConfig.ts', './DataStore1989.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _assertThisInitialized, cclegacy, POOL_TYPE, gfPoolManager, gfNodePoolConfig, DataStore1989;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      POOL_TYPE = module.POOL_TYPE;
      gfPoolManager = module.default;
    }, function (module) {
      gfNodePoolConfig = module.default;
    }, function (module) {
      DataStore1989 = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "50935TVPeJCd5p4/KOTJ/mD", "PoolManager1989", undefined);

      var PoolManager1989 = exports('default', /*#__PURE__*/function (_gfPoolManager) {
        _inheritsLoose(PoolManager1989, _gfPoolManager);

        function PoolManager1989(listPrefab) {
          var _this;

          _this = _gfPoolManager.call(this, listPrefab) || this;
          PoolManager1989.instance = _assertThisInitialized(_this);
          return _this;
        }

        var _proto = PoolManager1989.prototype;

        _proto.initPools = function initPools() {
          this.pools = []; //type, prefabName, mainComponent, count

          this.initPool(POOL_TYPE.SpineFish, "Mummy1989", "Mummy1989", 25);
          this.initPool(POOL_TYPE.Bullet, "Bullet1989", "Bullet1989", 10);
          this.initPool(POOL_TYPE.NetFX, "NetFX1989", "NetFX1989", 5);
          this.initPool(POOL_TYPE.Coin, "Coin1989", "gfCoinFX", 10);
          this.initPool(POOL_TYPE.LabelCoin, "LabelCoin1989", "gfCoinLabel", 5);
          this.initPool(POOL_TYPE.SmallExplosion, "SmallExplosion1989", "gfExplosionSpine", 50);
          this.initPool(POOL_TYPE.BigExplosion, "SmallExplosion1989", "gfExplosionSpine", 20); //init done

          this.listPrefab = null;
        };

        _proto.getNetFX = function getNetFX(data) {
          var isBulletHole = data.isBulletHole,
              BulletMultiple = data.BulletMultiple,
              isMe = data.isMe;
          var kind = isBulletHole ? "BulletHole" : DataStore1989.instance.getBulletIndex(BulletMultiple);
          var config = gfNodePoolConfig.instance.getNetFXConfig(kind);
          if (!config) return null;
          var netFX = this.getObjectMainComponentByType(POOL_TYPE.NetFX);
          config.kind = kind;
          config.isMe = isMe;
          netFX.initAssets(config);
          return netFX;
        };

        return PoolManager1989;
      }(gfPoolManager));
      PoolManager1989.instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PoolManager1998.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfPoolManager.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _assertThisInitialized, cclegacy, instantiate, POOL_TYPE, gfPoolManager;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      instantiate = module.instantiate;
    }, function (module) {
      POOL_TYPE = module.POOL_TYPE;
      gfPoolManager = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "a9368a4evpPIbSsNC49cfny", "PoolManager1998", undefined);

      var PoolManager1998 = exports('default', /*#__PURE__*/function (_gfPoolManager) {
        _inheritsLoose(PoolManager1998, _gfPoolManager);

        function PoolManager1998(listPrefab) {
          var _this;

          _this = _gfPoolManager.call(this, listPrefab) || this;
          PoolManager1998.instance = _assertThisInitialized(_this);
          return _this;
        }

        var _proto = PoolManager1998.prototype;

        _proto.initPools = function initPools() {
          this.pools = [];
          this.listBoss.push(instantiate(this.listPrefab["Dragon1998"]).getComponent('gfDragon')); //type, prefabName, mainComponent, count

          this.initPool(POOL_TYPE.SpineFish, "SpineFish1998", "SpineFish1998", 25);
          this.initPool(POOL_TYPE.SpriteFish, "SpriteFish1998", "SpriteFish1998", 25);
          this.initPool(POOL_TYPE.Coin, "Coin1998", "gfCoinFX", 10);
          this.initPool(POOL_TYPE.Bullet, "Bullet1998", "gfBullet", 10);
          this.initPool(POOL_TYPE.NetFX, "NetFX1998", "gfNetFX", 5);
          this.initPool(POOL_TYPE.FreezeEffect, "ItemFreezeEffect1998", "gfItemFreeze", 1);
          this.initPool(POOL_TYPE.LuckyEffect, "LuckyEffect", "LuckyEffect1998", 1);
          this.initPool(POOL_TYPE.DragonBall, "DragonBall1998", "gfDragonBall", 1);
          this.initPool(POOL_TYPE.LabelCoin, "LabelCoin1998", "gfCoinLabel", 5);
          this.initPool(POOL_TYPE.SmallExplosion, "SmallExplosion1998", "gfExplosionSpine", 50);
          this.initPool(POOL_TYPE.BigExplosion, "SmallExplosion1998", "gfExplosionSpine", 20); //init done

          this.listPrefab = null;
        };

        return PoolManager1998;
      }(gfPoolManager));
      PoolManager1998.instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PopupInfo1989.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfPopupInfo.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, GfPopupInfo;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      GfPopupInfo = module.GfPopupInfo;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "7df49UFqHBNoa9c6aPzY8Wz", "PopupInfo1989", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var PopupInfo1989 = exports('PopupInfo1989', (_dec = ccclass('PopupInfo1989'), _dec(_class = /*#__PURE__*/function (_GfPopupInfo) {
        _inheritsLoose(PopupInfo1989, _GfPopupInfo);

        function PopupInfo1989() {
          return _GfPopupInfo.apply(this, arguments) || this;
        }

        return PopupInfo1989;
      }(GfPopupInfo)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PopupInfo1998.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfEventEmitter.ts', './gfUtilities.ts', './gfLocalize.ts', './Config1998.ts', './gfPopupInfo.ts', './gfBaseEvents.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Button, Node, ScrollView, Vec3, sys, gfEventEmitter, checkTablet, gfLocalize, Config1998, GfPopupInfo, gfBaseEvents;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Button = module.Button;
      Node = module.Node;
      ScrollView = module.ScrollView;
      Vec3 = module.Vec3;
      sys = module.sys;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      checkTablet = module.checkTablet;
    }, function (module) {
      gfLocalize = module.default;
    }, function (module) {
      Config1998 = module.default;
    }, function (module) {
      GfPopupInfo = module.GfPopupInfo;
    }, function (module) {
      gfBaseEvents = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "f99f1jqkjNLToN5Eoh7HLi6", "PopupInfo1998", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var PopupInfo1998 = exports('PopupInfo1998', (_dec = ccclass('PopupInfo1998'), _dec2 = property(Button), _dec3 = property(Button), _dec4 = property(Button), _dec5 = property(Node), _dec6 = property(Node), _dec7 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_GfPopupInfo) {
        _inheritsLoose(PopupInfo1998, _GfPopupInfo);

        function PopupInfo1998() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GfPopupInfo.call.apply(_GfPopupInfo, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "buttonFish", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buttonFeature", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buttonDragon", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "fish", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "feature", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "dragon", _descriptor6, _assertThisInitialized(_this));

          _this._currentTabId = 0;
          return _this;
        }

        var _proto = PopupInfo1998.prototype;

        _proto.initLanguage = function initLanguage() {
          this.popupTitle = gfLocalize.instance.popupTitle.info;
        };

        _proto.show = function show() {
          _GfPopupInfo.prototype.show.call(this);

          this.setInitialized(true);
          this.dragon.getComponent(ScrollView).scrollToTop(0);
          this.feature.getComponent(ScrollView).scrollToTop(0);
        };

        _proto.onClickButton = function onClickButton(event, data) {
          var tabId = parseInt(data);

          if (this._currentTabId === tabId) {
            return;
          }

          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          this._currentTabId = tabId;
          this.hideAllButton();

          switch (tabId) {
            case 0:
              this.updateStateButton(this.buttonFish, true);
              this.fish.active = true;
              break;

            case 1:
              this.updateStateButton(this.buttonFeature, true);
              this.feature.active = true;
              this.feature.getComponent(ScrollView).scrollToTop(0);
              break;

            case 2:
              this.updateStateButton(this.buttonDragon, true);
              this.dragon.active = true;
              this.dragon.getComponent(ScrollView).scrollToTop(0);
              break;
          }
        };

        _proto.showWithEffect = function showWithEffect() {
          _GfPopupInfo.prototype.showWithEffect.call(this);

          var scalePopup = new Vec3(1, 1, 1);

          if (checkTablet() || sys.platform === sys.Platform.DESKTOP_BROWSER) {
            scalePopup = new Vec3(0.7, 0.7, 1);
          }

          this.contents.setScale(scalePopup);
        };

        _proto.hideAllButton = function hideAllButton() {
          this.updateStateButton(this.buttonFish, false);
          this.updateStateButton(this.buttonFeature, false);
          this.updateStateButton(this.buttonDragon, false);
          this.fish.active = false;
          this.feature.active = false;
          this.dragon.active = false;
        };

        _proto.updateStateButton = function updateStateButton(button, active) {
          button.node.getChildByName("checkmark").active = active;

          if (active) {
            button.node.getChildByName('Background').y = 0;
          } else {
            button.node.getChildByName('Background').y = 1.1;
          }
        };

        _proto.onClick = function onClick() {
          if (this.getInitialized) {
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          }
        };

        _proto.hide = function hide(animStyle) {
          if (animStyle === void 0) {
            animStyle = Config1998.instance.POPUP_ANIMATION.DEFAULT;
          }

          _GfPopupInfo.prototype.hide.call(this, animStyle);

          this.setInitialized(false);
        };

        _proto.onClose = function onClose() {
          _GfPopupInfo.prototype.onClose.call(this);
        };

        return PopupInfo1998;
      }(GfPopupInfo), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "buttonFish", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "buttonFeature", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "buttonDragon", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "fish", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "feature", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "dragon", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PopupJackpotHistory1989.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfPopupJackpotHistory.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, GfPopupJackpotHistory;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      GfPopupJackpotHistory = module.GfPopupJackpotHistory;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "39347LtjPlPyYVapQtWVev/", "PopupJackpotHistory1989", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var PopupJackpotHistory1989 = exports('PopupJackpotHistory1989', (_dec = ccclass('PopupJackpotHistory1989'), _dec(_class = /*#__PURE__*/function (_GfPopupJackpotHistor) {
        _inheritsLoose(PopupJackpotHistory1989, _GfPopupJackpotHistor);

        function PopupJackpotHistory1989() {
          return _GfPopupJackpotHistor.apply(this, arguments) || this;
        }

        return PopupJackpotHistory1989;
      }(GfPopupJackpotHistory)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PopupJackpotHistory1998.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfUtilities.ts', './gfPopupJackpotHistory.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Vec3, sys, checkTablet, GfPopupJackpotHistory;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      sys = module.sys;
    }, function (module) {
      checkTablet = module.checkTablet;
    }, function (module) {
      GfPopupJackpotHistory = module.GfPopupJackpotHistory;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "0cc4eJ9k0dM35l1tJ+wFSnH", "PopupJackpotHistory1998", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var PopupJackpotHistory1998 = exports('PopupJackpotHistory1998', (_dec = ccclass('PopupJackpotHistory1998'), _dec(_class = /*#__PURE__*/function (_GfPopupJackpotHistor) {
        _inheritsLoose(PopupJackpotHistory1998, _GfPopupJackpotHistor);

        function PopupJackpotHistory1998() {
          return _GfPopupJackpotHistor.apply(this, arguments) || this;
        }

        var _proto = PopupJackpotHistory1998.prototype;

        _proto.showWithEffect = function showWithEffect() {
          this.contents.setPosition(0, 14, 0);

          _GfPopupJackpotHistor.prototype.showWithEffect.call(this);

          var scalePopup = new Vec3(1, 1, 1);

          if (checkTablet() || sys.platform === sys.Platform.DESKTOP_BROWSER) {
            scalePopup = new Vec3(0.7, 0.7, 1);
          }

          this.contents.setScale(scalePopup);
        };

        return PopupJackpotHistory1998;
      }(GfPopupJackpotHistory)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PopupPrompt1989.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfUtilities.ts', './gfBaseConfig.ts', './gfPopupPrompt.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Tween, Button, SetZIndex, gfBaseConfig, GfPopupPrompt;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Tween = module.Tween;
      Button = module.Button;
    }, function (module) {
      SetZIndex = module.SetZIndex;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      GfPopupPrompt = module.GfPopupPrompt;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "979bcrf+UZGM6/sKyy2IT7X", "PopupPrompt1989", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var PopupPrompt1989 = exports('PopupPrompt1989', (_dec = ccclass('PopupPrompt1989'), _dec2 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_GfPopupPrompt) {
        _inheritsLoose(PopupPrompt1989, _GfPopupPrompt);

        function PopupPrompt1989() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GfPopupPrompt.call.apply(_GfPopupPrompt, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "layoutButton", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = PopupPrompt1989.prototype;

        _proto.show = function show(data) {
          if (!this.txtMessage) return;

          if (data) {
            this._currData = data;
          }

          var _this$onPromptHandler = this.onPromptHandler(this._currData),
              msg = _this$onPromptHandler.msg,
              type = _this$onPromptHandler.type,
              callbacks = _this$onPromptHandler.callbacks;

          this.txtMessage.string = msg;
          this._dataCallback = null;

          if (callbacks) {
            this._dataCallback = callbacks;
          }

          this.layoutButton.active = true;

          switch (type) {
            case gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON:
              this.btnYes.active = true;
              this.btnNo.active = false;
              this.btnClose.active = false;
              break;

            case gfBaseConfig.instance.POPUP_PROMPT.CONFIRM_AND_REJECT_BUTTON:
              this.btnNo.active = true;
              this.btnYes.active = true;
              break;

            case gfBaseConfig.instance.POPUP_PROMPT.CONFIRM_AND_CLOSE_BUTTON:
              this.btnYes.active = true;
              this.btnNo.active = false;
              this.btnClose.active = true;
              break;

            case gfBaseConfig.instance.POPUP_PROMPT.NONE_BUTTON:
              this.btnYes.active = false;
              this.btnNo.active = false;
              this.layoutButton.active = false;
              this.btnClose.active = false;
              break;

            default:
              this.btnYes.active = false;
              this.btnNo.active = false;
              this.layoutButton.active = false;
              this.btnClose.active = false;
              break;
          }

          Tween.stopAllByTarget(this.node);

          if (this.contents) {
            Tween.stopAllByTarget(this.contents);
          }

          this.node.active = true;

          if (this.btnClose) {
            this.btnClose.getComponent(Button).interactable = true;
          }

          this.showWithEffect();
          SetZIndex(this.node, gfBaseConfig.instance.Z_INDEX.POPUP);
          this.btnYes.getComponent(Button).interactable = true;
          this.btnNo.getComponent(Button).interactable = true;
        };

        _proto.onClose = function onClose() {
          _GfPopupPrompt.prototype.onClose.call(this);

          this.btnYes.getComponent(Button).interactable = false;
          this.btnNo.getComponent(Button).interactable = false;
        };

        return PopupPrompt1989;
      }(GfPopupPrompt), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "layoutButton", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PopupPrompt1998.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfPopupPrompt.ts', './gfUtilities.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Vec3, sys, GfPopupPrompt, checkTablet;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      sys = module.sys;
    }, function (module) {
      GfPopupPrompt = module.GfPopupPrompt;
    }, function (module) {
      checkTablet = module.checkTablet;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "39d1eao14xD5Ij3/EVseHYP", "PopupPrompt1998", undefined);

      var ccclass = _decorator.ccclass;
      var PopupPrompt1998 = exports('PopupPrompt1998', (_dec = ccclass('PopupPrompt1998'), _dec(_class = /*#__PURE__*/function (_GfPopupPrompt) {
        _inheritsLoose(PopupPrompt1998, _GfPopupPrompt);

        function PopupPrompt1998() {
          return _GfPopupPrompt.apply(this, arguments) || this;
        }

        var _proto = PopupPrompt1998.prototype;

        _proto.showWithEffect = function showWithEffect() {
          _GfPopupPrompt.prototype.showWithEffect.call(this);

          var scalePopup = new Vec3(1, 1, 1);

          if (checkTablet() || sys.platform === sys.Platform.DESKTOP_BROWSER) {
            scalePopup = new Vec3(0.7, 0.7, 1);
          }

          this.contents.setScale(scalePopup);
        };

        return PopupPrompt1998;
      }(GfPopupPrompt)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PopupSetting1989.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './DataStore1989.ts', './gfPopupSettingSlider.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Button, DataStore1989, GfPopupSettingSlider;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Button = module.Button;
    }, function (module) {
      DataStore1989 = module.default;
    }, function (module) {
      GfPopupSettingSlider = module.GfPopupSettingSlider;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "a8625HRo2xJJK3KNbAFG34B", "PopupSetting1989", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var PopupSetting1989 = exports('PopupSetting1989', (_dec = ccclass('PopupSetting1989'), _dec(_class = /*#__PURE__*/function (_GfPopupSettingSlider) {
        _inheritsLoose(PopupSetting1989, _GfPopupSettingSlider);

        function PopupSetting1989() {
          return _GfPopupSettingSlider.apply(this, arguments) || this;
        }

        var _proto = PopupSetting1989.prototype;

        _proto.updateSlider = function updateSlider() {
          if (DataStore1989.instance.getCurrentSFXVolume() == 0) this.handlerSfx.getComponent(Button).interactable = false;
          if (DataStore1989.instance.getCurrentBGMVolume() == 0) this.handlerBgm.getComponent(Button).interactable = false;

          _GfPopupSettingSlider.prototype.updateSlider.call(this);
        };

        _proto.onSliderSFX = function onSliderSFX(event) {
          _GfPopupSettingSlider.prototype.onSliderSFX.call(this, event);

          this.handlerSfx.getComponent(Button).interactable = event.progress;
        };

        _proto.onSliderBGM = function onSliderBGM(event) {
          _GfPopupSettingSlider.prototype.onSliderBGM.call(this, event);

          this.handlerBgm.getComponent(Button).interactable = event.progress;
        };

        return PopupSetting1989;
      }(GfPopupSettingSlider)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PopupSetting1998.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfPopupSetting.ts', './gfUtilities.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Vec3, sys, GfPopupSetting, checkTablet;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      sys = module.sys;
    }, function (module) {
      GfPopupSetting = module.GfPopupSetting;
    }, function (module) {
      checkTablet = module.checkTablet;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "cb47d6jlzRNjr8lPFfDWn+Q", "PopupSetting1998", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var PopupSetting1998 = exports('PopupSetting1998', (_dec = ccclass('PopupSetting1998'), _dec(_class = /*#__PURE__*/function (_GfPopupSetting) {
        _inheritsLoose(PopupSetting1998, _GfPopupSetting);

        function PopupSetting1998() {
          return _GfPopupSetting.apply(this, arguments) || this;
        }

        var _proto = PopupSetting1998.prototype;

        _proto.showWithEffect = function showWithEffect() {
          _GfPopupSetting.prototype.showWithEffect.call(this);

          var scalePopup = new Vec3(1, 1, 1);

          if (checkTablet() || sys.platform === sys.Platform.DESKTOP_BROWSER) {
            scalePopup = new Vec3(0.7, 0.7, 1);
          }

          this.contents.setScale(scalePopup);
        };

        return PopupSetting1998;
      }(GfPopupSetting)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/QuestData.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, log;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      log = module.log;
    }],
    execute: function () {
      cclegacy._RF.push({}, "2a845RUptlOp5ODbU2KY7+K", "QuestData", undefined);

      var QuestData = exports('QuestData', /*#__PURE__*/function () {
        function QuestData() {
          this.eventInfo = void 0;
          this.taskData = [];
          this.questProcess = [];
          this.winAmountQuest = 0;
          this.winAmountEvent = 0;
          this.finishedCurrent = false;
          this.hasUpdate = false;
          this.active = false;
          this.showedAnim = false;
        }

        var _proto = QuestData.prototype;

        _proto.initQuestData = function initQuestData(data) {
          log("initQuestData " + data);
          var params = data.split(',');
          var questInfo = params[0].split(';');
          var questTime = questInfo[3].split('/');
          var questActive = questInfo[4] === '1';
          this.eventInfo = {
            inited: true,
            eventTitle: questInfo[0],
            eventId: questInfo[1],
            questId: questInfo[2],
            serverTime: parseInt(questTime[0]),
            endTime: parseInt(questTime[1]),
            currentIndex: 0,
            periodTime: this.parseTimePeriod(questInfo[5]),
            progressStatus: parseInt(questInfo[6]),
            eventType: parseInt(questInfo[7]),
            isCurrentGame: false,
            isFinished: false,
            playingFinish: false,
            playedAnimWin: false
          };
          this.active = questActive;
          this.taskData = this.parseTaskArray(params.slice(2, params.length).join(','));
          this.questProcess = this.mapQuestData(params[1].split(';'));
          this.eventInfo.isCurrentGame = this.eventInfo.progressStatus == 1;
          this.finishedCurrent = this.eventInfo.progressStatus == 2;
        };

        _proto.updateQuestData = function updateQuestData(taskArray, winAmountQuest, winAmountEvent) {
          for (var i = 0; i < taskArray.length; i++) {
            var task = this.taskData[i];
            var params = taskArray[i].split(';');
            var progress = params[2].split('/');
            var current = parseInt(progress[0]);
            var total = parseInt(progress[1]);
            task['ProgressStr'] = current + "/" + total;
            task['Progress'] = Number(progress[0]) / Number(progress[1]);
            task['Finished'] = task['Progress'] == 1;
          }

          if (winAmountQuest) {
            this.winAmountQuest = winAmountQuest;
          }

          if (winAmountEvent) {
            this.winAmountEvent = winAmountEvent;
          }

          this.hasUpdate = true;
        };

        _proto.parseTaskArray = function parseTaskArray(taskArrString) {
          var _this = this;

          var result = [];
          var taskArray = taskArrString.split(',');
          taskArray.forEach(function (it) {
            var task = _this.parseTask(it);

            result.push(task);
          });
          return result;
        };

        _proto.parseTask = function parseTask(taskString) {
          var params = taskString.split(';');
          var progressArr = params[2].split('/');
          var current = parseInt(progressArr[0]);
          var total = parseInt(progressArr[1]);
          var progress = Number(progressArr[0]) / Number(progressArr[1]);
          var task;
          task = {
            Id: params[0],
            Des: params[1],
            Current: current,
            Total: total,
            ProgressStr: current + "/" + total,
            Progress: progress,
            Finished: progress == 1
          };
          return task;
        };

        _proto.parseTimePeriod = function parseTimePeriod(periodString) {
          var result = [];

          if (periodString != "") {
            var periods = periodString.split("_");

            for (var i = 0; i < periods.length; i++) {
              var time = periods[i].split("-");
              var startTime = parseFloat(time[0].replace(":", "."));
              var endTime = parseFloat(time[1].replace(":", "."));
              result.push([startTime, endTime]);
            }
          }

          return result;
        };

        _proto.questComplete = function questComplete(data) {
          var params = data.split(',');
          var questInfo = params[0].split(';');
          this.eventInfo.progressStatus = parseInt(questInfo[6]);
          this.eventInfo.isCurrentGame = this.eventInfo.progressStatus == 1;
          this.questProcess = this.mapQuestData(params[1].split(';'));
        };

        _proto.mapQuestData = function mapQuestData(data) {
          var result = [];
          var isFirstQuest = true;
          this.eventInfo.isFinished = true;

          for (var index = 0; index < data.length; index++) {
            var detail = data[index].split('-');
            var isFinished = String(true) === detail[2];
            var isValid = !isFinished && isFirstQuest;
            var betIds = detail[3].split(':');

            if (!isFinished) {
              this.eventInfo.isFinished = false;
            }

            result.push({
              gameId: detail[0],
              winAmount: Number(detail[1]),
              isFinished: isFinished,
              isValid: isValid,
              index: index,
              betIds: betIds
            });

            if (isValid) {
              isFirstQuest = false;
              this.eventInfo.currentIndex = index;
            }
          }

          return result;
        };

        _proto.formatTaskData = function formatTaskData(data) {
          var _this2 = this;

          var tasks = data.eventData;
          var updatedTask = [];
          tasks.forEach(function (it) {
            updatedTask.push(_this2.parseTask(it));
          });
          this.taskData = updatedTask;
        };

        _proto.reset = function reset() {
          this.taskData.forEach(function (task) {
            task.Finished = false;
            task.Current = 0;
            task.Progress = 0;
            task.ProgressStr = "0/" + task.Total;
          });
        };

        return QuestData;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ReferenceManager1989.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfReferenceManager.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _assertThisInitialized, cclegacy, _decorator, gfReferenceManager;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfReferenceManager = module.default;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "ed50aKpDGRFAoIDpUN4uC+1", "ReferenceManager1989", undefined);

      var ccclass = _decorator.ccclass;
      var ReferenceManager1989 = exports('default', (_dec = ccclass('ReferenceManager1989'), _dec(_class = (_class2 = /*#__PURE__*/function (_gfReferenceManager) {
        _inheritsLoose(ReferenceManager1989, _gfReferenceManager);

        function ReferenceManager1989() {
          var _this;

          _this = _gfReferenceManager.call(this) || this;
          ReferenceManager1989.instance = _assertThisInitialized(_this);
          return _this;
        }

        var _proto = ReferenceManager1989.prototype;

        _proto.destroy = function destroy() {
          ReferenceManager1989.instance = null;
        };

        return ReferenceManager1989;
      }(gfReferenceManager), _class2.instance = null, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ReferenceManager1998.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfReferenceManager.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _assertThisInitialized, cclegacy, _decorator, gfReferenceManager;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfReferenceManager = module.default;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "78fd2OVQgtEdph9BLLSKbZQ", "ReferenceManager1998", undefined);

      var ccclass = _decorator.ccclass;
      var ReferenceManager1998 = exports('default', (_dec = ccclass('ReferenceManager1998'), _dec(_class = (_class2 = /*#__PURE__*/function (_gfReferenceManager) {
        _inheritsLoose(ReferenceManager1998, _gfReferenceManager);

        function ReferenceManager1998() {
          var _this;

          _this = _gfReferenceManager.call(this) || this;
          ReferenceManager1998.instance = _assertThisInitialized(_this);
          return _this;
        }

        var _proto = ReferenceManager1998.prototype;

        _proto.destroy = function destroy() {
          ReferenceManager1998.instance = null;
        };

        return ReferenceManager1998;
      }(gfReferenceManager), _class2.instance = null, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RenderTextureFactory.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './PoolFactory.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Camera, RenderTexture, Vec3, SpriteFrame, Rect, sys, Vec2, Component, PoolFactory;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Camera = module.Camera;
      RenderTexture = module.RenderTexture;
      Vec3 = module.Vec3;
      SpriteFrame = module.SpriteFrame;
      Rect = module.Rect;
      sys = module.sys;
      Vec2 = module.Vec2;
      Component = module.Component;
    }, function (module) {
      PoolFactory = module.PoolFactory;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _dec3, _dec4, _dec5, _dec6, _class4, _class5, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16;

      cclegacy._RF.push({}, "af4c6y3m3xEApNpexfbki5o", "RenderTextureFactory", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GridCell = exports('GridCell', (_dec = ccclass("GridCell"), _dec2 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function () {
        function GridCell(_width, _height, _col, _row) {
          _initializerDefineProperty(this, "width", _descriptor, this);

          _initializerDefineProperty(this, "height", _descriptor2, this);

          _initializerDefineProperty(this, "col", _descriptor3, this);

          _initializerDefineProperty(this, "row", _descriptor4, this);

          _initializerDefineProperty(this, "x", _descriptor5, this);

          _initializerDefineProperty(this, "y", _descriptor6, this);

          _initializerDefineProperty(this, "node", _descriptor7, this);

          _initializerDefineProperty(this, "cellName", _descriptor8, this);

          _initializerDefineProperty(this, "spriteFrame", _descriptor9, this);

          this.width = _width;
          this.height = _height;
          this.col = _col;
          this.row = _row;
          this.x = this.y = 0;
          this.node = null;
          this.spriteFrame = null;
        }

        var _proto = GridCell.prototype;

        _proto.setPosition = function setPosition(x, y) {
          this.x = x;
          this.y = y;
        };

        _proto.getPosition = function getPosition() {
          return new Vec3(this.x, this.y, 0);
        };

        _proto.isEmpty = function isEmpty() {
          return !this.node;
        };

        _proto.reset = function reset() {
          this.width = this.height = this.col = this.row = this.x = this.y = 0;
          this.resetNode();
        };

        _proto.resetNode = function resetNode() {
          this.cellName = '';
          this.node = null;
          this.spriteFrame.reset();
        };

        return GridCell;
      }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "width", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 250;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "height", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 250;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "col", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "row", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "x", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "y", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "node", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "cellName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "spriteFrame", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      var RenderTextureFactory = exports('RenderTextureFactory', (_dec3 = ccclass('RenderTextureFactory'), _dec4 = property({
        type: Camera
      }), _dec5 = property({
        type: RenderTexture
      }), _dec6 = property(Node), _dec3(_class4 = (_class5 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(RenderTextureFactory, _Component);

        function RenderTextureFactory() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "renderCamera", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "renderTex", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "container", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "maxTextureWidth", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "maxTextureHeight", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "cellWidth", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "cellHeight", _descriptor16, _assertThisInitialized(_this));

          _this._poolFactory = null;
          _this._maxCol = void 0;
          _this._maxRow = void 0;
          _this._needToCreateRT = false;
          _this.gridCells = [];
          _this.cellObjects = [];
          return _this;
        }

        var _proto2 = RenderTextureFactory.prototype;

        _proto2.onLoad = function onLoad() {
          this._poolFactory = this.node.scene.getComponentInChildren(PoolFactory);
          this.node.on("CREATE_ANIMATION_CELL", this.createAnimationCell, this);
          this.node.on("PLAY_ANIMATION", this.playAnimation, this);
          this.node.on("STOP_ANIMATION", this.stopAnimation, this);
          this.node.on("REMOVE_ANIMATION_CELL", this.removeAnimationCell, this);
          this.node.getSpriteFrame = this.getSpriteFrame.bind(this);
          this.initRendering();
          this.initGrid();
        };

        _proto2.createAnimationCell = function createAnimationCell(prefabName, animationName) {
          if (!this.getBusyGridCellByName(prefabName + "_" + animationName)) {
            var cellObject = this.createCellObject(prefabName);

            if (cellObject && this.container && this.renderTex) {
              cellObject.active = true;
              cellObject.setParent(this.container);
              var index = this.cellObjects.indexOf(cellObject);
              var gridCell = this.getEmptyGridCellFromIndex(index);

              if (gridCell) {
                gridCell.cellName = prefabName + "_" + animationName;
                gridCell.node = cellObject;
                cellObject.setPosition(gridCell.getPosition());
                gridCell.spriteFrame = new SpriteFrame();
                gridCell.spriteFrame.texture = this.renderTex;
                gridCell.spriteFrame.rect = new Rect(gridCell.x - gridCell.width / 2 + this.getTextureCenterPoint().x, -gridCell.y - gridCell.height / 2 + this.getTextureCenterPoint().y, gridCell.width, gridCell.height);
                cellObject.active = false;
              }
            }
          }
        };

        _proto2.playAnimation = function playAnimation(prefabName, animationName, duration, isLoop) {
          if (isLoop === void 0) {
            isLoop = false;
          }

          var gridCell = this.getBusyGridCellByName(prefabName + "_" + animationName);

          if (gridCell) {
            var node = gridCell.node;

            if (node) {
              if (!node.active) node.active = true;
              node.emit("PLAY_ANIMATION", {
                animationName: animationName,
                duration: duration,
                isLoop: isLoop
              });
            }
          }
        };

        _proto2.stopAnimation = function stopAnimation(prefabName, animationName) {
          var gridCell = this.getBusyGridCellByName(prefabName + "_" + animationName);

          if (gridCell) {
            var node = gridCell.node;

            if (node && node.active) {
              node.emit("STOP_ANIMATION");
            }
          }
        };

        _proto2.removeAnimationCell = function removeAnimationCell(prefabName, animationName) {
          var gridCell = this.getBusyGridCellByName(prefabName + "_" + animationName);

          if (gridCell) {
            var node = gridCell.node;

            if (node && this._poolFactory) {
              node.emit("STOP_ANIMATION");
              var index = this.cellObjects.indexOf(node);

              if (index > -1) {
                this.cellObjects.splice(index, 1);
              }

              this._poolFactory.removeObject(node);
            }

            gridCell.resetNode();
          }
        };

        _proto2.getSpriteFrame = function getSpriteFrame(prefabName, animationName) {
          var gridCell = this.getBusyGridCellByName(prefabName + "_" + animationName);

          if (gridCell) {
            return gridCell.spriteFrame;
          }

          return null;
        };

        _proto2.initGrid = function initGrid() {
          this._maxCol = Math.floor(this.maxTextureWidth / this.cellWidth);
          this._maxRow = Math.floor(this.maxTextureHeight / this.cellHeight);

          for (var col = 0; col < this._maxCol; col++) {
            this.gridCells[col] = [];

            for (var row = 0; row < this._maxRow; row++) {
              var cell = new GridCell(this.cellWidth, this.cellHeight, col, row);
              var x = this.getPositionX(col);
              var y = this.getPositionY(row);
              cell.setPosition(x, y);
              this.gridCells[col][row] = cell;
            }
          }
        };

        _proto2.initRendering = function initRendering() {
          if (this.container) {
            var _scaleY = sys.isNative && (sys.platform == sys.Platform.IOS || sys.platform == sys.Platform.MACOS) ? 1 : -1;

            this.container.setScale(1, _scaleY, 1);
          }

          if (!this.renderTex) {
            this._needToCreateRT = true;
            this.renderTex = new RenderTexture();
            this.renderTex.reset({
              name: "SampleRT",
              width: this.maxTextureWidth,
              height: this.maxTextureHeight
            });
          }

          if (this.renderTex && this.renderCamera) {
            this.renderCamera.targetTexture = this.renderTex;
          }
        };

        _proto2.createCellObject = function createCellObject(prefabName) {
          if (this._poolFactory) {
            var _obj = this._poolFactory.getObject(prefabName);

            if (_obj) {
              this.cellObjects.push(_obj);
              return _obj;
            }
          }

          return null;
        };

        _proto2.getPositionX = function getPositionX(col) {
          var startX = -(this._maxCol / 2 - 0.5) * this.cellWidth;
          return startX + this.cellWidth * col;
        };

        _proto2.getPositionY = function getPositionY(row) {
          return (this._maxRow / 2 - row - 0.5) * this.cellHeight;
        };

        _proto2.getEmptyGridCellFromIndex = function getEmptyGridCellFromIndex(index) {
          if (index >= 0 && index < this._maxCol * this._maxRow) {
            var col = index % this._maxCol;
            var row = Math.floor(index / this._maxCol);

            if (this.gridCells[col] && this.gridCells[col].length > 0) {
              var cell = this.gridCells[col][row];

              if (cell) {
                if (cell.isEmpty()) {
                  return cell;
                } else {
                  return this.getEmptyGridCellFromIndex(++index);
                }
              } else {
                return null;
              }
            }
          } else {
            return null;
          }
        };

        _proto2.getBusyGridCellByName = function getBusyGridCellByName(cellName) {
          for (var col = 0; col < this._maxCol; col++) {
            if (this.gridCells[col] && this.gridCells[col].length > 0) {
              for (var row = 0; row < this._maxRow; row++) {
                var cell = this.gridCells[col][row];

                if (cell && cell.cellName === cellName && !cell.isEmpty()) {
                  return cell;
                }
              }
            }
          }

          return null;
        };

        _proto2.getTextureCenterPoint = function getTextureCenterPoint() {
          return new Vec2(this.renderTex.width / 2, this.renderTex.height / 2);
        };

        _proto2.onDestroy = function onDestroy() {
          if (this._needToCreateRT) {
            this.renderTex.destroy();
            this.renderTex = null;
          }
        };

        return RenderTextureFactory;
      }(Component), (_descriptor10 = _applyDecoratedDescriptor(_class5.prototype, "renderCamera", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class5.prototype, "renderTex", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class5.prototype, "container", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class5.prototype, "maxTextureWidth", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1280;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class5.prototype, "maxTextureHeight", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 720;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class5.prototype, "cellWidth", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 250;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class5.prototype, "cellHeight", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 250;
        }
      })), _class5)) || _class4));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RotateIcon.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, tween, Component, setOpacity;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      tween = module.tween;
      Component = module.Component;
    }, function (module) {
      setOpacity = module.setOpacity;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "35b3aU1vVhLG6FoV0dMzMQW", "RotateIcon", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var RotateIcon = exports('RotateIcon', (_dec = ccclass('RotateIcon'), _dec2 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(RotateIcon, _Component);

        function RotateIcon() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "targetNode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "direction", _descriptor2, _assertThisInitialized(_this));

          _this._onHover = null;
          _this._onMouseOut = null;
          _this.tweenRotate = null;
          return _this;
        }

        var _proto = RotateIcon.prototype;

        _proto.onLoad = function onLoad() {
          this._onHover = this.onHover.bind(this);
          this._onMouseOut = this.onMouseOut.bind(this);

          if (this.targetNode) {
            this.targetNode.on(Node.EventType.MOUSE_ENTER, this._onHover);
            this.targetNode.on(Node.EventType.MOUSE_LEAVE, this._onMouseOut);
            this.targetNode.on("BUTTON_SPIN_SHOW", this.showIcon, this);
            this.targetNode.on("BUTTON_SPIN_HIDE", this.hideIcon, this);
          }
        };

        _proto.start = function start() {
          this.rotateIcon();
        };

        _proto.showIcon = function showIcon() {
          setOpacity(this.node, 255);
        };

        _proto.hideIcon = function hideIcon() {
          setOpacity(this.node, 0);
        };

        _proto.onHover = function onHover() {
          this.rotateIcon(1);
        };

        _proto.onMouseOut = function onMouseOut() {
          this.rotateIcon();
        };

        _proto.rotateIcon = function rotateIcon(speed) {
          if (speed === void 0) {
            speed = 2;
          }

          this.tweenRotate && this.tweenRotate.stop();
          this.tweenRotate = tween(this.node);
          this.tweenRotate.by(speed, {
            angle: -360 * this.direction
          }).repeatForever().start();
        };

        _proto.onEnable = function onEnable() {
          this.rotateIcon();
        };

        _proto.onDestroy = function onDestroy() {
          this.tweenRotate && this.tweenRotate.stop();
        };

        return RotateIcon;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "targetNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "direction", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ScreenOrientationControl.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CanvasScaleByOrientation.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, game, sys, settings, Settings, view, ResolutionPolicy, Component, Size, CanvasScaleByOrientation;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      game = module.game;
      sys = module.sys;
      settings = module.settings;
      Settings = module.Settings;
      view = module.view;
      ResolutionPolicy = module.ResolutionPolicy;
      Component = module.Component;
      Size = module.Size;
    }, function (module) {
      CanvasScaleByOrientation = module.CanvasScaleByOrientation;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "83e61WQNGlGjYAM2fCdDGW1", "ScreenOrientationControl", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ScreenOrientationControl = exports('ScreenOrientationControl', (_dec = ccclass('ScreenOrientationControl'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ScreenOrientationControl, _Component);

        function ScreenOrientationControl() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "portraitDesignResolution", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "landscapeDesignResolution", _descriptor2, _assertThisInitialized(_this));

          _this._canvasScaleComp = void 0;
          return _this;
        }

        var _proto = ScreenOrientationControl.prototype;

        _proto.start = function start() {
          this._canvasScaleComp = this.getComponent(CanvasScaleByOrientation);

          if (this._canvasScaleComp && game.config && sys.isMobile) {
            var _settings$querySettin;

            var orientation = (_settings$querySettin = settings.querySettings(Settings.Category.SCREEN, 'orientation')) != null ? _settings$querySettin : 'auto';

            if (orientation == "portrait") {
              this._canvasScaleComp.isPortrait = true;
              this.setPortraitDS();
            } else {
              this._canvasScaleComp.isPortrait = false;
              this.setLandscapeDS();
            }

            this._canvasScaleComp.scaleCanvasByOrientation();
          }
        };

        _proto.setPortraitDS = function setPortraitDS() {
          view.setDesignResolutionSize(this.portraitDesignResolution.width, this.portraitDesignResolution.height, ResolutionPolicy.FIXED_WIDTH);
        };

        _proto.setLandscapeDS = function setLandscapeDS() {
          view.setDesignResolutionSize(this.landscapeDesignResolution.width, this.landscapeDesignResolution.height, ResolutionPolicy.FIXED_HEIGHT);
        };

        return ScreenOrientationControl;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "portraitDesignResolution", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Size(720, 1280);
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "landscapeDesignResolution", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Size(1560, 720);
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ScrollViewOptimise.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, UITransform, rect, Component, setOpacity;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      UITransform = module.UITransform;
      rect = module.rect;
      Component = module.Component;
    }, function (module) {
      setOpacity = module.setOpacity;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "6547cfR5o5FmrQN3VeIh2x3", "ScrollViewOptimise", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ScrollViewOptimise = exports('ScrollViewOptimise', (_dec = ccclass('ScrollViewOptimise'), _dec2 = property(Node), _dec3 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ScrollViewOptimise, _Component);

        function ScrollViewOptimise() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "view", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "content", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = ScrollViewOptimise.prototype;

        _proto.update = function update(dt) {
          var viewUI = this.view.getComponent(UITransform);
          var contentPos = this.content.getPosition();
          var viewRect = rect(-contentPos.x - viewUI.width * viewUI.anchorX, -contentPos.y - viewUI.height * viewUI.anchorY, viewUI.width, viewUI.height);

          for (var i = 0; i < this.content.children.length; i++) {
            var node = this.content.children[i];

            if (viewRect.intersects(node.getComponent(UITransform).getBoundingBox())) {
              setOpacity(node, 255);
            } else {
              setOpacity(node, 0);
            }
          }
        };

        return ScrollViewOptimise;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "view", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "content", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/serviceRest.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e18ccAUCBxLoaFRV2OtkUct", "serviceRest", undefined); // Rest API to connect to server


      var ServiceRest = /*#__PURE__*/function () {
        function ServiceRest() {
          this.request = void 0;
          this.request = new XMLHttpRequest();
        }

        var _proto = ServiceRest.prototype;

        _proto.encodeQueryData = function encodeQueryData(data) {
          return Object.keys(data).map(function (key) {
            return [key, data[key]].map(encodeURIComponent).join("=");
          }).join("&");
        };

        _proto.getRawDataWeb = function getRawDataWeb(_ref) {
          var _ref$fullURL = _ref.fullURL,
              fullURL = _ref$fullURL === void 0 ? '' : _ref$fullURL,
              _ref$callback = _ref.callback,
              callback = _ref$callback === void 0 ? function (data) {} : _ref$callback,
              _ref$callbackErr = _ref.callbackErr,
              callbackErr = _ref$callbackErr === void 0 ? function (e) {} : _ref$callbackErr;
          var request = new XMLHttpRequest();
          request.open("GET", fullURL, true);
          request.timeout = 15000;

          request.onreadystatechange = function () {
            if (request.readyState == 4) {
              //get status text
              if (callback) {
                if (request.responseText) {
                  callback(JSON.parse(request.responseText));
                } else {
                  callbackErr(null);
                }
              }
            } else if (request.readyState === 0) {
              callbackErr(null);
            }

            if (request.status !== 200) {
              callbackErr(null);
            }
          };

          request.ontimeout = function (e) {
            callbackErr(e);
          };

          request.onerror = function (e) {
            callbackErr(e);
          };

          request.send();
        };

        _proto.get = function get(_ref2) {
          var _ref2$url = _ref2.url,
              url = _ref2$url === void 0 ? '' : _ref2$url,
              _ref2$params = _ref2.params,
              params = _ref2$params === void 0 ? {} : _ref2$params,
              _ref2$callback = _ref2.callback,
              callback = _ref2$callback === void 0 ? function (data) {} : _ref2$callback,
              _ref2$apiUrl = _ref2.apiUrl,
              apiUrl = _ref2$apiUrl === void 0 ? '' : _ref2$apiUrl,
              _ref2$callbackErr = _ref2.callbackErr,
              callbackErr = _ref2$callbackErr === void 0 ? function () {} : _ref2$callbackErr;
          var querystring = '?' + this.encodeQueryData(params);
          var fullURL = apiUrl + url + querystring;
          var request = new XMLHttpRequest();
          request.open("GET", fullURL, true);
          request.timeout = 15000;
          request.setRequestHeader("Content-Type", "application/json;charset=UTF-8");

          request.onreadystatechange = function () {
            if (request.readyState == 4) {
              //get status text
              if (callback) {
                if (request.responseText) {
                  callback(JSON.parse(request.responseText));
                } else {
                  callbackErr();
                }
              }
            } else if (request.readyState === 0) {
              callbackErr();
            }

            if (request.status !== 200) {
              callbackErr();
            }
          };

          request.ontimeout = function (e) {
            callbackErr();
          };

          request.onerror = function (e) {
            callbackErr();
          };

          request.send();
        };

        _proto.getWithHeader = function getWithHeader(_ref3) {
          var _ref3$url = _ref3.url,
              url = _ref3$url === void 0 ? '' : _ref3$url,
              _ref3$params = _ref3.params,
              params = _ref3$params === void 0 ? {} : _ref3$params,
              _ref3$headers = _ref3.headers,
              headers = _ref3$headers === void 0 ? {} : _ref3$headers,
              _ref3$callback = _ref3.callback,
              callback = _ref3$callback === void 0 ? function (data) {} : _ref3$callback,
              _ref3$apiUrl = _ref3.apiUrl,
              apiUrl = _ref3$apiUrl === void 0 ? '' : _ref3$apiUrl,
              _ref3$callbackErr = _ref3.callbackErr,
              callbackErr = _ref3$callbackErr === void 0 ? function () {} : _ref3$callbackErr;
          var querystring = '?' + this.encodeQueryData(params);
          var fullURL = apiUrl + url + querystring;
          var request = new XMLHttpRequest();
          request.open("GET", fullURL, true);
          request.timeout = 15000;
          request.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
          Object.keys(headers).forEach(function (key) {
            request.setRequestHeader(key, headers[key]);
          });

          request.onreadystatechange = function () {
            if (request.readyState == 4) {
              //get status text
              if (callback) {
                if (request.responseText) {
                  callback(JSON.parse(request.responseText));
                } else {
                  callbackErr();
                }
              }
            } else if (request.readyState === 0) {
              callbackErr();
            }

            if (request.status !== 200) {
              callbackErr();
            }
          };

          request.ontimeout = function () {
            callbackErr();
          };

          request.onerror = function () {
            callbackErr();
          };

          request.send();
        };

        _proto.post = function post(_ref4) {
          var _ref4$url = _ref4.url,
              url = _ref4$url === void 0 ? '' : _ref4$url,
              _ref4$data = _ref4.data,
              data = _ref4$data === void 0 ? {} : _ref4$data,
              _ref4$callback = _ref4.callback,
              callback = _ref4$callback === void 0 ? function (data) {} : _ref4$callback,
              _ref4$apiUrl = _ref4.apiUrl,
              apiUrl = _ref4$apiUrl === void 0 ? '' : _ref4$apiUrl,
              _ref4$callbackErr = _ref4.callbackErr,
              callbackErr = _ref4$callbackErr === void 0 ? function () {} : _ref4$callbackErr;
          var dataPost = this.encodeQueryData(data);
          var fullURL = apiUrl + url;
          var request = new XMLHttpRequest();
          request.open('POST', fullURL, true);
          request.timeout = 15000;
          request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');

          request.onreadystatechange = function () {
            if (request.readyState == 4) {
              if (request.responseText) {
                callback({
                  status: request.status,
                  data: JSON.parse(request.responseText)
                });
              } else {
                callbackErr();
              }
            } else if (request.readyState === 0) {
              callbackErr();
            }

            if (request.status !== 200) {
              callbackErr();
            }
          };

          request.ontimeout = function (e) {
            callbackErr();
          };

          request.onerror = function (e) {
            callbackErr();
          };

          request.send(dataPost);
        };

        _proto.postWithHeader = function postWithHeader(_ref5) {
          var _ref5$url = _ref5.url,
              url = _ref5$url === void 0 ? '' : _ref5$url,
              _ref5$params = _ref5.params,
              params = _ref5$params === void 0 ? {} : _ref5$params,
              _ref5$headers = _ref5.headers,
              headers = _ref5$headers === void 0 ? {} : _ref5$headers,
              _ref5$data = _ref5.data,
              data = _ref5$data === void 0 ? {} : _ref5$data,
              _ref5$callback = _ref5.callback,
              callback = _ref5$callback === void 0 ? function (data) {} : _ref5$callback,
              _ref5$apiUrl = _ref5.apiUrl,
              apiUrl = _ref5$apiUrl === void 0 ? '' : _ref5$apiUrl,
              _ref5$callbackErr = _ref5.callbackErr,
              callbackErr = _ref5$callbackErr === void 0 ? function () {} : _ref5$callbackErr;
          var dataPost = JSON.stringify(data);
          var querystring = '?' + this.encodeQueryData(params);
          var fullURL = apiUrl + url + querystring;
          var request = new XMLHttpRequest();
          request.open('POST', fullURL, true);
          request.timeout = 15000;
          request.setRequestHeader('Content-type', 'application/json');
          Object.keys(headers).forEach(function (key) {
            request.setRequestHeader(key, headers[key]);
          });

          request.onreadystatechange = function () {
            if (request.readyState == 4) {
              if (request.responseText) {
                callback({
                  status: request.status,
                  data: JSON.parse(request.responseText)
                });
              } else {
                callbackErr();
              }
            } else if (request.readyState === 0) {
              callbackErr();
            }

            if (request.status !== 200) {
              callbackErr();
            }
          };

          request.ontimeout = function (e) {
            callbackErr();
          };

          request.onerror = function (e) {
            callbackErr();
          };

          request.send(dataPost);
        };

        _proto.postRaw = function postRaw(_ref6) {
          var _ref6$url = _ref6.url,
              url = _ref6$url === void 0 ? '' : _ref6$url,
              _ref6$data = _ref6.data,
              data = _ref6$data === void 0 ? {} : _ref6$data,
              _ref6$callback = _ref6.callback,
              callback = _ref6$callback === void 0 ? function (data) {} : _ref6$callback,
              _ref6$apiUrl = _ref6.apiUrl,
              apiUrl = _ref6$apiUrl === void 0 ? '' : _ref6$apiUrl,
              _ref6$callbackErr = _ref6.callbackErr,
              callbackErr = _ref6$callbackErr === void 0 ? function () {} : _ref6$callbackErr;
          var dataPost = data;
          var fullURL = apiUrl + url;
          var request = new XMLHttpRequest();
          request.open('POST', fullURL, true);
          request.timeout = 15000;
          request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');

          request.onreadystatechange = function () {
            if (request.status == 200) {
              callback({
                status: request.status,
                data: request.responseText
              });
            } else {
              callbackErr();
            }
          };

          request.ontimeout = function (e) {
            callbackErr();
          };

          request.onerror = function (e) {
            callbackErr();
          };

          request.send(dataPost);
        };

        _proto.put = function put(_ref7) {
          var _ref7$url = _ref7.url,
              url = _ref7$url === void 0 ? '' : _ref7$url,
              _ref7$data = _ref7.data,
              data = _ref7$data === void 0 ? {} : _ref7$data,
              _ref7$callback = _ref7.callback,
              callback = _ref7$callback === void 0 ? function (data) {} : _ref7$callback,
              _ref7$apiUrl = _ref7.apiUrl,
              apiUrl = _ref7$apiUrl === void 0 ? '' : _ref7$apiUrl,
              _ref7$callbackErr = _ref7.callbackErr,
              callbackErr = _ref7$callbackErr === void 0 ? function () {} : _ref7$callbackErr;
          var dataPost = this.encodeQueryData(data);
          var fullURL = apiUrl + url;
          var request = new XMLHttpRequest();
          request.open('PUT', fullURL, true);
          request.timeout = 15000;
          request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');

          request.onreadystatechange = function () {
            if (request.readyState == 4) {
              if (request.responseText) {
                callback({
                  status: request.status,
                  data: JSON.parse(request.responseText)
                });
              } else {
                callbackErr();
              }
            } else if (request.readyState === 0) {
              callbackErr();
            }

            if (request.status !== 200) {
              callbackErr();
            }
          };

          request.ontimeout = function (e) {
            callbackErr();
          };

          request.onerror = function (e) {
            callbackErr();
          };

          request.send(dataPost);
        };

        return ServiceRest;
      }();

      var apiObject = exports('default', new ServiceRest());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Session.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "03babGJoVlDk5xXfHfq7eZf", "Session", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Session = exports('Session', (_dec = ccclass('Session'), _dec2 = property({
        type: Label
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Session, _Component);

        function Session() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "id", _descriptor, _assertThisInitialized(_this));

          _this.sessionId = void 0;
          _this.gameId = void 0;
          return _this;
        }

        var _proto = Session.prototype;

        _proto.setData = function setData(id, gameId) {
          this.sessionId = id;
          this.gameId = gameId;
          this.id.string = gameId + "_" + id;
        };

        _proto.getId = function getId(id) {
          return this.sessionId;
        };

        return Session;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "id", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SessionInfo.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Component, toLocalTimeHHMM, secondsToHHMMSS;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      toLocalTimeHHMM = module.toLocalTimeHHMM;
      secondsToHHMMSS = module.secondsToHHMMSS;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10;

      cclegacy._RF.push({}, "b0bd89OmaFCFInyalLofapJ", "SessionInfo", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SessionInfo = exports('SessionInfo', (_dec = ccclass('SessionInfo'), _dec2 = property({
        type: Label
      }), _dec3 = property({
        type: Label
      }), _dec4 = property({
        type: Label
      }), _dec5 = property({
        type: Label
      }), _dec6 = property({
        type: Label
      }), _dec7 = property({
        type: Label
      }), _dec8 = property({
        type: Label
      }), _dec9 = property({
        type: Label
      }), _dec10 = property({
        type: Label
      }), _dec11 = property({
        type: Label
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SessionInfo, _Component);

        function SessionInfo() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "gameId", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "startTime", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "endTime", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "totalTime", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "fpsIssue", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "minFps", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "chartTime", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "eventTime", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "userId", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "targetFps", _descriptor10, _assertThisInitialized(_this));

          _this.startTimeString = void 0;
          _this.endTimeString = void 0;
          _this.gameIdString = void 0;
          _this.totalTimeString = void 0;
          _this.fpsIssueString = void 0;
          _this.minFpsString = void 0;
          _this.eventTimeString = void 0;
          _this.chartTimeString = void 0;
          _this.targetFpsString = void 0;
          _this.userIdString = void 0;
          return _this;
        }

        var _proto = SessionInfo.prototype;

        _proto._initTitles = function _initTitles() {
          !this.gameIdString && (this.gameIdString = this.gameId.string);
          !this.startTimeString && (this.startTimeString = this.startTime.string);
          !this.endTimeString && (this.endTimeString = this.endTime.string);
          !this.totalTimeString && (this.totalTimeString = this.totalTime.string);
          !this.fpsIssueString && (this.fpsIssueString = this.fpsIssue.string);
          !this.minFpsString && (this.minFpsString = this.minFps.string);
          !this.chartTimeString && (this.chartTimeString = this.chartTime.string);
          !this.eventTimeString && (this.eventTimeString = this.eventTime.string);
          !this.userIdString && (this.userIdString = this.userId.string);
          !this.targetFpsString && (this.targetFpsString = this.targetFps.string);
        };

        _proto.display = function display(data) {
          this._initTitles();

          this.gameId.string = this.gameIdString + " " + data.gameId;
          this.startTime.string = this.startTimeString + " " + toLocalTimeHHMM(parseInt(data.startTime));
          this.endTime.string = this.endTimeString + " " + toLocalTimeHHMM(parseInt(data.finishTime));
          this.totalTime.string = this.totalTimeString + " " + secondsToHHMMSS(parseInt(data.totalTime) / 1000);
          this.fpsIssue.string = this.fpsIssueString + " " + data.events.length;
          this.minFps.string = this.minFpsString + " " + parseInt(data.minFps);
          this.chartTime.string = this.chartTimeString + " " + parseInt(data.chartTime);
          this.eventTime.string = this.eventTimeString + " " + parseInt(data.eventTime);
          this.userId.string = this.userIdString + " " + data.userId;
          this.targetFps.string = this.targetFpsString + " " + data.targetFps;
        };

        _proto.clear = function clear() {
          this._initTitles();

          this.gameId.string = "" + this.gameIdString;
          this.startTime.string = "" + this.startTimeString;
          this.endTime.string = "" + this.endTimeString;
          this.totalTime.string = "" + this.totalTimeString;
          this.fpsIssue.string = "" + this.fpsIssueString;
          this.minFps.string = "" + this.minFpsString;
          this.chartTime.string = "" + this.chartTimeString;
          this.eventTime.string = "" + this.eventTimeString;
          this.userId.string = "" + this.userIdString;
          this.targetFps.string = "" + this.targetFpsString;
        };

        return SessionInfo;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "gameId", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "startTime", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "endTime", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "totalTime", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "fpsIssue", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "minFps", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "chartTime", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "eventTime", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "userId", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "targetFps", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Setting.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CustomType.ts', './loadConfigAsync.ts', './SlotUIScene.ts', './ToggleMotion.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Toggle, UITransform, size, Label, CustomEvent, loadConfigAsync, SlotUIScene, ToggleMotion;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Toggle = module.Toggle;
      UITransform = module.UITransform;
      size = module.size;
      Label = module.Label;
    }, function (module) {
      CustomEvent = module.CustomEvent;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      SlotUIScene = module.SlotUIScene;
    }, function (module) {
      ToggleMotion = module.ToggleMotion;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "f751eo/iN5HpYdMIclyjrpe", "Setting", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Setting = exports('Setting', (_dec = ccclass('Setting'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_SlotUIScene) {
        _inheritsLoose(Setting, _SlotUIScene);

        function Setting() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SlotUIScene.call.apply(_SlotUIScene, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "BGMCheckBox", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "SFXCheckBox", _descriptor2, _assertThisInitialized(_this));

          _this.initialized = false;
          _this.toggleNode = null;
          return _this;
        }

        var _proto = Setting.prototype;

        _proto.onLoad = function onLoad() {
          _SlotUIScene.prototype.onLoad.call(this);

          this.node.on("TOGGLE_SFX", this.sfxToggle, this);
          this.node.on("TOGGLE_BGM", this.bgmToggle, this);
          this.initialized = false;
          this.addCheat();
        };

        _proto.start = function start() {
          this.init();
        };

        _proto.init = function init() {
          this.BGMCheckBox.getComponent(Toggle).isChecked = false;
          this.SFXCheckBox.getComponent(Toggle).isChecked = false;

          if (this.soundPlayer && this.soundPlayer.isEnableBGM) {
            this.BGMCheckBox.getComponent(Toggle).isChecked = true;
          }

          if (this.soundPlayer && this.soundPlayer.isEnableSFX) {
            this.SFXCheckBox.getComponent(Toggle).isChecked = true;
          }

          this.initialized = true;
        };

        _proto.syncSetting = function syncSetting() {
          if (this.soundPlayer) {
            var toggleMusic = this.BGMCheckBox.getComponent(Toggle);
            var toggleSfx = this.SFXCheckBox.getComponent(Toggle);
            var toggleMotionMusic = this.BGMCheckBox.getComponent(ToggleMotion);
            var toggleMotionSfx = this.SFXCheckBox.getComponent(ToggleMotion);

            if (toggleMusic) {
              toggleMusic.isChecked = this.soundPlayer.isEnableBGM;
            }

            if (toggleSfx) {
              toggleSfx.isChecked = this.soundPlayer.isEnableSFX;
            }

            if (toggleMotionMusic) {
              toggleMotionMusic.setChecked(this.soundPlayer.isEnableBGM);
            }

            if (toggleMotionSfx) {
              toggleMotionSfx.setChecked(this.soundPlayer.isEnableSFX);
            }
          }
        };

        _proto.sfxToggle = function sfxToggle() {
          if (this.soundPlayer && this.initialized) {
            this.soundPlayer.setEffectEnable(this.SFXCheckBox.getComponent(Toggle).isChecked);
            this.soundPlayer.playSFXClick();
          }
        };

        _proto.bgmToggle = function bgmToggle() {
          if (this.soundPlayer && this.initialized) {
            this.soundPlayer.playSFXClick();
            this.soundPlayer.setBgmEnable(this.BGMCheckBox.getComponent(Toggle).isChecked);
          }
        };

        _proto.playSoundClick = function playSoundClick() {
          this.soundPlayer && this.soundPlayer.playSFXClick();
        };

        _proto.onJackpotHistory = function onJackpotHistory() {
          this.guiMgr.showJackpotHistory();
        };

        _proto.onBetHistory = function onBetHistory() {
          this.guiMgr.showBetHistory();
        };

        _proto.addCheat = function addCheat() {
          var _this2 = this;

          var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
              IS_PRODUCTION = _loadConfigAsync$getC.IS_PRODUCTION;

          if (!IS_PRODUCTION && CC_DEBUG) {
            this.toggleNode = new Node();
            this.toggleNode.addComponent(Toggle);
            this.toggleNode.setParent(this.node);
            this.toggleNode.getComponent(UITransform).setContentSize(size(80, 80));
            this.toggleNode.setPosition(540, 0, 0);
            var labelNode = new Node();
            labelNode.addComponent(Label);
            labelNode.getComponent(Label).fontSize = 18;
            labelNode.setParent(this.toggleNode);
            labelNode.getComponent(Label).string = "";
            var toggleCom = this.toggleNode.getComponent(Toggle);
            toggleCom.isChecked = false;
            this.toggleNode.on('toggle', function () {
              var text = toggleCom.isChecked ? "SLOW NETWORK" : "";
              labelNode.getComponent(Label).string = text;
              var event = new CustomEvent("FORCE_NETWORK_GLT", true);
              event['userData'] = {
                isForced: toggleCom.isChecked
              };

              _this2.node.dispatchEvent(event);
            }, this);
          }
        };

        return Setting;
      }(SlotUIScene), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "BGMCheckBox", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "SFXCheckBox", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/sha1.ts", ['cc', './crypto-core.ts'], function () {
  'use strict';

  var cclegacy, CryptoJS;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      CryptoJS = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "089a7e1551NLYG+wDwiHvdt", "sha1", undefined);

      var C = CryptoJS;
      var C_lib = C.lib;
      var WordArray = C_lib.WordArray;
      var Hasher = C_lib.Hasher;
      var C_algo = C.algo; // Reusable object

      var W = [];
      /**
       * SHA-1 hash algorithm.
       */

      var SHA1 = C_algo.SHA1 = Hasher.extend({
        _doReset: function _doReset() {
          this._hash = new WordArray.init([0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0]);
        },
        _doProcessBlock: function _doProcessBlock(M, offset) {
          // Shortcut
          var H = this._hash.words; // Working variables

          var a = H[0];
          var b = H[1];
          var c = H[2];
          var d = H[3];
          var e = H[4]; // Computation

          for (var i = 0; i < 80; i++) {
            if (i < 16) {
              W[i] = M[offset + i] | 0;
            } else {
              var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
              W[i] = n << 1 | n >>> 31;
            }

            var t = (a << 5 | a >>> 27) + e + W[i];

            if (i < 20) {
              t += (b & c | ~b & d) + 0x5a827999;
            } else if (i < 40) {
              t += (b ^ c ^ d) + 0x6ed9eba1;
            } else if (i < 60) {
              t += (b & c | b & d | c & d) - 0x70e44324;
            } else
              /* if (i < 80) */
              {
                t += (b ^ c ^ d) - 0x359d3e2a;
              }

            e = d;
            d = c;
            c = b << 30 | b >>> 2;
            b = a;
            a = t;
          } // Intermediate hash value


          H[0] = H[0] + a | 0;
          H[1] = H[1] + b | 0;
          H[2] = H[2] + c | 0;
          H[3] = H[3] + d | 0;
          H[4] = H[4] + e | 0;
        },
        _doFinalize: function _doFinalize() {
          // Shortcuts
          var data = this._data;
          var dataWords = data.words;
          var nBitsTotal = this._nDataBytes * 8;
          var nBitsLeft = data.sigBytes * 8; // Add padding

          dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
          dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
          dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
          data.sigBytes = dataWords.length * 4; // Hash final blocks

          this._process(); // Return final computed hash


          return this._hash;
        },
        clone: function clone() {
          var clone = Hasher.clone.call(this);
          clone._hash = this._hash.clone();
          return clone;
        }
      });
      /**
       * Shortcut function to the hasher's object interface.
       *
       * @param {WordArray|string} message The message to hash.
       *
       * @return {WordArray} The hash.
       *
       * @static
       *
       * @example
       *
       *     var hash = CryptoJS.SHA1('message');
       *     var hash = CryptoJS.SHA1(wordArray);
       */

      C.SHA1 = Hasher._createHelper(SHA1);
      /**
       * Shortcut function to the HMAC's object interface.
       *
       * @param {WordArray|string} message The message to hash.
       * @param {WordArray|string} key The secret key.
       *
       * @return {WordArray} The HMAC.
       *
       * @static
       *
       * @example
       *
       *     var hmac = CryptoJS.HmacSHA1(message, key);
       */

      C.HmacSHA1 = Hasher._createHmacHelper(SHA1);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/sha224.ts", ['cc', './crypto-core.ts', './sha256.ts'], function () {
  'use strict';

  var cclegacy, CryptoJS, SHA256;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      CryptoJS = module.default;
    }, function (module) {
      SHA256 = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "493c45OpJJG1IEuQ6YUvsdh", "sha224", undefined);

      var C = CryptoJS;
      var C_lib = C.lib;
      var WordArray = C_lib.WordArray;
      var C_algo = C.algo; // var SHA256: any = C_algo.SHA256;

      /**
       * SHA-224 hash algorithm.
       */

      var SHA224 = C_algo.SHA224 = SHA256.extend({
        _doReset: function _doReset() {
          this._hash = new WordArray.init([0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4]);
        },
        _doFinalize: function _doFinalize() {
          var hash = SHA256._doFinalize.call(this);

          hash.sigBytes -= 4;
          return hash;
        }
      });
      /**
       * Shortcut function to the hasher's object interface.
       *
       * @param {WordArray|string} message The message to hash.
       *
       * @return {WordArray} The hash.
       *
       * @static
       *
       * @example
       *
       *     var hash = CryptoJS.SHA224('message');
       *     var hash = CryptoJS.SHA224(wordArray);
       */

      C.SHA224 = SHA256._createHelper(SHA224);
      /**
       * Shortcut function to the HMAC's object interface.
       *
       * @param {WordArray|string} message The message to hash.
       * @param {WordArray|string} key The secret key.
       *
       * @return {WordArray} The HMAC.
       *
       * @static
       *
       * @example
       *
       *     var hmac = CryptoJS.HmacSHA224(message, key);
       */

      C.HmacSHA224 = SHA256._createHmacHelper(SHA224);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/sha256.ts", ['cc', './crypto-core.ts'], function (exports) {
  'use strict';

  var cclegacy, CryptoJS;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      CryptoJS = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "c26c2TLqLlIYIykCCfyqi7o", "sha256", undefined);

      var C = CryptoJS;
      var C_lib = C.lib;
      var WordArray = C_lib.WordArray;
      var Hasher = C_lib.Hasher;
      var C_algo = C.algo; // Initialization and round constants tables

      var H = [];
      var K = []; // Compute constants

      (function () {
        function isPrime(n) {
          var sqrtN = Math.sqrt(n);

          for (var factor = 2; factor <= sqrtN; factor++) {
            if (!(n % factor)) {
              return false;
            }
          }

          return true;
        }

        function getFractionalBits(n) {
          return (n - (n | 0)) * 0x100000000 | 0;
        }

        var n = 2;
        var nPrime = 0;

        while (nPrime < 64) {
          if (isPrime(n)) {
            if (nPrime < 8) {
              H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));
            }

            K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));
            nPrime++;
          }

          n++;
        }
      })(); // Reusable object


      var W = [];
      /**
       * SHA-256 hash algorithm.
       */

      var SHA256 = exports('default', C_algo.SHA256 = Hasher.extend({
        _doReset: function _doReset() {
          this._hash = new WordArray.init(H.slice(0));
        },
        _doProcessBlock: function _doProcessBlock(M, offset) {
          // Shortcut
          var H = this._hash.words; // Working variables

          var a = H[0];
          var b = H[1];
          var c = H[2];
          var d = H[3];
          var e = H[4];
          var f = H[5];
          var g = H[6];
          var h = H[7]; // Computation

          for (var i = 0; i < 64; i++) {
            if (i < 16) {
              W[i] = M[offset + i] | 0;
            } else {
              var gamma0x = W[i - 15];
              var gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3;
              var gamma1x = W[i - 2];
              var gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;
              W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
            }

            var ch = e & f ^ ~e & g;
            var maj = a & b ^ a & c ^ b & c;
            var sigma0 = (a << 30 | a >>> 2) ^ (a << 19 | a >>> 13) ^ (a << 10 | a >>> 22);
            var sigma1 = (e << 26 | e >>> 6) ^ (e << 21 | e >>> 11) ^ (e << 7 | e >>> 25);
            var t1 = h + sigma1 + ch + K[i] + W[i];
            var t2 = sigma0 + maj;
            h = g;
            g = f;
            f = e;
            e = d + t1 | 0;
            d = c;
            c = b;
            b = a;
            a = t1 + t2 | 0;
          } // Intermediate hash value


          H[0] = H[0] + a | 0;
          H[1] = H[1] + b | 0;
          H[2] = H[2] + c | 0;
          H[3] = H[3] + d | 0;
          H[4] = H[4] + e | 0;
          H[5] = H[5] + f | 0;
          H[6] = H[6] + g | 0;
          H[7] = H[7] + h | 0;
        },
        _doFinalize: function _doFinalize() {
          // Shortcuts
          var data = this._data;
          var dataWords = data.words;
          var nBitsTotal = this._nDataBytes * 8;
          var nBitsLeft = data.sigBytes * 8; // Add padding

          dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
          dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
          dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
          data.sigBytes = dataWords.length * 4; // Hash final blocks

          this._process(); // Return final computed hash


          return this._hash;
        },
        clone: function clone() {
          var clone = Hasher.clone.call(this);
          clone._hash = this._hash.clone();
          return clone;
        }
      }));
      /**
       * Shortcut function to the hasher's object interface.
       *
       * @param {WordArray|string} message The message to hash.
       *
       * @return {WordArray} The hash.
       *
       * @static
       *
       * @example
       *
       *     var hash = CryptoJS.SHA256('message');
       *     var hash = CryptoJS.SHA256(wordArray);
       */

      C.SHA256 = Hasher._createHelper(SHA256);
      /**
       * Shortcut function to the HMAC's object interface.
       *
       * @param {WordArray|string} message The message to hash.
       * @param {WordArray|string} key The secret key.
       *
       * @return {WordArray} The HMAC.
       *
       * @static
       *
       * @example
       *
       *     var hmac = CryptoJS.HmacSHA256(message, key);
       */

      C.HmacSHA256 = Hasher._createHmacHelper(SHA256);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/sha512.ts", ['cc', './crypto-core.ts', './x64-core.ts'], function () {
  'use strict';

  var cclegacy, CryptoJS, C_x64;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      CryptoJS = module.default;
    }, function (module) {
      C_x64 = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "5d1e62122NOj6bU0n0LsOM1", "sha512", undefined);

      var C = CryptoJS;
      var C_lib = C.lib;
      var Hasher = C_lib.Hasher; // var C_x64 = C.x64;

      var X64Word = C_x64.Word;
      var X64WordArray = C_x64.WordArray;
      var C_algo = C.algo;

      function X64Word_create() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return X64Word.create.apply(X64Word, arguments);
      } // Constants


      var K = [X64Word_create(0x428a2f98, 0xd728ae22), X64Word_create(0x71374491, 0x23ef65cd), X64Word_create(0xb5c0fbcf, 0xec4d3b2f), X64Word_create(0xe9b5dba5, 0x8189dbbc), X64Word_create(0x3956c25b, 0xf348b538), X64Word_create(0x59f111f1, 0xb605d019), X64Word_create(0x923f82a4, 0xaf194f9b), X64Word_create(0xab1c5ed5, 0xda6d8118), X64Word_create(0xd807aa98, 0xa3030242), X64Word_create(0x12835b01, 0x45706fbe), X64Word_create(0x243185be, 0x4ee4b28c), X64Word_create(0x550c7dc3, 0xd5ffb4e2), X64Word_create(0x72be5d74, 0xf27b896f), X64Word_create(0x80deb1fe, 0x3b1696b1), X64Word_create(0x9bdc06a7, 0x25c71235), X64Word_create(0xc19bf174, 0xcf692694), X64Word_create(0xe49b69c1, 0x9ef14ad2), X64Word_create(0xefbe4786, 0x384f25e3), X64Word_create(0x0fc19dc6, 0x8b8cd5b5), X64Word_create(0x240ca1cc, 0x77ac9c65), X64Word_create(0x2de92c6f, 0x592b0275), X64Word_create(0x4a7484aa, 0x6ea6e483), X64Word_create(0x5cb0a9dc, 0xbd41fbd4), X64Word_create(0x76f988da, 0x831153b5), X64Word_create(0x983e5152, 0xee66dfab), X64Word_create(0xa831c66d, 0x2db43210), X64Word_create(0xb00327c8, 0x98fb213f), X64Word_create(0xbf597fc7, 0xbeef0ee4), X64Word_create(0xc6e00bf3, 0x3da88fc2), X64Word_create(0xd5a79147, 0x930aa725), X64Word_create(0x06ca6351, 0xe003826f), X64Word_create(0x14292967, 0x0a0e6e70), X64Word_create(0x27b70a85, 0x46d22ffc), X64Word_create(0x2e1b2138, 0x5c26c926), X64Word_create(0x4d2c6dfc, 0x5ac42aed), X64Word_create(0x53380d13, 0x9d95b3df), X64Word_create(0x650a7354, 0x8baf63de), X64Word_create(0x766a0abb, 0x3c77b2a8), X64Word_create(0x81c2c92e, 0x47edaee6), X64Word_create(0x92722c85, 0x1482353b), X64Word_create(0xa2bfe8a1, 0x4cf10364), X64Word_create(0xa81a664b, 0xbc423001), X64Word_create(0xc24b8b70, 0xd0f89791), X64Word_create(0xc76c51a3, 0x0654be30), X64Word_create(0xd192e819, 0xd6ef5218), X64Word_create(0xd6990624, 0x5565a910), X64Word_create(0xf40e3585, 0x5771202a), X64Word_create(0x106aa070, 0x32bbd1b8), X64Word_create(0x19a4c116, 0xb8d2d0c8), X64Word_create(0x1e376c08, 0x5141ab53), X64Word_create(0x2748774c, 0xdf8eeb99), X64Word_create(0x34b0bcb5, 0xe19b48a8), X64Word_create(0x391c0cb3, 0xc5c95a63), X64Word_create(0x4ed8aa4a, 0xe3418acb), X64Word_create(0x5b9cca4f, 0x7763e373), X64Word_create(0x682e6ff3, 0xd6b2b8a3), X64Word_create(0x748f82ee, 0x5defb2fc), X64Word_create(0x78a5636f, 0x43172f60), X64Word_create(0x84c87814, 0xa1f0ab72), X64Word_create(0x8cc70208, 0x1a6439ec), X64Word_create(0x90befffa, 0x23631e28), X64Word_create(0xa4506ceb, 0xde82bde9), X64Word_create(0xbef9a3f7, 0xb2c67915), X64Word_create(0xc67178f2, 0xe372532b), X64Word_create(0xca273ece, 0xea26619c), X64Word_create(0xd186b8c7, 0x21c0c207), X64Word_create(0xeada7dd6, 0xcde0eb1e), X64Word_create(0xf57d4f7f, 0xee6ed178), X64Word_create(0x06f067aa, 0x72176fba), X64Word_create(0x0a637dc5, 0xa2c898a6), X64Word_create(0x113f9804, 0xbef90dae), X64Word_create(0x1b710b35, 0x131c471b), X64Word_create(0x28db77f5, 0x23047d84), X64Word_create(0x32caab7b, 0x40c72493), X64Word_create(0x3c9ebe0a, 0x15c9bebc), X64Word_create(0x431d67c4, 0x9c100d4c), X64Word_create(0x4cc5d4be, 0xcb3e42b6), X64Word_create(0x597f299c, 0xfc657e2a), X64Word_create(0x5fcb6fab, 0x3ad6faec), X64Word_create(0x6c44198c, 0x4a475817)]; // Reusable objects

      var W = [];

      (function () {
        for (var i = 0; i < 80; i++) {
          W[i] = X64Word_create();
        }
      })();
      /**
       * SHA-512 hash algorithm.
       */


      var SHA512 = C_algo.SHA512 = Hasher.extend({
        _doReset: function _doReset() {
          this._hash = new X64WordArray.init([new X64Word.init(0x6a09e667, 0xf3bcc908), new X64Word.init(0xbb67ae85, 0x84caa73b), new X64Word.init(0x3c6ef372, 0xfe94f82b), new X64Word.init(0xa54ff53a, 0x5f1d36f1), new X64Word.init(0x510e527f, 0xade682d1), new X64Word.init(0x9b05688c, 0x2b3e6c1f), new X64Word.init(0x1f83d9ab, 0xfb41bd6b), new X64Word.init(0x5be0cd19, 0x137e2179)]);
        },
        _doProcessBlock: function _doProcessBlock(M, offset) {
          // Shortcuts
          var H = this._hash.words;
          var H0 = H[0];
          var H1 = H[1];
          var H2 = H[2];
          var H3 = H[3];
          var H4 = H[4];
          var H5 = H[5];
          var H6 = H[6];
          var H7 = H[7];
          var H0h = H0.high;
          var H0l = H0.low;
          var H1h = H1.high;
          var H1l = H1.low;
          var H2h = H2.high;
          var H2l = H2.low;
          var H3h = H3.high;
          var H3l = H3.low;
          var H4h = H4.high;
          var H4l = H4.low;
          var H5h = H5.high;
          var H5l = H5.low;
          var H6h = H6.high;
          var H6l = H6.low;
          var H7h = H7.high;
          var H7l = H7.low; // Working variables

          var ah = H0h;
          var al = H0l;
          var bh = H1h;
          var bl = H1l;
          var ch = H2h;
          var cl = H2l;
          var dh = H3h;
          var dl = H3l;
          var eh = H4h;
          var el = H4l;
          var fh = H5h;
          var fl = H5l;
          var gh = H6h;
          var gl = H6l;
          var hh = H7h;
          var hl = H7l; // Rounds

          for (var i = 0; i < 80; i++) {
            var Wil;
            var Wih; // Shortcut

            var Wi = W[i]; // Extend message

            if (i < 16) {
              Wih = Wi.high = M[offset + i * 2] | 0;
              Wil = Wi.low = M[offset + i * 2 + 1] | 0;
            } else {
              // Gamma0
              var gamma0x = W[i - 15];
              var gamma0xh = gamma0x.high;
              var gamma0xl = gamma0x.low;
              var gamma0h = (gamma0xh >>> 1 | gamma0xl << 31) ^ (gamma0xh >>> 8 | gamma0xl << 24) ^ gamma0xh >>> 7;
              var gamma0l = (gamma0xl >>> 1 | gamma0xh << 31) ^ (gamma0xl >>> 8 | gamma0xh << 24) ^ (gamma0xl >>> 7 | gamma0xh << 25); // Gamma1

              var gamma1x = W[i - 2];
              var gamma1xh = gamma1x.high;
              var gamma1xl = gamma1x.low;
              var gamma1h = (gamma1xh >>> 19 | gamma1xl << 13) ^ (gamma1xh << 3 | gamma1xl >>> 29) ^ gamma1xh >>> 6;
              var gamma1l = (gamma1xl >>> 19 | gamma1xh << 13) ^ (gamma1xl << 3 | gamma1xh >>> 29) ^ (gamma1xl >>> 6 | gamma1xh << 26); // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]

              var Wi7 = W[i - 7];
              var Wi7h = Wi7.high;
              var Wi7l = Wi7.low;
              var Wi16 = W[i - 16];
              var Wi16h = Wi16.high;
              var Wi16l = Wi16.low;
              Wil = gamma0l + Wi7l;
              Wih = gamma0h + Wi7h + (Wil >>> 0 < gamma0l >>> 0 ? 1 : 0);
              Wil = Wil + gamma1l;
              Wih = Wih + gamma1h + (Wil >>> 0 < gamma1l >>> 0 ? 1 : 0);
              Wil = Wil + Wi16l;
              Wih = Wih + Wi16h + (Wil >>> 0 < Wi16l >>> 0 ? 1 : 0);
              Wi.high = Wih;
              Wi.low = Wil;
            }

            var chh = eh & fh ^ ~eh & gh;
            var chl = el & fl ^ ~el & gl;
            var majh = ah & bh ^ ah & ch ^ bh & ch;
            var majl = al & bl ^ al & cl ^ bl & cl;
            var sigma0h = (ah >>> 28 | al << 4) ^ (ah << 30 | al >>> 2) ^ (ah << 25 | al >>> 7);
            var sigma0l = (al >>> 28 | ah << 4) ^ (al << 30 | ah >>> 2) ^ (al << 25 | ah >>> 7);
            var sigma1h = (eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9);
            var sigma1l = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9); // t1 = h + sigma1 + ch + K[i] + W[i]

            var Ki = K[i];
            var Kih = Ki.high;
            var Kil = Ki.low;
            var t1l = hl + sigma1l;
            var t1h = hh + sigma1h + (t1l >>> 0 < hl >>> 0 ? 1 : 0);
            t1l = t1l + chl;
            t1h = t1h + chh + (t1l >>> 0 < chl >>> 0 ? 1 : 0);
            t1l = t1l + Kil;
            t1h = t1h + Kih + (t1l >>> 0 < Kil >>> 0 ? 1 : 0);
            t1l = t1l + Wil;
            t1h = t1h + Wih + (t1l >>> 0 < Wil >>> 0 ? 1 : 0); // t2 = sigma0 + maj

            var t2l = sigma0l + majl;
            var t2h = sigma0h + majh + (t2l >>> 0 < sigma0l >>> 0 ? 1 : 0); // Update working variables

            hh = gh;
            hl = gl;
            gh = fh;
            gl = fl;
            fh = eh;
            fl = el;
            el = dl + t1l | 0;
            eh = dh + t1h + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
            dh = ch;
            dl = cl;
            ch = bh;
            cl = bl;
            bh = ah;
            bl = al;
            al = t1l + t2l | 0;
            ah = t1h + t2h + (al >>> 0 < t1l >>> 0 ? 1 : 0) | 0;
          } // Intermediate hash value


          H0l = H0.low = H0l + al;
          H0.high = H0h + ah + (H0l >>> 0 < al >>> 0 ? 1 : 0);
          H1l = H1.low = H1l + bl;
          H1.high = H1h + bh + (H1l >>> 0 < bl >>> 0 ? 1 : 0);
          H2l = H2.low = H2l + cl;
          H2.high = H2h + ch + (H2l >>> 0 < cl >>> 0 ? 1 : 0);
          H3l = H3.low = H3l + dl;
          H3.high = H3h + dh + (H3l >>> 0 < dl >>> 0 ? 1 : 0);
          H4l = H4.low = H4l + el;
          H4.high = H4h + eh + (H4l >>> 0 < el >>> 0 ? 1 : 0);
          H5l = H5.low = H5l + fl;
          H5.high = H5h + fh + (H5l >>> 0 < fl >>> 0 ? 1 : 0);
          H6l = H6.low = H6l + gl;
          H6.high = H6h + gh + (H6l >>> 0 < gl >>> 0 ? 1 : 0);
          H7l = H7.low = H7l + hl;
          H7.high = H7h + hh + (H7l >>> 0 < hl >>> 0 ? 1 : 0);
        },
        _doFinalize: function _doFinalize() {
          // Shortcuts
          var data = this._data;
          var dataWords = data.words;
          var nBitsTotal = this._nDataBytes * 8;
          var nBitsLeft = data.sigBytes * 8; // Add padding

          dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
          dataWords[(nBitsLeft + 128 >>> 10 << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);
          dataWords[(nBitsLeft + 128 >>> 10 << 5) + 31] = nBitsTotal;
          data.sigBytes = dataWords.length * 4; // Hash final blocks

          this._process(); // Convert hash to 32-bit word array before returning


          var hash = this._hash.toX32(); // Return final computed hash


          return hash;
        },
        clone: function clone() {
          var clone = Hasher.clone.call(this);
          clone._hash = this._hash.clone();
          return clone;
        },
        blockSize: 1024 / 32
      });
      /**
       * Shortcut function to the hasher's object interface.
       *
       * @param {WordArray|string} message The message to hash.
       *
       * @return {WordArray} The hash.
       *
       * @static
       *
       * @example
       *
       *     var hash = CryptoJS.SHA512('message');
       *     var hash = CryptoJS.SHA512(wordArray);
       */

      C.SHA512 = Hasher._createHelper(SHA512);
      /**
       * Shortcut function to the HMAC's object interface.
       *
       * @param {WordArray|string} message The message to hash.
       * @param {WordArray|string} key The secret key.
       *
       * @return {WordArray} The HMAC.
       *
       * @static
       *
       * @example
       *
       *     var hmac = CryptoJS.HmacSHA512(message, key);
       */

      C.HmacSHA512 = Hasher._createHmacHelper(SHA512);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SideMenu1989.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfSideMenu.ts', './gfActionHelper.ts', './gfEventEmitter.ts', './EventsCode1989.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Vec3, Tween, tween, GfSideMenu, rotateBy, gfEventEmitter, EventsCode1989;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      Tween = module.Tween;
      tween = module.tween;
    }, function (module) {
      GfSideMenu = module.GfSideMenu;
    }, function (module) {
      rotateBy = module.rotateBy;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      EventsCode1989 = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "18f4bGLuZ5CUZMMZ7rK8wFH", "SideMenu1989", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SideMenu1989 = exports('SideMenu1989', (_dec = ccclass('SideMenu1989'), _dec(_class = /*#__PURE__*/function (_GfSideMenu) {
        _inheritsLoose(SideMenu1989, _GfSideMenu);

        function SideMenu1989() {
          return _GfSideMenu.apply(this, arguments) || this;
        }

        var _proto = SideMenu1989.prototype;

        _proto.hideSideBar = function hideSideBar() {
          var _this = this;

          if (!this.isActionDone) return;
          this.unschedule(this.scheduleHide);
          this.isActionDone = false;
          var pos = new Vec3(-this.frameWidth, 0, 1);
          this.isHide = !this.isHide;
          Tween.stopAllByTarget(this.iconHide);
          tween(this.iconHide).then(rotateBy(0.5, 180, 'quartOut')).start();

          if (this.isHide) {
            pos = new Vec3(5, 0, 1);
          } else {
            this.scheduleOnce(this.scheduleHide, 3);
            gfEventEmitter.instance.emit(EventsCode1989.GAME_LAYER.CLOSE_HUD);
          }

          var baseEasing = this.isHide ? "sineIn" : "sineOut";
          Tween.stopAllByTarget(this.nodeMove);
          tween(this.nodeMove).to(0.5, {
            position: pos
          }, {
            easing: baseEasing
          }).call(function () {
            _this.isActionDone = true;
          }).start();
        };

        return SideMenu1989;
      }(GfSideMenu)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SideMenu1998.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfSideMenu.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Vec3, UIOpacity, Tween, tween, GfSideMenu;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      UIOpacity = module.UIOpacity;
      Tween = module.Tween;
      tween = module.tween;
    }, function (module) {
      GfSideMenu = module.GfSideMenu;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "4a4a2fxWq1MBLrxdi+iDr8y", "SideMenu1998", undefined);

      var ccclass = _decorator.ccclass;
      var SideMenu1998 = exports('SideMenu1998', (_dec = ccclass('SideMenu1998'), _dec(_class = /*#__PURE__*/function (_GfSideMenu) {
        _inheritsLoose(SideMenu1998, _GfSideMenu);

        function SideMenu1998() {
          return _GfSideMenu.apply(this, arguments) || this;
        }

        var _proto = SideMenu1998.prototype;

        _proto.hideSideBar = function hideSideBar() {
          var _this = this;

          if (!this.isActionDone) return;
          this.unschedule(this.scheduleHide);
          this.isActionDone = false;
          var pos = new Vec3(-this.frameWidth, 0, 1);
          this.isHide = !this.isHide;
          this.iconHide.setScale(-this.iconHide.scale.x, this.iconHide.scale.y);

          if (this.isHide) {
            pos = new Vec3(0, 0, 1);
            this.node.getComponent(UIOpacity).opacity = 255;
          } else {
            this.node.getComponent(UIOpacity).opacity = 255;
            this.scheduleOnce(this.scheduleHide, 3);
          }

          var baseEasing = this.isHide ? "sineIn" : "sineOut";
          Tween.stopAllByTarget(this.nodeMove);
          tween(this.nodeMove).to(0.3, {
            position: pos
          }, {
            easing: baseEasing
          }).call(function () {
            _this.isActionDone = true;
          }).start();
        };

        _proto.resetSideMenu = function resetSideMenu() {
          _GfSideMenu.prototype.resetSideMenu.call(this);

          this.iconHide.setScale(new Vec3(1, 1, 1));
          this.node.getComponent(UIOpacity).opacity = 255;
        };

        return SideMenu1998;
      }(GfSideMenu)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotBaseCellHistory.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './GameObject.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Label, formatUserName, formatMoney, GameObject;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
    }, function (module) {
      formatUserName = module.formatUserName;
      formatMoney = module.formatMoney;
    }, function (module) {
      GameObject = module.GameObject;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "bf277BKxGRIurmcCjhQ7qxh", "SlotBaseCellHistory", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotBaseCellHistory = exports('SlotBaseCellHistory', (_dec = ccclass('SlotBaseCellHistory'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(SlotBaseCellHistory, _GameObject);

        function SlotBaseCellHistory() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "time", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "account", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bet", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "winAmount", _descriptor4, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SlotBaseCellHistory.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          this.node["updateData"] = this.updateData.bind(this);
        };

        _proto.updateData = function updateData(data) {
          if (!data) return;
          this.time.getComponent(Label).string = this.formatTimeStamp(data.time);
          this.account.getComponent(Label).string = formatUserName(data.dn);
          this.bet.getComponent(Label).string = formatMoney(data.betAmt);
          this.winAmount.getComponent(Label).string = formatMoney(data.jpAmt);
        };

        _proto.formatTimeStamp = function formatTimeStamp(ts, hasYear) {
          var d = new Date(ts);
          var h = addZero(d.getHours());
          var m = addZero(d.getMinutes());
          var s = addZero(d.getSeconds());
          var t = addZero(d.getDate()) + '/' + addZero(d.getMonth() + 1) + (hasYear ? '/' + d.getFullYear() : '') + ' ' + h + ':' + m + ':' + s;
          return t;
        };

        _proto.formatTimeStampNew = function formatTimeStampNew(data) {
          var date = new Date(data);
          var year = date.getFullYear() + 1900;
          var month = "0" + date.getMonth() + 1;
          var day = "0" + date.getUTCDate();
          var hours = date.getHours();
          var minutes = "0" + date.getMinutes();
          var seconds = "0" + date.getSeconds();
          var formattedTime = day.substr(-2) + "/" + month.substr(-2) + "/" + year + " " + hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);
          return formattedTime;
        };

        return SlotBaseCellHistory;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "time", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "account", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "bet", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "winAmount", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      function addZero(i) {
        if (i < 10) {
          i = '0' + i;
        }

        return i;
      }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotBaseHistory.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './serviceRest.ts', './loadConfigAsync.ts', './GameObject.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Button, Label, warn, apiObject, loadConfigAsync, GameObject;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Button = module.Button;
      Label = module.Label;
      warn = module.warn;
    }, function (module) {
      apiObject = module.default;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      GameObject = module.GameObject;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12;

      cclegacy._RF.push({}, "04cbf1irFBFsYc3cG7vgOMH", "SlotBaseHistory", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotBaseHistory = exports('SlotBaseHistory', (_dec = ccclass('SlotBaseHistory'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: Node
      }), _dec6 = property({
        type: Node
      }), _dec7 = property({
        type: Button
      }), _dec8 = property({
        type: Node
      }), _dec9 = property({
        type: Node
      }), _dec10 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(SlotBaseHistory, _GameObject);

        function SlotBaseHistory() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;
          _this.currentPage = 0;
          _this.totalPage = 0;
          _this.betIds = '';
          _this.gameId = null;
          _this.url = '';
          _this.jpPrefix = '';
          _this.jpList = '';
          _this.token = '';

          _initializerDefineProperty(_this, "table", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "pageIndexView", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "itemPerPage", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "loading", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "backBtn", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nextBtn", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "closeButton", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "errorMessage", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "hasExtraBet", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "isBetHistory", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "historyTableTitle", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "historyDetailTitle", _descriptor12, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SlotBaseHistory.prototype;

        _proto.onLoad = function onLoad() {
          this.initBase();
        };

        _proto.initBase = function initBase() {
          this.currentPage = 1;
          this.totalPage = 1;
          this.stopLoading();
          this.table.getComponent('SlotBaseTableHistory').initCells(this.itemPerPage);
          if (this.historyTableTitle) this.historyTableTitle.active = true;
          if (this.historyDetailTitle) this.historyDetailTitle.active = false;
        };

        _proto.openPanel = function openPanel() {
          this.node.active = true; //TODO set opacity 255

          this.currentPage = 1;

          if (this.currentPage == 1) {
            this.backBtn.getComponent(Button).interactable = false;
            this.nextBtn.getComponent(Button).interactable = false;
          }

          this.pageIndexView.getComponent(Label).string = this.currentPage;
          this.playLoading();

          if (this.isBetHistory) {
            this.requestBetDataPage(this.currentPage, this.itemPerPage, this.onRequestBetResponse.bind(this), this.requestErr.bind(this));
          } else {
            this.requestDataPage(this.currentPage, this.itemPerPage, this.onRequestResponse.bind(this), this.requestErr.bind(this));
          }
        };

        _proto.playLoading = function playLoading() {
          this.loading.active = true;
        };

        _proto.stopLoading = function stopLoading() {
          this.loading.active = false;
        };

        _proto.onNextButton = function onNextButton() {
          this.playSoundClick();
          this.nextBtn.getComponent(Button).interactable = false;
          this.currentPage += 1;
          this.playLoading();

          if (this.isBetHistory) {
            this.requestBetDataPage(this.currentPage, this.itemPerPage, this.onRequestBetResponse.bind(this), this.requestErr.bind(this));
          } else {
            this.requestDataPage(this.currentPage, this.itemPerPage, this.onRequestResponse.bind(this), this.requestErr.bind(this));
          }
        };

        _proto.onPreviousButton = function onPreviousButton() {
          this.playSoundClick();
          if (this.currentPage == 1) return;
          this.backBtn.getComponent(Button).interactable = false;
          this.currentPage -= 1;
          this.playLoading();

          if (this.isBetHistory) {
            this.requestBetDataPage(this.currentPage, this.itemPerPage, this.onRequestBetResponse.bind(this), this.requestErr.bind(this));
          } else {
            this.requestDataPage(this.currentPage, this.itemPerPage, this.onRequestResponse.bind(this), this.requestErr.bind(this));
          }
        };

        _proto.playSoundClick = function playSoundClick() {
          this.soundPlayer.playSFXClick();
        };

        _proto.requestDataPage = function requestDataPage(page, quantity, callback, callbackErr) {
          var from = (page - 1) * quantity;
          var betIds = this.betIds;
          var IS_SUPPORT_EVENT = this.config.IS_SUPPORT_EVENT;
          var headers = null;

          if (this.token) {
            headers = Object.create(null);
            headers.Authorization = this.token;
          }

          var requestParams = {
            serviceId: this.jpPrefix + this.gameId,
            from: from,
            size: quantity,
            type: this.jpList,
            betIds: betIds
          };

          if (IS_SUPPORT_EVENT) {
            requestParams.version = "3";
          }

          if (this.errorMessage) this.errorMessage.active = false;
          this.requestHistory(requestParams, callback, callbackErr, headers);
        };

        _proto.requestBetDataPage = function requestBetDataPage(page, quantity, callback, callbackErr) {
          var from = (page - 1) * quantity;
          var headers = null;

          if (this.token) {
            headers = {
              Authorization: this.token
            };
          }

          var requestParams = {
            serviceId: this.gameId,
            from: from,
            size: quantity
          };
          if (this.errorMessage) this.errorMessage.active = false;
          this.requestHistory(requestParams, callback, callbackErr, headers);
        };

        _proto.requestHistory = function requestHistory(requestParams, callback, callbackErr, headers) {
          if (requestParams === void 0) {
            requestParams = {};
          }

          if (headers === void 0) {
            headers = null;
          }

          var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
              API_URL = _loadConfigAsync$getC.API_URL;

          if (!this.gameId) {
            warn("GameId has not been set");
            callback({});
            return;
          }

          if (headers) {
            apiObject.getWithHeader({
              url: this.url,
              params: requestParams,
              callback: callback,
              callbackErr: callbackErr,
              headers: headers,
              apiUrl: API_URL
            });
          } else {
            apiObject.get({
              url: this.url,
              params: requestParams,
              callback: callback,
              callbackErr: callbackErr,
              apiUrl: API_URL
            });
          }
        };

        _proto.requestErr = function requestErr() {
          this.stopLoading();

          if (this.errorMessage) {
            this.errorMessage.active = true;
            this.table.emit('CLEAR_DATA');
          }
        };

        _proto.onRequestResponse = function onRequestResponse(res) {
          if (res.error) {
            this.requestErr();
            return; //handle error
          }

          if (res.total) {
            this.totalPage = Math.ceil(res.total / this.itemPerPage);
          }

          this.stopLoading();

          if (!res.error && Object.keys(res).length > 0 && res.data && res.data.length > 0) {
            this.nextBtn.getComponent(Button).interactable = true;
            this.backBtn.getComponent(Button).interactable = true;
            this.pageIndexView.getComponent(Label).string = this.currentPage;
            this.table.emit('UPDATE_DATA', res.data);

            if (this.currentPage == 1) {
              this.backBtn.getComponent(Button).interactable = false;
            }

            if (res.total <= this.currentPage * this.itemPerPage || res.data.length < this.itemPerPage) {
              this.nextBtn.getComponent(Button).interactable = false;
              return;
            }
          } else {
            this.table.emit('CLEAR_DATA');
          }
        };

        _proto.onRequestBetResponse = function onRequestBetResponse(res) {
          if (!res || !res.data || res.error) {
            this.requestErr();
            return;
          }

          this.stopLoading();

          if (this._hasBetData(res)) {
            if (res.data.total) {
              this.totalPage = Math.ceil(res.data.total / this.itemPerPage);
            }

            this.nextBtn.getComponent(Button).interactable = true;
            this.backBtn.getComponent(Button).interactable = true;
            this.pageIndexView.getComponent(Label).string = this.currentPage;
            this.table.emit('UPDATE_DATA', res.data.resultList);

            if (this.currentPage == 1) {
              this.backBtn.getComponent(Button).interactable = false;
            }

            if (res.data.total <= this.currentPage * this.itemPerPage || res.data.resultList.length < this.itemPerPage) {
              this.nextBtn.getComponent(Button).interactable = false;
              return;
            }
          } else {
            this.table.emit('CLEAR_DATA');
          }
        };

        _proto._hasBetData = function _hasBetData(res) {
          return res.data && res.data.resultList && res.data.resultList.length > 0;
        };

        return SlotBaseHistory;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "table", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "pageIndexView", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "itemPerPage", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 7;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "loading", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "backBtn", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "nextBtn", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "closeButton", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "errorMessage", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "hasExtraBet", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "isBetHistory", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "historyTableTitle", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "historyDetailTitle", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotBaseTableHistory.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, instantiate, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      instantiate = module.instantiate;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "fd1d9XanU5CP4CJb+1Vst6D", "SlotBaseTableHistory", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotBaseTableHistory = exports('SlotBaseTableHistory', (_dec = ccclass('SlotBaseTableHistory'), _dec2 = property({
        type: Prefab
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SlotBaseTableHistory, _Component);

        function SlotBaseTableHistory() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "cell", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SlotBaseTableHistory.prototype;

        _proto.onLoad = function onLoad() {
          this.node.on("UPDATE_DATA", this.updateData, this);
          this.node.on("CLEAR_DATA", this.clearData, this);
        };

        _proto.initCells = function initCells(itemPerPage) {
          for (var i = 0; i < itemPerPage; ++i) {
            var cell = instantiate(this.cell);
            cell.parent = this.node;
          }
        };

        _proto.updateData = function updateData(data) {
          this.node.children.forEach(function (child, index) {
            if (index < data.length) {
              child.active = true;
              child.updateData(data[index]);
              child._uiProps.colorDirty = true;
            } else {
              child.active = false;
            }
          });
        };

        _proto.clearData = function clearData() {
          this.node.children.forEach(function (child) {
            return child.active = false;
          });
        };

        return SlotBaseTableHistory;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "cell", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Prefab();
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotBetCellHistory.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './GameObject.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Label, Event, formatMoney, GameObject;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
      Event = module.Event;
    }, function (module) {
      formatMoney = module.formatMoney;
    }, function (module) {
      GameObject = module.GameObject;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;

      cclegacy._RF.push({}, "ed46a4S3gtDOZYEsTUOuPaV", "SlotBetCellHistory", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotBetCellHistory = exports('SlotBetCellHistory', (_dec = ccclass('SlotBetCellHistory'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: Node
      }), _dec6 = property({
        type: Node
      }), _dec7 = property({
        type: Node
      }), _dec8 = property({
        type: Node
      }), _dec9 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(SlotBetCellHistory, _GameObject);

        function SlotBetCellHistory() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "session", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "time", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "betAmount", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "betLines", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "winAmount", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "dots", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "iconWalletNormal", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "iconWalletPromotion", _descriptor8, _assertThisInitialized(_this));

          _this.totalLineCount = '';
          _this.sessionId = '';
          return _this;
        }

        var _proto = SlotBetCellHistory.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          this.node["updateData"] = this.updateData.bind(this);

          if (this.config.PAY_LINE_ALLWAYS) {
            if (JSON.stringify(this.config.NORMAL_TABLE_FORMAT) === "[3,3,3,3,3]") this.totalLineCount = '243';else this.totalLineCount = 'Allways';
          }
        };

        _proto.updateData = function updateData(data, config) {
          if (!data) return;
          this.sessionId = data.sessionId;
          this.session.getComponent(Label).string = "#" + data.sessionId.substring(data.sessionId.length - 8, data.sessionId.length);
          this.time.getComponent(Label).string = this.formatTimeStamp(parseInt(data.time));
          this.betAmount.getComponent(Label).string = formatMoney(parseInt(data.totalBetAmount));

          if (this.config.PAY_LINE_ALLWAYS) {
            this.betLines.getComponent(Label).string = this.totalLineCount;
          } else {
            this.betLines.getComponent(Label).string = data.bettingLines;
          }

          this.winAmount.getComponent(Label).string = formatMoney(Math.floor(parseInt(data.totalWinAmount)));
          if (this.dots) this.dots.emit('SHOW_DOTS', data);

          if (data.walletOption > 0) {
            if (this.iconWalletNormal) this.iconWalletNormal.active = false;
            if (this.iconWalletPromotion) this.iconWalletPromotion.active = true;
          } else {
            if (this.iconWalletNormal) this.iconWalletNormal.active = true;
            if (this.iconWalletPromotion) this.iconWalletPromotion.active = false;
          }

          if (this.dataStore && this.dataStore.getWalletTypes().length < 2) {
            if (this.iconWalletNormal) this.iconWalletNormal.active = false;
            if (this.iconWalletPromotion) this.iconWalletPromotion.active = false;
          }
        };

        _proto.formatTimeStamp = function formatTimeStamp(ts) {
          var d = new Date(ts);
          var h = addZero(d.getHours());
          var m = addZero(d.getMinutes());
          var s = addZero(d.getSeconds());
          var t = addZero(d.getDate()) + '/' + addZero(d.getMonth() + 1) + ' ' + h + ':' + m + ':' + s;
          return t;
        };

        _proto.onClickDetail = function onClickDetail() {
          var event = new Event('OPEN_BET_DETAIL', true);
          event['userData'] = {
            sessionId: this.sessionId
          }; //this.eventManager.emit('OPEN_BET_DETAIL', {sessionId: this.sessionId});

          this.node.dispatchEvent(event);
          if (this.soundPlayer) this.soundPlayer.playSFXClick();
        };

        return SlotBetCellHistory;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "session", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "time", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "betAmount", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "betLines", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "winAmount", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "dots", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "iconWalletNormal", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "iconWalletPromotion", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      function addZero(i) {
        if (i < 10) {
          i = '0' + i;
        }

        return i;
      }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotBetHistory.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SlotBaseHistory.ts', './globalNetwork.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, SlotBaseHistory, globalNetwork;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
    }, function (module) {
      SlotBaseHistory = module.SlotBaseHistory;
    }, function (module) {
      globalNetwork = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "14b5a1WN9FD9JZFzfgoLL9K", "SlotBetHistory", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotBetHistory = exports('SlotBetHistory', (_dec = ccclass('SlotBetHistory'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_SlotBaseHistory) {
        _inheritsLoose(SlotBetHistory, _SlotBaseHistory);

        function SlotBetHistory() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SlotBaseHistory.call.apply(_SlotBaseHistory, [this].concat(args)) || this;
          _this.initialized = false;

          _initializerDefineProperty(_this, "historyTable", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "historyDetail", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "noBetHistoryText", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "pagination", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sfxCancel", _descriptor5, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SlotBetHistory.prototype;

        _proto.onLoad = function onLoad() {
          this.initBase();
          this.node.on('OPEN_BET_DETAIL', this.openBetDetail, this);
          this.node.on("JUMP_TO_PAGE_HISTORY", this.jumpToPage, this);
          this.node.on("UPDATE_NAVIGATION_BUTTON_PAGE", this.updateNavigationButtonsPage, this);
          this.node.on("PLAY", this.openPanel, this);
        };

        _proto.initBase = function initBase() {
          if (this.initialized) return;

          _SlotBaseHistory.prototype.initBase.call(this);

          this.historyTable.active = true;
          this.historyDetail.active = false;
          this.backBtn['initPosition'] = this.backBtn.getPosition();
          this.nextBtn['initPosition'] = this.nextBtn.getPosition();
          this.noBetHistoryText.active = false;
          this.initialized = true;
          this.init();
        };

        _proto.init = function init() {
          this.gameId = this.config.GAME_ID;
          this.url = 'history/getHistoryUserSpins';
        };

        _proto.openPanel = function openPanel() {
          this.table.emit('CLEAR_DATA');
          if (this.pagination) this.pagination.emit('RESET_PAGE_INDEX');
          this.token = globalNetwork.getToken();

          _SlotBaseHistory.prototype.openPanel.call(this);
        };

        _proto.onEnable = function onEnable() {
          if (this._isOnLoadCalled) this.openPanel();
        };

        _proto.playLoading = function playLoading() {
          _SlotBaseHistory.prototype.playLoading.call(this);

          this.noBetHistoryText.active = false;
        };

        _proto.onRequestBetResponse = function onRequestBetResponse(res) {
          if (res.error) {
            return; //handle server error;
          }

          _SlotBaseHistory.prototype.onRequestBetResponse.call(this, res);

          if (this._hasBetData(res)) {
            this.noBetHistoryText.active = false;

            if (res.data.total > 0 && this.pagination) {
              this.pagination.emit('UPDATE_PAGE', this.currentPage, this.totalPage);
            }
          } else {
            this.noBetHistoryText.active = true;
          }
        };

        _proto.openBetDetail = function openBetDetail(event) {
          if (this.historyTable) this.historyTable.active = false;

          if (this.historyDetail) {
            this.historyDetail.active = true;
            this.historyDetail.emit('SHOW_BET_DETAIL', event.userData);
          }

          if (this.historyTableTitle && this.historyDetailTitle) this.historyTableTitle.active = false;
          if (this.historyTableTitle && this.historyDetailTitle) this.historyDetailTitle.active = true;
          event.propagationStopped = true;
        };

        _proto.onHideBetDetail = function onHideBetDetail() {
          if (this.historyTable) this.historyTable.active = true;

          if (this.historyDetail) {
            this.historyDetail.active = false;
            this.historyDetail.emit('RESET_UI');
          }

          if (this.historyTableTitle && this.historyDetailTitle) this.historyTableTitle.active = true;
          if (this.historyTableTitle && this.historyDetailTitle) this.historyDetailTitle.active = false;
        };

        _proto.onPlaySfxCancel = function onPlaySfxCancel() {
          if (this.soundPlayer) this.soundPlayer.playSfx(this.sfxCancel);
        };

        _proto.onCloseButton = function onCloseButton() {
          this.soundPlayer.playSFXClick();
        };

        _proto.jumpToPage = function jumpToPage(evt) {
          evt.propagationStopped = true;
          this.playSoundClick();
          this.currentPage = evt.clickedPage;
          this.playLoading();

          if (this.isBetHistory) {
            this.requestBetDataPage(this.currentPage, this.itemPerPage, this.onRequestBetResponse.bind(this), this.requestErr.bind(this));
          } else {
            this.requestDataPage(this.currentPage, this.itemPerPage, this.onRequestResponse.bind(this), this.requestErr.bind(this));
          }
        };

        _proto.updateNavigationButtonsPage = function updateNavigationButtonsPage(evt) {
          evt.propagationStopped = true;
          var offset = parseInt(evt.details.offset);
          this.backBtn.setPosition(this.backBtn['initPosition'].x - offset, this.backBtn['initPosition'].y);
          this.nextBtn.setPosition(this.nextBtn['initPosition'].x + offset, this.nextBtn['initPosition'].y);
        };

        return SlotBetHistory;
      }(SlotBaseHistory), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "historyTable", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "historyDetail", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "noBetHistoryText", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "pagination", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "sfxCancel", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'CLICK';
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotBetHistoryDetail.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts', './serviceRest.ts', './loadConfigAsync.ts', './globalNetwork.ts', './CustomEnum.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Label, ScrollView, Vec2, Layout, UITransform, Button, v2, Toggle, GameObject, apiObject, loadConfigAsync, globalNetwork, SlotGameMode;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
      ScrollView = module.ScrollView;
      Vec2 = module.Vec2;
      Layout = module.Layout;
      UITransform = module.UITransform;
      Button = module.Button;
      v2 = module.v2;
      Toggle = module.Toggle;
    }, function (module) {
      GameObject = module.GameObject;
    }, function (module) {
      apiObject = module.default;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      globalNetwork = module.default;
    }, function (module) {
      SlotGameMode = module.SlotGameMode;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20;

      cclegacy._RF.push({}, "776c8mkk7pF5K5gUQ64D2/g", "SlotBetHistoryDetail", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotBetHistoryDetail = exports('SlotBetHistoryDetail', (_dec = ccclass('SlotBetHistoryDetail'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: Node
      }), _dec6 = property({
        type: Node
      }), _dec7 = property({
        type: Node
      }), _dec8 = property({
        type: Node
      }), _dec9 = property({
        type: Node
      }), _dec10 = property({
        type: Node
      }), _dec11 = property({
        type: Node
      }), _dec12 = property({
        type: Node
      }), _dec13 = property({
        type: Node
      }), _dec14 = property({
        type: Label
      }), _dec15 = property({
        type: Node
      }), _dec16 = property({
        type: Node
      }), _dec17 = property({
        type: Node
      }), _dec18 = property({
        type: Node
      }), _dec19 = property({
        type: Node
      }), _dec20 = property({
        type: ScrollView
      }), _dec21 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(SlotBetHistoryDetail, _GameObject);

        function SlotBetHistoryDetail() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "summaryView", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "normalGameView", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "freeGameView", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "jackpotView", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bonusView", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "topUpView", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "summaryBtn", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "normalGameBtn", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "freeGameBtn", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bonusGameBtn", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "topUpGameBtn", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "jackpotBtn", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "session", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "noBetDetail", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "errorMessage", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "loading", _descriptor16, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "prevModeBtn", _descriptor17, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nextModeBtn", _descriptor18, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "scrollView", _descriptor19, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "scrollContent", _descriptor20, _assertThisInitialized(_this));

          _this.spacingX = 0;
          _this.itemWidth = 180;
          _this.currentFreeGamePage = 0;
          _this.currentJackpotPage = 0;
          _this.currentBonusGamePage = 0;
          _this.currentTopUpGamePage = 0;
          _this.maxPage = 1;
          _this.gameMode = 0;
          _this.normalGameData = null;
          _this.freeGameData = [];
          _this.jackpotData = [];
          _this.bonusGameData = [];
          _this.topUpGameData = [];
          _this.normalIndex = 0;
          _this.freeIndexes = [];
          _this.jackpotIndexes = [];
          _this.bonusIndexes = [];
          _this.topUpIndexes = [];
          _this.sessionId = '';
          _this.isGetMode = false;
          _this.currentOffset = new Vec2(0, 0);
          _this.tokenType = null;
          _this.userId = null;
          _this.token = null;
          return _this;
        }

        var _proto = SlotBetHistoryDetail.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          this.node.on('SHOW_BET_DETAIL', this.showBetDetail, this);
          this.node.on('RESET_UI', this.resetUI, this);
          this.node.on('UPDATE_GAME_DETAIL', this.updateGameDetail, this);
          if (this.prevModeBtn) this.prevModeBtn.active = false;
          if (this.nextModeBtn) this.nextModeBtn.active = false;
          if (this.scrollView) this.scrollView.node.on('scrolling', this.onScrollEnded, this);
        };

        _proto.showBetDetail = function showBetDetail(sessionData) {
          this.resetUI();
          var sessionId = sessionData.sessionId;
          this.sessionId = sessionId;
          this.session.string = "#" + sessionId.substring(sessionId.length - 8, sessionId.length);
          this.requestDetail();
        };

        _proto.setToken = function setToken(token, type, userId) {
          this.token = token;
          this.tokenType = type;
          this.userId = userId;
        };

        _proto.requestDetail = function requestDetail(page) {
          var url = page >= 0 ? 'history/getHistoryUserSpinDetails' : 'history/getHistoryUserSpinSummary';

          var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
              API_URL = _loadConfigAsync$getC.API_URL;

          if (this.loading) this.loading.active = true;
          if (this.errorMessage) this.errorMessage.active = false;
          if (this.noBetDetail) this.noBetDetail.active = false;
          var token = this.token || globalNetwork.getToken();
          var headers = {
            Authorization: token,
            'token-type': 'user'
          };

          if (this.tokenType) {
            headers['token-type'] = this.tokenType;
          }

          if (this.userId) {
            headers['user-id'] = this.userId;
          }

          var requestParams = {
            serviceId: this.config.GAME_ID,
            psId: this.sessionId
          };

          if (page >= 0) {
            requestParams.from = page;
            requestParams.size = 1;
            requestParams.scroll = true;
          }

          var params = {
            url: url,
            params: requestParams,
            callback: this.onRequestResponse.bind(this),
            callbackErr: this.requestErr.bind(this),
            headers: headers,
            apiUrl: API_URL
          };
          apiObject.getWithHeader(params);
        };

        _proto.onRequestResponse = function onRequestResponse(res) {
          var _this2 = this;

          if (this.loading) this.loading.active = false;

          if (res.error || !res.data || res.data.resultList.length <= 0) {
            if (this.noBetDetail) this.noBetDetail.active = true;
            return;
          } else {
            if (this.noBetDetail) this.noBetDetail.active = false;
          }

          if (res.data && res.data.resultList) {
            if (!this.isGetMode) this.getModeIndex(res.data.scroll);
            var resultData = res.data.resultList[0];

            if (this.summaryView.active) {
              this.setOpacity(this.summaryView, 255);
              this.summaryView.emit('UPDATE_SUMMARY', resultData);
              if (this.summaryBtn) this.summaryBtn.active = true;
              if (this.normalGameBtn) this.normalGameBtn.active = true;
              if (this.freeGameBtn) this.freeGameBtn.active = resultData && resultData.freeGameTotal > 0;
              if (this.jackpotBtn) this.jackpotBtn.active = resultData && resultData.totalJpWinAmount > 0;

              if (this.bonusGameBtn) {
                this.bonusGameBtn.active = resultData && resultData.bonusGameTotal > 0;
              }

              if (this.topUpGameBtn) {
                this.topUpGameBtn.active = resultData && resultData.topUpGameTotal > 0;
              }

              this.scheduleOnce(function () {
                _this2.checkMaxModePages();
              }, 0.1);
            } else this.updateGameMode(resultData);
          }
        };

        _proto.checkMaxModePages = function checkMaxModePages() {
          if (this.scrollContent) {
            this.spacingX = this.scrollContent.getComponent(Layout).spacingX;
            var item = this.scrollContent.children[0];
            this.itemWidth = item.getComponent(UITransform).width;
            var pageWidth = this.scrollView.node.getComponent(UITransform).width;
            var contentWidth = this.scrollContent.getComponent(UITransform).width;
            this.maxPage = Math.ceil(contentWidth / pageWidth);
            this.nextModeBtn.active = this.scrollContent.getComponent(UITransform).width > this.scrollView.node.getComponent(UITransform).width;
          }
        };

        _proto.requestErr = function requestErr() {
          if (this.loading) this.loading.active = false;
          if (this.errorMessage) this.errorMessage.active = true;
        };

        _proto.getModeIndex = function getModeIndex(scrollData) {
          var _this3 = this;

          this.isGetMode = true;

          if (scrollData) {
            scrollData.forEach(function (item, index) {
              var parsedData = item.split(':');
              var pageIndex = parseInt(parsedData[0]);
              var winJackpot = parseInt(parsedData[5]);
              var mode = parsedData[1];

              if (mode === 'normal') {
                _this3.normalIndex = pageIndex;
              } else if (mode === 'free') {
                _this3.freeIndexes.push(pageIndex);
              } else if (mode === 'bonus') {
                _this3.bonusIndexes.push(pageIndex);
              } else if (mode === 'topUp') {
                _this3.topUpIndexes.push(pageIndex);
              }

              if (winJackpot === 1) {
                _this3.jackpotIndexes.push(pageIndex);
              }
            });
          }
        };

        _proto.updateGameMode = function updateGameMode(data) {
          switch (this.gameMode) {
            case 1:
              this.normalGameData = data;
              if (this.normalGameView) this.normalGameView.emit('UPDATE_DETAIL_VIEW', data);
              break;

            case 2:
              this.freeGameData[this.currentFreeGamePage] = data;
              if (this.freeGameView) this.freeGameView.emit('UPDATE_DETAIL_VIEW', data, this.freeIndexes);
              break;

            case 3:
              this.jackpotData[this.currentJackpotPage] = data;
              if (this.jackpotView) this.jackpotView.emit('UPDATE_DETAIL_VIEW', data, this.jackpotIndexes);
              break;

            case 4:
              this.bonusGameData[this.currentBonusGamePage] = data;
              if (this.bonusView) this.bonusView.emit('UPDATE_DETAIL_VIEW', data, this.bonusIndexes);
              break;

            case 5:
              this.topUpGameData[this.currentTopUpGamePage] = data;
              if (this.topUpView) this.topUpView.emit('UPDATE_DETAIL_VIEW', data, this.topUpIndexes);
              break;
          }
        };

        _proto.onShowGameMode = function onShowGameMode(event, mode) {
          this.hideAllView();
          this.enableGameModeButtons(true);
          if (this.soundPlayer) this.soundPlayer.playSFXClick();
          this.gameMode = Number(mode);
          if (this.normalGameView) this.normalGameView.emit('CLEAR_TABLE');
          if (this.freeGameView) this.freeGameView.emit('CLEAR_TABLE');
          if (this.bonusView) this.bonusView.emit('CLEAR_TABLE');
          if (this.topUpView) this.topUpView.emit('CLEAR_TABLE');
          if (this.jackpotView) this.jackpotView.emit('CLEAR_TABLE');

          switch (this.gameMode) {
            case 0:
              this.summaryBtn.getComponent(Button).interactable = false;
              this.summaryView.active = true;
              break;

            case 1:
              this.normalGameBtn.getComponent(Button).interactable = false;
              this.normalGameView.active = true;
              if (this.normalGameData) this.updateGameMode(this.normalGameData);else if (this.normalIndex >= 0) this.requestDetail(this.normalIndex);
              break;

            case 2:
              this.freeGameBtn.getComponent(Button).interactable = false;
              this.freeGameView.active = true;
              if (this.freeGameData[this.currentFreeGamePage]) this.updateGameMode(this.freeGameData[this.currentFreeGamePage]);else if (this.freeIndexes.length && this.freeIndexes[this.currentFreeGamePage] >= 1) this.requestDetail(this.freeIndexes[this.currentFreeGamePage]);
              break;

            case 3:
              if (this.jackpotBtn) this.jackpotBtn.getComponent(Button).interactable = false;
              if (this.jackpotView) this.jackpotView.active = true;
              if (this.jackpotData[this.currentJackpotPage]) this.updateGameMode(this.jackpotData[this.currentJackpotPage]);else if (this.jackpotIndexes.length && this.jackpotIndexes[this.currentJackpotPage] >= 0) this.requestDetail(this.jackpotIndexes[this.currentJackpotPage]);
              break;

            case 4:
              if (this.bonusGameBtn) this.bonusGameBtn.getComponent(Button).interactable = false;
              if (this.bonusView) this.bonusView.active = true;
              if (this.bonusGameData[this.currentBonusGamePage]) this.updateGameMode(this.bonusGameData[this.currentBonusGamePage]);else if (this.bonusIndexes.length && this.bonusIndexes[this.currentBonusGamePage] >= 1) this.requestDetail(this.bonusIndexes[this.currentBonusGamePage]);
              break;

            case 5:
              if (this.topUpGameBtn) this.topUpGameBtn.getComponent(Button).interactable = false;
              if (this.topUpView) this.topUpView.active = true;
              if (this.topUpGameData[this.currentTopUpGamePage]) this.updateGameMode(this.topUpGameData[this.currentTopUpGamePage]);else if (this.topUpIndexes.length && this.topUpIndexes[this.currentTopUpGamePage] >= 1) this.requestDetail(this.topUpIndexes[this.currentTopUpGamePage]);
              break;
          }
        };

        _proto.onPrevMode = function onPrevMode() {
          var movingStep = this.spacingX + this.itemWidth;
          var mod = this.currentOffset.x % movingStep;
          var delta = new Vec2(-(mod > 5 ? mod : movingStep), 0);
          this.updateScrollView(delta);
          if (this.soundPlayer) this.soundPlayer.playSFXClick();
        };

        _proto.onNextMode = function onNextMode() {
          var movingStep = this.spacingX + this.itemWidth;
          var mod = this.currentOffset.x % movingStep;
          var delta = new Vec2(movingStep - mod, 0);
          this.updateScrollView(delta);
          if (this.soundPlayer) this.soundPlayer.playSFXClick();
        };

        _proto.updateGameDetail = function updateGameDetail(event) {
          var _event$userData = event.userData,
              currentPage = _event$userData.currentPage,
              gameMode = _event$userData.gameMode;

          if (gameMode === SlotGameMode.FreeGame) {
            this.currentFreeGamePage = currentPage;
            if (this.freeGameData[this.currentFreeGamePage]) this.updateGameMode(this.freeGameData[this.currentFreeGamePage]);else if (this.freeIndexes.length && this.freeIndexes[this.currentFreeGamePage] >= 1) this.requestDetail(this.freeIndexes[this.currentFreeGamePage]);
          } else if (gameMode === SlotGameMode.JackpotGame) {
            this.currentJackpotPage = currentPage;
            if (this.jackpotData[this.currentJackpotPage]) this.updateGameMode(this.jackpotData[this.currentJackpotPage]);else if (this.jackpotIndexes.length && this.jackpotIndexes[this.currentJackpotPage] >= 1) this.requestDetail(this.jackpotIndexes[this.currentJackpotPage]);
          } else if (gameMode === SlotGameMode.BonusGame) {
            this.currentBonusGamePage = currentPage;
            if (this.bonusGameData[this.currentBonusGamePage]) this.updateGameMode(this.bonusGameData[this.currentBonusGamePage]);else if (this.bonusIndexes.length && this.bonusIndexes[this.currentBonusGamePage] >= 1) this.requestDetail(this.bonusIndexes[this.currentBonusGamePage]);
          } else if (gameMode === SlotGameMode.TopUpGame) {
            this.currentTopUpGamePage = currentPage;
            if (this.topUpGameData[this.currentTopUpGamePage]) this.updateGameMode(this.topUpGameData[this.currentTopUpGamePage]);else if (this.topUpIndexes.length && this.topUpIndexes[this.currentTopUpGamePage] >= 1) this.requestDetail(this.topUpIndexes[this.currentTopUpGamePage]);
          }

          event.propagationStopped = true;
        };

        _proto.onNextFreeGamePage = function onNextFreeGamePage() {
          this.currentFreeGamePage++;
          if (this.freeGameData[this.currentFreeGamePage]) this.updateGameMode(this.freeGameData[this.currentFreeGamePage]);else if (this.freeIndexes.length && this.freeIndexes[this.currentFreeGamePage] >= 1) this.requestDetail(this.freeIndexes[this.currentFreeGamePage]);
        };

        _proto.onNextTopUpGamePage = function onNextTopUpGamePage() {
          this.currentTopUpGamePage++;
          if (this.topUpGameData[this.currentTopUpGamePage]) this.updateGameMode(this.topUpGameData[this.currentTopUpGamePage]);else if (this.topUpIndexes.length && this.topUpIndexes[this.currentTopUpGamePage] >= 1) this.requestDetail(this.topUpIndexes[this.currentTopUpGamePage]);
        };

        _proto.onNextBonusGamePage = function onNextBonusGamePage() {
          this.currentBonusGamePage++;
          if (this.bonusGameData[this.currentBonusGamePage]) this.updateGameMode(this.bonusGameData[this.currentBonusGamePage]);else if (this.bonusIndexes.length && this.bonusIndexes[this.currentBonusGamePage] >= 1) this.requestDetail(this.bonusIndexes[this.currentBonusGamePage]);
        };

        _proto.updateScrollView = function updateScrollView(deltaVec) {
          var newOffset = new Vec2(Math.max(this.currentOffset.x + deltaVec.x, 0), Math.max(this.currentOffset.y + deltaVec.y, 0));
          this.scrollView.scrollToOffset(newOffset, 0.1);
        };

        _proto.hideAllView = function hideAllView() {
          if (this.summaryView) this.summaryView.active = false;
          if (this.normalGameView) this.normalGameView.active = false;
          if (this.freeGameView) this.freeGameView.active = false;
          if (this.bonusView) this.bonusView.active = false;
          if (this.topUpView) this.topUpView.active = false;
          if (this.jackpotView) this.jackpotView.active = false;
        };

        _proto.enableGameModeButtons = function enableGameModeButtons(isEnable) {
          if (this.summaryBtn) this.summaryBtn.getComponent(Button).interactable = isEnable;
          if (this.normalGameBtn) this.normalGameBtn.getComponent(Button).interactable = isEnable;
          if (this.freeGameBtn) this.freeGameBtn.getComponent(Button).interactable = isEnable;
          if (this.bonusGameBtn) this.bonusGameBtn.getComponent(Button).interactable = isEnable;
          if (this.topUpGameBtn) this.topUpGameBtn.getComponent(Button).interactable = isEnable;
          if (this.jackpotBtn) this.jackpotBtn.getComponent(Button).interactable = isEnable;
        };

        _proto.onScrollEnded = function onScrollEnded(scrollView) {
          var contentPos = scrollView.content.position;
          var contentWidth = scrollView.content.getComponent(UITransform).width;
          var viewWidth = this.scrollView.node.getComponent(UITransform).width;
          var leftBound = -viewWidth / 2 - 10;
          var rightBound = viewWidth / 2 + 10;
          this.nextModeBtn.active = contentPos.x + contentWidth > rightBound;
          this.prevModeBtn.active = contentPos.x < leftBound;
          var scrollViewOffset = this.scrollView.getScrollOffset();
          this.currentOffset = new Vec2(Math.abs(scrollViewOffset.x), Math.abs(scrollViewOffset.y));
        };

        _proto.resetData = function resetData() {
          this.isGetMode = false;
          this.currentFreeGamePage = 0;
          this.currentJackpotPage = 0;
          this.currentBonusGamePage = 0;
          this.currentTopUpGamePage = 0;
          this.gameMode = 0;
          this.normalGameData = null;
          this.freeGameData = [];
          this.jackpotData = [];
          this.bonusGameData = [];
          this.topUpGameData = [];
          this.normalIndex = 0;
          this.freeIndexes = [];
          this.jackpotIndexes = [];
          this.bonusIndexes = [];
          this.topUpIndexes = [];
        };

        _proto.resetUI = function resetUI() {
          this.resetData();
          this.session.string = '';
          this.scrollView.scrollTo(v2(0, 0), 0.0);
          this.currentOffset = this.scrollView.getScrollOffset();
          this.prevModeBtn.active = false;
          this.nextModeBtn.active = false;
          this.enableGameModeButtons(true);
          this.hideGameMode();
          var smrToggle = this.summaryBtn.getComponent(Toggle);
          if (smrToggle) smrToggle.isChecked = true;
          this.summaryBtn.getComponent(Button).interactable = false;
          this.hideAllView();
          if (this.summaryView) this.summaryView.emit('RESET_ALL');
          if (this.normalGameView) this.normalGameView.emit('RESET_ALL');
          if (this.freeGameView) this.freeGameView.emit('RESET_ALL');
          if (this.bonusView) this.bonusView.emit('RESET_ALL');
          if (this.topUpView) this.topUpView.emit('RESET_ALL');
          if (this.jackpotView) this.jackpotView.emit('RESET_ALL');
          if (this.summaryView) this.summaryView.active = true;
          this.setOpacity(this.summaryView, 1);
        };

        _proto.hideGameMode = function hideGameMode() {
          if (this.summaryBtn) this.summaryBtn.active = false;
          if (this.normalGameBtn) this.normalGameBtn.active = false;
          if (this.jackpotBtn) this.jackpotBtn.active = false;
          if (this.bonusGameBtn) this.bonusGameBtn.active = false;
          if (this.freeGameBtn) this.freeGameBtn.active = false;
          if (this.topUpGameBtn) this.topUpGameBtn.active = false;
        };

        _proto.disableCloseDetail = function disableCloseDetail() {
          this.node.getChildByName('BackBtn').active = false;
        };

        return SlotBetHistoryDetail;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "summaryView", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "normalGameView", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "freeGameView", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "jackpotView", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "bonusView", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "topUpView", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "summaryBtn", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "normalGameBtn", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "freeGameBtn", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "bonusGameBtn", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "topUpGameBtn", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "jackpotBtn", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "session", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "noBetDetail", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "errorMessage", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "loading", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "prevModeBtn", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "nextModeBtn", [_dec19], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "scrollView", [_dec20], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "scrollContent", [_dec21], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotBetSummaryHistory.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Component, formatMoney;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      formatMoney = module.formatMoney;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;

      cclegacy._RF.push({}, "72f47E42jJK75+z5ObEv0ZW", "SlotBetSummaryHistory", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotBetSummaryHistory = exports('SlotBetSummaryHistory', (_dec = ccclass('SlotBetSummaryHistory'), _dec2 = property({
        type: Label
      }), _dec3 = property({
        type: Label
      }), _dec4 = property({
        type: Label
      }), _dec5 = property({
        type: Label
      }), _dec6 = property({
        type: Label
      }), _dec7 = property({
        type: Label
      }), _dec8 = property({
        type: Label
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SlotBetSummaryHistory, _Component);

        function SlotBetSummaryHistory() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "totalWinAmount", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "normalWinAmount", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "freeWinAmount", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "jackpotWinAmount", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bonusWinAmount", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "topUpWinAmount", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "jackpotWinVip", _descriptor7, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SlotBetSummaryHistory.prototype;

        _proto.onLoad = function onLoad() {
          this.node.on('UPDATE_SUMMARY', this.updateSummary, this);
          this.node.on('RESET_ALL', this.resetAll, this);
        };

        _proto.updateSummary = function updateSummary(data) {
          //
          if (!data) return;
          if (this.totalWinAmount) this.totalWinAmount.string = formatMoney(parseInt(data.totalWinAmount));
          if (this.normalWinAmount) this.normalWinAmount.string = formatMoney(parseInt(data.totalNormalWinAmount));
          if (this.freeWinAmount) this.freeWinAmount.string = formatMoney(parseInt(data.totalFreeWinAmount));

          if (this.jackpotWinAmount) {
            var jackpotWin = parseInt(data.totalJpWinAmount);
            var extraVip = parseInt(data.eventExtraAmountTotal || 0);
            var totalWin = jackpotWin + extraVip;

            if (extraVip && data.userLevel) {
              var userLevel = parseInt(data.userLevel.replace('LEVEL', ''));
              this.jackpotWinVip.string = formatMoney(jackpotWin) + " + " + formatMoney(extraVip) + " (" + data.eventExtraPercent + "% vip" + userLevel + ") \n= " + formatMoney(totalWin);
              this.jackpotWinVip.node.active = true;
              this.jackpotWinAmount.node.active = false;
            } else {
              this.jackpotWinAmount.string = formatMoney(parseInt(data.totalJpWinAmount));
              this.jackpotWinVip.node.active = false;
              this.jackpotWinAmount.node.active = true;
            }
          }

          if (this.bonusWinAmount) this.bonusWinAmount.string = formatMoney(parseInt(data.totalBonusWinAmount));
          if (this.topUpWinAmount) this.topUpWinAmount.string = formatMoney(parseInt(data.totalTopUpWinAmount));
        };

        _proto.resetAll = function resetAll() {
          if (this.totalWinAmount) this.totalWinAmount.string = '0';
          if (this.normalWinAmount) this.normalWinAmount.string = '0';
          if (this.freeWinAmount) this.freeWinAmount.string = '0';
          if (this.jackpotWinAmount) this.jackpotWinAmount.string = '0';
          if (this.bonusWinAmount) this.bonusWinAmount.string = '0';
          if (this.topUpWinAmount) this.topUpWinAmount.string = '0';
        };

        return SlotBetSummaryHistory;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "totalWinAmount", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "normalWinAmount", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "freeWinAmount", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "jackpotWinAmount", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "bonusWinAmount", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "topUpWinAmount", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "jackpotWinVip", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotBetTableHistory.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SlotBaseTableHistory.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, SlotBaseTableHistory;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      SlotBaseTableHistory = module.SlotBaseTableHistory;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "8d56egLfBBDhL3Ai9pLJTF6", "SlotBetTableHistory", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotBetTableHistory = exports('SlotBetTableHistory', (_dec = ccclass('SlotBetTableHistory'), _dec(_class = /*#__PURE__*/function (_SlotBaseTableHistory) {
        _inheritsLoose(SlotBetTableHistory, _SlotBaseTableHistory);

        function SlotBetTableHistory() {
          return _SlotBaseTableHistory.apply(this, arguments) || this;
        }

        return SlotBetTableHistory;
      }(SlotBaseTableHistory)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotBetTableHistoryDetail.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BaseTableHistoryDetail.ts', './CustomEnum.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Label, BaseTableHistoryDetail, SlotGameMode;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
    }, function (module) {
      BaseTableHistoryDetail = module.BaseTableHistoryDetail;
    }, function (module) {
      SlotGameMode = module.SlotGameMode;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "fff38+Jm51MI6I3JujlXigB", "SlotBetTableHistoryDetail", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotBetTableHistoryDetail = exports('SlotBetTableHistoryDetail', (_dec = ccclass('SlotBetTableHistoryDetail'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Label
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_BaseTableHistoryDeta) {
        _inheritsLoose(SlotBetTableHistoryDetail, _BaseTableHistoryDeta);

        function SlotBetTableHistoryDetail() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseTableHistoryDeta.call.apply(_BaseTableHistoryDeta, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "multiplierNode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "multiplierLabel", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SlotBetTableHistoryDetail.prototype;

        _proto.updateDetailView = function updateDetailView(data, pages) {
          _BaseTableHistoryDeta.prototype.updateDetailView.call(this, data, pages);

          if (pages && pages.length > 1) {
            if (this.sceneType === SlotGameMode.FreeGame) {
              if (this.nextPageBtn) this.nextPageBtn.active = this.currentFreeGamePage < pages.length - 1;
            } else if (this.sceneType === SlotGameMode.JackpotGame) {
              if (this.nextPageBtn) this.nextPageBtn.active = this.currentJackpotPage < pages.length - 1;
            } else if (this.sceneType === SlotGameMode.BonusGame) {
              if (this.nextPageBtn) this.nextPageBtn.active = this.currentBonusGamePage < pages.length - 1;
            } else if (this.sceneType === SlotGameMode.TopUpGame) {
              if (this.nextPageBtn) this.nextPageBtn.active = this.currentTopUpGamePage < pages.length - 1;
            }
          }

          this.showMultiplier(data);
          var subSym = this.hasSubSymbol && data.result && data.result.subSym ? data.result.subSym : [];
          this.renderTable(data.matrixResult, data.matrixFormat, subSym);
        };

        _proto.showMultiplier = function showMultiplier(data) {
          if (data.multiplier && data.multiplier > 1 && data.winAmount) {
            if (this.multiplierNode) this.multiplierNode.active = true;
            if (this.multiplierLabel) this.multiplierLabel.string = 'x' + data.multiplier;
          } else {
            if (this.multiplierNode) this.multiplierNode.active = false;
            if (this.multiplierLabel) this.multiplierLabel.string = '';
          }
        };

        _proto.resetUI = function resetUI() {
          _BaseTableHistoryDeta.prototype.resetUI.call(this);

          if (this.multiplierNode) this.multiplierNode.active = false;
          if (this.multiplierLabel) this.multiplierLabel.string = '';
        };

        return SlotBetTableHistoryDetail;
      }(BaseTableHistoryDetail), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "multiplierNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "multiplierLabel", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotButton.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts', './CustomEnum.ts', './CustomType.ts', './EventNames.ts', './utils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Button, SpriteFrame, sp, input, Input, KeyCode, Sprite, log, warn, Vec3, tween, GameObject, SlotGameMode, TutorialTriggerType, WalletType, CustomEvent, EventNames, setOpacity;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Button = module.Button;
      SpriteFrame = module.SpriteFrame;
      sp = module.sp;
      input = module.input;
      Input = module.Input;
      KeyCode = module.KeyCode;
      Sprite = module.Sprite;
      log = module.log;
      warn = module.warn;
      Vec3 = module.Vec3;
      tween = module.tween;
    }, function (module) {
      GameObject = module.GameObject;
    }, function (module) {
      SlotGameMode = module.SlotGameMode;
      TutorialTriggerType = module.TutorialTriggerType;
      WalletType = module.WalletType;
    }, function (module) {
      CustomEvent = module.CustomEvent;
    }, function (module) {
      EventNames = module.default;
    }, function (module) {
      setOpacity = module.setOpacity;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24;

      cclegacy._RF.push({}, "7d290YuDXNLU4r4CDoSlOKM", "SlotButton", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotButton = exports('SlotButton', (_dec = ccclass('SlotButton'), _dec2 = property({
        type: SlotGameMode
      }), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Button), _dec6 = property(Button), _dec7 = property(Button), _dec8 = property(Button), _dec9 = property(Button), _dec10 = property(Node), _dec11 = property(SpriteFrame), _dec12 = property(SpriteFrame), _dec13 = property(sp.Skeleton), _dec14 = property(sp.Skeleton), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(SlotButton, _GameObject);

        function SlotButton() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "currentGameMode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "deCoupling", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "autoSpinPanel", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "autoSpinOverlay", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnSpin", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnFastStop", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnStopAuto", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "promoBtnSpin", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "promoBtnFast", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "textSpin", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "txtHoldToAuto", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "txtPressToStop", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "spineBtnSpin", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "spineHover", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "animNormal", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "animHover", _descriptor16, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "animPressed", _descriptor17, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "animDisable", _descriptor18, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "animFastToResult", _descriptor19, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "animPromoSpin", _descriptor20, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "animPromoHover", _descriptor21, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "isSetSkin", _descriptor22, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "skinNormalSpin", _descriptor23, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "skinPromoteSpin", _descriptor24, _assertThisInitialized(_this));

          _this.removeSoundClick = false;
          _this.isAutoSpin = false;
          _this.canAutoSpin = true;
          _this.isOnHover = false;
          _this.isDebug = false;
          _this.showFunc = null;
          _this.isTouched = false;
          _this.animSpinIdle = '';
          _this.animSpinHover = '';
          _this.autoSpinButtons = [];
          return _this;
        }

        var _proto = SlotButton.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          input.on(Input.EventType.KEY_UP, this.onKeyUp, this); // systemEvent.on(SystemEvent.EventType.KEY_UP, this.onKeyUp, this);

          if (this.btnSpin) {
            this.node.on("SPIN_ENABLE", this.enableSpin, this);
            this.node.on("SPIN_DISABLE", this.disableSpin, this);
            this.node.on("SPIN_SHOW", this.showSpin, this);
            this.node.on("SPIN_HIDE", this.hideSpin, this);
          }

          if (this.btnFastStop) {
            this.node.on("FAST_TO_RESULT_SHOW", this.showFastToResult, this);
            this.node.on("FAST_TO_RESULT_HIDE", this.hideFastToResult, this);
            this.node.on("FAST_TO_RESULT_ENABLE", this.enableFastToResult, this);
            this.node.on("FAST_TO_RESULT_DISABLE", this.disableFastToResult, this);
          }

          if (this.btnStopAuto) {
            this.node.on("STOP_AUTO_SPIN_SHOW", this.showStopAutoSpin, this);
            this.node.on("STOP_AUTO_SPIN_HIDE", this.hideStopAutoSpin, this);
          }

          if (this.textSpin) {
            this.node.on("SHOW_TEXT_AUTO_SPIN", this.showTextAutoSpin, this);
            this.node.on("HIDE_TEXT_AUTO_SPIN", this.hideTextAutoSpin, this);
          }

          if (this.autoSpinPanel) {
            this.node.on("HIDE_AUTO_SPIN_PANEL", this.hideAutoSpinPanel, this);
          }

          this.node.on("PAUSE_AUTO_SPIN", this.pauseAutoSpin, this);
          this.node.on("HIDE_PROMO_UI", this.hideAllPromoUI, this);
          this.node.on("SHOW_PROMO_UI", this.showAllPromoUI, this);

          if (this.btnSpin) {
            this.btnSpin.interactable = false;
          }

          if (this.autoSpinPanel) {
            this.hideAutoSpinPanel(0);
          }

          this.bindAutoSpinEvent();
          this.bindEventPromotion();

          if (this.deCoupling) {
            this.node.dispatchEvent(new CustomEvent("SET_UP_SLOT_BUTTON", true, {
              slotGameType: this.currentGameMode,
              slotButton: this.node
            }));
          }

          this.animSpinIdle = this.animNormal;
          this.animSpinHover = this.animHover;

          if (this.isSetSkin) {
            if (this.spineBtnSpin) {
              this.spineBtnSpin.setSkin(this.skinNormalSpin);
            }

            if (this.spineHover) {
              this.spineHover.setSkin(this.skinNormalSpin);
            }
          }

          if (this.autoSpinPanel) {
            this.autoSpinButtons = this.autoSpinPanel.getComponentsInChildren(Button);
          }
        };

        _proto.onEnable = function onEnable() {
          if (this.autoSpinOverlay) {
            this.autoSpinOverlay.on(Node.EventType.TOUCH_END, this.hideAutoSpinPanel, this, true);
          }

          this.eventManager.on(EventNames.SWITCH_WALLET, this.onSwitchWallet, this);
        }
        /**
         * @InputEvent
         * */
        ;

        _proto.enableSpinKey = function enableSpinKey(enable) {
          input.off(Input.EventType.KEY_UP, this.onKeyUp, this);
          if (enable) input.on(Input.EventType.KEY_UP, this.onKeyUp, this); // systemEvent.off(SystemEvent.EventType.KEY_UP, this.onKeyUp, this);
          // if (enable) systemEvent.on(SystemEvent.EventType.KEY_UP, this.onKeyUp, this);
        };

        _proto.onKeyUp = function onKeyUp(event) {
          if (event.keyCode === KeyCode.SPACE && this.guiMgr.isSpinVisible() && this.guiMgr.isDisplayFullScreen()) {
            if (this.node.active && this.btnSpin && this.btnSpin.interactable && !this.btnStopAuto.node.active) {
              this.node.emit('SPACE_PRESSED');
              this.hideAutoSpinPanel(0);
              this.onMouseLeave();
            } else if (this.btnFastStop && this.btnFastStop.node.active) {
              if (this.btnFastStop.getComponent(Button).interactable) this.node.emit('FAST_TO_RESULT_BY_SPACE');
            }
          }
        };

        _proto.start = function start() {
          this.isAutoSpin = false;
        };

        _proto.bindAutoSpinEvent = function bindAutoSpinEvent() {
          if (this.btnSpin) {
            this.btnSpin.node.on(Node.EventType.TOUCH_START, this.onTouchStart.bind(this));
            this.btnSpin.node.on(Node.EventType.TOUCH_END, this.onTouchCancel.bind(this)); // this.btnSpin.node.on(Node.EventType.TOUCH_MOVE, this.onTouchMove.bind(this));

            this.btnSpin.node.on(Node.EventType.TOUCH_CANCEL, this.onTouchCancel.bind(this));
            this.btnSpin.node.on(Node.EventType.MOUSE_LEAVE, this.onMouseLeave.bind(this));
            this.btnSpin.node.on(Node.EventType.MOUSE_ENTER, this.onHover.bind(this));
          }

          if (this.promoBtnSpin) {
            this.promoBtnSpin.node.on(Node.EventType.MOUSE_ENTER, this.onHover.bind(this));
            this.promoBtnSpin.node.on(Node.EventType.MOUSE_LEAVE, this.onMouseLeave.bind(this));
          }

          this.isOnHover = false;
        };

        _proto.unbindAutoSpinEvent = function unbindAutoSpinEvent() {
          if (this.btnSpin) {
            this.btnSpin.node.off(Node.EventType.TOUCH_START);
            this.btnSpin.node.off(Node.EventType.TOUCH_END);
            this.btnSpin.node.off(Node.EventType.TOUCH_CANCEL); // this.btnSpin.node.off(Node.EventType.TOUCH_MOVE);

            this.btnSpin.node.off(Node.EventType.MOUSE_LEAVE);
            this.btnSpin.node.off(Node.EventType.MOUSE_ENTER);
          }
        };

        _proto.onHover = function onHover() {
          if (this.spineHover && this.btnSpin.interactable && !this.btnStopAuto.node.active) {
            this.spineHover.node.active = true;
            this.spineHover.setAnimation(0, this.animSpinHover, true);
          }
        }
        /**
         * @Spin
         * */
        ;

        _proto.showSpin = function showSpin() {
          setOpacity(this.btnSpin.node, 255);

          if (this.textSpin && this.txtHoldToAuto) {
            this.textSpin.getComponent(Sprite).spriteFrame = this.txtHoldToAuto;
          }
        };

        _proto.hideSpin = function hideSpin() {
          this.cancelAutoSpinPanel();
          this.setOpacity(this.btnSpin.node, 0);
        };

        _proto.enableSpin = function enableSpin() {
          this.btnSpin.interactable = true;
          this.btnSpin.node.emit("BUTTON_SPIN_SHOW");

          if (this.spineBtnSpin && this.spineBtnSpin.findAnimation(this.animSpinIdle)) {
            this.spineBtnSpin.setAnimation(0, this.animSpinIdle, true);
          } else {
            log("[SlotButton] Not Found Animation: " + this.animSpinIdle);
          }

          this.isDebug && warn("run enableSpin");
        };

        _proto.disableSpin = function disableSpin() {
          this.btnSpin.interactable = false;
          this.btnSpin.node.emit('BUTTON_SPIN_HIDE');
          this.isDebug && warn("run disableSpin");
        };

        _proto.spinClick = function spinClick() {
          if (this.autoSpinPanel && this.autoSpinPanel.active) return;
          this.eventManager.emit(EventNames.SPIN_CLICK);
          this.node.emit('SPIN_CLICK');
          warn("SlotButton: spinClick");
        }
        /**
         * @autoSpin
         */
        ;

        _proto.onTouchStart = function onTouchStart() {
          var _this2 = this;

          this.isAutoSpin = false;

          this.showFunc = function () {
            if (_this2.canDoAutoSpin()) {
              if (_this2.autoSpinPanel) {
                _this2.showAutoSpinPanel();
              } else {
                _this2.runAutoSpin(null, 99999);

                _this2.dataStore.isAutoSpinNormal = true;
              }
            }

            _this2.showFunc = null;
          };

          this.scheduleOnce(this.showFunc, 0.7);
          this.node.emit('ON_TOUCH_START');
          this.isTouched = true;
          this.isDebug && warn("onTouchStart");
        };

        _proto.runAutoSpin = function runAutoSpin(evt, spinTimes) {
          if (spinTimes === void 0) {
            spinTimes = 99999;
          }

          this.isAutoSpin = true;
          this.eventManager.emit(EventNames.AUTO_SPIN_START, spinTimes);
          this.node.emit('MULTI_SPIN_CLICK', spinTimes);
          this.hideAutoSpinPanel();

          if (this.spineBtnSpin && this.spineBtnSpin.findAnimation(this.animPressed)) {
            this.spineBtnSpin.setAnimation(0, this.animPressed, false);
          } else {
            log("[SlotButton] Not Found Animation: " + this.animPressed);
          }

          if (this.spineHover) {
            this.spineHover.node.active = false;
          }

          this.guiMgr.enableSwitchWallet(false);
          this.isDebug && warn("SlotButton: _runAutoSpin");
        };

        _proto.onTouchCancel = function onTouchCancel() {
          this.cancelAutoSpinPanel();
          if (this.isAutoSpin) return;
          this.node.emit('ON_TOUCH_CANCEL');
          this.isTouched = false;
        };

        _proto.showAutoSpinPanel = function showAutoSpinPanel() {
          var _this3 = this;

          this.autoSpinPanel.active = true;
          this.enableAutoSpinButtons(true);
          this.autoSpinPanel.scale = new Vec3(0, 0, 0);
          tween(this.autoSpinPanel).to(0.3, {
            scale: new Vec3(1, 1, 1)
          }).call(function () {
            _this3.guiMgr.onIngameEvent(TutorialTriggerType.AutoSpinPanelShow, "AUTO_SPIN_PANEL_SHOW");

            if (_this3.autoSpinOverlay) _this3.autoSpinOverlay.active = true;
          }).start();
        };

        _proto.hideAutoSpinPanel = function hideAutoSpinPanel(time) {
          var _this4 = this;

          if (time === void 0) {
            time = 0.3;
          }

          if (!this.autoSpinPanel || !this.autoSpinPanel.active) return;
          this.enableAutoSpinButtons(false);
          time = time > 0 ? time : 0.3;
          tween(this.autoSpinPanel).to(time, {
            scale: new Vec3(0, 0, 0)
          }).call(function () {
            _this4.autoSpinPanel.active = false;
            if (_this4.autoSpinOverlay) _this4.autoSpinOverlay.active = false;
          }).start();
        };

        _proto.enableAutoSpinButtons = function enableAutoSpinButtons(isEnable) {
          if (isEnable === void 0) {
            isEnable = false;
          }

          if (this.autoSpinButtons.length) {
            this.autoSpinButtons.forEach(function (item) {
              item.interactable = isEnable;
            });
          }
        };

        _proto.cancelAutoSpinPanel = function cancelAutoSpinPanel() {
          if (this.isAutoSpin) return;

          if (this.showFunc) {
            this.unschedule(this.showFunc);
          }

          if (this.spineHover) {
            this.spineHover.node.active = false;
          }
        };

        _proto.onMouseLeave = function onMouseLeave() {
          if (this.isAutoSpin === false) {
            this.cancelAutoSpinPanel();
          }

          if (this.spineHover && this.spineHover.node.active === true) {
            this.spineHover.node.active = false;
          }
        };

        _proto.onTouchMove = function onTouchMove(event) {// let touch = event.touch;
          //todo check function to get touch out
          // let hit = this.btnSpin.node._hitTest(touch.getLocation());
          // if (hit) {
          //     if (!this.isTouched) {
          //         this.node.emit('ON_TOUCH_START');
          //         this.isTouched = true;
          //     }
          // } else {
          //     this.cancelAutoSpinPanel();
          //     if (this.isAutoSpin) return;
          //     this.node.emit('ON_TOUCH_CANCEL');
          //     this.isTouched = false;
          // }
        };

        _proto.stopAutoSpinClick = function stopAutoSpinClick() {
          // if (this.node.soundPlayer && !this.removeSoundClick) {
          //     this.node.soundPlayer.playSFXClick();
          // }
          this.dataStore.isAutoSpinNormal = false;
          this.node.emit('STOP_AUTO_SPIN_CLICK');
          this.isDebug && log("SlotButton: stopAutoSpinClick");
        };

        _proto.showStopAutoSpin = function showStopAutoSpin() {
          if (this.btnStopAuto) {
            this.btnStopAuto.node.active = true;
            this.btnStopAuto.interactable = true;
          }

          if (this.textSpin && this.txtPressToStop) {
            this.textSpin.getComponent(Sprite).spriteFrame = this.txtPressToStop;
          }
        };

        _proto.hideStopAutoSpin = function hideStopAutoSpin(isResume) {
          if (this.btnStopAuto) {
            this.btnStopAuto.node.active = false;
            this.btnStopAuto.interactable = false;
          }

          if (this.btnFastStop && !this.btnFastStop.node.active && this.isAutoSpin && !isResume) {
            this.btnFastStop.node.active = true;
          }
        };

        _proto.showTextAutoSpin = function showTextAutoSpin() {
          if (this.textSpin) {
            this.textSpin.active = true;
          }
        };

        _proto.hideTextAutoSpin = function hideTextAutoSpin() {
          if (this.textSpin) {
            this.textSpin.active = false;
          }
        }
        /**
         * @FastToResult
         */
        ;

        _proto.fastToResultClick = function fastToResultClick() {
          // if (this.node.soundPlayer && !this.removeSoundClick) {
          //     this.node.soundPlayer.playSFXClick();
          // }
          log('fastToResultClick');
          this.node.emit('FAST_TO_RESULT_CLICK');
          this.isDebug && warn("SlotButton: fastToResultClick");
        };

        _proto.showFastToResult = function showFastToResult() {
          this.btnFastStop.node.active = true;
        };

        _proto.hideFastToResult = function hideFastToResult() {
          this.btnFastStop.node.active = false;
        };

        _proto.enableFastToResult = function enableFastToResult() {
          this.btnFastStop.interactable = true;

          if (this.textSpin && this.txtPressToStop) {
            this.textSpin.getComponent(Sprite).spriteFrame = this.txtPressToStop;
          }

          if (this.spineBtnSpin && this.spineBtnSpin.findAnimation(this.animFastToResult)) {
            this.spineBtnSpin.setAnimation(0, this.animFastToResult, false);
          } else {
            log("[SlotButton] Not Found Animation: " + this.animFastToResult);
          }
        };

        _proto.disableFastToResult = function disableFastToResult() {
          this.btnFastStop.interactable = false;

          if (this.spineBtnSpin && this.spineBtnSpin.findAnimation(this.animDisable)) {
            this.spineBtnSpin.setAnimation(0, this.animDisable, false);
          } else {
            log("[SlotButton] Not Found Animation: " + this.animDisable);
          }
        };

        _proto.showSpinButtons = function showSpinButtons() {
          this.setOpacity(this.btnSpin.node, 255);
          this.btnStopAuto.node.active = false;
          this.btnFastStop.node.active = false;
        };

        _proto.hideSpinButtons = function hideSpinButtons() {
          this.setOpacity(this.btnSpin.node, 0);
          this.btnStopAuto.node.active = false;
          this.btnFastStop.node.active = false;
        };

        _proto.pauseAutoSpin = function pauseAutoSpin(isOn) {
          if (isOn === void 0) {
            isOn = true;
          }

          this.canAutoSpin = !isOn;
        };

        _proto.canDoAutoSpin = function canDoAutoSpin() {
          if (this.node) {
            this.node.emit('CHECK_AUTO_SPIN_FLAG', 'pauseAutoSpin');
          }

          return this.canAutoSpin && this.btnSpin.interactable;
        }
        /**
         * @promotions
         */
        ;

        _proto.bindEventPromotion = function bindEventPromotion() {
          if (this.promoBtnSpin) {
            this.node.on("PROMO_SPIN_SHOW", this.showPromoSpin, this);
            this.node.on("PROMO_SPIN_HIDE", this.hidePromoSpin, this);
          }

          if (this.promoBtnFast) {
            this.node.on("PROMO_STOP_SPIN_SHOW", this.showPromoSpinStopBtn, this);
            this.node.on("PROMO_STOP_SPIN_HIDE", this.hidePromoSpinStopBtn, this);
            this.node.on("DISABLE_PROMO_STOP_SPIN", this.disablePromoSpinStopBtn, this);
            this.node.on("ENABLE_PROMO_STOP_SPIN", this.enablePromoSpinStopBtn, this);
          }
        };

        _proto.showAllPromoUI = function showAllPromoUI() {
          this.showPromoSpin();
          this.hideTextAutoSpin();
        };

        _proto.hideAllPromoUI = function hideAllPromoUI() {
          this.hidePromoSpin();
          this.showTextAutoSpin();
        };

        _proto.showPromoSpin = function showPromoSpin() {
          if (this.promoBtnSpin) this.promoBtnSpin.node.active = true;
        };

        _proto.hidePromoSpin = function hidePromoSpin() {
          if (this.promoBtnSpin) this.promoBtnSpin.node.active = false;
        };

        _proto.showPromoSpinStopBtn = function showPromoSpinStopBtn() {
          if (this.promoBtnFast) {
            this.promoBtnFast.node.active = true;
          }
        };

        _proto.hidePromoSpinStopBtn = function hidePromoSpinStopBtn() {
          if (this.promoBtnFast) {
            this.promoBtnFast.node.active = false;
          }
        };

        _proto.disablePromoSpinStopBtn = function disablePromoSpinStopBtn() {
          if (this.promoBtnFast) {
            this.promoBtnFast.interactable = false;
          }
        };

        _proto.enablePromoSpinStopBtn = function enablePromoSpinStopBtn() {
          if (this.promoBtnFast) {
            this.promoBtnFast.interactable = true;
          }
        };

        _proto.onDisable = function onDisable() {
          if (this.autoSpinOverlay) {
            this.autoSpinOverlay.off(Node.EventType.TOUCH_END, this.hideAutoSpinPanel, this);
          }

          this.eventManager.off(EventNames.SWITCH_WALLET, this.onSwitchWallet, this);
        };

        _proto.onDestroy = function onDestroy() {
          if (this.showFunc) {
            this.unschedule(this.showFunc);
            this.showFunc = null;
          }

          input.off(Input.EventType.KEY_UP, this.onKeyUp, this); // systemEvent.off(SystemEvent.EventType.KEY_UP, this.onKeyUp, this);
        };

        _proto.onSwitchWallet = function onSwitchWallet(walletType) {
          var isPromoteWallet = walletType === WalletType.PROMOTE;

          if (this.isSetSkin) {
            if (this.spineBtnSpin) {
              this.spineBtnSpin.setSkin(isPromoteWallet ? this.skinPromoteSpin : this.skinNormalSpin);
            }

            if (this.spineHover) {
              this.spineHover.setSkin(isPromoteWallet ? this.skinPromoteSpin : this.skinNormalSpin);
            }
          } else {
            this.animSpinIdle = isPromoteWallet ? this.animPromoSpin : this.animNormal;
            this.animSpinHover = isPromoteWallet ? this.animPromoHover : this.animHover;
          }

          if (this.spineBtnSpin && this.spineBtnSpin.findAnimation(this.animSpinIdle)) {
            this.spineBtnSpin.setAnimation(0, this.animSpinIdle, true);
          } else {
            log("[SlotButton] Not Found Animation: " + this.animSpinIdle);
          }
        };

        return SlotButton;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "currentGameMode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return SlotGameMode.NormalGame;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "deCoupling", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "autoSpinPanel", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "autoSpinOverlay", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "btnSpin", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "btnFastStop", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "btnStopAuto", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "promoBtnSpin", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "promoBtnFast", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "textSpin", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "txtHoldToAuto", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "txtPressToStop", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "spineBtnSpin", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "spineHover", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "animNormal", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "anim_IdleGreen";
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "animHover", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "anim_Hover";
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "animPressed", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "anim_IdleGreen";
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "animDisable", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "anim_Disable";
        }
      }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "animFastToResult", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "anim_IdleRed(NoAnim)";
        }
      }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "animPromoSpin", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "anim_IdleYellow";
        }
      }), _descriptor21 = _applyDecoratedDescriptor(_class2.prototype, "animPromoHover", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "anim_IdleYellow";
        }
      }), _descriptor22 = _applyDecoratedDescriptor(_class2.prototype, "isSetSkin", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor23 = _applyDecoratedDescriptor(_class2.prototype, "skinNormalSpin", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "Yellow";
        }
      }), _descriptor24 = _applyDecoratedDescriptor(_class2.prototype, "skinPromoteSpin", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "Green";
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotDialog.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SlotUIScene.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Label, SlotUIScene;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
    }, function (module) {
      SlotUIScene = module.SlotUIScene;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "558f9v7MIFNUKDfEEbJNNu8", "SlotDialog", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotDialog = exports('SlotDialog', (_dec = ccclass('SlotDialog'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Label
      }), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: Node
      }), _dec6 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_SlotUIScene) {
        _inheritsLoose(SlotDialog, _SlotUIScene);

        function SlotDialog() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SlotUIScene.call.apply(_SlotUIScene, [this].concat(args)) || this;
          _this.actionOK = void 0;
          _this.actionCancel = void 0;

          _initializerDefineProperty(_this, "gradient", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "message", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnOK", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnCancel", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnHolder", _descriptor5, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SlotDialog.prototype;

        _proto.show = function show() {
          if (!this.node.active) _SlotUIScene.prototype.show.call(this);
          var _this$content = this.content,
              strText = _this$content.strText,
              _this$content$actionO = _this$content.actionOK,
              actionOK = _this$content$actionO === void 0 ? null : _this$content$actionO,
              _this$content$actionC = _this$content.actionCancel,
              actionCancel = _this$content$actionC === void 0 ? null : _this$content$actionC;
          this.showMessage(strText, actionOK, actionCancel);
        };

        _proto.showMessage = function showMessage(strText, actionOK, actionCancel) {
          if (this.message.string.replace(/\n|\r/g, "") !== strText.replace(/\n|\r/g, "")) {
            this.message.string = strText;
          }

          this.actionOK = actionOK;
          this.actionCancel = actionCancel;
          this.btnOK.active = actionOK != null;
          this.btnCancel.active = actionCancel != null;

          if (this.btnHolder) {
            this.btnHolder.active = this.btnOK.active || this.btnCancel.active;
          }
        };

        _proto.isDisplay = function isDisplay() {
          return this.node.active;
        };

        _proto.onBtnOK = function onBtnOK() {
          this.playSoundClick();
          this.actionOK();
          this.exit();
        };

        _proto.onBtnCancel = function onBtnCancel() {
          this.playSoundClick();
          this.actionCancel();
          this.exit();
        };

        return SlotDialog;
      }(SlotUIScene), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "gradient", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "message", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "btnOK", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "btnCancel", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "btnHolder", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotDialogAction.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SlotSoundPlayer.ts', './SlotUIScene.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, SpriteFrame, Sprite, Label, SlotSoundPlayer, SlotUIScene;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      SpriteFrame = module.SpriteFrame;
      Sprite = module.Sprite;
      Label = module.Label;
    }, function (module) {
      SlotSoundPlayer = module.SlotSoundPlayer;
    }, function (module) {
      SlotUIScene = module.SlotUIScene;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;

      cclegacy._RF.push({}, "415d0/I481C5ZP0b3TZmfCc", "SlotDialogAction", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotDialogAction = exports('SlotDialogAction', (_dec = ccclass('SlotDialogAction'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: SpriteFrame
      }), _dec4 = property({
        type: Sprite
      }), _dec5 = property({
        type: Node
      }), _dec6 = property({
        type: Node
      }), _dec7 = property({
        type: Node
      }), _dec8 = property({
        type: Label
      }), _dec9 = property({
        type: SlotSoundPlayer
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_SlotUIScene) {
        _inheritsLoose(SlotDialogAction, _SlotUIScene);

        function SlotDialogAction() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SlotUIScene.call.apply(_SlotUIScene, [this].concat(args)) || this;
          _this.actionOK = void 0;
          _this.actionCancel = void 0;
          _this.actionClose = void 0;

          _initializerDefineProperty(_this, "gradient", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "titleSpriteFrames", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "title", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buttonOK", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buttonCancel", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buttonClose", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "message", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "slotSoundPlayer", _descriptor8, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SlotDialogAction.prototype;

        _proto.show = function show() {
          if (!this.node.active) _SlotUIScene.prototype.show.call(this);
          var _this$content = this.content,
              strText = _this$content.strText,
              dialogType = _this$content.dialogType,
              _this$content$actionO = _this$content.actionOK,
              actionOK = _this$content$actionO === void 0 ? null : _this$content$actionO,
              _this$content$actionC = _this$content.actionCancel,
              actionCancel = _this$content$actionC === void 0 ? null : _this$content$actionC,
              _this$content$actionC2 = _this$content.actionClose,
              actionClose = _this$content$actionC2 === void 0 ? null : _this$content$actionC2;
          this.showMessage(strText, dialogType, actionOK, actionCancel, actionClose);
        };

        _proto.showMessage = function showMessage(strText, dialogType, actionOK, actionCancel, actionClose) {
          if (dialogType === void 0) {
            dialogType = 0;
          }

          if (this.message.string.replace(/\n|\r/g, "") !== strText.replace(/\n|\r/g, "")) {
            this.message.string = strText;
          }

          this.title.spriteFrame = this.titleSpriteFrames[dialogType];
          this.actionOK = actionOK;
          this.actionCancel = actionCancel;
          this.actionClose = actionClose;

          if (!actionCancel) {
            this.buttonCancel.active = false;
          } else {
            this.buttonCancel.active = true;
          }

          if (!actionOK) {
            this.buttonOK.active = false;
          } else {
            this.buttonOK.active = true;
          }

          if (!actionClose) {
            this.buttonClose.active = false;
          } else {
            this.buttonClose.active = true;
          }
        };

        _proto.isDisplay = function isDisplay() {
          return this.node.active;
        };

        _proto.onActionOK = function onActionOK() {
          this.slotSoundPlayer.playSfx('CLICK');
          this.actionOK();
          this.hideScene();
        };

        _proto.onActionClose = function onActionClose() {
          this.slotSoundPlayer.playSfx('CLICK');
          this.actionClose();
          this.hideScene();
        };

        _proto.onActionCancel = function onActionCancel() {
          this.slotSoundPlayer.playSfx('CLICK');
          this.actionCancel();
          this.hideScene();
        };

        _proto.hidePopup = function hidePopup() {
          this.slotSoundPlayer.playSfx('CLICK');
          this.hideScene();
        };

        return SlotDialogAction;
      }(SlotUIScene), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "gradient", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "titleSpriteFrames", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "title", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "buttonOK", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "buttonCancel", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "buttonClose", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "message", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "slotSoundPlayer", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotDirector.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BaseDirector.ts', './TurnBaseFSM.ts', './CustomEnum.ts', './SlotText.ts', './loadConfigAsync.ts', './EventNames.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Node, log, BaseDirector, StateMachine, SlotGameMode, TutorialTriggerType, WalletType, SlotText, loadConfigAsync, EventNames;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      log = module.log;
    }, function (module) {
      BaseDirector = module.BaseDirector;
    }, function (module) {
      StateMachine = module.default;
    }, function (module) {
      SlotGameMode = module.SlotGameMode;
      TutorialTriggerType = module.TutorialTriggerType;
      WalletType = module.WalletType;
    }, function (module) {
      SlotText = module.SlotText;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      EventNames = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "7b11catKKVPtKO7R4dDjc3O", "SlotDirector", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotDirector = exports('SlotDirector', (_dec = ccclass('SlotDirector'), _dec2 = property({
        type: SlotGameMode
      }), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_BaseDirector) {
        _inheritsLoose(SlotDirector, _BaseDirector);

        function SlotDirector() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseDirector.call.apply(_BaseDirector, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "currentGameMode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "slotButton", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "table", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "spinTimes", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "isAlwaysAutoSpin", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "questDummy", _descriptor6, _assertThisInitialized(_this));

          _this._autoSpin = false;
          _this._beginToExit = false;
          _this.isRunPromotion = void 0;
          _this.fsm = void 0;
          _this._callBackAutoSpin = null;
          _this.callbackStateUpdate = null;
          _this.hasTable = false;
          _this.hasPayline = false;
          _this._delayTimeCallback = null;
          _this._canFastUpdateWinAmount = false;
          _this._winValue = 0;
          _this._updateInterval = null;
          _this.isSpinning = false;
          return _this;
        }

        var _proto = SlotDirector.prototype;

        _proto.onExtendedLoad = function onExtendedLoad() {
          this.node.on("GAME_UPDATE", this.stateUpdate, this);
          this.node.on("GAME_RESUME", this.stateResume, this);
          this.node.on("GAME_ENTER", this.ready, this);
          this.node.on("GAME_INIT", this.init, this);
          this.node.on("GAME_SHOW", this.showGame, this);
          this.node.on("GAME_HIDE", this.hideGame, this);
          this.node.on("SWITCH_MODE", this.switchMode, this);
          this.node.on("ENABLE_BUTTON_INTERACTION", this.enableButtonInteraction, this);
          this.node.on("SPIN_DISABLE", this.disableSpin, this);
          this.node.on("SPIN_ENABLE", this.enableSpin, this);
          this.node.on("TRIGGER_FREE_SPIN_OPTION", this.freeSpinOptionTrigger, this);
          this.node.on("STOP_WITH_RANDOM_MATRIX", this.forceStopSpining, this);
          this.node.on("SETUP_PROMO_SPIN", this.setUpPromotionSpin, this);
          this.node.on('UPDATE_SPINTIMES', this.updateSpinTimes, this);

          if (this.eventManager) {
            this.eventManager.on('SET_UP_SLOT_BUTTON', this.setUpSlotButton, this);
            this.eventManager.on('SET_UP_SPIN_TIMES', this.setUpSpinTimes, this);
          }

          this._resetStoreScript();

          this.mainDirector.gameModes[this.currentGameMode] = this.node;
          this._updateInterval = setInterval(this.fixedUpdate.bind(this), 1000);
        };

        _proto.init = function init() {
          this.fsm = new StateMachine();
          this.writer = this.node['writer'];
          this.fsm.GAMEMODE = this.node.name;
          this.table.emit("INIT");
          this.runAction('GameStart');
          this.extendInit();
          this._autoSpin = false;
          this._beginToExit = false;
        };

        _proto.switchMode = function switchMode() {
          this.clearAsyncScript();
          this.runAction('SwitchMode');
        };

        _proto.extendInit = function extendInit() {//Add your overwrite code here!
        };

        _proto.setUpSlotButton = function setUpSlotButton(data) {
          if (data) {
            var slotGameType = data.slotGameType,
                slotButton = data.slotButton;

            if (slotGameType === this.currentGameMode) {
              this.slotButton = slotButton;

              if (slotGameType !== SlotGameMode.NormalGame) {
                this.slotButton.active = false;
              }
            }
          }
        };

        _proto.setUpSpinTimes = function setUpSpinTimes(data) {
          if (data) {
            var slotGameType = data.slotGameType,
                spinTimes = data.spinTimes;

            if (slotGameType === this.currentGameMode) {
              this.spinTimes = spinTimes;

              if (slotGameType !== SlotGameMode.NormalGame) {
                this.spinTimes.active = false;
              }
            }
          }
        };

        _proto.enableButtonInteraction = function enableButtonInteraction() {
          if (this.slotButton) {
            this.slotButton.on("SPIN_CLICK", this.spinClick, this);
            this.slotButton.on("SPACE_PRESSED", this.onSpacePressed, this);
            this.slotButton.on("FAST_TO_RESULT_CLICK", this.fastToResultClick, this);
            this.slotButton.on("FAST_TO_RESULT_BY_SPACE", this.fastToResultBySpaceBar, this);
            this.slotButton.on("MULTI_SPIN_CLICK", this.multiSpinClick, this);
            this.slotButton.on("STOP_AUTO_SPIN_CLICK", this.stopAutoSpinClick, this);
            this.slotButton.on("ON_TOUCH_START", this.onTouchStartSpinButton, this);
            this.slotButton.on("ON_TOUCH_CANCEL", this.onTouchCancelSpinButton, this);
            this.slotButton.on("CHECK_AUTO_SPIN_FLAG", this.checkAutoSpinFlag, this);
          }
        };

        _proto.runCallbackStateUpdate = function runCallbackStateUpdate() {
          this.callbackStateUpdate && this.callbackStateUpdate();
          this.callbackStateUpdate = null;
        };

        _proto.stateUpdate = function stateUpdate(callback) {
          this.callbackStateUpdate = callback;
          this.runAction('ResultReceive');
        };

        _proto.stateResume = function stateResume() {
          this.fsm.gameResume();
          this.runAction('Resume');
        };

        _proto.ready = function ready(matrix) {
          var isFinished = this.dataStore.playSession.isFinished;

          if (matrix) {
            this.table.emit("CHANGE_MATRIX", {
              matrix: matrix
            });
          }

          if (this.slotButton && isFinished !== false) {
            this.slotButton.active = true;
            this.slotButton.emit('SPIN_SHOW');
            this.slotButton.emit('SPIN_ENABLE');
            this.slotButton.emit('STOP_AUTO_SPIN_HIDE');
          }

          if (this.isAlwaysAutoSpin) {
            var _this$dataStore$playS = this.dataStore.playSession,
                bonusGameRemain = _this$dataStore$playS.bonusGameRemain,
                freeGameRemain = _this$dataStore$playS.freeGameRemain,
                freeGame = _this$dataStore$playS.freeGame;

            if (bonusGameRemain > 0) {
              this.stateResume();
            } else {
              var spinTimes = freeGameRemain > 0 ? freeGameRemain : freeGame;

              if (spinTimes > 0) {
                if (this.spinTimes) {
                  this.spinTimes.active = this.isAlwaysAutoSpin;
                  this.spinTimes.emit("UPDATE_SPINTIMES", spinTimes);
                }

                this.runAction('SpinByTimes', spinTimes);
              }
            }
          } else {
            if (this.slotButton) this.slotButton.emit('FAST_TO_RESULT_HIDE');
          }

          var triggerType = TutorialTriggerType.ResumeNormalGame;

          if (this.currentGameMode === SlotGameMode.FreeGame) {
            triggerType = TutorialTriggerType.EnterFreeGame;
          } else if (this.currentGameMode === SlotGameMode.BonusGame) {
            triggerType = TutorialTriggerType.EnterBonusGame;
          } else if (this.currentGameMode === SlotGameMode.TopUpGame) {
            triggerType = TutorialTriggerType.EnterTopupGame;
          }

          this.guiMgr.setQuestPosition(this.questDummy);
          this.soundPlayer && this.soundPlayer.playMainBGM();
          this.guiMgr.onIngameEvent(triggerType, "ENTER_GAME_MODE");
        };

        _proto.disableSpin = function disableSpin() {
          if (this.slotButton) this.slotButton.emit("SPIN_DISABLE");
        };

        _proto.enableSpin = function enableSpin() {
          if (this.slotButton) this.slotButton.emit("SPIN_ENABLE");
        };

        _proto.freeSpinOptionTrigger = function freeSpinOptionTrigger(optionIndex) {
          this.mainDirector.gameStateManager.triggerFreeSpinOption(optionIndex);
          this.fsm.gameRestart();
          this.hasTable = false;
          this.fsm.actionTrigger();
        };

        _proto.skipAllEffects = function skipAllEffects() {
          this.guiMgr.skipAllUIScenes();
          this.guiMgr.stopAnimWinQuest();
        };

        _proto.spinClick = function spinClick() {
          if (!this.node || !this.fsm || !this.fsm.can('actionTrigger')) return;
          this.skipAllEffects();
          this.resetAsyncScript();
          this.eventManager.emit(EventNames.SPIN_CLICK_ACTION);
          this.runAction('SpinClick');
        };

        _proto.onSpacePressed = function onSpacePressed() {
          if (!this.guiMgr.isDisplayDialog() && !this.guiMgr.isTutorialShowing() && !this.isAlwaysAutoSpin) this.spinClick();
        };

        _proto.fastToResultBySpaceBar = function fastToResultBySpaceBar() {
          if (!this.guiMgr.isDisplayDialog() && !this.guiMgr.isTutorialShowing()) this.fastToResultClick();
        };

        _proto.fastToResultClick = function fastToResultClick() {
          if (!this.node.active || this.getOpacity(this.node) === 0) return;
          this.eventManager.emit(EventNames.FAST_TO_RESULT_CLICK);
          this.setGameSpeedMode("INSTANTLY");
          this.table.emit("FAST_TO_RESULT");
          this.resetAsyncScript();
        };

        _proto.multiSpinClick = function multiSpinClick(spinTimes) {
          if (spinTimes === void 0) {
            spinTimes = Number.MAX_SAFE_INTEGER;
          }

          this.mainDirector.showTrialButtons(false);
          this.guiMgr.onIngameEvent(TutorialTriggerType.AutoSpinClicked, "AUTO_SPIN_CLICK");
          this.runAction('SpinByTimes', spinTimes);
        };

        _proto.checkAutoSpinFlag = function checkAutoSpinFlag(flag) {
          var isPauseAutoSpin = this._checkPauseTutorial(flag);

          this.slotButton.emit('PAUSE_AUTO_SPIN', isPauseAutoSpin);
        };

        _proto.stopAutoSpinClick = function stopAutoSpinClick() {
          if (this.slotButton) this.slotButton.emit('STOP_AUTO_SPIN_HIDE');
          this.runAction('DisableAutoSpin');
          this._autoSpin = false;
          this.dataStore.isAutoSpin = false;
          this.spinTimes && this.spinTimes.emit("RESET_SPINTIMES");

          if (this._callBackAutoSpin) {
            if (this.currentGameMode === SlotGameMode.NormalGame) {
              this.guiMgr.enableSwitchWallet(true);
            }

            this.unschedule(this._callBackAutoSpin);
            var isFinished = this.dataStore.playSession.isFinished;

            if (isFinished === undefined || isFinished === true) {
              this._resetSpinButton();

              this._showTrialButtons(null, true);

              this.guiMgr.enableBet();
            }
          }
        };

        _proto.onTouchStartSpinButton = function onTouchStartSpinButton() {
          this._showTrialButtons(null, false);

          this.guiMgr.disableBet();
        };

        _proto.onTouchCancelSpinButton = function onTouchCancelSpinButton() {
          if (this.dataStore && this.dataStore.playSession.isFinished !== false) {
            this._showTrialButtons(null, true);

            this.guiMgr.enableBet();
          }
        };

        _proto.showGame = function showGame() {
          if (this.slotButton) this.slotButton.active = true;
          if (this.spinTimes) this.spinTimes.active = this.isAlwaysAutoSpin;
          if (this.table) this.table.emit("GAME_SHOW");
        };

        _proto.hideGame = function hideGame() {
          if (this.slotButton) this.slotButton.active = false;
          if (this.spinTimes) this.spinTimes.active = false;
          if (this.table) this.table.emit("GAME_HIDE");
        } //ALL COMMANDS RUN BELOWS
        ;

        _proto._checkPauseTutorial = function _checkPauseTutorial(flag) {
          return this.guiMgr.checkPauseTutorial(flag);
        };

        _proto._resetSpinButton = function _resetSpinButton(script) {
          if (script === void 0) {
            script = [];
          }

          if (this.slotButton) {
            this.slotButton.emit('SPIN_SHOW');
            this.slotButton.emit('SPIN_ENABLE');
            this.slotButton.emit('STOP_AUTO_SPIN_HIDE');
            this.slotButton.emit('FAST_TO_RESULT_HIDE');
          }

          var promotion = this.dataStore.promotion;

          if (!promotion) {
            if (this.spinTimes) this.spinTimes.emit("RESET_SPINTIMES");
          }

          this._autoSpin = false;
          this.dataStore.isAutoSpin = false;
          this.executeNextScript(script);
        };

        _proto._stopAutoSpin = function _stopAutoSpin(script) {
          if (script === void 0) {
            script = [];
          }

          this.stopAutoSpinClick();
          this.executeNextScript(script);
        };

        _proto._showTrialButtons = function _showTrialButtons(script, isOn) {
          if (script === void 0) {
            script = [];
          }

          if (isOn === void 0) {
            isOn = false;
          }

          var isAutoSpin = this.dataStore.isAutoSpin;
          var isNormalGame = this.dataStore.currentGameMode === SlotGameMode.NormalGame;
          var isTrialMode = this.dataStore.isTrialMode;

          if (isTrialMode && !isNormalGame && !this.forceToExitMode) {
            this.mainDirector.showTrialButtons(isOn);
          } else {
            this.mainDirector.showTrialButtons(isOn && !isAutoSpin);
          }

          this.executeNextScript(script);
        };

        _proto.forceStopSpining = function forceStopSpining() {
          var _this2 = this;

          this.stopAutoSpinClick();

          if (this._callBackAutoSpin) {
            this.unschedule(this._callBackAutoSpin);
          }

          this.table.emit('STOP_REEL_WITH_RANDOM_MATRIX', function () {
            _this2.isSpinning = false;
          });
          this.fsm.resultReceive();
          this.fastToResultClick();
          this.runAction('GameFinish');

          this._gameRestart();
        };

        _proto._setTurboMode = function _setTurboMode() {
          if (this.dataStore.modeTurbo) {
            this._setMode('TURBO');
          } else {
            this._setMode('FAST');
          }
        };

        _proto._setMode = function _setMode(mode) {
          this.table.emit("SET_MODE", mode);
        };

        _proto._spinClick = function _spinClick(script) {
          if (script === void 0) {
            script = [];
          }

          if (!this.fsm.can('actionTrigger')) return;
          this.fsm.actionTrigger();

          this._setTurboMode();

          this.resetGameSpeed();

          this._showTrialButtons(null, false);

          if (this.slotButton) {
            this.slotButton.emit('SPIN_DISABLE');
            this.slotButton.emit('SPIN_HIDE');
            this.slotButton.emit('FAST_TO_RESULT_DISABLE');
            this.slotButton.emit('DISABLE_PROMOTION_STOP_SPIN');
            this.slotButton.emit('FAST_TO_RESULT_SHOW');
          }

          if (!this.hasTable) {
            this.executeNextScript(script);
            return;
          }

          this.table.emit("START_SPINNING");
          this.isSpinning = true;
          this.guiMgr.onIngameEvent(TutorialTriggerType.SpinClicked, "SPIN_CLICK");
          this.executeNextScript(script);
        };

        _proto._sendSpinToNetwork = function _sendSpinToNetwork(script, _ref) {
          var currentBetData = _ref.currentBetData;
          var betLines = this.config.HAS_SELECT_BET_LINE ? this.dataStore.betData.betLines : void 0;
          this.mainDirector.sendSpinToNetwork(this.currentGameMode, currentBetData, betLines);
          this.executeNextScript(script);
        };

        _proto._newGameMode = function _newGameMode(script, _ref2) {
          var _this3 = this;

          if (script === void 0) {
            script = [];
          }

          var name = _ref2.name,
              data = _ref2.data;
          this.resetGameSpeed();
          this.mainDirector.newGameMode({
            name: name,
            data: data
          }, function () {
            _this3.executeNextScript(script);
          });
        };

        _proto._resumeGameMode = function _resumeGameMode(script, _ref3) {
          var _this4 = this;

          if (script === void 0) {
            script = [];
          }

          var name = _ref3.name,
              data = _ref3.data;
          this.resetGameSpeed();

          if (!this.hasTable) {
            this.hasTable = true;
          }

          this.mainDirector.resumeGameMode({
            name: name
          }, function () {
            if (_this4.soundPlayer) _this4.soundPlayer.stopAllAudio();
            if (_this4.soundPlayer) _this4.soundPlayer.playMainBGM(name);

            _this4.executeNextScript(script);
          });

          if (!this._autoSpin && this.slotButton) {
            this.slotButton.emit('SPIN_SHOW');
            this.slotButton.emit('SPIN_ENABLE');
            this.slotButton.emit('FAST_TO_RESULT_HIDE');
            this.slotButton.emit('STOP_AUTO_SPIN_HIDE', true);
          }

          this.guiMgr.setQuestPosition(this.questDummy);
        };

        _proto._gameStart = function _gameStart(script) {
          if (script === void 0) {
            script = [];
          }

          if (!this.fsm.can('gameStart')) return;
          this.fsm.gameStart();
          this.hasTable = false;
          this.hasPayline = false;

          if (this.table && this.table.active === true) {
            this.hasTable = true;
          }

          if (this.table && this.table["hasPayline"] === true) {
            this.hasPayline = true;
          }

          this.executeNextScript(script);
        };

        _proto._resultReceive = function _resultReceive(script, data) {
          var _this5 = this;

          if (!this.fsm.can('resultReceive')) return;
          this.fsm.resultReceive();

          if (this.slotButton) {
            this.slotButton.emit('FAST_TO_RESULT_ENABLE');
            this.slotButton.emit('ENABLE_PROMOTION_STOP_SPIN');
          }

          if (this.dataStore.isTrialMode && this.dataStore.currentGameMode !== SlotGameMode.NormalGame) {
            this._showTrialButtons(null, true);
          }

          if (!this.hasTable) {
            this.executeNextScript(script);
            return;
          }

          this.table.emit("STOP_SPINNING", data, function () {
            _this5.isSpinning = false;

            _this5.guiMgr.onIngameEvent(TutorialTriggerType.SpinStopped, "SPIN_STOPPED");

            _this5.executeNextScript(script);
          });
        };

        _proto._showResult = function _showResult(script) {
          this.runAction('ShowResults');
          this.executeNextScript(script);
        };

        _proto._gameFinish = function _gameFinish(script) {
          if (script === void 0) {
            script = [];
          }

          this.guiMgr.onIngameEvent(TutorialTriggerType.ResetSession, "GAME_RESET_SESSION");
          this.eventManager.emit(EventNames.GAME_RESET_SESSION);
          this.runAction('GameFinish');
          this.executeNextScript(script);
        };

        _proto._gameRestart = function _gameRestart(script, isSkip) {
          if (script === void 0) {
            script = [];
          }

          if (isSkip === void 0) {
            isSkip = false;
          }

          if (!this.fsm.can('gameRestart')) return;
          this.fsm.gameRestart();

          if (!this.dataStore.isAutoSpin && this.slotButton) {
            this.slotButton.emit('SPIN_SHOW');
            this.slotButton.emit('SPIN_ENABLE');
          }

          if (!this.isAlwaysAutoSpin && this.slotButton) {
            this.slotButton.emit('FAST_TO_RESULT_HIDE');
          }

          this.runAction('GameRestart');
          var GAME_SPEED = this.config.GAME_SPEED;
          var isF2R = GAME_SPEED && this.dataStore.gameSpeed === GAME_SPEED.INSTANTLY;

          if (!isSkip && !isF2R) {
            this.resetGameSpeed();
          }

          this.eventManager.emit(EventNames.GAME_RESTART, this.currentGameMode);
          this.executeNextScript(script);
        };

        _proto._gameExit = function _gameExit(script) {
          var _this6 = this;

          if (script === void 0) {
            script = [];
          }

          if (!this.fsm.can('gameRestart')) return;
          this.fsm.gameRestart();

          if (this.slotButton) {
            this.slotButton.emit('SPIN_SHOW');
            this.slotButton.emit('SPIN_ENABLE');
          }

          if (this.forceToExitMode) {
            this.dataStore.playSession.freeGameRemain = 0;
            this.dataStore.playSession.bonusGameRemain = 0;
            this.dataStore.lastEvent = {};
            this.dataStore.isAutoSpin = false;
            this.forceToExitMode = false;
          } //Turn off before swicth mode, because 2 mode use same code, hehe


          if (this.isAlwaysAutoSpin) {
            this.runAction('DisableAutoSpin');
          } else {
            if (this.slotButton) this.slotButton.emit('FAST_TO_RESULT_HIDE');
          }

          this.table.emit("GAME_EXIT");
          this.node.exit(function () {
            _this6.executeNextScript(script);
          });
          this._beginToExit = false;
          if (this.spinTimes) this.spinTimes.active = false;
        };

        _proto._updateMatrix = function _updateMatrix(script, data) {
          this.table.emit("CHANGE_MATRIX", data);
          this.executeNextScript(script);
        };

        _proto._resumeSpinTime = function _resumeSpinTime(script, spinTimes) {
          if (this._autoSpin == true) {
            this.dataStore.isAutoSpin = true;
            this.dataStore.spinTimes = spinTimes;
          }

          this.executeNextScript(script);
        };

        _proto._updateSpinTimes = function _updateSpinTimes(script, spinTimes) {
          this.spinTimes && this.spinTimes.emit("UPDATE_SPINTIMES", spinTimes, this.isRunPromotion);
          this.executeNextScript(script);
        };

        _proto._moveParticles = function _moveParticles(script) {
          var _this7 = this;

          if (this.table) {
            this.table.emit("MOVE_PARTICLE_SCATTER", this.currentGameMode, function () {
              _this7.executeNextScript(script);
            });
          } else {
            this.executeNextScript(script);
          }
        };

        _proto._moveParticles_2 = function _moveParticles_2(script) {
          this.executeNextScript(script);
        };

        _proto._addSpinTimesAnimation = function _addSpinTimesAnimation(script, value) {
          var _this8 = this;

          if (this.spinTimes) this.spinTimes.emit("ANIM_SPINTIMES", value, false, function () {
            _this8.executeNextScript(script);
          });
        };

        _proto._addSpinTimesAnimation_2 = function _addSpinTimesAnimation_2(script, value) {
          if (this.spinTimes) this.spinTimes.emit("ANIM_SPINTIMES", value, true);
          this.executeNextScript(script);
        };

        _proto._updateLastWin = function _updateLastWin(script, data) {
          if (data) {
            this.guiMgr.changeToLastWin();
          } else {
            this.guiMgr.changeToWin();
          }

          this.executeNextScript(script);
        };

        _proto._resetAutoSpin = function _resetAutoSpin(script) {
          this.slotButton.emit('HIDE_AUTO_SPIN_PANEL');
          this.executeNextScript(script);
        };

        _proto._updateWinningAmount = function _updateWinningAmount(script, _ref4) {
          var _this9 = this;

          var winAmount = _ref4.winAmount,
              time = _ref4.time;
          var isFTR = this.dataStore.gameSpeed === this.config.GAME_SPEED.INSTANTLY;

          if (this.canStoreAsyncScript()) {
            var callback = function callback() {
              if (winAmount > 0 && !isFTR) {
                var rate = winAmount / _this9.dataStore.getTotalBet();

                _this9.playSoundWin(rate);
              }

              _this9.guiMgr.updateWinAmount(winAmount, time / 1000);

              _this9.runAsyncScript();
            };

            this.storeAsyncScript(script, {
              callback: callback,
              name: "_updateWinningAmount",
              isSkippable: false
            });
          } else {
            if (winAmount > 0 && !isFTR) {
              var rate = winAmount / this.dataStore.getTotalBet();
              this.playSoundWin(rate);
            }

            this.guiMgr.updateWinAmount(winAmount, time / 1000);
            this.executeNextScript(script);
          }
        } //Only when resume
        ;

        _proto._updateBetId = function _updateBetId(script, betId) {
          this.guiMgr.setBetId(betId);
          this.executeNextScript(script);
        };

        _proto._runAutoSpin = function _runAutoSpin(script) {
          var _this10 = this;

          if (this._checkPauseTutorial('pauseFreeGame')) {
            this.storeCurrentScripts = '_runAutoSpin';
            this.storeNextScripts = {
              script: script,
              data: {}
            };
          } else {
            if (!this.isAlwaysAutoSpin
            /*normal*/
            && this.dataStore.isAutoSpin && this.slotButton) {
              this.slotButton.emit('STOP_AUTO_SPIN_SHOW');
            }

            this.skipAllEffects();
            if (this.slotButton) this.slotButton.emit('SPIN_DISABLE');

            this._showTrialButtons(null, false);

            this._callBackAutoSpin = function () {
              _this10.runAction('SpinClick');

              _this10.executeNextScript(script);

              _this10._callBackAutoSpin = null;
            };

            this._autoSpin = true;
            this.scheduleOnce(this._callBackAutoSpin, 0.5);
          }
        };

        _proto._triggerWinEffect = function _triggerWinEffect(script) {
          this.executeNextScript(script);
        };

        _proto._triggerSmallWinEffect = function _triggerSmallWinEffect(script) {
          this.executeNextScript(script);
        };

        _proto._setUpPaylines = function _setUpPaylines(script, _ref5) {
          var matrix = _ref5.matrix,
              payLines = _ref5.payLines;
          this.hasPayline = true;
          this.table.emit("SETUP_PAYLINES", matrix, payLines);
          this.executeNextScript(script);
        };

        _proto._showBigWild = function _showBigWild(script, _ref6) {
          var isResume = _ref6.isResume;
          this.table.emit("SHOW_BIG_WILD", this.currentGameMode, isResume);
          this.executeNextScript(script);
        };

        _proto._showNormalSymbolPayLine = function _showNormalSymbolPayLine(script, payLines) {
          var _this11 = this;

          if (!this.hasPayline) {
            this.executeNextScript(script);
            return;
          }

          this.table.emit("BLINK_ALL_NORMAL_PAYLINES", function () {
            _this11.table.emit("SHOW_ALL_NORMAL_PAYLINES", payLines);

            _this11.executeNextScript(script);
          });
        };

        _proto._showNormalPayline = function _showNormalPayline(script) {
          var _this12 = this;

          if (!this.hasPayline) {
            this.executeNextScript(script);
            return;
          }

          if (this.canStoreAsyncScript()) {
            var callback = function callback() {
              _this12.table.emit("SHOW_ALL_NORMAL_PAYLINES");

              _this12.runAsyncScript();
            };

            this.storeAsyncScript(script, {
              callback: callback,
              name: "_showNormalPayline",
              isSkippable: true
            });
          } else {
            this.table.emit("SHOW_ALL_NORMAL_PAYLINES");
            this.executeNextScript(script);
          }
        } // _showNormalPayline_2(script:script[]) {
        //     this.executeNextScript(script);
        // }
        ;

        _proto._showFreePayline = function _showFreePayline(script) {
          var _this13 = this;

          if (!this.hasPayline) {
            this.executeNextScript(script);
            return;
          }

          this.table.emit("SHOW_ALL_FREE_PAYLINES", function () {
            _this13.executeNextScript(script);
          });
        } // _showFreePayline_2(script:script[]) {
        //     this.executeNextScript(script);
        // }
        ;

        _proto._blinkAllPaylines = function _blinkAllPaylines(script) {
          var _this14 = this;

          if (!this.hasPayline) {
            this.executeNextScript(script);
            return;
          }

          if (this.canStoreAsyncScript()) {
            var callback = function callback() {
              _this14.table.emit("BLINK_ALL_NORMAL_PAYLINES", _this14.runAsyncScript.bind(_this14));
            };

            this.storeAsyncScript(script, {
              callback: callback,
              name: "_blinkAllPaylines",
              isSkippable: true
            });
          } else {
            this.table.emit("BLINK_ALL_NORMAL_PAYLINES", this.executeNextScript.bind(this, script));
          }
        } // _blinkAllPaylines_2(script:script[]) {
        //     this.executeNextScript(script);
        // }
        // _showNormalSymbolPayLine_2(script:script[]) {
        //     this.executeNextScript(script);
        // }
        ;

        _proto._showBonusPayLine = function _showBonusPayLine(script) {
          var _this15 = this;

          if (!this.hasPayline) {
            this.executeNextScript(script);
            return;
          }

          this.table.emit("SHOW_BONUS_PAYLINE", function () {
            _this15.guiMgr.onIngameEvent(TutorialTriggerType.FinishBonusPayline, "ON_FINISH_BONUS_PAYLINE");

            _this15.executeNextScript(script);
          });
        };

        _proto._showBonusPayLine_2 = function _showBonusPayLine_2(script) {
          this.executeNextScript(script);
        };

        _proto._showScatterPayLine = function _showScatterPayLine(script) {
          var _this16 = this;

          if (!this.hasPayline) {
            this.executeNextScript(script);
            return;
          }

          this.table.emit("SHOW_SCATTER_PAYLINE", function () {
            _this16.guiMgr.onIngameEvent(TutorialTriggerType.FinishScatterPayline, "ON_FINISH_SCATTER_PAYLINE");

            _this16.executeNextScript(script);
          });
        };

        _proto._showScatterPayLine_2 = function _showScatterPayLine_2(script) {
          this.executeNextScript(script);
        };

        _proto._showJackpotPayLine = function _showJackpotPayLine(script, _ref7) {
          var _this17 = this;

          var jpPayLineID = _ref7.jpPayLineID;

          if (!this.hasPayline) {
            this.executeNextScript(script);
            return;
          }

          this.table.emit("SHOW_JACKPOT_PAYLINE", jpPayLineID, function () {
            _this17.guiMgr.onIngameEvent(TutorialTriggerType.FinishJackpotPayline, "ON_FINISH_JACKPOT_PAYLINE");

            _this17.executeNextScript(script);
          });
        };

        _proto._showJackpotPayLine_2 = function _showJackpotPayLine_2(script, _ref8) {
          var jpPayLineID = _ref8.jpPayLineID;
          this.executeNextScript(script);
        };

        _proto._showWildPayLine = function _showWildPayLine(script) {
          var _this18 = this;

          if (!this.hasPayline) {
            this.executeNextScript(script);
            return;
          }

          this.table.emit("SHOW_WILD_PAYLINE", function () {
            _this18.executeNextScript(script);
          });
        };

        _proto._showWildPayLine_2 = function _showWildPayLine_2(script) {
          this.executeNextScript(script);
        };

        _proto._clearPaylines = function _clearPaylines(script) {
          if (!this.hasPayline) {
            this.executeNextScript(script);
            return;
          }

          this.hasPayline = false;
          this.table.emit("CLEAR_PAYLINES");
          this.executeNextScript(script);
        };

        _proto._forceToClearPaylines = function _forceToClearPaylines(script) {
          this.table.emit("CLEAR_PAYLINES");
          this.hasPayline = false;
          this.executeNextScript(script);
        };

        _proto._delayTimeScript = function _delayTimeScript(script, time) {
          var _this19 = this;

          this._delayTimeCallback = function () {
            _this19.executeNextScript(script);
          };

          this.scheduleOnce(this._delayTimeCallback, time);
        };

        _proto._showCutscene = function _showCutscene(script, _ref9) {
          var _this20 = this;

          var name = _ref9.name,
              content = _ref9.content;

          if (this._checkPauseTutorial('pauseFreeGame') || this._checkPauseTutorial('pauseBonusGame')) {
            this.storeCurrentScripts = '_showCutscene';
            var data = {
              name: name,
              content: content
            };
            this.storeNextScripts = {
              script: script,
              data: data
            };
          } else {
            this.guiMgr.showCutScene(name, content, function () {
              _this20.executeNextScript(script);
            });
          }
        };

        _proto._showFreeOptionResult = function _showFreeOptionResult() {
          this.eventManager.emit(EventNames.FREEOPTION_RESULT_START);
          this.runAction('FreeOptionResult');
        };

        _proto._showBigWin = function _showBigWin(script, _ref10) {
          var _this21 = this;

          var name = _ref10.name;
          var _this$dataStore$playS2 = this.dataStore.playSession,
              winType = _this$dataStore$playS2.winType,
              bigWinConfig = _this$dataStore$playS2.bigWinConfig,
              bigwinAmount = _this$dataStore$playS2.bigwinAmount;
          if (!winType) return this.executeNextScript(script);
          var content = {
            winType: winType,
            bigWinConfig: bigWinConfig,
            winAmount: bigwinAmount,
            currentBetData: this.dataStore.betData.getTotalBet()
          };

          if (this.canStoreAsyncScript()) {
            var callback = function callback() {
              _this21.guiMgr.showCutScene(name, content, function () {
                _this21.runAsyncScript();
              });
            };

            this.storeAsyncScript(script, {
              callback: callback,
              name: "_showBigWin",
              isSkippable: true
            });
          } else {
            this.guiMgr.showCutScene(name, content, function () {
              _this21.executeNextScript(script);
            });
          }
        };

        _proto._showBigWin_2 = function _showBigWin_2(script) {
          this.eventManager.emit('SKIP_BIGWIN_FTR');
          this.executeNextScript(script);
        };

        _proto._showCutscene_2 = function _showCutscene_2(script) {
          this.executeNextScript(script);
        };

        _proto._showUnskippedCutscene = function _showUnskippedCutscene(script, _ref11) {
          var _this22 = this;

          var name = _ref11.name,
              content = _ref11.content;
          this.guiMgr.showCutScene(name, content, function () {
            _this22.executeNextScript(script);
          });
        };

        _proto._hideCutsceneWithCB = function _hideCutsceneWithCB(script, _ref12) {
          var _this23 = this;

          var name = _ref12.name;
          this.guiMgr.hideCutSceneWithCB(name, function () {
            _this23.executeNextScript(script);
          });
        };

        _proto._hideCutscene = function _hideCutscene(script, _ref13) {
          var name = _ref13.name;
          this.guiMgr.hideCutScene(name);
          this.executeNextScript(script);
        };

        _proto._clearWinAmount = function _clearWinAmount(script) {
          this.guiMgr.fadeOutWinAmount();
          this.executeNextScript(script);
        };

        _proto.fixedUpdate = function fixedUpdate() {
          if (this.currentGameMode == SlotGameMode.NormalGame && this.dataStore.walletHasUpdate) {
            if (this.fsm && this.fsm.can('actionTrigger')) {
              this.runAction('UpdateWalletData');
            }
          }
        };

        _proto._updateWallet = function _updateWallet(script) {
          this.guiMgr.updateWallet(this.dataStore.getWallets());
          this.executeNextScript(script);
        };

        _proto._updateWalletAfterClickSpin = function _updateWalletAfterClickSpin(script) {
          this.dataStore.setCurrentWallet(this.dataStore.getWalletAfterSpin());
          this.mainDirector.guiMgr.updateWallet(this.dataStore.getWallets());
          this.executeNextScript(script);
        };

        _proto._showMessageNoMoney = function _showMessageNoMoney(script, data) {
          var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
              LOGIN_IFRAME = _loadConfigAsync$getC.LOGIN_IFRAME;

          var actionBtnOK = function actionBtnOK() {
            data && data.callback && data.callback();
          };

          var actionCancel = null;
          var message = "";
          var walletName = this.dataStore.getCurrentWalletType() == WalletType.PROMOTE ? SlotText.WALLET_PROMOTE : SlotText.WALLET_NORMAL;

          if (this.dataStore.getCurrentWalletType() == WalletType.PROMOTE) {
            message = SlotText.NOT_ENOUGH_MONEY;

            if (this.config.IS_SUPPORT_EVENT) {
              message = SlotText.NOT_ENOUGH_MONEY.replace('[wallet]', walletName);
            }

            this.guiMgr.showDialog(message, actionBtnOK, actionCancel);
          } else {
            if (LOGIN_IFRAME && typeof globalThis.ingameDeposit === 'function') {
              message = SlotText.DEPOSIT_MONEY;

              if (this.config.IS_SUPPORT_EVENT) {
                message = SlotText.DEPOSIT_MONEY_EVENT.replace('[wallet]', walletName);
              }

              actionBtnOK = function actionBtnOK() {
                globalThis.ingameDeposit();
              };

              actionCancel = function actionCancel() {
                log('Cancel deposit');
              };

              log("Show Deposit");
            } else {
              message = SlotText.NO_MONEY;

              if (this.config.IS_SUPPORT_EVENT && this.dataStore.getWalletTypes().length > 1) {
                message = SlotText.NO_MONEY_EVENT.replace('[wallet]', walletName);
              }

              log("Show No Money");
            }

            this.guiMgr.showDialog(message, actionBtnOK, actionCancel);
          }
        };

        _proto._updateValueJP = function _updateValueJP(script, data) {
          this.guiMgr.updateValueJP(data);
          this.executeNextScript(script);
        };

        _proto._pauseUpdateJP = function _pauseUpdateJP(script) {
          this.guiMgr.pauseJackpot();
          this.executeNextScript(script);
        };

        _proto._resumeUpdateJP = function _resumeUpdateJP(script) {
          this.guiMgr.resumeJackpot();
          this.executeNextScript(script);
        };

        _proto._disableBet = function _disableBet(script) {
          this.guiMgr.disableBet();
          this.guiMgr.enableSwitchWallet(false);
          this.executeNextScript(script);
        };

        _proto._enableBet = function _enableBet(script) {
          this.guiMgr.enableBet();
          this.guiMgr.enableSwitchWallet(true);
          this.executeNextScript(script);
        };

        _proto._updateWinningAmountSync = function _updateWinningAmountSync(script, _ref14) {
          var _this24 = this;

          var winAmount = _ref14.winAmount,
              time = _ref14.time,
              rate = _ref14.rate,
              isSessionEnded = _ref14.isSessionEnded;
          var _this$dataStore = this.dataStore,
              isAutoSpin = _this$dataStore.isAutoSpin,
              gameSpeed = _this$dataStore.gameSpeed;
          var isFTR = gameSpeed === this.config.GAME_SPEED.INSTANTLY;
          var timeShow = isFTR ? 20 : time;
          this._canFastUpdateWinAmount = true;
          this._winValue = winAmount;
          var runScript = false;

          if (!isFTR) {
            this.playSoundWin(rate);
          }

          this.guiMgr.updateWinAmount(winAmount, timeShow, function () {
            _this24._canFastUpdateWinAmount = false;
            _this24._winValue = 0;

            _this24.stopSoundWin();

            (!isSessionEnded || !runScript) && _this24.executeNextScript(script);
          });

          if (isSessionEnded && !isAutoSpin) {
            runScript = true;
            this.executeNextScript(script);
          }
        };

        _proto._showPromotionPopup = function _showPromotionPopup(script) {
          this.mainDirector.showPromotionPopup();
          this.executeNextScript(script);
        };

        _proto.setUpPromotionSpin = function setUpPromotionSpin() {
          var _this$dataStore$promo = this.dataStore.promotion,
              promotionBetId = _this$dataStore$promo.promotionBetId,
              promotionRemain = _this$dataStore$promo.promotionRemain;
          this.spinTimes.active = true;
          this.isRunPromotion = true;
          this.slotButton.emit('SHOW_PROMO_UI');
          this.spinTimes.emit("UPDATE_SPINTIMES", promotionRemain, true); // set Bet id with promotionBetId

          this.guiMgr.setBetId(promotionBetId);
        };

        _proto._updatePromotionRemain = function _updatePromotionRemain(script, number) {
          this.dataStore.promotion.promotionRemain = number;
          this.slotButton.emit('PROMO_STOP_SPIN_SHOW');
          this.slotButton.emit('PROMO_SPIN_HIDE');
          this.executeNextScript(script);
        };

        _proto._resetPromotionButtons = function _resetPromotionButtons(script) {
          if (this.spinTimes && this.spinTimes.active == false) this.spinTimes.active = true;
          this.slotButton.emit('PROMO_SPIN_SHOW');
          this.slotButton.emit('PROMO_STOP_SPIN_HIDE');
          this.executeNextScript(script);
        };

        _proto._exitPromotionMode = function _exitPromotionMode(script) {
          if (this.isRunPromotion) {
            this.isRunPromotion = false;
            this.slotButton.emit('HIDE_PROMO_UI');
            this.slotButton.emit('PROMO_STOP_SPIN_HIDE');
            this.spinTimes.emit("RESET_SPINTIMES");
            this.dataStore.promotion = null;
            this.spinTimes.active = false;
            this.executeNextScript(script);
          } else {
            this.executeNextScript(script);
          }
        };

        _proto.playSoundWin = function playSoundWin(rate) {
          if (rate < 10) this.soundPlayer && this.soundPlayer.playSoundSmallWin(rate);
        };

        _proto.stopSoundWin = function stopSoundWin() {
          this.soundPlayer && this.soundPlayer.stopSoundSmallWin();
        };

        _proto._pauseCurrentWallet = function _pauseCurrentWallet(script) {
          this.dataStore.pauseCurrentWallet();
          this.executeNextScript(script);
        };

        _proto._pauseWallets = function _pauseWallets(script) {
          this.dataStore.pauseWallet(WalletType.NORMAL);
          this.dataStore.pauseWallet(WalletType.PROMOTE);
          this.dataStore.pauseWallet(WalletType.TRIAL);
          this.executeNextScript(script);
        };

        _proto._resumeWallets = function _resumeWallets(script) {
          var _this25 = this;

          if (this.canStoreAsyncScript()) {
            var callback = function callback() {
              _this25.dataStore.resumeWallet(WalletType.NORMAL);

              _this25.dataStore.resumeWallet(WalletType.PROMOTE);

              _this25.dataStore.resumeWallet(WalletType.TRIAL);

              _this25.runAsyncScript();
            };

            this.storeAsyncScript(script, {
              callback: callback,
              name: "_resumeWallets",
              isSkippable: false
            });
          } else {
            this.dataStore.resumeWallet(WalletType.NORMAL);
            this.dataStore.resumeWallet(WalletType.PROMOTE);
            this.dataStore.resumeWallet(WalletType.TRIAL);
            this.executeNextScript(script);
          }
        };

        _proto._playAnimWinQuest = function _playAnimWinQuest(script) {
          var _this26 = this;

          if (this.canStoreAsyncScript()) {
            var callback = function callback() {
              _this26.dataStore.questData.eventInfo.playedAnimWin = true;

              _this26.eventManager.emit(EventNames.PLAY_ANIM_WINQUEST);

              _this26.guiMgr.playAnimWinQuest(function () {
                _this26.guiMgr.setDoneQuest();

                _this26.guiMgr.refreshQuestUI();

                _this26.runAsyncScript();
              });
            };

            this.storeAsyncScript(script, {
              callback: callback,
              name: "_playAnimWinQuest",
              isSkippable: false
            });
          } else {
            this.dataStore.questData.eventInfo.playedAnimWin = true;
            this.eventManager.emit(EventNames.PLAY_ANIM_WINQUEST);
            this.guiMgr.playAnimWinQuest(function () {
              _this26.guiMgr.setDoneQuest();

              _this26.guiMgr.refreshQuestUI();

              _this26.executeNextScript(script);
            });
          }
        };

        _proto._playAnimWinQuest_2 = function _playAnimWinQuest_2(script) {
          this.eventManager.emit(EventNames.PLAY_ANIM_WINQUEST);
          this.dataStore.questData.eventInfo.playedAnimWin = true;
          this.guiMgr.refreshQuestUI();
          this.guiMgr.setDoneQuest();
          this.guiMgr.refreshQuestUI();
          this.executeNextScript(script);
        };

        _proto._loadWallet = function _loadWallet(script, walletType) {
          if (!walletType) {
            this.dataStore.switchWallet(WalletType.NORMAL);
          } else {
            this.dataStore.switchWallet(WalletType.PROMOTE);
          }

          this.guiMgr.selectWallet();
          this.guiMgr.enableSwitchWallet(false);

          if (this.eventManager) {
            this.eventManager.emit(EventNames.SWITCH_WALLET, this.dataStore.getCurrentWalletType());
          }

          this.executeNextScript(script);
        };

        _proto._pauseTopPlayer = function _pauseTopPlayer(script) {
          if (this.config.IS_SUPPORT_EVENT) {
            this.guiMgr.pauseTopPlayer();
          }

          this.executeNextScript(script);
        };

        _proto._resumeTopPlayer = function _resumeTopPlayer(script) {
          if (this.config.IS_SUPPORT_EVENT) {
            this.guiMgr.resumeTopPlayer();
          }

          this.executeNextScript(script);
        };

        _proto._getAvailableQuest = function _getAvailableQuest(script) {
          var _this27 = this;

          if (this.canStoreAsyncScript()) {
            var callback = function callback() {
              _this27.guiMgr.finishEvent(function () {
                _this27.mainDirector.getNextEvent();

                _this27.runAsyncScript();
              });
            };

            this.storeAsyncScript(script, {
              callback: callback,
              name: "_getAvailableQuest",
              isSkippable: false
            });
          } else {
            this.guiMgr.finishEvent(function () {
              _this27.mainDirector.getNextEvent();

              _this27.executeNextScript(script);
            });
          }
        };

        _proto._refreshQuestUI = function _refreshQuestUI(script) {
          this.guiMgr.refreshQuestUI();
          this.executeNextScript(script);
        };

        _proto.onDestroy = function onDestroy() {
          if (this._updateInterval) {
            clearInterval(this._updateInterval);
          }
        };

        _proto.updateSpinTimes = function updateSpinTimes(spinTimes) {
          this.spinTimes && this.spinTimes.emit('UPDATE_SPINTIMES', spinTimes);
        };

        _createClass(SlotDirector, [{
          key: "autoSpin",
          get: function get() {
            return this._autoSpin;
          },
          set: function set(value) {
            this._autoSpin = value;
          }
        }, {
          key: "beginToExit",
          get: function get() {
            return this._beginToExit;
          },
          set: function set(value) {
            this._beginToExit = value;
          }
        }]);

        return SlotDirector;
      }(BaseDirector), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "currentGameMode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return SlotGameMode.NormalGame;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "slotButton", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "table", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "spinTimes", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "isAlwaysAutoSpin", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "questDummy", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotGameWriter.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CustomEnum.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component, SlotSceneType, SlotGameMode, StateGameMode;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      SlotSceneType = module.SlotSceneType;
      SlotGameMode = module.SlotGameMode;
      StateGameMode = module.StateGameMode;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "2e12fTV28BAYaKxj4UNqS6r", "SlotGameWriter", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotGameWriter = exports('SlotGameWriter', (_dec = ccclass('SlotGameWriter'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SlotGameWriter, _Component);

        function SlotGameWriter() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = SlotGameWriter.prototype;

        _proto.onLoad = function onLoad() {
          this.node['writer'] = this;
        };

        _proto.makeScriptResume = function makeScriptResume() {
          // todo: always rewrite this resume logic
          var dataStore = this.node.dataStore;

          if (dataStore) {
            var config = dataStore.config,
                promotion = dataStore.promotion;
            var NORMAL_TABLE_FORMAT = config.NORMAL_TABLE_FORMAT,
                FREE_TABLE_FORMAT = config.FREE_TABLE_FORMAT;
            var _dataStore$playSessio = dataStore.playSession,
                bonusGameMatrix = _dataStore$playSessio.bonusGameMatrix,
                normalGameMatrix = _dataStore$playSessio.normalGameMatrix,
                normalGamePayLines = _dataStore$playSessio.normalGamePayLines,
                bonusGameRemain = _dataStore$playSessio.bonusGameRemain,
                freeGameRemain = _dataStore$playSessio.freeGameRemain,
                freeGameMatrix = _dataStore$playSessio.freeGameMatrix,
                winAmountPS = _dataStore$playSessio.winAmountPS,
                betId = _dataStore$playSessio.betId,
                freeSpinOption = _dataStore$playSessio.freeSpinOption,
                walletType = _dataStore$playSessio.walletType;
            var normalSpinMatrix = dataStore.convertMatrix(normalGameMatrix, NORMAL_TABLE_FORMAT);
            var normalPayLines = normalGamePayLines ? dataStore.convertPayLine(normalGamePayLines) : null;
            var isBonusGameInNormal = bonusGameRemain && bonusGameRemain > 0 && !freeGameMatrix;
            var isBonusGameInFree = bonusGameRemain && bonusGameRemain > 0 && !isBonusGameInNormal;
            var isFreeGame = freeGameRemain && freeGameRemain > 0 || isBonusGameInFree;
            var listScript = [];
            var promotionRemain, promotionTotal;

            if (promotion) {
              promotionRemain = promotion.promotionRemain;
              promotionTotal = promotion.promotionTotal;
            }

            listScript.push({
              command: "_updateBetId",
              data: betId
            });
            listScript.push({
              command: "_loadWallet",
              data: walletType
            });
            listScript.push({
              command: "_disableBet"
            });
            listScript.push({
              command: "_showTrialButtons",
              data: false
            });
            listScript.push({
              command: "_updateMatrix",
              data: {
                matrix: normalSpinMatrix
              }
            });
            listScript.push({
              command: "_setUpPaylines",
              data: {
                matrix: normalSpinMatrix,
                payLines: normalPayLines
              }
            });
            listScript.push({
              command: "_showBigWild",
              data: {
                isResume: true
              }
            }); // const updatedWinAmount = winAmount - (betValue * currentBonusCredits);

            if (winAmountPS && winAmountPS > 0) {
              listScript.push({
                command: "_updateWinningAmount",
                data: {
                  winAmount: winAmountPS,
                  time: 0
                }
              });
            }

            if (isBonusGameInNormal) {
              listScript.push({
                command: "_showBonusPayLine"
              });
              listScript.push({
                command: "_showCutscene",
                data: {
                  name: SlotSceneType.IntroBonusGame
                }
              });
              listScript.push({
                command: "_newGameMode",
                data: {
                  name: SlotGameMode.BonusGame,
                  data: bonusGameMatrix
                }
              });
              listScript.push({
                command: "_resumeGameMode",
                data: {
                  name: SlotGameMode.NormalGame
                }
              });
            }

            if (freeSpinOption && freeSpinOption > 0) {
              listScript.push({
                command: "_showScatterPayLine"
              });
              listScript.push({
                command: "_showCutscene",
                data: {
                  name: SlotSceneType.FreespinOption
                }
              });
              listScript.push({
                command: "_newGameMode",
                data: {
                  name: SlotGameMode.FreeGame,
                  data: normalSpinMatrix
                }
              });
              listScript.push({
                command: "_resumeGameMode",
                data: {
                  name: SlotGameMode.NormalGame
                }
              });
            }

            if (isFreeGame || isBonusGameInFree) {
              var freeSpinMatrix = normalSpinMatrix;

              if (freeGameMatrix) {
                freeSpinMatrix = dataStore.convertMatrix(freeGameMatrix, FREE_TABLE_FORMAT);
              }

              listScript.push({
                command: "_showScatterPayLine"
              });

              if (isBonusGameInFree) {
                listScript.push({
                  command: "_showCutscene",
                  data: {
                    name: SlotSceneType.IntroBonusGame
                  }
                });
                listScript.push({
                  command: "_newGameMode",
                  data: {
                    name: SlotGameMode.BonusGame,
                    data: bonusGameMatrix
                  }
                });
              }

              if (freeGameRemain && freeGameRemain > 0) {
                listScript.push({
                  command: "_showCutscene",
                  data: {
                    name: SlotSceneType.IntroFreeGame
                  }
                });
                listScript.push({
                  command: "_newGameMode",
                  data: {
                    name: SlotGameMode.FreeGame,
                    data: freeSpinMatrix
                  }
                });
              }

              listScript.push({
                command: "_resumeGameMode",
                data: {
                  name: SlotGameMode.NormalGame
                }
              });
            }

            if (normalPayLines && normalPayLines.length > 0) {
              listScript.push({
                command: "_blinkAllPaylines"
              });
            }

            listScript.push({
              command: "_showBigWin",
              data: {
                name: SlotSceneType.BigWin
              }
            });

            if (normalPayLines && normalPayLines.length > 0) {
              listScript.push({
                command: "_showNormalPayline"
              });
            }

            listScript.push({
              command: "_gameFinish"
            });
            listScript.push({
              command: "_gameRestart"
            });

            if (promotion && promotionRemain && promotionTotal && promotionRemain > 0) {
              listScript.push({
                command: "_showPromotionPopup"
              });
            }

            return listScript;
          }
        };

        _proto.makeScriptUpdateWalletData = function makeScriptUpdateWalletData(wallets) {
          var listScript = [];
          listScript.push({
            command: "_updateWallet"
          });
          return listScript;
        };

        _proto.makeScriptGameStart = function makeScriptGameStart() {
          var listScript = [];
          listScript.push({
            command: "_gameStart"
          });
          return listScript;
        };

        _proto.makeScriptSwitchMode = function makeScriptSwitchMode() {
          var dataStore = this.node.dataStore;
          dataStore.playSession.winAmount = 0;
          var listScript = [];
          listScript.push({
            command: "_forceToClearPaylines"
          });
          listScript.push({
            command: "_updateLastWin",
            data: false
          });
          listScript.push({
            command: "_resetAutoSpin"
          });
          listScript.push({
            command: "_clearWinAmount"
          });
          return listScript;
        };

        _proto.makeScriptSpinClick = function makeScriptSpinClick() {
          var listScript = [];
          var dataStore = this.node.dataStore;
          var betId = dataStore.betData.betId;
          var spinTimes = dataStore.spinTimes,
              isAutoSpin = dataStore.isAutoSpin,
              promotion = dataStore.promotion,
              currentGameMode = dataStore.currentGameMode;
          var _dataStore$playSessio2 = dataStore.playSession,
              freeGameRemain = _dataStore$playSessio2.freeGameRemain,
              freeGame = _dataStore$playSessio2.freeGame;
          var availableSpinTimes = 0;
          var promotionRemain, promotionBetId;

          if (promotion) {
            promotionRemain = promotion.promotionRemain;
            promotionBetId = promotion.promotionBetId;
          }

          if (freeGameRemain && freeGameRemain > 0) {
            availableSpinTimes = freeGameRemain - 1;
          } else if (promotion && promotionRemain > 0) {
            availableSpinTimes = promotionRemain - 1;
            listScript.push({
              command: "_updatePromotionRemain",
              data: availableSpinTimes
            });
          } else if (isAutoSpin) {
            if (spinTimes && spinTimes > 0) {
              availableSpinTimes = spinTimes - 1;
            }
          } else {
            availableSpinTimes = 0;
          }

          dataStore.spinTimes = availableSpinTimes;
          var canISpin = dataStore.getWalletAfterSpin() >= 0;
          listScript.push({
            command: "_showTrialButtons",
            data: false
          });

          if (canISpin || freeGameRemain > 0 || freeGame > 0 || promotion) {
            listScript.push({
              command: '_disableBet'
            });
            listScript.push({
              command: "_clearPaylines"
            });
            if (currentGameMode === SlotGameMode.NormalGame) listScript.push({
              command: '_clearWinAmount'
            });
            listScript.push({
              command: "_updateSpinTimes",
              data: availableSpinTimes
            });

            if (currentGameMode === SlotGameMode.NormalGame && !promotion) {
              listScript.push({
                command: "_updateWalletAfterClickSpin"
              });
            }

            listScript.push({
              command: "_pauseWallets"
            });
            listScript.push({
              command: "_pauseTopPlayer"
            });

            if (promotion && !freeGameRemain && !freeGame) {
              listScript.push({
                command: "_sendSpinToNetwork",
                data: {
                  currentBetData: promotionBetId
                }
              });
            } else {
              listScript.push({
                command: "_sendSpinToNetwork",
                data: {
                  currentBetData: betId
                }
              });
            }

            listScript.push({
              command: "_spinClick"
            });
          } else {
            dataStore.spinTimes = 0;
            dataStore.isAutoSpin = false;
            listScript = [{
              command: "_enableBet"
            }, {
              command: '_resetSpinButton'
            }, {
              command: "_showTrialButtons",
              data: true
            }, {
              command: "_showMessageNoMoney"
            }];
          }

          return listScript;
        };

        _proto.makeScriptResultReceive = function makeScriptResultReceive() {
          var dataStore = this.node.dataStore;
          var _dataStore$playSessio3 = dataStore.playSession,
              matrix = _dataStore$playSessio3.matrix,
              jackpotInfo = _dataStore$playSessio3.jackpotInfo,
              state = _dataStore$playSessio3.state,
              extraVipJackpot = _dataStore$playSessio3.extraVipJackpot;
          var listScript = [];

          if (state == StateGameMode.FreespinOption) {
            listScript.push({
              command: "_showFreeOptionResult"
            });
          } else {
            if (jackpotInfo) {
              var infoJP = jackpotInfo[jackpotInfo.length - 1];
              var arrayJP = infoJP.split(';');
              var jpId = arrayJP[0];
              var jpType = jpId.slice(7);
              var jackpotAmount = Number(arrayJP[1]);
              listScript.push({
                command: "_pauseUpdateJP"
              });
              listScript.push({
                command: "_updateValueJP",
                data: {
                  jpType: jpType,
                  jpValue: jackpotAmount - (extraVipJackpot || 0)
                }
              });
            }

            listScript.push({
              command: "_resultReceive",
              data: matrix
            });
            listScript.push({
              command: "_showResult",
              data: matrix
            });
          }

          return listScript;
        };

        _proto.makeScriptShowResults = function makeScriptShowResults() {
          var dataStore = this.node.dataStore;
          var _dataStore$playSessio4 = dataStore.playSession,
              state = _dataStore$playSessio4.state,
              matrix = _dataStore$playSessio4.matrix,
              winAmount = _dataStore$playSessio4.winAmount,
              winAmountPS = _dataStore$playSessio4.winAmountPS,
              payLines = _dataStore$playSessio4.payLines,
              bonusGame = _dataStore$playSessio4.bonusGame,
              freeGame = _dataStore$playSessio4.freeGame,
              freeGameRemain = _dataStore$playSessio4.freeGameRemain,
              freeGameTotal = _dataStore$playSessio4.freeGameTotal,
              freeSpinOption = _dataStore$playSessio4.freeSpinOption,
              jackpotInfo = _dataStore$playSessio4.jackpotInfo,
              extraJackpot = _dataStore$playSessio4.extraJackpot,
              extraVipJackpot = _dataStore$playSessio4.extraVipJackpot;
          var betData = dataStore.betData;
          var listScript = [];
          listScript.push({
            command: "_setUpPaylines",
            data: {
              matrix: matrix,
              payLines: payLines
            }
          });
          listScript.push({
            command: "_showBigWild",
            data: {
              isResume: false
            }
          }); //TODO: jackpot

          if (jackpotInfo) {
            var infoJP = jackpotInfo[jackpotInfo.length - 1];
            var arrayJP = infoJP.split(';');
            var jackpotAmount = 0;
            var jpLineId;

            if (arrayJP && arrayJP.length > 2) {
              jackpotAmount = Number(arrayJP[1]);
              jpLineId = arrayJP[2];
            }

            if (jpLineId) {
              listScript.push({
                command: "_showJackpotPayLine",
                data: {
                  jpPayLineID: jpLineId
                }
              });
            }

            listScript.push({
              command: "_showCutscene",
              data: {
                name: SlotSceneType.IntroJackpotGame
              }
            });
            listScript.push({
              command: "_showUnskippedCutscene",
              data: {
                name: SlotSceneType.JackpotWin,
                content: {
                  winAmount: jackpotAmount,
                  currentBetData: betData.getTotalBet(),
                  extraJackpot: extraJackpot,
                  extraVipJackpot: extraVipJackpot
                }
              }
            });
            listScript.push({
              command: "_resumeUpdateJP"
            });
          }

          if (state == StateGameMode.NormalGame) {
            var spinTimes = dataStore.spinTimes;

            if (bonusGame && bonusGame > 0) {
              if (winAmount && winAmount > 0) {
                listScript.push({
                  command: '_updateWinningAmount',
                  data: {
                    winAmount: winAmountPS,
                    time: 300
                  }
                });
              } else {
                listScript.push({
                  command: '_clearWinAmount'
                });
              }

              listScript.push({
                command: "_showBonusPayLine"
              });
              listScript.push({
                command: "_showCutscene",
                data: {
                  name: SlotSceneType.IntroBonusGame
                }
              });
              listScript.push({
                command: "_newGameMode",
                data: {
                  name: SlotGameMode.BonusGame
                }
              });
              listScript.push({
                command: "_resumeGameMode",
                data: {
                  name: SlotGameMode.NormalGame
                }
              });

              if (!freeGame && spinTimes && spinTimes > 0) {
                listScript.push({
                  command: "_resumeSpinTime",
                  data: spinTimes
                });
              }
            }

            if (freeSpinOption && freeSpinOption > 0 || freeGame && freeGame > 0) {
              var _spinTimes = dataStore.spinTimes;

              if (!bonusGame) {
                if (winAmountPS && winAmountPS > 0) {
                  listScript.push({
                    command: '_updateWinningAmount',
                    data: {
                      winAmount: winAmountPS,
                      time: 10
                    }
                  });
                } else {
                  listScript.push({
                    command: '_clearWinAmount'
                  });
                }
              }

              listScript.push({
                command: "_showScatterPayLine"
              });

              if (freeSpinOption && freeSpinOption > 0) {
                listScript.push({
                  command: "_showCutscene",
                  data: {
                    name: SlotSceneType.FreespinOption
                  }
                });
              }

              listScript.push({
                command: "_showCutscene",
                data: {
                  name: SlotSceneType.IntroFreeGame
                }
              });
              listScript.push({
                command: "_newGameMode",
                data: {
                  name: SlotGameMode.FreeGame,
                  data: matrix
                }
              });
              listScript.push({
                command: "_resumeGameMode",
                data: {
                  name: SlotGameMode.NormalGame
                }
              });

              if (_spinTimes && _spinTimes > 0) {
                listScript.push({
                  command: "_resumeSpinTime",
                  data: _spinTimes
                });
              }
            }

            if (payLines && payLines.length > 0) {
              listScript.push({
                command: "_blinkAllPaylines"
              });
            }

            listScript.push({
              command: "_showBigWin",
              data: {
                name: SlotSceneType.BigWin
              }
            });

            if (payLines && payLines.length > 0) {
              listScript.push({
                command: "_showNormalPayline"
              });
            }

            listScript.push({
              command: "_gameFinish"
            });
            listScript.push({
              command: "_gameRestart"
            });
          } else if (state == StateGameMode.FreeGame) {
            if (bonusGame && bonusGame > 0) {
              if (winAmount && winAmount > 0) {
                listScript.push({
                  command: '_updateWinningAmount',
                  data: {
                    winAmount: winAmountPS,
                    time: 300
                  }
                });
              }

              listScript.push({
                command: "_showBonusPayLine"
              });
              listScript.push({
                command: "_showCutscene",
                data: {
                  name: SlotSceneType.IntroBonusGame
                }
              });
              listScript.push({
                command: "_newGameMode",
                data: {
                  name: SlotGameMode.BonusGame
                }
              });
              listScript.push({
                command: "_resumeGameMode",
                data: {
                  name: SlotGameMode.FreeGame
                }
              });
            }

            if (payLines && payLines.length > 0) {
              listScript.push({
                command: "_blinkAllPaylines"
              });
              listScript.push({
                command: "_showFreePayline"
              });
            }

            if (!freeGameRemain || freeGameRemain <= 0) {
              if (winAmountPS && winAmountPS > 0) {
                listScript.push({
                  command: '_updateWinningAmount',
                  data: {
                    winAmount: winAmountPS,
                    time: 300
                  }
                });
              }

              listScript.push({
                command: "_delayTimeScript",
                data: 1
              });
              listScript.push({
                command: "_showUnskippedCutscene",
                data: {
                  name: SlotSceneType.TotalWinPanel,
                  content: {
                    winAmount: winAmountPS,
                    freeGameTotal: freeGameTotal
                  }
                }
              });
              listScript.push({
                command: "_clearPaylines"
              });
              listScript.push({
                command: "_gameExit"
              });
            } else {
              if (freeGameRemain > dataStore.spinTimes) {
                listScript.push({
                  command: "_showScatterPayLine"
                });
                listScript.push({
                  command: "_moveParticles"
                });
                listScript.push({
                  command: "_addSpinTimesAnimation",
                  data: freeGameRemain - dataStore.spinTimes
                });
                dataStore.spinTimes = freeGameRemain;
                listScript.push({
                  command: "_updateSpinTimes",
                  data: freeGameRemain
                });
                listScript.push({
                  command: "_delayTimeScript",
                  data: 0.5
                });
              } else {
                dataStore.spinTimes = freeGameRemain;
                listScript.push({
                  command: "_updateSpinTimes",
                  data: freeGameRemain
                });
              }

              listScript.push({
                command: "_gameRestart"
              });
            }
          }

          return listScript;
        };

        _proto.makeScriptFreeOptionResult = function makeScriptFreeOptionResult() {
          var listScript = [];
          listScript.push({
            command: "_hideCutscene",
            data: {
              name: SlotSceneType.FreespinOption
            }
          });
          return listScript;
        };

        _proto.makeScriptGameFinish = function makeScriptGameFinish() {
          var dataStore = this.node.dataStore;
          var winAmountPS = dataStore.playSession.winAmountPS;
          var listScript = [];

          if (dataStore.isTrialMode && winAmountPS) {
            dataStore.setCurrentWallet(dataStore.getCurrentWallet() + winAmountPS);
          }

          return listScript;
        };

        _proto.makeScriptSetUpBet = function makeScriptSetUpBet(value) {
          return [{
            command: "_updateBet",
            data: value
          }];
        };

        _proto.makeScriptGameRestart = function makeScriptGameRestart() {
          var dataStore = this.node.dataStore;
          var listScript = [];
          var _dataStore$playSessio5 = dataStore.playSession,
              freeGameRemain = _dataStore$playSessio5.freeGameRemain,
              respinGameRemain = _dataStore$playSessio5.respinGameRemain;
          var spinTimes = dataStore.spinTimes,
              promotion = dataStore.promotion;
          var promotionRemain;

          if (promotion) {
            promotionRemain = promotion.promotionRemain;
          }

          this.scriptUpdateWinAmount(listScript);

          if (promotionRemain && promotionRemain > 0) {
            listScript.push({
              command: "_showTrialButtons",
              data: false
            });
            listScript.push({
              command: "_resetPromotionButtons"
            });
          }

          if (spinTimes && spinTimes > 0) {
            if (freeGameRemain && freeGameRemain > 0 || respinGameRemain && respinGameRemain > 0) {
              listScript.push({
                command: "_runAutoSpin"
              });
            } else if (!promotion || !promotionRemain) {
              listScript.push({
                command: "_runAutoSpin"
              });
            }
          } else {
            if (!promotionRemain || promotionRemain <= 0) {
              listScript.push({
                command: '_enableBet'
              });
              listScript.push({
                command: "_exitPromotionMode"
              });
              listScript.push({
                command: "_resetSpinButton"
              });
              listScript.push({
                command: "_showTrialButtons",
                data: true
              });
            }
          }

          listScript.push({
            command: "_runAsyncScript"
          });
          return listScript;
        };

        _proto.makeScriptSpinByTimes = function makeScriptSpinByTimes(times) {
          var dataStore = this.node.dataStore;
          dataStore.isAutoSpin = true;
          dataStore.spinTimes = times;
          return [{
            command: "_runAutoSpin"
          }];
        };

        _proto.makeScriptDisableAutoSpin = function makeScriptDisableAutoSpin() {
          var dataStore = this.node.dataStore;
          dataStore.isAutoSpin = false;
          dataStore.spinTimes = 0;
          var listScript = [];
          listScript.push({
            command: "_updateSpinTimes",
            data: 0
          });
          return listScript;
        };

        _proto.scriptUpdateWinAmount = function scriptUpdateWinAmount(listScript) {
          var dataStore = this.node.dataStore;
          var _dataStore$playSessio6 = dataStore.playSession,
              winAmountPS = _dataStore$playSessio6.winAmountPS,
              winAmount = _dataStore$playSessio6.winAmount,
              isFinished = _dataStore$playSessio6.isFinished;
          var _dataStore$questData = dataStore.questData,
              showedAnim = _dataStore$questData.showedAnim,
              winAmountQuest = _dataStore$questData.winAmountQuest,
              playingFinish = _dataStore$questData.playingFinish;

          if (isFinished && !showedAnim && winAmountQuest) {
            listScript.push({
              command: "_playAnimWinQuest"
            });

            if (playingFinish) {
              listScript.push({
                command: "_getAvailableQuest"
              });
            }

            dataStore.questData.showedAnim = true;
          }

          if (winAmount && winAmount > 0) {
            listScript.push({
              command: "_updateWinningAmount",
              data: {
                winAmount: winAmountPS,
                time: 300
              }
            });
          }

          if (isFinished) {
            listScript.push({
              command: "_resumeWallets"
            });
            listScript.push({
              command: "_resumeTopPlayer"
            });
          }
        };

        return SlotGameWriter;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotGetShare.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Event, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Event = module.Event;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "26af7rWmFBJ3qVeYfeArylv", "SlotGetShare", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotGetShare = exports('SlotGetShare', (_dec = ccclass('SlotGetShare'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SlotGetShare, _Component);

        function SlotGetShare() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = SlotGetShare.prototype;

        _proto.onLoad = function onLoad() {
          this.node.dispatchEvent(new Event('RQ_SHARE_DATA', true));
        };

        return SlotGetShare;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotJackpotCellHistory.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CustomType.ts', './SlotBaseCellHistory.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Sprite, JackpotType, SlotBaseCellHistory;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Sprite = module.Sprite;
    }, function (module) {
      JackpotType = module.JackpotType;
    }, function (module) {
      SlotBaseCellHistory = module.SlotBaseCellHistory;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "0d27dbCxDxDOpMhlRENc6D+", "SlotJackpotCellHistory", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotJackpotCellHistory = exports('SlotJackpotCellHistory', (_dec = ccclass('SlotJackpotCellHistory'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: [JackpotType]
      }), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_SlotBaseCellHistory) {
        _inheritsLoose(SlotJackpotCellHistory, _SlotBaseCellHistory);

        function SlotJackpotCellHistory() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SlotBaseCellHistory.call.apply(_SlotBaseCellHistory, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "jackpotType", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "jackpotList", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "iconWalletNormal", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "iconWalletPromotion", _descriptor4, _assertThisInitialized(_this));

          _this.jackpotData = void 0;
          return _this;
        }

        var _proto = SlotJackpotCellHistory.prototype;

        _proto.onLoad = function onLoad() {
          _SlotBaseCellHistory.prototype.onLoad.call(this);
        };

        _proto.onShowJackpotDetail = function onShowJackpotDetail() {
          if (this.eventManager) this.eventManager.emit('SHOW_JACKPOT_HISTORY_DETAIL', this.jackpotData);
          if (this.soundPlayer) this.soundPlayer.playSFXClick();
        };

        _proto.updateData = function updateData(data) {
          var extendData = data.exDt;

          _SlotBaseCellHistory.prototype.updateData.call(this, data);

          this.jackpotData = data;

          if (this.jackpotType) {
            var imageJP = this.findJackpotStaticData(data.jpType);

            if (imageJP) {
              this.jackpotType.getComponentInChildren(Sprite).spriteFrame = imageJP.image;
            }
          }

          if (extendData && this.dataStore.getWalletTypes().length > 1) {
            var walletOption = extendData.wo;

            if (this.iconWalletNormal && this.iconWalletPromotion) {
              if (typeof walletOption === "undefined") {
                this.iconWalletNormal.active = false;
                this.iconWalletPromotion.active = false;
              } else {
                var isWalletNormal = walletOption === 0;
                this.iconWalletNormal.active = isWalletNormal;
                this.iconWalletPromotion.active = !isWalletNormal;
              }
            }
          }
        };

        _proto.findJackpotStaticData = function findJackpotStaticData(jackpotType) {
          for (var i = 0; i < this.jackpotList.length; i++) {
            if (this.jackpotList[i].jpName == jackpotType) return this.jackpotList[i];
          }

          return null;
        };

        return SlotJackpotCellHistory;
      }(SlotBaseCellHistory), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "jackpotType", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "jackpotList", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "iconWalletNormal", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "iconWalletPromotion", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotJackpotHistory.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SlotBaseHistory.ts', './globalNetwork.ts', './loadConfigAsync.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, SlotBaseHistory, globalNetwork, loadConfigAsync;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
    }, function (module) {
      SlotBaseHistory = module.SlotBaseHistory;
    }, function (module) {
      globalNetwork = module.default;
    }, function (module) {
      loadConfigAsync = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;

      cclegacy._RF.push({}, "1abf9T55npCvL47tNjS6Pyu", "SlotJackpotHistory", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotJackpotHistory = exports('SlotJackpotHistory', (_dec = ccclass('SlotJackpotHistory'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: Node
      }), _dec6 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_SlotBaseHistory) {
        _inheritsLoose(SlotJackpotHistory, _SlotBaseHistory);

        function SlotJackpotHistory() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SlotBaseHistory.call.apply(_SlotBaseHistory, [this].concat(args)) || this;
          _this.initialized = false;

          _initializerDefineProperty(_this, "noJackpotText", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "isMiniGame", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "jpList", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "jackpotList", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "page", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "jackpotDetailView", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "pagination", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sfxCancel", _descriptor8, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SlotJackpotHistory.prototype;

        _proto.onLoad = function onLoad() {
          this.initBase();
          this.eventManager.on('SHOW_JACKPOT_HISTORY_DETAIL', this.showJackpotDetail, this);
          this.node.on("JUMP_TO_PAGE_HISTORY", this.jumpToPage, this);
          if (this.jackpotList) this.jackpotList.active = true;
          if (this.jackpotDetailView) this.jackpotDetailView.active = false;
        };

        _proto.initBase = function initBase() {
          if (this.initialized) return;

          _SlotBaseHistory.prototype.initBase.call(this);

          this.url = "jackpothistory/slot";
          this.noJackpotText.active = false;

          var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
              LOGIN_IFRAME = _loadConfigAsync$getC.LOGIN_IFRAME;

          var betIds = this.config.BET_IDS;

          if (LOGIN_IFRAME) {
            betIds = this.config.BET_IDS_IFRAME;
          }

          if (this.config.JP_LIST_HISTORY) {
            this.jpList = this.config.JP_LIST_HISTORY;
            this.init(this.config.GAME_ID, null, betIds, this.jpList);
          } //


          this.initialized = true;
        };

        _proto.init = function init(gameId, soundPlayer, betIds, jpList, jpPrefix, url) {
          if (jpList === void 0) {
            jpList = "GRAND-MAJOR";
          }

          if (jpPrefix === void 0) {
            jpPrefix = "kts_";
          }

          if (url === void 0) {
            url = "jackpothistory/slot";
          }

          this.gameId = gameId;
          this.jpList = jpList;
          this.betIds = betIds;
          this.jpPrefix = jpPrefix;

          if (this.isMiniGame) {
            this.jpPrefix = 'ktmn_';
          }

          this.url = url;
          if (soundPlayer) this.playSoundClick = soundPlayer.playClickButton.bind(soundPlayer);
        };

        _proto.openPanel = function openPanel() {
          this.table.emit('CLEAR_DATA');
          if (this.pagination) this.pagination.emit('RESET_PAGE_INDEX');
          this.token = globalNetwork.getToken();

          _SlotBaseHistory.prototype.openPanel.call(this);

          this.hideJackpotDetail();
        };

        _proto.onEnable = function onEnable() {
          if (this._isOnLoadCalled) {
            this.openPanel();
          }

          if (this.closeButton) {
            this.closeButton.interactable = true;
          }
        } // fish-client
        ;

        _proto.initObj = function initObj() {
          //this.node.emit(DTConstantsVariable.PANEL_EVENT.Show);
          this.openPanel();
        };

        _proto.showJackpotDetail = function showJackpotDetail(data) {
          if (this.jackpotList) this.jackpotList.active = false;
          if (this.backBtn) this.backBtn.active = false;
          if (this.nextBtn) this.nextBtn.active = false; //if(this.page) this.page.active = false;

          if (this.pagination) this.pagination.active = false;

          if (this.jackpotDetailView) {
            this.jackpotDetailView.active = true;
            this.jackpotDetailView._uiProps.colorDirty = true;
            this.jackpotDetailView.emit('UPDATE_DETAIL_VIEW', data);
          }

          if (this.historyTableTitle && this.historyDetailTitle) {
            this.historyTableTitle.active = false;
            this.historyTableTitle._uiProps.colorDirty = true;
          }

          if (this.historyTableTitle && this.historyDetailTitle) {
            this.historyDetailTitle.active = true;
            this.historyDetailTitle._uiProps.colorDirty = true;
          }
        };

        _proto.onHideJackpotDetail = function onHideJackpotDetail() {
          this.onPlaySfxCancel();
          this.hideJackpotDetail();
        };

        _proto.hideJackpotDetail = function hideJackpotDetail() {
          if (this.jackpotList) this.jackpotList.active = true;
          if (this.backBtn) this.backBtn.active = true;
          if (this.nextBtn) this.nextBtn.active = true; //if(this.page) this.page.active = true;

          if (this.pagination) this.pagination.active = true;

          if (this.jackpotDetailView) {
            this.jackpotDetailView.emit('RESET_UI');
            this.jackpotDetailView.active = false;
          }

          if (this.historyTableTitle && this.historyDetailTitle) this.historyTableTitle.active = true;
          if (this.historyTableTitle && this.historyDetailTitle) this.historyDetailTitle.active = false;
        };

        _proto.onPlaySfxCancel = function onPlaySfxCancel() {
          if (this.soundPlayer) this.soundPlayer.playSfx(this.sfxCancel);
        };

        _proto.playLoading = function playLoading() {
          _SlotBaseHistory.prototype.playLoading.call(this);

          this.noJackpotText.active = false;
        };

        _proto.onRequestResponse = function onRequestResponse(res) {
          _SlotBaseHistory.prototype.onRequestResponse.call(this, res);

          if (res.error || Object.keys(res).length <= 0 || !res.data || res.data.length <= 0) {
            this.noJackpotText.active = true;
          } else {
            if (this.pagination) {
              this.pagination.active = true;
              this.pagination.emit('UPDATE_PAGE', this.currentPage, this.totalPage);
            }

            this.noJackpotText.active = false;
          }

          if (res.total > 0 && this.pagination) {
            this.pagination.emit('UPDATE_PAGE', this.currentPage, this.totalPage);
          }
        };

        _proto.jumpToPage = function jumpToPage(evt) {
          evt.propagationStopped = true;
          this.playSoundClick();
          this.currentPage = evt.clickedPage;
          this.playLoading();

          if (this.isBetHistory) {
            this.requestBetDataPage(this.currentPage, this.itemPerPage, this.onRequestBetResponse.bind(this), this.requestErr.bind(this));
          } else {
            this.requestDataPage(this.currentPage, this.itemPerPage, this.onRequestResponse.bind(this), this.requestErr.bind(this));
          }
        };

        _proto.onCloseButton = function onCloseButton() {
          if (this.pagination) this.pagination.emit('RESET_PAGE_INDEX', this.totalPage);
          this.soundPlayer.playSFXClick();

          if (this.closeButton) {
            this.closeButton.interactable = false;
          }
        };

        return SlotJackpotHistory;
      }(SlotBaseHistory), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "noJackpotText", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "isMiniGame", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "jpList", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "GRAND-MAJOR";
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "jackpotList", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "page", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "jackpotDetailView", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "pagination", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "sfxCancel", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'CLICK';
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotJackpotHistoryDetail.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BaseTableHistoryDetail.ts', './utils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, BaseTableHistoryDetail, formatMoney;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
    }, function (module) {
      BaseTableHistoryDetail = module.BaseTableHistoryDetail;
    }, function (module) {
      formatMoney = module.formatMoney;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "6d5a4rff61MUbRCzMZqDI8w", "SlotJackpotHistoryDetail", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotJackpotHistoryDetail = exports('SlotJackpotHistoryDetail', (_dec = ccclass('SlotJackpotHistoryDetail'), _dec2 = property({
        type: Label
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_BaseTableHistoryDeta) {
        _inheritsLoose(SlotJackpotHistoryDetail, _BaseTableHistoryDeta);

        function SlotJackpotHistoryDetail() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseTableHistoryDeta.call.apply(_BaseTableHistoryDeta, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "session", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SlotJackpotHistoryDetail.prototype;

        _proto.updateDetailView = function updateDetailView(data, pages) {
          _BaseTableHistoryDeta.prototype.updateDetailView.call(this, data, pages);

          this.session.string = "#" + data.psId.substring(data.psId.length - 8, data.psId.length);
          var _data$exDt = data.exDt,
              matrix = _data$exDt.matrix,
              mformat = _data$exDt.mformat,
              subsym = _data$exDt.subsym;
          var format = mformat || this.config.NORMAL_TABLE_FORMAT;
          this.renderTable(matrix, format, subsym);
        };

        _proto.updateTotalWinAmount = function updateTotalWinAmount(data) {
          this.totalWinAmount.string = '0';

          if (data && data.jpAmt) {
            this.totalWinAmount.string = formatMoney(parseInt(data.jpAmt));
          }
        };

        return SlotJackpotHistoryDetail;
      }(BaseTableHistoryDetail), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "session", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotJackpotTableHistory.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SlotBaseTableHistory.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, SlotBaseTableHistory;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      SlotBaseTableHistory = module.SlotBaseTableHistory;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "c4f41xs8MtBd4lnhnyWRbGf", "SlotJackpotTableHistory", undefined);

      var ccclass = _decorator.ccclass;
      var SlotJackpotTableHistory = exports('SlotJackpotTableHistory', (_dec = ccclass('SlotJackpotTableHistory'), _dec(_class = /*#__PURE__*/function (_SlotBaseTableHistory) {
        _inheritsLoose(SlotJackpotTableHistory, _SlotBaseTableHistory);

        function SlotJackpotTableHistory() {
          return _SlotBaseTableHistory.apply(this, arguments) || this;
        }

        return SlotJackpotTableHistory;
      }(SlotBaseTableHistory)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotQuestMgr.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EventMiniProgress.ts', './utils.ts', './GameObject.ts', './CustomEnum.ts', './EventNames.ts', './gameCommonUtils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Prefab, Label, sp, game, Game, log, v3, UITransform, tween, instantiate, director, EventMiniProgress, fadeIn, fadeOut, secondsToHHMMSS, GameObject, QUEST_DISPLAY, SlotGameMode, EVENT_STATE, WalletType, EventNames, gameCommonUtils;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Prefab = module.Prefab;
      Label = module.Label;
      sp = module.sp;
      game = module.game;
      Game = module.Game;
      log = module.log;
      v3 = module.v3;
      UITransform = module.UITransform;
      tween = module.tween;
      instantiate = module.instantiate;
      director = module.director;
    }, function (module) {
      EventMiniProgress = module.EventMiniProgress;
    }, function (module) {
      fadeIn = module.fadeIn;
      fadeOut = module.fadeOut;
      secondsToHHMMSS = module.secondsToHHMMSS;
    }, function (module) {
      GameObject = module.GameObject;
    }, function (module) {
      QUEST_DISPLAY = module.QUEST_DISPLAY;
      SlotGameMode = module.SlotGameMode;
      EVENT_STATE = module.EVENT_STATE;
      WalletType = module.WalletType;
    }, function (module) {
      EventNames = module.default;
    }, function (module) {
      gameCommonUtils = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15;

      cclegacy._RF.push({}, "6a28alX0x9LqZolglORGjjL", "SlotQuestMgr", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var HANDLED_TASK_CASE = ['T1', 'T2', 'T3', 'T4', 'T5', 'T6', 'T7', 'T8', 'T9', 'T10'];
      var SlotQuestMgr = exports('SlotQuestMgr', (_dec = ccclass('SlotQuestMgr'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Prefab
      }), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: QUEST_DISPLAY
      }), _dec6 = property({
        type: Label
      }), _dec7 = property({
        type: Node
      }), _dec8 = property({
        type: Label
      }), _dec9 = property({
        type: EventMiniProgress
      }), _dec10 = property({
        type: Node
      }), _dec11 = property({
        type: SlotGameMode
      }), _dec12 = property({
        type: sp.Skeleton
      }), _dec13 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(SlotQuestMgr, _GameObject);

        function SlotQuestMgr() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;
          _this.taskData = null;
          _this.openPosition = null;
          _this.closePosition = null;
          _this.updateInterval = null;
          _this.endTime = null;
          _this.coutdown = 0;
          _this.taskList = {};
          _this.questData = {};
          _this.minRow = 3;
          _this.state = EVENT_STATE.INVALID;

          _initializerDefineProperty(_this, "taskHolder", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "taskPrefab", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "board", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "displayType", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "rowHeight", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "offsetX", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "showing", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "remainTime", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "timeUpBoard", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "eventTitle", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "miniProgress", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "closeButton", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "hideGameMode", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "animEffect", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "panel", _descriptor15, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SlotQuestMgr.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          this.node.on('INIT_QUEST', this.initQuest.bind(this));
          this.node.on('UPDATE_QUEST', this.updateQuest.bind(this));
          this.node.on('REFRESH_LAYOUT', this.refreshLayout.bind(this));
          this.node.on('FORCE_UPDATE_QUEST', this.forceUpdateAll, this);
          game.on(Game.EVENT_HIDE, this.onEventHide, this);
          game.on(Game.EVENT_SHOW, this.onEventShow, this);
          this.updateInterval = setInterval(this.fixedUpdate.bind(this), 1000);
          this.eventManager.on(EventNames.TABLE_STOP_SPIN, this.tableStopSpin, this);
          this.eventManager.on(EventNames.BIGWIN_END, this.updateBigwin, this);
          this.eventManager.on(EventNames.JACKPOT_END, this.updateJackpot, this);
          this.eventManager.on(EventNames.FREEOPTION_RESULT_START, this.freeOptionStart, this);
          this.eventManager.on(EventNames.START_UPDATE_WALLET, this.updateWallet, this);
          this.eventManager.on(EventNames.GAME_RESET_SESSION, this.gameResetSession, this);
          this.eventManager.on(EventNames.FAST_TO_RESULT_FINISH, this.forceUpdateAll, this);
          this.eventManager.on(EventNames.SKIP_BIGWIN_FTR, this.updateBigwin, this);
          this.eventManager.on(EventNames.PLAY_ANIM_WINQUEST, this.forceUpdateAll, this);
          this.eventManager.on(EventNames.SPIN_CLICK_ACTION, this.forceUpdateAll, this);
          this.eventManager.on(EventNames.SWITCH_WALLET, this.onSwitchWallet, this);
          this.eventManager.on(EventNames.BET_UPDATE, this.onSwitchBet, this);
          this.remainTime.string = '';
          this.initPosition();
          this.node.active = false;
          globalThis.SlotQuestMgr = this;
        };

        _proto.onEventHide = function onEventHide() {
          log('[SlotQuestMgr] onGameHide');
        };

        _proto.onEventShow = function onEventShow() {
          log('[SlotQuestMgr] onGameShow');

          if (this.isQuestInPeriod()) {
            log('[SlotQuestMgr] show quest');

            if (this.dataStore.currentGameMode !== this.hideGameMode) {
              this.showIfAvailable();
            }
          } else {
            log('[SlotQuestMgr] quest is not in period time, hide');
            this.hide();
          }
        };

        _proto.isQuestInPeriod = function isQuestInPeriod() {
          var currentTime = new Date();
          var timeFloat = currentTime.getUTCHours() + currentTime.getUTCMinutes() / 100;
          var eventInfo = this.dataStore.questData.eventInfo;

          if (eventInfo && eventInfo.periodTime.length > 0) {
            log("[SlotQuestMgr] current time " + timeFloat);
            log("[SlotQuestMgr] period time " + eventInfo.periodTime);

            for (var i = 0; i < eventInfo.periodTime.length; i++) {
              var period = eventInfo.periodTime[i];

              if (timeFloat >= period[0] && timeFloat < period[1]) {
                return true;
              }
            }

            return false;
          }

          return true;
        };

        _proto.tableStopSpin = function tableStopSpin() {
          this.updateQuest(['T1', 'T3', 'T10', 'T2']);
        };

        _proto.updateJackpot = function updateJackpot() {
          this.updateQuest(['T4']);
        };

        _proto.updateBigwin = function updateBigwin() {
          this.updateQuest(['T5', 'T6', 'T7']); // bigwin
        };

        _proto.freeOptionStart = function freeOptionStart() {
          this.updateQuest(['T2']);
        };

        _proto.updateWallet = function updateWallet() {
          this.updateQuest(['T9']);
        };

        _proto.gameResetSession = function gameResetSession() {
          this.updateQuest([]);
        };

        _proto.forceUpdateAll = function forceUpdateAll() {
          log('force update quest ftr');
          this.updateQuest(HANDLED_TASK_CASE);
          this.updateQuest([]);
        };

        _proto.initPosition = function initPosition() {
          if (this.displayType == QUEST_DISPLAY.RUN_OUT) {
            this.openPosition = v3(this.board.position.x, this.board.position.y, 0);
            this.closePosition = v3(this.board.position.x - this.board.getComponent(UITransform).width + this.offsetX, this.board.position.y, 0);

            if (!this.showing) {
              this.board.setPosition(this.closePosition);
            }
          } else {
            this.board.active = false;
            this.openPosition = v3(this.board.position.x, this.board.position.y, 0);
            this.closePosition = v3(this.board.position.x, this.board.position.y + 10, 0);
          }
        };

        _proto.setDoneCurrent = function setDoneCurrent() {
          this.miniProgress.setDoneCurrent();
        };

        _proto.getEffectPosition = function getEffectPosition() {
          if (!this.showing) {
            return this.closeButton;
          } else {
            return this.miniProgress.getRewardPosition();
          }
        };

        _proto.fixedUpdate = function fixedUpdate() {
          if (this.coutdown > 0) {
            this.remainTime.string = this.getAvailableTime(this.coutdown);
            this.coutdown -= 1;

            if (this.coutdown < 10 && this.coutdown > 0) {
              this.setEffect('Countdown');
            }

            if (this.coutdown <= 0) {
              log("[SlotQuestMgr] quest is out of time");
              this.remainTime.string = '0:00:00';
              this.setState(EVENT_STATE.EXPIRED);
            }
          }
        };

        _proto.setEffect = function setEffect(effect) {
          if (effect === void 0) {
            effect = '';
          }

          if (this.animEffect) {
            if (effect == '') {
              this.animEffect.node.active = false;
            } else {
              if (!this.animEffect.node.active) this.animEffect.node.active = true;
              if (this.animEffect.animation != effect) this.animEffect.setAnimation(0, effect, true);
            }
          }
        };

        _proto.finishEvent = function finishEvent(callback) {
          var _this2 = this;

          this.closeEvent(function () {
            _this2.setState(EVENT_STATE.FINISHED);

            callback && callback();
          });
        };

        _proto.closeEvent = function closeEvent(callback) {
          var _this3 = this;

          this.setEffect('End');
          tween(this.node).delay(1).call(function () {
            _this3.hideBoard();
          }).delay(0.25).call(function () {
            _this3.setEffect('');

            callback && callback();
            _this3.node.active = false;
          }).start();
        };

        _proto.openEvent = function openEvent() {
          var _this4 = this;

          this.node.active = true;

          if (this.displayType == QUEST_DISPLAY.RUN_OUT) {
            this.setEffect('Start');
            tween(this.node).delay(1).call(function () {
              _this4.showBoard();
            }).delay(0.25).call(function () {
              _this4.setEffect('');
            }).start();
          } else {
            tween(this.node).delay(1).call(function () {
              _this4.setEffect('Start');

              _this4.showBoard();
            }).delay(3).call(function () {
              _this4.setEffect('');
            }).start();
          }
        };

        _proto.initQuest = function initQuest() {
          var _this$dataStore$quest = this.dataStore.questData,
              eventInfo = _this$dataStore$quest.eventInfo,
              taskData = _this$dataStore$quest.taskData,
              active = _this$dataStore$quest.active,
              questProcess = _this$dataStore$quest.questProcess;
          var eventTitle = eventInfo.eventTitle,
              serverTime = eventInfo.serverTime,
              endTime = eventInfo.endTime,
              progressStatus = eventInfo.progressStatus;
          this.taskList = {};
          this.taskHolder.removeAllChildren();
          var title = decodeURIComponent(eventTitle).replace(/\+/ig, ' ');

          if (title.length > 18) {
            this.eventTitle.string = title.slice(0, 16) + '..';
          } else {
            this.eventTitle.string = title;
          }

          if (this.miniProgress) {
            this.miniProgress.updateProgress(questProcess);
          }

          this.endTime = endTime;
          this.coutdown = (this.endTime - serverTime) / 1000;
          this.taskData = taskData;

          for (var i = 0; i < this.taskData.length; i++) {
            var taskId = this.taskData[i].Id;
            var task = instantiate(this.taskPrefab);
            task.setParent(this.taskHolder);
            task.getComponent('SlotTask').updateData(this.taskData[i]);
            this.taskList[taskId] = task;
          }

          if (active) {
            this.setState(EVENT_STATE.ACTIVE);
          } else {
            this.setState(EVENT_STATE.INACTIVE);
          }

          this.setQuestProgressLayout(progressStatus);
          this.updateStateQuest();
        };

        _proto.setQuestProgressLayout = function setQuestProgressLayout(progress) {
          if (progress == 0) {
            fadeIn(this.timeUpBoard, 0.5);

            if (this.dataStore.getCurrentWalletType() == WalletType.PROMOTE) {
              this.timeUpBoard.getComponentInChildren(Label).string = gameCommonUtils.getMessageSlot().EVENT_UNSUPPORT_WALLET;
            } else {
              this.timeUpBoard.getComponentInChildren(Label).string = gameCommonUtils.getMessageSlot().QUEST_LOCK;
            }
          } else {
            if (this.dataStore.getCurrentWalletType() == WalletType.PROMOTE) {
              this.timeUpBoard.getComponentInChildren(Label).string = gameCommonUtils.getMessageSlot().EVENT_UNSUPPORT_WALLET;
            } else {
              fadeOut(this.timeUpBoard, 0.5);
            }
          }
        };

        _proto.onSwitchBet = function onSwitchBet() {
          this.updateStateQuest();
        };

        _proto.onSwitchWallet = function onSwitchWallet(type) {
          this.updateStateQuest();
        };

        _proto.updateStateQuest = function updateStateQuest() {
          var _this$dataStore$quest2 = this.dataStore.questData,
              questProcess = _this$dataStore$quest2.questProcess,
              eventInfo = _this$dataStore$quest2.eventInfo;

          if (!eventInfo) {
            return;
          }

          var currentQuest = questProcess[eventInfo.currentIndex];
          var finishedCurrent = eventInfo.progressStatus == 2;
          var walletType = this.dataStore.getCurrentWalletType();

          if (walletType == WalletType.PROMOTE) {
            this.timeUpBoard.active = true;
            this.setOpacity(this.timeUpBoard, 255);
            this.timeUpBoard.getComponentInChildren(Label).string = gameCommonUtils.getMessageSlot().EVENT_UNSUPPORT_WALLET;
            this.timeUpBoard._uiProps.colorDirty = true;
          } else if (currentQuest.betIds.indexOf(this.dataStore.betData.betId) < 0) {
            this.timeUpBoard.active = true;
            this.setOpacity(this.timeUpBoard, 255);
            this.timeUpBoard.getComponentInChildren(Label).string = gameCommonUtils.getMessageSlot().EVENT_UNSUPPORT_BETID;
            this.timeUpBoard._uiProps.colorDirty = true;
          } else {
            if (!finishedCurrent && !eventInfo.isCurrentGame) {
              this.timeUpBoard.getComponentInChildren(Label).string = gameCommonUtils.getMessageSlot().QUEST_LOCK;
            } else {
              this.setOpacity(this.timeUpBoard, 0);
            }
          }
        };

        _proto.updateQuest = function updateQuest(questTypes) {
          var _this5 = this;

          if (questTypes === void 0) {
            questTypes = [];
          }

          var taskData = this.dataStore.questData.taskData;
          taskData.forEach(function (task) {
            if (_this5.taskList[task.Id]) {
              var taskComp = _this5.taskList[task.Id].getComponent('SlotTask');

              if (questTypes.indexOf(task.Id) >= 0 || questTypes.length == 0 && HANDLED_TASK_CASE.indexOf(task.Id) < 0) {
                log('update task id ' + task.Id);
                taskComp.updateData(task);
              }
            }
          });
        };

        _proto.refreshLayout = function refreshLayout() {
          var _this$dataStore$quest3 = this.dataStore.questData,
              active = _this$dataStore$quest3.active,
              questProcess = _this$dataStore$quest3.questProcess,
              eventInfo = _this$dataStore$quest3.eventInfo;
          log("refreshLayout " + this.config.GAME_ID + " " + questProcess);
          this.miniProgress.updateProgress(questProcess);

          if (eventInfo && eventInfo.isCurrentGame) {
            if (this.dataStore.getCurrentWalletType() == WalletType.PROMOTE) {
              this.timeUpBoard.getComponentInChildren(Label).string = gameCommonUtils.getMessageSlot().EVENT_UNSUPPORT_WALLET;
            } else {
              fadeOut(this.timeUpBoard, 0.5);
            }
          }

          if (active) {
            this.state = EVENT_STATE.ACTIVE;
            if (this.isQuestInPeriod()) this.showIfAvailable();
          } else {
            this.setState(EVENT_STATE.INACTIVE);
          }
        };

        _proto.forceCloseEvent = function forceCloseEvent() {
          var _this6 = this;

          var eventType = this.dataStore.questData.eventInfo.eventType;
          var message = eventType == 0 ? gameCommonUtils.getMessageSlot().EVENT_FORCE_CLOSE : gameCommonUtils.getMessageSlot().MISSION_FORCE_CLOSE;
          this.timeUpBoard.getComponentInChildren(Label).string = message;
          fadeIn(this.timeUpBoard, 0.2);
          this.state = EVENT_STATE.FINISHED;
          this.showBoard();
          this.scheduleOnce(function () {
            _this6.closeEvent(null);
          }, 10);
        };

        _proto.showIfAvailable = function showIfAvailable() {
          log("[SlotQuestMgr] showIfAvailable " + this.state);

          if (this.state != EVENT_STATE.INACTIVE && this.state != EVENT_STATE.INVALID && this.state != EVENT_STATE.FINISHED && !this.dataStore.isTrialMode && (this.dataStore.currentGameMode == SlotGameMode.NormalGame || this.dataStore.currentGameMode == SlotGameMode.FreeGame)) {
            this.node.active = true;
          }
        };

        _proto.openQuestDetail = function openQuestDetail() {
          this.soundPlayer.playSFXClick();
          director.emit('OPEN_QUEST_PROGRESS');
          if (this.showing) this.guiMgr.activeQuestProcess(true);
        };

        _proto.onShowHide = function onShowHide() {
          if (this.showing) {
            this.hideBoard();
          } else {
            this.showBoard();
          }
        };

        _proto.show = function show() {
          log("[SlotQuestMgr] show " + this.state);

          if (this.state != EVENT_STATE.INACTIVE) {
            this.node.active = true;
          }
        };

        _proto.hide = function hide() {
          this.node.active = false;
        };

        _proto.setState = function setState(state) {
          log("[SlotQuestMgr] setState " + state);
          if (this.state == state) return;
          this.state = state;

          switch (this.state) {
            case EVENT_STATE.INVALID:
              this.node.active = false;
              break;

            case EVENT_STATE.ACTIVE:
              this.openEvent();
              break;

            case EVENT_STATE.INACTIVE:
              this.node.active = false;
              break;

            case EVENT_STATE.FINISHED:
              this.node.active = false;
              break;

            case EVENT_STATE.EXPIRED:
              this.closeEvent(null);
              break;

            default:
              this.node.active = false;
              break;
          }
        };

        _proto.hideBoard = function hideBoard() {
          var _this7 = this;

          this.showing = false;
          this.soundPlayer.playSFXClick();

          if (this.displayType == QUEST_DISPLAY.RUN_OUT) {
            tween(this.board).to(0.2, {
              position: this.closePosition
            }).start();
          } else {
            tween(this.board).call(function () {
              _this7.fadeTo(_this7.board, 0.2, 1);
            }).to(0.2, {
              position: this.closePosition
            }).call(function () {
              _this7.board.active = false;
            }).start();
          }
        };

        _proto.showBoard = function showBoard() {
          var _this8 = this;

          if (this.showing) return;
          this.showing = true;
          this.soundPlayer.playSFXClick();

          if (this.displayType == QUEST_DISPLAY.RUN_OUT) {
            tween(this.board).to(0.2, {
              position: this.openPosition
            }).start();
          } else {
            this.board.active = true;
            this.setOpacity(this.board, 1);
            tween(this.board).call(function () {
              fadeIn(_this8.board, 0.3);
            }).to(0.3, {
              position: this.openPosition
            }).start();
          }

          this.miniProgress.updateScrollView();
        };

        _proto.onDestroy = function onDestroy() {
          game.off(Game.EVENT_HIDE, this.onEventHide, this);
          game.off(Game.EVENT_SHOW, this.onEventShow, this);
          this.eventManager.off(EventNames.TABLE_STOP_SPIN, this.tableStopSpin, this);
          this.eventManager.off(EventNames.BIGWIN_END, this.updateBigwin, this);
          this.eventManager.off(EventNames.SKIP_BIGWIN_FTR, this.updateBigwin, this);
          this.eventManager.off(EventNames.JACKPOT_END, this.updateJackpot, this);
          this.eventManager.off(EventNames.FREEOPTION_RESULT_START, this.freeOptionStart, this);
          this.eventManager.off(EventNames.START_UPDATE_WALLET, this.updateWallet, this);
          this.eventManager.off(EventNames.GAME_RESET_SESSION, this.gameResetSession, this);
          this.eventManager.off(EventNames.FAST_TO_RESULT_FINISH, this.forceUpdateAll, this);
          this.eventManager.off(EventNames.PLAY_ANIM_WINQUEST, this.forceUpdateAll, this);
          this.eventManager.off(EventNames.SPIN_CLICK_ACTION, this.forceUpdateAll, this);
          if (this.updateInterval) clearInterval(this.updateInterval);
          this.unscheduleAllCallbacks();
        };

        _proto.getAvailableTime = function getAvailableTime(secs) {
          var sec_num = parseInt(secs, 10);
          var days = Math.floor(sec_num / 86400);

          if (days >= 1) {
            return this.secondsToDDHHMMSS(secs);
          } else {
            return secondsToHHMMSS(secs);
          }
        };

        _proto.secondsToDDHHMMSS = function secondsToDDHHMMSS(secs) {
          if (secs == 0) return "00:00";
          var sec_num = parseInt(secs, 10);
          var days = Math.floor(sec_num / 86400);
          var hours = Math.floor(sec_num / 3600) - days * 24;
          var minutes = Math.floor(sec_num / 60) % 60;
          var seconds = sec_num % 60;
          return days + "N " + [hours, minutes, seconds].map(function (v) {
            return v < 10 ? "0" + v : v;
          }).filter(function (v, i) {
            return v !== "00" || i > 0;
          }).join(":");
        };

        return SlotQuestMgr;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "taskHolder", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "taskPrefab", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "board", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "displayType", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return QUEST_DISPLAY.RUN_OUT;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "rowHeight", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 40;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "offsetX", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 35;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "showing", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "remainTime", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "timeUpBoard", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "eventTitle", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "miniProgress", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "closeButton", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "hideGameMode", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return SlotGameMode.Others;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "animEffect", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "panel", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotReel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, instantiate, tween, Vec3, log, warn, error, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      instantiate = module.instantiate;
      tween = module.tween;
      Vec3 = module.Vec3;
      log = module.log;
      warn = module.warn;
      error = module.error;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "4dcc5cDevtKfLFxB7IHGGN8", "SlotReel", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotReel = exports('SlotReel', (_dec = ccclass('SlotReel'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SlotReel, _Component);

        function SlotReel() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.startSpinTween = null;
          _this.stopSpinTween = null;
          _this.currentSpeed = 40;
          _this.isShowingResult = false;
          _this.rollingCount = 0;
          _this.rate = 1;
          _this.totalSymbols = 5;
          _this.reelIndex = 0;
          _this.config = {};
          _this.reelConfig = {};
          _this.symbolList = [];
          _this.isFreeMode = false;
          _this.symbolStartY = 0;
          _this.showNumber = 0;
          _this.stop = 0;
          _this.isFastToResult = false;
          _this.callBackDelayStop = null;
          _this.symbols = [];
          _this.result = [];
          _this.callbackStop = null;
          _this.totalScrolling = 0;
          _this.previousY = 0;
          _this.currentIndex = 0;
          _this.isSpinning = false;
          _this.targetY = 0;
          _this.tweenTime = 0;
          _this.extendTime = 0;
          _this.symbolPos = [];
          _this.showSymbols = [];
          _this.symbolHeight = 0;
          _this._lastY = void 0;
          return _this;
        }

        var _proto = SlotReel.prototype;

        _proto.onLoad = function onLoad() {
          this.node.on("INIT", this.init, this);
          this.node.on("START_SPIN", this.startSpinning, this);
          this.node.on("STOP_SPIN", this.stopSpinningWithDelay, this);
          this.node.on("STOP_SPIN", this.initSymbolBetHistory, this);
          this.node.on("UPDATE_SYMBOLS", this.updateSymbols, this);
          this.node.on("FAST_STOP", this.fastStopSpinning, this);
          this.node.on("HIDE_SYMBOL", this.hideSymbol, this);
          this.node.on("EXTEND_TIME_STOP", this.extendTimeToStop, this);
          this.node.on("UPDATE_NEAR_WIN_SPEED", this.updateNearWinSpeed, this);
          this.node.on("RANDOM_SYMBOLS", this.randomSymbols, this);
          this.node.getShowSymbols = this.getShowSymbols.bind(this);
        };

        _proto.init = function init(tableFormat, gameConfig, col, symbolPrefab, isFreeMode) {
          if (tableFormat === void 0) {
            tableFormat = [];
          }

          if (gameConfig === void 0) {
            gameConfig = {};
          }

          if (col === void 0) {
            col = 0;
          }

          if (symbolPrefab === void 0) {
            symbolPrefab = null;
          }

          if (isFreeMode === void 0) {
            isFreeMode = false;
          }

          this.config = gameConfig;
          var _gameConfig = gameConfig,
              NORMAL_SYMBOLS = _gameConfig.NORMAL_SYMBOLS,
              FREE_SYMBOLS = _gameConfig.FREE_SYMBOLS,
              TABLE_BUFFER = _gameConfig.TABLE_BUFFER,
              SYMBOL_HEIGHT = _gameConfig.SYMBOL_HEIGHT,
              SYMBOL_HEIGHT_FREE_GAME = _gameConfig.SYMBOL_HEIGHT_FREE_GAME,
              EXCEPTION_SYMBOLS = _gameConfig.EXCEPTION_SYMBOLS;
          this.symbolHeight = isFreeMode && SYMBOL_HEIGHT_FREE_GAME ? SYMBOL_HEIGHT_FREE_GAME : SYMBOL_HEIGHT;
          this.reelIndex = col;
          this.symbolList = isFreeMode ? FREE_SYMBOLS[col] : NORMAL_SYMBOLS[col];
          this.isFreeMode = isFreeMode;
          this.showNumber = tableFormat[col];
          this.totalSymbols = this.showNumber + TABLE_BUFFER.TOP + TABLE_BUFFER.BOT;
          this.symbolStartY = -(this.showNumber / 2 + TABLE_BUFFER.BOT - 0.5) * this.symbolHeight;
          this.showSymbols = [];

          for (var index = 0; index < this.totalSymbols; index++) {
            var symbol = instantiate(symbolPrefab);
            symbol.setPosition(0, this.symbolStartY + index * this.symbolHeight);
            this.node.addChild(symbol);
            symbol.emit('CHANGE_TO_SYMBOL', this.getRandomSymbolNameWithExceptions(EXCEPTION_SYMBOLS ? EXCEPTION_SYMBOLS : ["A", "R", "K"]));
            this.symbols.push(symbol);
            this.symbolPos.push(symbol.position.y);

            if (index >= TABLE_BUFFER.BOT && index < this.totalSymbols - TABLE_BUFFER.TOP) {
              this.showSymbols.unshift(symbol);
            }
          }
        };

        _proto.getShowSymbols = function getShowSymbols() {
          return this.showSymbols;
        };

        _proto.startSpinning = function startSpinning(reelIndex, reelConfig) {
          var _this2 = this;

          if (reelConfig === void 0) {
            reelConfig = {};
          }

          this.reelConfig = reelConfig;
          this.reelIndex = reelIndex;

          if (this.startSpinTween) {
            this.startSpinTween.stop();
          }

          var _this$reelConfig = this.reelConfig,
              DELAY_START = _this$reelConfig.DELAY_START,
              EASING_DISTANCE = _this$reelConfig.EASING_DISTANCE;
          this.startSpinTween = tween(this.node).to(DELAY_START / 2, {
            position: new Vec3(this.node.position.x, EASING_DISTANCE, 0)
          }).to(DELAY_START / 2, {
            position: new Vec3(this.node.position.x, 0, 0)
          }).call(function () {
            _this2.setUpConfig();
          });
          this.startSpinTween.start();
        };

        _proto.stopSpinningWithDelay = function stopSpinningWithDelay(data, callbackStop) {
          var _this3 = this;

          this.showSymbols = [];
          this.callbackStop = callbackStop;
          this.result = [].concat(data);
          var _this$reelConfig2 = this.reelConfig,
              DELAY_STOP = _this$reelConfig2.DELAY_STOP,
              EASING_TIME = _this$reelConfig2.EASING_TIME,
              IS_TURBO = _this$reelConfig2.IS_TURBO;
          var delayTime = IS_TURBO ? DELAY_STOP : (this.reelIndex + 1) * EASING_TIME + DELAY_STOP;

          this.callBackDelayStop = function () {
            _this3.stop = 0;
            _this3.isShowingResult = true;
            _this3.callBackDelayStop = null;
            var TOTAL_CIRCULAR = _this3.reelConfig.TOTAL_CIRCULAR;
            var distanceMove = TOTAL_CIRCULAR * _this3.symbolHeight;
            _this3.targetY = _this3.node.position.y - distanceMove + _this3.totalScrolling;

            _this3.stopSpinningWithSteps();
          };

          this.unschedule(this.callBackDelayStop);
          this.scheduleOnce(this.callBackDelayStop, delayTime + this.extendTime);
        };

        _proto.stopSpinningWithSteps = function stopSpinningWithSteps() {
          var _this4 = this;

          this.tweenTime = (this.targetY - this.node.position.y) * 1.5 / this.currentSpeed;

          if (this.stopSpinTween) {
            this.stopSpinTween.stop();
          }

          var EASING_DISTANCE = this.reelConfig.EASING_DISTANCE;
          this.stopSpinTween = tween(this.node).to(Math.abs(this.tweenTime) + 0.08, {
            position: new Vec3(this.node.position.x, this.targetY - EASING_DISTANCE, 0)
          }, {
            easing: "sineOut",
            onUpdate: function onUpdate() {
              _this4.circulateSymbols();
            }
          }).call(function () {
            _this4.isFastToResult = true;
          }).to(0.08, {
            position: new Vec3(this.node.position.x, this.targetY, 0)
          }, {
            onUpdate: function onUpdate() {
              _this4.circulateSymbols();
            }
          }).call(function () {
            _this4.reset();

            _this4.onReelStop();

            if (_this4.callbackStop) {
              _this4.callbackStop();

              _this4.callbackStop = null;
            }

            _this4.isSpinning = false;
            _this4.stopSpinTween = null;
          });
          this.stopSpinTween.start();
        };

        _proto.onReelStop = function onReelStop() {
          this.testResult();
          this.extendTime = 0;
        };

        _proto.fastStopSpinning = function fastStopSpinning() {
          if (this.isFastToResult || !this.isSpinning) return;

          if (this.rollingCount >= this.reelConfig.TOTAL_CIRCULAR - 1) {
            return;
          }

          this.isFastToResult = true;
          this.rate = 2;
          this.currentSpeed = this.config.MAX_SPEED * 3;

          if (this.callBackDelayStop) {
            this.unschedule(this.callBackDelayStop);
            this.callBackDelayStop();
          } else if (this.stopSpinTween) {
            this.stopSpinningWithSteps();
          }
        };

        _proto.setUpConfig = function setUpConfig() {
          this.rate = this.reelConfig.RATE;
          this.currentSpeed = this.config.MIN_SPEED;
          this.rollingCount = 0;
          this.isSpinning = true;
          this.totalScrolling = 0;
          this.isShowingResult = false;
          this.isFastToResult = false;
          this.previousY = 0;
          this.extendTime = 0; // this.reset();
        };

        _proto.reset = function reset() {
          var TABLE_BUFFER = this.config.TABLE_BUFFER;
          this.node.setPosition(this.node.position.x, 0);
          this.symbols.sort(function (a, b) {
            return a.position.y - b.position.y;
          });
          var showSymbolCount = 0;
          this.showSymbols = [];

          for (var index = 0; index < this.symbols.length; index++) {
            var symbol = this.symbols[index];

            if (symbol) {
              symbol.setPosition(new Vec3(symbol.position.x, this.symbolPos[index], 0));

              if (index >= TABLE_BUFFER.BOT && index < this.symbols.length - TABLE_BUFFER.TOP) {
                this.showSymbols.unshift(symbol);
                var symbolValue = this.result[showSymbolCount];
                symbol.emit('CHANGE_TO_SYMBOL', symbolValue);
                showSymbolCount++;
              } else {
                symbol.emit('CHANGE_TO_SYMBOL', symbol['symbol']);
              }
            }
          }

          this.currentIndex = 0;
        };

        _proto.getRandomSymbolNameWithExceptions = function getRandomSymbolNameWithExceptions(exceptionSymbols) {
          var symbol = this.getRandomSymbolName();

          for (var i = 0; i < exceptionSymbols.length; i++) {
            if (symbol == exceptionSymbols[i]) {
              symbol = this.getRandomSymbolNameWithExceptions(exceptionSymbols);
              break;
            }
          }

          return symbol;
        };

        _proto.getRandomSymbolName = function getRandomSymbolName() {
          return this.symbolList[Math.floor(Math.random() * this.symbolList.length)];
        };

        _proto.update = function update(dt) {
          var delta = dt >= 0.0167 ? 0.0167 : dt;

          if (this.isSpinning) {
            if (this.currentSpeed < this.config.MAX_SPEED && this.rate == 1) {
              this.currentSpeed += this.config.ACCEL * delta;
            } else if (!this.isFastToResult) {
              this.currentSpeed = this.config.MAX_SPEED;
            }

            if (!this.isShowingResult) {
              this.node.setPosition(this.node.position.x, this.node.position.y - this.currentSpeed * delta);
            }

            if (this.previousY != this.node.position.y) {
              this.totalScrolling += Math.abs(this.previousY - this.node.position.y);
              this.previousY = this.node.position.y;
            }
          }

          if (!this.isShowingResult) {
            this.circulateSymbols();
          }
        };

        _proto.circulateSymbols = function circulateSymbols() {
          var TABLE_BUFFER = this.config.TABLE_BUFFER;

          while (this.totalScrolling >= this.symbolHeight) {
            var lastSymbol = this.symbols[this.currentIndex];
            var posY = lastSymbol.position.y;
            posY += this.symbolHeight * this.totalSymbols;
            lastSymbol.setPosition(new Vec3(lastSymbol.position.x, posY, 0));
            this.currentIndex = (this.currentIndex + 1) % this.symbols.length;
            this.totalScrolling = this.totalScrolling - this.symbolHeight;
            var symbolName = this.getRandomSymbolName();

            if (this.isShowingResult) {
              this.rollingCount++;
              var offsetToStop = this.showNumber + TABLE_BUFFER.TOP - 1;
              var stopCount = this.reelConfig.TOTAL_CIRCULAR - offsetToStop;

              if (this.rollingCount >= stopCount && this.rollingCount < stopCount + this.showNumber) {
                symbolName = this.result[this.stop];
                this.showRealSymbols(lastSymbol, symbolName);
                this.stop++;
              } else {
                this.showFakeSymbols(lastSymbol, symbolName);
              }
            } else {
              this.showFakeSymbols(lastSymbol, symbolName);
            }
          }
        };

        _proto.showFakeSymbols = function showFakeSymbols(lastSymbol, symbolName) {
          if (this.reelIndex === 0 && this.isFastToResult) {
            log("Show Blur Fake Symbol: " + symbolName);
          }

          lastSymbol.emit('CHANGE_TO_BLUR_SYMBOL', symbolName);
        };

        _proto.showRealSymbols = function showRealSymbols(lastSymbol, symbolName) {
          lastSymbol.emit('CHANGE_TO_SYMBOL', symbolName);
        };

        _proto.extendTimeToStop = function extendTimeToStop(isNearWin) {
          if (isNearWin === void 0) {
            isNearWin = false;
          }

          var DELAY_STOP = this.reelConfig.DELAY_STOP;
          var _this$config = this.config,
              NORMAL_TABLE_FORMAT = _this$config.NORMAL_TABLE_FORMAT,
              FREE_TABLE_FORMAT = _this$config.FREE_TABLE_FORMAT;
          var tableFormat = this.isFreeMode ? FREE_TABLE_FORMAT : NORMAL_TABLE_FORMAT;
          this.extendTime = 0;

          if (isNearWin) {
            this.extendTime = this.reelConfig.NEAR_WIN_DELAY * this.reelIndex;
          } else {
            this.extendTime = this.reelConfig.NEAR_WIN_DELAY * (this.reelIndex - 1) + DELAY_STOP;
          }

          if (this.reelIndex === tableFormat.length - 1 && isNearWin) {
            this.extendTime = this.reelConfig.NEAR_WIN_DELAY_LAST_REEL * this.reelIndex;
          }
        };

        _proto.initSymbolBetHistory = function initSymbolBetHistory() {// to do
        };

        _proto.randomSymbols = function randomSymbols() {
          var _this5 = this;

          var EXCEPTION_SYMBOLS = this.config.EXCEPTION_SYMBOLS;
          this.symbols.forEach(function (sym) {
            sym.emit('CHANGE_TO_SYMBOL', _this5.getRandomSymbolNameWithExceptions(EXCEPTION_SYMBOLS ? EXCEPTION_SYMBOLS : ["A", "R", "K"]));
          });
        };

        _proto.updateSymbols = function updateSymbols(symbols) {
          this.showSymbols.forEach(function (sym, index) {
            sym.emit('CHANGE_TO_SYMBOL', symbols[index]);
          });
        };

        _proto.stopReelRoll = function stopReelRoll() {
          this.isSpinning = false;

          if (this.stopSpinTween) {
            this.stopSpinTween.stop();
          }
        };

        _proto.hideSymbol = function hideSymbol(row, symbol, isShow) {
          if (this.showSymbols[row]) {
            this.showSymbols[row].emit(isShow ? 'SHOW_SYMBOL' : 'HIDE_SYMBOL', symbol);
          }
        };

        _proto.updateNearWinSpeed = function updateNearWinSpeed() {
          this.currentSpeed = this.config.SUPER_SPEED;
        };

        _proto.testResult = function testResult() {
          if (!this.result) {
            warn("do not have result");
            return;
          }

          var _realResult = this.result.slice().reverse();

          var _showingResult = [];
          this.showSymbols.forEach(function (sb) {
            return _showingResult.push(sb['symbol']);
          });

          if (JSON.stringify(_realResult) !== JSON.stringify(_showingResult)) {
            error("wrong matrix: ", {
              realResult: _realResult,
              showingResult: _showingResult
            });
          }
        };

        return SlotReel;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotReelv2.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, instantiate, tween, Vec3, warn, error, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      instantiate = module.instantiate;
      tween = module.tween;
      Vec3 = module.Vec3;
      warn = module.warn;
      error = module.error;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "5ec1fhcnpNCDJP/Vrsyn12i", "SlotReelv2", undefined);

      var ccclass = _decorator.ccclass;
      var SlotReelv2 = exports('SlotReelv2', (_dec = ccclass('SlotReelv2'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SlotReelv2, _Component);

        function SlotReelv2() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._higherHolder = null;
          _this._topSymbol = null;
          _this._botSymbol = null;
          _this.showSymbols = [];
          _this.symbols = [];
          _this.config = {};
          _this.symbolHeight = 0;
          _this.reelIndex = 0;
          _this.symbolList = [];
          _this.showNumber = 0;
          _this.totalSymbols = 5;
          _this.symbolStartY = 0;
          _this.symbolPos = [];
          _this.reelConfig = {};
          _this.currentSpeed = 0;
          _this.currentIndex = 0;
          _this.stop = 0;
          _this.extendTime = 0;
          _this.step = void 0;
          _this.result = [];
          _this.isSpinning = false;
          _this.isShowingResult = false;
          _this.isNearWin = false;
          _this.isFastToResult = false;
          _this.isFreeMode = false;
          _this.callbackStop = void 0;
          _this.callBackDelayStop = void 0;
          _this.MAX_STEP = Number.MAX_SAFE_INTEGER;
          return _this;
        }

        var _proto = SlotReelv2.prototype;

        _proto.onLoad = function onLoad() {
          this.node.on("INIT", this.init, this);
          this.node.on("START_SPIN", this.startSpinning, this);
          this.node.on("STOP_SPIN", this.stopSpinningWithDelay, this);
          this.node.on("UPDATE_SYMBOLS", this.updateSymbols, this);
          this.node.on("FAST_STOP", this.fastStopSpinning, this);
          this.node.on("HIDE_SYMBOL", this.hideSymbol, this);
          this.node.on("EXTEND_TIME_STOP", this.extendTimeToStop, this);
          this.node.on("UPDATE_NEAR_WIN_SPEED", this.updateNearWinSpeed, this);
          this.node.on("RANDOM_SYMBOLS", this.randomSymbols, this);
          this.node.on("ADJUST_REEL_SPEED", this.adjustReelSpeed, this);
          this.node.getShowSymbols = this.getShowSymbols.bind(this);
        };

        _proto.init = function init(tableFormat, gameConfig, col, symbolPrefab, isFreeMode) {
          if (tableFormat === void 0) {
            tableFormat = [];
          }

          if (gameConfig === void 0) {
            gameConfig = {};
          }

          if (col === void 0) {
            col = 0;
          }

          if (symbolPrefab === void 0) {
            symbolPrefab = null;
          }

          if (isFreeMode === void 0) {
            isFreeMode = false;
          }

          this.config = gameConfig;
          var _gameConfig = gameConfig,
              NORMAL_SYMBOLS = _gameConfig.NORMAL_SYMBOLS,
              FREE_SYMBOLS = _gameConfig.FREE_SYMBOLS,
              TABLE_BUFFER = _gameConfig.TABLE_BUFFER,
              SYMBOL_HEIGHT = _gameConfig.SYMBOL_HEIGHT,
              SYMBOL_HEIGHT_FREE_GAME = _gameConfig.SYMBOL_HEIGHT_FREE_GAME,
              EXCEPTION_SYMBOLS = _gameConfig.EXCEPTION_SYMBOLS;
          this.symbolHeight = isFreeMode && SYMBOL_HEIGHT_FREE_GAME ? SYMBOL_HEIGHT_FREE_GAME : SYMBOL_HEIGHT;
          this.reelIndex = col;
          this.symbolList = isFreeMode ? FREE_SYMBOLS[col] : NORMAL_SYMBOLS[col];
          this.isFreeMode = isFreeMode;
          this.showNumber = tableFormat[col];
          this.totalSymbols = this.showNumber + TABLE_BUFFER.TOP + TABLE_BUFFER.BOT;
          this.symbolStartY = -(this.showNumber / 2 + TABLE_BUFFER.BOT - 0.5) * this.symbolHeight;
          this.showSymbols = [];
          this.currentIndex = 0;

          for (var index = 0; index < this.totalSymbols; index++) {
            var symbol = instantiate(symbolPrefab);
            symbol.setPosition(0, this.symbolStartY + index * this.symbolHeight);
            this.node.addChild(symbol);
            symbol.emit('SET_SYMBOL_MODE', isFreeMode);
            var randomSymbol = this.getRandomSymbolNameWithExceptions(EXCEPTION_SYMBOLS || ["A", "R", "K"]);
            symbol.emit('CHANGE_TO_SYMBOL', randomSymbol);
            this.symbols.push(symbol);
            this.symbolPos.push(symbol.position.y);

            if (index >= TABLE_BUFFER.BOT && index < this.totalSymbols - TABLE_BUFFER.TOP) {
              this.showSymbols.unshift(symbol);
            }
          }

          this.reset();
        };

        _proto.startSpinning = function startSpinning(reelIndex, reelConfig) {
          var _this2 = this;

          if (reelConfig === void 0) {
            reelConfig = {};
          }

          this.step = this.MAX_STEP - 1;
          this.reelConfig = reelConfig;
          this.reelIndex = reelIndex;
          this.setUpConfig();
          var DELAY_START = this.reelConfig.DELAY_START;
          var currentSpeed = this.reelConfig.TIME;
          tween(this.node).delay(DELAY_START * reelIndex).by(currentSpeed, {
            position: new Vec3(0, 25)
          }).by(currentSpeed, {
            position: new Vec3(0, -25)
          }).call(function () {
            _this2.runSpinning();
          }).start();
        };

        _proto.stopSpinningWithDelay = function stopSpinningWithDelay(data, callbackStop) {
          this.showSymbols = [];
          this.callbackStop = callbackStop;
          this.result = [].concat(data);
          this.isNearWin = false;
          var _this$reelConfig = this.reelConfig,
              DELAY_STOP = _this$reelConfig.DELAY_STOP,
              EASING_TIME = _this$reelConfig.EASING_TIME,
              IS_TURBO = _this$reelConfig.IS_TURBO;
          var delayTime = IS_TURBO ? DELAY_STOP : (this.reelIndex + 1) * EASING_TIME + DELAY_STOP;
          this.unschedule(this.setStepToStop);
          this.scheduleOnce(this.setStepToStop, delayTime + this.extendTime); // buffer bot = 1, unshift one more

          this.result.unshift(this.getRandomSymbolNameWithExceptions('A')); // buffer top = 1, push one more

          this.result.push(this.getRandomSymbolNameWithExceptions('R'));
        };

        _proto.updateSymbols = function updateSymbols(symbolNames) {
          this.showSymbols.forEach(function (symbol, index) {
            symbol.emit('CHANGE_TO_SYMBOL', symbolNames[index]);
          });
        };

        _proto.fastStopSpinning = function fastStopSpinning(remainStep) {
          //check step is reset will not do anything.
          if (this.step === this.MAX_STEP) return;
          if (this.isFastToResult) return;
          this.isFastToResult = true;
          this.unschedule(this.setStepToStop);
          this.isShowingResult = true;
          this.currentSpeed = this.currentSpeed / 3;
        };

        _proto.hideSymbol = function hideSymbol(row, symbol, isShow) {
          if (this.showSymbols[row]) {
            this.showSymbols[row].emit(isShow ? 'SHOW_SYMBOL' : 'HIDE_SYMBOL', symbol);
          }
        };

        _proto.extendTimeToStop = function extendTimeToStop() {
          var _this$config = this.config,
              NORMAL_TABLE_FORMAT = _this$config.NORMAL_TABLE_FORMAT,
              FREE_TABLE_FORMAT = _this$config.FREE_TABLE_FORMAT;
          var tableFormat = this.isFreeMode ? FREE_TABLE_FORMAT : NORMAL_TABLE_FORMAT;
          this.extendTime = 0;

          if (this.reelIndex === tableFormat.length - 1) {
            this.extendTime = this.reelConfig.NEAR_WIN_DELAY_LAST_REEL * this.reelIndex;
          } else {
            this.extendTime = this.reelConfig.NEAR_WIN_DELAY * this.reelIndex;
          }

          this.unschedule(this.setStepToStop);
          this.scheduleOnce(this.setStepToStop, this.extendTime);
        };

        _proto.updateNearWinSpeed = function updateNearWinSpeed() {
          this.currentSpeed = this.config.SUPER_TURBO;
        };

        _proto.randomSymbols = function randomSymbols() {
          var _this3 = this;

          var EXCEPTION_SYMBOLS = this.config.EXCEPTION_SYMBOLS;
          this.symbols.forEach(function (sym) {
            sym.emit('CHANGE_TO_SYMBOL', _this3.getRandomSymbolNameWithExceptions(EXCEPTION_SYMBOLS || ["A", "R", "K"]));
          });
        };

        _proto.getShowSymbols = function getShowSymbols() {
          return this.showSymbols;
        };

        _proto.adjustReelSpeed = function adjustReelSpeed(speed) {
          this.currentSpeed = speed;
        };

        _proto.runSpinning = function runSpinning() {
          var _this4 = this;

          this.runSpinningAnimation(function () {
            if (_this4.step > _this4.showNumber) {
              _this4.runSpinning();

              _this4.step--;

              if (_this4.step < _this4.totalSymbols) {
                _this4.isShowingResult = true;
              }
            } else if (_this4.step == _this4.showNumber) {
              var EASING_DISTANCE = _this4.reelConfig.EASING_DISTANCE;

              _this4.runStopAnimation(EASING_DISTANCE, 0.08);
            }
          });
        };

        _proto.setUpConfig = function setUpConfig() {
          this.currentSpeed = this.reelConfig.TIME;
          this.isSpinning = true;
          this.isShowingResult = false;
          this.isFastToResult = false;
          this.extendTime = 0;
        };

        _proto.runSpinningAnimation = function runSpinningAnimation(callback) {
          var _this5 = this;

          var time = this.currentSpeed + this.currentSpeed * this.stop / 4;
          tween(this.node).by(time, {
            position: new Vec3(0, -1 * this.config.SYMBOL_HEIGHT, 0)
          }).call(function () {
            _this5.circulateSymbols();

            callback && callback();
          }).start();
        };

        _proto.circulateSymbols = function circulateSymbols() {
          var lastSymbol = this.symbols[this.currentIndex % this.totalSymbols];
          var symbolValue = this.getRandomSymbolName();

          if (!this.isShowingResult) {
            lastSymbol.emit('CHANGE_TO_BLUR_SYMBOL', symbolValue);
          } else if (this.stop < this.totalSymbols) {
            var isRealSymbol = this._isRealSymbol();

            symbolValue = this.result[this.stop];
            this.step = this.totalSymbols + this.showNumber - (this.stop + this.config.TABLE_BUFFER.BOT);

            if (isRealSymbol) {
              lastSymbol.emit('CHANGE_TO_SYMBOL', symbolValue);
              this.showSymbols.unshift(lastSymbol);
            } else {
              lastSymbol.emit('CHANGE_TO_BLUR_SYMBOL', symbolValue);
            }

            this.stop++;
          }

          var posY = lastSymbol.position.y;
          posY += this.symbolHeight * this.totalSymbols;
          lastSymbol.setPosition(new Vec3(lastSymbol.position.x, posY, 0));
          this.currentIndex++;
        };

        _proto._isRealSymbol = function _isRealSymbol() {
          var _this$config$TABLE_BU = this.config.TABLE_BUFFER,
              TOP = _this$config$TABLE_BU.TOP,
              BOT = _this$config$TABLE_BU.BOT;
          return this.stop >= BOT && this.stop < this.showNumber + TOP;
        };

        _proto.runStopAnimation = function runStopAnimation(indexNearWin, time) {
          var _this6 = this;

          var timer = time ? time : this.reelConfig.TIME;
          this.onReelStop();
          tween(this.node).by(timer, {
            position: new Vec3(0, -indexNearWin)
          }).by(timer, {
            position: new Vec3(0, indexNearWin)
          }).call(function () {
            _this6.reset();

            _this6.callbackStop(); // stop schedule when reel is stopped


            _this6.unschedule(_this6.setStepToStop);

            _this6.currentSpeed = _this6.reelConfig.TIME;
          }).start();
        };

        _proto.setStepToStop = function setStepToStop() {
          this.step = this.reelConfig.STEP_STOP * 2 - this.totalSymbols;
        };

        _proto.onReelStop = function onReelStop() {
          this.symbols.forEach(function (child) {
            child.emit("CHANGE_TO_SYMBOL", child['symbol']);
          }); // this.testResult();
        };

        _proto.getRandomSymbolNameWithExceptions = function getRandomSymbolNameWithExceptions(exceptionSymbols) {
          var symbol = this.getRandomSymbolName();
          return exceptionSymbols.includes(symbol) ? this.getRandomSymbolNameWithExceptions(exceptionSymbols) : symbol;
        };

        _proto.getRandomSymbolName = function getRandomSymbolName() {
          return this.symbolList[Math.floor(Math.random() * this.symbolList.length)];
        };

        _proto.reset = function reset() {
          var _this7 = this; // reset currentIndex


          this.symbols.sort(function (a, b) {
            return a.position.y - b.position.y;
          });
          this.currentIndex = 0; // reset reel position

          this.symbols.forEach(function (symbol, index) {
            return symbol.setPosition(symbol.position.x, _this7.symbolPos[index]);
          });
          this.node.setPosition(this.node.position.x, 0);
          this.stop = 0;
          this.step = this.MAX_STEP;
          this.isShowingResult = false;
          this.result = [];
          this.isSpinning = false;
        };

        _proto.testResult = function testResult() {
          if (!this.result) {
            warn("do not have result");
            return;
          }

          var _realResult = this.result.slice().reverse();

          var _showingResult = [];
          this.showSymbols.forEach(function (sb) {
            return _showingResult.push(sb['symbol']);
          });

          if (JSON.stringify(_realResult) !== JSON.stringify(_showingResult)) {
            error("wrong matrix: ", {
              realResult: _realResult,
              showingResult: _showingResult
            });
          }
        };

        return SlotReelv2;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotSoundPlayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CustomType.ts', './CustomEnum.ts', './GameObject.ts', './SoundPlayerImpl.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, CustomEvent, SlotGameMode, GameObject, SoundPlayerImpl;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      CustomEvent = module.CustomEvent;
    }, function (module) {
      SlotGameMode = module.SlotGameMode;
    }, function (module) {
      GameObject = module.GameObject;
    }, function (module) {
      SoundPlayerImpl = module.SoundPlayerImpl;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "5676cUznb9OLpavC+6nlbpH", "SlotSoundPlayer", undefined);

      var ccclass = _decorator.ccclass;
      var SlotSoundPlayer = exports('SlotSoundPlayer', (_dec = ccclass('SlotSoundPlayer'), _dec(_class = /*#__PURE__*/function (_SoundPlayerImpl) {
        _inheritsLoose(SlotSoundPlayer, _SoundPlayerImpl);

        function SlotSoundPlayer() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SoundPlayerImpl.call.apply(_SoundPlayerImpl, [this].concat(args)) || this;
          _this._audioScatterReel = void 0;
          _this._audioBonusReel = void 0;
          _this._soundSmallWin = void 0;
          return _this;
        }

        var _proto = SlotSoundPlayer.prototype;

        _proto.onLoad = function onLoad() {
          this.node.addComponent(GameObject);
          this.node.dispatchEvent(new CustomEvent("SET_UP_SLOT_SOUND_MANAGER", true, {
            soundManager: this
          }));

          _SoundPlayerImpl.prototype.onLoad.call(this);
        };

        _proto.playMainBGM = function playMainBGM(currentGameMode) {
          var dataStore = this.node['dataStore'];
          currentGameMode = currentGameMode || dataStore && dataStore.currentGameMode;
          var soundId = "BGM_MAIN";

          if (currentGameMode === SlotGameMode.FreeGame) {
            soundId = "BGM_FREE";
          } else if (currentGameMode === SlotGameMode.BonusGame) {
            soundId = "BGM_BONUS";
          }

          this.playMusic(soundId);
        };

        _proto.playSfxClickButtonTrial = function playSfxClickButtonTrial() {
          this.playSfx("BTN_TUTORIAL");
        }
        /**@table */
        ;

        _proto.playSoundGetScatter = function playSoundGetScatter(count) {
          if (count === void 0) {
            count = 1;
          }

          var audio = "SCATTER" + count;

          if (audio) {
            this._audioScatterReel && this.stopSfx(this._audioScatterReel);
            this.playSfx(audio);
            this._audioScatterReel = audio;
          }
        };

        _proto.playSoundGetBonus = function playSoundGetBonus(count) {
          if (count === void 0) {
            count = 1;
          }

          count = count >= 3 ? 3 : count;
          var audio = "BONUS_" + count;

          if (audio) {
            this._audioBonusReel && this.stopSfx(this._audioBonusReel);
            this.playSfx(audio);
            this._audioBonusReel = audio;
          }
        };

        _proto.playParticleFly = function playParticleFly() {
          this.playSfx("PARTICAL_FLY");
        };

        _proto.playParticleHit = function playParticleHit() {
          this.playSfx("PARTICAL_FLY");
        };

        _proto.playSFXOpenWild = function playSFXOpenWild() {
          this.playSfx("OPEN_WILD");
        };

        _proto.playSoundSmallWin = function playSoundSmallWin(rate) {
          var soundId;

          if (rate >= 5) {
            soundId = 'SMALL_WIN_3';
          } else if (rate > 1) {
            soundId = 'SMALL_WIN_2';
          } else {
            soundId = 'SMALL_WIN_1';
          }

          this._soundSmallWin = soundId;
          this.playSfx(soundId);
        };

        _proto.stopSoundSmallWin = function stopSoundSmallWin() {
          this._soundSmallWin && this.stopSfx(this._soundSmallWin);
        }
        /**
         * @transition
         */
        ;

        _proto.playSFXIntroFreeGame = function playSFXIntroFreeGame() {
          this.playSfx("INTRO_FREE");
        };

        _proto.playSFXIntroBonusGame = function playSFXIntroBonusGame() {
          this.playSfx("INTRO_BONUS");
        };

        _proto.playSFXEndIntroBonus = function playSFXEndIntroBonus() {
          this.playSfx("END_INTRO_BONUS");
        };

        _proto.playSFXTrialButton = function playSFXTrialButton() {};

        return SlotSoundPlayer;
      }(SoundPlayerImpl)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotSymbol.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, SpriteFrame, SpriteComponent, Vec3, tween, Component, Color, convertAssetArrayToObject, setOpacity, changeParent, getOpacity;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      SpriteFrame = module.SpriteFrame;
      SpriteComponent = module.SpriteComponent;
      Vec3 = module.Vec3;
      tween = module.tween;
      Component = module.Component;
      Color = module.Color;
    }, function (module) {
      convertAssetArrayToObject = module.convertAssetArrayToObject;
      setOpacity = module.setOpacity;
      changeParent = module.changeParent;
      getOpacity = module.getOpacity;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "1905dkW4z5NO5XYOYUQp1bs", "SlotSymbol", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotSymbol = exports('SlotSymbol', (_dec = ccclass('SlotSymbol'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: SpriteFrame
      }), _dec4 = property({
        type: SpriteFrame
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SlotSymbol, _Component);

        function SlotSymbol() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "staticSymbol", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bigWildScaleFactor", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listSymbols", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listBlurSymbols", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "blurNamePrefix", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "dimColor", _descriptor6, _assertThisInitialized(_this));

          _this.assets = [];
          _this.blurAssets = [];
          _this.symbolSpriteFrame = null;
          _this.zoomTween = null;
          _this._staticPaylineHolder = null;
          _this._poolFactoryNode = null;
          _this._isPlayAnim = false;
          _this._isAnimated = false;
          _this._isBigWild = false;
          return _this;
        }

        var _proto = SlotSymbol.prototype;

        _proto.onLoad = function onLoad() {
          this.node.on("INIT_FOR_PAYLINE", this.initForPayline, this);
          this.node.on("CHANGE_TO_SYMBOL", this.changeToRealSymbol, this);
          this.node.on("CHANGE_TO_BLUR_SYMBOL", this.changeToBlurSymbol, this);
          this.node.on("CHANGE_TO_BIG_WILD", this.changeToBigWildSymbol, this);
          this.node.on("BLINK_HIGHLIGHT", this.blinkHighlight, this);
          this.node.on("ENABLE_HIGHLIGHT", this.enableHighlight, this);
          this.node.on("DISABLE_HIGHLIGHT", this.disableHighlight, this);
          this.node.on("SHOW_SYMBOL", this.showSymbol, this);
          this.node.on("HIDE_SYMBOL", this.hideSymbol, this);
          this.node.on("RESET", this.reset, this);
          this.assets = convertAssetArrayToObject(this.listSymbols);
          this.blurAssets = convertAssetArrayToObject(this.listBlurSymbols);
          this.symbolSpriteFrame = this.staticSymbol.getComponent(SpriteComponent);
        };

        _proto.initForPayline = function initForPayline(staticPaylineHolder, poolFactory, isAnimated) {
          if (!this._staticPaylineHolder) this._staticPaylineHolder = staticPaylineHolder;
          if (!this._poolFactoryNode) this._poolFactoryNode = poolFactory;
          this._isAnimated = isAnimated;
        };

        _proto.changeToBigWildSymbol = function changeToBigWildSymbol(symbolName) {
          if (this.assets[symbolName]) {
            this.node['symbol'] = "K";
            setOpacity(this.node, 255);
            setOpacity(this.staticSymbol, 255);
            if (this.symbolSpriteFrame) this.symbolSpriteFrame.spriteFrame = this.assets[symbolName];
            this.staticSymbol.setScale(new Vec3(this.bigWildScaleFactor, this.bigWildScaleFactor, 1));
            this._isBigWild = true;

            if (this._staticPaylineHolder && this.staticSymbol.parent === this.node) {
              changeParent(this.staticSymbol, this._staticPaylineHolder);
            }
          }
        };

        _proto.changeToRealSymbol = function changeToRealSymbol(symbolName) {
          if (symbolName === void 0) {
            symbolName = '2';
          }

          if (this.assets[symbolName]) {
            this.node['symbol'] = symbolName;
            setOpacity(this.node, 255);
            setOpacity(this.staticSymbol, 255);
            if (this.symbolSpriteFrame) this.symbolSpriteFrame.spriteFrame = this.assets[symbolName];
          } else {
            if (this.symbolSpriteFrame) this.symbolSpriteFrame.spriteFrame = null;
          }
        };

        _proto.changeToBlurSymbol = function changeToBlurSymbol(symbolName) {
          if (symbolName === void 0) {
            symbolName = '2';
          }

          var blurSymblName = this.blurNamePrefix + symbolName;
          var blurAsset = this.blurAssets[blurSymblName];

          if (blurAsset) {
            this.node['symbol'] = symbolName;
            setOpacity(this.staticSymbol, 255);
            setOpacity(this.node, 255);
            if (this.symbolSpriteFrame) this.symbolSpriteFrame.spriteFrame = blurAsset;
          } else {
            this.changeToRealSymbol(symbolName);
          }
        };

        _proto.blinkHighlight = function blinkHighlight() {
          var isHidden = this.node["isHidden"];
          if (isHidden) return;
          setOpacity(this.node, 255);
          this.staticSymbol.active = true; // this.symbolSpriteFrame.color = Color.WHITE;

          if (this._staticPaylineHolder && this.staticSymbol.parent === this.node) {
            changeParent(this.staticSymbol, this._staticPaylineHolder);
          }

          if (this._isBigWild) {
            if (this.staticSymbol.parent === this.node) {
              this.node.setSiblingIndex(this.node.parent.children.length - 1);
            } else {
              this.staticSymbol.setSiblingIndex(this.staticSymbol.parent.children.length - 1);
            }
          }

          this._isPlayAnim = false;
        };

        _proto.enableHighlight = function enableHighlight(noEffect) {
          if (noEffect === void 0) {
            noEffect = false;
          }

          var isHidden = this.node["isHidden"];
          if (isHidden) return; // play animation here

          this.node.active = true; // this.symbolSpriteFrame.color = Color.WHITE;

          if (this.zoomTween) {
            this.zoomTween.stop();
            this.zoomTween = null;
          }

          if (this._isAnimated) {
            this.staticSymbol.active = false;
            this._isPlayAnim = true;
          } else {
            this.staticSymbol.active = true;

            if (this._staticPaylineHolder && this.staticSymbol.parent === this.node) {
              changeParent(this.staticSymbol, this._staticPaylineHolder);
            }

            if (this._isBigWild) {
              if (this.staticSymbol.parent === this.node) {
                this.node.setSiblingIndex(this.node.parent.children.length - 1);
              } else {
                this.staticSymbol.setSiblingIndex(this.staticSymbol.parent.children.length - 1);
              }

              return;
            }

            this.staticSymbol.setScale(new Vec3(1, 1, 1));

            if (!noEffect) {
              this.zoomTween = tween(this.staticSymbol).to(0.2, {
                scale: new Vec3(1.05, 1.05, 1)
              }).to(0.2, {
                scale: new Vec3(0.95, 0.95, 1)
              }).to(0.2, {
                scale: new Vec3(1, 1, 1)
              }).repeat(2);
              this.zoomTween.start();
            }
          }
        };

        _proto.disableHighlight = function disableHighlight() {
          var isHidden = this.node["isHidden"];
          if (isHidden) return; // stop animation here

          this.node.active = true;
          this.staticSymbol.active = !this._isPlayAnim; // this.symbolSpriteFrame.color = this.dimColor;

          this.staticSymbol.scale = new Vec3(1, 1, 1);
          this.staticSymbol.parent = this.node;
          this.staticSymbol.position = new Vec3(0, 0, 0);
        };

        _proto.reset = function reset() {
          this.staticSymbol.active = true; // this.symbolSpriteFrame.color = Color.WHITE;

          setOpacity(this.staticSymbol, 255);
          setOpacity(this.node, 255);
          this.node.active = true;
          this.staticSymbol.scale = new Vec3(1, 1, 1);
          this.staticSymbol.parent = this.node;
          this.staticSymbol.position = new Vec3(0, 0, 0);

          if (this.zoomTween) {
            this.zoomTween.stop();
            this.zoomTween = null;
          }

          this._isPlayAnim = false;
          this._isBigWild = false;
        };

        _proto.showSymbol = function showSymbol() {
          setOpacity(this.node, 255);
        };

        _proto.hideSymbol = function hideSymbol() {
          setOpacity(this.node, 0);
        }; //TODO remove cheat here


        _proto.update = function update(dt) {
          if (this.node.active && getOpacity(this.node) > 0) {
            this.node._uiProps.colorDirty = true;
          }
        };

        _proto.onDestroy = function onDestroy() {
          if (this.zoomTween) {
            this.zoomTween.stop();
            this.zoomTween = null;
          }
        };

        return SlotSymbol;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "staticSymbol", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "bigWildScaleFactor", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "listSymbols", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "listBlurSymbols", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "blurNamePrefix", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'blur_';
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "dimColor", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Color();
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotSymbolPayline.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Color, CCString, sp, sys, Vec3, Component, changeParent;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Color = module.Color;
      CCString = module.CCString;
      sp = module.sp;
      sys = module.sys;
      Vec3 = module.Vec3;
      Component = module.Component;
    }, function (module) {
      changeParent = module.changeParent;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "f1d6a5JRWFD5YmxpHQsdsXi", "SlotSymbolPayline", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotSymbolPayline = exports('SlotSymbolPayline', (_dec = ccclass('SlotSymbolPayline'), _dec2 = property(Node), _dec3 = property(Color), _dec4 = property(Color), _dec5 = property({
        type: CCString
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SlotSymbolPayline, _Component);

        function SlotSymbolPayline() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "spineNode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "dimColor", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "defaultColor", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "symbolsToPlayRealtime", _descriptor4, _assertThisInitialized(_this));

          _this._animation = null;
          _this._isPlaying = false;
          _this._havingAnim = false;
          _this._symbolName = '';
          _this.ANIM_DURATION = 2;
          _this._disableHighlightHolder = null;
          return _this;
        }

        var _proto = SlotSymbolPayline.prototype;

        _proto.onLoad = function onLoad() {
          this._animation = this.spineNode.getComponent(sp.Skeleton);
          this.node.on("INIT", this.init, this);
          this.node.on("PLAY_ANIMATION", this.playAnimation, this);
          this.node.on("STOP_ANIMATION", this.stopAnimation, this);
          this.node.on("ENABLE_HIGHLIGHT", this.enableHighlight, this);
          this.node.on("DISABLE_HIGHLIGHT", this.disableHighlight, this);
          this.node.on("RESET", this.reset, this);
          this.node['SlotSymbolPayline'] = this;
        };

        _proto.init = function init(symbolName, skeletonData, disableHighlightHolder) {
          this._isPlaying = false;
          this._havingAnim = skeletonData ? true : false;
          this._disableHighlightHolder = disableHighlightHolder;
          this.spineNode.active = true;
          this._symbolName = symbolName;

          if (this._animation && this._havingAnim) {
            var isPlayRealtime = Number(sys.platform) == 3 || this.needToPlayRealtime(this._symbolName); //dont cache for android app sys.ANDROID = 3 or always realtime symbol

            if (isPlayRealtime) {
              this._animation.setAnimationCacheMode(sp.Skeleton.AnimationCacheMode.REALTIME);
            } else {
              this._animation.setAnimationCacheMode(sp.Skeleton.AnimationCacheMode.PRIVATE_CACHE);
            } // log('>>>>>>> Set Cached Animation Mode? Realtime: '+isPlayRealtime + ' => symbol: '+ this._symbolName);


            this._animation.skeletonData = skeletonData;
          }

          this.spineNode.active = false;
        };

        _proto.playAnimation = function playAnimation(duration) {
          if (duration === void 0) {
            duration = 2;
          }

          if (this._havingAnim) {
            this.spineNode.active = true;

            if (!this._isPlaying) {
              this._isPlaying = true;

              if (this._animation) {
                this._animation.setAnimation(0, 'animation', true);

                this._animation.timeScale = this.ANIM_DURATION / duration; // log(">>>>>>> Symbol " + this._symbolName + " has Animation Cached is: "+ this._animation.isAnimationCached());
              }
            }
          }
        };

        _proto.stopAnimation = function stopAnimation() {
          this.spineNode.active = false;
        };

        _proto.enableHighlight = function enableHighlight() {
          // if(this._animation) this._animation.color = this.defaultColor;
          this.spineNode.parent = this.node;
          this.spineNode.position = new Vec3(0, 0, 0);
        };

        _proto.disableHighlight = function disableHighlight() {
          if (!this._isPlaying) {
            this.spineNode.active = false;
          } else {
            // if(this._animation) this._animation.color = this.dimColor;
            if (this.spineNode && this._disableHighlightHolder) {
              changeParent(this.spineNode, this._disableHighlightHolder);
            }
          }
        };

        _proto.reset = function reset() {
          if (this._animation) {
            // this._animation.color = this.defaultColor;
            //this._animation.skeletonData = null; causing crash & lost texture on native;
            this.spineNode.parent = this.node;
            this.spineNode.position = new Vec3(0, 0, 0);
          }

          this._isPlaying = false;
        };

        _proto.needToPlayRealtime = function needToPlayRealtime(symbolName) {
          for (var i = 0; i < this.symbolsToPlayRealtime.length; i++) {
            if (symbolName == this.symbolsToPlayRealtime[i]) {
              return true;
            }
          }

          return false;
        };

        return SlotSymbolPayline;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "spineNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "dimColor", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Color();
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "defaultColor", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Color();
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "symbolsToPlayRealtime", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotTable.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EventNames.ts', './GameObject.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Prefab, instantiate, EventNames, GameObject;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Prefab = module.Prefab;
      instantiate = module.instantiate;
    }, function (module) {
      EventNames = module.default;
    }, function (module) {
      GameObject = module.GameObject;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "2f32ayTHLtOypRyacQxaUYe", "SlotTable", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotTable = exports('SlotTable', (_dec = ccclass('SlotTable'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Prefab
      }), _dec4 = property({
        type: Prefab
      }), _dec5 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(SlotTable, _GameObject);

        function SlotTable() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "table", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "reelPrefab", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "symbolPrefab", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "stickyWild", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "isFreeMode", _descriptor5, _assertThisInitialized(_this));

          _this.tableFormat = [];
          _this.matrix = [];
          _this.isFastToResult = false;
          _this.reels = [];
          _this.isTurbo = false;
          _this.stopSpinningCallbackCount = 0;
          _this._tableStopCB = null;
          _this._tableFastStopCB = null;
          _this._isSpinning = false;
          return _this;
        }

        var _proto = SlotTable.prototype; // @property({type: Node})
        // private spinBtn: any;
        // @property({type: Node})
        // private fastToResultBtn: any;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          this.node.on("INIT", this.init, this);
          this.node.on("START_SPINNING", this.startSpinning, this);
          this.node.on("STOP_SPINNING", this.stopSpinning, this);
          this.node.on("FAST_TO_RESULT", this.fastToResult, this);
          this.node.on("CHANGE_MATRIX", this.changeMatrix, this);
          this.node.on("RANDOM_MATRIX", this.randomMatrix, this);
          this.node.on("STOP_REEL_WITH_RANDOM_MATRIX", this.stopReelWithRandomMatrix, this);
          this.node.on("SHOW_STATIC_SYMBOL", this.showStaticSymbol, this);
          this.node.on("GAME_EXIT", this.gameExit, this);
          this.node.on("GAME_HIDE", this.onGameHide, this);
          this.node.on("GAME_SHOW", this.onGameShow, this);
        };

        _proto.init = function init() {
          var _this$config = this.config,
              SYMBOL_WIDTH = _this$config.SYMBOL_WIDTH,
              NORMAL_TABLE_FORMAT = _this$config.NORMAL_TABLE_FORMAT,
              FREE_TABLE_FORMAT = _this$config.FREE_TABLE_FORMAT;
          this.tableFormat = this.isFreeMode ? FREE_TABLE_FORMAT : NORMAL_TABLE_FORMAT;
          this.node.isFreeMode = this.isFreeMode;
          this.node.tableFormat = this.tableFormat;
          this.isFastToResult = false;
          var startX = -(this.tableFormat.length / 2 - 0.5) * SYMBOL_WIDTH;

          for (var index = 0; index < this.tableFormat.length; index++) {
            var reel = instantiate(this.reelPrefab);
            reel.name = "Reel_" + index;
            this.table.addChild(reel);
            reel.setPosition(startX + index * SYMBOL_WIDTH, 0);
            reel.emit('INIT', this.tableFormat, this.config, index, this.symbolPrefab, this.isFreeMode);
            this.reels.push(reel);
          }

          this.node['reels'] = this.reels;

          if (this.stickyWild) {
            this.stickyWild.emit("INIT", this);
          }
        };

        _proto.onGameShow = function onGameShow() {
          if (this.table) this.table.active = true;
        };

        _proto.onGameHide = function onGameHide() {
          if (this.table) this.table.active = false;
        };

        _proto.randomMatrix = function randomMatrix() {
          for (var col = 0; col < this.tableFormat.length; ++col) {
            this.reels[col].emit('RANDOM_SYMBOLS');
          }
        };

        _proto.changeMatrix = function changeMatrix(_ref) {
          var matrix = _ref.matrix;
          this.matrix = matrix;

          for (var col = 0; col < this.tableFormat.length; ++col) {
            this.reels[col].emit('UPDATE_SYMBOLS', this.matrix[col]);
          }

          if (this.stickyWild) {
            this.stickyWild.emit("CHANGE_MATRIX", matrix);
          }
        };

        _proto.startSpinning = function startSpinning() {
          this._isSpinning = true;
          this.isTurbo = this.dataStore && this.dataStore.modeTurbo || false;
          this.isFastToResult = false;
          var currentConfig = this.config[this.isTurbo ? 'TABLE_TURBO' : 'TABLE_NORMAL'];
          this.reels.forEach(function (reel, index) {
            reel.emit('START_SPIN', index, currentConfig);
          });
          this.node.emit('TABLE_START_SOUND');
          this.node.emit('RESET_NEAR_WIN');
          this.eventManager.emit(EventNames.TABLE_START_SPIN);
        };

        _proto.stopSpinning = function stopSpinning(matrix, callback) {
          var _this2 = this;

          if (matrix === void 0) {
            matrix = [];
          }

          if (callback === void 0) {
            callback = null;
          }

          this.matrix = matrix;
          this._tableStopCB = callback;
          this.node.emit('REEL_DELAY_NEAR_WIN', {
            reels: this.reels,
            matrix: matrix,
            context: this
          });
          this.node.emit('REEL_ABOUT_TO_STOP_SOUND', {
            reels: this.reels,
            matrix: matrix,
            context: this
          });
          this.stopSpinningCallbackCount = 0;
          this.reels.forEach(function (reel, col) {
            var revMatrix = [].concat(matrix[col]).reverse();
            reel.emit('STOP_SPIN', revMatrix, _this2.checkStopSpinningCallback.bind(_this2, matrix[col]));
          });
        };

        _proto.onTableStopped = function onTableStopped() {
          this.eventManager.emit(EventNames.TABLE_STOP_SPIN);

          if (this._tableStopCB) {
            this._tableStopCB();

            this._tableStopCB = null;
          }

          if (this.isFastToResult) {
            this.eventManager.emit(EventNames.FAST_TO_RESULT_FINISH);
          }

          this._isSpinning = false;
        };

        _proto.isSpinning = function isSpinning() {
          return this._isSpinning = true;
        };

        _proto.checkStopSpinningCallback = function checkStopSpinningCallback(matrix) {
          if (matrix === void 0) {
            matrix = [];
          }

          this.stopSpinningCallbackCount++;
          var count = this.stopSpinningCallbackCount;

          if (count >= this.reels.length) {
            this.onTableStopped();
          }

          this.node.emit('REEL_STOP_NEARWIN', {
            matrix: matrix,
            count: count,
            context: this
          });
          this.node.emit('REEL_STOP_SOUND', {
            matrix: matrix,
            count: count,
            context: this
          });

          if (this.stickyWild) {
            this.stickyWild.emit("SHOW_STICKY_WILD", count - 1);
          }
        };

        _proto.stopReelWithRandomMatrix = function stopReelWithRandomMatrix(callback) {
          if (callback === void 0) {
            callback = null;
          }

          var matrixRandom = [];

          for (var col = 0; col < this.tableFormat.length; ++col) {
            matrixRandom[col] = [];

            for (var row = this.tableFormat[col] - 1; row >= 0; --row) {
              var reel = this.reels[col].getComponent('SlotReel');

              if (reel) {
                matrixRandom[col][row] = reel.getRandomSymbolNameWithExceptions(['A', 'R', 'K']);
              } else {
                matrixRandom[col][row] = "3";
              }
            }
          }

          this.stopSpinning(matrixRandom, callback);
        };

        _proto.fastToResult = function fastToResult() {
          if (!this._isSpinning) return; // if (this.isFastToResult) return;

          this.isFastToResult = true;
          this.reels.forEach(function (reel) {
            return reel.emit('FAST_STOP');
          });
        };

        _proto.showStaticSymbol = function showStaticSymbol(col, row, symbol, isShow) {
          if (!this.reels || !this.reels[col]) return;
          this.reels[col].emit('HIDE_SYMBOL', row, symbol, isShow);
        };

        _proto.gameExit = function gameExit() {
          if (this.stickyWild) {
            this.stickyWild.emit("RESET");
          }
        };

        return SlotTable;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "table", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "reelPrefab", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "symbolPrefab", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "stickyWild", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "isFreeMode", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotTableNearWinEffect.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts', './CustomEnum.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, GameObject, PerformanceLevel;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
    }, function (module) {
      GameObject = module.GameObject;
    }, function (module) {
      PerformanceLevel = module.PerformanceLevel;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13;

      cclegacy._RF.push({}, "fe9b9gCuVBNx7bwHMeMoIA0", "SlotTableNearWinEffect", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotTableNearWinEffect = exports('SlotTableNearWinEffect', (_dec = ccclass('SlotTableNearWinEffect'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(SlotTableNearWinEffect, _GameObject);

        function SlotTableNearWinEffect() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "startAtScatterCount", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "startAtBonusCount", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "startAtJackpotCount", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "stopAtScatterCount", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "stopAtBonusCount", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "stopAtJackpotCount", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "animNode", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nearWinHolder", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "paylineSymbolPrefabName", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bonusSymbol", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "scatterSymbol", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "jackpotSymbol", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "isSkipNearWinTurbo", _descriptor13, _assertThisInitialized(_this));

          _this.nearWinList = [];
          _this.playSoundNearWin = false;
          _this.sfxNearWin = 'NEAR_WIN';
          _this.poolFactory = null;
          _this.usingObjs = [];
          _this.animationLevel = 2;
          return _this;
        }

        var _proto = SlotTableNearWinEffect.prototype;

        _proto.onLoad = function onLoad() {
          this.node.on("RESET_NEAR_WIN", this.reset, this);
          this.node.on("REEL_STOP_NEARWIN", this.reelStopNearWin, this);
          this.node.on("REEL_DELAY_NEAR_WIN", this.adjustReelDelay, this);
          this.reset();

          if (this.mainDirector) {
            this.poolFactory = this.mainDirector.poolFactory;
          }
        };

        _proto.reset = function reset() {
          this.hideAnimNearWin();
          this.clearSymbolPaylines();
        };

        _proto.adjustReelDelay = function adjustReelDelay(_ref) {
          var reels = _ref.reels,
              matrix = _ref.matrix;
          var tableFormat = this.node.tableFormat;
          var countScatter = 0;
          var countBonus = 0;
          var countJackpot = 0;
          var foundNearWin = false;
          this.nearWinList = [];
          var isSkipWhenTurbo = this.dataStore && this.dataStore.modeTurbo && this.isSkipNearWinTurbo;
          if (isSkipWhenTurbo) return;

          for (var col = 0; col < matrix.length; col++) {
            var isNearWinScatter = countScatter >= this.startAtScatterCount && countScatter < this.stopAtScatterCount;
            var isNearWinBonus = countBonus >= this.startAtBonusCount && countBonus < this.stopAtBonusCount;
            var isNearWinJackpot = countJackpot >= this.startAtJackpotCount && countJackpot < this.stopAtJackpotCount;
            var isNearWin = isNearWinScatter || isNearWinBonus || isNearWinJackpot;

            for (var row = 0; row < matrix[col].length; ++row) {
              var symbolValue = matrix[col][row];

              if (symbolValue === this.bonusSymbol) {
                this.createPaylineSymbol(tableFormat[col], symbolValue, col, row);
                countBonus++;
              } else if (symbolValue === this.scatterSymbol) {
                this.createPaylineSymbol(tableFormat[col], symbolValue, col, row);
                countScatter++;
              } else if (symbolValue === this.jackpotSymbol) {
                this.createPaylineSymbol(tableFormat[col], symbolValue, col, row);
                countJackpot++;
              } else ;
            }

            isNearWin = isNearWin || isNearWinJackpot;
            foundNearWin = foundNearWin || isNearWin;

            if (foundNearWin) {
              this.nearWinList[col] = {
                isNearWinScatter: isNearWinScatter,
                isNearWinBonus: isNearWinBonus,
                isNearWin: isNearWin
              };
              reels[col].emit('EXTEND_TIME_STOP', isNearWin);
            }
          }
        };

        _proto.reelStopNearWin = function reelStopNearWin(_ref2) {
          var count = _ref2.count,
              context = _ref2.context;
          this.hideAnimNearWin();

          if (!context.isFastToResult) {
            this.runAnimationNearWin(this.jackpotSymbol, count);
            this.runAnimationNearWin(this.scatterSymbol, count);
            this.runAnimationNearWin(this.bonusSymbol, count);
          }

          var reels = this.node.reels;

          if (this.nearWinList[count] && this.nearWinList[count].isNearWin && !context.isFastToResult) {
            this.showAnimNearWin(count);

            for (var i = count; i < reels.length; i++) {
              if (this.nearWinList[i] && this.nearWinList[i].isNearWin) reels[i].emit('UPDATE_NEAR_WIN_SPEED');
            }
          } else {
            this.stopSoundNearWin();
          }

          if (count >= reels.length) {
            this.clearSymbolPaylines();
            this.hideAnimNearWin();
            this.stopSoundNearWin();
          }
        };

        _proto.hideAnimNearWin = function hideAnimNearWin() {
          this.animNode.active = false;
        };

        _proto.showAnimNearWin = function showAnimNearWin(count) {
          this.sfxNearWin && this.soundPlayer && this.soundPlayer.playSfx(this.sfxNearWin);
          this.animNode.active = true;
          this.animNode.setPosition(this.getXPosition(count), this.animNode.position.y);
        };

        _proto.clearSymbolPaylines = function clearSymbolPaylines() {
          var _this2 = this;

          if (!this.nearWinHolder || this.animationLevel < Number(PerformanceLevel.Medium)) return;
          this.usingObjs.forEach(function (paylineSymbol) {
            if (paylineSymbol) {
              var _ref3 = paylineSymbol,
                  col = _ref3.col,
                  row = _ref3.row,
                  symbol = _ref3.symbol;

              _this2.node.emit('SHOW_STATIC_SYMBOL', col, row, symbol, true);

              _this2.poolFactory.removeObject(paylineSymbol);
            }
          });
          this.usingObjs = [];
          this.setOpacity(this.nearWinHolder, 1);
        };

        _proto.runAnimationNearWin = function runAnimationNearWin(symbolName, currentIndex) {
          var _this3 = this;

          if (!this.nearWinHolder || this.animationLevel < Number(PerformanceLevel.Medium)) return;
          this.setOpacity(this.nearWinHolder, 255);
          this.usingObjs.forEach(function (paylineSymbol) {
            if (paylineSymbol["symbol"] === symbolName && paylineSymbol["col"] == currentIndex - 1) {
              paylineSymbol.active = true;
              paylineSymbol.emit("ENABLE_HIGHLIGHT");
              paylineSymbol.emit("PLAY_ANIMATION");
              var _ref4 = paylineSymbol,
                  col = _ref4.col,
                  row = _ref4.row,
                  symbol = _ref4.symbol;

              _this3.node.emit('SHOW_STATIC_SYMBOL', col, row, symbol, false);
            }
          });
        };

        _proto.getXPosition = function getXPosition(index) {
          var tableFormat = this.node.tableFormat;
          var startX = -(tableFormat.length / 2 - 0.5) * this.node.config.SYMBOL_WIDTH;
          return startX + this.config.SYMBOL_WIDTH * index;
        };

        _proto.createPaylineSymbol = function createPaylineSymbol(totalSymbol, symbol, col, row) {
          var performanceLvl = this.dataStore && this.dataStore.performanceLevel || 'HIGH_PERFORMANCE_LV';
          this.animationLevel = this.config[performanceLvl].NEAR_WIN_ANIMATION;
          if (!this.nearWinHolder || this.animationLevel < Number(PerformanceLevel.Medium)) return;
          var paylineSymbol = null;
          if (!this.poolFactory) this.poolFactory = this.mainDirector.poolFactory;
          paylineSymbol = this.poolFactory.getObject(this.paylineSymbolPrefabName);
          if (!paylineSymbol) return;
          paylineSymbol.active = true;
          paylineSymbol.parent = this.nearWinHolder;
          var posX = this.getXPosition(col);
          var posY = (totalSymbol / 2 - row - 0.5) * this.config.SYMBOL_HEIGHT;
          paylineSymbol.setPosition(posX, posY);
          paylineSymbol["col"] = col;
          paylineSymbol["row"] = row;
          paylineSymbol["symbol"] = symbol;
          var spineData = this.node["getSymbolSpineData"](symbol);
          paylineSymbol["SlotSymbolPayline"].init(symbol, spineData);
          paylineSymbol.active = false;
          this.usingObjs.push(paylineSymbol);
        };

        _proto.stopSoundNearWin = function stopSoundNearWin() {
          this.soundPlayer && this.soundPlayer.stopSfx(this.sfxNearWin);
        };

        return SlotTableNearWinEffect;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "startAtScatterCount", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 3;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "startAtBonusCount", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 3;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "startAtJackpotCount", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 3;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "stopAtScatterCount", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 5;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "stopAtBonusCount", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 5;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "stopAtJackpotCount", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 5;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "animNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "nearWinHolder", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "paylineSymbolPrefabName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "bonusSymbol", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'R';
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "scatterSymbol", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'A';
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "jackpotSymbol", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'JP';
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "isSkipNearWinTurbo", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotTablePayline.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SlotSymbolPayline.ts', './CustomType.ts', './CustomEnum.ts', './GameObject.ts', './EventNames.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, SlotSymbolPayline, SlotCustomDataType, PerformanceLevel, GameObject, EventNames;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
    }, function (module) {
      SlotSymbolPayline = module.SlotSymbolPayline;
    }, function (module) {
      SlotCustomDataType = module.SlotCustomDataType;
    }, function (module) {
      PerformanceLevel = module.PerformanceLevel;
    }, function (module) {
      GameObject = module.GameObject;
    }, function (module) {
      EventNames = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9;

      cclegacy._RF.push({}, "2bb9euaAQtD8ZN3mPH592Cn", "SlotTablePayline", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotTablePayline = exports('SlotTablePayline', (_dec = ccclass('SlotTablePayline'), _dec2 = property({
        type: SlotCustomDataType
      }), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: Node
      }), _dec6 = property({
        type: Node
      }), _dec7 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(SlotTablePayline, _GameObject);

        function SlotTablePayline() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "spineDataList", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "paylineHolder", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "staticPaylineHolder", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "winLineFrameHolder", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "dimBackground", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "disablePaylineHolder", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "paylineSymbolPrefabName", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "winLineFramePrefabName", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "jackpotSymbol", _descriptor9, _assertThisInitialized(_this));

          _this.payLineNormals = [];
          _this.scatterHolderNode = [];
          _this.bonusHolderNode = [];
          _this.wildHolderNode = [];
          _this.jackpotHolderNode = [];
          _this.paylinesMatrix = [];
          _this.showNormalPayline = null;
          _this.blinkNormalPayline = null;
          _this.paylineTime = null;
          _this.curentConfig = {};
          _this.animationLevel = 2;
          _this._blinkingCallback = null;
          _this._callbackShowPayline = null;
          _this._callbackSpecialPayline = null;
          _this.paylineIndex = 0;
          _this.showingPayline = false;
          _this.paylineType = 'normal';
          _this.nextPaylineTime = 0;
          _this.poolFactory = null;
          _this.usingObjs = [];
          _this.matrix = [];
          _this.showWinLineFrame = false;
          _this.showDrawingLine = false;
          return _this;
        }

        var _proto = SlotTablePayline.prototype;

        _proto.onLoad = function onLoad() {
          this.paylinesMatrix = [];
          this.paylineTime = 0;
          this.node.on("SETUP_PAYLINES", this.setupPaylines, this);
          this.node.on("SHOW_BIG_WILD", this.showBigWild, this);
          this.node.on("BLINK_ALL_NORMAL_PAYLINES", this.blinkHighlightPaylines, this);
          this.node.on("SHOW_ALL_NORMAL_PAYLINES", this.showAllNormalPayLines, this);
          this.node.on("SHOW_ALL_FREE_PAYLINES", this.showAllFreePaylines, this);
          this.node.on("SHOW_SCATTER_PAYLINE", this.showScatterPayLine, this);
          this.node.on("SHOW_BONUS_PAYLINE", this.showBonusPayLine, this);
          this.node.on("SHOW_JACKPOT_PAYLINE", this.showJackpotPayLine, this);
          this.node.on("SHOW_WILD_PAYLINE", this.showWildPayLine, this);
          this.node.on("CLEAR_PAYLINES", this.clearPaylines, this);
          this.node.on("MOVE_PARTICLE_SCATTER", this.moveScatterParticles, this);
          this.node["getSymbolSpineData"] = this.getSymbolSpineData.bind(this);
          this.showNormalPayline = this.config.PAY_LINE_ALLWAYS ? this.showNormalPaylineAllLine : this.showNormalPaylinePerline;
          this.blinkNormalPayline = this.config.PAY_LINE_ALLWAYS ? this.blinkNormalPaylineAllline : this.blinkNormalPaylinePerline;
          this.showWinLineFrame = this.config.SHOW_WINLINE_FRAME;
          this.showDrawingLine = this.config.SHOW_DRAWING_LINE;

          if (this.mainDirector) {
            this.poolFactory = this.mainDirector.poolFactory;
          }
        };

        _proto.setupPaylines = function setupPaylines(matrix, payLines) {
          if (matrix === void 0) {
            matrix = [];
          }

          if (payLines === void 0) {
            payLines = [];
          }

          var isTurbo = this.dataStore && this.dataStore.modeTurbo || false;
          var performanceLvl = this.dataStore && this.dataStore.performanceLevel || 'HIGH_PERFORMANCE_LV';
          this.curentConfig = this.config[isTurbo ? 'TABLE_TURBO' : 'TABLE_NORMAL'];
          this.animationLevel = this.config[performanceLvl].PAYLINE_ANIMATION;
          this.paylineHolder.active = true;
          this.payLineNormals = payLines;
          this.matrix = matrix;
          this.resetPaylineHolder();
          var tableFormat = this.node.tableFormat;

          for (var col = 0; col < tableFormat.length; ++col) {
            this.paylinesMatrix[col] = [];

            for (var row = 0; row < tableFormat[col]; ++row) {
              this.createPaylineObject(col, row);
            }
          } //this.setOpacity(this.paylineHolder, 0);

        };

        _proto.getXPosition = function getXPosition(index) {
          var startX = -(this.node.tableFormat.length / 2 - 0.5) * this.config.SYMBOL_WIDTH;
          return startX + this.config.SYMBOL_WIDTH * index;
        };

        _proto.createPaylineObject = function createPaylineObject(col, row) {
          var reels = this.node.reels;
          var showSymbols = reels[col].getShowSymbols();
          var symbol = showSymbols[row];

          if (symbol) {
            var spineData = this.getSymbolSpineData(symbol['symbol']);
            if (!this.poolFactory) this.poolFactory = this.mainDirector.poolFactory;
            var isSymbolAnimated = this.animationLevel >= Number(PerformanceLevel.Medium) && spineData != null;
            symbol.emit("INIT_FOR_PAYLINE", this.staticPaylineHolder, this.poolFactory.node, isSymbolAnimated);
            var paylineSymbol = this.createPaylineSymbol(symbol['symbol'], col, row, isSymbolAnimated ? spineData : null);
            var payline = {
              symbol: symbol,
              paylineSymbol: paylineSymbol
            };

            if (this.showWinLineFrame) {
              var winLineFrame = this.createWinLineFrame(col, row);
              payline['winLineFrame'] = winLineFrame;
            }

            payline['isShowing'] = true;
            this.paylinesMatrix[col][row] = payline;

            if (symbol['symbol'] == "A") {
              this.scatterHolderNode.push(payline);
            } else if (symbol['symbol'] == "R") {
              this.bonusHolderNode.push(payline);
            } else if (symbol['symbol'] == "K") {
              this.wildHolderNode.push(payline);
            }

            if (symbol['symbol'] == this.jackpotSymbol) {
              this.jackpotHolderNode.push(payline);
            }

            return payline;
          }
        };

        _proto.createWinLineFrame = function createWinLineFrame(col, row) {
          var x = this.getXPosition(col);
          var symbolHeight = this.node.isFreeMode && this.config.SYMBOL_HEIGHT_FREE_GAME ? this.config.SYMBOL_HEIGHT_FREE_GAME : this.config.SYMBOL_HEIGHT;
          var y = (this.node.tableFormat[col] / 2 - row - 0.5) * symbolHeight;
          var winLineFrame = null;
          winLineFrame = this.poolFactory.getObject(this.winLineFramePrefabName);

          if (winLineFrame) {
            winLineFrame.active = false;
            winLineFrame.parent = this.winLineFrameHolder;
            winLineFrame[col] = col;
            winLineFrame[row] = row;
            winLineFrame.setPosition(x, y);
            this.usingObjs.push(winLineFrame);
          }

          return winLineFrame;
        };

        _proto.createPaylineSymbol = function createPaylineSymbol(symbol, col, row, skeletonData) {
          var paylineSymbol = null;

          if (!this.poolFactory) {
            var mainDirector = this.node["mainDirector"];

            if (mainDirector) {
              this.poolFactory = mainDirector.poolFactory;
            }
          }

          paylineSymbol = this.poolFactory.getObject(this.paylineSymbolPrefabName);
          paylineSymbol.active = true;
          paylineSymbol.parent = this.paylineHolder;
          var symbolHeight = this.node.isFreeMode && this.config.SYMBOL_HEIGHT_FREE_GAME ? this.config.SYMBOL_HEIGHT_FREE_GAME : this.config.SYMBOL_HEIGHT;
          var x = this.getXPosition(col);
          var y = (this.node.tableFormat[col] / 2 - row - 0.5) * symbolHeight;
          paylineSymbol.setPosition(x, y);
          var paylineControl = paylineSymbol.getComponent(SlotSymbolPayline);

          if (paylineControl) {
            paylineControl.init(symbol, skeletonData, this.disablePaylineHolder);
          }

          this.usingObjs.push(paylineSymbol);
          return paylineSymbol;
        };

        _proto.showBigWild = function showBigWild(currentGameMode, isResume) {//TODO: Override this function here
        };

        _proto.showAllNormalPayLines = function showAllNormalPayLines(callback, index) {
          if (index === void 0) {
            index = 0;
          }

          if (!this.payLineNormals) {
            callback && callback();
            return;
          }

          this.paylineIndex = index;
          this.showingPayline = true;
          this.paylineType = 'normal';
          this._callbackShowPayline = callback;
          var dataStore = this.node.dataStore;

          if (dataStore && !dataStore.isAutoSpin) {
            this.nextPaylineTime = this.curentConfig.EXPECT_PAYLINE_ALLWAYS_TIME;
          } else {
            this.nextPaylineTime = Math.max(this.curentConfig.EXPECT_PAYLINE_TIME / this.payLineNormals.length, this.curentConfig.MIN_TIME_EACH_PAYLINE);
          }

          this.showNextPayline();
        };

        _proto.showAllFreePaylines = function showAllFreePaylines(callback, index) {
          if (index === void 0) {
            index = 0;
          }

          if (!this.payLineNormals) {
            callback && callback();
            return;
          }

          this.paylineIndex = index;
          this.showingPayline = true;
          this.paylineType = 'free';
          this._callbackShowPayline = callback;
          this.nextPaylineTime = Math.max(this.curentConfig.EXPECT_PAYLINE_TIME / this.payLineNormals.length, this.curentConfig.MIN_TIME_EACH_PAYLINE);
          this.showNextPayline();
        };

        _proto.resetSymbolPaylines = function resetSymbolPaylines() {
          if (!this.paylinesMatrix || this.paylinesMatrix.length === 0) return;

          for (var col = 0; col < this.paylinesMatrix.length; ++col) {
            for (var row = 0; row < this.paylinesMatrix[col].length; ++row) {
              var _this$paylinesMatrix$ = this.paylinesMatrix[col][row],
                  symbol = _this$paylinesMatrix$.symbol,
                  paylineSymbol = _this$paylinesMatrix$.paylineSymbol,
                  winLineFrame = _this$paylinesMatrix$.winLineFrame;

              if (symbol && paylineSymbol) {
                symbol.active = true;
                symbol["isHidden"] = false;
                paylineSymbol.active = true;
                symbol.emit('RESET');
                paylineSymbol.emit('RESET');
              }

              if (winLineFrame) winLineFrame.active = false;
            }
          }
        };

        _proto.disableHighlightNormalPaylines = function disableHighlightNormalPaylines() {
          for (var col = 0; col < this.paylinesMatrix.length; ++col) {
            for (var row = 0; row < this.paylinesMatrix[col].length; ++row) {
              var _this$paylinesMatrix$2 = this.paylinesMatrix[col][row],
                  symbol = _this$paylinesMatrix$2.symbol,
                  paylineSymbol = _this$paylinesMatrix$2.paylineSymbol,
                  winLineFrame = _this$paylinesMatrix$2.winLineFrame;

              if (symbol && paylineSymbol) {
                symbol.emit('DISABLE_HIGHLIGHT');
                paylineSymbol.emit('DISABLE_HIGHLIGHT');
              }

              if (winLineFrame) winLineFrame.active = false;
            }
          }

          if (this.dimBackground) this.dimBackground.active = true;
        };

        _proto.blinkNormalPaylinePerline = function blinkNormalPaylinePerline(_ref) {
          var payLineID = _ref.payLineID,
              payLineWinNumbers = _ref.payLineWinNumbers;
          var payline = this.config.PAY_LINE_MATRIX[payLineID];

          for (var paylinePos = 0; paylinePos < payLineWinNumbers; ++paylinePos) {
            var row = payline[paylinePos];
            var col = paylinePos;
            var paylineObject = this.paylinesMatrix[col][row];

            if (!paylineObject) {
              paylineObject = this.createPaylineObject(col, row);
            }

            if (!paylineObject) return;
            var _paylineObject = paylineObject,
                symbol = _paylineObject.symbol,
                winLineFrame = _paylineObject.winLineFrame;

            if (symbol) {
              symbol.emit('BLINK_HIGHLIGHT', this.curentConfig.BLINK_DURATION, this.curentConfig.BLINKS);
            }

            if (winLineFrame) winLineFrame.active = true;
          }
        };

        _proto.blinkNormalPaylineAllline = function blinkNormalPaylineAllline(_ref2) {
          var symbolName = _ref2.symbolName,
              symbolCount = _ref2.symbolCount;

          for (var col = 0; col < symbolCount; col++) {
            for (var row = 0; row < this.paylinesMatrix[col].length; row++) {
              var paylineObject = this.paylinesMatrix[col][row];

              if (!paylineObject) {
                paylineObject = this.createPaylineObject(col, row);
              }

              if (!paylineObject) return;
              var _paylineObject2 = paylineObject,
                  symbol = _paylineObject2.symbol,
                  winLineFrame = _paylineObject2.winLineFrame;

              if (symbol && symbol.symbol == symbolName || symbol.symbol == this.config.WILD_SYMBOL) {
                symbol.emit('BLINK_HIGHLIGHT', this.curentConfig.BLINK_DURATION, this.curentConfig.BLINKS);
                if (winLineFrame) winLineFrame.active = true;
              }
            }
          }
        };

        _proto.showNormalPaylinePerline = function showNormalPaylinePerline(_ref3) {
          var payLineID = _ref3.payLineID,
              payLineWinNumbers = _ref3.payLineWinNumbers,
              symbolName = _ref3.symbolName;
          this.disableHighlightNormalPaylines();
          var payline = this.config.PAY_LINE_MATRIX[payLineID];

          if (payline && payline.length > 0 && this.paylinesMatrix && this.paylinesMatrix.length > 0) {
            for (var paylinePos = 0; paylinePos < payLineWinNumbers; ++paylinePos) {
              var row = payline[paylinePos];
              var col = paylinePos;
              var _this$paylinesMatrix$3 = this.paylinesMatrix[col][row],
                  symbol = _this$paylinesMatrix$3.symbol,
                  paylineSymbol = _this$paylinesMatrix$3.paylineSymbol,
                  winLineFrame = _this$paylinesMatrix$3.winLineFrame,
                  isShowing = _this$paylinesMatrix$3.isShowing;

              if (symbol && paylineSymbol && isShowing) {
                if (symbol.symbol === symbolName || symbol.symbol === this.config.WILD_SYMBOL) {
                  symbol.emit('ENABLE_HIGHLIGHT');
                  paylineSymbol.emit('PLAY_ANIMATION');
                  paylineSymbol.emit('ENABLE_HIGHLIGHT');
                }
              }

              if (winLineFrame) winLineFrame.active = true;
            }
          }
        };

        _proto.showNormalPaylineAllLine = function showNormalPaylineAllLine(_ref4) {
          var symbolName = _ref4.symbolName,
              symbolCount = _ref4.symbolCount;
          this.disableHighlightNormalPaylines();

          for (var col = 0; col < symbolCount; col++) {
            for (var row = 0; row < this.paylinesMatrix[col].length; row++) {
              var _this$paylinesMatrix$4 = this.paylinesMatrix[col][row],
                  symbol = _this$paylinesMatrix$4.symbol,
                  paylineSymbol = _this$paylinesMatrix$4.paylineSymbol,
                  winLineFrame = _this$paylinesMatrix$4.winLineFrame,
                  isShowing = _this$paylinesMatrix$4.isShowing;

              if (symbol && paylineSymbol && isShowing) {
                if (symbol.symbol == symbolName || symbol.symbol == this.config.WILD_SYMBOL) {
                  symbol.emit('ENABLE_HIGHLIGHT');
                  paylineSymbol.emit('PLAY_ANIMATION');
                  paylineSymbol.emit('ENABLE_HIGHLIGHT');
                  if (winLineFrame) winLineFrame.active = true;
                }
              }
            }
          }
        };

        _proto.showScatterPayLine = function showScatterPayLine(callback) {
          this.soundPlayer && this.soundPlayer.playSfx("ANIM_SCATTER");
          this.showSpecialPayline(this.scatterHolderNode, callback);
        };

        _proto.showBonusPayLine = function showBonusPayLine(callback) {
          this.soundPlayer && this.soundPlayer.playSfx("ANIM_BONUS");
          this.showSpecialPayline(this.bonusHolderNode, callback);
        };

        _proto.showWildPayLine = function showWildPayLine(callback) {
          this.showSpecialPayline(this.wildHolderNode, callback);
        };

        _proto.showJackpotPayLine = function showJackpotPayLine(jpPayLineID, callback) {
          this.drawPayline({
            payLineID: jpPayLineID
          });
          this.showSpecialPayline(this.jackpotHolderNode, callback);
        };

        _proto.showSpecialPayline = function showSpecialPayline(node, callback) {
          this.hideShowingPayline();
          this.setOpacity(this.paylineHolder, 255);
          this.disableHighlightNormalPaylines();
          node.forEach(function (child) {
            var symbol = child.symbol,
                paylineSymbol = child.paylineSymbol;
            if (symbol) symbol.emit('ENABLE_HIGHLIGHT');

            if (paylineSymbol) {
              paylineSymbol.emit('PLAY_ANIMATION');
              paylineSymbol.emit('ENABLE_HIGHLIGHT');
            }
          });

          this._callbackSpecialPayline = function () {
            if (callback && typeof callback == "function") {
              callback();
            }
          };

          this.scheduleOnce(this._callbackSpecialPayline, this.curentConfig.ANIMATION_DURATION);
        };

        _proto.hideShowingPayline = function hideShowingPayline() {
          this.showingPayline = false;
          this.paylineTime = 0;
          if (this.guiMgr) this.guiMgr.hidePaylineInfo();
        };

        _proto.findIndex = function findIndex(col, row) {
          if (col === void 0) {
            col = 5;
          }

          if (row === void 0) {
            row = 3;
          }

          return col * this.node['reels'].length + row;
        };

        _proto.clearPaylines = function clearPaylines() {
          this.payLineNormals = null;
          if (this.showDrawingLine && this.eventManager) this.eventManager.emit(EventNames.DRAWING_LINE_CLEAR);

          if (this._blinkingCallback) {
            this.unschedule(this._blinkingCallback);
            this._blinkingCallback = null;
          }

          if (this._callbackSpecialPayline) {
            this.unschedule(this._callbackSpecialPayline);
            this._callbackSpecialPayline = null;
          }

          this.hideShowingPayline();
          this.resetSymbolPaylines();

          for (var i = 0; i < this.usingObjs.length; i++) {
            var removeObj = this.usingObjs[i];

            if (removeObj) {
              this.poolFactory.removeObject(removeObj);
            }
          }

          this.usingObjs = [];
          this.paylineHolder.active = false;
          if (this.dimBackground) this.dimBackground.active = false;
          this.resetPaylineHolder();
        };

        _proto.resetPaylineHolder = function resetPaylineHolder() {
          this.paylinesMatrix = [];
          this.scatterHolderNode = [];
          this.bonusHolderNode = [];
          this.wildHolderNode = [];
          this.jackpotHolderNode = [];
        };

        _proto.blinkHighlightPaylines = function blinkHighlightPaylines(callback) {
          var _this2 = this;

          if (callback === void 0) {
            callback = function callback() {};
          }

          if (!this.payLineNormals) {
            callback && callback();
            return;
          }

          this._blinkingCallback = function () {
            callback && callback();
            _this2._blinkingCallback = null;
          };

          this.setOpacity(this.paylineHolder, 255);
          this.disableHighlightNormalPaylines();
          if (this.showDrawingLine && this.eventManager) this.eventManager.emit(EventNames.DRAWING_LINE_CLEAR);

          for (var i = 0; i < this.payLineNormals.length; ++i) {
            this.blinkNormalPayline(this.payLineNormals[i]);
            if (this.showDrawingLine && this.eventManager) this.drawPayline(this.payLineNormals[i]);
          }

          this.node.emit('BLINK_ALL_PAYLINE');
          this.scheduleOnce(this._blinkingCallback, this.curentConfig.BLINKS * this.curentConfig.BLINK_DURATION);
        };

        _proto.update = function update(dt) {
          if (this.paylineTime > 0 && this.showingPayline) {
            this.paylineTime -= dt;

            if (this.paylineTime <= 0) {
              this.showNextPayline();
            }
          }
        };

        _proto.showNextPayline = function showNextPayline() {
          this.setOpacity(this.paylineHolder, 255);

          if (!this.payLineNormals || !this.payLineNormals[this.paylineIndex]) {
            if (this.paylineType === 'free') {
              this.showingPayline = false;
            }

            this.paylineIndex = 0;
            this._callbackShowPayline && this._callbackShowPayline();
            this._callbackShowPayline = null;
          }

          if (this.payLineNormals && this.payLineNormals[this.paylineIndex] && this.showingPayline) {
            var paylineInfo = this.payLineNormals[this.paylineIndex];
            this.showNormalPayline(paylineInfo);

            if (this.showDrawingLine && this.eventManager) {
              this.eventManager.emit(EventNames.DRAWING_LINE_CLEAR);
              this.drawPayline(paylineInfo);
            }

            if (this.guiMgr) this.guiMgr.showPaylineInfo(paylineInfo);
            this.extShowPayline();
            this.paylineIndex += 1;
            this.paylineTime = this.nextPaylineTime;
          }
        };

        _proto.getSymbolSpineData = function getSymbolSpineData(symbolName) {
          if (this.spineDataList.length > 0) {
            // prefer internal spine skeleton data list for different spine for each game mode
            for (var i = 0; i < this.spineDataList.length; i++) {
              if (this.spineDataList[i].spineName === symbolName) {
                return this.spineDataList[i].spineData;
              }
            }
          } else if (this.mainDirector && this.mainDirector.spineSkeletonDatabase) {
            // then dynamic spine skeleton database from main director
            return this.mainDirector.spineSkeletonDatabase.getSpineSkeletonData(symbolName);
          }

          return null;
        };

        _proto.drawPayline = function drawPayline(paylineInfo) {
          var payLineID = paylineInfo.payLineID;
          var payline = this.config.PAY_LINE_MATRIX[payLineID];
          if (!payline) return;

          for (var i = 0; i < payline.length; i++) {
            var col = i;
            var row = payline[i];

            if (col == 0) {
              // add first line
              if (this.eventManager) {
                this.eventManager.emit(EventNames.DRAWING_LINE_ADD_FIRST, row);
              }
            }

            if (i < payline.length - 1) {
              var val = payline[i] - payline[i + 1];
              var type = 0;
              if (val == 0) type = 0; // di ngang
              else if (val == 1) type = 1; // cheo len 1 o
                else if (val == 2) type = 3; // cheo len 2 o
                  else if (val == -1) type = 2; // cheo xuong 1 o
                    else if (val == -2) type = 4; // cheo xuong 2 o

              if (this.eventManager) {
                this.eventManager.emit(EventNames.DRAWING_LINE_ADD, type, col, row);
              }
            }

            if (col == payline.length - 1) {
              // add last line
              if (this.eventManager) {
                this.eventManager.emit(EventNames.DRAWING_LINE_ADD_LAST, row);
              }
            }
          }
        };

        _proto.showReelStaticSymbols = function showReelStaticSymbols(col, show) {
          if (col === void 0) {
            col = 1;
          }

          if (show === void 0) {
            show = true;
          }

          if (!this.paylinesMatrix || this.paylinesMatrix.length === 0) return;
          var tableFormat = this.node.tableFormat;

          for (var row = 0; row < tableFormat[col]; row++) {
            var paylineObject = this.paylinesMatrix[col][row];

            if (paylineObject) {
              var symbol = paylineObject.symbol,
                  paylineSymbol = paylineObject.paylineSymbol,
                  winLineFrame = paylineObject.winLineFrame;

              if (symbol) {
                symbol["isHidden"] = !show;
                symbol.active = show;
              }

              if (paylineSymbol) paylineSymbol.active = show;
              if (winLineFrame) winLineFrame.active = show;
              paylineObject['isShowing'] = show;
            }
          }
        };

        _proto.moveScatterParticles = function moveScatterParticles(currentGameMode, callback) {
          if (!this.paylinesMatrix || this.paylinesMatrix.length === 0) {
            callback && callback();
            return;
          }

          var PARTICLE_MOVING_TIME = this.config.PARTICLE_MOVING_TIME;
          var count = 0;

          for (var col = 0; col < this.paylinesMatrix.length; ++col) {
            for (var row = 0; row < this.paylinesMatrix[col].length; ++row) {
              var symbol = this.paylinesMatrix[col][row].symbol;

              if (symbol && symbol.symbol == 'A') {
                this.eventManager.emit("MOVE_PARTICLES", currentGameMode, symbol.getWorldPosition(), PARTICLE_MOVING_TIME ? PARTICLE_MOVING_TIME : 1, count === 0 ? callback : function () {});
                count++;
              }
            }
          }
        };

        _proto.extShowPayline = function extShowPayline() {};

        return SlotTablePayline;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "spineDataList", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "paylineHolder", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "staticPaylineHolder", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "winLineFrameHolder", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "dimBackground", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "disablePaylineHolder", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "paylineSymbolPrefabName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "SlotSymbolPayline";
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "winLineFramePrefabName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "WinLineFrame";
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "jackpotSymbol", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotTablePaylineInfo.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts', './utils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, SpriteFrame, Label, Sprite, Layout, GameObject, convertAssetArrayToObject, formatMoney;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SpriteFrame = module.SpriteFrame;
      Label = module.Label;
      Sprite = module.Sprite;
      Layout = module.Layout;
    }, function (module) {
      GameObject = module.GameObject;
    }, function (module) {
      convertAssetArrayToObject = module.convertAssetArrayToObject;
      formatMoney = module.formatMoney;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "e37ddKx//xI3Z6DIaqB9Obu", "SlotTablePaylineInfo", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotTablePaylineInfo = exports('SlotTablePaylineInfo', (_dec = ccclass('SlotTablePaylineInfo'), _dec2 = property({
        type: SpriteFrame
      }), _dec3 = property({
        type: Label
      }), _dec4 = property({
        type: Label
      }), _dec5 = property({
        type: Sprite
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(SlotTablePaylineInfo, _GameObject);

        function SlotTablePaylineInfo() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "symbolPrefix", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "smallSymbols", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbLeft", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbRight", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "symbolImg", _descriptor5, _assertThisInitialized(_this));

          _this.assets = [];
          _this.showPaylineInfo = null;
          _this._textLayout = null;
          _this._lastPayLine = "";
          return _this;
        }

        var _proto = SlotTablePaylineInfo.prototype;

        _proto.start = function start() {
          this.assets = convertAssetArrayToObject(this.smallSymbols);
          if (this.config && this.config.PAY_LINE_ALLWAYS) this.showPaylineInfo = this.showPaylineInfoAllways;else if (!this.showPaylineInfo) {
            this.showPaylineInfo = this.showPaylineInfoLine;
          }
          this.node.on("SHOW_PAYLINE", this.showPaylineInfo, this);
          this.node.on("HIDE_PAYLINE", this.hidePaylineInfo, this);
          this.hidePaylineInfo();
          this._textLayout = this.node.getComponentInChildren(Layout);
        };

        _proto.showPaylineInfoLine = function showPaylineInfoLine(_ref) {
          var _this2 = this;

          var line = _ref.line;
          var payLineID = line.payLineID,
              payLineWinNumbers = line.payLineWinNumbers,
              payLineWinAmount = line.payLineWinAmount,
              symbolName = line.symbolName;
          this.node.active = true;
          this.lbLeft.string = "Line " + payLineID + " th\u1EAFng " + payLineWinNumbers + " x";
          this.lbRight.string = " = " + formatMoney(payLineWinAmount) + "";
          this.symbolImg.spriteFrame = this.assets[this.symbolPrefix + symbolName];

          if (this._textLayout && this._lastPayLine !== payLineID) {
            this.setOpacity(this._textLayout.node, 0);
            this.scheduleOnce(function () {
              _this2.setOpacity(_this2._textLayout.node, 255);
            }, 0);
          }

          this._lastPayLine = payLineID;
        };

        _proto.showPaylineInfoAllways = function showPaylineInfoAllways(_ref2) {
          var _this3 = this;

          var line = _ref2.line;
          var symbolName = line.symbolName,
              totalWinAmount = line.totalWinAmount,
              symbolCount = line.symbolCount,
              combination = line.combination,
              payableSymbol = line.payableSymbol;
          var betDenom = this.calculateBetDenom();
          this.node.active = true;
          this.lbLeft.string = Number(symbolCount);
          this.symbolImg.spriteFrame = this.assets[this.symbolPrefix + symbolName];
          var symbolPayTableString = 'trúng ' + payableSymbol;
          var combinationString = combination > 1 ? ' (x' + combination + ')' : '';
          var calculateDenom = ' = ' + formatMoney(payableSymbol * combination) + ' x ' + formatMoney(betDenom) + ' = ';
          var winAmount = formatMoney(totalWinAmount);
          this.lbRight.string = symbolPayTableString + combinationString + calculateDenom + winAmount;

          if (this._textLayout && this._lastPayLine !== symbolName) {
            this.setOpacity(this._textLayout.node, 0);
            this.scheduleOnce(function () {
              _this3.setOpacity(_this3._textLayout.node, 255);
            }, 0);
          }

          this._lastPayLine = symbolName;
        };

        _proto.calculateBetDenom = function calculateBetDenom() {
          var mainBets = this.dataStore.betData.mainBets;
          var TOTAL_BET_CREDIT = this.config.TOTAL_BET_CREDIT;
          var betIds = this.dataStore.playSession.betId;
          var betIndex = Object.keys(mainBets).find(function (key) {
            return key == betIds[0];
          });
          return Number(mainBets[betIndex]) / TOTAL_BET_CREDIT;
        };

        _proto.hidePaylineInfo = function hidePaylineInfo() {
          if (this._textLayout) {
            this.unscheduleAllCallbacks();
          }

          this.lbLeft.string = '';
          this.lbRight.string = '';
          this.symbolImg.spriteFrame = null;
          this.node.active = false;
        };

        return SlotTablePaylineInfo;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "symbolPrefix", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "smallSymbols", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "lbLeft", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "lbRight", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "symbolImg", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotTableSoundEffect.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, GameObject;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      GameObject = module.GameObject;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "1423b7wk5dKXI48elH5+rvZ", "SlotTableSoundEffect", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotTableSoundEffect = exports('SlotTableSoundEffect', (_dec = ccclass('SlotTableSoundEffect'), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(SlotTableSoundEffect, _GameObject);

        function SlotTableSoundEffect() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "sfxReelSpinning", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sfxReelStop", _descriptor2, _assertThisInitialized(_this));

          _this.countBonus = 0;
          _this.countScatter = 0;
          return _this;
        }

        var _proto = SlotTableSoundEffect.prototype;

        _proto.onLoad = function onLoad() {
          this.node.on('TABLE_START_SOUND', this.reelStartSound, this);
          this.node.on('REEL_STOP_SOUND', this.reelStopSound, this);
        };

        _proto.reelStartSound = function reelStartSound() {
          this.countBonus = 0;
          this.countScatter = 0;
          this.sfxReelSpinning && this.soundPlayer && this.soundPlayer.playSfx(this.sfxReelSpinning);
        };

        _proto.reelStopSound = function reelStopSound(_ref) {
          var matrix = _ref.matrix,
              count = _ref.count;
          if (!this.soundPlayer) return;
          this.sfxReelStop && this.soundPlayer.playSfx(this.sfxReelStop);

          if (count >= this.node["reels"].length) {
            this.sfxReelSpinning && this.soundPlayer.stopSfx(this.sfxReelSpinning);
          }

          if (this.dataStore.modeTurbo) return;

          if (matrix.indexOf("R") > -1) {
            this.countBonus++;

            if (this.canGetBonusGame(count)) {
              this.soundPlayer.playSoundGetBonus(this.countBonus);
            }
          }

          if (matrix.indexOf("A") > -1) {
            this.countScatter++;

            if (this.canGetFreeGame(count)) {
              this.soundPlayer.playSoundGetScatter(this.countScatter);
            }
          }
        };

        _proto.canGetFreeGame = function canGetFreeGame(count) {
          if (count === 4 && this.countScatter <= 1) return false;
          if (count === 5 && this.countScatter <= 2) return false;else return true;
        };

        _proto.canGetBonusGame = function canGetBonusGame(count) {
          if (count === 4 && this.countBonus <= 1) return false;
          if (count === 5 && this.countBonus <= 2) return false;else return true;
        };

        return SlotTableSoundEffect;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "sfxReelSpinning", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "sfxReelStop", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotTableTouchSymbol.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, find, Camera, Node, Vec3, UITransform, Rect, GameObject;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      find = module.find;
      Camera = module.Camera;
      Node = module.Node;
      Vec3 = module.Vec3;
      UITransform = module.UITransform;
      Rect = module.Rect;
    }, function (module) {
      GameObject = module.GameObject;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "5273e8PuQRBG6pBLwsyW6hZ", "SlotTableTouchSymbol", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotTableTouchSymbol = exports('SlotTableTouchSymbol', (_dec = ccclass('SlotTableTouchSymbol'), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(SlotTableTouchSymbol, _GameObject);

        function SlotTableTouchSymbol() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "spineAnimBorderName", _descriptor, _assertThisInitialized(_this));

          _this.eventListenterManager = null;
          _this.isAllowTouchSymbol = true;
          _this.canvas = null;
          _this.camera = null;
          _this.allSymbols = [];
          _this.curPoint = null;
          _this.expandRow = 0;
          _this.matrix = [];
          _this.isNeedReset = false;
          return _this;
        }

        var _proto = SlotTableTouchSymbol.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          this.init();
          this.node.on("ALLOW_TOUCH_SYMBOL", this.allowTouchSymbol, this);

          if (!this.eventListenterManager) {
            this.eventListenterManager = this.mainDirector.eventManager;
          }

          this.registerEvent();
        };

        _proto.registerEvent = function registerEvent() {
          if (this.eventListenterManager) {
            this.eventListenterManager.on("ON_SHOW_SYMBOL_INFO", this.onShowSymbolInfo, this);
          }
        };

        _proto.unRegisterAll = function unRegisterAll() {
          if (this.eventListenterManager) {
            this.eventListenterManager.targetOff(this);
          }
        };

        _proto.allowTouchSymbol = function allowTouchSymbol(isAllow) {
          if (isAllow === void 0) {
            isAllow = false;
          }

          this.isAllowTouchSymbol = isAllow;
          this.guiMgr && this.guiMgr.node.emit("HIDE_INFO_SYMBOL");
        };

        _proto.init = function init() {
          this.canvas = find('Canvas');

          if (this.canvas) {
            this.camera = this.canvas.getComponentInChildren(Camera);
          }

          if (this.camera) {
            this.node.on(Node.EventType.TOUCH_END, this.onTouchEnd, this);
          }
        };

        _proto.onTouchEnd = function onTouchEnd(evt) {
          var wlocation = new Vec3(0, 0, 0);
          var location = new Vec3(evt.getLocation().x, evt.getLocation().y, 0);
          this.camera.screenToWorld(location, wlocation);
          if (this.isAllowTouchSymbol == false) return;
          this.allSymbols = this.getAllSymbol();

          for (var index = 0; index < this.allSymbols.length; index++) {
            var symbol = this.allSymbols[index];
            var widthSymbol = this.config.SYMBOL_WIDTH;
            var heigthSymbol = this.config.SYMBOL_HEIGHT;
            this.curPoint = symbol.parent.getComponent(UITransform).convertToNodeSpaceAR(wlocation);
            var rect = new Rect(symbol.getPosition().x - widthSymbol / 2, symbol.getPosition().y - heigthSymbol / 2, widthSymbol, heigthSymbol);
            var isContains = rect.contains(this.curPoint);

            if (isContains) {
              var spineData = this.findSpineData(symbol.symbol);
              var spineBorder = this.findSpineData(this.spineAnimBorderName);
              this.guiMgr && this.guiMgr.node.emit("SHOW_INFO_SYMBOL", wlocation, symbol, spineData, spineBorder);
            }
          }
        };

        _proto.getAllSymbol = function getAllSymbol() {
          var arr = [];
          var colCount = this.node['reels'].length;

          for (var col = 0; col < colCount; col++) {
            var reel = this.node['reels'][col];
            var showSymbols = reel && reel.getShowSymbols();

            if (showSymbols && showSymbols.length > 0) {
              for (var row = 0; row < showSymbols.length; row++) {
                var symbol = showSymbols[row];
                if (symbol) arr.push(symbol);
                symbol["isLeftBorder"] = col < Math.floor(colCount / 2);
                symbol["isRightBorder"] = col > Math.floor(colCount / 2);
                symbol["isMiddle"] = col === Math.floor(colCount / 2);
                symbol["collumnInfo"] = col;
                symbol["rowInfo"] = showSymbols.length - row; // reverse direction from top to bottom
              }
            }
          }

          return arr;
        };

        _proto.findSpineData = function findSpineData(animName) {
          return this.mainDirector.spineSkeletonDatabase.getSpineSkeletonData(animName);
        };

        _proto.onDestroy = function onDestroy() {
          this.unRegisterAll();
        };

        _proto.onShowSymbolInfo = function onShowSymbolInfo(isShowing) {//override here
        };

        return SlotTableTouchSymbol;
      }(GameObject), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "spineAnimBorderName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'VFX_Symbol_Light';
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotTask.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Toggle, ProgressBar, log, Component, formatWalletMoney;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Toggle = module.Toggle;
      ProgressBar = module.ProgressBar;
      log = module.log;
      Component = module.Component;
    }, function (module) {
      formatWalletMoney = module.formatWalletMoney;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "53200vCEpZGRKNp7LjnLFu8", "SlotTask", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotTask = exports('SlotTask', (_dec = ccclass('SlotTask'), _dec2 = property({
        type: Label
      }), _dec3 = property({
        type: Toggle
      }), _dec4 = property({
        type: ProgressBar
      }), _dec5 = property({
        type: Label
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SlotTask, _Component);

        function SlotTask() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.data = null;

          _initializerDefineProperty(_this, "description", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "status", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "progressBar", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "progressString", _descriptor4, _assertThisInitialized(_this));

          _this.inited = false;
          return _this;
        }

        var _proto = SlotTask.prototype;

        _proto.onLoad = function onLoad() {
          if (!this.inited) {
            this.description.string = '';
            this.progressString.string = '';
            this.status.isChecked = false;
            this.progressBar.progress = 0;
          }
        };

        _proto.updateData = function updateData(data) {
          this.data = data;
          var desDecoded = decodeURIComponent(this.data['Des']).replace(/\+/ig, ' ');
          this.description.string = "" + desDecoded;
          this.status.isChecked = this.data['Finished'];
          var ProgressArr = data.ProgressStr.split('/');
          ProgressArr[0] = formatWalletMoney(Math.floor(parseInt(ProgressArr[0])), 1);
          ProgressArr[1] = formatWalletMoney(Math.floor(parseInt(ProgressArr[1])), 1);
          this.progressString.string = ProgressArr[0] + "/" + ProgressArr[1];
          log("Updated task " + data.id + " : " + this.progressString.string); //this.progressString.node.active = !(this.data['Finished']);

          this.progressBar.progress = data.Progress;
          this.inited = true;
        };

        _proto.isDone = function isDone() {
          return this.status.isChecked;
        };

        return SlotTask;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "description", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "status", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "progressBar", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "progressString", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotText.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "2d5710PmH9OEpfHrjoIDC89", "SlotText", undefined);

      var SlotText = exports('SlotText', {
        NO_MONEY: 'Số dư trong ví không đủ,\nvui lòng nạp thêm để chơi tiếp.',
        NO_MONEY_EVENT: 'Số dư trong [wallet] không đủ,\nvui lòng nạp thêm để chơi tiếp.',
        NOT_ENOUGH_MONEY: 'Số dư trong [wallet] không đủ',
        LOST_CONNECT: 'Bạn đã bị mất kết nối. \n Vui lòng chờ ...',
        SPIN_4_EVER: 'Bạn đã mất kết nối. \n Vui lòng thử lại.',
        ANOTHER_ACCOUNT: 'Tài khoản của bạn đã\nđăng nhập từ thiết bị khác.',
        AUTHEN_FAILED: 'Xác thực tài khoản thất bại.',
        DEPOSIT_MONEY: 'Số dư không đủ,\nbạn có muốn nạp thêm ?',
        DEPOSIT_MONEY_EVENT: 'Số dư [wallet] không đủ,\nbạn có muốn nạp thêm ?',
        MISMATCH_DATA: 'Dữ liệu không đồng bộ với máy chủ,\nvui lòng thử lại.',
        SYSTEM_ERROR: 'Có lỗi xảy ra,\nvui lòng thử lại.',
        DISCONNECT: 'Bị mất kết nối tới máy chủ\n Đang kết nối lại.',
        NO_PLAYSESSION: 'Hệ thống không tìm thấy phiên chơi.',
        GROUP_MAINTAIN: 'Hệ thống đang bảo trì.\nVui lòng quay lại sau.',
        NETWORK_WARNING: 'Đường truyền mạng yếu!',
        NETWORK_DISCONNECT: 'Bị mất kết nối tới máy chủ \nĐang kết nối lại.',
        NO_FREESPIN_OPTION: 'Dữ liệu không đồng bộ với máy chủ, vui lòng thử lại.',
        IN_PROGRESSING: 'Mạng chậm vui lòng đợi trong \ngiây lát để hoàn thành\nlượt quay hoặc bấm xác nhận \nđể tải lại game.',
        SPIN_UNSUCCESS: 'Thao tác không thành công,\nvui lòng thử lại.',
        ACCOUNT_BLOCKED: 'Tài khoản của bạn đã bị khoá,\nvui lòng liên hệ admin.',
        EVENT_NOT_AVAILABLE: 'Sự kiện không hợp lệ,\nvui lòng thử lại.',
        WALLET_NORMAL: 'Ví Vàng',
        WALLET_PROMOTE: 'Ví Ngọc',
        PROMOTION_EXPIRED: 'Khuyến mãi đã hết hạn.'
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotUIScene.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './CustomEnum.ts', './EventNames.ts', './GameObject.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, sys, setOpacity, fadeIn, SlotSceneType, TutorialTriggerType, EventNames, GameObject;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sys = module.sys;
    }, function (module) {
      setOpacity = module.setOpacity;
      fadeIn = module.fadeIn;
    }, function (module) {
      SlotSceneType = module.SlotSceneType;
      TutorialTriggerType = module.TutorialTriggerType;
    }, function (module) {
      EventNames = module.default;
    }, function (module) {
      GameObject = module.GameObject;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "b957e/6glxDY7A92r823MuW", "SlotUIScene", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotUIScene = exports('SlotUIScene', (_dec = ccclass('SlotUIScene'), _dec2 = property({
        type: SlotSceneType
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(SlotUIScene, _GameObject);

        function SlotUIScene() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;
          _this.content = void 0;
          _this.callback = void 0;

          _initializerDefineProperty(_this, "sceneType", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SlotUIScene.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          this.node.on("PLAY", this.play, this);
          this.node.on("HIDE", this.exit, this);
          this.node.on("INIT", this.init, this);
          this.node.on("SKIP", this.skip, this);
          setOpacity(this.node, 0);
          this.setUpNodeInHierachy();
          this.node.active = false;
        };

        _proto.setUpNodeInHierachy = function setUpNodeInHierachy() {
          if (this.guiMgr && !this.guiMgr.getCutscene(this.sceneType)) {
            this.guiMgr.sceneComp.push(this);
          }
        };

        _proto.play = function play(content, callback) {
          var _this2 = this;

          this.content = content;

          this.callback = function () {
            _this2.callback = null;
            callback && callback();
          };

          this.show();
          this.enter();
        };

        _proto.show = function show() {
          this.node.active = true;
          setOpacity(this.node, 0);
          fadeIn(this.node, 0.2);
        };

        _proto.init = function init() {};

        _proto.enter = function enter() {//Overwrite this when extends
        };

        _proto.skip = function skip() {};

        _proto.getType = function getType() {
          return this.sceneType;
        };

        _proto.exit = function exit(callBack) {
          var _this3 = this;

          if (callBack === void 0) {
            callBack = null;
          }

          if (callBack && typeof callBack == "function") this.callback = callBack;
          this.guiMgr.onIngameEvent(TutorialTriggerType.OnCutsceneClose, 'ON_CUTSCENE_CLOSE');

          if (this.callback) {
            this.node.emit("STOP");
            this.callback();
          }

          if (sys.isNative) {
            this.eventManager && this.eventManager.emit(EventNames.REMOVE_ON_DEMAND_OBJECT, Number(this.sceneType), true, function () {
              var index = _this3.guiMgr.sceneComp.indexOf(_this3);

              if (index > -1) {
                _this3.guiMgr.sceneComp.splice(index, 1);
              }
            });
          }

          this.hideScene();
        };

        _proto.hideScene = function hideScene() {
          this.node.active = false;
        };

        _proto.playSoundClick = function playSoundClick() {
          this.soundPlayer && this.soundPlayer.playSFXClick();
        };

        return SlotUIScene;
      }(GameObject), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "sceneType", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return SlotSceneType.Other;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotUtils.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      exports({
        convertPayLine: convertPayLine,
        convertPayLineAlways: convertPayLineAlways,
        convertSlotMatrix: convertSlotMatrix
      });

      cclegacy._RF.push({}, "96805Lx4n9Dk5S6B6JDdbbb", "SlotUtils", undefined);

      function convertSlotMatrix(matrix, format) {
        var cloneMatrix = matrix.slice();
        var newMatrix = [];

        for (var col = 0; col < format.length; col++) {
          var numRow = format[col];
          var reelResult = cloneMatrix.splice(0, numRow);
          newMatrix.push(reelResult);
        }

        return newMatrix;
      }

      function convertPayLine(payLines) {
        if (!payLines) return null;
        var listNewPL = [];

        for (var i = 0; i < payLines.length; i++) {
          var dataSplit = payLines[i].split(';');

          if (dataSplit.length >= 3) {
            listNewPL.push({
              payLineID: dataSplit[0],
              payLineWinNumbers: parseInt(dataSplit[1]),
              payLineWinAmount: dataSplit[2],
              symbolName: dataSplit[3]
            });
          }
        }

        return listNewPL;
      }

      function convertPayLineAlways(payLines) {
        if (!payLines) return null;
        var listNewPL = [];

        for (var i = 0; i < payLines.length; i++) {
          var dataSplit = payLines[i].split(';');

          if (dataSplit.length !== 0) {
            listNewPL.push({
              symbolName: dataSplit[0],
              totalWinAmount: dataSplit[1],
              symbolCount: dataSplit[2],
              combination: dataSplit[3],
              payableSymbol: dataSplit[4],
              multiplier: dataSplit[5]
            });
          }
        }

        return listNewPL;
      }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SmallToolTip.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './GameObject.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Sprite, Vec3, tween, setOpacity, fadeTo, GameObject;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Vec3 = module.Vec3;
      tween = module.tween;
    }, function (module) {
      setOpacity = module.setOpacity;
      fadeTo = module.fadeTo;
    }, function (module) {
      GameObject = module.GameObject;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "403ffSWAWZKXrqgZ13mg11f", "SmallToolTip", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SmallToolTip = exports('SmallToolTip', (_dec = ccclass('SmallToolTip'), _dec2 = property({
        type: Sprite
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(SmallToolTip, _GameObject);

        function SmallToolTip() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "listSprites", _descriptor, _assertThisInitialized(_this));

          _this.tween = void 0;
          return _this;
        }

        var _proto = SmallToolTip.prototype;

        _proto.onLoad = function onLoad() {
          this.node.on('SHOW_SMALL_TOOL_TIP', this.showSmallToolTip.bind(this));
        };

        _proto.showSmallToolTip = function showSmallToolTip(listFrames) {
          var _this2 = this;

          if (listFrames === void 0) {
            listFrames = [];
          }

          var minLength = listFrames.length < this.listSprites.length ? listFrames.length : this.listSprites.length;
          if (minLength == 0) return;
          this.listSprites.forEach(function (it) {
            it.node.active = false;
          });

          for (var i = 0; i < minLength; i++) {
            this.listSprites[i].spriteFrame = listFrames[i];
            this.listSprites[i].node.active = true;
          }

          setOpacity(this.node, 255);
          this.node.scale = new Vec3(1, 1, 1);
          if (this.tween) this.tween.stop();
          this.tween = tween(this.node).to(0.1, {
            scale: new Vec3(1.2, 1.2, 1.2)
          }).to(0.1, {
            scale: new Vec3(1, 1, 1)
          }).delay(2).call(function () {
            fadeTo(_this2.node, 0.5, 1);
          }).start();
        };

        return SmallToolTip;
      }(GameObject), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "listSprites", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SortLayer1989.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfUtilities.ts', './EventsCode1989.ts', './DataStore1989.ts', './Mummy1989.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, UITransform, Component, registerEvent, SetZIndex, EventsCode1989, DataStore1989, Mummy1989;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      UITransform = module.UITransform;
      Component = module.Component;
    }, function (module) {
      registerEvent = module.registerEvent;
      SetZIndex = module.SetZIndex;
    }, function (module) {
      EventsCode1989 = module.default;
    }, function (module) {
      DataStore1989 = module.default;
    }, function (module) {
      Mummy1989 = module.Mummy1989;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "ddd337QN8lH3YOcczuqgXNF", "SortLayer1989", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SortLayer1989 = exports('SortLayer1989', (_dec = ccclass('SortLayer1989'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SortLayer1989, _Component);

        function SortLayer1989() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.obstacleObjs = [];
          return _this;
        }

        var _proto = SortLayer1989.prototype;

        _proto.onLoad = function onLoad() {
          registerEvent(EventsCode1989.GAME_LAYER.CHANGE_BACKGROUND, this.onChangeRound, this);
        };

        _proto.start = function start() {
          this.obstacleObjs = this._getObstacle();
        };

        _proto.update = function update() {
          this.node.children.sort(function (a, b) {
            return b.position.y - a.position.y;
          });
          this.node.children.forEach(function (item, index) {
            item['zIndex'] = index;
          });
          var selfInfo = DataStore1989.instance.getSelfInfo();

          if (selfInfo && selfInfo.LockFishID) {
            var lockFish = selfInfo.LockFish;

            this._sortLockFishWithObstacle(lockFish);
          }
        };

        _proto.onChangeRound = function onChangeRound() {
          this.obstacleObjs = [];
          this.obstacleObjs = this._getObstacle();
        };

        _proto._getObstacle = function _getObstacle() {
          var listObstacle = [];

          if (this.node) {
            this.node.children.forEach(function (item) {
              var isMummy = item.getComponent(Mummy1989);

              if (!isMummy && item.active) {
                listObstacle.push(item);
              }
            });
          }

          return listObstacle;
        };

        _proto._sortLockFishWithObstacle = function _sortLockFishWithObstacle(lockFish) {
          if (!lockFish || !this.obstacleObjs || this.obstacleObjs.length <= 0) return;
          var lockIndex = 1000;
          this.obstacleObjs.forEach(function (item) {
            var offSet = item.getComponent(UITransform).width / 2;
            var isBlockByObstacle = lockFish.node.position.x >= item.position.x - offSet && lockFish.node.position.x <= item.position.x + offSet;

            if (lockFish.node.zIndex < item.zIndex && isBlockByObstacle) {
              lockIndex = item.zIndex - 1;
            }
          });
          lockFish.node.zIndex = lockIndex;
          SetZIndex(lockFish.node, lockIndex);
        };

        return SortLayer1989;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Sound.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CustomTypeShare.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, AudioSource, warn, UITransform, Size, log, sys, Component, CustomAudioClip;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      AudioSource = module.AudioSource;
      warn = module.warn;
      UITransform = module.UITransform;
      Size = module.Size;
      log = module.log;
      sys = module.sys;
      Component = module.Component;
    }, function (module) {
      CustomAudioClip = module.CustomAudioClip;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;

      cclegacy._RF.push({}, "9292cCzeGpJ2qYW3aEq3Ldq", "Sound", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Sound = exports('Sound', (_dec = ccclass('Sound'), _dec2 = property(CustomAudioClip), _dec3 = property(CustomAudioClip), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Sound, _Component);

        function Sound() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "musicList", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sfxList", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "musicVolume", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sfxVolume", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "isDebug", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "dynamicLoading", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "storageKeyBGM", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "storageKeySFX", _descriptor8, _assertThisInitialized(_this));

          _this.currentMusic = void 0;
          _this.isEnableBGM = false;
          _this.isEnableSFX = false;
          _this.enableMusicFunc = void 0;
          _this.MUSIC_VOLUME = 1;
          _this.isMuteMusic = false;
          _this.isMuteEffect = false;
          _this.userGestureNode = void 0;
          _this.musicMap = {};
          _this.sfxMap = {};
          return _this;
        }

        var _proto = Sound.prototype;

        _proto.onLoad = function onLoad() {
          var _this2 = this;

          {
            globalThis['sound'] = this;
          }

          _Component.prototype.onLoad.call(this);

          this.loadCacheConfig();
          this.createUserGestureNode();
          this.userGestureNode.on(Node.EventType.TOUCH_START, this.startPlayWithUserGesture, this);
          this.musicList.forEach(function (soundObj) {
            _this2.musicMap[soundObj.soundId] = soundObj;

            var audioSource = _this2.node.addComponent(AudioSource);

            audioSource.playOnAwake = false;
            audioSource.clip = soundObj.audioFile;
            audioSource.stop();
            _this2.musicMap[soundObj.soundId].audioSource = audioSource;
          });
          this.sfxList.forEach(function (soundObj) {
            _this2.sfxMap[soundObj.soundId] = soundObj;

            var audioSource = _this2.node.addComponent(AudioSource);

            audioSource.playOnAwake = false;
            audioSource.clip = soundObj.audioFile;
            audioSource.stop();
            _this2.sfxMap[soundObj.soundId].audioSource = audioSource;
          });

          if (this.isDebug) {
            warn("musicList", this.musicList.map(function (soundObj) {
              return soundObj.soundId;
            }));
            warn("sfxList", this.sfxList.map(function (soundObj) {
              return soundObj.soundId;
            }));
          }

          if (this.dynamicLoading) {
            this.node.on('SET_UP_AUDIO_DATABASE', this.mappingAudioFiles.bind(this));
          }
        };

        _proto.mappingAudioFiles = function mappingAudioFiles(evt) {
          var _this3 = this;

          evt.propagationStopped = true;

          if (evt.details) {
            var audioList = evt.details.audioList;

            if (audioList && audioList.length > 0) {
              audioList.forEach(function (audioObj) {
                if (audioObj.isMusic) {
                  if (!_this3.musicMap[audioObj.soundId]) {
                    _this3.musicMap[audioObj.soundId] = audioObj;
                  }
                } else if (audioObj.isEffect) {
                  if (!_this3.sfxMap[audioObj.soundId]) {
                    _this3.sfxMap[audioObj.soundId] = audioObj;
                  }
                }
              });
            } else {
              this.resetAudioMaps();
            }
          }
        };

        _proto.resetAudioMaps = function resetAudioMaps() {
          for (var key in this.musicMap) {
            var musicObj = this.musicMap[key];

            if (musicObj && musicObj.destroyedOnSwitchMode) {
              this.musicMap[key] = null;
              delete this.musicMap[key];
            }
          }

          if (this.currentMusic && this.currentMusic.destroyedOnSwitchMode) {
            this.currentMusic = null;
          }

          for (var _key2 in this.sfxMap) {
            var soudObj = this.sfxMap[_key2];

            if (soudObj && soudObj.destroyedOnSwitchMode) {
              this.sfxMap[_key2] = null;
              delete this.sfxMap[_key2];
            }
          }
        };

        _proto.createUserGestureNode = function createUserGestureNode() {
          if (!this.userGestureNode) {
            this.userGestureNode = new Node("UserGesture");
            this.userGestureNode.parent = this.node.parent;
            this.userGestureNode.active = true;
            this.userGestureNode.setPosition(0, 0);
            this.userGestureNode.layer = this.node.layer;
            var transform = this.userGestureNode.addComponent(UITransform);
            transform.setContentSize(new Size(2024, 1200));
            this.userGestureNode.setSiblingIndex(this.userGestureNode.parent.children.length);
          }
        };

        _proto.startPlayWithUserGesture = function startPlayWithUserGesture() {
          this.playMainBGM();
          this.userGestureNode.off(Node.EventType.TOUCH_START, this.startPlayWithUserGesture, this);
        }
        /**
         * @music_API
         *  */
        ;

        _proto.playMusic = function playMusic(id, loop, volume) {
          if (loop === void 0) {
            loop = true;
          }

          if (!this.isEnableBGM) return;
          if (this.musicMap.hasOwnProperty(id) == false) return null;
          volume = this.isMuteMusic ? 0 : volume > 0 ? volume : this.musicVolume;

          if (this.currentMusic && this.currentMusic.soundId == id && !this.currentMusic.audioSource.playing) {
            this.currentMusic.audioSource.play();
            this.currentMusic.audioSource.loop = loop;
            this.currentMusic.audioSource.volume = volume;
          } else {
            if (this.currentMusic && this.currentMusic.soundId == id) return this.currentMusic;
            if (this.currentMusic) this.currentMusic.audioSource.stop();
            this.currentMusic = this.musicMap[id];

            if (this.currentMusic) {
              this.currentMusic.audioSource.play();
              this.currentMusic.audioSource.loop = loop;
              this.currentMusic.audioSource.volume = volume;
            }
          }

          this.isDebug && log("%cSOUND playMusic", "color:red", id);
          return this.currentMusic;
        };

        _proto.stopMusic = function stopMusic() {
          this.currentMusic && this.currentMusic.audioSource.playing && this.currentMusic.audioSource.stop();
        };

        _proto.pauseMusic = function pauseMusic() {
          this.currentMusic && this.currentMusic.audioSource.playing && this.currentMusic.audioSource.pause();
        };

        _proto.setMusicVolume = function setMusicVolume(volume) {
          volume = volume < 0.01 ? 0.01 : volume;
          this.musicVolume = volume;

          for (var key in this.musicMap) {
            var musicObj = this.musicMap[key];
            if (musicObj) musicObj.audioSource.volume = volume;
          }
        };

        _proto.muteMusic = function muteMusic() {
          this.isMuteMusic = true;

          for (var key in this.musicMap) {
            var musicObj = this.musicMap[key];
            if (musicObj) musicObj.audioSource.volume = 0;
          }
        };

        _proto.unmuteMusic = function unmuteMusic() {
          this.isMuteMusic = false;

          for (var key in this.musicMap) {
            var musicObj = this.musicMap[key];
            if (musicObj) musicObj.audioSource.volume = this.musicVolume;
          }
        }
        /**
         * @sfx_API 
         * */
        ;

        _proto.playSfx = function playSfx(id, loop, volume) {
          if (loop === void 0) {
            loop = false;
          }

          if (!this.isEnableSFX) return;
          volume = this.isMuteEffect ? 0 : volume > 0 ? volume : this.sfxVolume;

          if (this.sfxMap.hasOwnProperty(id)) {
            var soundObj = this.sfxMap[id];

            if (soundObj) {
              soundObj.audioSource.play();
              soundObj.audioSource.loop = loop;

              if (typeof volume !== "undefined") {
                soundObj.audioSource.volume = volume;
              }
            }

            this.isDebug && log("%cSOUND playSfx", "color: blue", id);
            return soundObj;
          } else {
            warn("SOUND playSfx, do not have sfx: " + id);
            return null;
          }
        };

        _proto.stopSfx = function stopSfx(id) {
          if (this.sfxMap.hasOwnProperty(id)) {
            var soundObj = this.sfxMap[id];
            soundObj && soundObj.audioSource.playing && soundObj.audioSource.stop();
          } else {
            warn("SOUND stopSfx, do not have sfx: " + id);
          }
        };

        _proto.stopAllEffects = function stopAllEffects() {
          for (var key in this.sfxMap) {
            var soundObj = this.sfxMap[key];
            if (soundObj) this.stopSfx(soundObj.soundId);
          }
        };

        _proto.pauseAllEffects = function pauseAllEffects() {
          for (var key in this.sfxMap) {
            var soundObj = this.sfxMap[key];

            if (soundObj && soundObj.audioSource.playing) {
              soundObj.audioSource.pause();
              this.isDebug && log("%cSOUND pauseAllEffects", "color: orange", soundObj.soundId);
            }
          }
        };

        _proto.muteAllEffects = function muteAllEffects() {
          this.isMuteEffect = true;
          this.setEffectVolume(0, true);
        };

        _proto.unmuteAllEffects = function unmuteAllEffects() {
          this.isMuteEffect = false;
          this.setEffectVolume(this.sfxVolume, true);
        };

        _proto.setEffectVolume = function setEffectVolume(volume, immediate) {
          volume = volume < 0 ? 0 : volume;

          for (var key in this.sfxMap) {
            var soundObj = this.sfxMap[key];
            if (soundObj) soundObj.audioSource.volume = volume;
          }
        }
        /**
         * @canNotStop 
         */
        ;

        _proto.playSfxOneShot = function playSfxOneShot(id, volume) {
          if (!this.isEnableSFX || this.isMuteEffect) return;

          if (this.sfxMap.hasOwnProperty(id)) {
            var soundObj = this.sfxMap[id];
            volume = volume || this.sfxVolume;
            soundObj && soundObj.audioSource.playOneShot(soundObj.audioFile, volume);
          } else {
            warn("SOUND, playSfxOneShot: do not have sfx: " + id);
          }
        };

        _proto.stopAllAudio = function stopAllAudio() {
          this.stopMusic();
          this.stopAllEffects();
        }
        /**@control_setting */
        ;

        _proto.loadCacheConfig = function loadCacheConfig() {
          var isEnableBGM = sys.localStorage.getItem(this.storageKeyBGM);
          var isEnableSFX = sys.localStorage.getItem(this.storageKeySFX);
          this.isEnableBGM = isEnableBGM != null ? JSON.parse(isEnableBGM) : true;
          this.isEnableSFX = isEnableSFX != null ? JSON.parse(isEnableSFX) : true;
        };

        _proto.bgmToggle = function bgmToggle() {
          this.setBgmEnable(!this.isEnableBGM);
        };

        _proto.setBgmEnable = function setBgmEnable(enable) {
          var _this4 = this;

          this.isEnableBGM = enable;
          sys.localStorage.setItem(this.storageKeyBGM, this.isEnableBGM);

          if (this.enableMusicFunc) {
            clearTimeout(this.enableMusicFunc);
          }

          this.enableMusicFunc = setTimeout(function () {
            if (_this4.isEnableBGM) {
              _this4.playMainBGM();
            } else {
              _this4.pauseMusic();
            }

            _this4.enableMusicFunc = null;
          }, 100);
        };

        _proto.sfxToggle = function sfxToggle() {
          this.setEffectEnable(!this.isEnableBGM);
        };

        _proto.setEffectEnable = function setEffectEnable(enable) {
          this.isEnableSFX = enable;
          sys.localStorage.setItem(this.storageKeySFX, this.isEnableSFX);

          if (this.isEnableSFX) {
            this.unmuteAllEffects();
          } else {
            this.muteAllEffects();
          }
        }
        /**@implements */
        ;

        _proto.playMainBGM = function playMainBGM() {
          this.playMusic('MUSIC_MAIN');
        };

        _proto.playSFXClick = function playSFXClick() {
          this.playSfxOneShot('CLICK');
        };

        _proto.getSfxMap = function getSfxMap() {
          return this.sfxMap;
        };

        _proto.setSfxMap = function setSfxMap(data) {
          var _this5 = this;

          if (data) {
            Object.keys(data).forEach(function (key) {
              if (!_this5.sfxMap[key]) {
                _this5.sfxMap[key] = {};
              }

              Object.assign(_this5.sfxMap[key], data[key]);
            });
          }
        };

        _proto.getMusicMap = function getMusicMap() {
          return this.musicMap;
        };

        _proto.setMusicMap = function setMusicMap(data) {
          var _this6 = this;

          if (data) {
            Object.keys(data).forEach(function (key) {
              if (!_this6.musicMap[key]) {
                _this6.musicMap[key] = {};
              }

              Object.assign(_this6.musicMap[key], data[key]);
            });
          }
        };

        _proto.onDisable = function onDisable() {
          this.stopAllAudio();
          this.userGestureNode.off(Node.EventType.TOUCH_START, this.startPlayWithUserGesture, this);
        };

        _proto.test = function test() {
          this.playMusic("MUSIC_MAIN", true);
        };

        return Sound;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "musicList", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "sfxList", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "musicVolume", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.8;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "sfxVolume", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.5;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "isDebug", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "dynamicLoading", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "storageKeyBGM", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "enableBackgroundMusic";
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "storageKeySFX", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "enableSound";
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SoundController1998.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfSoundController.ts', './gfUtilities.ts', './EventsCode1998.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, GfSoundController, registerEvent, EventCode;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      GfSoundController = module.GfSoundController;
    }, function (module) {
      registerEvent = module.registerEvent;
    }, function (module) {
      EventCode = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "58cd8xv5iJMtb0cyUtW/b2e", "SoundController1998", undefined);

      var ccclass = _decorator.ccclass;
      var SoundController1998 = exports('SoundController1998', (_dec = ccclass('SoundController1998'), _dec(_class = /*#__PURE__*/function (_GfSoundController) {
        _inheritsLoose(SoundController1998, _GfSoundController);

        function SoundController1998() {
          return _GfSoundController.apply(this, arguments) || this;
        }

        var _proto = SoundController1998.prototype;

        _proto.initEvents = function initEvents() {
          _GfSoundController.prototype.initEvents.call(this);

          registerEvent(EventCode.SOUND.ACTIVE_FREEZE, this.playSfxFreeze, this);
          registerEvent(EventCode.SOUND.ADD_ITEM, this.playSfxAddItem, this);
        };

        _proto.playSfxAddItem = function playSfxAddItem() {
          this.playFishSFX("sfxAddItem");
        };

        return SoundController1998;
      }(GfSoundController)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SoundPlayerImpl.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './WebSoundPlayer.ts', './NativeSoundPlayer.ts', './CustomTypeShare.ts', './loadConfigAsync.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, warn, game, Game, sys, error, assetManager, UITransform, view, log, Component, WebSoundPlayer, NativeSoundPlayer, CustomAudioClip, loadConfigAsync;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      warn = module.warn;
      game = module.game;
      Game = module.Game;
      sys = module.sys;
      error = module.error;
      assetManager = module.assetManager;
      UITransform = module.UITransform;
      view = module.view;
      log = module.log;
      Component = module.Component;
    }, function (module) {
      WebSoundPlayer = module.WebSoundPlayer;
    }, function (module) {
      NativeSoundPlayer = module.NativeSoundPlayer;
    }, function (module) {
      CustomAudioClip = module.CustomAudioClip;
    }, function (module) {
      loadConfigAsync = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;

      cclegacy._RF.push({}, "27112mPy0pFfJ1GtTI+J91P", "SoundPlayerImpl", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SoundPlayerImpl = exports('SoundPlayerImpl', (_dec = ccclass('SoundPlayerImpl'), _dec2 = property({
        type: CustomAudioClip
      }), _dec3 = property({
        type: CustomAudioClip
      }), _dec4 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SoundPlayerImpl, _Component);

        function SoundPlayerImpl() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "musicList", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sfxList", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "userGestureNode", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "musicVolume", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sfxVolume", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "isDebug", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "storageKeyBGM", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "storageKeySFX", _descriptor8, _assertThisInitialized(_this));

          _this.currentMusic = void 0;
          _this.isEnableBGM = false;
          _this.isEnableSFX = false;
          _this.resumeSfxList = [];
          _this.enableMusicFunc = void 0;
          _this.MUSIC_VOLUME = 1;
          _this.isMuteMusic = false;
          _this.isMuteEffect = false;
          _this.musicAudioSource = null;
          _this.isWebSound = false;
          _this._soundPlayer = null;
          _this._hasAudioContext = true;
          return _this;
        }

        var _proto = SoundPlayerImpl.prototype;

        _proto.onLoad = function onLoad() {
          var _this2 = this; // globalThis.soundPlayer = this;


          this._checkDuplicateAudioFile();

          this.node.setSiblingIndex(this.node.parent.children.length + 1);
          this.loadCacheConfig();

          if (this.isDebug) {
            warn("musicList", this.musicList.map(function (soundObj) {
              return soundObj.soundId;
            }));
            warn("sfxList", this.sfxList.map(function (soundObj) {
              return soundObj.soundId;
            }));
          }

          this.node.on('SET_UP_AUDIO_DATABASE', this._loadDynamicSounds.bind(this));
          game.on(Game.EVENT_HIDE, this._onEventHide, this);
          game.on(Game.EVENT_SHOW, this._onEventShow, this);
          this.isWebSound = sys.isBrowser == true && globalThis.Howl;

          if (this.isWebSound) {
            this._soundPlayer = new WebSoundPlayer();
          } else {
            this._soundPlayer = new NativeSoundPlayer();
          }

          this._soundPlayer.init(this.musicList, this.sfxList, this.node);

          if (this.isWebSound) {
            this._soundPlayer.loadSfxList(this.sfxList, function () {});

            this._soundPlayer.loadMusicList(this.musicList, function () {
              _this2._hasAudioContext = globalThis.Howler.ctx && globalThis.Howler.ctx.state === 'running';

              if (!_this2._hasAudioContext) {
                _this2._waitForUserGesture();
              } else {
                _this2._soundPlayer.skipGesture();
              }

              _this2.playMainBGM();
            });
          }
        };

        _proto._checkDuplicateAudioFile = function _checkDuplicateAudioFile() {
          var musicFileNames = this.musicList.map(function (soundObj) {
            return soundObj.audioFile.name;
          });
          musicFileNames.forEach(function (music, index) {
            if (musicFileNames.indexOf(music) !== index) {
              error("duplicate music file", music, musicFileNames.indexOf(music), index);
            }
          });
          var sfxFileNames = this.sfxList.map(function (soundObj) {
            return soundObj.audioFile.name;
          });
          sfxFileNames.forEach(function (sfx, index) {
            if (sfxFileNames.indexOf(sfx) !== index) {
              error("duplicate sfx file", sfx, sfxFileNames.indexOf(sfx), index);
            }
          });
        };

        _proto._loadDynamicSounds = function _loadDynamicSounds(ev) {
          var _this3 = this;

          var sfxList = ev.details.audioList;

          if (sfxList) {
            this._soundPlayer.loadDynamicSounds(sfxList, function () {
              if (_this3.isWebSound) {
                sfxList.forEach(function (soundObj) {
                  assetManager.releaseAsset(soundObj.audioFile);
                });
              }
            });
          }

          ev.propagationStopped = true;
        };

        _proto.setThumbMode = function setThumbMode(isThumbMode) {
          this._soundPlayer.setThumbMode(isThumbMode);
        };

        _proto._waitForUserGesture = function _waitForUserGesture() {
          var uiTransform = this.node.getComponent(UITransform);

          if (!uiTransform) {
            uiTransform = this.node.addComponent(UITransform);
          }

          uiTransform.setContentSize(view.getDesignResolutionSize());
          this.node.on(Node.EventType.TOUCH_START, this._startPlayWithUserGesture, this);
        };

        _proto._startPlayWithUserGesture = function _startPlayWithUserGesture(ev) {
          var _this4 = this;

          log("[SoundPlayerImpl] start sound with user gesture");
          ev.preventSwallow = true;
          this.node.off(Node.EventType.TOUCH_START, this._startPlayWithUserGesture, this);
          globalThis.Howler.ctx.resume().then(function () {
            _this4._soundPlayer.resumeWithGesture();
          });
        };

        _proto._onEventHide = function _onEventHide() {
          this._soundPlayer && this._soundPlayer.onEventHide(this.isEnableBGM, this.isEnableSFX);
        };

        _proto._onEventShow = function _onEventShow() {
          this._soundPlayer && this._soundPlayer.onEventShow(this.isEnableBGM, this.isEnableSFX);
        };

        _proto.playMusic = function playMusic(id, loop, volume) {
          if (loop === void 0) {
            loop = true;
          }

          volume = this.isMuteMusic || !this.isEnableBGM ? 0 : volume > 0 ? volume : this.musicVolume;
          log("[SoundPlayerImpl] Play music " + id);
          return this._soundPlayer.playMusic(id, loop, volume);
        };

        _proto.stopMusic = function stopMusic() {
          this._soundPlayer.stopMusic();
        };

        _proto.pauseMusic = function pauseMusic() {
          this._soundPlayer.pauseMusic();
        };

        _proto.resumeMusic = function resumeMusic() {
          this._soundPlayer.resumeMusic();
        };

        _proto.setMusicVolume = function setMusicVolume(volume) {
          volume = volume < 0.01 ? 0.01 : volume;
          this.musicVolume = volume;

          this._soundPlayer.setMusicVolume(volume);
        };

        _proto.muteMusic = function muteMusic() {
          this.isMuteMusic = true;

          this._soundPlayer.muteMusic();
        };

        _proto.unmuteMusic = function unmuteMusic() {
          if (this.isEnableBGM) {
            this.isMuteMusic = false;

            this._soundPlayer.unmuteMusic(this.musicVolume);
          }
        };

        _proto.playSfx = function playSfx(sfx, loop, volume) {
          if (loop === void 0) {
            loop = false;
          }

          volume = !this.isEnableSFX || this.isMuteEffect ? 0 : volume || this.sfxVolume;
          log("[SoundPlayerImpl] Play sfx " + sfx);
          return this._soundPlayer.playSfx(sfx, loop, volume);
        };

        _proto.stopSfx = function stopSfx(sfx) {
          this._soundPlayer.stopSfx(sfx);
        };

        _proto.stopAllEffects = function stopAllEffects() {
          this._soundPlayer.stopAllEffects();
        };

        _proto.pauseAllEffects = function pauseAllEffects(isInterrupt) {
          if (isInterrupt === void 0) {
            isInterrupt = false;
          }

          this._soundPlayer.pauseAllEffects(isInterrupt);
        };

        _proto.muteAllEffects = function muteAllEffects() {
          this.isMuteEffect = true;
          this.setEffectVolume(0, true);
        };

        _proto.unmuteAllEffects = function unmuteAllEffects() {
          if (this.isEnableSFX) {
            this.isMuteEffect = false;
            this.setEffectVolume(this.sfxVolume, true);
          }
        };

        _proto.setEffectVolume = function setEffectVolume(volume, immediate) {
          volume = volume < 0 ? 0 : volume;

          this._soundPlayer.setEffectVolume(volume, immediate);
        };

        _proto.setSoundVolume = function setSoundVolume(soundId, volume) {
          if (typeof volume !== 'number') return error("invalid volume", volume);

          this._soundPlayer.setSoundVolume(soundId, volume);
        };

        _proto.fadeMusicTo = function fadeMusicTo(duration, volume) {
          this._soundPlayer.fadeMusicTo(duration, volume);
        };

        _proto.fadeSoundTo = function fadeSoundTo(soundId, duration, volume) {
          this._soundPlayer.fadeSoundTo(soundId, duration, volume);
        }
        /**
         * using to play one clip many times
         * save the return data to stopSfxOneShot 
         */
        ;

        _proto.playSfxOneShot = function playSfxOneShot(soundId, volume, loop) {
          if (loop === void 0) {
            loop = false;
          }

          volume = !this.isEnableSFX || this.isMuteEffect ? 0 : volume || this.sfxVolume;
          return this._soundPlayer.playSfxOneShot(soundId, volume, loop);
        };

        _proto.stopSfxOneShot = function stopSfxOneShot(data) {
          if (data === void 0) {
            data = null;
          }

          if (!data) return error("stopSfxOneShot invalid data", data);

          this._soundPlayer.stopSfxOneShot(data);
        };

        _proto.stopAllAudio = function stopAllAudio() {
          this._soundPlayer.stopAllAudio();
        };

        _proto.loadCacheConfig = function loadCacheConfig() {
          var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
              ENABLE_BGM = _loadConfigAsync$getC.ENABLE_BGM,
              ENABLE_SFX = _loadConfigAsync$getC.ENABLE_SFX;

          this.storageKeyBGM = ENABLE_BGM ? ENABLE_BGM : this.storageKeyBGM;
          this.storageKeySFX = ENABLE_SFX ? ENABLE_SFX : this.storageKeySFX;
          var isEnableBGM = sys.localStorage.getItem(this.storageKeyBGM);
          var isEnableSFX = sys.localStorage.getItem(this.storageKeySFX);
          this.isEnableBGM = isEnableBGM != null ? JSON.parse(isEnableBGM) : true;
          this.isEnableSFX = isEnableSFX != null ? JSON.parse(isEnableSFX) : true;
        };

        _proto.bgmToggle = function bgmToggle() {
          this.setBgmEnable(!this.isEnableBGM);
        };

        _proto.setBgmEnable = function setBgmEnable(enable) {
          var _this5 = this;

          this.isEnableBGM = enable;
          sys.localStorage.setItem(this.storageKeyBGM, this.isEnableBGM.toString());

          if (this.enableMusicFunc) {
            clearTimeout(this.enableMusicFunc);
          }

          this.enableMusicFunc = setTimeout(function () {
            if (_this5.isEnableBGM) {
              _this5.unmuteMusic();
            } else {
              _this5.muteMusic();
            }

            _this5.enableMusicFunc = null;
          }, 100);
        };

        _proto.sfxToggle = function sfxToggle() {
          this.setEffectEnable(!this.isEnableSFX);
        };

        _proto.setEffectEnable = function setEffectEnable(enable) {
          this.isEnableSFX = enable;
          sys.localStorage.setItem(this.storageKeySFX, this.isEnableSFX.toString());

          if (this.isEnableSFX) {
            this.unmuteAllEffects();
          } else {
            this.muteAllEffects();
          }
        };

        _proto.playMainBGM = function playMainBGM() {
          this.playMusic('MUSIC_MAIN');
        };

        _proto.playSFXClick = function playSFXClick() {
          this.playSfx('CLICK');
        };

        _proto.onDisable = function onDisable() {
          this.stopAllAudio();
        };

        _proto.onDestroy = function onDestroy() {
          this._soundPlayer.onDestroy();
        };

        return SoundPlayerImpl;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "musicList", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "sfxList", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "userGestureNode", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "musicVolume", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.8;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "sfxVolume", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.5;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "isDebug", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "storageKeyBGM", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "enableBackgroundMusic";
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "storageKeySFX", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "enableSound";
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SpineAnimationControl.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, sp, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "efc3eglYaFBaYsEZmSXy4Z2", "SpineAnimationControl", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SpineAnimationControl = exports('SpineAnimationControl', (_dec = ccclass('SpineAnimationControl'), _dec2 = property({
        type: sp.Skeleton
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SpineAnimationControl, _Component);

        function SpineAnimationControl() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "spine", _descriptor, _assertThisInitialized(_this));

          _this.NormalDuration = 2;
          _this._isPlaying = false;
          return _this;
        }

        var _proto = SpineAnimationControl.prototype;

        _proto.onLoad = function onLoad() {
          this.node.on("PLAY_ANIMATION", this.playAnimation, this);
          this.node.on("STOP_ANIMATION", this.stopAnimation, this);

          if (!this.spine) {
            this.spine = this.node.getComponent(sp.Skeleton);
          }

          if (!this.spine) {
            this.spine = this.node.getComponentInChildren(sp.Skeleton);
          }
        };

        _proto.playAnimation = function playAnimation(data) {
          var _this2 = this;

          var animationName = data.animationName,
              duration = data.duration,
              isLoop = data.isLoop;

          if (this.spine && !this._isPlaying) {
            this.spine.setCompleteListener(function () {});
            this.spine.setAnimation(0, animationName, isLoop);
            this.spine.timeScale = this.NormalDuration / duration;
            this._isPlaying = true;
            this.spine.setCompleteListener(function (entry) {
              if (!isLoop) {
                _this2._isPlaying = false;
              }
            });
          }
        };

        _proto.stopAnimation = function stopAnimation() {
          if (this.spine) {
            this.spine._animationQueue = [];
            this._isPlaying = false;
            this.node.active = false;
          }
        };

        return SpineAnimationControl;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "spine", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SpineController.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SpineMummy.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, input, Input, assetManager, Texture2D, ImageAsset, sp, instantiate, Vec3, Component, SpineMummy;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      input = module.input;
      Input = module.Input;
      assetManager = module.assetManager;
      Texture2D = module.Texture2D;
      ImageAsset = module.ImageAsset;
      sp = module.sp;
      instantiate = module.instantiate;
      Vec3 = module.Vec3;
      Component = module.Component;
    }, function (module) {
      SpineMummy = module.SpineMummy;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "d6f73/oeAFEXJ5kPLbIZcb6", "SpineController", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SpineController = exports('SpineController', (_dec = ccclass('SpineController'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SpineController, _Component);

        function SpineController() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "spineNode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "objectHolder", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "gridView", _descriptor3, _assertThisInitialized(_this));

          _this._finderMenu = null;
          _this._finderOptions = null;
          _this._spineMenu = null;
          _this._spineOptions = null;
          _this._mummyMenu = null;
          _this._mummyOptions = null;
          _this._spineControl = null;
          _this._skinControl = null;
          _this._animControl = null;
          _this._gui = null;
          _this._inputBox = null;
          _this._spineObjects = [];
          _this._selectedNode = null;
          return _this;
        }

        var _proto = SpineController.prototype;

        _proto.start = function start() {
          var _this2 = this;

          this._inputBox = document.createElement("input");
          this._inputBox.type = "file";
          this._inputBox.webkitdirectory = true;

          this._inputBox.onchange = function (evt) {
            _this2._importFiles(evt.target.files);
          };
        };

        _proto.onLoad = function onLoad() {
          var _this3 = this;

          this.node.on('MUMMY_SELECT', this._onMummySelect, this);
          input.on(Input.EventType.KEY_DOWN, this._onKeyDown, this);
          input.on(Input.EventType.KEY_UP, this._onKeyUp, this);
          if (!globalThis.dat || !globalThis.dat.gui) return;
          this._gui = new globalThis.dat.gui.GUI();
          this._finderOptions = {
            spines: [],
            'Import Anim': function ImportAnim() {
              _this3._inputBox.click();
            }
          };
          this._spineOptions = {
            skins: [],
            animations: []
          };
          this._mummyOptions = {
            Grid: true,
            timeStep: "",
            direction: "",
            angle: "",
            'Add Mummy': function AddMummy() {
              _this3.createSpineNode();
            },
            'Remove Mummy': function RemoveMummy() {
              _this3.removeRandomSpineNode();
            }
          };
          this.scheduleOnce(function () {
            _this3._loadMenu();

            _this3.createSpineNode();
          }, 0);
        };

        _proto._onKeyDown = function _onKeyDown(ev) {
          if (this._selectedNode) this._selectedNode.emit('ON_KEY_DOWN', ev);
        };

        _proto._onKeyUp = function _onKeyUp(ev) {
          if (this._selectedNode) this._selectedNode.emit('ON_KEY_UP', ev);
        };

        _proto._onMummySelect = function _onMummySelect(ev) {
          if (this._selectedNode && this._selectedNode != ev.target) {
            this._selectedNode.emit('DESELECT');
          }

          var _ev$target = ev.target,
              _spineObject = _ev$target._spineObject,
              _currentSkin = _ev$target._currentSkin,
              _currentAnim = _ev$target._currentAnim;

          this._loadSpineMenu(_spineObject);

          this._spineOptions.skins = _currentSkin;
          this._spineOptions.animations = _currentAnim;
          this._finderOptions.spines = _spineObject.spineName;

          this._finderMenu.updateDisplay();

          this._spineMenu.updateDisplay();

          this._selectedNode = ev.target;
        };

        _proto._loadMenu = function _loadMenu() {
          var _this4 = this;

          var _spineObject = this.spineNode._spineObject;
          this._spineObjects['Test'] = _spineObject;
          this._finderMenu = this._gui.addFolder('Finder');

          this._finderMenu.add(this._finderOptions, "Import Anim");

          this._spineControl = this._finderMenu.add(this._finderOptions, 'spines', Object.keys(this._spineObjects));

          this._spineControl.setValue('Test');

          this._spineMenu = this._gui.addFolder('Selected Anim');

          this._loadSpineMenu(_spineObject);

          this._mummyMenu = this._gui.addFolder('Selected Mummy');

          this._mummyMenu.add(this._mummyOptions, 'Grid').onChange(function (value) {
            _this4.gridView.active = value;
          });

          this._mummyMenu.add(this._mummyOptions, 'timeStep', "").onChange(function (value) {
            if (_this4._selectedNode) _this4._selectedNode.emit('SET_SPEED', Number(value));
          });

          this._mummyMenu.add(this._mummyOptions, "Add Mummy");

          this._mummyMenu.add(this._mummyOptions, "Remove Mummy");

          this._mummyMenu.open();

          this._finderMenu.open();
        };

        _proto._importFiles = function _importFiles(fileList) {
          var _this5 = this;

          if (!fileList) return;
          var pathObjects = [];

          for (var _i = 0, _Array$from = Array.from(fileList); _i < _Array$from.length; _i++) {
            var fileJson = _Array$from[_i];
            var fileJsonName = fileJson['name'];

            if (fileJsonName.includes('.json') && !fileJsonName.includes('.meta')) {
              var spineName = fileJsonName.split(".json")[0];
              var finderPath = fileJson['webkitRelativePath'].split(fileJsonName)[0];
              var jsonURL = (window.URL || window.webkitURL).createObjectURL(fileJson);
              var pathObject = {
                textureNames: [],
                imageURLs: [],
                jsonURL: jsonURL,
                atlasURL: ''
              };

              for (var _i2 = 0, _Array$from2 = Array.from(fileList); _i2 < _Array$from2.length; _i2++) {
                var file = _Array$from2[_i2];
                var fileName = file['name'];

                if (finderPath + fileName == file['webkitRelativePath'] && !fileName.includes('.meta')) {
                  var path = (window.URL || window.webkitURL).createObjectURL(file);

                  if (fileName.includes('.png')) {
                    pathObject.textureNames.push(fileName);
                    pathObject.imageURLs.push(path);
                  }

                  if (fileName.includes('.atlas')) pathObject.atlasURL = path;
                }
              }

              pathObjects[spineName] = pathObject;
            }
          }

          this.scheduleOnce(function () {
            _this5._loadSpines(pathObjects);
          }, 0.5);
        };

        _proto._loadSpines = function _loadSpines(pathObjects) {
          var _this6 = this;

          Object.keys(pathObjects).forEach(function (spineName) {
            var _pathObjects$spineNam = pathObjects[spineName],
                textureNames = _pathObjects$spineNam.textureNames,
                imageURLs = _pathObjects$spineNam.imageURLs,
                jsonURL = _pathObjects$spineNam.jsonURL,
                atlasURL = _pathObjects$spineNam.atlasURL;
            var requestsImage = [];
            imageURLs.forEach(function (url) {
              requestsImage.push({
                url: url,
                ext: '.png'
              });
            });
            assetManager.loadAny([{
              url: atlasURL,
              ext: '.txt'
            }, {
              url: jsonURL,
              ext: '.txt'
            }], function (error, assets) {
              assetManager.loadAny(requestsImage, function (err, imageAssets) {
                var atlasText = assets[0];
                var skeletonJson = assets[1];

                var _parseJson = JSON.parse(skeletonJson);

                var animations = Object.keys(_parseJson.animations);
                var skins = [];

                if (Array.isArray(_parseJson.skins)) {
                  _parseJson.skins.forEach(function (skin) {
                    skins.push(skin.name);
                  });
                } else {
                  skins = Object.keys(_parseJson.skins);
                }

                var textures = [];

                if (Array.isArray(imageAssets)) {
                  imageAssets.forEach(function (imageAsset) {
                    var texture = new Texture2D();
                    texture.image = new ImageAsset(imageAsset);
                    textures.push(texture);
                  });
                } else {
                  var texture = new Texture2D();
                  texture.image = new ImageAsset(imageAssets);
                  textures.push(texture);
                }

                var skeletonData = new sp.SkeletonData();
                skeletonData.skeletonJson = skeletonJson;
                skeletonData.atlasText = atlasText;
                skeletonData.textures = textures;
                skeletonData.textureNames = textureNames;
                _this6._spineObjects[spineName] = {
                  spineName: spineName,
                  skeletonData: skeletonData,
                  skins: skins,
                  animations: animations
                };

                _this6._loadSpineMenu({
                  skeletonData: skeletonData,
                  skins: skins,
                  animations: animations
                });

                if (_this6._spineControl) _this6._finderMenu.remove(_this6._spineControl);
                _this6._spineControl = _this6._finderMenu.add(_this6._finderOptions, 'spines', Object.keys(_this6._spineObjects));

                _this6._spineControl.onChange(function (value) {
                  _this6._loadSpineMenu(_this6._spineObjects[value]);

                  _this6.updateAnim();
                });

                _this6._spineControl.setValue(spineName);
              });
            });
          });
        };

        _proto._loadSpineMenu = function _loadSpineMenu(data) {
          var _this7 = this;

          var skins = data.skins,
              animations = data.animations;
          if (this._skinControl) this._spineMenu.remove(this._skinControl);
          if (this._animControl) this._spineMenu.remove(this._animControl);
          this._skinControl = this._spineMenu.add(this._spineOptions, 'skins', skins);

          this._skinControl.onChange(function (value) {
            _this7.updateAnim();
          });

          this._skinControl.setValue('Front');

          this._animControl = this._spineMenu.add(this._spineOptions, 'animations', animations);

          this._animControl.onChange(function (value) {
            _this7.updateAnim();
          });

          this._animControl.setValue('Walk');

          this._spineMenu.open();
        };

        _proto.updateAnim = function updateAnim() {
          if (!this._skinControl || !this._animControl || !this._spineControl || !this._selectedNode) return;

          var spineObject = this._spineObjects[this._spineControl.getValue()];

          var skins = spineObject.skins,
              animations = spineObject.animations;

          var skin = this._skinControl.getValue();

          var animation = this._animControl.getValue();

          if (skins.includes(skin) && animations.includes(animation)) {
            this._selectedNode.emit('CHANGE_ANIM', spineObject, skin, animation);
          }
        };

        _proto.update = function update(dt) {
          this._updateSelectedMummy();
        };

        _proto._updateSelectedMummy = function _updateSelectedMummy() {
          if (!this._selectedNode) return;
          this._mummyOptions.timeStep = this._selectedNode.getComponent(SpineMummy).getSpeed();

          this._mummyMenu.updateDisplay();
        };

        _proto.createSpineNode = function createSpineNode() {
          if (!this._skinControl || !this._animControl || !this._spineControl) return;

          var animObject = this._spineObjects[this._spineControl.getValue()];

          var skin = this._skinControl.getValue();

          var animation = this._animControl.getValue();

          var spineNode = instantiate(this.spineNode);
          spineNode.setParent(this.objectHolder);
          spineNode.emit('CHANGE_ANIM', animObject, skin, animation);
          spineNode.setPosition(new Vec3(0, 0, 0));
          if (!this._selectedNode) spineNode.emit('SELECT');
        };

        _proto.removeRandomSpineNode = function removeRandomSpineNode() {
          if (this._selectedNode) {
            this._selectedNode.emit('DESELECT');

            this._selectedNode.destroy();

            this._selectedNode = null;
          } else {
            var spineList = this.objectHolder.children;
            var random = spineList[Math.floor(Math.random() * spineList.length)];
            if (random) random.destroy();
          }
        };

        return SpineController;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "spineNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "objectHolder", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "gridView", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SpineFish1998.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BaseFish1998.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, sp, sys, v3, BaseFish1998;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
      sys = module.sys;
      v3 = module.v3;
    }, function (module) {
      BaseFish1998 = module.BaseFish1998;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "f0f46q9W0lERqaCCfFLeOPC", "SpineFish1998", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SpineFish1998 = exports('SpineFish1998', (_dec = ccclass('SpineFish1998'), _dec2 = property(sp.Skeleton), _dec(_class = (_class2 = /*#__PURE__*/function (_BaseFish) {
        _inheritsLoose(SpineFish1998, _BaseFish);

        function SpineFish1998() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseFish.call.apply(_BaseFish, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "fishAnim", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SpineFish1998.prototype;

        _proto.initAssets = function initAssets(config) {
          if (!this.fishAnim) {
            var fishAnim = this.node.getChildByName("mainSpine");
            this.fishAnim = fishAnim.getComponent(sp.Skeleton);
          }

          _BaseFish.prototype.initAssets.call(this, config);

          if (!this.fishAnim.skeletonData || this.fishAnim.skeletonData.name != config.asset.name) {
            this.fishAnim.skeletonData = config.asset;
          }

          this.initAnimationCacheMode(config.cacheMode);
          this.fishAnim.setAnimation(0, config.AnimationName ? config.AnimationName[0] : 'animation', true);

          if (this.fishAnim && config.customAnimProp) {
            Object.assign(this.fishAnim.node, config.customAnimProp);
          }

          this.fishAnim.premultipliedAlpha = config.premiumAlphaMode;
        };

        _proto.initAnimationCacheMode = function initAnimationCacheMode(cacheMode) {
          if (sys.isNative) {
            this.fishAnim.setAnimationCacheMode(sp.Skeleton.AnimationCacheMode.REALTIME);
          } else {
            this.fishAnim.setAnimationCacheMode(cacheMode != undefined ? cacheMode : sp.Skeleton.AnimationCacheMode.SHARED_CACHE);
          }
        };

        _proto.playEffectDie = function playEffectDie() {
          this.fishAnim.timeScale = 2;
        };

        _proto.resetColor = function resetColor() {
          this.fishAnim.color = this.NORMAL_COLOR;
        };

        _proto.setColor = function setColor(color) {
          this.fishAnim.color = color;
        };

        _proto.changeAnimationSpeed = function changeAnimationSpeed(multiple) {
          if (multiple === void 0) {
            multiple = 0.5;
          }

          this.fishAnim.timeScale *= multiple;
        };

        _proto.resetAnimationSpeed = function resetAnimationSpeed() {
          this.fishAnim.timeScale = 1;
        };

        _proto.unuse = function unuse() {
          _BaseFish.prototype.unuse.call(this);

          this.fishAnim.node.angle = 0;
          this.fishAnim.node.scale = v3(1, 1, 1);
        };

        return SpineFish1998;
      }(BaseFish1998), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "fishAnim", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SpineGrid.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './TiledMapConfig.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Camera, Graphics, Component, TiledMapConfig;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Camera = module.Camera;
      Graphics = module.Graphics;
      Component = module.Component;
    }, function (module) {
      TiledMapConfig = module.TiledMapConfig;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "95c79ww/yVHUJCbPoxIpqs7", "SpineGrid", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SpineGrid = exports('SpineGrid', (_dec = ccclass('SpineGrid'), _dec2 = property({
        type: Camera
      }), _dec3 = property(Graphics), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SpineGrid, _Component);

        function SpineGrid() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "camera", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "gridGraphic", _descriptor2, _assertThisInitialized(_this));

          _this.mapData = null;
          _this._map = null;
          _this._mapConfig = null;
          _this._labels = {};
          _this._currentLabel = null;
          return _this;
        }

        var _proto = SpineGrid.prototype;

        _proto.onLoad = function onLoad() {};

        _proto.start = function start() {
          this._mapConfig = new TiledMapConfig({
            gridSizeX: 30,
            gridSizeY: 30,
            gridWidth: 96,
            gridHeight: 48
          });

          this._renderGrid();
        };

        _proto._renderGrid = function _renderGrid() {
          this.gridGraphic.clear();

          this._drawViewPort(1560, 720);

          this._drawGridLines();
        };

        _proto._drawViewPort = function _drawViewPort(screenWidth, screenHeight) {
          this.gridGraphic.lineWidth = 2;
          this.gridGraphic.strokeColor.fromHEX('#00ff00');
          this.gridGraphic.rect(-screenWidth / 2, -screenHeight / 2, screenWidth, screenHeight);
          this.gridGraphic.stroke();
        };

        _proto._drawGridLines = function _drawGridLines() {
          var _this$_mapConfig = this._mapConfig,
              gridSizeX = _this$_mapConfig.gridSizeX,
              gridSizeY = _this$_mapConfig.gridSizeY,
              gridWidth = _this$_mapConfig.gridWidth,
              gridHeight = _this$_mapConfig.gridHeight,
              startX = _this$_mapConfig.startX,
              startY = _this$_mapConfig.startY;
          this.gridGraphic.lineWidth = 1;
          this.gridGraphic.strokeColor.fromHEX('#ffffff');

          for (var col = 0; col <= gridSizeX; col++) {
            var x = startX + col * gridWidth / 2;
            var y = startY - col * gridHeight / 2;
            this.gridGraphic.moveTo(x, y);
            this.gridGraphic.lineTo(x - gridWidth / 2 * gridSizeY, y - gridHeight / 2 * gridSizeY);
          }

          for (var row = 0; row <= gridSizeY; row++) {
            var _x = startX - row * gridWidth / 2;

            var _y = startY - row * gridHeight / 2;

            this.gridGraphic.moveTo(_x, _y);
            this.gridGraphic.lineTo(_x + gridWidth / 2 * gridSizeX, _y - gridHeight / 2 * gridSizeX);
          }

          this.gridGraphic.stroke();
        };

        return SpineGrid;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "camera", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "gridGraphic", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SpineMummy.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './TiledMapConfig.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Graphics, sp, Node, Event, KeyCode, Vec3, tween, Component, TiledMapConfig;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Graphics = module.Graphics;
      sp = module.sp;
      Node = module.Node;
      Event = module.Event;
      KeyCode = module.KeyCode;
      Vec3 = module.Vec3;
      tween = module.tween;
      Component = module.Component;
    }, function (module) {
      TiledMapConfig = module.TiledMapConfig;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "1ba35zU8IhOu4QIih7BqryG", "SpineMummy", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var DIRECTION = {
        DOWN: 0,
        LEFT: 1,
        UP: 2,
        RIGHT: 3
      };
      var SpineMummy = exports('SpineMummy', (_dec = ccclass('SpineMummy'), _dec2 = property({
        type: Graphics
      }), _dec3 = property({
        type: sp.Skeleton
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SpineMummy, _Component);

        function SpineMummy() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "selectLine", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "spine", _descriptor2, _assertThisInitialized(_this));

          _this._speed = 0;
          _this._keyQueue = [];
          _this._keyMoving = null;
          _this._mapConfig = null;
          _this._lastPos = null;
          _this.tweenMove = null;
          _this.spineData = null;
          return _this;
        }

        var _proto = SpineMummy.prototype;

        _proto.onLoad = function onLoad() {
          this.node.on(Node.EventType.MOUSE_DOWN, this.onSelect, this);
          this.node.on('SELECT', this.onSelect, this);
          this.node.on('DESELECT', this.onDeselect, this);
          this.node.on('ON_KEY_DOWN', this.onKeyDown, this);
          this.node.on('ON_KEY_UP', this.onKeyUp, this);
          this.node.on('CHANGE_ANIM', this.changeAnim, this);
          this.node.on('SET_SPEED', this.setSpeed, this);

          this._drawGridCell();

          this._mapConfig = new TiledMapConfig({
            gridSizeX: 30,
            gridSizeY: 30,
            gridWidth: 96,
            gridHeight: 48
          });
          this._speed = 1.3;
          this.node['_spineObject'] = {
            spineName: 'Test',
            skeletonData: this.spine.skeletonData,
            skins: ['Back', 'Front'],
            animations: ['Walk']
          };
          this.node['_currentSkin'] = 'Back';
          this.node['_currentAnim'] = 'Walk';
        };

        _proto._drawGridCell = function _drawGridCell(size) {
          if (size === void 0) {
            size = 1;
          }

          var h = size * 48,
              w = size * 96;
          var graphics = this.selectLine;
          graphics.clear();
          graphics.strokeColor.fromHEX('#00ff00');
          graphics.lineWidth = 3;
          graphics.moveTo(0, h / 2);
          graphics.lineTo(w / 2, 0);
          graphics.lineTo(0, -h / 2);
          graphics.lineTo(-w / 2, 0);
          graphics.lineTo(0, h / 2);
          graphics.stroke();
        };

        _proto.onSelect = function onSelect() {
          this.selectLine.node.active = true;
          this.node.dispatchEvent(new Event('MUMMY_SELECT', true));
        };

        _proto.onDeselect = function onDeselect() {
          this.selectLine.node.active = false;
        };

        _proto.onKeyDown = function onKeyDown(ev) {
          if (ev.keyCode == KeyCode.ARROW_DOWN || ev.keyCode == KeyCode.ARROW_UP || ev.keyCode == KeyCode.ARROW_RIGHT || ev.keyCode == KeyCode.ARROW_LEFT) {
            this._keyQueue.unshift(ev.keyCode);
          }

          this.checkIfMovingKey();
        };

        _proto.onKeyUp = function onKeyUp(ev) {
          this._keyQueue = this._keyQueue.filter(function (it) {
            return it != ev.keyCode;
          });
        };

        _proto.setSpeed = function setSpeed(speed) {
          this._speed = speed;
        };

        _proto.getSpeed = function getSpeed() {
          return this._speed;
        };

        _proto.checkIfMovingKey = function checkIfMovingKey() {
          var lastKey = this._keyQueue[0];
          this._keyMoving = null;

          switch (lastKey) {
            case KeyCode.ARROW_UP:
              this._keyMoving = DIRECTION.UP;
              break;

            case KeyCode.ARROW_DOWN:
              this._keyMoving = DIRECTION.DOWN;
              break;

            case KeyCode.ARROW_LEFT:
              this._keyMoving = DIRECTION.LEFT;
              break;

            case KeyCode.ARROW_RIGHT:
              this._keyMoving = DIRECTION.RIGHT;
              break;
          }

          this._moveDir(this._keyMoving);
        };

        _proto._moveDir = function _moveDir(dir) {
          var _this$_mapConfig$posi = this._mapConfig.positionToGridFloat(this.node.position.x, this.node.position.y),
              X = _this$_mapConfig$posi.X,
              Y = _this$_mapConfig$posi.Y;

          switch (dir) {
            case DIRECTION.UP:
              X -= 1;
              break;

            case DIRECTION.DOWN:
              X += 1;
              break;

            case DIRECTION.LEFT:
              Y -= 1;
              break;

            case DIRECTION.RIGHT:
              Y += 1;
              break;
          }

          var _this$_mapConfig$grid = this._mapConfig.gridToPosition(X, Y),
              x = _this$_mapConfig$grid.x,
              y = _this$_mapConfig$grid.y;

          var nextPos = new Vec3(x, y, 0);

          this._moveToNext(this.node.position, nextPos);
        };

        _proto._moveToNext = function _moveToNext(p1, p2) {
          var distance = Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));
          var time = distance / this._mapConfig.gridSize * this._speed;

          if (this.tweenMove) {
            this.tweenMove.stop();
            this.tweenMove = null;
          }

          this.tweenMove = tween(this.node).to(time, {
            position: p2
          }).start();
        };

        _proto.changeAnim = function changeAnim(spineObject, skin, animation) {
          var skeletonData = spineObject.skeletonData;
          if (!skeletonData) return;
          this.spine.skeletonData = skeletonData;
          this.spine.setSkin(skin);
          this.spine.setAnimation(0, animation, true);
          this.node['_spineObject'] = spineObject;
          this.node['_currentSkin'] = skin;
          this.node['_currentAnim'] = animation;
        };

        _proto.update = function update() {
          this._updateDirection();
        };

        _proto._updateDirection = function _updateDirection() {
          var startPos = this._lastPos;
          var endPos = this.node.getPosition();

          if (startPos && endPos) {
            if (endPos.x > startPos.x && endPos.y > startPos.y) {
              //Up
              this.spine.setSkin("Back");
              this.spine.node.setScale(1, 1);
            }

            if (endPos.x < startPos.x && endPos.y < startPos.y) {
              //Down
              this.spine.setSkin("Front");
              this.spine.node.setScale(1, 1);
            }

            if (endPos.x < startPos.x && endPos.y > startPos.y) {
              //Left
              this.spine.setSkin("Back");
              this.spine.node.setScale(-1, 1);
            }

            if (endPos.x > startPos.x && endPos.y < startPos.y) {
              //Right
              this.spine.setSkin("Front");
              this.spine.node.setScale(-1, 1);
            }
          }

          this._lastPos = endPos;
        };

        return SpineMummy;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "selectLine", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "spine", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SpineSkeletonDatabase.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CustomType.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Component, SlotCustomDataType, CustomEvent;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      SlotCustomDataType = module.SlotCustomDataType;
      CustomEvent = module.CustomEvent;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "4c61f5p/VtDmLZpdt7Lvz/p", "SpineSkeletonDatabase", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SpineSkeletonDatabase = exports('SpineSkeletonDatabase', (_dec = ccclass('SpineSkeletonDatabase'), _dec2 = property({
        type: SlotCustomDataType
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SpineSkeletonDatabase, _Component);

        function SpineSkeletonDatabase() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "spineDataList", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SpineSkeletonDatabase.prototype;

        _proto.onEnable = function onEnable() {
          this.node.dispatchEvent(new CustomEvent("SET_UP_SPINE_DATABASE", true, {
            spineSkeletonDatabase: this
          }));
        };

        _proto.onDisable = function onDisable() {
          this.node.dispatchEvent(new CustomEvent("SET_UP_SPINE_DATABASE", true, {
            spineSkeletonDatabase: null
          }));
        };

        _proto.getSpineSkeletonData = function getSpineSkeletonData(spineName) {
          for (var i = 0; i < this.spineDataList.length; i++) {
            if (this.spineDataList[i].spineName === spineName) {
              return this.spineDataList[i].spineData;
            }
          }

          return null;
        };

        return SpineSkeletonDatabase;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "spineDataList", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SpinTimes.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CustomEnum.ts', './CustomType.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Component, SlotGameMode, CustomEvent;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      SlotGameMode = module.SlotGameMode;
    }, function (module) {
      CustomEvent = module.CustomEvent;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "093c7VrlSRFdb3AafjJFvcq", "SpinTimes", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SpinTimes = exports('SpinTimes', (_dec = ccclass('SpinTimes'), _dec2 = property({
        type: SlotGameMode
      }), _dec3 = property({
        type: Label
      }), _dec4 = property({
        type: Label
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SpinTimes, _Component);

        function SpinTimes() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "currentGameMode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "deCoupling", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "spinTimes", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "promoSpinTimes", _descriptor4, _assertThisInitialized(_this));

          _this.numSpin = 0;
          return _this;
        }

        var _proto = SpinTimes.prototype;

        _proto.onLoad = function onLoad() {
          this.node.on("UPDATE_SPINTIMES", this.updateSpintimes, this);
          this.node.on("RESET_SPINTIMES", this.resetSpintimes, this);
          this.node.on("INCREASE_FAKE_SPINTIMES", this.increaseFakeSp, this);
          this.node.on("ANIM_SPINTIMES", this.addSpinTimesAnimation, this);
          this.resetSpintimes();

          if (this.deCoupling) {
            this.node.dispatchEvent(new CustomEvent("SET_UP_SPIN_TIMES", true, {
              slotGameType: this.currentGameMode,
              spinTimes: this.node
            }));
          }
        };

        _proto.resetSpintimes = function resetSpintimes() {
          if (this.spinTimes) {
            this.spinTimes.string = '';
            this.showSpinTimes(this.spinTimes.node, false);
          }

          if (this.promoSpinTimes) {
            this.promoSpinTimes.string = '';
            this.showSpinTimes(this.promoSpinTimes.node, false);
          }

          this.numSpin = 0;
        };

        _proto.updateSpintimes = function updateSpintimes(spinTimes, isPromotion) {
          if (spinTimes === void 0) {
            spinTimes = 0;
          }

          if (isPromotion === void 0) {
            isPromotion = false;
          }

          this.resetSpintimes();

          if (isPromotion) {
            this.setSpinTimes(this.promoSpinTimes, spinTimes);
          } else {
            this.setSpinTimes(this.spinTimes, spinTimes);
          }
        };

        _proto.setSpinTimes = function setSpinTimes(label, spinTimes) {
          if (label === void 0) {
            label = null;
          }

          if (!label) return;

          if (Number(spinTimes) > 0 || this.currentGameMode !== SlotGameMode.NormalGame) {
            label.string = "" + (spinTimes > 100 ? '∞' : spinTimes);
            this.numSpin = spinTimes;
            this.showSpinTimes(label.node, true);
          }
        };

        _proto.showSpinTimes = function showSpinTimes(node, isShowing) {
          if (node === void 0) {
            node = null;
          }

          this.node.active = isShowing;
          if (node) node.active = isShowing;
        };

        _proto.increaseFakeSp = function increaseFakeSp(num) {
          if (num === void 0) {
            num = 0;
          }

          this.updateSpintimes(this.numSpin + num, false);
        };

        _proto.addSpinTimesAnimation = function addSpinTimesAnimation(value, isFast, callback) {
          if (callback === void 0) {
            callback = null;
          } //TODO override add anim spin time here


          callback && callback();
        };

        return SpinTimes;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "currentGameMode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return SlotGameMode.FreeGame;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "deCoupling", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "spinTimes", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "promoSpinTimes", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SpriteFish1998.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BaseFish1998.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Animation, Sprite, BaseFish1998;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Animation = module.Animation;
      Sprite = module.Sprite;
    }, function (module) {
      BaseFish1998 = module.BaseFish1998;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "aaccdODR7VDuIvEc4lR4zOz", "SpriteFish1998", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SpriteFish1998 = exports('SpriteFish1998', (_dec = ccclass('SpriteFish1998'), _dec2 = property(Animation), _dec(_class = (_class2 = /*#__PURE__*/function (_BaseFish) {
        _inheritsLoose(SpriteFish1998, _BaseFish);

        function SpriteFish1998() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseFish.call.apply(_BaseFish, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "fishAnim", _descriptor, _assertThisInitialized(_this));

          _this._clipName = void 0;
          _this._baseSpeed = void 0;
          return _this;
        }

        var _proto = SpriteFish1998.prototype;

        _proto.initAssets = function initAssets(config) {
          if (!this.fishAnim) {
            this.fishAnim = this.node.getChildByName('mainFish').getComponent(Animation);
          }

          _BaseFish.prototype.initAssets.call(this, config);

          for (var i = 0; i < this.fishAnim.clips.length; i++) {
            this.fishAnim.removeState(this.fishAnim.clips[0].name);
          }

          this.fishAnim.clips = [config.asset];
          this.fishAnim.play(config.asset.name);
          this._clipName = this.fishAnim.clips[0].name;
          this._baseSpeed = config.asset.speed;
        };

        _proto.changeAnimationSpeed = function changeAnimationSpeed(multiple) {
          if (multiple === void 0) {
            multiple = 0.5;
          }

          this.fishAnim.getState(this._clipName).speed *= multiple;
        };

        _proto.resetAnimationSpeed = function resetAnimationSpeed() {
          if (this.fishAnim.clips.length > 0) {
            this.fishAnim.getState(this._clipName).speed = this._baseSpeed;
          }
        };

        _proto.playEffectDie = function playEffectDie() {
          this.fishAnim.getState(this._clipName).speed = this._baseSpeed * 2;
        };

        _proto.resetColor = function resetColor() {
          this.fishAnim.getComponent(Sprite).color = this.NORMAL_COLOR;
        };

        _proto.setColor = function setColor(color) {
          this.fishAnim.getComponent(Sprite).color = color;
        };

        return SpriteFish1998;
      }(BaseFish1998), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "fishAnim", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/StateMonitor.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './game-network.mjs_cjs=&original=.js', './serviceRest.ts', './SessionInfo.ts', './MonitorTarget.ts', './UPNG.mjs_cjs=&original=.js', './UPNG.js', './game-network.js'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, CCInteger, Label, Slider, Button, Sprite, Node, Prefab, ProgressBar, EditBox, sys, log, find, Tween, tween, UITransform, RenderTexture, Camera, error, UIOpacity, instantiate, ToggleContainer, setDisplayStats, loader, isDisplayStats, SpriteFrame, Component, toLocalTimeHHMM, apiObject, SessionInfo, MonitorTarget, _cjsExports$1, _cjsExports;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCInteger = module.CCInteger;
      Label = module.Label;
      Slider = module.Slider;
      Button = module.Button;
      Sprite = module.Sprite;
      Node = module.Node;
      Prefab = module.Prefab;
      ProgressBar = module.ProgressBar;
      EditBox = module.EditBox;
      sys = module.sys;
      log = module.log;
      find = module.find;
      Tween = module.Tween;
      tween = module.tween;
      UITransform = module.UITransform;
      RenderTexture = module.RenderTexture;
      Camera = module.Camera;
      error = module.error;
      UIOpacity = module.UIOpacity;
      instantiate = module.instantiate;
      ToggleContainer = module.ToggleContainer;
      setDisplayStats = module.setDisplayStats;
      loader = module.loader;
      isDisplayStats = module.isDisplayStats;
      SpriteFrame = module.SpriteFrame;
      Component = module.Component;
    }, function (module) {
      toLocalTimeHHMM = module.toLocalTimeHHMM;
    }, null, function (module) {
      apiObject = module.default;
    }, function (module) {
      SessionInfo = module.SessionInfo;
    }, function (module) {
      MonitorTarget = module.MonitorTarget;
    }, null, function (module) {
      _cjsExports$1 = module.default;
    }, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, _dec25, _dec26, _dec27, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24, _descriptor25, _descriptor26;

      cclegacy._RF.push({}, "2b1d8j7azRMRaB9BcmX6lc7", "StateMonitor", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var network = globalThis.GameNetwork || _cjsExports;
      var uuid = network.lib.uuid;
      var base64abc = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "+", "/"];
      var PREFIX_LOCAL_STORE = "monitor/";
      var ENABLE_TEST = false;
      var CAPTURE_TEST = false;

      var bytesToBase64 = function bytesToBase64(bytes) {
        var result = '',
            i,
            l = bytes.length;

        for (i = 2; i < l; i += 3) {
          result += base64abc[bytes[i - 2] >> 2];
          result += base64abc[(bytes[i - 2] & 0x03) << 4 | bytes[i - 1] >> 4];
          result += base64abc[(bytes[i - 1] & 0x0F) << 2 | bytes[i] >> 6];
          result += base64abc[bytes[i] & 0x3F];
        }

        if (i === l + 1) {
          // 1 octet yet to write
          result += base64abc[bytes[i - 2] >> 2];
          result += base64abc[(bytes[i - 2] & 0x03) << 4];
          result += "==";
        }

        if (i === l) {
          // 2 octets yet to write
          result += base64abc[bytes[i - 2] >> 2];
          result += base64abc[(bytes[i - 2] & 0x03) << 4 | bytes[i - 1] >> 4];
          result += base64abc[(bytes[i - 1] & 0x0F) << 2];
          result += "=";
        }

        return result;
      };

      var WebImageStore = /*#__PURE__*/function () {
        function WebImageStore() {
          var _this = this;

          this.db = null;

          if (sys.isNative) {
            return;
          }

          if (!('indexedDB' in window)) {
            log('This browser doesn\'t support IndexedDB');
            return;
          }

          var request = indexedDB.open("gallery");

          request.onupgradeneeded = function () {
            // The database did not previously exist, so create object stores and indexes.
            var db = request.result;
            var store = db.createObjectStore("images", {
              keyPath: "id"
            });
            var idIndex = store.createIndex("by_id", "id", {
              unique: true
            });
            var idSession = store.createIndex("by_sessionId", "sessionId");
            _this.db = db;
          };

          request.onsuccess = function () {
            _this.db = request.result;
            log("Open IDB success!");
          };

          request.onerror = function () {
            log("Open IDB error!");
          };
        }

        var _proto = WebImageStore.prototype;

        _proto.add = function add(data) {
          if (this.db) {
            var tx = this.db.transaction("images", "readwrite");
            var store = tx.objectStore("images");
            store.put({
              raw: data.raw,
              id: data.id,
              sessionId: data.sessionId
            });

            tx.oncomplete = function () {
              log("add images successfully with " + data.id);
            };
          }
        };

        _proto.get = function get(id, cb) {
          if (this.db) {
            var tx = this.db.transaction("images", "readonly");
            var store = tx.objectStore("images");
            var index = store.index("by_id");
            var request = index.get(id);

            request.onsuccess = function () {
              var matching = request.result;

              if (matching !== undefined) {
                cb && cb(matching);
              }
            };
          }
        };

        _proto.remove = function remove(id) {
          if (this.db) {
            var request = this.db.transaction("images", "readwrite").objectStore("images")["delete"](id);

            request.onsuccess = function () {
              log(id + " has been removed from your database.");
            };
          }
        };

        _proto.destroyDB = function destroyDB() {
          if (this.db) {
            var request = this.db.transaction("images", "readwrite").objectStore("images").clear();

            request.onsuccess = function () {
              log("STORE has been removed from your database.");
            };
          }
        };

        _proto.close = function close() {
          if (this.db) {
            this.db.close();
            this.db;
          }
        };

        return WebImageStore;
      }();

      var StateMonitor = exports('StateMonitor', (_dec = ccclass('StateMonitor'), _dec2 = property({
        type: CCInteger
      }), _dec3 = property({
        type: CCInteger
      }), _dec4 = property({
        type: CCInteger
      }), _dec5 = property({
        type: CCInteger
      }), _dec6 = property({
        type: CCInteger
      }), _dec7 = property({
        type: Label
      }), _dec8 = property({
        type: Slider
      }), _dec9 = property({
        type: Slider
      }), _dec10 = property({
        type: Label
      }), _dec11 = property({
        type: Label
      }), _dec12 = property({
        type: Slider
      }), _dec13 = property({
        type: Button
      }), _dec14 = property({
        type: Button
      }), _dec15 = property({
        type: Button
      }), _dec16 = property({
        type: Sprite
      }), _dec17 = property({
        type: Button
      }), _dec18 = property({
        type: Node
      }), _dec19 = property({
        type: Node
      }), _dec20 = property({
        type: Prefab
      }), _dec21 = property({
        type: Label
      }), _dec22 = property({
        type: SessionInfo
      }), _dec23 = property({
        type: Label
      }), _dec24 = property({
        type: ProgressBar
      }), _dec25 = property({
        type: Node
      }), _dec26 = property({
        type: EditBox
      }), _dec27 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(StateMonitor, _Component);

        function StateMonitor() {
          var _this2;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this2 = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this2, "autoSaveTime", _descriptor, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "lowFpsDetectFrame", _descriptor2, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "eventTime", _descriptor3, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "chartTime", _descriptor4, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "lowestFpsAccept", _descriptor5, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "fpsTargetLabel", _descriptor6, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "fpsProgress", _descriptor7, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "timelineProgress", _descriptor8, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "timelineLabel", _descriptor9, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "distanceLabel", _descriptor10, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "distanceProgress", _descriptor11, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "startButton", _descriptor12, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "stopButton", _descriptor13, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "showButton", _descriptor14, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "snapshotViewer", _descriptor15, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "recordingButton", _descriptor16, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "menuHolder", _descriptor17, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "sessionHolder", _descriptor18, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "sessionPrefab", _descriptor19, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "gameData", _descriptor20, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "sessionInfo", _descriptor21, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "uploadStatus", _descriptor22, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "uploadProgress", _descriptor23, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "uploadScreen", _descriptor24, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "alliasName", _descriptor25, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "stopConfirmation", _descriptor26, _assertThisInitialized(_this2));

          _this2.fpsChartArray = void 0;
          _this2.reportLog = void 0;
          _this2.debugInfo = void 0;
          _this2.sessionId = void 0;
          _this2.fixedUpdate = void 0;
          _this2.monitoring = void 0;
          _this2.autoSaveInterval = void 0;
          _this2.averageFps = void 0;
          _this2.totalFps = void 0;
          _this2.lastTimeReport = void 0;
          _this2.fpsArray = void 0;
          _this2.gameScreen = void 0;
          _this2.envInfo = void 0;
          _this2.texture = void 0;
          _this2.selectedSessionId = void 0;
          _this2.currentReportSelect = void 0;
          _this2.isDisplayStats = void 0;
          _this2.snapshotId = void 0;
          _this2.snapShotNode = void 0;
          _this2._htmlCanvas = void 0;
          _this2._webStore = void 0;
          return _this2;
        }

        var _proto2 = StateMonitor.prototype;

        _proto2.onLoad = function onLoad() {
          this.fpsChartArray = [];
          this.reportLog = {};
          this.fpsTargetLabel.string = "AlertFPS: " + this.lowestFpsAccept;
          this.timelineLabel.string = "Chart Time: " + this.chartTime;
          this.distanceLabel.string = "Event Time: " + this.eventTime;
          this.fpsProgress.progress = this.lowestFpsAccept / 60;
          this.distanceProgress.progress = this.eventTime / 15;
          this.timelineProgress.progress = this.chartTime / 15;
          this.snapShotNode = new Node();
          this.snapShotNode.parent = this.node; //this.onShowHide();

          this.loadCachedDebug();
          this.getWebStore();
        };

        _proto2.start = function start() {// this.onShowHide();
        };

        _proto2.getWebStore = function getWebStore() {
          if (!this._webStore) {
            this._webStore = new WebImageStore();
          }

          return this._webStore;
        };

        _proto2.loadCachedDebug = function loadCachedDebug() {
          this.debugInfo = JSON.parse(sys.localStorage.getItem('performanceDebug') || '{}');

          if (this.debugInfo.lowestFpsAccept) {
            this.fpsProgress.progress = this.debugInfo.lowestFpsAccept;
            this.lowestFpsAccept = Math.round(60 * this.fpsProgress.progress);
            this.fpsTargetLabel.string = "AlertFPS: " + this.lowestFpsAccept;
          }

          if (this.debugInfo.chartTime) {
            this.timelineProgress.progress = this.debugInfo.chartTime;
            this.chartTime = Math.round(15 * this.timelineProgress.progress);
            this.timelineLabel.string = "Timeline Distance: " + this.chartTime;
          }

          if (this.debugInfo.eventTime) {
            this.distanceProgress.progress = this.debugInfo.eventTime;
            this.eventTime = Math.round(15 * this.distanceProgress.progress);
            this.distanceLabel.string = "Event Distance: " + this.eventTime;
          }
        };

        _proto2.startMonitor = function startMonitor() {
          var _this3 = this;

          this._runMonitorAnimation(this.recordingButton);

          this.sessionId = uuid();
          this.monitoring = true;
          this.fixedUpdate = setInterval(function () {
            _this3.collectFpsInfo();
          }, this.chartTime * 60000);
          this.autoSaveInterval = setInterval(function () {
            log('autosave');

            _this3.saveSession();
          }, this.autoSaveTime * 60000);
          this.startButton.node.active = false;
          this.stopButton.node.active = true;
          this.averageFps = 60;
          this.totalFps = 0;
          this.lastTimeReport = 0;
          this.fpsArray = [];
          this.fpsChartArray = [];
          this.gameScreen = null;
          this.reportLog.startTime = Date.now(); //this.reportLog.userId = GamePlayManager.getInstance().username;

          this.reportLog.timeline = [];
          this.reportLog.events = [];
          this.reportLog.targetFps = this.lowestFpsAccept;
          this.reportLog.chartTime = this.chartTime;
          this.reportLog.eventTime = this.eventTime;
          this.reportLog.deviceInfo = {
            os: sys.os,
            version: sys.osVersion,
            platform: sys.platform,
            isNative: sys.isNative,
            isBrowser: sys.isBrowser,
            browserType: sys.browserType
          };
          this.reportLog.gameId = '0000';
          this.reportLog.minFps = 60;
          this.onShowHide();
          var director = this.getMainDirector();

          if (director && director.getGameId) {
            this.reportLog.gameId = director.getGameId() || '0000';
          }

          log("[StateMonitor] start monitor game " + this.reportLog.gameId + " at time " + this.reportLog.startTime);
          CAPTURE_TEST = ENABLE_TEST;
        };

        _proto2.getMainDirector = function getMainDirector() {
          var canvas = find('Canvas');

          if (canvas != null) {
            var result = canvas.getComponentInChildren('Director');
            if (!result) result = canvas.getComponentInChildren('gfMainController');
            if (!result) result = canvas.getComponentInChildren(MonitorTarget);
            return result;
          }

          return null;
        };

        _proto2.stopMonitor = function stopMonitor() {
          this.stopConfirmation.active = true;
        };

        _proto2.onCancelStop = function onCancelStop() {
          this.stopConfirmation.active = false;
        };

        _proto2.onConfirmStop = function onConfirmStop() {
          var _this4 = this;

          this.stopConfirmation.active = false;
          this.showButton.node.active = true;
          this.stopButton.node.active = false;
          this.startButton.node.active = true;
          this.startButton.interactable = false;
          this.recordingButton.node.active = false;
          this.menuHolder.active = true;
          clearInterval(this.fixedUpdate);
          clearInterval(this.autoSaveInterval);
          Tween.stopAllByTarget(this.node);
          tween(this.node).delay(1).call(function () {
            _this4.startButton.interactable = true;
          }).start();
          this.monitoring = false;
          this.reportLog.finishTime = Date.now();
          this.reportLog.totalTime = this.reportLog.finishTime - this.reportLog.startTime;
          this.reportLog.timeline = this.fpsChartArray;
          log("[StateMonitor] Stop monitor fps at time " + this.reportLog.finishTime + " total time " + this.reportLog.totalTime);
          this.saveSession();
        };

        _proto2.collectFpsInfo = function collectFpsInfo() {
          log("[StateMonitor] Collect fps info interval " + this.averageFps);
          this.fpsChartArray.push(this.averageFps);

          if (this.averageFps < this.reportLog.minFps) {
            this.reportLog.minFps = this.averageFps;
          }
        };

        _proto2.autoSaveSession = function autoSaveSession() {};

        _proto2.reportLowFps = function reportLowFps() {
          var currentTime = Date.now();
          var event = {
            time: currentTime,
            fps: this.averageFps,
            metaData: null
          };
          this.snapshot(currentTime);
          var director = this.getMainDirector();
          event.metaData = {
            error: 'Game not implement function get data'
          };

          if (director && director.getGameMeta) {
            event.metaData = director.getGameMeta();
          }

          log("[StateMonitor] Detect low fps at time " + currentTime + ", average fps " + this.averageFps);
          this.reportLog.events.push(event);

          if (this.averageFps < this.reportLog.minFps) {
            this.reportLog.minFps = this.averageFps;
          }

          this.lastTimeReport = currentTime;
        };

        _proto2.update = function update(dt) {
          if (this.monitoring) {
            this.calculateFps(dt);
            var currentTime = Date.now();

            if (CAPTURE_TEST || this.averageFps < this.lowestFpsAccept && this.fpsArray.length >= this.lowFpsDetectFrame && currentTime - this.lastTimeReport > this.eventTime * 60000) {
              this.reportLowFps();
              CAPTURE_TEST = false;
            }
          }
        };

        _proto2.setTargetFps = function setTargetFps() {
          this.lowestFpsAccept = Math.round(60 * this.fpsProgress.progress);
          this.fpsTargetLabel.string = "AlertFPS: " + this.lowestFpsAccept;
          this.debugInfo.lowestFpsAccept = this.fpsProgress.progress;
          this.saveDebugInfo();
        };

        _proto2.setTimeline = function setTimeline() {
          this.chartTime = Math.round(15 * this.timelineProgress.progress);
          this.timelineLabel.string = "Timeline Distance: " + this.chartTime;
          this.debugInfo.chartTime = this.timelineProgress.progress;
          this.saveDebugInfo();
        };

        _proto2.setDistance = function setDistance() {
          this.eventTime = Math.round(15 * this.distanceProgress.progress);
          this.distanceLabel.string = "Event Distance: " + this.eventTime;
          this.debugInfo.eventTime = this.distanceProgress.progress;
          this.saveDebugInfo();
        };

        _proto2.calculateFps = function calculateFps(dt) {
          var fps = 1 / dt;
          this.fpsArray.unshift(fps);
          this.totalFps += fps;

          if (this.fpsArray.length > this.lowFpsDetectFrame) {
            var last = this.fpsArray.pop();
            this.totalFps -= last;
          }

          this.averageFps = this.totalFps / this.fpsArray.length;
        };

        _proto2.snapshot = function snapshot(id) {
          var _this5 = this;

          if (!this.sessionId) {
            log("[StateMonitor] Need to be in a session to snapshot");
          }

          if (!id) id = Date.now();
          var canvas = find('Canvas');
          var cw = 1560;
          var ch = 720;

          if (canvas != null) {
            var canvasTransform = canvas.getComponent(UITransform);
            cw = Math.floor(canvasTransform.width);
            ch = Math.floor(canvasTransform.height);
          }

          var texture = new RenderTexture();
          texture.reset({
            width: cw,
            height: ch
          });
          var camera = this.node.parent.getChildByName("CameraCaptureScreen").getComponent(Camera);

          if (camera) {
            camera.targetTexture = texture;
            camera.node.active = true; // this.camera.zoomRatio = ratio;
            // this.camera.render();

            if (!this.sessionId) this.sessionId = 99999;
            this.snapshotId = id;
            var count = 0;
            Tween.stopAllByTarget(this.snapShotNode);
            tween(this.snapShotNode).delay(0.01).call(function () {
              if (_this5.snapshotId) {
                var _id = _this5.snapshotId;

                if (count <= 1) {
                  count++;
                  var width = texture.width;
                  var height = texture.height;

                  if (sys.isBrowser) {
                    //@ts-ignore
                    var data = texture.readPixels();

                    var flippedImage = _this5.filpYImage(data, width, height);

                    var pngBytes = _cjsExports$1.encode([flippedImage], width, height, 255); // compress for optimize cache


                    var dataURL = "data:image/png;base64," + bytesToBase64(new Uint8Array(pngBytes));
                    log(dataURL);

                    _this5.getWebStore().add({
                      raw: dataURL,
                      id: _id
                    });
                  } else {
                    //@ts-ignore
                    var _data = texture.readPixels();

                    var _flippedImage = _this5.filpYImage(_data, width, height);

                    var _pngBytes = _cjsExports$1.encode([_flippedImage], width, height, 0); // true size


                    var _dataURL = "data:image/png;base64," + bytesToBase64(new Uint8Array(_pngBytes));

                    var folderPath = jsb.fileUtils.getWritablePath() + "gemi/" + _this5.sessionId;

                    var filePath = jsb.fileUtils.getWritablePath() + "gemi/" + _this5.sessionId + "/" + _id + ".png";

                    _this5.ensureFolder(folderPath); //@ts-ignore


                    var success = jsb.fileUtils.writeStringToFile(_dataURL, filePath);

                    if (success) {
                      log("[StateMonitor] Saved snapshot id " + _id + " at path " + filePath);
                    } else {
                      error("[StateMonitor] Failed to save snapshot " + _id + ", god know it");
                    }
                  }

                  _this5.snapshotId = null;
                  Tween.stopAllByTarget(_this5.snapShotNode);
                  camera.targetTexture = null;
                  camera.node.active = false;
                }
              }
            }).start();
          }
        };

        _proto2.ensureFolder = function ensureFolder(path) {
          if (!jsb.fileUtils.isDirectoryExist(path)) {
            jsb.fileUtils.createDirectory(path);
          }
        };

        _proto2._runMonitorAnimation = function _runMonitorAnimation(node) {
          node.active = true;
          var cmpOpacity = node.getComponent(UIOpacity);

          if (cmpOpacity === null) {
            cmpOpacity = node.addComponent(UIOpacity);
          }

          Tween.stopAllByTarget(cmpOpacity);
          tween(cmpOpacity).to(0.5, {
            "opacity": 180
          }).to(0.5, {
            "opacity": 255
          }).union().repeatForever().start();
        };

        _proto2._setOpacity = function _setOpacity(node, opacity) {
          var cmpOpacity = node.getComponent(UIOpacity);

          if (cmpOpacity === null) {
            cmpOpacity = node.addComponent(UIOpacity);
          }

          opacity = opacity <= 0 ? 0.1 : opacity;
          cmpOpacity.opacity = opacity;
        };

        _proto2.onShowHide = function onShowHide() {
          this.menuHolder.active = !this.menuHolder.active;

          if (!this.menuHolder.active) {
            if (this.monitoring) {
              this.recordingButton.node.active = true;
            }

            this._setOpacity(this.showButton.node, 0);
          } else {
            this.recordingButton.node.active = false;

            this._setOpacity(this.showButton.node, 255);
          }
        };

        _proto2.onEnable = function onEnable() {
          this.loadSessionList();
        };

        _proto2.readUserId = function readUserId() {
          var str = sys.localStorage.getItem('envInfo');

          if (str) {
            this.envInfo = JSON.parse(str);
            var currentEnv = this.envInfo.current;
            return this.envInfo[currentEnv].userId;
          }

          return '';
        };

        _proto2.saveSession = function saveSession() {
          //save report
          this.reportLog.sessionId = this.sessionId;
          this.reportLog.userId = this.readUserId();
          this.reportLog.issues = this.reportLog.events.length;
          this.reportLog.fpsAvg = 0;
          this.reportLog.finishTime = Date.now();
          this.reportLog.totalTime = this.reportLog.finishTime - this.reportLog.startTime;
          this.reportLog.timeline = this.fpsChartArray;

          if (this.reportLog.timeline.length > 0) {
            this.reportLog.fpsAvg = this.reportLog.timeline.reduce(function (a, b) {
              return a + b;
            }, 0) / this.reportLog.timeline.length;
          }

          if (sys.isNative) {
            var folderPath = jsb.fileUtils.getWritablePath() + "gemi/" + this.sessionId;
            var filePath = jsb.fileUtils.getWritablePath() + "gemi/" + this.sessionId + "/report.json";
            this.ensureFolder(folderPath);
            var saveReportSuccess = jsb.fileUtils.writeStringToFile(JSON.stringify(this.reportLog), filePath);

            if (saveReportSuccess) {
              log("[StateMonitor] Report saved at path: " + filePath);
            } else {
              error("[StateMonitor] Failed to save report " + this.sessionId);
            } //save config


            var configPath = jsb.fileUtils.getWritablePath() + "gemi/list.json";
            var jsonConfig = {};

            if (jsb.fileUtils.isFileExist(configPath)) {
              var stringConfig = jsb.fileUtils.getStringFromFile(configPath);
              jsonConfig = JSON.parse(stringConfig);
            }

            jsonConfig[this.sessionId] = {
              gameId: this.reportLog.gameId,
              sync: false,
              timeSave: Date.now()
            };
            var saveConfigSuccess = jsb.fileUtils.writeStringToFile(JSON.stringify(jsonConfig), configPath);
          } else {
            var _filePath = PREFIX_LOCAL_STORE + "gemi/" + this.sessionId + "/report.json";

            sys.localStorage.setItem(_filePath, JSON.stringify(this.reportLog));
            var _jsonConfig = {};

            var _configPath = PREFIX_LOCAL_STORE + "gemi/list.json";

            var strConfig = sys.localStorage.getItem(_configPath);

            if (strConfig) {
              _jsonConfig = JSON.parse(strConfig);
            }

            _jsonConfig[this.sessionId] = {
              gameId: this.reportLog.gameId,
              sync: false,
              timeSave: Date.now()
            };
            sys.localStorage.setItem(_configPath, JSON.stringify(_jsonConfig));
          }

          this.loadSessionList();
        };

        _proto2.refreshSesionList = function refreshSesionList(list) {
          this.sessionHolder.removeAllChildren();
          var listSession = Object.keys(list).sort(function (a, b) {
            var timeA = list[a].timeSave;
            var timeB = list[b].timeSave;
            return timeB - timeA;
          });

          for (var i = 0; i < listSession.length; i++) {
            var session = instantiate(this.sessionPrefab);
            session.getComponent('Session').setData(listSession[i], list[listSession[i]].gameId);
            session.setParent(this.sessionHolder);
          }

          var sessionToggles = this.sessionHolder.getComponent(ToggleContainer).toggleItems;

          if (sessionToggles.length > 0) {
            sessionToggles[0].isChecked = true;
            this.onSessionSelect();
          } else {
            this.sessionInfo.clear();
          }
        };

        _proto2.loadSessionList = function loadSessionList() {
          if (sys.isNative) {
            var configPath = jsb.fileUtils.getWritablePath() + "gemi/list.json";

            if (jsb.fileUtils.isFileExist(configPath)) {
              var stringConfig = jsb.fileUtils.getStringFromFile(configPath);
              var jsonConfig = JSON.parse(stringConfig);
              this.refreshSesionList(jsonConfig);
            } else {
              this.sessionHolder.removeAllChildren();
              this.gameData.string = "";
              log("[NATIVE][StateMonitor] Theres no session file list, skip reload");
            }
          } else {
            var _configPath2 = PREFIX_LOCAL_STORE + "gemi/list.json";

            var _stringConfig = localStorage.getItem(_configPath2);

            if (_stringConfig) {
              var _jsonConfig2 = JSON.parse(_stringConfig);

              this.refreshSesionList(_jsonConfig2);
            } else {
              this.sessionHolder.removeAllChildren();
              this.gameData.string = "";
              log("[WEB][StateMonitor] Theres no session file list, skip reload");
            }
          }
        };

        _proto2.clearSession = function clearSession(id) {
          if (sys.isNative) {
            var folderPath = jsb.fileUtils.getWritablePath() + "gemi/" + id;
            var configPath = jsb.fileUtils.getWritablePath() + "gemi/list.json"; //remove from list

            if (jsb.fileUtils.isFileExist(configPath)) {
              var stringConfig = jsb.fileUtils.getStringFromFile(configPath);
              var jsonConfig = JSON.parse(stringConfig);
              if (jsonConfig.hasOwnProperty(id)) delete jsonConfig[id];
              var success = jsb.fileUtils.writeStringToFile(JSON.stringify(jsonConfig), configPath);
            } //remove folder


            if (jsb.fileUtils.isDirectoryExist(folderPath)) {
              var _success = jsb.fileUtils.removeDirectory(folderPath);

              if (_success) {
                log("[StateMonitor] Deleted session " + id);
              } else {
                error("[StateMonitor] Failed to delete session " + id);
              }
            } else {
              error("[StateMonitor] failed to delete session " + id + ", its not exists");
            }
          } else {
            var _folderPath = PREFIX_LOCAL_STORE + "gemi/" + id + "/report.json";

            var _configPath3 = PREFIX_LOCAL_STORE + "gemi/list.json";

            var _stringConfig2 = localStorage.getItem(_configPath3);

            if (_stringConfig2) {
              var _jsonConfig3 = JSON.parse(_stringConfig2);

              if (_jsonConfig3.hasOwnProperty(id)) delete _jsonConfig3[id];
              localStorage.setItem(_configPath3, JSON.stringify(_jsonConfig3));

              if (!Object.keys(_jsonConfig3).length) {
                localStorage.removeItem(_configPath3);
              }
            }

            var stringReport = sys.localStorage.getItem(_folderPath);

            if (stringReport) {
              var jsonReport = JSON.parse(stringReport);

              for (var ev in jsonReport.events) {
                var time = jsonReport.events[ev].time;
                this.getWebStore().remove(time);
              }
            }

            localStorage.removeItem(_folderPath);
          }
        };

        _proto2.clearSessions = function clearSessions() {
          if (sys.isNative) {
            var folderPath = jsb.fileUtils.getWritablePath() + "gemi";

            if (jsb.fileUtils.isDirectoryExist(folderPath)) {
              var success = jsb.fileUtils.removeDirectory(folderPath);

              if (success) {
                log("[StateMonitor] Deleted all sessions " + folderPath);
                this.loadSessionList();
              } else {
                error("[StateMonitor] Failed to delete all sessions");
              }
            } else {
              log("[StateMonitor] Failed to delete all sessions, theres no session available");
            }
          } else {
            var configPath = PREFIX_LOCAL_STORE + "gemi/list.json";
            var stringConfig = localStorage.getItem(configPath);

            if (stringConfig) {
              var jsonConfig = JSON.parse(stringConfig);

              for (var id in jsonConfig) {
                var _folderPath2 = PREFIX_LOCAL_STORE + "gemi/" + id + "/report.json";

                log("remove" + _folderPath2);
                localStorage.removeItem(_folderPath2);
              }
            }

            sys.localStorage.removeItem(configPath);
            this.getWebStore().destroyDB();
          }

          this.loadSessionList();
        };

        _proto2.onSessionSelect = function onSessionSelect() {
          var sessionToggles = this.sessionHolder.getComponent(ToggleContainer).toggleItems;

          for (var i = 0; i < sessionToggles.length; i++) {
            if (sessionToggles[i].isChecked) {
              this.selectedSessionId = sessionToggles[i].getComponent('Session').getId();
              break;
            }
          }

          if (sys.isNative) {
            var filePath = jsb.fileUtils.getWritablePath() + "gemi/" + this.selectedSessionId + "/report.json";

            if (this.selectedSessionId && jsb.fileUtils.isFileExist(filePath)) {
              var stringReport = jsb.fileUtils.getStringFromFile(filePath);
              var jsonReport = JSON.parse(stringReport);
              this.currentReportSelect = jsonReport;
              this.sessionInfo.display(jsonReport);

              if (jsonReport.events.length > 0) {
                this.gameData.string = toLocalTimeHHMM(parseInt(jsonReport.events[0].time)) + "\n " + JSON.stringify(jsonReport.events[0].metaData);
                this.currentReportSelect.eventIndex = 0;
              } else {
                this.gameData.string = "";
              }
            }
          } else {
            var _filePath2 = PREFIX_LOCAL_STORE + "gemi/" + this.selectedSessionId + "/report.json";

            var _stringReport = localStorage.getItem(_filePath2);

            if (this.selectedSessionId && _stringReport) {
              var _jsonReport = JSON.parse(_stringReport);

              this.currentReportSelect = _jsonReport;
              this.sessionInfo.display(_jsonReport);

              if (_jsonReport.events.length > 0) {
                this.gameData.string = toLocalTimeHHMM(parseInt(_jsonReport.events[0].time)) + "\n " + JSON.stringify(_jsonReport.events[0].metaData);
                this.currentReportSelect.eventIndex = 0;
              } else {
                this.gameData.string = "";
              }
            }
          }
        };

        _proto2.onSessionDelete = function onSessionDelete() {
          var sessionToggles = this.sessionHolder.getComponent(ToggleContainer).toggleItems;

          for (var i = 0; i < sessionToggles.length; i++) {
            if (sessionToggles[i].isChecked) {
              var nextSelect = sessionToggles[i + 1] || sessionToggles[i - 1];

              if (nextSelect) {
                nextSelect.isChecked = true;
              } else {
                this.sessionInfo.clear();
                this.gameData.string = '';
                this.currentReportSelect = null;
                this.selectedSessionId = null;
              }

              var sessionId = sessionToggles[i].getComponent('Session').getId();
              this.clearSession(sessionId);
              sessionToggles[i].node.destroy();
              break;
            }
          }
        };

        _proto2.filpYImage = function filpYImage(data, width, height) {
          // create the data array
          var picData = new Uint8Array(width * height * 4);
          var rowBytes = width * 4;

          for (var row = 0; row < height; row++) {
            var srow = height - 1 - row;
            var start = srow * width * 4;
            var reStart = row * width * 4; // save the piexls data

            for (var i = 0; i < rowBytes; i++) {
              picData[reStart + i] = data[start + i];
            }
          }

          return picData;
        };

        _proto2.onNextIssue = function onNextIssue() {
          if (this.currentReportSelect) {
            var index = this.currentReportSelect.eventIndex;
            index = (index + 1) % this.currentReportSelect.events.length;

            if (this.currentReportSelect.events[index]) {
              this.currentReportSelect.eventIndex = index;
              this.gameData.string = toLocalTimeHHMM(parseInt(this.currentReportSelect.events[index].time)) + "\n" + JSON.stringify(this.currentReportSelect.events[index].metaData);
            }
          }
        };

        _proto2.onPreviousIssue = function onPreviousIssue() {
          if (this.currentReportSelect) {
            var index = this.currentReportSelect.eventIndex;
            index = index - 1;
            if (index < 0) index = this.currentReportSelect.events.length - 1;

            if (this.currentReportSelect.events[index]) {
              this.currentReportSelect.eventIndex = index;
              this.gameData.string = toLocalTimeHHMM(parseInt(this.currentReportSelect.events[index].time)) + "\n" + JSON.stringify(this.currentReportSelect.events[index].metaData);
            }
          }
        };

        _proto2.closeViewer = function closeViewer() {
          this.snapshotViewer.node.active = false;
          setDisplayStats(this.isDisplayStats);
        };

        _proto2.viewSnapshort = function viewSnapshort() {
          var _this6 = this;

          if (this.currentReportSelect && this.currentReportSelect.events.length > 0) {
            var id = this.currentReportSelect.events[this.currentReportSelect.eventIndex].time;

            if (sys.isNative) {
              var filePath = jsb.fileUtils.getWritablePath() + "gemi/" + this.selectedSessionId + "/" + id + ".png";

              if (jsb.fileUtils.isFileExist(filePath)) {
                loader.load(filePath, function (error, imageAsset) {
                  if (error) return;
                  _this6.isDisplayStats = isDisplayStats();
                  setDisplayStats(false);
                  var spriteFrame = new SpriteFrame();
                  var tex = imageAsset._texture;
                  spriteFrame.texture = tex;
                  _this6.snapshotViewer.spriteFrame = spriteFrame;
                  _this6.snapshotViewer.node.active = true;
                });
              }
            } else {
              this.getWebStore().get(id, function (data) {// const {raw} = data;
                //
                // let img = new Image();
                // img.onload = () => {
                //     let texture = new Texture2D();
                //     //@ts-ignore
                //     texture.initWithElement(img);
                //     //@ts-ignore
                //     texture.handleLoadedTexture();
                //
                //     this.isDisplayStats = isDisplayStats();
                //     setDisplayStats(false);
                //
                //     const spriteFrame = new SpriteFrame();
                //     spriteFrame.texture = texture;
                //     this.snapshotViewer.spriteFrame = spriteFrame;
                //     this.snapshotViewer.node.active = true;
                // };
                // img.src = raw;
              });
            }
          }
        };

        _proto2.showUpload = function showUpload() {
          this.uploadScreen.active = true;
          this.uploadProgress.progress = 0;
          this.uploadStatus.string = '';
        };

        _proto2.hideUpload = function hideUpload() {
          this.uploadScreen.active = false;
        };

        _proto2.sendData = function sendData() {
          var _this7 = this; //Todo


          if (!this.currentReportSelect) return;
          this.currentReportSelect.name = this.alliasName.string;
          var uploadTasks = [];
          var uploaded = 0;
          this.uploadProgress.progress = 0;
          var task = new Promise(function (resolve, reject) {
            apiObject.postWithHeader({
              url: 'fe-testing-tool/upload-json',
              apiUrl: 'https://api.staging.gmstd.dev/',
              data: _this7.currentReportSelect,
              callback: function callback() {
                log('upload report success');
                uploaded += 1;
                _this7.uploadProgress.progress = uploaded / uploadTasks.length;
                resolve();
              },
              callbackErr: function callbackErr() {
                log('upload report fail');
                reject();
              }
            });
          });
          uploadTasks.push(task);

          var _push = function _push() {
            _this7.uploadStatus.string = "Uploading";
            Promise.all(uploadTasks).then(function (uploadTasks) {
              _this7.uploadStatus.string = "Uploaded";
              log('upload success');
            })["catch"](function (err) {
              _this7.uploadStatus.string = "Failed Upload";
              log('upload fail ' + err);
            });
          };

          var _commitImage = function _commitImage(base64Img, id, isPush) {
            var task = new Promise(function (resolve, reject) {
              var data = {
                sessionId: _this7.selectedSessionId,
                imageBase64: base64Img,
                fileName: id + ".png"
              };
              log('start upload image ' + id);
              apiObject.postWithHeader({
                apiUrl: 'https://api.staging.gmstd.dev/',
                url: '/fe-testing-tool/upload-image',
                data: data,
                callback: function callback() {
                  log("upload image success " + id);
                  uploaded += 1;
                  _this7.uploadProgress.progress = uploaded / uploadTasks.length;
                  resolve();
                },
                callbackErr: function callbackErr() {
                  log("upload image fail " + id);
                  reject();
                }
              });
            });
            uploadTasks.push(task);
            isPush && _push();
          };

          if (this.currentReportSelect.events.length > 0) {
            var _loop = function _loop(i) {
              var id = _this7.currentReportSelect.events[i].time;

              if (sys.isNative) {
                var filePath = jsb.fileUtils.getWritablePath() + "gemi/" + _this7.selectedSessionId + "/" + id + ".png";

                if (jsb.fileUtils.isFileExist(filePath)) {
                  var base64Img = jsb.fileUtils.getStringFromFile(filePath);

                  _commitImage(base64Img, id, i == _this7.currentReportSelect.events.length - 1);
                }
              } else {
                _this7.getWebStore().get(id, function (data) {
                  var raw = data.raw;

                  _commitImage(raw, id, i == _this7.currentReportSelect.events.length - 1);
                });
              }
            };

            for (var i = 0; i < this.currentReportSelect.events.length; i++) {
              _loop(i);
            }
          } else {
            _push();
          }
        };

        _proto2.saveDebugInfo = function saveDebugInfo() {
          if (this.debugInfo) {
            sys.localStorage.setItem('performanceDebug', JSON.stringify(this.debugInfo));
          }
        };

        return StateMonitor;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "autoSaveTime", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 4;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "lowFpsDetectFrame", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 120;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "eventTime", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 2;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "chartTime", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 5;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "lowestFpsAccept", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 40;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "fpsTargetLabel", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "fpsProgress", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "timelineProgress", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "timelineLabel", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "distanceLabel", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "distanceProgress", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "startButton", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "stopButton", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "showButton", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "snapshotViewer", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "recordingButton", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "menuHolder", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "sessionHolder", [_dec19], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "sessionPrefab", [_dec20], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "gameData", [_dec21], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor21 = _applyDecoratedDescriptor(_class2.prototype, "sessionInfo", [_dec22], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor22 = _applyDecoratedDescriptor(_class2.prototype, "uploadStatus", [_dec23], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor23 = _applyDecoratedDescriptor(_class2.prototype, "uploadProgress", [_dec24], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor24 = _applyDecoratedDescriptor(_class2.prototype, "uploadScreen", [_dec25], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor25 = _applyDecoratedDescriptor(_class2.prototype, "alliasName", [_dec26], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor26 = _applyDecoratedDescriptor(_class2.prototype, "stopConfirmation", [_dec27], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/StickyWild.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, NodePool, instantiate, GameObject;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      NodePool = module.NodePool;
      instantiate = module.instantiate;
    }, function (module) {
      GameObject = module.GameObject;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "035daUIrxxMM6lkl3e+sD1I", "StickyWild", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var StickyWild = exports('StickyWild', (_dec = ccclass('StickyWild'), _dec2 = property({
        type: Prefab
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(StickyWild, _GameObject);

        function StickyWild() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "wildSymbolPrefab", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "defaultNumber", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "stickySymbol", _descriptor3, _assertThisInitialized(_this));

          _this.symbolPool = void 0;
          _this.table = void 0;
          _this.COLUMN = 5;
          _this.ROW = 3;
          _this.SYMBOL_HEIGHT = 156;
          _this.SYMBOL_WIDTH = 190;
          _this.TABLE_FORMAT = [3, 3, 3, 3, 3];
          _this.wildMatrix = void 0;
          _this.matrix = void 0;
          return _this;
        }

        var _proto = StickyWild.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          this.node.on("INIT", this.init, this);
          this.node.on("SHOW_STICKY_WILD", this.showStickyWild, this);
          this.node.on("RESET", this.reset, this);
          this.node.on("UPDATE_MATRIX", this.updateMatrix, this);
          this.node.on("CHANGE_MATRIX", this.changeMatrix, this);
        };

        _proto.initWildPool = function initWildPool() {
          this.symbolPool = new NodePool("StickyWildPool");

          for (var i = 0; i < this.defaultNumber; i++) {
            this.symbolPool.put(instantiate(this.wildSymbolPrefab));
          }
        };

        _proto.init = function init(table) {
          var _this2 = this;

          this.table = table; //this.COLUMN = this.table.tableFormat.length;
          //this.ROW = this.table.tableFormat[0];
          //this.SYMBOL_HEIGHT = this.table.node.config.SYMBOL_HEIGHT;
          //this.SYMBOL_WIDTH = this.table.node.config.SYMBOL_WIDTH;

          this.wildMatrix = Array.from(Array(this.COLUMN), function () {
            return new Array(_this2.ROW);
          });

          if (!this.wildSymbolPrefab) {
            this.wildSymbolPrefab = this.table.symbolPrefab;
          }

          this.initWildPool();
        };

        _proto.showStickyWild = function showStickyWild(reelIdx, skipAnimation) {
          if (skipAnimation === void 0) {
            skipAnimation = false;
          }

          for (var i = 0; i < this.ROW; ++i) {
            if (this.matrix[reelIdx][i] == this.stickySymbol && !this.wildMatrix[reelIdx][i]) {
              var wild = this.getStickyWild();
              this.wildMatrix[reelIdx][i] = wild;
              wild.parent = this.node;
              wild.emit('RESET');
              var x = this.getXPosition(reelIdx);
              var y = this.getYPosition(i);
              wild.setPosition(x, y);
              this.playWildAnimation(wild, skipAnimation);
            }
          }
        };

        _proto.getXPosition = function getXPosition(index) {
          var startX = -(this.TABLE_FORMAT.length / 2 - 0.5) * this.SYMBOL_WIDTH;
          return startX + this.SYMBOL_WIDTH * index;
        };

        _proto.playWildAnimation = function playWildAnimation(wildNode, isSkip) {
          if (isSkip === void 0) {
            isSkip = false;
          } // extend when do anything with wild


          wildNode.emit("PLAY_ANIMATION", isSkip);
        };

        _proto.getStickyWild = function getStickyWild() {
          if (!this.symbolPool.size()) {
            this.symbolPool.put(instantiate(this.wildSymbolPrefab));
          }

          return this.symbolPool.get();
        };

        _proto.getYPosition = function getYPosition(index) {
          var startY = -(this.ROW / 2 + 0.5) * this.SYMBOL_HEIGHT;
          return startY + this.SYMBOL_HEIGHT * (this.ROW - index);
        };

        _proto.reset = function reset() {
          for (var i = 0; i < this.COLUMN; ++i) {
            for (var j = 0; j < this.ROW; ++j) {
              if (this.wildMatrix[i][j]) {
                this.wildMatrix[i][j].emit('RESET');
                this.symbolPool.put(this.wildMatrix[i][j]);
              }

              this.wildMatrix[i][j] = null;
            }
          }

          this.node.removeAllChildren();
        };

        _proto.updateMatrix = function updateMatrix(matrix) {
          this.matrix = matrix;
        };

        _proto.changeMatrix = function changeMatrix(matrix) {
          //const matrix: any = [["4", "5", "7"], ["3", "K", "6"], ["8", "K", "K"], ["K", "2", "7"], ["2", "5", "3"]];
          this.reset();
          this.updateMatrix(matrix);

          for (var i = 0; i < this.COLUMN; ++i) {
            this.showStickyWild(i, true);
          }
        };

        _proto.onDestroy = function onDestroy() {
          this.symbolPool.clear();

          _GameObject.prototype.onDestroy.call(this);
        };

        return StickyWild;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "wildSymbolPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "defaultNumber", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 5;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "stickySymbol", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'K';
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/testMove.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfUtilities.ts', './gfActionHelper.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, sp, EditBox, ScrollView, Label, Node, Sprite, Color, Tween, tween, Vec3, Animation, Component, v2Distance, moveTo;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
      EditBox = module.EditBox;
      ScrollView = module.ScrollView;
      Label = module.Label;
      Node = module.Node;
      Sprite = module.Sprite;
      Color = module.Color;
      Tween = module.Tween;
      tween = module.tween;
      Vec3 = module.Vec3;
      Animation = module.Animation;
      Component = module.Component;
    }, function (module) {
      v2Distance = module.v2Distance;
    }, function (module) {
      moveTo = module.moveTo;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9;

      cclegacy._RF.push({}, "8e467WZE6dFT6pG8nVRMiRh", "testMove", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var testMove = exports('testMove', (_dec = ccclass('testMove'), _dec2 = property(sp.Skeleton), _dec3 = property(sp.SkeletonData), _dec4 = property(EditBox), _dec5 = property(EditBox), _dec6 = property(ScrollView), _dec7 = property(Label), _dec8 = property(), _dec9 = property(sp.Skeleton), _dec10 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(testMove, _Component);

        function testMove() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "mummyAnim", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "mummySpine", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "speedEditBox", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "timeScaleEditBox", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "ScrollViewMummy", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "currentSpeedLabel", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "speed", _descriptor7, _assertThisInitialized(_this));

          _this.gridColumn = 44;
          _this.gridRow = 44;
          _this.gridWidth = 72;
          _this.gridHeight = 36;
          _this._startX = (_this.gridRow - _this.gridColumn) / 2 * _this.gridWidth / 2;
          _this._startY = (_this.gridColumn + _this.gridRow) / 2 * _this.gridHeight / 2;
          _this._gridSize = Math.sqrt(Math.pow(_this.gridWidth / 2, 2) + Math.pow(_this.gridHeight / 2, 2));
          _this.moveAction = void 0;
          _this._currPos = null;
          _this._mummyId = 0;
          _this._timeScale = 1;
          _this.gridIds = [698, 683, 947, 952, 1216, 1206, 1030, 1025, 1597];

          _initializerDefineProperty(_this, "animSpine", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "player", _descriptor9, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = testMove.prototype;

        _proto.onLoad = function onLoad() {
          if (!this.mummyAnim) {
            this.mummyAnim = this.node.getComponentInChildren(sp.Skeleton);
          }

          this.mummyAnim.setAnimation(0, 'Walk', true);
          this._currPos = this.node.getPosition();
          this.ScrollViewMummy.getComponent(ScrollView).content.children[0].getComponent(Sprite).color = Color.GREEN;
          this.speedEditBox.string = this.speed;
          this.timeScaleEditBox.string = this._timeScale;
          window.testp = this;
        };

        _proto.runTestSpeed = function runTestSpeed() {
          this.mummyAnim.skeletonData = this.mummySpine[this._mummyId];
          var animName = this._mummyId == 0 ? "Fly" : "Walk";
          this.speed = this.speedEditBox.string;
          this._timeScale = this.timeScaleEditBox.string;
          this.currentSpeedLabel.string = "Speed is: " + this.speed + "\n TimeScale: " + this._timeScale;
          this.mummyAnim.setAnimation(0, animName, true);
          this.mummyAnim.timeScale = this._timeScale;
          Tween.stopAllByTarget(this.node);
          this.node.setPosition(this._currPos);
          this.moveByPath();
        };

        _proto.moveByPath = function moveByPath() {
          var _this2 = this;

          var totalTimeLost = 0;
          var startPos = this.convertGridIdToPosition(this.gridIds[0]);
          this.node.setPosition(startPos);
          this.moveAction = tween(this.node);

          var _loop = function _loop(i) {
            var nextPos = _this2.convertGridIdToPosition(_this2.gridIds[i]);

            var distance = v2Distance(nextPos, startPos);
            var dur = distance * _this2.speed / _this2._gridSize;
            var moveTime = Math.max(dur - totalTimeLost, 0);

            if (moveTime) {
              var currentPos = startPos;

              _this2.moveAction.call(function () {
                _this2._updateDirection(currentPos, nextPos);
              });

              _this2.moveAction.then(moveTo(moveTime, nextPos.x, nextPos.y));
            }

            startPos = nextPos;
          };

          for (var i = 1; i < this.gridIds.length; ++i) {
            _loop(i);
          }

          this.moveAction.call(function () {
            _this2.moveByPath();
          });
          this.moveAction.start();
        };

        _proto._updateDirection = function _updateDirection(startPos, endPos) {
          if (endPos.x > startPos.x && endPos.y > startPos.y) {
            //Up
            this.mummyAnim.setSkin("Back");
            this.mummyAnim.node.setScale(1, 1);
          }

          if (endPos.x < startPos.x && endPos.y < startPos.y) {
            //Down
            this.mummyAnim.setSkin("Front");
            this.mummyAnim.node.setScale(1, 1);
          }

          if (endPos.x < startPos.x && endPos.y > startPos.y) {
            //Left
            this.mummyAnim.setSkin("Back");
            this.mummyAnim.node.setScale(-1, 1);
          }

          if (endPos.x > startPos.x && endPos.y < startPos.y) {
            //Right
            this.mummyAnim.setSkin("Front");
            this.mummyAnim.node.setScale(-1, 1);
          }
        };

        _proto.convertGridIdToPosition = function convertGridIdToPosition(gridId) {
          var originPos = {
            x: -641,
            y: -360
          };
          var row = gridId % this.gridRow;
          var col = Math.floor(gridId / this.gridColumn);
          var x = this._startX + (col - row) * this.gridWidth / 2 - originPos.x;
          var y = this._startY - (row + col) * this.gridHeight / 2 - originPos.y;
          return new Vec3(x, y);
        };

        _proto.selectMummy = function selectMummy(evt, number) {
          this.resetScrollViewMummy();
          if (!evt) return;
          evt.target.getComponent(Sprite).color = Color.GREEN;
          this._mummyId = number;
        };

        _proto.resetScrollViewMummy = function resetScrollViewMummy() {
          var btnSelectMummys = this.ScrollViewMummy.getComponent(ScrollView).content.children;
          btnSelectMummys.forEach(function (btn) {
            btn.getComponent(Sprite).color = Color.WHITE;
          });
        };

        _proto.testSpine = function testSpine() {
          var _this3 = this;

          this.animSpine.timeScale = 1.5;
          this.player.getComponent(Animation).play("HideOtherUser1989");
          tween(this.node).delay(0.3).call(function () {
            _this3.animSpine.setAnimation(0, "action_idle", false);
          }).start;
        };

        _proto.testSpine1 = function testSpine1() {
          this.animSpine.setAnimation(0, "idle_action", false);
          this.animSpine.timeScale = 1.5;
          this.player.getComponent(Animation).play("InitOtherPlayerAnim1989");
        };

        return testMove;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "mummyAnim", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "mummySpine", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "speedEditBox", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "timeScaleEditBox", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "ScrollViewMummy", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "currentSpeedLabel", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "speed", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "animSpine", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "player", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TestSpine.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, sp, log, Color, Label, Button, UITransform, Overflow, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      sp = module.sp;
      log = module.log;
      Color = module.Color;
      Label = module.Label;
      Button = module.Button;
      UITransform = module.UITransform;
      Overflow = module.Overflow;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "5afb3uw/n1Kpr90PYt0VhQi", "TestSpine", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;

      function getAnimationsName(spine) {
        return Object.keys(spine.skeletonData._skeletonJson.animations);
      }

      function getSkinsName(spine) {
        return Object.keys(spine.skeletonData._skeletonJson.skins);
      }

      var TestSpine = exports('TestSpine', (_dec = ccclass('TestSpine'), _dec2 = property(Node), _dec3 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TestSpine, _Component);

        function TestSpine() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "panel", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "spineHolder", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "isShowSkin", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "canAddAnim", _descriptor4, _assertThisInitialized(_this));

          _this._spines = [];
          _this._isLoop = false;
          return _this;
        }

        var _proto = TestSpine.prototype;

        _proto.onLoad = function onLoad() {
          var _this2 = this;

          this._spines = this.spineHolder.getComponentsInChildren(sp.Skeleton);

          this._spines.forEach(function (spine) {
            spine.loop = false;
            log("%cSPINES: ", 'color:red', _this2._spines);
            spine.node.on(Node.EventType.MOUSE_DOWN, function () {
              _this2.focus(spine);
            });
          });
        };

        _proto.focus = function focus(spine) {
          log("%c SPINE", "color: red;", spine);
          this._isLoop = false;
          this.panel.removeAllChildren();
          this.addButtonReset(spine);

          if (this.isShowSkin) {
            this._creatButton("__ set skin __", Color.MAGENTA);

            this.showSkin(spine);
          }

          this._creatButton("__ set animation __", Color.MAGENTA);

          this.showAnimListToSet(spine);

          if (this.canAddAnim) {
            this._creatButton("__ add animation __", Color.MAGENTA);

            this.showAnimListToAdd(spine);
          }
        };

        _proto.addButtonReset = function addButtonReset(spine) {
          var _this3 = this;

          var buttonOn = this._creatButton("ACTIVE", Color.RED);

          buttonOn.on(Node.EventType.MOUSE_DOWN, function () {
            spine.node.active = true;
          });

          var buttonOff = this._creatButton("DEACTIVATE", Color.GRAY);

          buttonOff.on(Node.EventType.MOUSE_DOWN, function () {
            spine.node.active = false;
          });

          var buttonLoop = this._creatButton(this._isLoop ? "UNLOOP" : "LOOP", Color.BLUE);

          buttonLoop.on(Node.EventType.MOUSE_DOWN, function () {
            _this3._isLoop = !_this3._isLoop;
            buttonLoop.getComponent(Label).string = _this3._isLoop ? "UNLOOP" : "LOOP";
            var anim = spine.animation;
            spine.setAnimation(0, anim, _this3._isLoop);
          });
        };

        _proto.showSkin = function showSkin(spine) {
          var _this4 = this;

          var skins = getSkinsName(spine);
          log("%c skins: ", "color:red", skins);
          if (!skins || skins.length === 0) return;

          this._creatButton("__ setSkin __", Color.MAGENTA);

          var _loop = function _loop(i) {
            var skinName = skins[i];

            var btn = _this4._creatButton(skinName);

            btn.on(Node.EventType.MOUSE_DOWN, function () {
              spine.setSkin(skinName);
            });
          };

          for (var i = 0; i < skins.length; i++) {
            _loop(i);
          }
        };

        _proto.showAnimListToSet = function showAnimListToSet(spine) {
          var _this5 = this;

          var animations = getAnimationsName(spine);

          var _loop2 = function _loop2(i) {
            var animName = animations[i];

            var btn = _this5._creatButton(animName);

            btn.on(Node.EventType.MOUSE_DOWN, function () {
              log(spine.name, animName);
              spine.setAnimation(0, animName, _this5._isLoop);
              spine.setCompleteListener(function () {
                spine.setAnimation(0, animName, _this5._isLoop);
              });
              spine.setAnimation(0, animName, _this5._isLoop);
              spine.setCompleteListener(function () {
                log("%c anims queue: " + spine._animationQueue.length, "color: red;", JSON.stringify(spine._animationQueue, null, '\t'));
              });
            });
          };

          for (var i = 0; i < animations.length; i++) {
            _loop2(i);
          }
        };

        _proto.showAnimListToAdd = function showAnimListToAdd(spine) {
          var _this6 = this;

          var animations = getAnimationsName(spine);

          var _loop3 = function _loop3(i) {
            var animName = animations[i];

            var btn = _this6._creatButton(animName);

            btn.on(Node.EventType.MOUSE_DOWN, function () {
              if (_this6._isLoop) {
                alert("can not add animation when spine is looping");
              }

              spine.addAnimation(0, animName, false);
              log("animation queue: ", spine._animationQueue);
            });
          };

          for (var i = 0; i < animations.length; i++) {
            _loop3(i);
          }
        };

        _proto._creatButton = function _creatButton(buttonName, color) {
          if (buttonName === void 0) {
            buttonName = "";
          }

          if (color === void 0) {
            color = Color.BLACK;
          }

          var btn = new Node();
          btn.name = "btn " + buttonName;
          btn.addComponent(Button);
          this.panel.addChild(btn);
          var label = btn.addComponent(Label);
          label.node.getComponent(UITransform).width = 300;
          label.color = color;
          label.overflow = Overflow.SHRINK;
          label.string = buttonName;
          return btn;
        };

        return TestSpine;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "panel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "spineHolder", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "isShowSkin", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "canAddAnim", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TiledMapConfig.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "225f6CNboROq5ZH66+2HEET", "TiledMapConfig", undefined);

      var TiledMapConfig = exports('TiledMapConfig', /*#__PURE__*/function () {
        //X: col, Y:row
        function TiledMapConfig(config) {
          this.gridSizeX = void 0;
          this.gridSizeY = void 0;
          this.gridWidth = void 0;
          this.gridHeight = void 0;
          this.startX = void 0;
          this.startY = void 0;
          this.gridSize = void 0;
          this.mapData = null;
          var gridSizeX = config.gridSizeX,
              gridSizeY = config.gridSizeY,
              gridWidth = config.gridWidth,
              gridHeight = config.gridHeight,
              mapData = config.mapData;
          this.gridSizeX = gridSizeX;
          this.gridSizeY = gridSizeY;
          this.gridWidth = gridWidth;
          this.gridHeight = gridHeight;
          this.startX = (gridSizeY - gridSizeX) / 2 * (gridWidth / 2);
          this.startY = (gridSizeX + gridSizeY) / 2 * (gridHeight / 2);
          this.gridSize = Math.sqrt(Math.pow(this.gridWidth / 2, 2) + Math.pow(this.gridHeight / 2, 2));
          this.mapData = mapData;
        }

        var _proto = TiledMapConfig.prototype;

        _proto.positionToGrid = function positionToGrid(x, y) {
          var X = Math.floor((this.startY - y) / this.gridHeight - (x - this.startX) / this.gridWidth);
          var Y = Math.floor((x - this.startX) / this.gridWidth + (this.startY - y) / this.gridHeight);
          return {
            X: X,
            Y: Y
          };
        };

        _proto.positionToGridFloat = function positionToGridFloat(x, y) {
          var X = (this.startY - y) / this.gridHeight - (x - this.startX) / this.gridWidth;
          var Y = (x - this.startX) / this.gridWidth + (this.startY - y) / this.gridHeight;
          return {
            X: X,
            Y: Y
          };
        };

        _proto.gridToPosition = function gridToPosition(X, Y) {
          var x = this.startX + (Y - X) * this.gridWidth / 2;
          var y = this.startY - (X + Y) * this.gridHeight / 2;
          return {
            x: x,
            y: y
          };
        };

        _proto.gridCenterToPosition = function gridCenterToPosition(X, Y) {
          var x = this.startX + (Y - X) * this.gridWidth / 2;
          var y = this.startY - (X + Y + 1) * this.gridHeight / 2;
          return {
            x: x,
            y: y
          };
        };

        _proto.gridIdToGrid = function gridIdToGrid(gridId) {
          var X = gridId % this.gridSizeX;
          var Y = Math.floor(gridId / this.gridSizeX);
          return {
            X: X,
            Y: Y
          };
        };

        _proto.getZAxis = function getZAxis(X, Y) {
          if (!this.mapData) return 0;
          var zPosition = 0;
          var zObjects = this.mapData.zObjects;

          for (var i = 0; i < zObjects.length; i++) {
            var zObject = zObjects[i];

            if (Y >= zObject.minCol && Y <= zObject.maxCol && X >= zObject.minRow && X <= zObject.maxRow) {
              if (zObject.axis == 0) {
                zPosition = zObject.from + (zObject.to - zObject.from) * ((Y - zObject.minCol) / (zObject.maxCol - zObject.minCol));
              } else {
                zPosition = zObject.from + (zObject.to - zObject.from) * ((X - zObject.minRow) / (zObject.maxRow - zObject.minRow));
              }

              break;
            }
          }

          return zPosition;
        };

        return TiledMapConfig;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TiledMapManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './TiledMapConfig.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _inheritsLoose, _assertThisInitialized, cclegacy, _decorator, JsonAsset, Prefab, Node, instantiate, Collider2D, UITransform, Component, TiledMapConfig;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      JsonAsset = module.JsonAsset;
      Prefab = module.Prefab;
      Node = module.Node;
      instantiate = module.instantiate;
      Collider2D = module.Collider2D;
      UITransform = module.UITransform;
      Component = module.Component;
    }, function (module) {
      TiledMapConfig = module.TiledMapConfig;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _dec4, _dec5, _dec6, _dec7, _class4, _class5, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "42f3a13BCFJ+oMHaqt5KI4E", "TiledMapManager", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var CustomTiledMap = exports('CustomTiledMap', (_dec = ccclass('CustomTiledMap'), _dec2 = property({
        type: JsonAsset
      }), _dec3 = property(Prefab), _dec(_class = (_class2 = function CustomTiledMap() {
        _initializerDefineProperty(this, "mapData", _descriptor, this);

        _initializerDefineProperty(this, "mapPrefab", _descriptor2, this);
      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "mapData", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "mapPrefab", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      var TiledMapManager = exports('TiledMapManager', (_dec4 = ccclass('TiledMapManager'), _dec5 = property(Node), _dec6 = property({
        type: CustomTiledMap
      }), _dec7 = property(Node), _dec4(_class4 = (_class5 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TiledMapManager, _Component);

        function TiledMapManager() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "eventManager", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listMap", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "fishLayer", _descriptor5, _assertThisInitialized(_this));

          _this._mapConfig = null;
          _this._currentMapID = 0;
          _this._currentMapPrefab = null;
          _this.obstacles = [];
          _this.backGround = null;
          _this._isShow = true;
          return _this;
        }

        var _proto = TiledMapManager.prototype;

        _proto.onLoad = function onLoad() {
          this.eventManager.on("CHANGE_MAP", this.changeMap, this);
          this.eventManager.on("SHOW_BACKGROUND", this.show, this);
        };

        _proto.show = function show(isShow) {
          if (this._isShow === isShow) return;
          this._isShow = isShow;
          this.backGround.active = isShow;
          this.backGround._uiProps.colorDirty = true;
          this.obstacles.forEach(function (node) {
            node.active = isShow;
            node._uiProps.colorDirty = true;
          });
        };

        _proto.changeMap = function changeMap(id) {
          if (this._currentMapID === id) return;

          this._resetMap();

          this._currentMapID = id;
          var map = this.listMap[id - 1];
          var mapData = map.mapData.json;
          var _mapData$mapSize = mapData['mapSize'],
              width = _mapData$mapSize.width,
              height = _mapData$mapSize.height,
              tilewidth = _mapData$mapSize.tilewidth,
              tileheight = _mapData$mapSize.tileheight;
          this._mapConfig = new TiledMapConfig({
            gridSizeX: width,
            gridSizeY: height,
            gridWidth: tilewidth,
            gridHeight: tileheight,
            mapData: mapData
          });
          this._currentMapPrefab = map.mapPrefab;

          this._loadBackground();

          this._generateObjects();

          var isShow = this._isShow;
          this._isShow = true;
          this.show(isShow);
        };

        _proto._loadBackground = function _loadBackground() {
          this.backGround = instantiate(this._currentMapPrefab);
          this.backGround.parent = this.node;
          this.backGround.active = true;
        };

        _proto._generateObjects = function _generateObjects() {
          var _this2 = this;

          var colliders = this.backGround.getComponentsInChildren(Collider2D);
          colliders.forEach(function (collider) {
            collider.enabled = true;
            collider.group = 2;
            collider["isWall"] = true;
          });
          this.backGround.getChildByName("Objects").children.forEach(function (obstacle) {
            _this2.obstacles.push(obstacle);
          });
          this.obstacles.forEach(function (obstacle) {
            var oj = _this2._mapConfig.mapData.objects[obstacle.name];
            obstacle.position = _this2.fishLayer.getComponent(UITransform).convertToNodeSpaceAR(obstacle.worldPosition);
            obstacle.parent = _this2.fishLayer;
            obstacle.isMapObject = true;
            obstacle.isMummy = false;
            if (!oj) return;
            obstacle.zones = oj.zones;
            obstacle.drawIndex = oj.drawIndex;
          });
        };

        _proto.update = function update() {
          this._sortObjects();
        };

        _proto._sortObjects = function _sortObjects() {
          var _this3 = this;

          this.fishLayer.children.sort(function (objectA, objectB) {
            if (objectA.isFish && objectB.isFish && objectA.zIndex != objectB.zIndex) {
              return objectA.zIndex - objectB.zIndex;
            } else {
              var indexA = objectA.isMapObject ? objectA.drawIndex : _this3._getDrawIndex(objectA.position);
              var indexB = objectB.isMapObject ? objectB.drawIndex : _this3._getDrawIndex(objectB.position);
              var deltaY = objectB.position.y - objectA.position.y;

              if (indexA > indexB || (indexA == indexB || indexA == undefined || indexB == undefined) && deltaY > 0.05) {
                return 1;
              } else {
                return -1;
              }
            }
          });
        };

        _proto._getDrawIndex = function _getDrawIndex(position) {
          var _this$_mapConfig$posi = this._mapConfig.positionToGrid(position.x, position.y),
              X = _this$_mapConfig$posi.X,
              Y = _this$_mapConfig$posi.Y;

          var index = X * this._mapConfig.mapData.mapSize.width + Y;
          return this._mapConfig.mapData.zones[index];
        };

        _proto._resetMap = function _resetMap() {
          this.backGround && this.backGround.destroy();
          this.obstacles.forEach(function (obs) {
            return obs.destroy();
          });
          this.obstacles.length = 0;
          this.backGround = null;
          this._currentMapID = 0;
          this._mapConfig = null;
          this._currentMapPrefab = null;
        };

        return TiledMapManager;
      }(Component), (_descriptor3 = _applyDecoratedDescriptor(_class5.prototype, "eventManager", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class5.prototype, "listMap", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class5.prototype, "fishLayer", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class5)) || _class4));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Toast.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, v3, tween, Component, setOpacity;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      v3 = module.v3;
      tween = module.tween;
      Component = module.Component;
    }, function (module) {
      setOpacity = module.setOpacity;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "85647rrfRFMkL5gho+PZAWk", "Toast", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Toast = exports('Toast', (_dec = ccclass('Toast'), _dec2 = property({
        type: Label
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Toast, _Component);

        function Toast() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "lblNotify", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "delayTime", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = Toast.prototype;

        _proto.onLoad = function onLoad() {
          this.node.on("SHOW_TOAST_MESSAGE", this.showMessage.bind(this));
          this.node.active = false;
        };

        _proto.showMessage = function showMessage(message) {
          var _this2 = this;

          this.lblNotify.string = message;
          setOpacity(this.node, 255);
          this.node.active = true;
          this.node.setScale(v3(0.5, 0.5, 0.5));
          tween(this.node).to(0.2, {
            scale: v3(1, 1, 1)
          }).delay(this.delayTime).call(function () {
            _this2.node.active = false;
          }).start();
        };

        _proto.onDestroy = function onDestroy() {
          this.node.off("SHOW_TOAST_MESSAGE", this.showMessage.bind(this));
        };

        _proto.hideMessage = function hideMessage() {
          this.node.active = false;
        };

        return Toast;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "lblNotify", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "delayTime", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1.5;
        }
      })), _class2)) || _class));
      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ToggleMotion.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, SpriteFrame, UITransform, Vec3, ProgressBar, tween, Sprite, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      SpriteFrame = module.SpriteFrame;
      UITransform = module.UITransform;
      Vec3 = module.Vec3;
      ProgressBar = module.ProgressBar;
      tween = module.tween;
      Sprite = module.Sprite;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "94d01uW4RBEVL7g8SxJNYnI", "ToggleMotion", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ToggleMotion = exports('ToggleMotion', (_dec = ccclass('ToggleMotion'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(SpriteFrame), _dec5 = property(SpriteFrame), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ToggleMotion, _Component);

        function ToggleMotion() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "progressBar", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "handle", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "frameOn", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "frameOff", _descriptor4, _assertThisInitialized(_this));

          _this.status = false;
          _this.startPos = void 0;
          _this.endPos = void 0;
          _this.callBack = void 0;
          return _this;
        }

        var _proto = ToggleMotion.prototype;

        _proto.onLoad = function onLoad() {
          if (!this.progressBar.getComponent(UITransform)) {
            this.progressBar.addComponent(UITransform);
          }

          var width = this.progressBar.getComponent(UITransform).width;
          this.startPos = new Vec3(-width / 2 + 25, 0, 0);
          this.endPos = new Vec3(width / 2 - 25, 0, 0);
        };

        _proto.setCallBackToggle = function setCallBackToggle(callBack) {
          this.callBack = callBack;
        };

        _proto.onSliderTouchEnd = function onSliderTouchEnd() {
          this.status = !this.status;
          this.progressBar.getComponent(ProgressBar).progress = this.status ? 1 : 0;
          this.status ? this.moveHandle(this.endPos) : this.moveHandle(this.startPos);
          this.callBack && this.callBack();
        };

        _proto.moveHandle = function moveHandle(pos) {
          var _this2 = this;

          tween(this.handle).to(0.18, {
            position: pos
          }).call(function () {
            _this2.handle.getComponent(Sprite).spriteFrame = _this2.status ? _this2.frameOn : _this2.frameOff;
          }).start();
        };

        _proto.setChecked = function setChecked(isChecked) {
          if (isChecked === void 0) {
            isChecked = false;
          }

          this.status = isChecked;
          var pos = this.status ? this.endPos : this.startPos;
          this.handle.getComponent(Sprite).spriteFrame = this.status ? this.frameOn : this.frameOff;
          this.progressBar.getComponent(ProgressBar).progress = this.status ? 1 : 0;
          this.handle.setPosition(pos);
        };

        _proto.getChecked = function getChecked() {
          return this.status;
        };

        return ToggleMotion;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "progressBar", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "handle", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "frameOn", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "frameOff", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TopUIController.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Button, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Button = module.Button;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "80424ns6ThOw7kL5tDL1EDZ", "TopUIController", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TopUIController = exports('TopUIController', (_dec = ccclass('TopUIController'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TopUIController, _Component);

        function TopUIController() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.listButtons = [];
          return _this;
        }

        var _proto = TopUIController.prototype;

        _proto.onLoad = function onLoad() {
          this.listButtons = this.node.getComponentsInChildren(Button);

          if (this.listButtons && this.listButtons.length > 0) {
            this.node.on("ENABLE_BUTTONS", this.enableButtons, this);
            this.node.on("DISABLE_BUTTONS", this.disableButtons, this);
          }
        };

        _proto.enableButtons = function enableButtons() {
          this.listButtons.forEach(function (item) {
            item.interactable = true;
          });
        };

        _proto.disableButtons = function disableButtons() {
          this.listButtons.forEach(function (item) {
            item.interactable = false;
          });
        };

        return TopUIController;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TotalWinPanel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SlotUIScene.ts', './utils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Button, CCFloat, tween, SlotUIScene, formatMoney;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Button = module.Button;
      CCFloat = module.CCFloat;
      tween = module.tween;
    }, function (module) {
      SlotUIScene = module.SlotUIScene;
    }, function (module) {
      formatMoney = module.formatMoney;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "6a02bBuxnhGeoqB4nC6SX44", "TotalWinPanel", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TotalWinPanel = exports('TotalWinPanel', (_dec = ccclass('TotalWinPanel'), _dec2 = property({
        type: Label
      }), _dec3 = property({
        type: Label
      }), _dec4 = property({
        type: Button
      }), _dec5 = property({
        type: CCFloat
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_SlotUIScene) {
        _inheritsLoose(TotalWinPanel, _SlotUIScene);

        function TotalWinPanel() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SlotUIScene.call.apply(_SlotUIScene, [this].concat(args)) || this;
          _this.canClose = false;

          _initializerDefineProperty(_this, "winAmount", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "contentText", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "closeBtn", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "showingTime", _descriptor4, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = TotalWinPanel.prototype;

        _proto.enter = function enter() {
          var _this2 = this;

          this.canClose = false;
          var _this$content = this.content,
              winAmount = _this$content.winAmount,
              freeGameTotal = _this$content.freeGameTotal;
          this.winAmount.getComponent(Label).string = formatMoney(winAmount);

          if (this.contentText) {
            this.contentText.string = freeGameTotal > 0 ? 'Với ' + freeGameTotal + ' lượt quay miễn phí' : "";
          }

          this.playSoundTotalWin();
          tween(this.node).delay(0.5).call(function () {
            _this2.canClose = true;
            _this2.closeBtn.interactable = true;
          }).delay(this.showingTime).call(function () {
            _this2.close();
          }).start();
        };

        _proto.close = function close() {
          var _this3 = this;

          if (!this.canClose) return;
          this.canClose = false;
          this.closeBtn.interactable = false;
          this.fadeOut(this.node, 0.5, {
            onComplete: function onComplete() {
              _this3.callback && _this3.callback();
              _this3.callback = null;

              _this3.stopSoundTotalWin();

              _this3.exit();
            }
          });
        };

        _proto.skip = function skip() {
          this.close();
        };

        _proto.playSoundTotalWin = function playSoundTotalWin() {
          this.soundPlayer && this.soundPlayer.playSfx("TOTAL_WIN");
        };

        _proto.stopSoundTotalWin = function stopSoundTotalWin() {
          this.soundPlayer && this.soundPlayer.stopSfx("TOTAL_WIN");
        };

        return TotalWinPanel;
      }(SlotUIScene), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "winAmount", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "contentText", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "closeBtn", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "showingTime", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 3.5;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TouchPayableSymbol.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, UITransform, Vec2, Layout, GameObject;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      UITransform = module.UITransform;
      Vec2 = module.Vec2;
      Layout = module.Layout;
    }, function (module) {
      GameObject = module.GameObject;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "2c0cdA+p/VGrJT4JN+u0F9H", "TouchPayableSymbol", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TouchPayableSymbol = exports('TouchPayableSymbol', (_dec = ccclass('TouchPayableSymbol'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(TouchPayableSymbol, _GameObject);

        function TouchPayableSymbol() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "gradient", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "infoSymbol", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "touchBlocks", _descriptor3, _assertThisInitialized(_this));

          _this.tweenFadeIn = null;
          return _this;
        }

        var _proto = TouchPayableSymbol.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          this.node.on("SHOW_INFO_SYMBOL", this.showInfoSymbol, this);
          this.node.on("HIDE_INFO_SYMBOL", this.hideInfoSymbol, this);
          this.infoSymbol.on(Node.EventType.TOUCH_END, this.onInfoSymbolTouchEnded, this);
          this.registerEvent();
          this.gradient['initHeight'] = this.gradient.getComponent(UITransform).height;
          this.node.active = false;

          if (this.touchBlocks && this.touchBlocks.length > 0) {
            for (var i = 0; i < this.touchBlocks.length; i++) {
              var touchBlock = this.touchBlocks[i];

              if (touchBlock) {
                touchBlock.on(Node.EventType.TOUCH_START, this.onBlockTouchStarted, this);
              }
            }
          }
        };

        _proto.registerEvent = function registerEvent() {
          if (this.eventManager) {
            this.eventManager.on("SHOW_SYMBOL_PAYTABLE_INFO", this.showInfoSymbol, this);
            this.eventManager.on("HIDE_SYMBOL_PAYTABLE_INFO", this.hideInfoSymbol, this);
          }
        };

        _proto.unRegisterAll = function unRegisterAll() {
          if (this.eventManager) {
            this.eventManager.targetOff(this);
          }
        };

        _proto.showInfoSymbol = function showInfoSymbol(wLocation, symbol, spineData, spinneBorder, specialSymbolAnim) {
          var _this2 = this;

          if (specialSymbolAnim === void 0) {
            specialSymbolAnim = null;
          }

          if (this.gradient) {
            var pos = this.gradient.parent.getComponent(UITransform).convertToNodeSpaceAR(wLocation);

            var _pos = new Vec2(pos.x, pos.y);

            if (!this.gradient.getComponent(UITransform).getBoundingBox().contains(_pos)) {
              return;
            }
          }

          if (this.node.active == false) {
            if (this.node['tweenFade']) {
              this.node['tweenFade'].stop();
              this.node['tweenFade'] = null;
            }

            this.node.active = true;
            this.infoSymbol.active = true;
            this.setOpacity(this.node, 0);
            this.fadeTo(this.node, 0.1, 255, {
              onComplete: function onComplete(target) {
                if (_this2.eventManager) {
                  _this2.eventManager.emit("ON_SHOW_SYMBOL_INFO", true);

                  _this2.showTouchBlocks();
                }
              }
            });
          }

          var SYMBOL_SPECIAL = this.config && this.config.SYMBOL_SPECIAL || [];
          if (SYMBOL_SPECIAL.indexOf(symbol["symbol"]) !== -1) ;else {
            this.soundPlayer && this.soundPlayer.playSFXClick();
          }
          var symbolName = symbol["symbol"];
          var p1 = symbol.parent.getComponent(UITransform).convertToWorldSpaceAR(symbol.getPosition());
          var p2 = this.infoSymbol.parent.getComponent(UITransform).convertToNodeSpaceAR(p1);
          this.infoSymbol.emit("UPDATE_DATA", symbol["symbol"], spineData, spinneBorder, specialSymbolAnim);

          if (symbol["isLeftBorder"]) {
            this.infoSymbol.emit("UPDATE_LAYOUT", Layout.HorizontalDirection.LEFT_TO_RIGHT, p2, symbolName);
          } else if (symbol["isRightBorder"]) {
            this.infoSymbol.emit("UPDATE_LAYOUT", Layout.HorizontalDirection.RIGHT_TO_LEFT, p2, symbolName);
          } else if (symbol["isMiddle"]) {
            this.infoSymbol.emit("UPDATE_LAYOUT", Layout.HorizontalDirection.LEFT_TO_RIGHT, p2, symbolName);
          }

          this.gradient.active = true;
        };

        _proto.hideInfoSymbol = function hideInfoSymbol() {
          var _this3 = this;

          if (this.node['tweenFade']) {
            this.node['tweenFade'].stop();
            this.node['tweenFade'] = null;
          }

          this.fadeOut(this.node, 0.1, {
            onComplete: function onComplete(target) {
              if (_this3.eventManager) {
                _this3.eventManager.emit("ON_SHOW_SYMBOL_INFO", false);
              }

              _this3.infoSymbol.emit("RESET_ANIM");

              _this3.infoSymbol.active = false;
              _this3.node.active = false;
              _this3.gradient.active = false;
            }
          });
        };

        _proto.onBlockTouchStarted = function onBlockTouchStarted(evt) {
          this.showTouchBlocks(false);
          this.hideInfoSymbol();
        };

        _proto.onInfoSymbolTouchEnded = function onInfoSymbolTouchEnded(event) {
          if (event) event.propagationStopped = true;
          this.hideInfoSymbol();
        };

        _proto.showTouchBlocks = function showTouchBlocks(isOn) {
          if (isOn === void 0) {
            isOn = true;
          }

          for (var i = 0; i < this.touchBlocks.length; i++) {
            this.touchBlocks[i].active = isOn;
          }
        };

        _proto.onDestroy = function onDestroy() {
          this.unRegisterAll();
        };

        return TouchPayableSymbol;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "gradient", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "infoSymbol", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "touchBlocks", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TrialButton.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, sp, Button, tween, GameObject;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      sp = module.sp;
      Button = module.Button;
      tween = module.tween;
    }, function (module) {
      GameObject = module.GameObject;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12;

      cclegacy._RF.push({}, "475be8m7RBA0LyjambTizGa", "TrialButton", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TrialButton = exports('TrialButton', (_dec = ccclass('TrialButton'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: sp.Skeleton
      }), _dec6 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(TrialButton, _GameObject);

        function TrialButton() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "playTrialButton", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "playRealButton", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "trialLabel", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "animationBtn", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "blockInput", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "enterTrial", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "idleTrial", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "enterReal", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "idleReal", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "noAnimReal", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "isLoop", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "trialButtonSoundId", _descriptor12, _assertThisInitialized(_this));

          _this.tweenFade = null;
          _this.buttons = [];
          _this.completeTrialSessionCount = 0;
          return _this;
        }

        var _proto = TrialButton.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          if (this.playTrialButton) {
            this.playTrialButton.active = true;
          }

          if (this.playRealButton) {
            this.playRealButton.active = false;
          }

          if (this.trialLabel) {
            this.trialLabel.active = false;
          }

          if (this.animationBtn) {
            this.animationBtn.setAnimation(0, this.idleTrial, true);
          }

          this.buttons = this.node.getComponentsInChildren(Button);
          this.node.on("ENABLE_BUTTONS", this.onEnableButtons, this);
          this.node.on("SHOW_BLOCK_INPUTS", this.showBlockInput, this);
          this.onEnableButtons(false);
          this.showBlockInput();

          if (this.isLoop) {
            this.completeTrialSessionCount = 10000;
          }
        };

        _proto.showBlockInput = function showBlockInput(isOn) {
          if (isOn === void 0) {
            isOn = false;
          }

          if (this.blockInput) this.blockInput.active = isOn;
        };

        _proto.onPlayTrialButtonClicked = function onPlayTrialButtonClicked() {
          var _this2 = this;

          if (!this.node.canClick) return;
          this.node.emit('SWITCH_MODE');

          if (this.playRealButton) {
            this.playRealButton.active = true;
          }

          if (this.playTrialButton) {
            this.playTrialButton.active = false;
          }

          if (this.trialLabel) {
            this.trialLabel.active = true;
          }

          this.guiMgr.activeQuest(false);
          this.playSoundClick();

          if (this.completeTrialSessionCount < 2) {
            this.trialLabel.active = true;
            this.setOpacity(this.trialLabel, 0.01);
            this.fadeIn(this.trialLabel, 0.5);
            var dur = 0.8;
            this.tweenFade = tween(this.trialLabel).repeatForever(tween().delay(0.5).call(function () {
              _this2.fadeTo(_this2.trialLabel, dur, 190);
            }).delay(dur).call(function () {
              _this2.fadeTo(_this2.trialLabel, dur, 255);
            }).delay(dur));
            this.tweenFade.start();
          } else {
            if (this.tweenFade) {
              this.tweenFade.stop();
              this.tweenFade = null;
            }

            this.setOpacity(this.trialLabel, 255);
          }

          if (this.playRealButton) {
            this.playRealButton.getComponent(Button).interactable = false;
            this.scheduleOnce(function () {
              _this2.playRealButton.getComponent(Button).interactable = true;
            }, 2);
          }

          this.playAnimTrialButton();
        };

        _proto.playAnimTrialButton = function playAnimTrialButton() {
          if (this.animationBtn) {
            if (this.completeTrialSessionCount < 2) {
              this.animationBtn.setAnimation(0, this.enterTrial, false);
              this.animationBtn.addAnimation(0, this.idleReal, true);
            } else {
              this.animationBtn.setAnimation(0, this.enterTrial, false);
              this.animationBtn.addAnimation(0, this.noAnimReal, true);
            }
          }
        };

        _proto.onPlayRealButtonClicked = function onPlayRealButtonClicked() {
          var _this3 = this;

          if (!this.node.canClick) return;
          this.node.emit('SWITCH_MODE');

          if (this.playTrialButton) {
            this.playTrialButton.active = true;
          }

          if (this.playRealButton) {
            this.playRealButton.active = false;
          }

          this.guiMgr.activeQuest(true);

          if (this.trialLabel) {
            this.trialLabel.active = false;
          }

          this.playSoundClick();

          if (this.playTrialButton) {
            this.playTrialButton.getComponent(Button).interactable = false;
            this.scheduleOnce(function () {
              _this3.playTrialButton.getComponent(Button).interactable = true;
            }, 2);
          }

          this.completeTrialSessionCount++;
          this.playAnimRealButton();
        };

        _proto.playAnimRealButton = function playAnimRealButton() {
          if (this.animationBtn) {
            if (this.completeTrialSessionCount < 2) {
              this.animationBtn.setAnimation(0, this.enterReal, false);
              this.animationBtn.addAnimation(0, this.idleTrial, true);
            } else {
              this.animationBtn.setAnimation(0, this.enterReal, false);
              this.animationBtn.addAnimation(0, this.idleTrial, false);
            }
          }
        };

        _proto.playSoundClick = function playSoundClick() {
          if (this.soundPlayer) {
            this.soundPlayer.playSfx(this.trialButtonSoundId);
          }
        };

        _proto.onEnableButtons = function onEnableButtons(isOn) {
          this.buttons.forEach(function (bt) {
            bt.interactable = isOn;
          });
          this.node.canClick = isOn;
        };

        return TrialButton;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "playTrialButton", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "playRealButton", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "trialLabel", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "animationBtn", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "blockInput", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "enterTrial", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'Press_ChoiThu';
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "idleTrial", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'Idle_ChoiThu';
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "enterReal", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'Press_ChoiThat';
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "idleReal", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'Idle_ChoiThat';
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "noAnimReal", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'Idle_ChoiThat_NoAnim';
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "isLoop", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "trialButtonSoundId", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "CLICK";
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Turbo.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts', './CustomEnum.ts', './EventNames.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, sys, Toggle, GameObject, TutorialTriggerType, EventNames;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sys = module.sys;
      Toggle = module.Toggle;
    }, function (module) {
      GameObject = module.GameObject;
    }, function (module) {
      TutorialTriggerType = module.TutorialTriggerType;
    }, function (module) {
      EventNames = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "af552WSyeZKlKzu4zJJJYq4", "Turbo", undefined);

      var ccclass = _decorator.ccclass;
      var Turbo = exports('Turbo', (_dec = ccclass('Turbo'), _dec(_class = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(Turbo, _GameObject);

        function Turbo() {
          return _GameObject.apply(this, arguments) || this;
        }

        var _proto = Turbo.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          this.node.on("TOGGLE_TURBO", this.turboToggle, this);
          this.node.on("TURN_ON", this.turnOnTurbo, this);
          this.node.on("TURN_OFF", this.turnOffTurbo, this);
          this.node.on("LOAD_TURBO_CONFIG", this.loadTurboConfig, this);
          this.loadTurboConfig();
        };

        _proto.loadTurboConfig = function loadTurboConfig() {
          var gameId = this.config.GAME_ID;
          var turboValue = JSON.parse(sys.localStorage.getItem('turboValueWithGame') || '{}');
          var isTurbo = turboValue[gameId] || false;
          this.getComponent(Toggle).isChecked = isTurbo;
          this.dataStore.setTurbo(isTurbo);
        };

        _proto.saveTurboConfig = function saveTurboConfig(value) {
          if (this.dataStore.isTrialMode) return;
          var gameId = this.config.GAME_ID;
          var turboValue = JSON.parse(sys.localStorage.getItem('turboValueWithGame') || '{}');
          turboValue[gameId] = value;
          sys.localStorage.setItem('turboValueWithGame', JSON.stringify(turboValue));
        };

        _proto.turboToggle = function turboToggle() {
          if (this.soundPlayer) this.soundPlayer.playSFXClick();
          var isTurbo = !this.getComponent(Toggle).isChecked;
          this.saveTurboConfig(isTurbo);
          this.dataStore.setTurbo(isTurbo);
          this.guiMgr.onIngameEvent(TutorialTriggerType.TurboClick, "TURBO_CLICK");
        };

        _proto.turnOnTurbo = function turnOnTurbo() {
          this.getComponent(Toggle).isChecked = true;
          this.dataStore.setTurbo(true);
          this.eventManager.emit(EventNames.TURBO_ON);
        };

        _proto.turnOffTurbo = function turnOffTurbo() {
          this.getComponent(Toggle).isChecked = false;
          this.dataStore.setTurbo(false);
          this.eventManager.emit(EventNames.TURBO_OFF);
        };

        return Turbo;
      }(GameObject)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Turbov2.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Turbo.ts', './CustomEnum.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, SpriteFrame, sys, Toggle, Turbo, TutorialTriggerType;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      SpriteFrame = module.SpriteFrame;
      sys = module.sys;
      Toggle = module.Toggle;
    }, function (module) {
      Turbo = module.Turbo;
    }, function (module) {
      TutorialTriggerType = module.TutorialTriggerType;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "86852Cmmq5K6aw6J9S3pzVm", "Turbov2", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Turbov2 = exports('Turbov2', (_dec = ccclass('Turbov2'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: SpriteFrame
      }), _dec4 = property({
        type: SpriteFrame
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Turbo) {
        _inheritsLoose(Turbov2, _Turbo);

        function Turbov2() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Turbo.call.apply(_Turbo, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "button", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "iconSprites", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "textSprites", _descriptor3, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = Turbov2.prototype;

        _proto.onLoad = function onLoad() {
          _Turbo.prototype.onLoad.call(this);

          this.node.on('ENABLE_TURBO', this.enableTurbo, this);
          this.node.loadTuroConfig = this.loadTurboConfig.bind(this);
        };

        _proto.loadTurboConfig = function loadTurboConfig() {
          var gameId = this.config.GAME_ID;
          var turboValue = JSON.parse(sys.localStorage.getItem('turboValueWithGame') || '{}');
          var isTurbo = turboValue[gameId] || false;
          var toggle = this.button.getComponent(Toggle);
          toggle.isChecked = isTurbo;
          this.dataStore.setTurbo(isTurbo);
        };

        _proto.turboToggle = function turboToggle() {
          if (this.soundPlayer) this.soundPlayer.playSFXClick();
          var isTurbo = !this.button.getComponent(Toggle).isChecked;
          this.saveTurboConfig(isTurbo);
          this.dataStore.setTurbo(isTurbo);
          this.showToolTip(isTurbo);
          this.guiMgr.onIngameEvent(TutorialTriggerType.TurboClick, "TURBO_CLICK");
        };

        _proto.showToolTip = function showToolTip(isChecked) {
          if (!this.iconSprites || !this.textSprites) return;
          var index = isChecked ? 0 : 1;
          var Frames = [this.iconSprites[index], this.textSprites[index]];
          this.mainDirector.guiMgr.showSmallToolTip(Frames);
        };

        _proto.turnOnTurbo = function turnOnTurbo() {
          this.button.getComponent(Toggle).check();
          this.node.emit("TURBO_TOGGLE", true);
        };

        _proto.turnOffTurbo = function turnOffTurbo() {
          this.button.getComponent(Toggle).check();
          this.node.emit("TURBO_TOGGLE", false);
        };

        _proto.enableTurbo = function enableTurbo() {
          this.button.getComponent(Toggle).interactable = true;
        };

        return Turbov2;
      }(Turbo), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "button", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "iconSprites", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "textSprites", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TurnBaseFSM.ts", ['cc', './state-machine.min.mjs_cjs=&original=.js', './state-machine.min.js'], function (exports) {
  'use strict';

  var log, cclegacy, _cjsExports;

  return {
    setters: [function (module) {
      log = module.log;
      cclegacy = module.cclegacy;
    }, null, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "a49fc8jaJdIIqfDymKRb3uz", "TurnBaseFSM", undefined);

      var StateMachine = exports('default', _cjsExports.factory({
        //  <-- the factory is constructed here
        init: 'bootingGame',
        transitions: [{
          name: 'gameStart',
          from: 'bootingGame',
          to: 'waitingAction'
        }, {
          name: 'gameResume',
          from: '*',
          to: 'showingResult'
        }, {
          name: 'actionTrigger',
          from: 'waitingAction',
          to: 'waitingResult'
        }, {
          name: 'resultReceive',
          from: 'waitingResult',
          to: 'showingResult'
        }, {
          name: 'gameRestart',
          from: 'showingResult',
          to: 'waitingAction'
        }, {
          name: 'gameEnd',
          from: 'showingResult',
          to: 'closingGame'
        }, {
          name: 'reboot',
          from: '*',
          to: 'bootingGame'
        }],
        methods: {
          onInvalidTransition: function onInvalidTransition() {// cc.log("fsm: transition not allowed from that state", transition, from, to);
          },
          onPendingTransition: function onPendingTransition() {// cc.log("fsm: transition already in progress", transition, from, to);
          },
          onTransition: function onTransition(lifecycle) {
            // cc.log("trigger: "+lifecycle.transition +", state change from "+ lifecycle.from +" to "+ lifecycle.to);
            if (this.GAMEMODE) {
              log("%c " + this.GAMEMODE + ":" + ("%c run " + lifecycle.transition + " =>"), 'color:green;', 'color:red;', lifecycle.to);
            }
          }
        }
      }));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TutorialControl.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './TutorialStep.ts', './CustomEnum.ts', './utils.ts', './GameObject.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Node, log, warn, find, UITransform, tween, TutorialStep, TutorialTriggerType, TutorialCommandType, setOpacity, changeParent, GameObject;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      log = module.log;
      warn = module.warn;
      find = module.find;
      UITransform = module.UITransform;
      tween = module.tween;
    }, function (module) {
      TutorialStep = module.TutorialStep;
    }, function (module) {
      TutorialTriggerType = module.TutorialTriggerType;
      TutorialCommandType = module.TutorialCommandType;
    }, function (module) {
      setOpacity = module.setOpacity;
      changeParent = module.changeParent;
    }, function (module) {
      GameObject = module.GameObject;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11;

      cclegacy._RF.push({}, "298a1+E1gxLoq1d0whK7WLk", "TutorialControl", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          executeInEditMode = _decorator.executeInEditMode;
      var TutorialControl = exports('TutorialControl', (_dec = ccclass('TutorialControl'), _dec2 = property({
        type: TutorialStep
      }), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Node), _dec7 = property({
        type: Node
      }), _dec8 = property({
        type: TutorialStep
      }), _dec(_class = executeInEditMode(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(TutorialControl, _GameObject);

        function TutorialControl() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "tutorialSteps", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "skipButton", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "overlayBlock", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "touchBlock", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "onTopHolder", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "jackpot", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "delayToStart", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "insertedSteps", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "insertedIndex", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "deletedStepCount", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "deletedIndex", _descriptor11, _assertThisInitialized(_this));

          _this._disableButtons = [];
          _this._hiddenNodes = [];
          _this._highlightNodes = [];
          _this._waitForStart = false;
          _this._currentStepIndex = 0;
          _this._currentStep = null;
          _this._storedFlags = [];
          _this._currentTween = null;
          _this._isFinished = false;
          _this._isSortedByPriority = false;
          _this._isShowing = false;
          _this.trialJpl = [];
          _this.jackpotReset = false;
          _this._insertStep = false;
          _this._deleteStep = false;
          _this._isChangingSteps = false;
          return _this;
        }

        var _proto = TutorialControl.prototype;

        _proto.sortStepByPriority = function sortStepByPriority() {
          this.tutorialSteps.sort(function (a, b) {
            return a.priority - b.priority;
          });
        };

        _proto.exitTrialMode = function exitTrialMode() {
          if (this.jackpot) this.jackpot.active = false;
        };

        _proto.skipTutorial = function skipTutorial() {
          if (this.mainDirector) {
            this.mainDirector.skipTutorialMode();
          }

          this.resetTutorial();
          this.finishTutorial();

          this._resumeCurrentScript(true);
        };

        _proto.onTutorialClick = function onTutorialClick() {
          this.onTrigger(TutorialTriggerType.TutorialClick);
        };

        _proto.onSpinClicked = function onSpinClicked() {
          this.onTrigger(TutorialTriggerType.SpinClicked);
        };

        _proto.activeTutorial = function activeTutorial() {
          var _this2 = this;

          if (this.mainDirector) {
            this.mainDirector.currentGameMode.emit("SPIN_DISABLE");
          }

          if (this._waitForStart) return;
          this._waitForStart = true;
          this.initJackpot();
          setOpacity(this.jackpot, 255);

          if (this.touchBlock) {
            this.touchBlock.active = true;
          }

          this.scheduleOnce(function () {
            _this2.resetTutorial();

            _this2._isFinished = _this2._waitForStart = false;
            _this2._isShowing = true;
            if (_this2.skipButton) _this2.skipButton.active = true;

            _this2.runTutorial();

            if (_this2.mainDirector) {
              _this2.mainDirector.currentGameMode.emit("SPIN_ENABLE");
            }
          }, this.delayToStart);
        };

        _proto.initJackpot = function initJackpot() {
          if (this.jackpot) {
            this.jackpot.active = true;
            this.jackpot.emit('INIT_JACKPOT', this.config.DEFAULT_TRIAL_JACKPOT);
          }
        };

        _proto.onStateUpdate = function onStateUpdate(data) {
          if (data.trialJpl) {
            if (data.jackpotInfo) {
              if (data.trialJplWin && data.trialJplWin.length) {
                var trialJpl = data.trialJpl,
                    trialJplWin = data.trialJplWin;
                var isTutorialData = data.trialJplWin.length > 1;
                this.trialJpl = isTutorialData ? data.trialJplWin : this.getLatestJackpot(trialJpl, trialJplWin);
                this.runJackpot();
              }

              this.trialJpl = data.trialJpl;
              this.jackpotReset = true;
            } else {
              this.trialJpl = data.trialJpl;
              this.runJackpot();
            }
          }

          if (data.isFinishedTutorial) {
            log("[TutorialController] TUTORIAL DATA IS FINISHED");
          }
        };

        _proto.runTutorial = function runTutorial() {
          this._currentStep = this.tutorialSteps[this._currentStepIndex];

          if (!this._currentStep) {
            log("[TutorialController] Something Wrong!!!");
            return;
          }

          if (!this._currentStep.isStarted) {
            this._currentStep.startStep();

            this._doCommand(this._currentStep);
          }
        };

        _proto.onTrigger = function onTrigger(triggerType) {
          if (this._currentStep && this._currentStep.checkForTrigger(triggerType)) {
            if (triggerType === TutorialTriggerType.TutorialClick) {
              this.touchBlock.active = false;
            }

            this.goNext();
          }

          if (triggerType === TutorialTriggerType.OnJackpotCutsceneClose && this.jackpotReset) {
            this.resetJackpot();
            this.jackpotReset = false;
          }
        };

        _proto.goNext = function goNext() {
          if (this._currentStep) {
            this._currentStep.finishStep();
          }

          this._currentStepIndex++;

          if (this._currentStepIndex >= this.tutorialSteps.length) {
            this.finishTutorial();
          } else {
            this.runTutorial();
          }
        };

        _proto.resetTutorial = function resetTutorial() {
          for (var i = 0; i < this._disableButtons.length; i++) {
            var button = this._disableButtons[i];

            if (button) {
              button.interactable = true;
            }
          }

          this._disableButtons = [];

          for (var _i = 0; _i < this._hiddenNodes.length; _i++) {
            var hiddenNode = this._hiddenNodes[_i];

            if (hiddenNode) {
              hiddenNode.active = true;
            }
          }

          this._hiddenNodes = [];

          this._revertAllHighlightObjects();

          if (this.overlayBlock) {
            this.overlayBlock.active = true;
          }

          if (this.touchBlock) {
            this.touchBlock.active = false;
          }

          this._highlightNodes = [];
          this._storedFlags = [];
          this._currentStepIndex = 0;
          this._currentStep = null;

          for (var _i2 = this.tutorialSteps.length - 1; _i2 >= 0; _i2--) {
            if (this.tutorialSteps[_i2].isStarted) this.tutorialSteps[_i2].resetStep();
          }

          if (this._currentTween) {
            this._currentTween.stop();

            this._currentTween = null;
          }
        };

        _proto.isContainFlag = function isContainFlag(flag) {
          return this._storedFlags.indexOf(flag) > -1;
        };

        _proto.finishTutorial = function finishTutorial() {
          if (this.overlayBlock) {
            this.overlayBlock.active = false;
          }

          this._isFinished = true;
          this._isShowing = false;
          if (this.skipButton) this.skipButton.active = false;
          warn('Finshed Tutorial');
        };

        _proto.getLatestJackpot = function getLatestJackpot(trialJpl, trialJplWin) {
          var jackpotName = trialJplWin[0].split(';')[0];
          return trialJpl.map(function (item) {
            return item.includes(jackpotName) ? trialJplWin[0] : item;
          });
        };

        _proto.runJackpot = function runJackpot() {
          this.jackpot.emit('UPDATE_JACKPOT', this.getUpdatedJackpot());
        };

        _proto.resetJackpot = function resetJackpot() {
          this.jackpot.emit('RESUME_JACKPOT', this.getUpdatedJackpot());
        };

        _proto.getUpdatedJackpot = function getUpdatedJackpot() {
          var updatedJackpot = {};
          this.trialJpl.forEach(function (jp) {
            var data = jp.split(';');
            updatedJackpot[data[0]] = Number(data[1]);
          });
          return updatedJackpot;
        };

        _proto._doCommand = function _doCommand(step) {
          log("[TutorialController] RUN TUTORIAL COMMAND: " + step.stepName + " " + this._currentStepIndex);

          switch (step.commandType) {
            case TutorialCommandType.EnableButton:
              if (step.buttons) {
                this._enableButtons(step.buttons, true);
              }

              break;

            case TutorialCommandType.DisableButton:
              if (step.buttons) {
                this._enableButtons(step.buttons, false);
              }

              break;

            case TutorialCommandType.HighlightObject:
              if (step.unHighlightPreviousObjects) {
                this._revertAllHighlightObjects(false);
              }

              if (step.targets) {
                this._highlightObjects(step.targets);
              }

              break;

            case TutorialCommandType.HighlightObjectByName:
              if (step.targetsByName) {
                this._highlightObjectsByName(step.targetsByName);
              }

              break;

            case TutorialCommandType.RevertHighlightObject:
              if (step.targets) {
                this._revertHighlightObjects(step.targets);
              }

              break;

            case TutorialCommandType.RevertAllHighlightObject:
              if (step.targets) {
                this._revertAllHighlightObjects(true);
              }

              break;

            case TutorialCommandType.SetPosition:
              if (step.targets && step.targetPositions) {
                this._setObjectPosition(step.targets, step.targetPositions);
              }

              break;

            case TutorialCommandType.SetRotation:
              if (step.targets && step.targetRotations) {
                this._setObjectRotationInEulerAngle(step.targets, step.targetRotations);
              }

              break;

            case TutorialCommandType.SetScale:
              if (step.targets && step.targetScales) {
                this._setObjectScale(step.targets, step.targetScales);
              }

              break;

            case TutorialCommandType.SetContentSize:
              if (step.transformTargets && step.targetContentSizes) {
                this._setObjectContentSize(step.transformTargets, step.targetContentSizes);
              }

              break;

            case TutorialCommandType.SetOpacity:
              if (step.targets && step.targetOpacities) {
                this._setObjectOpacity(step.targets, step.targetOpacities);
              }

              break;

            case TutorialCommandType.ShowObject:
              if (step.targets) {
                this._showObjects(step.targets);

                if (step.targetPositions) {
                  this._setObjectPosition(step.targets, step.targetPositions, true);
                }

                if (step.targetRotations) {
                  this._setObjectRotationInEulerAngle(step.targets, step.targetRotations, true);
                }

                if (step.targetScales) {
                  this._setObjectScale(step.targets, step.targetScales, true);
                }
              }

              break;

            case TutorialCommandType.HideObject:
              if (step.targets) {
                this._showObjects(step.targets, false);
              }

              break;

            case TutorialCommandType.AddFlag:
              if (step.flagName && step.flagName !== '') {
                this._addFlag(step.flagName);
              }

              break;

            case TutorialCommandType.RemoveFlag:
              if (step.flagName && step.flagName !== '') {
                this._removeFlag(step.flagName);
              }

              break;

            case TutorialCommandType.BlockTouch:
              this._blockTouchInput();

              break;

            case TutorialCommandType.UnBlockTouch:
              this._blockTouchInput(false);

              break;

            case TutorialCommandType.WaitForTrigger:
              this._waitForTrigger(step.triggerTypes);

              break;

            case TutorialCommandType.EditDialog:
              if (step.dialogLabels && step.dialogTexts) {
                this._setDialogContents(step.dialogLabels, step.dialogTexts);
              }

              break;

            case TutorialCommandType.MoveTo:
              if (step.movingTarget && step.toPosition) {
                this._moveObjectTo(step.movingTarget, step.toPosition, step.movingTime);
              }

              break;

            case TutorialCommandType.MoveFromTo:
              if (step.movingTarget && step.fromPosition && step.toPosition) {
                this._moveObjectFromTo(step.movingTarget, step.fromPosition, step.toPosition, step.movingTime);
              }

              break;

            case TutorialCommandType.ResumeCurrentScript:
              this._resumeCurrentScript();

              break;

            case TutorialCommandType.PauseAction:
              this._pauseAction(step.GameMode, step.actionName, step.commandName);

              break;

            case TutorialCommandType.ResumeActions:
              this._resumeActions();

              break;

            case TutorialCommandType.SetSiblingIndex:
              this._setSiblingIndex(step.targets, step.targetSiblingIndices);

              break;

            case TutorialCommandType.Custom:
              if (step.customCommand) {
                this._doCustomCommand(step.customCommand);
              }

              break;
          }
        };

        _proto._enableButtons = function _enableButtons(buttons, isEnable) {
          for (var i = 0; i < buttons.length; i++) {
            var button = buttons[i];

            if (button) {
              button.interactable = isEnable;

              var index = this._disableButtons.indexOf(button);

              if (isEnable) {
                if (index > -1) {
                  this._disableButtons.slice(index, 0);
                }
              } else {
                if (index < 0) {
                  this._disableButtons.push(button);
                }
              }
            }
          }

          this.goNext();
        };

        _proto._highlightObjects = function _highlightObjects(nodes) {
          for (var i = 0; i < nodes.length; i++) {
            var _node = nodes[i];

            if (_node) {
              _node.oldParrent = _node.parent;
              _node.oldActive = _node.active;
              _node.oldLPos = _node.position;
              _node.oldIndex = _node.getSiblingIndex();
            }
          }

          for (var _i3 = 0; _i3 < nodes.length; _i3++) {
            var _node2 = nodes[_i3];

            if (_node2) {
              changeParent(_node2, this.onTopHolder);

              _node2.setSiblingIndex(this.onTopHolder.children.length + 1);

              this._highlightNodes.push(_node2);
            }
          }

          setOpacity(this.overlayBlock, 150);
          this.goNext();
        };

        _proto._highlightObjectsByName = function _highlightObjectsByName(targetAddresses) {
          var highlightNodes = [];

          for (var i = 0; i < targetAddresses.length; i++) {
            var _nodeName = targetAddresses[i].name;
            var path = targetAddresses[i].rootPath + _nodeName;

            if (this.mainDirector) {
              var _node = find(path, this.mainDirector.node);

              if (_node) {
                _node.oldParrent = _node.parent;
                _node.oldActive = _node.active;
                _node.oldLPos = _node.position;
                _node.oldIndex = _node.getSiblingIndex();
                highlightNodes.push(_node);
              }
            }
          }

          for (var _i4 = 0; _i4 < highlightNodes.length; _i4++) {
            var _node3 = highlightNodes[_i4];

            if (_node3) {
              changeParent(_node3, this.onTopHolder);

              _node3.setSiblingIndex(this.onTopHolder.children.length + 1);

              this._highlightNodes.push(_node3);
            }
          }

          setOpacity(this.overlayBlock, 150);
          this.goNext();
        };

        _proto._revertHighlightObjects = function _revertHighlightObjects(nodes) {
          for (var i = 0; i < nodes.length; i++) {
            var _node = nodes[i];

            if (_node) {
              changeParent(_node, _node.oldParrent);

              _node.setSiblingIndex(_node.oldIndex); // const transform = _node.getComponent(UITransform);
              // if(transform && (_node as any).oldPriotity!== undefined){
              //     transform.priority = (_node as any).oldPriotity;
              // }


              var index = this._highlightNodes.indexOf(_node);

              if (index > -1) {
                this._highlightNodes.splice(index, 1);
              }
            }
          }

          setOpacity(this.overlayBlock, 0);
          this.goNext();
        };

        _proto._revertAllHighlightObjects = function _revertAllHighlightObjects(goToNext) {
          if (goToNext === void 0) {
            goToNext = false;
          }

          for (var i = 0; i < this._highlightNodes.length; i++) {
            var _node = this._highlightNodes[i];

            if (_node) {
              changeParent(_node, _node.oldParrent);

              _node.setSiblingIndex(_node.oldIndex);

              var transform = _node.getComponent(UITransform);

              if (transform && _node.oldPriotity !== undefined) {
                transform.priority = _node.oldPriotity;
              }

              _node.active = _node.oldActive;
            }
          }

          setOpacity(this.overlayBlock, 0);
          this._highlightNodes = [];

          if (goToNext) {
            this.goNext();
          }
        };

        _proto._setObjectPosition = function _setObjectPosition(nodes, positions, byShowObject) {
          if (byShowObject === void 0) {
            byShowObject = false;
          }

          var count = nodes.length <= positions.length ? nodes.length : positions.length;

          for (var i = 0; i < count; i++) {
            var node = nodes[i];
            var pos = positions[i];

            if (node && pos) {
              node.setPosition(pos);
            }
          }

          if (!byShowObject) this.goNext();
        };

        _proto._setObjectScale = function _setObjectScale(nodes, scales, byShowObject) {
          if (byShowObject === void 0) {
            byShowObject = false;
          }

          var count = nodes.length <= scales.length ? nodes.length : scales.length;

          for (var i = 0; i < count; i++) {
            var node = nodes[i];
            var scale = scales[i];

            if (node && scale) {
              node.setScale(scale);
            }
          }

          if (!byShowObject) this.goNext();
        };

        _proto._setObjectRotationInEulerAngle = function _setObjectRotationInEulerAngle(nodes, angles, byShowObject) {
          if (byShowObject === void 0) {
            byShowObject = false;
          }

          var count = nodes.length <= angles.length ? nodes.length : angles.length;

          for (var i = 0; i < count; i++) {
            var node = nodes[i];
            var angle = angles[i];

            if (node && angle) {
              node.setRotationFromEuler(angle);
            }
          }

          if (!byShowObject) this.goNext();
        };

        _proto._setObjectContentSize = function _setObjectContentSize(transforms, contentSizes) {
          var count = transforms.length <= contentSizes.length ? transforms.length : contentSizes.length;

          for (var i = 0; i < count; i++) {
            var tran = transforms[i];
            var size = contentSizes[i];

            if (tran && size) {
              tran.setContentSize(size);
            }
          }

          this.goNext();
        };

        _proto._setObjectOpacity = function _setObjectOpacity(nodes, opacities) {
          var count = nodes.length <= opacities.length ? nodes.length : opacities.length;

          for (var i = 0; i < count; i++) {
            var node = nodes[i];
            var opacity = opacities[i];

            if (node) {
              setOpacity(node, opacity);
            }
          }

          this.goNext();
        };

        _proto._showObjects = function _showObjects(nodes, isActive) {
          if (isActive === void 0) {
            isActive = true;
          }

          for (var i = 0; i < nodes.length; i++) {
            var node = nodes[i];

            if (node) {
              node.active = isActive;

              var index = this._hiddenNodes.indexOf(node);

              if (isActive) {
                if (index > -1) {
                  this._hiddenNodes.splice(index, 1);
                }
              } else {
                if (index < 0) {
                  this._hiddenNodes.push(node);
                }
              }
            }
          }

          if (!isActive) setOpacity(this.overlayBlock, 0);
          this.goNext();
        };

        _proto._addFlag = function _addFlag(flagName) {
          this._storedFlags.push(flagName);

          this.goNext();
        };

        _proto._removeFlag = function _removeFlag(flagName) {
          var index = this._storedFlags.indexOf(flagName);

          this._storedFlags.splice(index, 1);

          this.goNext();
        };

        _proto._blockTouchInput = function _blockTouchInput(isBlock) {
          if (isBlock === void 0) {
            isBlock = true;
          }

          if (this.touchBlock) this.touchBlock.active = isBlock;
          this.goNext();
        };

        _proto._waitForTrigger = function _waitForTrigger(triggers) {
          for (var i = 0; i < triggers.length; i++) {
            var trigger = triggers[i];

            if (trigger === TutorialTriggerType.TutorialClick) {
              this.touchBlock.active = true;
            }
          }
        };

        _proto._pauseAction = function _pauseAction(gameMode, actionName, scriptName) {
          var baseDirector = this.mainDirector.gameModes[gameMode].getComponent('BaseDirector');

          if (baseDirector && baseDirector.setPauseTrigger) {
            baseDirector.setPauseTrigger(actionName, scriptName);
          }

          this.goNext();
        };

        _proto._resumeActions = function _resumeActions() {
          var baseDirector = this.mainDirector.currentGameMode.getComponent('BaseDirector');

          if (baseDirector && baseDirector.resumeActions) {
            baseDirector.resumeActions();
          }

          this.goNext();
        };

        _proto._setSiblingIndex = function _setSiblingIndex(nodes, siblingIndices) {
          var count = nodes.length <= siblingIndices.length ? nodes.length : siblingIndices.length;

          for (var i = 0; i < count; i++) {
            var node = nodes[i];
            var siblingIndex = siblingIndices[i];

            if (node) {
              node.setSiblingIndex(siblingIndex);
            }
          }

          this.goNext();
        };

        _proto._setDialogContents = function _setDialogContents(dialogLabels, contents) {
          var count = dialogLabels.length <= contents.length ? dialogLabels.length : contents.length;

          for (var i = 0; i < count; i++) {
            var label = dialogLabels[i];
            var content = contents[i];

            if (label && content) {
              label.string = content;
            }
          }

          setOpacity(this.overlayBlock, 150);
          this.goNext();
        };

        _proto._moveObjectTo = function _moveObjectTo(node, toPos, movingTime, isAsync) {
          var _this3 = this;

          if (isAsync === void 0) {
            isAsync = false;
          }

          if (node.movingTween) {
            node.movingTween.stop();
          }

          this._currentTween = node.movingTween = tween(node).to(movingTime, {
            position: toPos
          }).call(function () {
            _this3._currentTween = node.movingTween = null;

            if (!isAsync) {
              _this3.goNext();
            }
          });
          node.movingTween.start();
          if (isAsync) this.goNext();
        };

        _proto._moveObjectFromTo = function _moveObjectFromTo(node, fromPos, toPos, movingTime) {
          node.setPosition(fromPos);

          this._moveObjectTo(node, toPos, movingTime);
        };

        _proto._doCustomCommand = function _doCustomCommand(customCmd) {
          if (this[customCmd] && typeof this[customCmd] === 'function') {
            this[customCmd]();
          }

          this.goNext();
        };

        _proto._resumeCurrentScript = function _resumeCurrentScript(bySkip) {
          if (bySkip === void 0) {
            bySkip = false;
          }

          if (this.mainDirector) {
            this.mainDirector.currentGameMode.emit("RUN_CONTINUE_SCRIPT");
          }

          if (!bySkip) this.goNext();
        };

        _proto._insertTutorialSteps = function _insertTutorialSteps(insertSteps, startIndex) {
          this._isChangingSteps = true;

          if (this.tutorialSteps && insertSteps && insertSteps.length > 0) {
            var _this$tutorialSteps;

            (_this$tutorialSteps = this.tutorialSteps).splice.apply(_this$tutorialSteps, [startIndex, 0].concat(insertSteps));
          }
        };

        _proto._removeTutorialSteps = function _removeTutorialSteps(deletedCount, startIndex) {
          this._isChangingSteps = true;

          if (this.tutorialSteps && deletedCount > 0) {
            this.tutorialSteps.splice(startIndex, deletedCount);
          }
        };

        _proto._resetInsertedStepsFromInspector = function _resetInsertedStepsFromInspector() {
          this.insertedIndex = 0;
          this.insertedSteps = [];
          this._isChangingSteps = false;
        };

        _proto._resetDeletedStepsFromInspector = function _resetDeletedStepsFromInspector() {
          this.deletedIndex = 0;
          this.deletedStepCount = 0;
          this._isChangingSteps = false;
        };

        _createClass(TutorialControl, [{
          key: "IsSortedByPriority",
          get: function get() {
            return this._isSortedByPriority;
          },
          set: function set(value) {
            this._isSortedByPriority = value;

            if (value) {
              this.sortStepByPriority();
            }
          }
        }, {
          key: "IsFinished",
          get: function get() {
            return this._isFinished;
          }
        }, {
          key: "IsShowing",
          get: function get() {
            return this._isShowing;
          }
        }, {
          key: "insertStep",
          get: function get() {
            return this._insertStep;
          },
          set: function set(value) {
            this._insertStep = value;
            log("[TutorialControl] >>> insertStep: " + value);
          }
        }, {
          key: "deleteStep",
          get: function get() {
            return this._deleteStep;
          },
          set: function set(value) {
            this._deleteStep = value;
            log("[TutorialControl] >>> deleteStep: " + value);
          }
        }]);

        return TutorialControl;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "tutorialSteps", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "IsSortedByPriority", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "IsSortedByPriority"), _class2.prototype), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "skipButton", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "overlayBlock", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "touchBlock", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "onTopHolder", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "jackpot", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "delayToStart", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "IsFinished", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "IsFinished"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "IsShowing", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "IsShowing"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "insertStep", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "insertStep"), _class2.prototype), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "insertedSteps", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "insertedIndex", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "deleteStep", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "deleteStep"), _class2.prototype), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "deletedStepCount", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "deletedIndex", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      })), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TutorialDialog.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Node, tween, Vec3, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Node = module.Node;
      tween = module.tween;
      Vec3 = module.Vec3;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "806f0rSddBC2oRb5VgvHzYr", "TutorialDialog", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TutorialDialog = exports('TutorialDialog', (_dec = ccclass('TutorialDialog'), _dec2 = property({
        type: Label
      }), _dec3 = property({
        type: Label
      }), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TutorialDialog, _Component);

        function TutorialDialog() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "title", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "content", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "arrow", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "arrow1", _descriptor4, _assertThisInitialized(_this));

          _this.zoomTween = null;
          return _this;
        }

        var _proto = TutorialDialog.prototype;

        _proto.onLoad = function onLoad() {
          if (this.arrow1) {
            this.arrow1.active = false;
          }

          if (this.arrow) {
            this.arrow.active = false;
          }

          this.node.on("SHOW", this.show, this);
          this.node.on("HIDE", this.hide, this);
          this.node.setScale(0, 0);
        };

        _proto.show = function show(title, content, arrow, arrow1) {
          if (title === void 0) {
            title = '';
          }

          if (content === void 0) {
            content = '';
          }

          if (arrow === void 0) {
            arrow = null;
          }

          if (arrow1 === void 0) {
            arrow1 = null;
          }

          this.node.setScale(0.1, 0.1);
          this.zoomTween = tween(this.node).to(0.2, {
            scale: new Vec3(1.2, 1.2, 0)
          }).to(0.1, {
            scale: new Vec3(0.9, 0.9, 0)
          }).to(0.1, {
            scale: new Vec3(1, 1, 0)
          });
          this.zoomTween.start();
          this.title.string = title;
          this.content.string = content;
          this.node.active = true;

          if (arrow) {
            this.arrow.active = true;
            this.arrow.setScale(new Vec3(arrow.scaleX || 1, arrow.scaleY || 1));
            this.arrow.angle = arrow.angle || 0;
            this.arrow.position = new Vec3(arrow.x, arrow.y, 0);
          } else {
            this.arrow.active = false;
          }

          if (arrow1) {
            this.arrow1.active = true;
            this.arrow1.setScale(new Vec3(arrow1.scaleX || 1, arrow1.scaleY || 1));
            this.arrow1.angle = arrow1.angle || 0;
            this.arrow1.position = new Vec3(arrow1.x, arrow1.y, 0);
          } else {
            this.arrow1.active = false;
          }
        };

        _proto.hide = function hide() {
          if (this.zoomTween) {
            this.zoomTween.stop();
          }

          this.node.setScale(0, 0);
          this.node.active = false;
        };

        return TutorialDialog;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "title", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "content", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "arrow", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "arrow1", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TutorialMgr.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './GameObject.ts', './CustomEnum.ts', './EventNames.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, JsonAsset, Vec3, tween, find, warn, Button, log, changeParent, GameObject, IndicatorAngel, EventNames;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      JsonAsset = module.JsonAsset;
      Vec3 = module.Vec3;
      tween = module.tween;
      find = module.find;
      warn = module.warn;
      Button = module.Button;
      log = module.log;
    }, function (module) {
      changeParent = module.changeParent;
    }, function (module) {
      GameObject = module.GameObject;
    }, function (module) {
      IndicatorAngel = module.IndicatorAngel;
    }, function (module) {
      EventNames = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10;

      cclegacy._RF.push({}, "8456fLrETNDj5ooIWjtbhmj", "TutorialMgr", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TutorialMgr = exports('TutorialMgr', (_dec = ccclass('TutorialMgr'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: JsonAsset
      }), _dec6 = property({
        type: JsonAsset
      }), _dec7 = property({
        type: Node
      }), _dec8 = property({
        type: Node
      }), _dec9 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(TutorialMgr, _GameObject);

        function TutorialMgr() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "dialog", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "gradientBot", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "gradientTop", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tutorialData", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tutorialSteps", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "indicator", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buttonSkip", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "jackpot", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "timeDelayStart", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "isDebug", _descriptor10, _assertThisInitialized(_this));

          _this.inited = false;
          _this.finished = false;
          _this.waitForStart = false;
          _this.endTutorialData = false;
          _this._isSpinning = false;
          _this.showing = false;
          _this.pauseGameMode = false;
          _this.jackpotReset = false;
          _this.doActionAfterFinishSpin = false;
          _this.index = 0;
          _this.spinIndex = 0;
          _this.lockObjectData = null;
          _this.flags = [];
          _this.slotButtons = [];
          _this.waitingTrigger = [];
          _this.trialJpl = [];
          _this.indicatorAnim = null;
          _this.lockObject = null;
          _this.currentStepData = null;
          _this.listLockedObjects = [];
          _this.listLockedObjectData = [];
          return _this;
        }

        var _proto = TutorialMgr.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          this.finished = true;

          if (!this.inited) {
            this.node.active = false;
          }
        };

        _proto.startTutorial = function startTutorial() {
          var _this2 = this;

          if (this.waitForStart) return;
          if (!this.inited) this.init();
          this.node.active = true;
          this.setOpacity(this.node, 255);
          this.setOpacity(this.jackpot, 255);
          this.endTutorialData = false;
          this._isSpinning = false;
          this.initJackpot();

          this._lockTouch(null);

          this.waitForStart = true;
          this.eventManager.emit(EventNames.TUTORIAL_START);

          if (this.mainDirector && this.mainDirector.node) {
            this.mainDirector.currentGameMode.emit('SPIN_DISABLE');
            this.mainDirector.guiMgr.disableBet(true);
          }

          if (this.guiMgr.topUI) {
            this.guiMgr.topUI.emit('DISABLE_BUTTONS');
          }

          this.scheduleOnce(function () {
            _this2.finished = false;

            _this2.reset();

            _this2._unlockTouch();

            _this2.run();

            if (_this2.mainDirector && _this2.mainDirector.node) {
              _this2.mainDirector.currentGameMode.emit('SPIN_ENABLE');
            }

            _this2.waitForStart = false;
          }, this.timeDelayStart);
        };

        _proto.init = function init() {
          this.mainDirector.gameStateManager.bindTutorialData(this.tutorialData.json);
          this.inited = true;
          this.flags = [];
          this.unlockAll();
          this.slotButtons = this.mainDirector.getComponentsInChildren("SlotButton");
          this.jackpotReset = false;
        };

        _proto.initJackpot = function initJackpot() {
          this.jackpot.active = true;
          this.jackpot.emit('INIT_JACKPOT', this.config.DEFAULT_TRIAL_JACKPOT);
        };

        _proto.playIndicatorAnim = function playIndicatorAnim(angle, duration) {
          if (angle === void 0) {
            angle = 0;
          }

          if (duration === void 0) {
            duration = 0.5;
          }

          if (this.indicatorAnim) {
            this.indicatorAnim.stop();
            this.indicatorAnim = null;
          }

          var updatedPos = {
            next: new Vec3(0, -50, 0),
            back: new Vec3(0, 50, 0)
          };

          switch (angle) {
            case IndicatorAngel.right:
              updatedPos.next = new Vec3(50, 0, 0);
              updatedPos.back = new Vec3(-50, 0, 0);
              break;

            case IndicatorAngel.left:
              updatedPos.next = new Vec3(-50, 0, 0);
              updatedPos.back = new Vec3(50, 0, 0);
              break;

            case IndicatorAngel.top:
              updatedPos.next = new Vec3(0, 50, 0);
              updatedPos.back = new Vec3(0, -50, 0);
              break;
          }

          this.indicatorAnim = tween(this.indicator).repeatForever(tween().by(duration, {
            position: updatedPos.next
          }).by(duration, {
            position: updatedPos.back
          }));
          this.indicatorAnim.start();
        };

        _proto.reset = function reset() {
          this.index = 0;
          this.spinIndex = 0;
          this.showing = true;
          this.pauseGameMode = false;
          this.buttonSkip.active = true;
          this.flags = [];
        };

        _proto._lockAtButton = function _lockAtButton(_ref) {
          var objPath = _ref.objPath;
          var obj = find(objPath, this.mainDirector.node);

          if (obj) {
            this.doLockObject(obj);
          } else {
            warn("TutorialMgr cant find object with name " + objPath);
          }
        };

        _proto._lockAtObjects = function _lockAtObjects(_ref2) {
          var _this3 = this;

          var listPath = _ref2.listPath;

          if (this.listLockedObjects && this.listLockedObjects.length) {
            this._unlockAllObjects();
          }

          if (listPath && listPath.length) {
            listPath.forEach(function (objPath) {
              var lockObject = find(objPath, _this3.mainDirector.node);

              if (lockObject) {
                _this3.listLockedObjects.push(lockObject);

                _this3.listLockedObjectData.push({
                  active: lockObject.active,
                  parent: lockObject.parent,
                  localPos: lockObject.position,
                  index: lockObject.getSiblingIndex(),
                  opacity: _this3.getOpacity(lockObject)
                });

                changeParent(lockObject, _this3.node);
                lockObject.setSiblingIndex(_this3.gradientTop.getSiblingIndex());
                lockObject.active = true;

                _this3.setOpacity(lockObject, 255);
              } else {
                warn("TutorialMgr cant find object with name " + objPath);
              }
            });
            this.gradientBot.active = true;
            this.setOpacity(this.gradientBot, 160);
          }
        };

        _proto._unlockAllObjects = function _unlockAllObjects() {
          var _this4 = this;

          if (this.listLockedObjects && this.listLockedObjects.length) {
            this.gradientBot.active = false;
            this.listLockedObjects.forEach(function (lockObject, index) {
              var objectData = _this4.listLockedObjectData[index];
              changeParent(lockObject, objectData.parent);
              lockObject.setSiblingIndex(objectData.index);
              lockObject.active = objectData.active;

              _this4.setOpacity(lockObject, objectData.opacity);

              lockObject = null;
            });
            this.listLockedObjects = [];
            this.listLockedObjectData = [];
          }
        };

        _proto.doLockObject = function doLockObject(obj) {
          if (this.lockObject) this._unlockButton();
          this.lockObject = obj;
          this.lockObjectData = {
            active: obj.active,
            parent: this.lockObject.parent,
            localPos: this.lockObject.position,
            index: this.lockObject.getSiblingIndex(),
            opacity: this.getOpacity(this.lockObject)
          };
          changeParent(this.lockObject, this.node);
          this.lockObject.setSiblingIndex(this.gradientTop.getSiblingIndex());
          this.lockObject.active = true;
          this.setOpacity(this.lockObject, 255);
          this.gradientBot.active = true;
          this.setOpacity(this.gradientBot, 160);
        };

        _proto._unlockButton = function _unlockButton() {
          if (this.lockObject) {
            this.gradientBot.active = false;
            changeParent(this.lockObject, this.lockObjectData.parent);
            this.lockObject.setSiblingIndex(this.lockObjectData.index);
            this.lockObject.active = this.lockObjectData.active;
            this.setOpacity(this.lockObject, this.lockObjectData.opacity);
            this.lockObject = null;
          }
        };

        _proto._lockTouch = function _lockTouch(data) {
          this.setOpacity(this.gradientTop, data && data.gradient ? 180 : 0);
          this.gradientTop.active = true;
        };

        _proto._unlockTouch = function _unlockTouch() {
          this.gradientTop.active = false;
        };

        _proto._showDialog = function _showDialog(_ref3) {
          var title = _ref3.title,
              content = _ref3.content,
              position = _ref3.position,
              arrow = _ref3.arrow,
              arrow1 = _ref3.arrow1;
          this.dialog.setPosition(new Vec3(position.x, position.y, 0));
          this.dialog.emit('SHOW', this.getText(title), this.getText(content), arrow, arrow1);
        };

        _proto._hideDialog = function _hideDialog() {
          this.dialog.emit('HIDE');
        };

        _proto._showIndicator = function _showIndicator(_ref4) {
          var rotation = _ref4.rotation,
              position = _ref4.position;
          this.indicator.active = true;
          this.indicator.angle = rotation;
          this.indicator.setPosition(new Vec3(position.x, position.y, 0));
          this.playIndicatorAnim(rotation);
        };

        _proto._pauseGameMode = function _pauseGameMode(_ref5) {
          var pause = _ref5.pause;
          this.pauseGameMode = pause;
        };

        _proto._hideIndicator = function _hideIndicator() {
          this.indicator.active = false;

          if (this.indicatorAnim) {
            this.indicatorAnim.stop();
            this.indicatorAnim = null;
          }
        };

        _proto._addBoolFlag = function _addBoolFlag(_ref6) {
          var flag = _ref6.flag;
          this.flags.push(flag);
        };

        _proto._removeBoolFlag = function _removeBoolFlag(_ref7) {
          var flag = _ref7.flag;
          this.flags = this.flags.filter(function (it) {
            return it != flag;
          });
        };

        _proto._resumeCurrentScript = function _resumeCurrentScript(pauseFlag) {
          if (pauseFlag === void 0) {
            pauseFlag = null;
          }

          if (pauseFlag) this._removeBoolFlag({
            flag: pauseFlag
          });
          this.mainDirector && this.mainDirector.currentGameMode.emit('RUN_CONTINUE_SCRIPT');
        };

        _proto._setJackpotActive = function _setJackpotActive(_ref8) {
          var active = _ref8.active;
          if (this.jackpot) this.jackpot.active = active;
        };

        _proto._activeBet = function _activeBet(_ref9) {
          var active = _ref9.active;
          active ? this.mainDirector.guiMgr.enableBet(true) : this.mainDirector.guiMgr.disableBet(true);
        };

        _proto._enableButton = function _enableButton(_ref10) {
          var objPath = _ref10.objPath;
          var button = find(objPath, this.mainDirector.node);

          if (button) {
            button.getComponent(Button).interactable = true;
          }
        };

        _proto._disableButton = function _disableButton(_ref11) {
          var objPath = _ref11.objPath;
          var button = find(objPath, this.mainDirector.node);

          if (button) {
            button.getComponent(Button).interactable = false;
          }
        };

        _proto.isContainFlag = function isContainFlag(flag) {
          return this.flags.indexOf(flag) >= 0;
        };

        _proto.trigger = function trigger(action) {
          if (this.waitingTrigger && this.waitingTrigger.some(function (trigger) {
            return trigger === action;
          })) {
            this.index += 1;

            if (this.index < this.tutorialSteps.json.Steps.length) {
              this.run();
            } else {
              this.hideTutorial();
            }
          }

          if (action == "ON_JACKPOT_CUTSCENE_CLOSE" && this.jackpotReset) {
            this.resetJackpot();
            this.jackpotReset = false;
          }

          if (action === "GAME_RESET_SESSION") {
            this._isSpinning = false;

            if (this.doActionAfterFinishSpin) {
              this._activeBet({
                active: true
              });

              this.endTutorialData = true;
              this.finished = true;
              this.doActionAfterFinishSpin = false;
            }
          }

          if (action === "SPIN_CLICK") {
            this._isSpinning = true;
          }
        };

        _proto.run = function run() {
          this.currentStepData = this.tutorialSteps.json.Steps[this.index];
          if (!this.currentStepData) log("something wrong");

          while (this.currentStepData.command != "_waitFor") {
            this.resolve(this.currentStepData);
            this.index += 1;

            if (this.index < this.tutorialSteps.json.Steps.length) {
              this.currentStepData = this.tutorialSteps.json.Steps[this.index];
            } else {
              break;
            }
          }

          if (this.index >= this.tutorialSteps.json.Steps.length) {
            this.hideTutorial();
          } else {
            this.waitingTrigger = this.currentStepData.data["trigger"];
            this.isDebug && warn("%c waiting", "color:red;", this.waitingTrigger);
          }
        };

        _proto.resolve = function resolve(stepData) {
          if (this[stepData.command] && typeof this[stepData.command] === "function") {
            this.isDebug && warn(stepData.command, JSON.stringify(stepData.data, null, "\t"));
            this[stepData.command](stepData.data);
          } else {
            warn("Cant find command " + stepData.command);
          }
        };

        _proto.isShowing = function isShowing() {
          return this.inited && this.showing;
        };

        _proto.onTutorialClick = function onTutorialClick() {
          this.trigger("TUTORIAL_CLICK");
        };

        _proto.onTutorialFinish = function onTutorialFinish() {
          if (this.finished) return;
          this.finished = true;
          this.doActionAfterFinishSpin = false;
        };

        _proto.unlockAll = function unlockAll() {
          this._hideDialog();

          this._hideIndicator();

          this._unlockButton();

          this._unlockTouch();

          this._unlockAllObjects();

          this.buttonSkip.active = false;
          this.gradientBot.active = false;
        };

        _proto.getText = function getText(id) {
          if (id === void 0) {
            id = '';
          }

          return this.config.TUTORIAL_TEXT ? this.config.TUTORIAL_TEXT[id] : id;
        };

        _proto.skipTutorial = function skipTutorial() {
          if (this.soundPlayer) {
            this.soundPlayer.playSFXClick();
          }

          this.eventManager.emit(EventNames.TUTORIAL_BREAK, this.index, this.tutorialSteps.json.Steps.length);
          this.index = this.tutorialSteps.json.Steps.length;
          this.showing = false;

          if (this._isSpinning) {
            this.doActionAfterFinishSpin = true;
          } else {
            this.endTutorialData = true;
            this.finished = true;

            this._activeBet({
              active: true
            });
          }

          if (this.mainDirector && this.mainDirector.node) {
            this.mainDirector.gameStateManager.skipTutorial();
          }

          if (this.guiMgr.topUI) {
            this.guiMgr.topUI.emit('ENABLE_BUTTONS');
          }

          this.hideTutorial();
        };

        _proto.hideTutorial = function hideTutorial() {
          this.unlockAll();
          this.waitingTrigger = [];
          this.showing = false;

          if (this.endTutorialData) {
            this.onTutorialFinish();
          }

          if (this.guiMgr.topUI) {
            this.guiMgr.topUI.emit('ENABLE_BUTTONS');
          }

          this.flags = [];

          this._resumeCurrentScript();
        };

        _proto.playAnimSwitchToReal = function playAnimSwitchToReal() {
          var _this5 = this;

          this.jackpot.active = false;

          this._lockTouch(null);

          this._activeBet({
            active: false
          });

          if (this.guiMgr.topUI) {
            this.guiMgr.topUI.emit('DISABLE_BUTTONS');
          }

          this.scheduleOnce(function () {
            _this5._activeBet({
              active: true
            });

            if (_this5.guiMgr.topUI) {
              _this5.guiMgr.topUI.emit('ENABLE_BUTTONS');
            }

            _this5._unlockTouch();

            _this5.node.active = false;
          }, this.timeDelayStart);
        };

        _proto.isFinished = function isFinished() {
          return !this.inited || this.finished;
        };

        _proto.onStateUpdate = function onStateUpdate(data) {
          log(data);

          if (data.trialJpl) {
            if (data.jackpotInfo) {
              if (data.trialJplWin && data.trialJplWin.length) {
                var trialJpl = data.trialJpl,
                    trialJplWin = data.trialJplWin;
                var isTutorialData = data.trialJplWin.length > 1;
                this.trialJpl = isTutorialData ? data.trialJplWin : this.getLatestJackpot(trialJpl, trialJplWin);
                this.runJackpot();
              } else if (data.jackpotInfo && data.jackpotInfo.length) ;

              this.trialJpl = data.trialJpl;
              this.jackpotReset = true;
            } else {
              this.trialJpl = data.trialJpl;
              this.runJackpot();
            }
          }

          if (data.isFinishedTutorial) {
            this.eventManager.emit(EventNames.TUTORIAL_END);
            this.endTutorialData = true;
            if (!this.showing) this.onTutorialFinish();
          }
        };

        _proto.getLatestJackpot = function getLatestJackpot(trialJpl, trialJplWin) {
          var jackpotName = trialJplWin[0].split(';')[0];
          return trialJpl.map(function (item) {
            return item.includes(jackpotName) ? trialJplWin[0] : item;
          });
        };

        _proto.runJackpot = function runJackpot() {
          this.jackpot.emit('UPDATE_JACKPOT', this.getUpdatedJackpot());
        };

        _proto.resetJackpot = function resetJackpot() {
          this.jackpot.emit('RESUME_JACKPOT', this.getUpdatedJackpot());
        };

        _proto.getUpdatedJackpot = function getUpdatedJackpot() {
          var updatedJackpot = {};
          this.trialJpl.forEach(function (jp) {
            var data = jp.split(';');
            updatedJackpot[data[0]] = Number(data[1]);
          });
          return updatedJackpot;
        };

        _proto.onEnable = function onEnable() {
          this.jackpot.active = true;
        };

        _proto._enableAutoSpin = function _enableAutoSpin(data) {
          this.slotButtons.forEach(function (button) {
            button.node.emit('PAUSE_AUTO_SPIN', data);
          });
        };

        _proto._hideAllElements = function _hideAllElements() {
          this._unlockButton();

          this._hideDialog();

          this._hideIndicator();
        };

        return TutorialMgr;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "dialog", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "gradientBot", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "gradientTop", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "tutorialData", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "tutorialSteps", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "indicator", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "buttonSkip", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "jackpot", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "timeDelayStart", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "isDebug", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TutorialStep.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './CustomEnum.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _createClass, cclegacy, _decorator, Node, Button, Label, CCString, CCFloat, Vec3, UITransform, Size, Vec2, getOpacity, setOpacity, TutorialCommandType, TutorialTriggerType, SlotGameMode;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Button = module.Button;
      Label = module.Label;
      CCString = module.CCString;
      CCFloat = module.CCFloat;
      Vec3 = module.Vec3;
      UITransform = module.UITransform;
      Size = module.Size;
      Vec2 = module.Vec2;
    }, function (module) {
      getOpacity = module.getOpacity;
      setOpacity = module.setOpacity;
    }, function (module) {
      TutorialCommandType = module.TutorialCommandType;
      TutorialTriggerType = module.TutorialTriggerType;
      SlotGameMode = module.SlotGameMode;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _descriptor2, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, _dec25, _dec26, _dec27, _dec28, _dec29, _class4, _class5, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24, _descriptor25, _descriptor26, _descriptor27, _descriptor28, _descriptor29;

      cclegacy._RF.push({}, "542555a+VtNkan+4zTqXvw0", "TutorialStep", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          integer = _decorator.integer;
      var NodeAddress = exports('NodeAddress', (_dec = ccclass("NodeAddress"), _dec(_class = (_class2 = function NodeAddress() {
        _initializerDefineProperty(this, "rootPath", _descriptor, this);

        _initializerDefineProperty(this, "name", _descriptor2, this);
      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "rootPath", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "name", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      })), _class2)) || _class));
      var TutorialStep = exports('TutorialStep', (_dec2 = ccclass("TutorialStep"), _dec3 = property({
        type: TutorialCommandType
      }), _dec4 = property({
        visible: false
      }), _dec5 = property({
        visible: false
      }), _dec6 = property({
        type: Node,
        visible: function visible() {
          return [TutorialCommandType.ShowObject, TutorialCommandType.HideObject, TutorialCommandType.SetScale, TutorialCommandType.SetPosition, TutorialCommandType.SetRotation, TutorialCommandType.HighlightObject, TutorialCommandType.RevertHighlightObject, TutorialCommandType.SetSiblingIndex, TutorialCommandType.SetOpacity].includes(this.commandType);
        }
      }), _dec7 = property({
        type: NodeAddress,
        visible: function visible() {
          return this.commandType === TutorialCommandType.HighlightObjectByName;
        }
      }), _dec8 = property({
        type: Node,
        visible: function visible() {
          return [TutorialCommandType.MoveTo, TutorialCommandType.MoveFromTo].includes(this.commandType);
        }
      }), _dec9 = property({
        visible: function visible() {
          return this.commandType === TutorialCommandType.MoveFromTo;
        }
      }), _dec10 = property({
        visible: function visible() {
          return [TutorialCommandType.MoveTo, TutorialCommandType.MoveFromTo].includes(this.commandType);
        }
      }), _dec11 = property({
        visible: function visible() {
          return [TutorialCommandType.MoveTo, TutorialCommandType.MoveFromTo].includes(this.commandType);
        }
      }), _dec12 = property({
        type: Button,
        visible: function visible() {
          return [TutorialCommandType.DisableButton, TutorialCommandType.EnableButton].includes(this.commandType);
        }
      }), _dec13 = property({
        visible: function visible() {
          return [TutorialCommandType.AddFlag, TutorialCommandType.RemoveFlag].includes(this.commandType);
        }
      }), _dec14 = property({
        type: TutorialTriggerType,
        visible: function visible() {
          return this.commandType === TutorialCommandType.WaitForTrigger;
        }
      }), _dec15 = property({
        type: Label,
        visible: function visible() {
          return this.commandType === TutorialCommandType.EditDialog;
        }
      }), _dec16 = property({
        type: CCString,
        multiline: true,
        tooltip: "Set up per label in dialogLabel list to per text in dialogText list",
        visible: function visible() {
          return this.commandType === TutorialCommandType.EditDialog;
        }
      }), _dec17 = property({
        type: CCFloat,
        tooltip: "Set up per node in target list to an opacity value",
        visible: function visible() {
          return this.commandType === TutorialCommandType.SetOpacity;
        }
      }), _dec18 = property({
        type: Vec3,
        tooltip: "Set up per node in target list to per element in scale list",
        visible: function visible() {
          return [TutorialCommandType.ShowObject, TutorialCommandType.SetScale].includes(this.commandType);
        }
      }), _dec19 = property({
        type: Vec3,
        tooltip: "Set up per node in target list to per pos in target pos list",
        visible: function visible() {
          return [TutorialCommandType.ShowObject, TutorialCommandType.SetPosition].includes(this.commandType);
        }
      }), _dec20 = property({
        type: UITransform,
        visible: function visible() {
          return this.commandType === TutorialCommandType.SetContentSize;
        }
      }), _dec21 = property({
        type: Size,
        tooltip: "Set up content size of node in ui transform target list to per content size in target content size list",
        visible: function visible() {
          return this.commandType === TutorialCommandType.SetContentSize;
        }
      }), _dec22 = property({
        type: Vec3,
        tooltip: "Set up per node rotation in target list to per rotation in Euler Angle in target rot list",
        visible: function visible() {
          return [TutorialCommandType.ShowObject, TutorialCommandType.SetRotation].includes(this.commandType);
        }
      }), _dec23 = property({
        type: Vec2,
        tooltip: "Symbols with Row and Col in table to highlight",
        visible: function visible() {
          return this.commandType === TutorialCommandType.HighlightSymbol;
        }
      }), _dec24 = property({
        type: SlotGameMode,
        visible: function visible() {
          return this.commandType === TutorialCommandType.PauseAction;
        }
      }), _dec25 = property({
        visible: function visible() {
          return this.commandType === TutorialCommandType.PauseAction;
        }
      }), _dec26 = property({
        visible: function visible() {
          return this.commandType === TutorialCommandType.PauseAction;
        }
      }), _dec27 = property({
        type: CCFloat,
        tooltip: "Set up per node in target list to an sibling index",
        visible: function visible() {
          return this.commandType === TutorialCommandType.SetSiblingIndex;
        }
      }), _dec28 = property({
        tooltip: "Custom command to run",
        visible: function visible() {
          return this.commandType === TutorialCommandType.Custom;
        }
      }), _dec29 = property({
        visible: function visible() {
          return [TutorialCommandType.HighlightObject, TutorialCommandType.HighlightObjectByName, TutorialCommandType.HighlightSymbol].includes(this.commandType);
        }
      }), _dec2(_class4 = (_class5 = /*#__PURE__*/function () {
        function TutorialStep() {
          _initializerDefineProperty(this, "stepName", _descriptor3, this);

          _initializerDefineProperty(this, "priority", _descriptor4, this);

          _initializerDefineProperty(this, "commandType", _descriptor5, this);

          _initializerDefineProperty(this, "targets", _descriptor6, this);

          _initializerDefineProperty(this, "targetsByName", _descriptor7, this);

          _initializerDefineProperty(this, "movingTarget", _descriptor8, this);

          _initializerDefineProperty(this, "fromPosition", _descriptor9, this);

          _initializerDefineProperty(this, "toPosition", _descriptor10, this);

          _initializerDefineProperty(this, "movingTime", _descriptor11, this);

          _initializerDefineProperty(this, "buttons", _descriptor12, this);

          _initializerDefineProperty(this, "flagName", _descriptor13, this);

          _initializerDefineProperty(this, "triggerTypes", _descriptor14, this);

          _initializerDefineProperty(this, "dialogLabels", _descriptor15, this);

          _initializerDefineProperty(this, "dialogTexts", _descriptor16, this);

          _initializerDefineProperty(this, "targetOpacities", _descriptor17, this);

          _initializerDefineProperty(this, "targetScales", _descriptor18, this);

          _initializerDefineProperty(this, "targetPositions", _descriptor19, this);

          _initializerDefineProperty(this, "transformTargets", _descriptor20, this);

          _initializerDefineProperty(this, "targetContentSizes", _descriptor21, this);

          _initializerDefineProperty(this, "targetRotations", _descriptor22, this);

          _initializerDefineProperty(this, "symbolPositions", _descriptor23, this);

          _initializerDefineProperty(this, "GameMode", _descriptor24, this);

          _initializerDefineProperty(this, "actionName", _descriptor25, this);

          _initializerDefineProperty(this, "commandName", _descriptor26, this);

          _initializerDefineProperty(this, "targetSiblingIndices", _descriptor27, this);

          _initializerDefineProperty(this, "customCommand", _descriptor28, this);

          _initializerDefineProperty(this, "unHighlightPreviousObjects", _descriptor29, this);

          this._isStarted = false;
          this._isCompleted = false;
          this._originEnableStates = [];
          this._originPositions = [];
          this._originRotations = [];
          this._originScales = [];
          this._originSizes = [];
          this._originOpacities = [];
          this._originActiveStates = [];
          this._originTexts = [];
          this._movingObjOriginPos = new Vec3(0, 0, 0);
        }

        var _proto = TutorialStep.prototype;

        _proto.checkForTrigger = function checkForTrigger(trigger) {
          var res = this.triggerTypes.indexOf(trigger);
          return res >= 0;
        };

        _proto.resetStep = function resetStep() {
          this._isStarted = false;
          this._isCompleted = false;

          this._loadOriginalStatus();
        };

        _proto.startStep = function startStep() {
          this._isStarted = true;
          this._isCompleted = false;

          this._saveOriginalStatus();
        };

        _proto.finishStep = function finishStep() {
          this._isCompleted = true;
        };

        _proto._saveOriginalStatus = function _saveOriginalStatus() {
          switch (this.commandType) {
            case TutorialCommandType.EnableButton:
              this._saveOriginalEnableStates();

              break;

            case TutorialCommandType.DisableButton:
              this._saveOriginalEnableStates();

              break;

            case TutorialCommandType.SetPosition:
              this._saveOriginalPositions();

              break;

            case TutorialCommandType.MoveTo:
              this._saveMovingObjOriginalPositions();

              break;

            case TutorialCommandType.MoveFromTo:
              this._saveMovingObjOriginalPositions();

              break;

            case TutorialCommandType.SetRotation:
              this._saveOriginalRotations();

              break;

            case TutorialCommandType.SetScale:
              this._saveOriginalScales();

              break;

            case TutorialCommandType.SetContentSize:
              this._saveOriginalContentSizes();

              break;

            case TutorialCommandType.SetOpacity:
              this._saveOriginalOpacities();

              break;

            case TutorialCommandType.ShowObject:
              this._saveOriginalActiveStates();

              break;

            case TutorialCommandType.HideObject:
              this._saveOriginalActiveStates();

              break;

            case TutorialCommandType.EditDialog:
              this._saveOriginalDialogs();

              break;
          }
        };

        _proto._loadOriginalStatus = function _loadOriginalStatus() {
          switch (this.commandType) {
            case TutorialCommandType.EnableButton:
              this._loadOriginalEnableStates();

              break;

            case TutorialCommandType.DisableButton:
              this._loadOriginalEnableStates();

              break;

            case TutorialCommandType.SetPosition:
              this._loadOriginalPositions();

              break;

            case TutorialCommandType.MoveTo:
              this._loadMovingObjOriginalPositions();

              break;

            case TutorialCommandType.MoveFromTo:
              this._loadMovingObjOriginalPositions();

              break;

            case TutorialCommandType.SetRotation:
              this._loadOriginalRotations();

              break;

            case TutorialCommandType.SetScale:
              this._loadOriginalScales();

              break;

            case TutorialCommandType.SetContentSize:
              this._loadOriginalContentSizes();

              break;

            case TutorialCommandType.SetOpacity:
              this._loadOriginalOpacities();

              break;

            case TutorialCommandType.ShowObject:
              this._loadOriginalActiveStates();

              break;

            case TutorialCommandType.HideObject:
              this._loadOriginalActiveStates();

              break;

            case TutorialCommandType.EditDialog:
              this._loadOriginalDialogs();

              break;
          }
        };

        _proto._saveOriginalPositions = function _saveOriginalPositions() {
          this._originPositions = [];

          for (var i = 0; i < this.targets.length; i++) {
            var target = this.targets[i];

            if (target) {
              var pos = target.position.clone();

              this._originPositions.push(pos);
            }
          }
        };

        _proto._saveMovingObjOriginalPositions = function _saveMovingObjOriginalPositions() {
          this._movingObjOriginPos = this.movingTarget.position.clone();
        };

        _proto._saveOriginalRotations = function _saveOriginalRotations() {
          this._originRotations = [];

          for (var i = 0; i < this.targets.length; i++) {
            var target = this.targets[i];

            if (target) {
              var rot = target.eulerAngles.clone();

              this._originRotations.push(rot);
            }
          }
        };

        _proto._saveOriginalScales = function _saveOriginalScales() {
          this._originScales = [];

          for (var i = 0; i < this.targets.length; i++) {
            var target = this.targets[i];

            if (target) {
              var scal = target.scale.clone();

              this._originScales.push(scal);
            }
          }
        };

        _proto._saveOriginalOpacities = function _saveOriginalOpacities() {
          this._originOpacities = [];

          for (var i = 0; i < this.targets.length; i++) {
            var target = this.targets[i];

            if (target) {
              var opa = getOpacity(target);

              this._originOpacities.push(opa);
            }
          }
        };

        _proto._saveOriginalActiveStates = function _saveOriginalActiveStates() {
          this._originActiveStates = [];

          for (var i = 0; i < this.targets.length; i++) {
            var target = this.targets[i];

            if (target) {
              var _active = target.active;

              this._originActiveStates.push(_active);
            }
          }
        };

        _proto._saveOriginalEnableStates = function _saveOriginalEnableStates() {
          this._originEnableStates = [];

          for (var i = 0; i < this.buttons.length; i++) {
            var button = this.buttons[i];

            if (button) {
              var enable = button.interactable;

              this._originEnableStates.push(enable);
            }
          }
        };

        _proto._saveOriginalContentSizes = function _saveOriginalContentSizes() {
          this._originSizes = [];

          for (var i = 0; i < this.transformTargets.length; i++) {
            var transform = this.transformTargets[i];

            if (transform) {
              var size = transform.contentSize.clone();

              this._originSizes.push(size);
            }
          }
        };

        _proto._saveOriginalDialogs = function _saveOriginalDialogs() {
          this._originTexts = [];

          for (var i = 0; i < this.dialogLabels.length; i++) {
            var label = this.dialogLabels[i];

            if (label) {
              var text = label.string;

              this._originTexts.push(text);
            }
          }
        };

        _proto._loadOriginalPositions = function _loadOriginalPositions() {
          for (var i = 0; i < this.targets.length; i++) {
            var target = this.targets[i];
            var pos = this._originPositions[i];

            if (target && pos) {
              target.setPosition(pos);
            }
          }

          this._originPositions = [];
        };

        _proto._loadOriginalRotations = function _loadOriginalRotations() {
          for (var i = 0; i < this.targets.length; i++) {
            var target = this.targets[i];
            var rot = this._originRotations[i];

            if (target && rot) {
              target.setRotationFromEuler(rot);
            }
          }

          this._originRotations = [];
        };

        _proto._loadOriginalScales = function _loadOriginalScales() {
          for (var i = 0; i < this.targets.length; i++) {
            var target = this.targets[i];
            var scale = this._originScales[i];

            if (target && scale) {
              target.scale = scale;
            }
          }

          this._originScales = [];
        };

        _proto._loadOriginalOpacities = function _loadOriginalOpacities() {
          for (var i = 0; i < this.targets.length; i++) {
            var target = this.targets[i];
            var opa = this._originOpacities[i];

            if (target) {
              setOpacity(target, opa);
            }
          }

          this._originOpacities = [];
        };

        _proto._loadOriginalActiveStates = function _loadOriginalActiveStates() {
          for (var i = 0; i < this.targets.length; i++) {
            var target = this.targets[i];
            var active = this._originActiveStates[i];

            if (target) {
              target.active = active;
            }
          }

          this._originActiveStates = [];
        };

        _proto._loadOriginalEnableStates = function _loadOriginalEnableStates() {
          for (var i = 0; i < this.buttons.length; i++) {
            var button = this.buttons[i];
            var enable = this._originEnableStates[i];

            if (button) {
              button.interactable = enable;
            }
          }

          this._originEnableStates = [];
        };

        _proto._loadOriginalContentSizes = function _loadOriginalContentSizes() {
          for (var i = 0; i < this.transformTargets.length; i++) {
            var transform = this.transformTargets[i];
            var size = this._originSizes[i];

            if (transform && size) {
              transform.setContentSize(size);
            }
          }

          this._originSizes = [];
        };

        _proto._loadOriginalDialogs = function _loadOriginalDialogs() {
          for (var i = 0; i < this.dialogLabels.length; i++) {
            var label = this.dialogLabels[i];
            var text = this._originTexts[i];

            if (label && text) {
              label.string = text;
            }
          }

          this._originTexts = [];
        };

        _proto._loadMovingObjOriginalPositions = function _loadMovingObjOriginalPositions() {
          this.movingTarget.setPosition(this._movingObjOriginPos);
        };

        _createClass(TutorialStep, [{
          key: "isStarted",
          get: function get() {
            return this._isStarted;
          }
        }, {
          key: "isCompleted",
          get: function get() {
            return this._isCompleted;
          }
        }]);

        return TutorialStep;
      }(), (_descriptor3 = _applyDecoratedDescriptor(_class5.prototype, "stepName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class5.prototype, "priority", [integer], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class5.prototype, "commandType", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return TutorialCommandType.Custom;
        }
      }), _applyDecoratedDescriptor(_class5.prototype, "isStarted", [_dec4], Object.getOwnPropertyDescriptor(_class5.prototype, "isStarted"), _class5.prototype), _applyDecoratedDescriptor(_class5.prototype, "isCompleted", [_dec5], Object.getOwnPropertyDescriptor(_class5.prototype, "isCompleted"), _class5.prototype), _descriptor6 = _applyDecoratedDescriptor(_class5.prototype, "targets", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class5.prototype, "targetsByName", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class5.prototype, "movingTarget", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class5.prototype, "fromPosition", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Vec3(0, 0, 0);
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class5.prototype, "toPosition", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Vec3(0, 0, 0);
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class5.prototype, "movingTime", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class5.prototype, "buttons", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class5.prototype, "flagName", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class5.prototype, "triggerTypes", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class5.prototype, "dialogLabels", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class5.prototype, "dialogTexts", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class5.prototype, "targetOpacities", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class5.prototype, "targetScales", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor19 = _applyDecoratedDescriptor(_class5.prototype, "targetPositions", [_dec19], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor20 = _applyDecoratedDescriptor(_class5.prototype, "transformTargets", [_dec20], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor21 = _applyDecoratedDescriptor(_class5.prototype, "targetContentSizes", [_dec21], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor22 = _applyDecoratedDescriptor(_class5.prototype, "targetRotations", [_dec22], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor23 = _applyDecoratedDescriptor(_class5.prototype, "symbolPositions", [_dec23], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor24 = _applyDecoratedDescriptor(_class5.prototype, "GameMode", [_dec24], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return SlotGameMode.NormalGame;
        }
      }), _descriptor25 = _applyDecoratedDescriptor(_class5.prototype, "actionName", [_dec25], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor26 = _applyDecoratedDescriptor(_class5.prototype, "commandName", [_dec26], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor27 = _applyDecoratedDescriptor(_class5.prototype, "targetSiblingIndices", [_dec27], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor28 = _applyDecoratedDescriptor(_class5.prototype, "customCommand", [_dec28], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor29 = _applyDecoratedDescriptor(_class5.prototype, "unHighlightPreviousObjects", [_dec29], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      })), _class5)) || _class4));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TweenViewComponent.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts', './TweenViewConfig.ts', './utils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Enum, tween, v3, GameObject, TweenViewConfig, setOpacity, fadeTo;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Enum = module.Enum;
      tween = module.tween;
      v3 = module.v3;
    }, function (module) {
      GameObject = module.GameObject;
    }, function (module) {
      TweenViewConfig = module.TweenViewConfig;
    }, function (module) {
      setOpacity = module.setOpacity;
      fadeTo = module.fadeTo;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "a987fqL+rtCW4BZ9Znbe/Xh", "TweenViewComponent", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TweenType = Enum({
        FADE: 0,
        MOVE: 1,
        ZOOM: 2,
        ROTATE: 3,
        FADE_AND_MOVE: 4,
        FADE_AND_ZOOM: 5,
        FADE_AND_ROTATE: 6,
        MOVE_AND_ZOOM: 7,
        MOVE_AND_ROTATE: 8,
        ROTATE_AND_ZOOM: 9,
        FADE_AND_MOVE_AND_ZOOM: 10,
        FADE_AND_MOVE_AND_ROTATE: 11,
        FADE_AND_ROTATE_AND_ZOOM: 12,
        MOVE_AND_ZOOM_AND_ROTATE: 13,
        FADE_AND_MOVE_AND_ZOOM_AND_ROTATE: 14,
        OTHER: 99
      });
      var TweenViewComponent = exports('TweenViewComponent', (_dec = ccclass('TweenViewComponent'), _dec2 = property({
        type: TweenType
      }), _dec3 = property({
        type: TweenViewConfig
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(TweenViewComponent, _GameObject);

        function TweenViewComponent() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "tweenType", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tweenConfig", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "forceChildrend", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "stopPreviousTween", _descriptor4, _assertThisInitialized(_this));

          _this._startCB = null;
          _this._endCB = null;
          _this.tweenFade = null;
          _this.tweenMove = null;
          _this.tweenZoom = null;
          _this.tweenRotate = null;
          return _this;
        }

        var _proto = TweenViewComponent.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          this.node.show = this.show.bind(this);
          this.node.hide = this.hide.bind(this);
          this.node.on("SHOW", this.show, this);
          this.node.on("HIDE", this.hide, this);
        };

        _proto.show = function show(onStart, onComplete) {
          var _this2 = this;

          if (onStart === void 0) {
            onStart = null;
          }

          if (onComplete === void 0) {
            onComplete = null;
          }

          var delayStart = this.tweenConfig.delayStart;
          this.showByType(true, this.tweenType, delayStart, onStart, function () {
            if (_this2.forceChildrend) {
              for (var i = 0; i < _this2.node.children.length; i++) {
                var child = _this2.node.children[i];
                if (child) child.emit("SHOW");
              }
            }

            onComplete && onComplete();
          });
        };

        _proto.hide = function hide(onStart, onComplete) {
          var _this3 = this;

          var delayStart = this.tweenConfig.delayStart;
          this.showByType(false, this.tweenType, delayStart, onStart, function () {
            if (_this3.forceChildrend) {
              for (var i = 0; i < _this3.node.children.length; i++) {
                var child = _this3.node.children[i];
                if (child) child.emit("HIDE");
              }
            }

            onComplete && onComplete();
          });
        };

        _proto.showByType = function showByType(isShow, type, delay, onStartcallback, onFinishedCallback) {
          var _this$tweenConfig = this.tweenConfig,
              fromOpacity = _this$tweenConfig.fromOpacity,
              toOpacity = _this$tweenConfig.toOpacity,
              fadeDuration = _this$tweenConfig.fadeDuration,
              fadeEasing = _this$tweenConfig.fadeEasing,
              fromPos = _this$tweenConfig.fromPos,
              toPos = _this$tweenConfig.toPos,
              moveDuration = _this$tweenConfig.moveDuration,
              moveEasing = _this$tweenConfig.moveEasing,
              fromScale = _this$tweenConfig.fromScale,
              toScale = _this$tweenConfig.toScale,
              scaleDuration = _this$tweenConfig.scaleDuration,
              scaleEasing = _this$tweenConfig.scaleEasing,
              fromAngle = _this$tweenConfig.fromAngle,
              toAngle = _this$tweenConfig.toAngle,
              rotateDuration = _this$tweenConfig.rotateDuration,
              rotateEasing = _this$tweenConfig.rotateEasing;
          this._startCB = onStartcallback;
          this._endCB = onFinishedCallback;

          switch (type) {
            case TweenType.FADE:
              this._fadeTo(isShow ? fromOpacity : toOpacity, isShow ? toOpacity : fromOpacity, delay, fadeDuration, fadeEasing, this._startCB, this._endCB);

              break;

            case TweenType.MOVE:
              this._moveTo(isShow ? fromPos : toPos, isShow ? toPos : fromPos, delay, moveDuration, moveEasing, this._startCB, this._endCB);

              break;

            case TweenType.ZOOM:
              this._zoomTo(isShow ? fromScale : toScale, isShow ? toScale : fromPos, delay, scaleDuration, scaleEasing, this._startCB, this._endCB);

              break;

            case TweenType.ROTATE:
              this._rotateTo(isShow ? fromAngle : toAngle, isShow ? toAngle : fromPos, delay, rotateDuration, rotateEasing, this._startCB, this._endCB);

              break;

            case TweenType.FADE_AND_MOVE:
              this._fadeTo(isShow ? fromOpacity : toOpacity, isShow ? toOpacity : fromOpacity, delay, fadeDuration, fadeEasing, this._startCB, this._endCB);

              this._moveTo(isShow ? fromPos : toPos, isShow ? toPos : fromPos, delay, moveDuration, moveEasing, this._startCB, this._endCB);

              break;

            case TweenType.FADE_AND_ZOOM:
              this._fadeTo(isShow ? fromOpacity : toOpacity, isShow ? toOpacity : fromOpacity, delay, fadeDuration, fadeEasing, this._startCB, this._endCB);

              this._zoomTo(isShow ? fromScale : toScale, isShow ? toScale : fromPos, delay, scaleDuration, scaleEasing, this._startCB, this._endCB);

              break;

            case TweenType.FADE_AND_ROTATE:
              this._fadeTo(isShow ? fromOpacity : toOpacity, isShow ? toOpacity : fromOpacity, delay, fadeDuration, fadeEasing, this._startCB, this._endCB);

              this._rotateTo(isShow ? fromAngle : toAngle, isShow ? toAngle : fromPos, delay, rotateDuration, rotateEasing, this._startCB, this._endCB);

              break;

            case TweenType.MOVE_AND_ZOOM:
              this._moveTo(isShow ? fromPos : toPos, isShow ? toPos : fromPos, delay, moveDuration, moveEasing, this._startCB, this._endCB);

              this._zoomTo(isShow ? fromScale : toScale, isShow ? toScale : fromPos, delay, scaleDuration, scaleEasing, this._startCB, this._endCB);

              break;

            case TweenType.MOVE_AND_ROTATE:
              this._moveTo(isShow ? fromPos : toPos, isShow ? toPos : fromPos, delay, moveDuration, moveEasing, this._startCB, this._endCB);

              this._rotateTo(isShow ? fromAngle : toAngle, isShow ? toAngle : fromPos, delay, rotateDuration, rotateEasing, this._startCB, this._endCB);

              break;

            case TweenType.FADE_AND_MOVE_AND_ZOOM:
              this._fadeTo(isShow ? fromOpacity : toOpacity, isShow ? toOpacity : fromOpacity, delay, fadeDuration, fadeEasing, this._startCB, this._endCB);

              this._moveTo(isShow ? fromPos : toPos, isShow ? toPos : fromPos, delay, moveDuration, moveEasing, this._startCB, this._endCB);

              this._zoomTo(isShow ? fromScale : toScale, isShow ? toScale : fromPos, delay, scaleDuration, scaleEasing, this._startCB, this._endCB);

              break;

            case TweenType.FADE_AND_MOVE_AND_ROTATE:
              this._fadeTo(isShow ? fromOpacity : toOpacity, isShow ? toOpacity : fromOpacity, delay, fadeDuration, fadeEasing, this._startCB, this._endCB);

              this._moveTo(isShow ? fromPos : toPos, isShow ? toPos : fromPos, delay, moveDuration, moveEasing, this._startCB, this._endCB);

              this._rotateTo(isShow ? fromAngle : toAngle, isShow ? toAngle : fromPos, delay, rotateDuration, rotateEasing, this._startCB, this._endCB);

              break;

            case TweenType.FADE_AND_ROTATE_AND_ZOOM:
              this._fadeTo(isShow ? fromOpacity : toOpacity, isShow ? toOpacity : fromOpacity, delay, fadeDuration, fadeEasing, this._startCB, this._endCB);

              this._rotateTo(isShow ? fromAngle : toAngle, isShow ? toAngle : fromPos, delay, rotateDuration, rotateEasing, this._startCB, this._endCB);

              this._zoomTo(isShow ? fromScale : toScale, isShow ? toScale : fromPos, delay, scaleDuration, scaleEasing, this._startCB, this._endCB);

              break;

            case TweenType.MOVE_AND_ZOOM_AND_ROTATE:
              this._moveTo(isShow ? fromPos : toPos, isShow ? toPos : fromPos, delay, moveDuration, moveEasing, this._startCB, this._endCB);

              this._zoomTo(isShow ? fromScale : toScale, isShow ? toScale : fromPos, delay, scaleDuration, scaleEasing, this._startCB, this._endCB);

              this._rotateTo(isShow ? fromAngle : toAngle, isShow ? toAngle : fromPos, delay, rotateDuration, rotateEasing, this._startCB, this._endCB);

              break;

            case TweenType.FADE_AND_MOVE_AND_ZOOM_AND_ROTATE:
              this._fadeTo(isShow ? fromOpacity : toOpacity, isShow ? toOpacity : fromOpacity, delay, fadeDuration, fadeEasing, this._startCB, this._endCB);

              this._moveTo(isShow ? fromPos : toPos, isShow ? toPos : fromPos, delay, moveDuration, moveEasing, this._startCB, this._endCB);

              this._rotateTo(isShow ? fromAngle : toAngle, isShow ? toAngle : fromPos, delay, rotateDuration, rotateEasing, this._startCB, this._endCB);

              this._zoomTo(isShow ? fromScale : toScale, isShow ? toScale : fromPos, delay, scaleDuration, scaleEasing, this._startCB, this._endCB);

              break;

            case TweenType.OTHER:
              break;
          }
        };

        _proto._fadeTo = function _fadeTo(fromOpacity, toOpacity, delay, duration, easing, startCallback, endCallback) {
          var _this4 = this;

          var _delay = delay;
          var _duration = duration;

          if (this.tweenFade && this.stopPreviousTween) {
            this.tweenFade.stop();
            this.tweenFade = null;
            _delay = 0;
            _duration = 0.01;
          } else {
            setOpacity(this.node, fromOpacity);
          }

          this.tweenFade = tween(this.node).delay(_delay).call(function () {
            startCallback && startCallback();
            startCallback = null;
          }).call(function () {
            fadeTo(_this4.node, _duration, toOpacity, {
              easing: easing
            });
          }).delay(_duration).call(function () {
            endCallback && endCallback();
            endCallback = null;
            _this4.tweenFade = null;
          }).start();
          return this.tweenFade;
        };

        _proto._moveTo = function _moveTo(fromPos, toPos, delay, duration, easing, startCallback, endCallback) {
          var _this5 = this;

          var _delay = delay;
          var _duration = duration;

          if (this.tweenMove && this.stopPreviousTween) {
            this.tweenMove.stop();
            this.tweenMove = null;
            _delay = 0;
            _duration = 0.01;
          } else {
            this.node.setPosition(fromPos);
          }

          this.tweenMove = tween(this.node).delay(_delay).call(function () {
            startCallback && startCallback();
            startCallback = null;
          }).to(_duration, {
            position: v3(toPos)
          }, {
            easing: easing
          }).call(function () {
            endCallback && endCallback();
            endCallback = null;
            _this5.tweenMove = null;
          }).start();
          return this.tweenMove;
        };

        _proto._zoomTo = function _zoomTo(fromScale, toScale, delay, duration, easing, startCallback, endCallback) {
          var _this6 = this;

          var _delay = delay;
          var _duration = duration;

          if (this.tweenZoom && this.stopPreviousTween) {
            this.tweenZoom.stop();
            this.tweenZoom = null;
            _delay = 0;
            _duration = 0.01;
          } else {
            this.node.scale = fromScale;
          }

          this.tweenZoom = tween(this.node).delay(_delay).call(function () {
            startCallback && startCallback();
            startCallback = null;
          }).to(_duration, {
            scale: toScale
          }, {
            easing: easing
          }).call(function () {
            endCallback && endCallback();
            endCallback = null;
            _this6.tweenZoom = null;
          }).start();
          return this.tweenZoom;
        };

        _proto._rotateTo = function _rotateTo(fromAngle, toAngle, delay, duration, easing, startCallback, endCallback) {
          var _this7 = this;

          var _delay = delay;
          var _duration = duration;

          if (this.tweenRotate && this.stopPreviousTween) {
            this.tweenRotate.stop();
            this.tweenRotate = null;
            _delay = 0;
            _duration = 0.01;
          } else {
            this.node.angle = fromAngle;
          }

          this.tweenRotate = tween(this.node).delay(_delay).call(function () {
            startCallback && startCallback();
            startCallback = null;
          }).to(_duration, {
            angle: toAngle
          }, {
            easing: easing
          }).call(function () {
            endCallback && endCallback();
            endCallback = null;
            _this7.tweenRotate = null;
          }).start();
          return this.tweenRotate;
        };

        _proto.onDestroy = function onDestroy() {
          if (this.tweenFade) this.tweenFade.stop();
          if (this.tweenMove) this.tweenMove.stop();
          if (this.tweenZoom) this.tweenZoom.stop();
          if (this.tweenRotate) this.tweenRotate.stop();
          this.unscheduleAllCallbacks();
        };

        return TweenViewComponent;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "tweenType", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return TweenType.FADE;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "tweenConfig", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "forceChildrend", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "stopPreviousTween", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TweenViewConfig.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, _decorator, v3;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      v3 = module.v3;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17;

      cclegacy._RF.push({}, "9abafER3HBEpajFDa/prpMa", "TweenViewConfig", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TweenViewConfig = exports('TweenViewConfig', (_dec = ccclass('TweenViewConfig'), _dec2 = property({
        displayName: 'fromOpacity',
        visible: true
      }), _dec3 = property({
        displayName: 'toOpacity',
        visible: true
      }), _dec4 = property({
        displayName: 'fadeDuration',
        visible: true
      }), _dec5 = property({
        displayName: 'fadeEasing',
        visible: true
      }), _dec6 = property({
        displayName: 'fromPos',
        visible: true
      }), _dec7 = property({
        displayName: 'toPos',
        visible: true
      }), _dec8 = property({
        displayName: 'moveDuration',
        visible: true
      }), _dec9 = property({
        displayName: 'moveEasing',
        visible: true
      }), _dec10 = property({
        displayName: 'fromScale',
        visible: true
      }), _dec11 = property({
        displayName: 'toScale',
        visible: true
      }), _dec12 = property({
        displayName: 'scaleDuration',
        visible: true
      }), _dec13 = property({
        displayName: 'scaleEasing',
        visible: true
      }), _dec14 = property({
        displayName: 'fromAngle',
        visible: true
      }), _dec15 = property({
        displayName: 'toAngle',
        visible: true
      }), _dec16 = property({
        displayName: 'rotateDuration',
        visible: true
      }), _dec17 = property({
        displayName: 'rotateEasing',
        visible: true
      }), _dec18 = property({
        displayName: 'delayStart',
        visible: true
      }), _dec(_class = (_class2 = function TweenViewConfig() {
        _initializerDefineProperty(this, "fromOpacity", _descriptor, this);

        _initializerDefineProperty(this, "toOpacity", _descriptor2, this);

        _initializerDefineProperty(this, "fadeDuration", _descriptor3, this);

        _initializerDefineProperty(this, "fadeEasing", _descriptor4, this);

        _initializerDefineProperty(this, "fromPos", _descriptor5, this);

        _initializerDefineProperty(this, "toPos", _descriptor6, this);

        _initializerDefineProperty(this, "moveDuration", _descriptor7, this);

        _initializerDefineProperty(this, "moveEasing", _descriptor8, this);

        _initializerDefineProperty(this, "fromScale", _descriptor9, this);

        _initializerDefineProperty(this, "toScale", _descriptor10, this);

        _initializerDefineProperty(this, "scaleDuration", _descriptor11, this);

        _initializerDefineProperty(this, "scaleEasing", _descriptor12, this);

        _initializerDefineProperty(this, "fromAngle", _descriptor13, this);

        _initializerDefineProperty(this, "toAngle", _descriptor14, this);

        _initializerDefineProperty(this, "rotateDuration", _descriptor15, this);

        _initializerDefineProperty(this, "rotateEasing", _descriptor16, this);

        _initializerDefineProperty(this, "delayStart", _descriptor17, this);
      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "fromOpacity", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "toOpacity", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 255;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "fadeDuration", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "fadeEasing", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "sineIn";
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "fromPos", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return v3(0, 0, 0);
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "toPos", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return v3(0, 0, 0);
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "moveDuration", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "moveEasing", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "sineIn";
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "fromScale", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "toScale", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 2;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "scaleDuration", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "scaleEasing", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "sineIn";
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "fromAngle", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "toAngle", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 180;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "rotateDuration", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "rotateEasing", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "sineIn";
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "delayStart", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UIManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CustomEnum.ts', './TutorialControl.ts', './CustomType.ts', './TutorialMgr.ts', './GameObject.ts', './EventNames.ts', './loadConfigAsync.ts', './Setting.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Button, Event, log, v3, WalletType, SlotSceneType, SlotGameMode, TutorialControl, CustomEvent, TutorialMgr, GameObject, EventNames, loadConfigAsync, Setting;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Button = module.Button;
      Event = module.Event;
      log = module.log;
      v3 = module.v3;
    }, function (module) {
      WalletType = module.WalletType;
      SlotSceneType = module.SlotSceneType;
      SlotGameMode = module.SlotGameMode;
    }, function (module) {
      TutorialControl = module.TutorialControl;
    }, function (module) {
      CustomEvent = module.CustomEvent;
    }, function (module) {
      TutorialMgr = module.TutorialMgr;
    }, function (module) {
      GameObject = module.GameObject;
    }, function (module) {
      EventNames = module.default;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      Setting = module.Setting;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20;

      cclegacy._RF.push({}, "10c8cuZ4JVFNK8RLXNHKcG5", "UIManager", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var UIManager = exports('UIManager', (_dec = ccclass('UIManager'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: Node
      }), _dec6 = property({
        type: Node
      }), _dec7 = property({
        type: Node
      }), _dec8 = property({
        type: Node
      }), _dec9 = property({
        type: Node
      }), _dec10 = property({
        type: TutorialMgr
      }), _dec11 = property({
        type: TutorialControl
      }), _dec12 = property({
        type: Node
      }), _dec13 = property({
        type: Node
      }), _dec14 = property({
        type: Node
      }), _dec15 = property({
        type: Node
      }), _dec16 = property({
        type: Node
      }), _dec17 = property({
        type: Node
      }), _dec18 = property({
        type: Node
      }), _dec19 = property({
        type: Node
      }), _dec20 = property({
        type: Node
      }), _dec21 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(UIManager, _GameObject);

        function UIManager() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;
          _this.sceneComp = [];
          _this.buttons = [];

          _initializerDefineProperty(_this, "dialogMessage", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "controllerHolder", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sceneHolder", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bet", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "wallet", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "jackpot", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "trialButton", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "turbo", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tutorialMgr", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tutorialController", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "winAmount", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "paylineInfo", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "toastInfo", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "topUI", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "questMgr", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "questProcessMgr", _descriptor16, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "animWinEvent", _descriptor17, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "topUserList", _descriptor18, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "promoteWallet", _descriptor19, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "multiScreenBtn", _descriptor20, _assertThisInitialized(_this));

          _this._realBetData = null;
          _this._realExtraBetData = null;
          _this._lastWalletType = WalletType.NORMAL;
          _this.sceneSiblingOffset = 0;
          return _this;
        }

        var _proto = UIManager.prototype;

        _proto.onLoad = function onLoad() {
          globalThis.UIManager = this; //TODO remove debug

          this.node.dispatchEvent(new CustomEvent("SET_UP_UI_MANAGER", true, {
            guiMgr: this
          }));

          _GameObject.prototype.onLoad.call(this);

          this.setupUI();
          this.node.on('SET_UP_SLOT_BUTTON', this.setUpSlotButton.bind(this));
          this.node.on('SET_UP_SPIN_TIMES', this.setUpSpinTimes.bind(this));

          var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
              LOGIN_IFRAME = _loadConfigAsync$getC.LOGIN_IFRAME;

          if (LOGIN_IFRAME) {
            this.displayMultiScreenButton(false);
          } else {
            this.displayMultiScreenButton(true);
          }
        };

        _proto.setUpSlotButton = function setUpSlotButton(evt) {
          if (evt.details) {
            evt.propagationStopped = true;

            if (this.eventManager) {
              this.eventManager.emit(evt.type, evt.details);
            }
          }
        };

        _proto.setUpSpinTimes = function setUpSpinTimes(evt) {
          if (evt.details) {
            evt.propagationStopped = true;

            if (this.eventManager) {
              this.eventManager.emit(evt.type, evt.details);
            }
          }
        };

        _proto.setupUI = function setupUI() {
          this.sceneHolder.active = true;

          for (var i = 0; i < this.sceneHolder.children.length; i++) {
            var child = this.sceneHolder.children[i];

            if (child) {
              child.active = true;
            }
          }

          this.enableTrialBtn(false);
          this.trialButton.on("SWITCH_MODE", this.switchMode, this);
          this.buttons = this.controllerHolder.getComponentsInChildren(Button);
          this.buttons.forEach(function (it) {
            it.interactable = false;
          });
        };

        _proto.hideAllUI = function hideAllUI() {
          this.bet.active = false;
          this.wallet.active = false;
          this.trialButton.active = false;
          this.turbo.active = false;
          this.winAmount.active = false;
        };

        _proto.showUIMain = function showUIMain() {
          this.bet.active = true;
          this.wallet.active = true;
          this.jackpot.active = true;
          this.trialButton.active = true;
          this.turbo.active = true;
          this.winAmount.active = true;
          this.setOpacity(this.paylineInfo, 255);
          if (this.topUserList && !this.dataStore.isTrialMode) this.topUserList.active = true;
          if (this.questMgr) this.questMgr.getComponent('SlotQuestMgr').showIfAvailable();
        };

        _proto.onBackToMulti = function onBackToMulti() {
          this.node.dispatchEvent(new Event('BACK_TO_MULTI', true));
        };

        _proto.showUIFree = function showUIFree() {
          this.hideAllUI();
          this.setOpacity(this.paylineInfo, 255);
          this.turbo.active = true;
          this.winAmount.active = true;
          if (this.topUserList && !this.dataStore.isTrialMode) this.topUserList.active = true;
          if (this.questMgr) this.questMgr.getComponent('SlotQuestMgr').showIfAvailable();
        };

        _proto.showUITopUp = function showUITopUp() {
          this.hideAllUI();
          this.setOpacity(this.paylineInfo, 0);
          this.turbo.active = true;
          this.winAmount.active = true;
          if (this.topUserList) this.topUserList.active = false;
          if (this.questMgr) this.questMgr.active = false;
        };

        _proto.showUIBonus = function showUIBonus() {
          this.hideAllUI();
          this.setOpacity(this.paylineInfo, 0);
          this.winAmount.active = true;
          if (this.topUserList) this.topUserList.active = false;
          if (this.questMgr) this.questMgr.active = false;
        };

        _proto.updateBetInfoStatus = function updateBetInfoStatus(canShow) {};

        _proto.enableButtons = function enableButtons() {
          this.buttons.forEach(function (it) {
            it.interactable = true;
          });
        };

        _proto.onSettingClick = function onSettingClick() {
          this.showCutScene(SlotSceneType.Setting);
          this.soundPlayer && this.soundPlayer.playSFXClick();
        };

        _proto.onInfoClick = function onInfoClick() {
          if (!this.isTutorialShowing()) {
            this.showCutScene(SlotSceneType.GameInfo);
            this.soundPlayer && this.soundPlayer.playSFXClick();
          }
        };

        _proto.showJackpotHistory = function showJackpotHistory() {
          if (!this.isTutorialShowing()) {
            this.showCutScene(SlotSceneType.JackpotHistory);
            this.soundPlayer && this.soundPlayer.playSFXClick();
          }
        };

        _proto.showBetHistory = function showBetHistory() {
          this.showCutScene(SlotSceneType.BetHistory);
          this.soundPlayer && this.soundPlayer.playSFXClick();
        }
        /**@TopUI */
        ;

        _proto.disableTopButtons = function disableTopButtons() {
          this.topUI.emit('DISABLE_BUTTONS');
        };

        _proto.enableTopButtons = function enableTopButtons() {
          this.topUI.emit('ENABLE_BUTTONS');
        };
        /**@CutScenes */


        _proto.showCutScene = function showCutScene(type, content, callback) {
          var _this2 = this;

          if (content === void 0) {
            content = {};
          }

          if (callback === void 0) {
            callback = function callback() {};
          }

          var scene = this.getCutscene(type);

          if (!scene) {
            this.eventManager && this.eventManager.emit(EventNames.CREATE_ON_DEMAND_OBJECT, Number(type), function () {
              _this2.sceneComp.forEach(function (it) {
                var sceneType = it.getType();

                if (sceneType == type) {
                  log(_this2.config.GAME_ID + " add cutscene " + it.node.name);
                  it.node.emit('PLAY', content, callback);
                  it.node._uiProps.colorDirty = true;

                  _this2.sortCutScene(it.node);
                }
              });
            });
          } else {
            this.sceneComp.forEach(function (it) {
              if (it.getType() == type) {
                //it.node.setSiblingIndex(it.node.parent.children.length);
                it.node.emit('PLAY', content, callback);
                it.node._uiProps.colorDirty = true;
              }
            });
          }
        };

        _proto.sortCutScene = function sortCutScene(scene) {
          if (this.sceneHolder.children.length < 2) return;
          var currentSibIndex = this.sceneHolder.children.length;
          var targetIndex = scene['sibIndex'];
          var nextSib = currentSibIndex;

          for (var i = currentSibIndex - 1; i > 0; i--) {
            var index = this.sceneHolder.children[i]['sibIndex'] || 0;

            if (targetIndex < index) {
              nextSib = i;
            }
          }

          scene.setSiblingIndex(nextSib);
        };

        _proto.hideCutScene = function hideCutScene(type) {
          this.sceneComp.forEach(function (it) {
            if (it.getType() == type) {
              it.node.emit('HIDE');
            }
          });
        };

        _proto.isShowingCutScene = function isShowingCutScene(type) {
          var isShow = false;
          this.sceneComp.forEach(function (it) {
            if (it.getType() == type) {
              if (it.node.active) isShow = true;
            }
          });
          return isShow;
        };

        _proto.hideCutSceneWithCB = function hideCutSceneWithCB(type, callback) {
          if (callback === void 0) {
            callback = function callback() {};
          }

          this.sceneComp.forEach(function (it) {
            if (it.getType() == type) {
              it.node.emit('HIDE', function () {
                callback && callback();
              });
            }
          });
        };

        _proto.getCutscene = function getCutscene(type) {
          for (var i = 0; i < this.sceneComp.length; i++) {
            var _type = this.sceneComp[i].getType();

            if (_type == type) {
              return this.sceneComp[i];
            }
          }

          return null;
        }
        /**@Wallet */
        ;

        _proto.updateWallet = function updateWallet(wallets) {
          this.wallet.emit("UPDATE_WALLET", wallets);
        };

        _proto.enableSwitchWallet = function enableSwitchWallet(enable) {
          enable = enable && !this.dataStore.isTrialMode;
          this.wallet.emit('ENABLE_SWITCH', enable);
        };

        _proto.selectWallet = function selectWallet() {
          this.wallet.emit('LOAD_WALLET_SELECT');
        }
        /**@Dialog */
        ;

        _proto.showDialog = function showDialog(strText, actionOK, actionCancel, isForce) {
          if (actionOK === void 0) {
            actionOK = null;
          }

          if (actionCancel === void 0) {
            actionCancel = null;
          }

          if (isForce === void 0) {
            isForce = false;
          }

          if (!this.dialogMessage.active || isForce) this.dialogMessage.emit('PLAY', {
            strText: strText,
            actionOK: actionOK,
            actionCancel: actionCancel
          });
        };

        _proto.hideDialog = function hideDialog() {
          this.dialogMessage.active = false;
        };

        _proto.isDisplayDialog = function isDisplayDialog() {
          return this.dialogMessage.active;
        };

        _proto.isSpinVisible = function isSpinVisible() {
          var cutsceneDisplay = this.sceneComp.filter(function (it) {
            return it.node.active == true;
          }).length > 0;
          var isTutorial = !this.isTutorialFinished();
          var result = !cutsceneDisplay && !isTutorial && this.extraSpinCheck();
          return result;
        };

        _proto.isDisplayFullScreen = function isDisplayFullScreen() {
          return this.dataStore.isDisplayFullScreen;
        };

        _proto.extraSpinCheck = function extraSpinCheck() {
          return true;
        } // -------------- Jackpot -------------
        ;

        _proto.initJackpot = function initJackpot(data) {
          this.jackpot.emit("INIT_JACKPOT", data);
        };

        _proto.updateJackpot = function updateJackpot(data) {
          this.jackpot.emit("UPDATE_JACKPOT", data);
        };
        /**@Jackpot */


        _proto.updateValueJP = function updateValueJP(data) {
          var jpType = data.jpType,
              jpValue = data.jpValue;
          this.jackpot.emit('UPDATE_VALUE_JACKPOT', jpType, jpValue);
        };

        _proto.pauseJackpot = function pauseJackpot() {
          this.jackpot.emit('PAUSE_JACKPOT');
        };

        _proto.resumeJackpot = function resumeJackpot() {
          this.jackpot.emit('RESUME_JACKPOT');
        }
        /**@Bet */
        ;

        _proto.setBetId = function setBetId(betId) {
          this.bet.emit('SET_BET_ID', betId);
        };

        _proto.disableBet = function disableBet(forced) {
          if (forced === void 0) {
            forced = false;
          }

          if (this.isTutorialFinished() || forced) {
            this.bet.emit('DISABLE_BET');
          }
        };

        _proto.enableBet = function enableBet(forced) {
          if (forced === void 0) {
            forced = false;
          }

          if (this.isTutorialFinished() || forced) {
            this.bet.emit('ENABLE_BET');
          }
        };

        _proto.initBet = function initBet() {
          this.bet.emit('INIT_BET');
        }; //-------------- Tutorial ---------------

        /**@tutorial */


        _proto.checkPauseTutorial = function checkPauseTutorial(flag) {
          return this.isPauseTutorialFlag(flag) && this.dataStore.isTrialMode;
        };

        _proto.isPauseTutorialFlag = function isPauseTutorialFlag(flag) {
          return this.isTutorialShowing() && (this.tutorialMgr && this.tutorialMgr.isContainFlag(flag) || this.tutorialController && this.tutorialController.isContainFlag(flag));
        };

        _proto.isTutorialShowing = function isTutorialShowing() {
          if (this.tutorialMgr) {
            return this.tutorialMgr.isShowing();
          } else if (this.tutorialController) {
            return this.tutorialController.node.active && this.tutorialController.IsShowing;
          } else {
            return false;
          }
        };

        _proto.isTutorialFinished = function isTutorialFinished() {
          if (this.tutorialMgr) {
            return this.tutorialMgr.isFinished();
          } else if (this.tutorialController) {
            return this.tutorialController.node.active === false || this.tutorialController.IsFinished;
          } else {
            return true;
          }
        };

        _proto.enableTrialBtn = function enableTrialBtn(enable) {
          if (enable === void 0) {
            enable = false;
          }

          this.trialButton.emit("ENABLE_BUTTONS", enable);
        };

        _proto.onIngameEvent = function onIngameEvent(triggerType, evName) {
          if (evName === void 0) {
            evName = null;
          }

          if (this.dataStore.isTrialMode) {
            if (this.tutorialController && this.tutorialController.node.active) this.tutorialController.onTrigger(triggerType);
            if (evName && this.tutorialMgr) this.tutorialMgr.trigger(evName);
          }
        };

        _proto.onUpdateTrialData = function onUpdateTrialData(data) {
          if (data === void 0) {
            data = null;
          }

          if (this.tutorialMgr) this.tutorialMgr.onStateUpdate(data);
          if (this.tutorialController) this.tutorialController.onStateUpdate(data);
        };

        _proto.switchMode = function switchMode() {
          var isTrialMode = this.dataStore.isTrialMode;

          if (!isTrialMode) {
            this.dataStore.isTrialMode = true;
            this.mainDirector.gameStateManager.switchToTrial();
            this.switchToTrialMode();
            this.setOpacity(this.jackpot, 0);
          } else {
            this.dataStore.isTrialMode = false;
            this.mainDirector.gameStateManager.switchToReal();
            this.switchToRealMode();
            this.setOpacity(this.jackpot, 255);
          }

          this.dataStore.resumeCurrentWallet();
        };

        _proto.switchToTrialMode = function switchToTrialMode() {
          var _this$config = this.config,
              TRIAL_BET = _this$config.TRIAL_BET,
              TRIAL_EXTRA_BET = _this$config.TRIAL_EXTRA_BET,
              DEFAULT_TRIAL_WALLET = _this$config.DEFAULT_TRIAL_WALLET;

          if (this.tutorialMgr) {
            this.tutorialMgr.active = true;
            this.tutorialMgr.startTutorial();
          }

          this._lastWalletType = this.dataStore.getCurrentWalletType();
          this.dataStore.switchWallet(WalletType.TRIAL);
          this.dataStore.setCurrentWallet(DEFAULT_TRIAL_WALLET);
          this.dataStore.resumeWallet(WalletType.TRIAL);
          this.updateWallet(this.dataStore.getWallets());

          if (TRIAL_EXTRA_BET) {
            this._realExtraBetData = this.dataStore.betData.extraBetKey;
            this.bet.emit('UPDATE_EXTRA_BET', TRIAL_EXTRA_BET);
          }

          this._realBetData = this.dataStore.betData.betKey;
          this.bet.emit('UPDATE_BET', TRIAL_BET);
          this.turbo.emit('TURN_OFF');
          this.wallet.emit('SWITCH_TRIAL');

          if (this.eventManager) {
            this.eventManager.emit(EventNames.SWITCH_WALLET, WalletType.TRIAL);
          }

          this.mainDirector.gameModes[SlotGameMode.NormalGame].emit('SWITCH_MODE');

          if (this.tutorialController) {
            this.tutorialController.node.active = true;
            this.tutorialController.activeTutorial();
          }

          if (this.topUserList) this.topUserList.active = false;
        };

        _proto.switchToRealMode = function switchToRealMode() {
          if (this.tutorialMgr) {
            this.tutorialMgr.onTutorialFinish();
            this.tutorialMgr.playAnimSwitchToReal();
          }

          if (this.tutorialController) this.tutorialController.exitTrialMode();

          if (this._realExtraBetData) {
            this.bet.emit('UPDATE_EXTRA_BET', this._realExtraBetData);
          }

          this.bet.emit('UPDATE_BET', this._realBetData);
          this.dataStore.setWallet(WalletType.TRIAL, 0);
          this.dataStore.switchWallet(this._lastWalletType);

          if (this.eventManager) {
            this.eventManager.emit(EventNames.SWITCH_WALLET, this._lastWalletType);
          }

          this.wallet.emit('SWITCH_REAL');
          this.turbo.emit('LOAD_TURBO_CONFIG');
          this.updateWallet(this.dataStore.getWallets());
          this.mainDirector.gameModes[SlotGameMode.NormalGame].emit('SWITCH_MODE');
          if (this.topUserList) this.topUserList.active = true;
        }; //Toast


        _proto.showToast = function showToast(message) {
          this.toastInfo.emit('SHOW_TOAST_MESSAGE', message);
        } //winAmount
        ;

        _proto.getWinAmount = function getWinAmount() {
          return this.winAmount;
        };

        _proto.updateWinAmount = function updateWinAmount(winAmount, timeShow, callback) {
          if (callback === void 0) {
            callback = null;
          }

          this.winAmount.emit("UPDATE_WIN_AMOUNT", {
            value: winAmount,
            time: timeShow
          }, function () {
            callback && callback();
          });
        };

        _proto.fadeOutWinAmount = function fadeOutWinAmount() {
          this.winAmount.emit("FADE_OUT_NUMBER", this.dataStore.modeTurbo ? 0.4 : 0.8);
        };

        _proto.changeToLastWin = function changeToLastWin() {
          this.winAmount.emit("CHANGE_TO_LAST_WIN");
        };

        _proto.changeToWin = function changeToWin() {
          this.winAmount.emit("CHANGE_TO_WIN");
        };

        _proto.showPaylineInfo = function showPaylineInfo(info) {
          this.paylineInfo.emit('SHOW_PAYLINE', {
            line: info
          });
        };

        _proto.hidePaylineInfo = function hidePaylineInfo() {
          this.paylineInfo.emit('HIDE_PAYLINE');
        };

        _proto.skipAllUIScenes = function skipAllUIScenes() {
          for (var i = 0; i < this.sceneComp.length; i++) {
            var scene = this.sceneComp[i];

            if (scene && scene.node.active) {
              scene.node.emit("SKIP");
            }
          }
        } //Quest
        ;

        _proto.initQuest = function initQuest() {
          if (this.questMgr) {
            this.questMgr.emit('INIT_QUEST');
          }
        };

        _proto.forceUpdateQuest = function forceUpdateQuest() {
          if (this.questMgr) {
            this.questMgr.emit('FORCE_UPDATE_QUEST');
          }
        };

        _proto.activeQuest = function activeQuest(isActive) {
          if (this.questMgr) {
            if (isActive == false) this.questMgr.active = false;else this.questMgr.getComponent('SlotQuestMgr').showIfAvailable();
          }
        };

        _proto.refreshQuestUI = function refreshQuestUI() {
          log('UIManager refresh quest layout');

          if (this.questMgr) {
            this.questMgr.emit('REFRESH_LAYOUT');
          }

          this.questMgr.getComponent('SlotQuestMgr').showIfAvailable();
        };

        _proto.forceCloseEvent = function forceCloseEvent() {
          this.questMgr.getComponent('SlotQuestMgr').forceCloseEvent();
        };

        _proto.topUserUpdate = function topUserUpdate(userList, userOnline) {
          if (this.topUserList) {
            this.topUserList.emit('UPDATE_DATA', userList, userOnline);
          }
        };

        _proto.activeQuestProcess = function activeQuestProcess(isActive) {
          if (this.questProcessMgr) {
            this.questProcessMgr.active = isActive;
          }
        };

        _proto.setDoneQuest = function setDoneQuest() {
          this.questMgr.getComponent('SlotQuestMgr').setDoneCurrent();
        };

        _proto.finishEvent = function finishEvent(callback) {
          this.questMgr.getComponent('SlotQuestMgr').finishEvent(callback);
        };

        _proto.setQuestPosition = function setQuestPosition(parent) {
          if (!this.questMgr) return;

          if (parent) {
            this.questMgr.removeFromParent();
            this.questMgr.setParent(parent);
            this.questMgr.setPosition(v3(0, 0, 0));
            this.questMgr.getComponent('SlotQuestMgr').showIfAvailable();
          }
        };

        _proto.setWalletTypes = function setWalletTypes(types) {
          this.wallet.emit('UPDATE_WALLET_TYPE', types);
        };

        _proto.playAnimWinQuest = function playAnimWinQuest(callback) {
          var _this3 = this;

          log('UIManager playAnimWinQuest');
          this.questMgr.getComponent('SlotQuestMgr').showBoard();
          this.scheduleOnce(function () {
            var startPosition = _this3.questMgr.getComponent('SlotQuestMgr').getEffectPosition();

            if (_this3.animWinEvent) {
              _this3.animWinEvent.emit("PLAY_ANIMATION", startPosition, _this3.wallet, callback);
            } else {
              callback && callback();
            }
          }, 0.4);
        };

        _proto.stopAnimWinQuest = function stopAnimWinQuest() {
          if (this.animWinEvent) {
            this.animWinEvent.emit("RESET_ANIMATION");
          }
        };

        _proto.displayMultiScreenButton = function displayMultiScreenButton(isActive) {//if (this.multiScreenBtn) this.multiScreenBtn.active = isActive;
        } // notify win effect

        /*showBigWinEffect() {
            if (!this.dataStore.isTrialMode) {
                let updatedEvent:any = new Event('NOTIFY_OPEN_BIGWIN', true);
                this.node.dispatchEvent(updatedEvent);
            }
        };
         hideBigWinEffect() {
            if (!this.dataStore.isTrialMode) {
                let updatedEvent:any = new Event('NOTIFY_CLOSE_BIGWIN', true);
                this.node.dispatchEvent(updatedEvent);
            }
        };
         showJackpotEffect() {
            if (!this.dataStore.isTrialMode) {
                let updatedEvent:any = new Event('NOTIFY_OPEN_JACKPOT', true);
                this.node.dispatchEvent(updatedEvent);
            }
        };
         hideJackpotEffect() {
            if (!this.dataStore.isTrialMode) {
                let updatedEvent:any = new Event('NOTIFY_CLOSE_JACKPOT', true);
                this.node.dispatchEvent(updatedEvent);
            }
        };*/
        ;

        _proto.pauseTopPlayer = function pauseTopPlayer() {
          this.topUserList.getComponent("TopPlayers").pauseUpdate(true);
        };

        _proto.resumeTopPlayer = function resumeTopPlayer() {
          this.topUserList.getComponent("TopPlayers").pauseUpdate(false);
        };

        _proto.updateSoundSetting = function updateSoundSetting() {
          var setting = this.node.getComponentInChildren(Setting);

          if (setting) {
            setting.syncSetting();
          }
        };

        return UIManager;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "dialogMessage", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "controllerHolder", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "sceneHolder", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "bet", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "wallet", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "jackpot", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "trialButton", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "turbo", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "tutorialMgr", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "tutorialController", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "winAmount", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "paylineInfo", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "toastInfo", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "topUI", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "questMgr", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "questProcessMgr", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "animWinEvent", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "topUserList", [_dec19], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "promoteWallet", [_dec20], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "multiScreenBtn", [_dec21], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UpdatePanel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, ProgressBar, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      ProgressBar = module.ProgressBar;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "d896fFhBk9A57gLMvEj3KZ7", "UpdatePanel", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var UpdatePanel = exports('UpdatePanel', (_dec = ccclass('UpdatePanel'), _dec2 = property(Label), _dec3 = property(ProgressBar), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(UpdatePanel, _Component);

        function UpdatePanel() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "info", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "byteProgress", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        return UpdatePanel;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "info", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "byteProgress", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/utils.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, Vec3, UITransform, error, UIRenderer, tween, UIOpacity, Color, bezier, director, v3, sys, log, assetManager, Texture2D, SpriteFrame, Sprite, isValid, Node, SpriteAtlas, warn;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Vec3 = module.Vec3;
      UITransform = module.UITransform;
      error = module.error;
      UIRenderer = module.UIRenderer;
      tween = module.tween;
      UIOpacity = module.UIOpacity;
      Color = module.Color;
      bezier = module.bezier;
      director = module.director;
      v3 = module.v3;
      sys = module.sys;
      log = module.log;
      assetManager = module.assetManager;
      Texture2D = module.Texture2D;
      SpriteFrame = module.SpriteFrame;
      Sprite = module.Sprite;
      isValid = module.isValid;
      Node = module.Node;
      SpriteAtlas = module.SpriteAtlas;
      warn = module.warn;
    }],
    execute: function () {
      exports({
        MD5: MD5,
        addZero: addZero,
        changeParent: changeParent,
        convertAssetArrayToObject: convertAssetArrayToObject,
        convertPayLine: convertPayLine,
        convertPayLineAllways: convertPayLineAllways,
        customDateFormat: customDateFormat,
        fadeIn: fadeIn,
        fadeOut: fadeOut,
        fadeTo: fadeTo,
        findKeyByValue: findKeyByValue,
        formatMoney: formatMoney,
        formatUserName: formatUserName,
        formatWalletMoney: formatWalletMoney,
        getAngleTwoPoint: getAngleTwoPoint,
        getAnimationsName: getAnimationsName,
        getDistance: getDistance,
        getFBAvatar: getFBAvatar,
        getLeftTime: getLeftTime,
        getOpacity: getOpacity,
        getPostionInOtherNode: getPostionInOtherNode,
        getRandomElement: getRandomElement,
        getRandomInt: getRandomInt,
        getText: getText,
        getTime: getTime,
        loadAvatarFacebook: loadAvatarFacebook,
        mapObjectKey: mapObjectKey,
        pickOutRandomElement: pickOutRandomElement,
        randRange: randRange,
        registerLoadHowl: registerLoadHowl,
        removeDuplicates: removeDuplicates,
        removeElementByValue: removeElementByValue,
        replaceElement: replaceElement,
        roundDecimal: roundDecimal,
        secondsToHHMMSS: secondsToHHMMSS,
        setIndexZ: setIndexZ,
        setLayerAlls: setLayerAlls,
        setLayerForAllChildrens: setLayerForAllChildrens,
        setMixAllAnims: setMixAllAnims,
        setOpacity: setOpacity,
        setRenderColor: setRenderColor,
        shaking: shaking,
        shuffleArray: shuffleArray,
        startGameFromEvent: startGameFromEvent,
        toFixed: toFixed,
        toLocalClockTime: toLocalClockTime,
        toLocalTime: toLocalTime,
        toLocalTimeHHMM: toLocalTimeHHMM,
        tweenBezier2DTo: tweenBezier2DTo,
        tweenMoney: tweenMoney,
        tweenMoney2: tweenMoney2,
        tweenWalletMoney: tweenWalletMoney,
        unregisterLoadHowl: unregisterLoadHowl,
        updateUtilConfig: updateUtilConfig
      });

      cclegacy._RF.push({}, "61e2aeL1yJB6r+n4NcvBChY", "utils", undefined);

      var lodash = globalThis._;
      var UTIL_CONFIG = exports('UTIL_CONFIG', {
        FORMAT_MONEY_EVENT: false
      });

      function updateUtilConfig(key, value) {
        if (UTIL_CONFIG.hasOwnProperty(key)) {
          UTIL_CONFIG[key] = value;
        }
      }

      function findKeyByValue(object, value) {
        return Object.keys(object).find(function (key) {
          return object[key] == value;
        });
      }

      function customDateFormat(date, formatString) {
        var YYYY, YY, MMMM, MMM, MM, M, DDDD, DDD, DD, D, hhhh, hhh, hh, h, mm, m, ss, s, ampm, AMPM, dMod, th;
        YY = ((YYYY = date.getFullYear()) + "").slice(-2);
        MM = (M = date.getMonth() + 1) < 10 ? '0' + M : M;
        MMM = (MMMM = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"][M - 1]).substring(0, 3);
        DD = (D = date.getDate()) < 10 ? '0' + D : D;
        DDD = (DDDD = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"][date.getDay()]).substring(0, 3);
        th = D >= 10 && D <= 20 ? 'th' : (dMod = D % 10) == 1 ? 'st' : dMod == 2 ? 'nd' : dMod == 3 ? 'rd' : 'th';
        formatString = formatString.replace("#YYYY#", YYYY).replace("#YY#", YY).replace("#MMMM#", MMMM).replace("#MMM#", MMM).replace("#MM#", MM).replace("#M#", M).replace("#DDDD#", DDDD).replace("#DDD#", DDD).replace("#DD#", DD).replace("#D#", D).replace("#th#", th);
        h = hhh = date.getHours();
        if (h == 0) h = 24;
        if (h > 12) h -= 12;
        hh = h < 10 ? '0' + h : h;
        hhhh = hhh < 10 ? '0' + hhh : hhh;
        AMPM = (ampm = hhh < 12 ? 'am' : 'pm').toUpperCase();
        mm = (m = date.getMinutes()) < 10 ? '0' + m : m;
        ss = (s = date.getSeconds()) < 10 ? '0' + s : s;
        return formatString.replace("#hhhh#", hhhh).replace("#hhh#", hhh).replace("#hh#", hh).replace("#h#", h).replace("#mm#", mm).replace("#m#", m).replace("#ss#", ss).replace("#s#", s).replace("#ampm#", ampm).replace("#AMPM#", AMPM);
      }

      function toLocalTimeHHMM(ts) {
        var timestamp = new Date(parseInt(ts));
        var hour = timestamp.getHours();
        var minutes = timestamp.getMinutes();
        var localTime = (hour < 10 ? "0" : "") + hour + "h" + (minutes < 10 ? "0" : "") + minutes;
        return localTime;
      }

      function toLocalClockTime(ts) {
        var timestamp = new Date(parseInt(ts));
        var hour = timestamp.getHours();
        var minutes = timestamp.getMinutes();
        var localTime = hour + "h" + (minutes < 10 ? "0" : "") + minutes;
        return localTime;
      }

      function formatUserName(userName) {
        return userName.trim();
      }

      function secondsToHHMMSS(secs) {
        if (secs == 0) return "00:00";
        var sec_num = parseInt(secs, 10);
        var hours = Math.floor(sec_num / 3600);
        var minutes = Math.floor(sec_num / 60) % 60;
        var seconds = sec_num % 60;
        return [hours, minutes, seconds].map(function (v) {
          return v < 10 ? "0" + v : v;
        }).filter(function (v, i) {
          return v !== "00" || i > 0;
        }).join(":");
      }

      function toLocalTime(ts, format) {
        return customDateFormat(new Date(ts * 1000), format);
      }

      function randRange(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
      }

      function toFixed(num, fixed) {
        var re = new RegExp('^-?\\d+(?:\.\\d{0,' + (fixed || -1) + '})?'); // eslint-disable-line

        var result = num.toString().match(re)[0];
        return result;
      }

      function getPostionInOtherNode(spaceNode, targetNode) {
        if (targetNode.parent == null) {
          return null;
        }

        var pos = new Vec3(0, 0, 0);
        var targetNodeComponent = targetNode.parent.getComponent(UITransform);
        var spaceNodeComponent = spaceNode.getComponent(UITransform);

        if (!targetNodeComponent) {
          targetNode.parent.addComponent(UITransform);
        }

        if (!spaceNodeComponent) {
          spaceNode.addComponent(UITransform);
        }

        pos = targetNodeComponent.convertToWorldSpaceAR(targetNode.getPosition());
        return spaceNodeComponent ? spaceNodeComponent.convertToNodeSpaceAR(pos) : pos;
      }

      function getSpriteNameFromAtlas(uuid) {
        var mainUUID = uuid.split('@')[0];
        var mainAsset = assetManager.assets['_map'][mainUUID];

        if (mainAsset) {
          var keys = Object.keys(mainAsset.spriteFrames);

          for (var i = 0; i < keys.length; i++) {
            if (mainAsset.spriteFrames[keys[i]]._uuid == uuid) {
              return keys[i];
            }
          }
        }

        return '';
      }

      function isSpriteFrameFromAtlas(uuid) {
        var mainUUID = uuid.split('@')[0];
        var mainAsset = assetManager.assets['_map'][mainUUID];

        if (mainAsset && mainAsset instanceof SpriteAtlas) {
          return true;
        }

        return false;
      }

      function convertAssetArrayToObject(arr) {
        var obj = {};

        for (var i = 0; i < arr.length; i++) {
          if (arr[i]._name == "" && arr[i].data) {
            arr[i]._name = arr[i].data._name;
          }

          if (arr[i]) {
            var uuid = arr[i]._uuid ? arr[i]._uuid : arr[i].uuid;
            var name = uuid && isSpriteFrameFromAtlas(uuid) ? getSpriteNameFromAtlas(uuid) : arr[i]._name;
            obj[name] = arr[i];
          }
        }

        return obj;
      }

      function getAnimationsName(spine) {
        return Object.keys(spine.skeletonData._skeletonJson.animations);
      }
      /**
       * ! just using for the spine have a few animations
       */


      function setMixAllAnims(spine, mixTime) {
        if (mixTime === void 0) {
          mixTime = 0.15;
        }

        var animNames = getAnimationsName(spine);

        if (animNames.length < 2) {
          error("spine have to have many animations");
          return;
        }

        for (var i = 0; i < animNames.length; i++) {
          for (var j = 0; j < animNames.length; j++) {
            spine.setMix(animNames[i], animNames[j], mixTime);
          }
        }
      }

      function convertPayLineAllways(payLines, multiplier, betDenom) {
        if (payLines === void 0) {
          payLines = [];
        }

        if (multiplier === void 0) {
          multiplier = 1;
        }

        var listNewPL = [];

        for (var i = 0; i < payLines.length; i++) {
          if (payLines[i].includes(';')) {
            var dataSplit = payLines[i].split(';');

            if (dataSplit.length !== 0) {
              listNewPL.push({
                symbolId: dataSplit[0],
                totalWinAmount: dataSplit[1],
                symbolCount: dataSplit[2],
                combination: dataSplit[3],
                payableSymbol: dataSplit[4],
                betDenom: betDenom,
                multiplier: multiplier
              });
            } else {
              error("payLines is not right AKTV formatted");
            }
          }
        }

        return listNewPL;
      }

      function convertPayLine(payLines) {
        var listNewPL = [];

        for (var i = 0; i < payLines.length; i++) {
          var dataSplit = payLines[i].split(';');

          if (dataSplit.length >= 3) {
            listNewPL.push({
              payLineID: dataSplit[0],
              payLineWinNumbers: parseInt(dataSplit[1]),
              payLineWinAmount: dataSplit[2],
              payLineSymbol: dataSplit[3]
            });
          }
        }

        return listNewPL;
      }

      function formatWalletMoney(num, digits) {
        if (digits === void 0) {
          digits = 2;
        }

        if (isNaN(parseFloat(num))) return "0";
        var si = [{
          value: 1,
          symbol: ""
        }, {
          value: 1E3,
          symbol: "K"
        }, {
          value: 1E6,
          symbol: "M"
        }, {
          value: 1E9,
          symbol: "B"
        }, {
          value: 1E12,
          symbol: "T"
        }, {
          value: 1E15,
          symbol: "P"
        }, {
          value: 1E18,
          symbol: "E"
        }];
        var rx = /\.0+$|(\.[0-9]*[1-9])0+$/;
        var i;

        for (i = si.length - 1; i > 0; i--) {
          if (num >= si[i].value) {
            break;
          }
        }

        var result = toFixed(num / si[i].value, digits);

        if (UTIL_CONFIG.FORMAT_MONEY_EVENT) {
          result = result.replace('.', ',');
        }

        return result.replace(rx, "$1") + si[i].symbol;
      }

      function formatMoney(amount, decimalCount, decimal, thousands) {
        if (decimalCount === void 0) {
          decimalCount = 0;
        }

        if (decimal === void 0) {
          decimal = ".";
        }

        if (thousands === void 0) {
          thousands = ",";
        }

        if (UTIL_CONFIG.FORMAT_MONEY_EVENT) {
          decimal = ",";
          thousands = ".";
        }

        try {
          decimalCount = Math.abs(decimalCount);
          decimalCount = isNaN(decimalCount) ? 2 : decimalCount;
          var negativeSign = amount < 0 ? "-" : "";
          var i = parseInt(amount = Math.abs(Number(amount) || 0).toFixed(decimalCount)).toString();
          var j = i.length > 3 ? i.length % 3 : 0;
          return negativeSign + (j ? i.substr(0, j) + thousands : '') + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + thousands) + (decimalCount ? decimal + Math.abs(amount - i).toFixed(decimalCount).slice(2) : "");
        } catch (e) {
          error(e);
        }

        return "0";
      }

      function changeParent(node, newParent) {
        if (node.parent === newParent) return;

        var getWorldRotation = function getWorldRotation(node) {
          var currNode = node;
          var resultRot = currNode.angle || 0;

          do {
            currNode = currNode.parent;
            resultRot += currNode.angle || 0;
          } while (currNode.parent != null);

          resultRot = resultRot % 360;
          return resultRot;
        };

        var oldWorRot = getWorldRotation(node);
        var newParentWorRot = getWorldRotation(newParent);
        var newLocRot = oldWorRot - newParentWorRot;

        if (!node.getComponent(UITransform)) {
          node.addComponent(UITransform);
        }

        if (!newParent.getComponent(UITransform)) {
          newParent.addComponent(UITransform);
        }

        var oldWorPos = node.getComponent(UITransform).convertToWorldSpaceAR(new Vec3(0, 0, 0));
        var newLocPos = newParent.getComponent(UITransform).convertToNodeSpaceAR(oldWorPos);
        node.parent = newParent;
        node.position = newLocPos;
        node.angle = newLocRot;
      }

      function getRandomInt(min, max) {
        min = Math.ceil(min);
        max = Math.floor(max);
        return Math.floor(Math.random() * (max - min + 1)) + min;
      }

      function roundDecimal(num, numDecimal) {
        var rate = 1;

        for (var i = 0; i < numDecimal; i++) {
          rate *= 10;
        }

        return Math.round((num + Number.EPSILON) * rate) / rate;
      }

      function shuffleArray(array) {
        for (var i = array.length - 1; i > 0; i--) {
          var j = Math.floor(Math.random() * (i + 1));
          var temp = array[i];
          array[i] = array[j];
          array[j] = temp;
        }

        return array;
      }

      function getRandomElement(array) {
        if (!array || array.length <= 0) throw new Error("invalid array");
        return array[Math.floor(Math.random() * array.length)];
      }

      function pickOutRandomElement(array) {
        if (!array || array.length <= 0) throw new Error("invalid array");
        var randomIndex = Math.floor(Math.random() * array.length);
        return array.splice(randomIndex, 1)[0];
      }

      function removeElementByValue(array, value) {
        array.splice(array.indexOf(value), 1);
        return array;
      }

      function replaceElement(array, oldElement, newElement) {
        var index = array.indexOf(oldElement);
        if (index > -1) array[index] = newElement;
        return array;
      }

      function getText(text, length) {
        if (text === void 0) {
          text = '';
        }

        if (length === void 0) {
          length = 0;
        }

        var result = text;
        var n = length - text.length;

        if (n) {
          for (var i = 0; i < n; i++) {
            result += ' ';
          }
        }

        return result;
      }

      function getLeftTime(endTime, serverTime, millisecond) {
        if (millisecond === void 0) {
          millisecond = 1000;
        }

        serverTime = serverTime ? new Date(serverTime).getTime() : new Date().getTime();
        var time = Math.floor((new Date(endTime).getTime() - serverTime) / millisecond);
        if (time < 0) time = 0;
        return time;
      }

      function addZero(i) {
        if (i < 10) {
          i = '0' + i;
        }

        return i;
      }

      function getTime() {
        var d = new Date();
        var h = addZero(d.getHours());
        var m = addZero(d.getMinutes());
        var s = addZero(d.getSeconds());
        var t = h + ':' + m + ':' + s;
        return t;
      }

      function mapObjectKey(obj, keysMap) {
        return lodash.transform(obj, function (result, value, key) {
          var currentKey = key;

          if (keysMap[key]) {
            currentKey = keysMap[key].name;
            if (keysMap[key].type == Boolean) value = value == 'T';
          }

          if (lodash.isObject(value)) {
            result[currentKey] = mapObjectKey(value, keysMap);
          } else {
            result[currentKey] = value;
          }
        });
      }

      function fadeTo(target, duration, opacity, options) {
        var render2D = target.getComponent(UIRenderer);
        options = options || {};

        if (target['tweenFade']) {
          target['tweenFade'].stop();
          target['tweenFade'] = null;
        }

        var tweenFade = null;

        if (render2D) {
          var obj = {
            alpha: render2D.color.a
          };

          options.onUpdate = function () {
            if (render2D && render2D.color) {
              setRenderColor(render2D, obj.alpha);
            }
          };

          tweenFade = tween(obj).to(duration, {
            alpha: opacity
          }, options).call(function () {
            if (target) {
              target['tweenFade'] = null;
            }
          }).start();
          target['tweenFade'] = tweenFade;
        } else {
          var uiOpacity = target.getComponent(UIOpacity);

          if (uiOpacity === null) {
            uiOpacity = target.addComponent(UIOpacity);
          }

          tweenFade = tween(uiOpacity);
          target['tweenFade'] = tweenFade;
          tweenFade.to(duration, {
            opacity: opacity
          }, options).call(function () {
            target['tweenFade'] = null;
          }).start();
        }

        return tweenFade;
      }

      function fadeIn(target, duration, options) {
        return fadeTo(target, duration, 255, options);
      }

      function fadeOut(target, duration, options) {
        return fadeTo(target, duration, 0, options);
      }

      function getOpacity(node) {
        var uiOpacity = node.getComponent(UIOpacity);
        if (uiOpacity === null) uiOpacity = node.addComponent(UIOpacity);
        return uiOpacity.opacity;
      }

      function setOpacity(node, opacity) {
        var render2D = node.getComponent(UIRenderer);
        var uiOpacity = node.getComponent(UIOpacity);

        if (render2D) {
          if (uiOpacity) {
            uiOpacity.opacity = 255;
          }

          setRenderColor(render2D, opacity);
        } else {
          if (uiOpacity === null) {
            uiOpacity = node.addComponent(UIOpacity);
          }

          uiOpacity.opacity = opacity;
        }
      }

      function setRenderColor(render, alpha) {
        var color = Color.clone(render.color);
        color.a = alpha;
        render.color = color;
      }

      function tweenMoney(label, duration, endValue, options) {
        if (label["_tweenMoney"]) label["_tweenMoney"].stop(); // stop if on tween;

        var currentVal = parseInt(label.string.replace(/[,.]/g, "")) || 0;
        var _target = {
          value: currentVal
        };
        options = options || {};

        options.onUpdate = function () {
          label.string = formatMoney(Math.round(_target.value));
        };

        var tweenMoney = tween(_target).to(duration, {
          value: endValue
        }, options).call(function () {
          label.string = formatMoney(endValue);
          label["_tweenMoney"] = null;
        }).start();
        label["_tweenMoney"] = tweenMoney;
        return tweenMoney;
      } //for slot event only


      function tweenMoney2(label, duration, endValue, options) {
        if (label["_tweenMoney"]) label["_tweenMoney"].stop(); // stop if on tween;

        var currentVal = parseInt(label.string.replace(/[,.]/g, "")) || 0;
        var _target = {
          value: currentVal
        };
        options = options || {};

        options.onUpdate = function () {
          label.string = formatMoney(Math.round(_target.value), 0, ',', '.');
        };

        var tweenMoney = tween(_target).to(duration, {
          value: endValue
        }, options).call(function () {
          label.string = formatMoney(endValue, 0, ',', '.');
          label["_tweenMoney"] = null;
        }).start();
        label["_tweenMoney"] = tweenMoney;
        return tweenMoney;
      }

      function tweenWalletMoney(label, duration, startValue, endValue, options) {
        if (label["tweenWalletMoney"]) label["tweenWalletMoney"].stop(); // stop if on tween;

        var currentVal = startValue || 0;
        var _target = {
          value: currentVal
        };
        options = options || {};

        options.onUpdate = function () {
          label.string = formatWalletMoney(Math.round(_target.value));
        };

        var tweenWalletMoney = tween(_target).to(duration, {
          value: endValue
        }, options).call(function () {
          label.string = formatWalletMoney(endValue);
          label["tweenWalletMoney"] = null;
        }).start();
        label["tweenWalletMoney"] = tweenWalletMoney;
        return tweenWalletMoney;
      }

      function tweenBezier2DTo(target, duration, c1, c2, to, opts) {
        if (target['bezierX']) target['bezierX'].stop();
        if (target['bezierY']) target['bezierY'].stop();
        var c0x = c1.x,
            c0y = c1.y,
            c1x = c2.x,
            c1y = c2.y;
        var _targetX = {
          value: target.getPosition().x
        };
        var _targetY = {
          value: target.getPosition().y
        };
        var aOpts = opts || Object.create(null);

        aOpts.progress = function (startX, endX, currentX, t) {
          currentX = bezier(startX, c0x, c1x, endX, t);
          return currentX;
        };

        aOpts.onUpdate = function () {
          if (target && target.position) {
            target.setPosition(new Vec3(_targetX.value, target.position.y, target.position.z));
          }
        };

        var bOpts = opts || Object.create(null);

        bOpts.progress = function (startY, endY, currentY, t) {
          currentY = bezier(startY, c0y, c1y, endY, t);
          return currentY;
        };

        bOpts.onUpdate = function () {
          if (target && target.position) {
            target.setPosition(new Vec3(target.position.x, _targetY.value, target.position.z));
          }
        };

        target['bezierX'] = tween(_targetX).to(duration, {
          value: to.x
        }, aOpts).call(function () {
          target['bezierX'] = null;
        }).start();
        target['bezierY'] = tween(_targetY).to(duration, {
          value: to.y
        }, bOpts).call(function () {
          target['bezierY'] = null;
        }).start();
      }

      function startGameFromEvent(gameId) {
        director.loadScene("MultiSlot", function () {
          var multiSlotComp = director.getScene().getChildByName('Canvas').getChildByName('MultiSlot');

          if (multiSlotComp) {
            var config = {
              gameId: gameId,
              startScene: "g" + gameId
            };
            multiSlotComp.emit('RQ_PLAY_FROM_EVENT', {
              config: config
            });
          }
        });
      }

      function removeDuplicates(array) {
        return array.filter(function (item, index) {
          return array.indexOf(item) === index;
        });
      }
      /**
       * @returns degree angle
      */


      function getAngleTwoPoint(p1, p2) {
        return Math.atan2(p2.y - p1.y, p2.x - p1.x) * 180 / Math.PI;
      }

      function getDistance(p1, p2) {
        return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));
      }

      function shaking(node, _ref) {
        var _ref$duration = _ref.duration,
            duration = _ref$duration === void 0 ? 0.16 : _ref$duration,
            _ref$distance = _ref.distance,
            distance = _ref$distance === void 0 ? 10 : _ref$distance,
            _ref$repeat = _ref.repeat,
            repeat = _ref$repeat === void 0 ? 1 : _ref$repeat;
        var dur = duration / 8;
        var shake = tween().by(dur, {
          position: v3(0, distance)
        }).by(dur, {
          position: v3(0, -distance)
        }).by(dur, {
          position: v3(0, -distance)
        }).by(dur, {
          position: v3(0, distance)
        }).by(dur, {
          position: v3(distance, 0)
        }).by(dur, {
          position: v3(-distance, 0)
        }).by(dur, {
          position: v3(-distance, 0)
        }).by(dur, {
          position: v3(distance, 0)
        });
        var tweenShake = tween(node).repeat(repeat, shake).start();
        return tweenShake;
      }

      function MD5(e) {
        function h(a, b) {
          var c, d, e, f, g;
          e = a & 2147483648;
          f = b & 2147483648;
          c = a & 1073741824;
          d = b & 1073741824;
          g = (a & 1073741823) + (b & 1073741823);
          return c & d ? g ^ 2147483648 ^ e ^ f : c | d ? g & 1073741824 ? g ^ 3221225472 ^ e ^ f : g ^ 1073741824 ^ e ^ f : g ^ e ^ f;
        }

        function k(a, b, c, d, e, f, g) {
          a = h(a, h(h(b & c | ~b & d, e), g));
          return h(a << f | a >>> 32 - f, b);
        }

        function l(a, b, c, d, e, f, g) {
          a = h(a, h(h(b & d | c & ~d, e), g));
          return h(a << f | a >>> 32 - f, b);
        }

        function m(a, b, d, c, e, f, g) {
          a = h(a, h(h(b ^ d ^ c, e), g));
          return h(a << f | a >>> 32 - f, b);
        }

        function n(a, b, d, c, e, f, g) {
          a = h(a, h(h(d ^ (b | ~c), e), g));
          return h(a << f | a >>> 32 - f, b);
        }

        function p(a) {
          var b = "",
              d = "",
              c;

          for (c = 0; 3 >= c; c++) {
            d = (a >>> 8 * c & 255).toString(), d = "0" + parseInt(d).toString(16), b += d.substr(d.length - 2, 2);
          }

          return b;
        }

        var f = [],
            q,
            r,
            s,
            t,
            a,
            b,
            c,
            d;

        e = function (a) {
          a = a.replace(/\r\n/g, "\n");

          for (var b = "", d = 0; d < a.length; d++) {
            var c = a.charCodeAt(d);
            128 > c ? b += String.fromCharCode(c) : (127 < c && 2048 > c ? b += String.fromCharCode(c >> 6 | 192) : (b += String.fromCharCode(c >> 12 | 224), b += String.fromCharCode(c >> 6 & 63 | 128)), b += String.fromCharCode(c & 63 | 128));
          }

          return b;
        }(e);

        f = function (b) {
          var a,
              c = b.length;
          a = c + 8;

          for (var d = 16 * ((a - a % 64) / 64 + 1), e = Array(d - 1), f = 0, g = 0; g < c;) {
            a = (g - g % 4) / 4, f = g % 4 * 8, e[a] |= b.charCodeAt(g) << f, g++;
          }

          a = (g - g % 4) / 4;
          e[a] |= 128 << g % 4 * 8;
          e[d - 2] = c << 3;
          e[d - 1] = c >>> 29;
          return e;
        }(e);

        a = 1732584193;
        b = 4023233417;
        c = 2562383102;
        d = 271733878;

        for (e = 0; e < f.length; e += 16) {
          q = a, r = b, s = c, t = d, a = k(a, b, c, d, f[e + 0], 7, 3614090360), d = k(d, a, b, c, f[e + 1], 12, 3905402710), c = k(c, d, a, b, f[e + 2], 17, 606105819), b = k(b, c, d, a, f[e + 3], 22, 3250441966), a = k(a, b, c, d, f[e + 4], 7, 4118548399), d = k(d, a, b, c, f[e + 5], 12, 1200080426), c = k(c, d, a, b, f[e + 6], 17, 2821735955), b = k(b, c, d, a, f[e + 7], 22, 4249261313), a = k(a, b, c, d, f[e + 8], 7, 1770035416), d = k(d, a, b, c, f[e + 9], 12, 2336552879), c = k(c, d, a, b, f[e + 10], 17, 4294925233), b = k(b, c, d, a, f[e + 11], 22, 2304563134), a = k(a, b, c, d, f[e + 12], 7, 1804603682), d = k(d, a, b, c, f[e + 13], 12, 4254626195), c = k(c, d, a, b, f[e + 14], 17, 2792965006), b = k(b, c, d, a, f[e + 15], 22, 1236535329), a = l(a, b, c, d, f[e + 1], 5, 4129170786), d = l(d, a, b, c, f[e + 6], 9, 3225465664), c = l(c, d, a, b, f[e + 11], 14, 643717713), b = l(b, c, d, a, f[e + 0], 20, 3921069994), a = l(a, b, c, d, f[e + 5], 5, 3593408605), d = l(d, a, b, c, f[e + 10], 9, 38016083), c = l(c, d, a, b, f[e + 15], 14, 3634488961), b = l(b, c, d, a, f[e + 4], 20, 3889429448), a = l(a, b, c, d, f[e + 9], 5, 568446438), d = l(d, a, b, c, f[e + 14], 9, 3275163606), c = l(c, d, a, b, f[e + 3], 14, 4107603335), b = l(b, c, d, a, f[e + 8], 20, 1163531501), a = l(a, b, c, d, f[e + 13], 5, 2850285829), d = l(d, a, b, c, f[e + 2], 9, 4243563512), c = l(c, d, a, b, f[e + 7], 14, 1735328473), b = l(b, c, d, a, f[e + 12], 20, 2368359562), a = m(a, b, c, d, f[e + 5], 4, 4294588738), d = m(d, a, b, c, f[e + 8], 11, 2272392833), c = m(c, d, a, b, f[e + 11], 16, 1839030562), b = m(b, c, d, a, f[e + 14], 23, 4259657740), a = m(a, b, c, d, f[e + 1], 4, 2763975236), d = m(d, a, b, c, f[e + 4], 11, 1272893353), c = m(c, d, a, b, f[e + 7], 16, 4139469664), b = m(b, c, d, a, f[e + 10], 23, 3200236656), a = m(a, b, c, d, f[e + 13], 4, 681279174), d = m(d, a, b, c, f[e + 0], 11, 3936430074), c = m(c, d, a, b, f[e + 3], 16, 3572445317), b = m(b, c, d, a, f[e + 6], 23, 76029189), a = m(a, b, c, d, f[e + 9], 4, 3654602809), d = m(d, a, b, c, f[e + 12], 11, 3873151461), c = m(c, d, a, b, f[e + 15], 16, 530742520), b = m(b, c, d, a, f[e + 2], 23, 3299628645), a = n(a, b, c, d, f[e + 0], 6, 4096336452), d = n(d, a, b, c, f[e + 7], 10, 1126891415), c = n(c, d, a, b, f[e + 14], 15, 2878612391), b = n(b, c, d, a, f[e + 5], 21, 4237533241), a = n(a, b, c, d, f[e + 12], 6, 1700485571), d = n(d, a, b, c, f[e + 3], 10, 2399980690), c = n(c, d, a, b, f[e + 10], 15, 4293915773), b = n(b, c, d, a, f[e + 1], 21, 2240044497), a = n(a, b, c, d, f[e + 8], 6, 1873313359), d = n(d, a, b, c, f[e + 15], 10, 4264355552), c = n(c, d, a, b, f[e + 6], 15, 2734768916), b = n(b, c, d, a, f[e + 13], 21, 1309151649), a = n(a, b, c, d, f[e + 4], 6, 4149444226), d = n(d, a, b, c, f[e + 11], 10, 3174756917), c = n(c, d, a, b, f[e + 2], 15, 718787259), b = n(b, c, d, a, f[e + 9], 21, 3951481745), a = h(a, q), b = h(b, r), c = h(c, s), d = h(d, t);
        }

        return (p(a) + p(b) + p(c) + p(d)).toLowerCase();
      }

      function getFBAvatar(url, spriteA, defaultAvatar, AvatarAtlas) {
        var dirpath = jsb.fileUtils.getWritablePath() + 'avaImg/';
        var filepath = dirpath + MD5(url) + '.png';

        function loadEnd() {
          assetManager.loadAny({
            url: filepath
          }, function (err, tex) {
            if (err) {
              warn(err);
              spriteA.spriteFrame = defaultAvatar;
            } else {
              var spriteFrame = new SpriteFrame();
              spriteFrame.texture = tex;

              if (spriteFrame) {
                spriteA.spriteFrame = spriteFrame;
              }
            }
          });
        }

        if (sys.os === sys.OS_ANDROID && sys.isNative) {
          if (jsb.fileUtils.isFileExist(filepath)) {
            //remove old file
            jsb.fileUtils.removeFile(filepath);
          }
        }

        var saveFile = function saveFile(data) {
          if (typeof data !== 'undefined') {
            if (!jsb.fileUtils.isDirectoryExist(dirpath)) {
              jsb.fileUtils.createDirectory(dirpath);
            }

            if (jsb.fileUtils.writeValueMapToFile(new Uint8Array(data), filepath)) {
              warn('Remote write file succeed.');
              loadEnd();
            } else {
              spriteA.spriteFrame = defaultAvatar;
              warn('Remote write file failed.');
            }
          } else {
            spriteA.spriteFrame = defaultAvatar;
            warn('Remote download file failed.');
          }
        };

        if (sys.os === sys.OS_IOS && sys.isNative) {
          if (url.indexOf("facebook") !== -1) {
            if (jsb.fileUtils.isFileExist(filepath)) {
              loadEnd();
            }

            var xhr = new XMLHttpRequest();
            xhr.responseType = 'arraybuffer';

            xhr.onreadystatechange = function () {
              log("xhr.readyState  " + xhr.readyState);
              log("xhr.status  " + xhr.status);

              if (xhr.readyState === 4) {
                if (xhr.status === 200) {
                  saveFile(xhr.response);
                }
              }
            }.bind(this);

            xhr.open("GET", url, true);
            xhr.send();
          } else {
            var spFrame = defaultAvatar;

            if (url) {
              var filename = url.substring(url.lastIndexOf('/') + 1);

              if (filename.match(/avatar_[0-9][0-9].png/)) {
                var num = filename.substring(7, 8);
                var spInt = parseInt(num);

                if (spInt >= 0 && spInt <= 32) {
                  spFrame = filename.split('.')[0];
                } else {
                  spFrame = defaultAvatar;
                }
              } else {
                spFrame = defaultAvatar;
              }
            }

            spriteA.spriteFrame = AvatarAtlas.getSpriteFrame(spFrame);
          }
        } else {
          var _xhr = new XMLHttpRequest();

          _xhr.responseType = 'arraybuffer';

          _xhr.onreadystatechange = function () {
            log("xhr.readyState  " + _xhr.readyState);
            log("xhr.status  " + _xhr.status);

            if (_xhr.readyState === 4) {
              if (_xhr.status === 200) {
                saveFile(_xhr.response);
              } else {
                saveFile(null);
              }
            }
          }.bind(this);

          _xhr.open("GET", url, true);

          _xhr.send();
        }
      }

      function loadAvatarFacebook(avatarSprite, ava, atlas, prefix, leadingZeroLength, avatarDefault) {
        if (prefix === void 0) {
          prefix = 'avatar_';
        }

        if (leadingZeroLength === void 0) {
          leadingZeroLength = 0;
        }

        if (avatarDefault === void 0) {
          avatarDefault = 'avatar_01';
        }

        if (!avatarSprite || !avatarSprite.node) return;
        var defaultAvatar = atlas.getSpriteFrame(avatarDefault);
        if (!defaultAvatar) return;

        var _sframe = decodeURIComponent(ava);

        if ((ava + '').indexOf('avatar_') > -1) {
          _sframe = ava || avatarDefault;
        } else {
          if (!isNaN(ava)) {
            ava = Number.parseInt(ava);
          }

          if (lodash.isNumber(ava)) {
            // avatar start from 1
            ava += 1;

            if (leadingZeroLength > 0) {
              var zeroPad = function zeroPad(num, places) {
                return String(num).padStart(places, '0');
              };

              ava = zeroPad(ava, leadingZeroLength);
            }

            _sframe = prefix + ava;
          }
        }

        if (_sframe.indexOf('avatar_') > -1 && _sframe.indexOf("facebook") === -1 && _sframe.indexOf("http") > -1) {
          var avaId = _sframe.split('avatar_');

          var frame = defaultAvatar;

          if (avaId[1]) {
            frame = atlas.getSpriteFrame('avatar_' + avaId[1].replace('.png', ''));
          }

          frame = frame ? frame : defaultAvatar;
          avatarSprite.spriteFrame = frame;
          return false;
        } else if (_sframe.indexOf("http") === -1) {
          var _frame = atlas.getSpriteFrame(_sframe);

          _frame = _frame ? _frame : defaultAvatar;
          avatarSprite.spriteFrame = _frame;
          return false;
        } // else if(cc.sys.isNative){
        //     getFBAvatar(_sframe, avatarSprite, defaultAvatar, atlas);
        // } 
        else {
            if (_sframe.indexOf("facebook") !== -1) {
              _sframe = _sframe.replace("http://", "https://");
            }

            assetManager.loadRemote(decodeURIComponent(ava), {
              ext: 'png'
            }, function (err, imageRes) {
              if (!avatarSprite || !avatarSprite.node) return;

              if (err) {
                avatarSprite.spriteFrame = defaultAvatar;
              } else if (imageRes instanceof Texture2D) {
                var spriteFrame = new SpriteFrame();
                spriteFrame.texture = imageRes;

                if (avatarSprite && avatarSprite.node && avatarSprite.node.getComponent) {
                  var com = avatarSprite.node.getComponent(Sprite);

                  if (!com || isValid(com, true) == false) {
                    com = avatarSprite.node.addComponent(Sprite);
                  }

                  com.spriteFrame = new SpriteFrame();
                  com.spriteFrame.texture = spriteFrame.texture;
                }
              } else {
                avatarSprite.spriteFrame = defaultAvatar;
              }
            });
            return true;
          }
      }

      function setLayerForAllChildrens(target, layer) {
        target.walk(function (it) {
          it.layer = layer;
          it.off(Node.EventType.CHILD_ADDED);
          it.on(Node.EventType.CHILD_ADDED, function (child) {
            setLayerForAllChildrens(child, child.parent.layer);
          });
        }, function () {});
      }

      function setLayerAlls(target, layer) {
        target.walk(function (it) {
          it.layer = layer;
        }, function () {});
      }

      function setIndexZ(node, zIndex) {
        if (!node || !node.parent) return;
        var copySiblings = node.parent.children.slice();
        node['customIndexZ'] = zIndex;
        copySiblings.sort(function (a, b) {
          return (a['customIndexZ'] || 0) - (b['customIndexZ'] || 0);
        });

        for (var index = copySiblings.length - 1; index >= 0; index--) {
          var child = copySiblings[index];

          if (child.getSiblingIndex() !== index) {
            child.setSiblingIndex(index);
          }
        }
      }

      function registerLoadHowl() {
        if (globalThis.Howler) {
          assetManager.downloader['_downloaders']['.mp3cache'] = assetManager.downloader['_downloaders']['.mp3'];

          assetManager.downloader['_downloaders']['.mp3'] = function (url, options, onComplete) {
            var howl = new globalThis.Howl({
              src: [url],
              preload: true
            });
            howl.once('load', function () {
              onComplete(null, howl);
            });
            howl.once('loaderror', function () {
              onComplete(new Error("Fail to load sound " + url), howl);
            });
          };
        }
      }

      function unregisterLoadHowl() {
        var cacheLoader = assetManager.downloader['_downloaders']['.mp3cache'];

        if (cacheLoader) {
          assetManager.downloader['_downloaders']['.mp3'] = cacheLoader;
        }
      }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/VersionSlot.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './loadConfigAsync.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, JsonAsset, Label, log, Component, loadConfigAsync;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      JsonAsset = module.JsonAsset;
      Label = module.Label;
      log = module.log;
      Component = module.Component;
    }, function (module) {
      loadConfigAsync = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "73595x+dFJJepu1k+IdzF8R", "VersionSlot", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var VersionSlot = exports('VersionSlot', (_dec = ccclass('VersionSlot'), _dec2 = property(JsonAsset), _dec3 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(VersionSlot, _Component);

        function VersionSlot() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "versionFile", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "versionText", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = VersionSlot.prototype;

        _proto.onLoad = function onLoad() {
          var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
              IS_PRODUCTION = _loadConfigAsync$getC.IS_PRODUCTION;

          if (IS_PRODUCTION) {
            this.node.active = false;
          }
        };

        _proto.start = function start() {
          log(this.versionFile);
          this.versionText.string = this.versionFile.json["version"];
        };

        return VersionSlot;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "versionFile", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "versionText", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/WaitingLayer1989.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfWaitingLayer.ts', './gfActionHelper.ts', './utils.ts', './gfEventEmitter.ts', './gfBaseEvents.ts', './gfBaseConfig.ts', './gfNetworkGameEvent.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, gfWaitingLayer, stopAllActions, setOpacity, gfEventEmitter, gfBaseEvents, gfBaseConfig, gfNetworkGameEvent;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfWaitingLayer = module.gfWaitingLayer;
    }, function (module) {
      stopAllActions = module.stopAllActions;
    }, function (module) {
      setOpacity = module.setOpacity;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfNetworkGameEvent = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "b2f9eluA8BLwLc707FeZCEK", "WaitingLayer1989", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var WaitingLayer1989 = exports('WaitingLayer1989', (_dec = ccclass('WaitingLayer1989'), _dec(_class = /*#__PURE__*/function (_gfWaitingLayer) {
        _inheritsLoose(WaitingLayer1989, _gfWaitingLayer);

        function WaitingLayer1989() {
          return _gfWaitingLayer.apply(this, arguments) || this;
        }

        var _proto = WaitingLayer1989.prototype;

        _proto.showWaiting = function showWaiting(needTimeout, needTimeoutLoadScene) {
          var _this = this;

          if (needTimeout === void 0) {
            needTimeout = false;
          }

          this.unscheduleAllCallbacks();
          stopAllActions(this.node);
          this.scheduleOnce(function () {
            _this.node.active = true;
            setOpacity(_this.node, 255);

            if (needTimeout) {
              _this.scheduleOnce(function () {
                _this.hideWaiting();

                if (gfEventEmitter.instance) {
                  gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_PROMPT, gfNetworkGameEvent.MSG_CODE.WAITING_TIMEOUT);
                }
              }, gfBaseConfig.instance.waiting_timeout);
            }
          }, 0.3);
        };

        return WaitingLayer1989;
      }(gfWaitingLayer)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/WaitingLayer1998.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfWaitingLayer.ts', './gfUtilities.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, sys, v3, gfWaitingLayer, checkTablet;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sys = module.sys;
      v3 = module.v3;
    }, function (module) {
      gfWaitingLayer = module.gfWaitingLayer;
    }, function (module) {
      checkTablet = module.checkTablet;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "81c01dWBAFGlYwKGGIugzKn", "WaitingLayer1998", undefined);

      var ccclass = _decorator.ccclass;
      var WaitingLayer1998 = exports('WaitingLayer1998', (_dec = ccclass('WaitingLayer1998'), _dec(_class = /*#__PURE__*/function (_gfWaitingLayer) {
        _inheritsLoose(WaitingLayer1998, _gfWaitingLayer);

        function WaitingLayer1998() {
          return _gfWaitingLayer.apply(this, arguments) || this;
        }

        var _proto = WaitingLayer1998.prototype;

        _proto.onLoad = function onLoad() {
          _gfWaitingLayer.prototype.onLoad.call(this);

          if (checkTablet() || sys.platform === sys.Platform.DESKTOP_BROWSER) {
            this.node.scale = v3(0.7, 0.7, 0.7);
          } else {
            this.node.scale = v3(1, 1, 1);
          }
        };

        return WaitingLayer1998;
      }(gfWaitingLayer)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Wallet.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './GameObject.ts', './CustomEnum.ts', './CustomType.ts', './EventNames.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Button, Node, log, Label, tween, v3, tweenWalletMoney, tweenMoney, setOpacity, GameObject, WalletType, WalletString, EventNames;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Button = module.Button;
      Node = module.Node;
      log = module.log;
      Label = module.Label;
      tween = module.tween;
      v3 = module.v3;
    }, function (module) {
      tweenWalletMoney = module.tweenWalletMoney;
      tweenMoney = module.tweenMoney;
      setOpacity = module.setOpacity;
    }, function (module) {
      GameObject = module.GameObject;
    }, function (module) {
      WalletType = module.WalletType;
    }, function (module) {
      WalletString = module.WalletString;
    }, function (module) {
      EventNames = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12;

      cclegacy._RF.push({}, "a1552lmLtJE+LadTbPFRq48", "Wallet", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Wallet = exports('Wallet', (_dec = ccclass('Wallet'), _dec2 = property({
        type: WalletString
      }), _dec3 = property({
        type: Button
      }), _dec4 = property({
        type: Button
      }), _dec5 = property({
        type: Button
      }), _dec6 = property({
        type: Node
      }), _dec7 = property({
        type: Node
      }), _dec8 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(Wallet, _GameObject);

        function Wallet() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;
          _this.walletValue = [];
          _this.currentWallet = WalletType.NORMAL;
          _this.displayValues = [];
          _this.walletInited = false;

          _initializerDefineProperty(_this, "walletString", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "isWalletEvent", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buttonNormal", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buttonPromote", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buttonSwitch", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "walletNormal", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "walletPromo", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "walletTrial", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "walletSoundId", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "walletTopPos", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "walletBotPos", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "walletTextPosY", _descriptor12, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = Wallet.prototype;

        _proto.onLoad = function onLoad() {
          var _this2 = this;

          _GameObject.prototype.onLoad.call(this);

          this.node.on("UPDATE_WALLET", this.updateWallet, this);
          this.node.on("SWITCH_REAL", this.switchReal, this);
          this.node.on("SWITCH_TRIAL", this.switchTrial, this);
          this.node.on("ENABLE_SWITCH", this.enableSwitch, this);
          this.node.on('LOAD_WALLET_SELECT', this.loadWalletSelect, this);
          this.node.on("UPDATE_WALLET_TYPE", this.updateWalletType, this);
          this.walletString.forEach(function (it) {
            it.displayString.string = '';
            _this2.displayValues[it.walletType] = 0;
          });
        };

        _proto.updateWallet = function updateWallet(wallets, time) {
          var _this3 = this;

          if (time === void 0) {
            time = 0.3;
          }

          this.walletString.forEach(function (it) {
            var target = wallets[it.walletType] || 0;

            if (!_this3.dataStore.isPausingWallet(it.walletType) || !_this3.walletInited) {
              log("update wallet UI " + it.walletType + " : " + target);

              _this3.eventManager.emit(EventNames.START_UPDATE_WALLET);

              if (_this3.isFormatWallet) {
                tweenWalletMoney(it.displayString, time, _this3.displayValues[it.walletType], target);
              } else {
                tweenMoney(it.displayString, time, target);
              }

              _this3.displayValues[it.walletType] = target;

              _this3.dataStore.syncWalletUI(_this3.displayValues);
            }
          });
          this.walletInited = true;
        };

        _proto.loadWalletSelect = function loadWalletSelect() {
          this.setWalletDisplay(this.dataStore.getCurrentWalletType());
        };

        _proto.updateWalletType = function updateWalletType(types) {
          log("[Wallet] types " + types);

          if (types.length >= 2 && this.config.IS_SUPPORT_EVENT) {
            this.showPromoWallet();
          }
        };

        _proto.showPromoWallet = function showPromoWallet() {
          var _this4 = this;

          this.walletPromo.active = true;
          this.buttonSwitch.node.active = true;

          if (this.currentWallet == WalletType.NORMAL) {
            this.buttonNormal.interactable = true;
            this.buttonPromote.interactable = false;
          } else {
            this.buttonNormal.interactable = false;
            this.buttonPromote.interactable = true;
          }

          this.walletTrial.getComponentInChildren(Label).node.position.y = this.walletTextPosY;
          this.walletNormal.getComponentInChildren(Label).node.position.y = this.walletTextPosY;
          setOpacity(this.buttonSwitch.node, 1);
          tween(this.walletNormal).to(0.15, {
            position: v3(this.walletNormal.position.x, this.walletTopPos, 0)
          }).call(function () {
            _this4.walletTrial.setPosition(_this4.walletNormal.position);

            _this4.fadeIn(_this4.buttonSwitch, 0.1);
          }).start();
          tween(this.walletPromo).to(0.15, {
            position: v3(this.walletPromo.position.x, this.walletBotPos, 0)
          }).start();
        };

        _proto.switchTrial = function switchTrial() {
          this.walletNormal.active = false;
          this.walletTrial.active = true;
          this.buttonSwitch.interactable = false;
          this.buttonNormal.interactable = true;
          this.buttonPromote.interactable = false;
        };

        _proto.switchReal = function switchReal() {
          this.walletNormal.active = true;
          this.walletTrial.active = false;
          this.buttonSwitch.interactable = true;
          this.setWalletDisplay(this.dataStore.getCurrentWalletType());
        };

        _proto.enableSwitch = function enableSwitch(isEnable) {
          this.buttonSwitch.interactable = isEnable;
        };

        _proto.switchWallet = function switchWallet() {
          if (this.dataStore.isAutoSpinNormal) return;
          this.soundPlayer.playSFXClick();
          this.buttonSwitch.interactable = false;

          if (this.currentWallet == WalletType.NORMAL) {
            this.currentWallet = WalletType.PROMOTE;
            this.dataStore.switchWallet(this.currentWallet);
            this.eventManager.emit(EventNames.SWITCH_WALLET, WalletType.PROMOTE);
          } else {
            this.currentWallet = WalletType.NORMAL;
            this.dataStore.switchWallet(this.currentWallet);
            this.eventManager.emit(EventNames.SWITCH_WALLET, WalletType.NORMAL);
          }

          this.setWalletDisplay(this.currentWallet);
          this.buttonSwitch.interactable = true;

          if (this.walletSoundId) {
            this.walletSoundId && this.soundPlayer && this.soundPlayer.playSfx(this.walletSoundId);
          } else {
            this.soundPlayer && this.soundPlayer.playSFXClick();
          }
        };

        _proto.setWalletDisplay = function setWalletDisplay(type) {
          this.currentWallet = type;

          if (type == WalletType.NORMAL) {
            this.buttonNormal.interactable = true;
            this.buttonPromote.interactable = false;
          } else {
            this.buttonNormal.interactable = false;
            this.buttonPromote.interactable = true;
          }
        };

        _proto.onDestroy = function onDestroy() {
          this.node.off("UPDATE_WALLET", this.updateWallet, this);
        };

        return Wallet;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "walletString", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "isWalletEvent", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "buttonNormal", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "buttonPromote", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "buttonSwitch", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "walletNormal", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "walletPromo", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "walletTrial", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "walletSoundId", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "walletTopPos", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 20;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "walletBotPos", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return -25;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "walletTextPosY", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/WebSoundPlayer.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, _decorator, AudioClip, warn, log, game, tween;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      AudioClip = module.AudioClip;
      warn = module.warn;
      log = module.log;
      game = module.game;
      tween = module.tween;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "665a6jOt8tNUoF71xXbg++z", "WebSoundPlayer", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var WebSoundPlayer = exports('WebSoundPlayer', (_dec = ccclass('WebSoundPlayer'), _dec(_class = /*#__PURE__*/function () {
        function WebSoundPlayer() {
          this.musicMap = {};
          this.sfxMap = {};
          this.currentMusic = null;
          this._musicTween = null;
          this._sfxList = [];
          this.loadedSoundMap = {};
          this.musicInstance = null;
          this.sfxCachedOnHide = [];
          this.sfxCacheGesture = [];
          this.howlMap = {};
          this.totalSound = 0;
          this.onWebSoundLoaded = null;
          this._hasAudioContext = false;
          this._isMusicPlaying = false;
          this._gamePaused = false;
          this._soundLoaded = [];
          this._isThumbMode = false;
          this._playedInitMusic = false;
        }

        var _proto = WebSoundPlayer.prototype;

        _proto.init = function init() {} //merge more sound from dynamic loading
        ;

        _proto.loadDynamicSounds = function loadDynamicSounds(sfxList, callback) {
          this.loadSfxList(sfxList, callback);
        };

        _proto.loadMusicList = function loadMusicList(list, callback) {
          var _this = this;

          list.forEach(function (soundObj) {
            _this.musicMap[soundObj.soundId] = soundObj;
          });
          this.loadSoundList(list, callback);
        };

        _proto.loadSfxList = function loadSfxList(list, callback) {
          var _this2 = this;

          this._sfxList = this._sfxList.concat(list);
          list.forEach(function (soundObj) {
            _this2.sfxMap[soundObj.soundId] = soundObj;
          });
          this.loadSoundList(list, callback);
        };

        _proto.setThumbMode = function setThumbMode(isThumbMode) {
          this._isThumbMode = isThumbMode;
        };

        _proto.loadSoundList = function loadSoundList(soundList, callback) {
          var _this3 = this;

          var soundInfos = [];
          var loadTasks = [];
          this.loadedSoundMap = {};
          soundList.forEach(function (soundObj) {
            var clip = soundObj.audioFile;

            if (clip._nativeAsset instanceof globalThis.Howl) {
              _this3.howlMap[clip._uuid] = clip._nativeAsset;

              _this3._soundLoaded.push(clip._uuid);
            } else if (clip instanceof AudioClip) {
              soundInfos.push({
                uuid: clip._uuid,
                name: clip.name,
                src: clip['_meta'].url
              });
              _this3.loadedSoundMap[clip.name] = false;
            }
          });
          soundInfos.forEach(function (info) {
            if (_this3._soundLoaded.indexOf(info.uuid) < 0) {
              var task = new Promise(function (resolve, reject) {
                var howl = new globalThis.Howl({
                  src: [info.src],
                  preload: true
                });
                howl.once('load', function () {
                  _this3.howlMap[info.uuid] = howl;
                  resolve(true);
                });
                howl.once('loaderror', function () {
                  reject();
                });
              });
              loadTasks.push(task);

              _this3._soundLoaded.push(info.uuid);
            } else {
              warn('theres duplicated sound in list');
            }
          });
          Promise.all(loadTasks).then(function () {
            callback && callback();
          });
        };

        _proto.skipGesture = function skipGesture() {
          this._hasAudioContext = true;
        };

        _proto.resumeWithGesture = function resumeWithGesture() {
          this._hasAudioContext = true;

          if (this.musicInstance) {
            this.musicInstance.stop();

            if (this._isMusicPlaying) {
              this.musicInstance.play();
            }
          }

          this.sfxCacheGesture.forEach(function (sound) {
            var position = (Date.now() - sound.startTime) / 1000;
            var clip = sound.clip;

            if (sound.loop === true) {
              position = position % clip.duration();
            }

            if (position < clip.duration()) {
              clip.volume(sound.volume);
              clip.loop(sound.loop);
              var id = clip.play();
              clip.seek(position, id);
              log("[WebSoundPlayer] play resume sound " + sound.name);
            }
          });
          this.sfxCacheGesture = [];
        };

        _proto.onEventHide = function onEventHide() {
          this._gamePaused = true;
          if (!this._hasAudioContext) return;
          this.pauseMusic();
          this.pauseEffects();
        };

        _proto.onEventShow = function onEventShow() {
          var _this4 = this;

          if (!this._hasAudioContext || !this._gamePaused) return;
          var hasMusicPlay = this._playedInitMusic;
          this.resumeContext().then(function () {
            if (hasMusicPlay) {
              _this4.resumeMusic();
            }

            _this4.resumeEffects();
          });
          this._gamePaused = false;
        };

        _proto.playMusic = function playMusic(id, loop, volume) {
          if (loop === void 0) {
            loop = true;
          }

          var oldMusic = this.musicInstance;
          this._isMusicPlaying = true;
          this.currentMusic = this.musicMap[id];
          this.musicInstance = this.currentMusic ? this.howlMap[this.currentMusic.audioFile._uuid] : null;
          if (!this.musicInstance) return warn("[WebSoundPlayer] invalid Music:", id);
          if (this.musicInstance === oldMusic && this.musicInstance.playing()) return log("[WebSoundPlayer] duplicate play music " + id);

          if (oldMusic && oldMusic.playing()) {
            oldMusic.stop();
          }

          this.musicInstance.loop(loop);
          this.musicInstance.volume(volume);

          if (this._hasAudioContext && !game.isPaused()) {
            this.musicInstance.play();
          }

          this._playedInitMusic = true;
          log("[WebSoundPlayer] play music " + id);
        };

        _proto.getCurrentMusic = function getCurrentMusic() {
          return this.musicInstance;
        };

        _proto.pauseMusic = function pauseMusic() {
          if (this.musicInstance && this.musicInstance.playing()) {
            this.musicInstance.pause();
          }
        };

        _proto.resumeMusic = function resumeMusic() {
          if (this.musicInstance && this._isMusicPlaying) {
            this.musicInstance.play();
          }
        };

        _proto.stopMusic = function stopMusic() {
          log("[WebSoundPlayer] stop music");
          this._isMusicPlaying = false;

          if (this.musicInstance && this.musicInstance.playing()) {
            this.musicInstance.stop();
          }
        };

        _proto.muteMusic = function muteMusic() {
          if (this.musicInstance) {
            this.musicInstance.volume(0);
          }
        };

        _proto.unmuteMusic = function unmuteMusic(volume) {
          if (volume === void 0) {
            volume = 1;
          }

          if (this.musicInstance) {
            this.musicInstance.volume(volume);
          }
        };

        _proto.setMusicVolume = function setMusicVolume(volume) {
          if (this.musicInstance) {
            this.musicInstance.volume(volume);
          }
        };

        _proto.playSfx = function playSfx(sfx, loop, volume) {
          if (loop === void 0) {
            loop = false;
          }

          var soundObj = this.sfxMap[sfx];

          if (!soundObj) {
            warn("playSfx: invalid sfx", sfx);
            return null;
          }

          var clip = this.howlMap[soundObj.audioFile._uuid];

          if (clip) {
            if (this._hasAudioContext) {
              if (clip.playing()) {
                clip.stop();
              }

              clip.loop(loop);
              clip.volume(volume);
              clip.play();

              if (this._gamePaused) {
                clip.pause();
              }
            } else {
              this.sfxCacheGesture.push({
                name: sfx,
                clip: clip,
                startTime: Date.now(),
                volume: volume,
                loop: loop
              });
            }

            return {
              clip: clip
            };
          }
        };

        _proto.resumeContext = function resumeContext() {
          var Howler = globalThis.Howler;
          return Howler.ctx.suspend().then(function () {
            return Howler.ctx.resume();
          });
        };

        _proto.playSfxOneShot = function playSfxOneShot(sfx, volume, loop) {
          if (loop === void 0) {
            loop = false;
          }

          if (!this.sfxMap.hasOwnProperty(sfx)) return warn("playSfxOneShot: invalid sfx", sfx);
          var soundObj = this.sfxMap[sfx];
          var clip = this.howlMap[soundObj.audioFile._uuid];
          if (!clip) return warn("playSfxOneShot: invalid howl", soundObj);
          var id;

          if (this._hasAudioContext) {
            clip.volume(volume);
            id = clip.play();
            clip.loop(loop, id);
            this._gamePaused && clip.pause(id);
          } else {
            this.sfxCacheGesture.push({
              name: sfx,
              clip: clip,
              startTime: Date.now(),
              volume: volume,
              loop: loop
            });
          }

          return {
            clip: clip,
            id: id
          };
        };

        _proto.stopSfxOneShot = function stopSfxOneShot(sfxData) {
          if (!sfxData) return warn("stopSfxOneShot invalid data", sfxData);
          var clip = sfxData.clip,
              id = sfxData.id;
          clip && clip.stop(id);

          this._removeClipFromGestureList(clip);
        };

        _proto.stopSfx = function stopSfx(sfx) {
          var soundObj = this.sfxMap[sfx];

          if (soundObj) {
            var clip = this.howlMap[soundObj.audioFile._uuid];

            if (clip) {
              if (clip.playing()) {
                clip.stop();
              } else {
                log(sfx + " is not playing");
              }

              this._removeClipFromGestureList(clip);
            }
          }
        };

        _proto.stopAllEffects = function stopAllEffects() {
          var _this5 = this;

          this._sfxList.forEach(function (sfx) {
            _this5.stopSfx(sfx.soundId);
          });
        };

        _proto.pauseEffects = function pauseEffects() {
          var _this6 = this;

          this._sfxList.forEach(function (it) {
            var clip = _this6.howlMap[it.audioFile._uuid];

            if (clip && clip.playing()) {
              clip.pause();

              _this6.sfxCachedOnHide.push(clip);
            }
          });
        };

        _proto.resumeEffects = function resumeEffects() {
          this.sfxCachedOnHide.forEach(function (it) {
            it.play();
          });
          this.sfxCachedOnHide = [];
        };

        _proto.resumeEffect = function resumeEffect(sfx) {
          var soundObj = this.sfxMap[sfx];
          var clip = this.howlMap[soundObj.audioFile._uuid];

          if (clip && clip.playing()) {
            clip.play();
          }
        };

        _proto.setEffectVolume = function setEffectVolume(volume, immediate) {
          var _this7 = this;

          this._sfxList.forEach(function (sfx) {
            _this7._setSfxVolume(sfx.soundId, volume);
          });
        };

        _proto.fadeMusicTo = function fadeMusicTo(duration, volume) {
          if (this.musicInstance) {
            var currentVolume = this.musicInstance.volume();
            duration *= 1000;

            if (this.musicInstance.playing()) {
              this.musicInstance.fade(currentVolume, volume, duration);
            } else {
              this.musicInstance.volume(volume);
            }
          }
        };

        _proto.fadeSoundTo = function fadeSoundTo(sfx, duration, volume) {
          if (this.sfxMap.hasOwnProperty(sfx)) {
            var soundObj = this.sfxMap[sfx];
            var clip = this.howlMap[soundObj.audioFile._uuid];
            var currentVolume = clip.volume();
            duration *= 1000;

            if (clip.playing()) {
              clip.fade(currentVolume, volume, duration);
            } else {
              clip.volume(volume);
            }
          }
        };

        _proto.stopAllAudio = function stopAllAudio() {
          this.stopAllEffects();
          this.stopMusic();
        };

        _proto.playHowl = function playHowl(howl, options, id) {
          if (id === void 0) {
            id = -1;
          }

          if (options.loop) howl.loop(options.loop);
          if (options.volume) howl.volume(options.volume);
          if (options.offset) howl.seek(options.offset);
          return id >= 0 ? howl.play(id) : howl.play();
        };

        _proto._setSfxVolume = function _setSfxVolume(sfx, volume) {
          var soundObj = this.sfxMap[sfx];

          if (soundObj) {
            var clip = this.howlMap[soundObj.audioFile._uuid];

            if (clip) {
              clip.volume(volume);
            }
          }
        };

        _proto._removeClipFromGestureList = function _removeClipFromGestureList(clip) {
          if (this.sfxCacheGesture && this.sfxCacheGesture.length > 0 && clip) {
            var index = this.sfxCacheGesture.findIndex(function (i) {
              return i.clip == clip;
            });
            index >= 0 && this.sfxCacheGesture.splice(index, 1);
          }
        };

        _proto.onDestroy = function onDestroy() {
          for (var i in this.howlMap) {
            this.howlMap[i].unload();
          }

          if (this._musicTween) {
            this._musicTween.stop();
          }

          this._soundLoaded = [];
        };

        _proto._testPlayMusic = function _testPlayMusic() {
          var _this8 = this;

          var musicId = "BGM_MAIN";
          tween(this).call(function () {
            _this8.stopMusic();
          }).delay(0.5).call(function () {
            _this8.playMusic(musicId, true);

            log(_this8.musicInstance.seek());
          }).delay(1).call(function () {
            _this8.playMusic(musicId, true);
          }).call(function () {
            if (Math.round(_this8.musicInstance.seek()) !== 1) {
              log("FAIL!");
            } else {
              log("passed");
            }
          }).start();
        };

        return WebSoundPlayer;
      }()) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/WinAmount.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts', './utils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Label, error, log, GameObject, formatMoney, fadeOut, tweenMoney;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      error = module.error;
      log = module.log;
    }, function (module) {
      GameObject = module.GameObject;
    }, function (module) {
      formatMoney = module.formatMoney;
      fadeOut = module.fadeOut;
      tweenMoney = module.tweenMoney;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "0199dlcTOhLAKY3Gsr8BcpY", "WinAmount", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var WinAmount = exports('WinAmount', (_dec = ccclass('WinAmount'), _dec2 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(WinAmount, _GameObject);

        function WinAmount() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;
          _this._currentValue = 0;
          _this._winValue = void 0;
          _this._callBackOnComplete = void 0;
          _this._tweenValue = void 0;
          _this._tweenFade = void 0;

          _initializerDefineProperty(_this, "labelWinAmount", _descriptor, _assertThisInitialized(_this));

          _this.isDebug = true;
          return _this;
        }

        var _proto = WinAmount.prototype;

        _proto._updateLabelWinAmount = function _updateLabelWinAmount() {
          this.labelWinAmount.string = this.currentValue > 0 ? "" + formatMoney(this._currentValue) : "";
        };

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          this.node.on("UPDATE_WIN_AMOUNT", this.updateWinAmount, this);
          this.node.on('FAST_UPDATE_WIN_AMOUNT', this.fastUpdateWinAmount, this);
          this.node.on('RESET_NUMBER', this.clearWinAmount, this);
          this.node.on('FADE_OUT_NUMBER', this.fadeOutNumber, this);
          this.labelWinAmount.string = '';
        };

        _proto.fastUpdateWinAmount = function fastUpdateWinAmount(_ref) {
          var value = _ref.value,
              time = _ref.time;
          if (!value) value = this._winValue;

          if (value < this._currentValue || value < this._winValue) {
            error("Logic fail: Could not speed up to the smaller value", {
              current: this._currentValue,
              endValue: this._winValue,
              fastUpdateValue: value
            });
            return;
          }

          this._tweenWinAmount(value, time);
        };

        _proto.clearWinAmount = function clearWinAmount() {
          this.isDebug && log("clearWinAmount");

          this._resetLabel();

          this.currentValue = 0;
          this.labelWinAmount.string = "";
          this._winValue = 0;
        };

        _proto.fadeOutNumber = function fadeOutNumber(time) {
          var _this2 = this;

          if (time === void 0) {
            time = 1;
          }

          if (!this.labelWinAmount || this._winValue <= 0) return;
          this.node.isFading = true;

          if (this._tweenValue) {
            this.currentValue = this._winValue;
            this.labelWinAmount.string = formatMoney(this.currentValue);
          }

          this.stopTweenValue();
          this.resetCallBack();
          this.scheduleOnce(function () {
            _this2._tweenFade = fadeOut(_this2.labelWinAmount.node, time, {
              onComplete: function onComplete() {
                _this2.node.isFading = false;

                _this2.clearWinAmount();
              }
            });
          }, 0.1);
        };

        _proto.updateWinAmount = function updateWinAmount(_ref2, callback) {
          var value = _ref2.value,
              time = _ref2.time,
              isLastest = _ref2.isLastest;

          if (this._tweenFade) {
            this._tweenFade.stop();
          }

          if (isLastest && this.dataStore) {
            value = this.dataStore.playSession.winAmount;
          }

          if (value < this._currentValue || value < this._winValue) {
            log("Logic fail somewhere, script clear winamount have not ran yet", {
              current: this._currentValue,
              endValue: this._winValue,
              fastUpdateValue: value
            });
            this.clearWinAmount();
          }

          this._callBackOnComplete = callback;
          this._winValue = value;
          time = this._currentValue === value ? 0 : time;

          this._tweenWinAmount(value, time);
        };

        _proto._tweenWinAmount = function _tweenWinAmount(value, time) {
          var _this3 = this;

          this._resetLabel();

          if (time === 0) {
            this.currentValue = value;
            this.labelWinAmount.string = formatMoney(this.currentValue);
            this.resetCallBack();
            log("show win Amount instantly", {
              value: value,
              time: time
            });
            return;
          }

          this._tweenValue = tweenMoney(this.labelWinAmount, time, value, {
            onComplete: function onComplete() {
              _this3.resetCallBack();

              _this3._tweenValue = null;
            }
          });
        };

        _proto._resetLabel = function _resetLabel() {
          this.stopTweenFade();
          this.stopTweenValue();
          this.setOpacity(this.labelWinAmount.node, 255);
          this.node.isFading = false;
        };

        _proto.resetCallBack = function resetCallBack() {
          this._callBackOnComplete && this._callBackOnComplete();
          this._callBackOnComplete = null;
        };

        _proto.stopTweenFade = function stopTweenFade() {
          this._tweenFade && this._tweenFade.stop();
          this._tweenFade = null;
        };

        _proto.stopTweenValue = function stopTweenValue() {
          this._tweenValue && this._tweenValue.stop();
          this._tweenValue = null;
        };

        _proto.onDestroy = function onDestroy() {
          this.stopTweenFade();
          this.stopTweenValue();
        };

        _createClass(WinAmount, [{
          key: "currentValue",
          get: function get() {
            return this._currentValue;
          },
          set: function set(value) {
            if (this._currentValue !== value) {
              this._currentValue = value;

              this._updateLabelWinAmount();
            }
          }
        }]);

        return WinAmount;
      }(GameObject), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "labelWinAmount", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/WinEffect.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SlotUIScene.ts', './utils.ts', './CustomEnum.ts', './EventNames.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, ParticleSystem2D, SpriteFrame, Label, tween, Vec3, Sprite, log, SlotUIScene, formatMoney, fadeOut, WinEffectLevel, PerformanceLevel, EventNames;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      ParticleSystem2D = module.ParticleSystem2D;
      SpriteFrame = module.SpriteFrame;
      Label = module.Label;
      tween = module.tween;
      Vec3 = module.Vec3;
      Sprite = module.Sprite;
      log = module.log;
    }, function (module) {
      SlotUIScene = module.SlotUIScene;
    }, function (module) {
      formatMoney = module.formatMoney;
      fadeOut = module.fadeOut;
    }, function (module) {
      WinEffectLevel = module.WinEffectLevel;
      PerformanceLevel = module.PerformanceLevel;
    }, function (module) {
      EventNames = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15;

      cclegacy._RF.push({}, "4a1b71CROJMQbYrRztOGsp4", "WinEffect", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          integer = _decorator.integer;
      var WinEffect = exports('WinEffect', (_dec = ccclass('WinEffect'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: Node
      }), _dec6 = property({
        type: Node
      }), _dec7 = property({
        type: ParticleSystem2D
      }), _dec8 = property({
        type: SpriteFrame
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_SlotUIScene) {
        _inheritsLoose(WinEffect, _SlotUIScene);

        function WinEffect() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SlotUIScene.call.apply(_SlotUIScene, [this].concat(args)) || this;
          _this.isShowFastEffect = false;
          _this.isShowNormalEffect = false;
          _this.isUpdating = false;
          _this.speedUp = false;
          _this.skippable = false;
          _this.callback = null;
          _this.label = void 0;
          _this.currentValue = 0;
          _this.currentTitle = 0;
          _this.megaWinAmount = 0;
          _this.superWinAmount = 0;
          _this.nodeTween = void 0;
          _this.winAmountTween = void 0;
          _this.titleTween = void 0;
          _this.content = void 0;

          _initializerDefineProperty(_this, "winAmount", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "overlayNode", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "title", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "winInfo", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "coinsEffect", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "fastParticle", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "titleFrame", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bigWinDur", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "megaWinDur", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "superWinDur", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "megaRate", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "superRate", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "delayShowTime", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "hideTime", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "animDuration", _descriptor15, _assertThisInitialized(_this));

          _this.animationLevel = 2;
          return _this;
        }

        var _proto = WinEffect.prototype;

        _proto.onLoad = function onLoad() {
          _SlotUIScene.prototype.onLoad.call(this);

          this.label = this.winAmount.getComponentInChildren(Label);
        };

        _proto.enter = function enter() {
          this.eventManager.emit(EventNames.BIGWIN_START);
          var performanceLvl = this.dataStore && this.dataStore.performanceLevel || 'HIGH_PERFORMANCE_LV';
          this.animationLevel = this.config[performanceLvl].BIG_WIN_ANIMATION;
          var modeTurbo = this.dataStore.modeTurbo;
          if (this.coinsEffect) this.setOpacity(this.coinsEffect, 255);
          modeTurbo ? this.showFastEffectWin() : this.showEffectWin();
        };

        _proto.showFastEffectWin = function showFastEffectWin() {
          var _this2 = this; // turbo


          if (this.isShowFastEffect) {
            this.callback && this.callback();
            this.callback = null;
            return;
          }

          this.isShowFastEffect = true;
          this.setOpacity(this.winInfo, 0);

          if (this.overlayNode) {
            this.overlayNode.active = false;
          }

          this.fastParticle && this.fastParticle.resetSystem();
          this.callback && this.callback();
          this.callback = null;
          this.nodeTween && this.nodeTween.stop();
          this.nodeTween = tween(this.node).delay(1).call(function () {
            _this2.fastParticle && _this2.fastParticle.stopSystem();
          }).delay(2).call(function () {
            _this2.exit();
          }).start();
        };

        _proto.showEffectWin = function showEffectWin() {
          this.isShowNormalEffect = true;

          if (this.overlayNode) {
            this.overlayNode.active = true;
          }

          this.setOpacity(this.winInfo, 255);
          this.playSoundStart();
          this.winAmountTween = tween(this.winAmount).repeatForever(tween().to(0.2, {
            scale: new Vec3(1.2, 1.2, 1.2)
          }).to(0.2, {
            scale: new Vec3(1, 1, 1)
          })).start();
          this.titleTween = tween(this.title).repeatForever(tween().to(0.5, {
            scale: new Vec3(1.2, 1.2, 1.2)
          }).to(0.5, {
            scale: new Vec3(1, 1, 1)
          })).start();
          this.initValue();
          this.startParticle();
          this.startUpdateWinAmount();
        };

        _proto.playSoundStart = function playSoundStart() {
          var _this3 = this;

          if (!this.soundPlayer) return;
          this.soundPlayer.stopAllAudio();
          this.soundPlayer.playSfx('BIG_WIN');
          this.scheduleOnce(function () {
            _this3.soundPlayer.playSfx('BIG_WIN_LOOP', true);
          }, 2);
        };

        _proto.playSoundEnd = function playSoundEnd() {
          if (!this.soundPlayer) return;
          this.soundPlayer.stopAllEffects();
          this.soundPlayer.playSfx('BIG_WIN_END');
        };

        _proto.initValue = function initValue() {
          this.winInfo.setScale(1, 1, 1);
          this.currentValue = 0;
          this.currentTitle = 0;
          this.label.string = '';
          if (this.title) this.title.getComponent(Sprite).spriteFrame = this.titleFrame[0];
          var _this$content = this.content,
              winType = _this$content.winType,
              bigWinConfig = _this$content.bigWinConfig,
              currentBetData = _this$content.currentBetData;
          var listConfig = bigWinConfig ? bigWinConfig.split(',') : [];

          if (winType && bigWinConfig) {
            this.megaWinAmount = currentBetData * listConfig[WinEffectLevel.MEGA];
            this.superWinAmount = currentBetData * listConfig[WinEffectLevel.SUPER];

            switch (Number(WinEffectLevel[winType])) {
              case WinEffectLevel.SUPER:
                this.animDuration = this.superWinDur;
                break;

              case WinEffectLevel.MEGA:
                this.animDuration = this.megaWinDur;
                break;

              default:
                this.animDuration = this.bigWinDur;
                break;
            }

            if (winType) log('show ' + winType + ' in ' + this.animDuration + ' second', ' with config: ', listConfig);
          } else {
            this.megaWinAmount = currentBetData * this.megaRate;
            this.superWinAmount = currentBetData * this.superRate;
          }

          this.isUpdating = true;
          this.speedUp = false;
          this.bindQuickShow();
        };

        _proto.bindQuickShow = function bindQuickShow() {
          var _this4 = this;

          this.skippable = false;
          tween(this.node).delay(this.hideTime).call(function () {
            _this4.skippable = true;
          }).delay(this.animDuration - this.delayShowTime).call(function () {
            _this4.skippable = false;
          }).start();
        };

        _proto.startParticle = function startParticle() {
          if (!this.coinsEffect || this.animationLevel < Number(PerformanceLevel.Medium)) return;
          this.coinsEffect.emit('START_PARTICLE');
        };

        _proto.startUpdateWinAmount = function startUpdateWinAmount() {
          var _this5 = this;

          var reverseEasing = function reverseEasing(easing) {
            return function (t) {
              return 1 - easing(1 - t);
            };
          };

          var speedUpEasing = function speedUpEasing(t) {
            return t * t;
          }; // constant accelerated


          var slowDownEasing = reverseEasing(function (t) {
            return t * t;
          });
          var halfAmount = 0.5 * this.content.winAmount;
          this.nodeTween = tween(this);
          this.nodeTween.to(0.5 * this.animDuration, {
            currentValue: halfAmount
          }, {
            easing: speedUpEasing
          }).to(0.5 * this.animDuration, {
            currentValue: this.content.winAmount
          }, {
            easing: slowDownEasing
          }).delay(0.5).call(function () {
            _this5.skippable = false;
            _this5.nodeTween = null;

            _this5.finish();
          }).start();
        };

        _proto.update = function update(dt) {
          if (!this.isUpdating) return;
          this.label.string = formatMoney(this.currentValue);

          if (this.currentValue >= this.superWinAmount && this.currentTitle == 1) {
            this.changeTitle(2);
          } else if (this.currentValue >= this.megaWinAmount && this.currentTitle == 0) {
            this.changeTitle(1);
          }
        };

        _proto.changeTitle = function changeTitle(index) {
          var _this6 = this;

          this.currentTitle = index;
          if (!this.title) return;
          this.titleTween = tween(this.title).to(0.2, {
            scale: new Vec3(1.5, 1.5, 1.5)
          }).call(function () {
            _this6.title.getComponent(Sprite).spriteFrame = _this6.titleFrame[index];
          }).to(0.2, {
            scale: new Vec3(1, 1, 1)
          }).call(function () {
            tween(_this6.title).repeatForever(tween().to(0.5, {
              scale: new Vec3(1.2, 1.2, 1.2)
            }).to(0.5, {
              scale: new Vec3(1, 1, 1)
            })).start();
          }).start();
        };

        _proto.onClick = function onClick() {
          var _this7 = this;

          if (!this.isUpdating || this.speedUp) return;
          if (!this.skippable) return;
          this.speedUp = true;
          this.winAmountTween.stop();
          var scaleTime = 0.13;
          tween(this.winAmount).repeatForever(tween().to(scaleTime, {
            scale: new Vec3(1.2, 1.2, 1.2)
          }).to(scaleTime, {
            scale: new Vec3(1, 1, 1)
          })).start();

          if (this.nodeTween) {
            this.nodeTween.stop();
            this.nodeTween = null;
          }

          this.currentValue = this.content.winAmount;
          this.nodeTween = tween(this);
          this.nodeTween.to(1, {
            currentValue: this.content.winAmount
          }).call(function () {
            _this7.finish();
          }).start();
        };

        _proto.stopParticle = function stopParticle() {
          if (!this.coinsEffect || this.animationLevel < Number(PerformanceLevel.Medium)) return;
          this.coinsEffect.emit('STOP_PARTICLE');
        };

        _proto.finish = function finish() {
          var _this8 = this;

          this.isUpdating = false;
          this.label.string = formatMoney(this.content.winAmount);
          this.winAmountTween && this.winAmountTween.stop();
          this.titleTween && this.titleTween.stop();
          this.nodeTween && this.nodeTween.stop();
          this.stopParticle();
          this.playSoundEnd();
          tween(this.winInfo).delay(this.delayShowTime).call(function () {
            fadeOut(_this8.winInfo, _this8.hideTime);
            if (_this8.coinsEffect) _this8.setOpacity(_this8.coinsEffect, 0);
          }).delay(this.hideTime).call(function () {
            _this8.label.string = '';

            _this8.exit();

            _this8.soundPlayer && _this8.soundPlayer.stopAllAudio();
            _this8.soundPlayer && _this8.soundPlayer.playMainBGM();
          }).start();
        };

        _proto.exit = function exit() {
          this.soundPlayer && this.soundPlayer.stopAllEffects();
          this.eventManager.emit(EventNames.BIGWIN_END);

          _SlotUIScene.prototype.exit.call(this);

          this.isShowFastEffect = false;
          this.isShowNormalEffect = false;
        };

        _proto.onDisable = function onDisable() {
          if (this.nodeTween) {
            this.nodeTween.stop();
            this.nodeTween = null;
          }
        };

        return WinEffect;
      }(SlotUIScene), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "winAmount", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "overlayNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "title", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "winInfo", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "coinsEffect", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "fastParticle", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "titleFrame", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "bigWinDur", [integer], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 3;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "megaWinDur", [integer], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 5;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "superWinDur", [integer], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 8;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "megaRate", [integer], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 20;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "superRate", [integer], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 30;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "delayShowTime", [integer, integer], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 2;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "hideTime", [integer], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.5;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "animDuration", [integer], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 9;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/WinEffectv2.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SlotUIScene.ts', './utils.ts', './CustomEnum.ts', './EventNames.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, ParticleSystem2D, SpriteFrame, Label, sp, Event, tween, Vec3, Sprite, SlotUIScene, fadeIn, formatMoney, WinEffectLevel, PerformanceLevel, EventNames;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      ParticleSystem2D = module.ParticleSystem2D;
      SpriteFrame = module.SpriteFrame;
      Label = module.Label;
      sp = module.sp;
      Event = module.Event;
      tween = module.tween;
      Vec3 = module.Vec3;
      Sprite = module.Sprite;
    }, function (module) {
      SlotUIScene = module.SlotUIScene;
    }, function (module) {
      fadeIn = module.fadeIn;
      formatMoney = module.formatMoney;
    }, function (module) {
      WinEffectLevel = module.WinEffectLevel;
      PerformanceLevel = module.PerformanceLevel;
    }, function (module) {
      EventNames = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24, _descriptor25;

      cclegacy._RF.push({}, "e778f2vnhZK1YyKBd7vAXKT", "WinEffectv2", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          integer = _decorator.integer;
      var WinEffectv2 = exports('WinEffectv2', (_dec = ccclass('WinEffectv2'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: Node
      }), _dec6 = property({
        type: Node
      }), _dec7 = property({
        type: ParticleSystem2D
      }), _dec8 = property({
        type: SpriteFrame
      }), _dec9 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_SlotUIScene) {
        _inheritsLoose(WinEffectv2, _SlotUIScene);

        function WinEffectv2() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SlotUIScene.call.apply(_SlotUIScene, [this].concat(args)) || this;
          _this.isUpdating = false;
          _this.speedUp = false;
          _this.skippable = false;
          _this.callback = null;
          _this.label = void 0;
          _this.currentValue = 0;
          _this.currentTitle = 0;
          _this.megaWinAmount = 0;
          _this.superWinAmount = 0;
          _this.nodeTween = void 0;
          _this.winAmountTween = void 0;
          _this.titleTween = void 0;
          _this.content = void 0;
          _this.canFinish = false;

          _initializerDefineProperty(_this, "winAmount", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "overlayNode", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "title", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "winInfo", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "coinsEffect", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "fastParticle", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "titleFrame", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "winAnim", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bigWinDur", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "megaWinDur", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "superWinDur", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "megaRate", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "superRate", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "delayShowTime", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "delayHideTime", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "hideTime", _descriptor16, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bigWinSound", _descriptor17, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "megaWinSound", _descriptor18, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "superWinSound", _descriptor19, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bigWinAnimIdle", _descriptor20, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bigWinAnimStart", _descriptor21, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "megaWinAnimIdle", _descriptor22, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "megaWinAnimStart", _descriptor23, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "superWinAnimIdle", _descriptor24, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "superWinAnimStart", _descriptor25, _assertThisInitialized(_this));

          _this.animationLevel = 2;
          _this.winAnimSkeleton = null;
          _this.isSkipEffect = false;
          _this.winSound = 'BIG_WIN';
          return _this;
        }

        var _proto = WinEffectv2.prototype;

        _proto.onLoad = function onLoad() {
          _SlotUIScene.prototype.onLoad.call(this);

          this.label = this.winAmount.getComponentInChildren(Label);
          if (this.winAnim) this.winAnimSkeleton = this.winAnim.getComponent(sp.Skeleton);
        };

        _proto.enter = function enter() {
          this.mainDirector.currentGameMode.emit('SPIN_DISABLE');
          this.eventManager.emit(EventNames.BIGWIN_START);
          var performanceLvl = this.dataStore && this.dataStore.performanceLevel || 'HIGH_PERFORMANCE_LV';
          this.animationLevel = this.config[performanceLvl].BIG_WIN_ANIMATION;
          if (this.coinsEffect) this.setOpacity(this.coinsEffect, 255);
          this.showEffectWin();

          if (!this.dataStore.isTrialMode) {
            var updatedEvent = new Event('NOTIFY_OPEN_BIGWIN', true);
            updatedEvent.winAmount = this.content.winAmount;
            updatedEvent.winType = this.getWinType();
            updatedEvent.gameId = this.config.GAME_ID;
            this.node.dispatchEvent(updatedEvent);
          }
        };

        _proto.showEffectWin = function showEffectWin() {
          var _this2 = this;

          if (this.overlayNode) this.overlayNode.active = true;
          this.setOpacity(this.winInfo, 1);
          fadeIn(this.winInfo, this.delayShowTime);
          this.winAmountTween = tween(this.winAmount).repeatForever(tween().to(0.2, {
            scale: new Vec3(1.2, 1.2, 1.2)
          }).to(0.2, {
            scale: new Vec3(1, 1, 1)
          })).start();

          if (this.title) {
            this.titleTween = tween(this.title).repeatForever(tween().to(0.5, {
              scale: new Vec3(1.2, 1.2, 1.2)
            }).to(0.5, {
              scale: new Vec3(1, 1, 1)
            })).start();
          }

          this.initValue();
          this.playSoundStart();
          tween(this.node).delay(this.delayShowTime).call(function () {
            _this2.startParticle();

            _this2.playCoinSound();

            _this2.startUpdateWinAmount('BIG_WIN');

            _this2.setAnimation(_this2.bigWinAnimStart, _this2.bigWinAnimIdle);
          }).start();
        };

        _proto.initValue = function initValue() {
          this.canFinish = false;
          this.winInfo.setScale(1, 1, 1);
          this.currentValue = 0;
          this.currentTitle = 0;
          this.label.string = '';
          if (this.title) this.title.getComponent(Sprite).spriteFrame = this.titleFrame[0];
          var _this$content = this.content,
              currentBetData = _this$content.currentBetData,
              bigWinConfig = _this$content.bigWinConfig;
          var winRates = [];

          if (bigWinConfig) {
            winRates = bigWinConfig.split(',');
            this.megaRate = winRates[WinEffectLevel.MEGA] || this.megaRate;
            this.superRate = winRates[WinEffectLevel.SUPER] || this.superRate;
          }

          this.megaWinAmount = currentBetData * Number(this.megaRate);
          this.superWinAmount = currentBetData * Number(this.superRate);
          this.isUpdating = true;
          this.speedUp = false;
          this.bindQuickShow();
          this.isSkipEffect = this.content.winAmount >= this.superWinAmount * 2;
          this.coinsEffect.emit('RESET_COIN_EFFECT');
        };

        _proto.playSoundStart = function playSoundStart() {
          if (!this.soundPlayer) return;
          this.soundPlayer.stopAllAudio();
          this.winSound = this.bigWinSound;

          if (this.content.winAmount >= this.superWinAmount) {
            if (this.superWinSound) this.winSound = this.superWinSound;
          } else if (this.content.winAmount >= this.megaWinAmount) {
            if (this.megaWinSound) this.winSound = this.megaWinSound;
          }

          this.soundPlayer.playSfx(this.winSound);
        };

        _proto.playSoundEnd = function playSoundEnd() {
          if (!this.soundPlayer) return;
          this.soundPlayer.stopAllEffects();
        };

        _proto.getWinType = function getWinType() {
          var winType = 'BIG';

          if (this.content.winAmount > this.superWinAmount) {
            winType = 'SUPER';
          } else if (this.content.winAmount > this.megaWinAmount) {
            winType = 'MEGA';
          }

          return winType;
        };

        _proto.playCoinSound = function playCoinSound() {};

        _proto.bindQuickShow = function bindQuickShow() {
          var _this3 = this;

          this.skippable = false;
          tween(this.node).delay(this.hideTime).call(function () {
            _this3.skippable = true;
          }).delay(this.bigWinDur + this.megaWinDur + this.superWinDur).call(function () {
            _this3.skippable = false;
          }).start();
        };

        _proto.startParticle = function startParticle() {
          if (!this.coinsEffect) return;
          if (this.animationLevel < Number(PerformanceLevel.Medium)) return;
          this.coinsEffect.emit('SHOW_COIN_EFFECT', 0, this.isSkipEffect);
          this.coinsEffect.emit('START_PARTICLE');
        };

        _proto.startUpdateWinAmount = function startUpdateWinAmount(winType) {
          var _this4 = this;

          var winAmount = this.content.winAmount;
          var animDuration = 0;
          if (this.canFinish) return;

          if (winType === 'BIG_WIN') {
            animDuration = this.bigWinDur;

            if (this.content.winAmount > this.megaWinAmount) {
              winAmount = this.megaWinAmount;
            } else {
              this.canFinish = true;
            }
          } else if (winType === 'MEGA_WIN') {
            animDuration = this.megaWinDur;

            if (this.content.winAmount > this.superWinAmount) {
              winAmount = this.superWinAmount;
            } else {
              this.canFinish = true;
            }
          } else {
            animDuration = this.superWinDur;
            this.canFinish = true;
          }

          var speedUpEasing = function speedUpEasing(t) {
            return t * t;
          };

          this.nodeTween && this.nodeTween.stop();
          this.nodeTween = tween(this);
          this.nodeTween.to(animDuration, {
            currentValue: winAmount
          }, {
            easing: speedUpEasing
          }).call(function () {
            if (_this4.canFinish) _this4.skippable = false;
          });

          if (this.canFinish) {
            this.nodeTween.delay(1).call(function () {
              _this4.skippable = false;
              _this4.nodeTween = null;

              _this4.finish();
            });
          }

          this.nodeTween.start();
        };

        _proto.update = function update(dt) {
          if (!this.isUpdating) return;
          this.label.string = formatMoney(this.currentValue);

          if (this.currentValue >= this.superWinAmount && this.currentTitle == 1) {
            this.currentTitle = 2;

            if (this.animationLevel >= Number(PerformanceLevel.Medium)) {
              this.coinsEffect.emit('SHOW_COIN_EFFECT', 2, this.isSkipEffect);
            }

            this.setAnimation(this.superWinAnimStart, this.superWinAnimIdle);
            this.changeTitle(2);
            this.startUpdateWinAmount('SUPER_WIN');
          } else if (this.currentValue >= this.megaWinAmount && this.currentTitle == 0) {
            this.currentTitle = 1;

            if (this.animationLevel >= Number(PerformanceLevel.Medium)) {
              this.coinsEffect.emit('SHOW_COIN_EFFECT', 1, this.isSkipEffect);
            }

            this.setAnimation(this.megaWinAnimStart, this.megaWinAnimIdle);
            this.changeTitle(1);
            this.startUpdateWinAmount('MEGA_WIN');
          }
        };

        _proto.changeTitle = function changeTitle(index) {
          var _this5 = this;

          this.currentTitle = index;
          if (!this.title || !this.titleFrame || !this.titleFrame.length) return;
          this.titleTween = tween(this.title).to(0.2, {
            scale: new Vec3(1.5, 1.5, 1.5)
          }).call(function () {
            _this5.title.getComponent(Sprite).spriteFrame = _this5.titleFrame[index];
          }).to(0.2, {
            scale: new Vec3(1, 1, 1)
          }).call(function () {
            tween(_this5.title).repeatForever(tween().to(0.5, {
              scale: new Vec3(1.2, 1.2, 1.2)
            }).to(0.5, {
              scale: new Vec3(1, 1, 1)
            })).start();
          }).start();
        };

        _proto.onClick = function onClick() {
          var _this6 = this;

          if (!this.isUpdating || this.speedUp || this.canFinish || !this.skippable) return;
          this.canFinish = true;
          this.speedUp = true;
          this.winAmountTween.stop();
          var scaleTime = 0.13;
          tween(this.winAmount).repeatForever(tween().to(scaleTime, {
            scale: new Vec3(1.2, 1.2, 1.2)
          }).to(scaleTime, {
            scale: new Vec3(1, 1, 1)
          })).start();
          this.nodeTween && this.nodeTween.stop();
          this.currentValue = this.content.winAmount;
          this.nodeTween = tween(this);
          this.nodeTween.to(1, {
            currentValue: this.content.winAmount
          }).call(function () {
            _this6.nodeTween = null;

            _this6.finish();
          }).start();
        };

        _proto.stopParticle = function stopParticle() {
          if (!this.coinsEffect) return;
          if (this.animationLevel < Number(PerformanceLevel.Medium)) return;
          this.coinsEffect.emit('HIDE_COIN_EFFECT');
        };

        _proto.finish = function finish() {
          var _this7 = this;

          this.isUpdating = false;
          this.label.string = formatMoney(this.content.winAmount);
          this.winAmountTween && this.winAmountTween.stop();
          this.titleTween && this.titleTween.stop();
          this.nodeTween && this.nodeTween.stop();
          this.stopParticle();
          this.playSoundEnd();
          tween(this.winInfo).delay(this.delayHideTime).call(function () {
            _this7.fadeTo(_this7.winInfo, _this7.hideTime, 1);

            if (_this7.coinsEffect) _this7.setOpacity(_this7.coinsEffect, 0);
          }).delay(this.hideTime).call(function () {
            _this7.label.string = '';

            _this7.eventManager.emit(EventNames.BIGWIN_END);

            _this7.exit();

            _this7.soundPlayer && _this7.soundPlayer.stopAllAudio();
            _this7.soundPlayer && _this7.soundPlayer.playMainBGM();
          }).start();
        };

        _proto.onDisable = function onDisable() {
          if (this.nodeTween) {
            this.nodeTween.stop();
            this.nodeTween = null;
          }
        };

        _proto.setAnimation = function setAnimation(current, next) {
          var _this8 = this;

          if (!current || !next || !this.winAnimSkeleton) return;
          this.winAnimSkeleton.setAnimation(0, current, false);
          this.winAnimSkeleton.setCompleteListener(function (listener) {
            _this8.winAnimSkeleton.setCompleteListener(function () {});

            if (listener.animation.name === current) {
              _this8.winAnimSkeleton.setAnimation(0, next, true);
            }
          });
        };

        _proto.exit = function exit() {
          this.mainDirector.currentGameMode.emit('SPIN_ENABLE');
          this.eventManager.emit(EventNames.BIGWIN_END);

          _SlotUIScene.prototype.exit.call(this);
        };

        return WinEffectv2;
      }(SlotUIScene), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "winAmount", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "overlayNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "title", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "winInfo", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "coinsEffect", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "fastParticle", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "titleFrame", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "winAnim", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "bigWinDur", [integer], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 4;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "megaWinDur", [integer], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 6;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "superWinDur", [integer], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 6;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "megaRate", [integer], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 20;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "superRate", [integer], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 30;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "delayShowTime", [integer], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "delayHideTime", [integer], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "hideTime", [integer], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.5;
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "bigWinSound", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'BIG_WIN';
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "megaWinSound", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'MEGA_WIN';
        }
      }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "superWinSound", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'SUPER_WIN';
        }
      }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "bigWinAnimIdle", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor21 = _applyDecoratedDescriptor(_class2.prototype, "bigWinAnimStart", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor22 = _applyDecoratedDescriptor(_class2.prototype, "megaWinAnimIdle", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor23 = _applyDecoratedDescriptor(_class2.prototype, "megaWinAnimStart", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor24 = _applyDecoratedDescriptor(_class2.prototype, "superWinAnimIdle", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor25 = _applyDecoratedDescriptor(_class2.prototype, "superWinAnimStart", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Writer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "3b5668ki+5NjJgo65RO5IY2", "Writer", undefined);

      var ccclass = _decorator.ccclass;
      var Writer = exports('Writer', (_dec = ccclass('Writer'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Writer, _Component);

        function Writer() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = Writer.prototype;

        _proto.onLoad = function onLoad() {
          this.node['writer'] = this;
        };

        _proto.makeScriptResume = function makeScriptResume(data) {
          // this.node['gSlotDataStore'].formatData(data);
          return [{
            command: "_stateResume"
          }];
        };

        _proto.makeScriptUpdate = function makeScriptUpdate(data) {
          // this.node['gSlotDataStore'].formatData(data);
          return [{
            command: "_stateUpdate"
          }];
        };

        return Writer;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/x64-core.ts", ['cc', './crypto-core.ts'], function (exports) {
  'use strict';

  var cclegacy, CryptoJS;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      CryptoJS = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "831f4MLuttBKYuR24inm+u/", "x64-core", undefined);

      var C = CryptoJS;
      var C_lib = C.lib;
      var Base = C_lib.Base;
      var X32WordArray = C_lib.WordArray;
      /**
       * x64 namespace.
       */

      var C_x64 = exports('default', C.x64 = {});
      /**
       * A 64-bit word.
       */

      C_x64.Word = Base.extend({
        /**
         * Initializes a newly created 64-bit word.
         *
         * @param {number} high The high 32 bits.
         * @param {number} low The low 32 bits.
         *
         * @example
         *
         *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);
         */
        init: function init(high, low) {
          this.high = high;
          this.low = low;
        }
        /**
         * Bitwise NOTs this word.
         *
         * @return {X64Word} A new x64-Word object after negating.
         *
         * @example
         *
         *     var negated = x64Word.not();
         */
        // not: function () {
        // var high = ~this.high;
        // var low = ~this.low;
        // return X64Word.create(high, low);
        // },

        /**
         * Bitwise ANDs this word with the passed word.
         *
         * @param {X64Word} word The x64-Word to AND with this word.
         *
         * @return {X64Word} A new x64-Word object after ANDing.
         *
         * @example
         *
         *     var anded = x64Word.and(anotherX64Word);
         */
        // and: function (word) {
        // var high = this.high & word.high;
        // var low = this.low & word.low;
        // return X64Word.create(high, low);
        // },

        /**
         * Bitwise ORs this word with the passed word.
         *
         * @param {X64Word} word The x64-Word to OR with this word.
         *
         * @return {X64Word} A new x64-Word object after ORing.
         *
         * @example
         *
         *     var ored = x64Word.or(anotherX64Word);
         */
        // or: function (word) {
        // var high = this.high | word.high;
        // var low = this.low | word.low;
        // return X64Word.create(high, low);
        // },

        /**
         * Bitwise XORs this word with the passed word.
         *
         * @param {X64Word} word The x64-Word to XOR with this word.
         *
         * @return {X64Word} A new x64-Word object after XORing.
         *
         * @example
         *
         *     var xored = x64Word.xor(anotherX64Word);
         */
        // xor: function (word) {
        // var high = this.high ^ word.high;
        // var low = this.low ^ word.low;
        // return X64Word.create(high, low);
        // },

        /**
         * Shifts this word n bits to the left.
         *
         * @param {number} n The number of bits to shift.
         *
         * @return {X64Word} A new x64-Word object after shifting.
         *
         * @example
         *
         *     var shifted = x64Word.shiftL(25);
         */
        // shiftL: function (n) {
        // if (n < 32) {
        // var high = (this.high << n) | (this.low >>> (32 - n));
        // var low = this.low << n;
        // } else {
        // var high = this.low << (n - 32);
        // var low = 0;
        // }
        // return X64Word.create(high, low);
        // },

        /**
         * Shifts this word n bits to the right.
         *
         * @param {number} n The number of bits to shift.
         *
         * @return {X64Word} A new x64-Word object after shifting.
         *
         * @example
         *
         *     var shifted = x64Word.shiftR(7);
         */
        // shiftR: function (n) {
        // if (n < 32) {
        // var low = (this.low >>> n) | (this.high << (32 - n));
        // var high = this.high >>> n;
        // } else {
        // var low = this.high >>> (n - 32);
        // var high = 0;
        // }
        // return X64Word.create(high, low);
        // },

        /**
         * Rotates this word n bits to the left.
         *
         * @param {number} n The number of bits to rotate.
         *
         * @return {X64Word} A new x64-Word object after rotating.
         *
         * @example
         *
         *     var rotated = x64Word.rotL(25);
         */
        // rotL: function (n) {
        // return this.shiftL(n).or(this.shiftR(64 - n));
        // },

        /**
         * Rotates this word n bits to the right.
         *
         * @param {number} n The number of bits to rotate.
         *
         * @return {X64Word} A new x64-Word object after rotating.
         *
         * @example
         *
         *     var rotated = x64Word.rotR(7);
         */
        // rotR: function (n) {
        // return this.shiftR(n).or(this.shiftL(64 - n));
        // },

        /**
         * Adds this word with the passed word.
         *
         * @param {X64Word} word The x64-Word to add with this word.
         *
         * @return {X64Word} A new x64-Word object after adding.
         *
         * @example
         *
         *     var added = x64Word.add(anotherX64Word);
         */
        // add: function (word) {
        // var low = (this.low + word.low) | 0;
        // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;
        // var high = (this.high + word.high + carry) | 0;
        // return X64Word.create(high, low);
        // }

      });
      /**
       * An array of 64-bit words.
       *
       * @property {Array} words The array of CryptoJS.x64.Word objects.
       * @property {number} sigBytes The number of significant bytes in this word array.
       */

      C_x64.WordArray = Base.extend({
        /**
         * Initializes a newly created word array.
         *
         * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.
         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
         *
         * @example
         *
         *     var wordArray = CryptoJS.x64.WordArray.create();
         *
         *     var wordArray = CryptoJS.x64.WordArray.create([
         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
         *     ]);
         *
         *     var wordArray = CryptoJS.x64.WordArray.create([
         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
         *     ], 10);
         */
        init: function init(words, sigBytes) {
          words = this.words = words || [];

          if (sigBytes != undefined) {
            this.sigBytes = sigBytes;
          } else {
            this.sigBytes = words.length * 8;
          }
        },

        /**
         * Converts this 64-bit word array to a 32-bit word array.
         *
         * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.
         *
         * @example
         *
         *     var x32WordArray = x64WordArray.toX32();
         */
        toX32: function toX32() {
          // Shortcuts
          var x64Words = this.words;
          var x64WordsLength = x64Words.length; // Convert

          var x32Words = [];

          for (var i = 0; i < x64WordsLength; i++) {
            var x64Word = x64Words[i];
            x32Words.push(x64Word.high);
            x32Words.push(x64Word.low);
          }

          return X32WordArray.create(x32Words, this.sigBytes);
        },

        /**
         * Creates a copy of this word array.
         *
         * @return {X64WordArray} The clone.
         *
         * @example
         *
         *     var clone = x64WordArray.clone();
         */
        clone: function clone() {
          var clone = Base.clone.call(this); // Clone "words" array

          var words = clone.words = this.words.slice(0); // Clone each X64Word object

          var wordsLength = words.length;

          for (var i = 0; i < wordsLength; i++) {
            words[i] = words[i].clone();
          }

          return clone;
        }
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/XOCypher.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "effd4CcclVCIblXmo9eBV5+", "XOCypher", undefined);

      var b64_table = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";

      var XORCipher = /*#__PURE__*/function () {
        function XORCipher() {}

        var _proto = XORCipher.prototype;

        _proto.encode = function encode(key, data) {
          data = xor_encrypt(key, data);
          return b64_encode(data);
        };

        _proto.decode = function decode(key, data) {
          data = b64_decode(data);
          return xor_decrypt(key, data);
        };

        _proto.encode_new = function encode_new(key, data) {
          data = xor_encrypt_new(key, data);
          return b64_encode(data);
        };

        _proto.decode_new = function decode_new(key, data) {
          data = b64_decode(data);
          return xor_decrypt_new(key, data);
        };

        return XORCipher;
      }();

      function stringToUtf8ByteArray(str) {
        var out = [],
            p = 0;

        for (var i = 0; i < str.length; i++) {
          var c = str.charCodeAt(i);

          if (c < 128) {
            out[p++] = c;
          } else if (c < 2048) {
            out[p++] = c >> 6 | 192;
            out[p++] = c & 63 | 128;
          } else if ((c & 0xFC00) == 0xD800 && i + 1 < str.length && (str.charCodeAt(i + 1) & 0xFC00) == 0xDC00) {
            // Surrogate Pair
            c = 0x10000 + ((c & 0x03FF) << 10) + (str.charCodeAt(++i) & 0x03FF);
            out[p++] = c >> 18 | 240;
            out[p++] = c >> 12 & 63 | 128;
            out[p++] = c >> 6 & 63 | 128;
            out[p++] = c & 63 | 128;
          } else {
            out[p++] = c >> 12 | 224;
            out[p++] = c >> 6 & 63 | 128;
            out[p++] = c & 63 | 128;
          }
        }

        return out;
      }

      function utf8ByteArrayToString(bytes) {
        var out = [],
            pos = 0,
            c = 0;

        while (pos < bytes.length) {
          var c1 = bytes[pos++];

          if (c1 < 128) {
            out[c++] = String.fromCharCode(c1);
          } else if (c1 > 191 && c1 < 224) {
            var c2 = bytes[pos++];
            out[c++] = String.fromCharCode((c1 & 31) << 6 | c2 & 63);
          } else if (c1 > 239 && c1 < 365) {
            // Surrogate Pair
            var _c = bytes[pos++]; // eslint-disable-line

            var c3 = bytes[pos++];
            var c4 = bytes[pos++];
            var u = ((c1 & 7) << 18 | (_c & 63) << 12 | (c3 & 63) << 6 | c4 & 63) - 0x10000;
            out[c++] = String.fromCharCode(0xD800 + (u >> 10));
            out[c++] = String.fromCharCode(0xDC00 + (u & 1023));
          } else {
            var _c2 = bytes[pos++]; // eslint-disable-line

            var _c3 = bytes[pos++]; // eslint-disable-line

            out[c++] = String.fromCharCode((c1 & 15) << 12 | (_c2 & 63) << 6 | _c3 & 63);
          }
        }

        return out.join('');
      }

      function b64_encode(data) {
        var o1,
            o2,
            o3,
            h1,
            h2,
            h3,
            h4,
            bits,
            r,
            i = 0,
            enc = "";

        if (!data) {
          return data;
        }

        do {
          o1 = data[i++];
          o2 = data[i++];
          o3 = data[i++];
          bits = o1 << 16 | o2 << 8 | o3;
          h1 = bits >> 18 & 0x3f;
          h2 = bits >> 12 & 0x3f;
          h3 = bits >> 6 & 0x3f;
          h4 = bits & 0x3f;
          enc += b64_table.charAt(h1) + b64_table.charAt(h2) + b64_table.charAt(h3) + b64_table.charAt(h4);
        } while (i < data.length);

        r = data.length % 3;
        return (r ? enc.slice(0, r - 3) : enc) + "===".slice(r || 3);
      }

      function b64_decode(data) {
        var o1,
            o2,
            o3,
            h1,
            h2,
            h3,
            h4,
            bits,
            i = 0,
            result = [];

        if (!data) {
          return data;
        }

        data += "";

        do {
          h1 = b64_table.indexOf(data.charAt(i++));
          h2 = b64_table.indexOf(data.charAt(i++));
          h3 = b64_table.indexOf(data.charAt(i++));
          h4 = b64_table.indexOf(data.charAt(i++));
          bits = h1 << 18 | h2 << 12 | h3 << 6 | h4;
          o1 = bits >> 16 & 0xff;
          o2 = bits >> 8 & 0xff;
          o3 = bits & 0xff;
          result.push(o1);

          if (h3 !== 64) {
            result.push(o2);

            if (h4 !== 64) {
              result.push(o3);
            }
          }
        } while (i < data.length);

        return result;
      }

      function xor_encrypt(key, data) {
        key = stringToUtf8ByteArray(key);
        return stringToUtf8ByteArray(data).map(function (c, i) {
          return c ^ Math.floor(i % key.length);
        });
      }

      function xor_decrypt(key, data) {
        key = stringToUtf8ByteArray(key);
        return utf8ByteArrayToString(data.map(function (c, i) {
          return c ^ Math.floor(i % key.length);
        }));
      }

      function xor_encrypt_new(key, data) {
        key = stringToUtf8ByteArray(key);
        return stringToUtf8ByteArray(data).map(function (c, i) {
          return c ^ key[Math.floor(i % key.length)];
        });
      }

      function xor_decrypt_new(key, data) {
        key = stringToUtf8ByteArray(key);
        return utf8ByteArrayToString(data.map(function (c, i) {
          return c ^ key[Math.floor(i % key.length)];
        }));
      }

      var xorCipher = exports('default', new XORCipher());

      cclegacy._RF.pop();
    }
  };
});

(function(r) {
  r('virtual:///prerequisite-imports/main', 'chunks:///_virtual/main'); 
})(function(mid, cid) {
    System.register(mid, [cid], function (_export, _context) {
    return {
        setters: [function(_m) {
            var _exportObj = {};

            for (var _key in _m) {
              if (_key !== "default" && _key !== "__esModule") _exportObj[_key] = _m[_key];
            }
      
            _export(_exportObj);
        }],
        execute: function () { }
    };
    });
});